
usb_device.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000065a4  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  0800672c  0800672c  0001672c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006784  08006784  0002011c  2**0
                  CONTENTS
  4 .ARM          00000008  08006784  08006784  00016784  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800678c  0800678c  0002011c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800678c  0800678c  0001678c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006790  08006790  00016790  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000011c  20000000  08006794  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002011c  2**0
                  CONTENTS
 10 .bss          00000a28  2000011c  2000011c  0002011c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000b44  20000b44  0002011c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002011c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000cf63  00000000  00000000  0002014c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002651  00000000  00000000  0002d0af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ac8  00000000  00000000  0002f700  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000009a0  00000000  00000000  000301c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022726  00000000  00000000  00030b68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000df23  00000000  00000000  0005328e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c3b43  00000000  00000000  000611b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00124cf4  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002ac4  00000000  00000000  00124d44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000011c 	.word	0x2000011c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08006714 	.word	0x08006714

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000120 	.word	0x20000120
 80001c4:	08006714 	.word	0x08006714

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <main>:
}subKeyBoard;

subKeyBoard keyBoardHIDsub = {0,0,0,0,0,0,0,0};

int main(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d0:	f000 f964 	bl	800079c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d4:	f000 f832 	bl	800053c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d8:	f000 f89a 	bl	8000610 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 80004dc:	f005 fcb6 	bl	8005e4c <MX_USB_DEVICE_Init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  //keyBoardHIDsub.MODIFIER=0x02;  // To press shift key
	  keyBoardHIDsub.KEYCODE1=0x04;  // Press A key
 80004e0:	4b14      	ldr	r3, [pc, #80]	; (8000534 <main+0x68>)
 80004e2:	2204      	movs	r2, #4
 80004e4:	709a      	strb	r2, [r3, #2]
	  keyBoardHIDsub.KEYCODE2=0x05;  // Press B key
 80004e6:	4b13      	ldr	r3, [pc, #76]	; (8000534 <main+0x68>)
 80004e8:	2205      	movs	r2, #5
 80004ea:	70da      	strb	r2, [r3, #3]
	  keyBoardHIDsub.KEYCODE3=0x06;  // Press C key
 80004ec:	4b11      	ldr	r3, [pc, #68]	; (8000534 <main+0x68>)
 80004ee:	2206      	movs	r2, #6
 80004f0:	711a      	strb	r2, [r3, #4]
	  keyBoardHIDsub.KEYCODE4=0x80;	 // Volume up - only works on linux
 80004f2:	4b10      	ldr	r3, [pc, #64]	; (8000534 <main+0x68>)
 80004f4:	2280      	movs	r2, #128	; 0x80
 80004f6:	715a      	strb	r2, [r3, #5]
	  USBD_HID_SendReport(&hUsbDeviceFS,&keyBoardHIDsub,sizeof(keyBoardHIDsub));
 80004f8:	2208      	movs	r2, #8
 80004fa:	490e      	ldr	r1, [pc, #56]	; (8000534 <main+0x68>)
 80004fc:	480e      	ldr	r0, [pc, #56]	; (8000538 <main+0x6c>)
 80004fe:	f004 f92b 	bl	8004758 <USBD_HID_SendReport>
	  HAL_Delay(50); 		       // Press all key for 50 milliseconds
 8000502:	2032      	movs	r0, #50	; 0x32
 8000504:	f000 f9bc 	bl	8000880 <HAL_Delay>
	  //keyBoardHIDsub.MODIFIER=0x00;  // To release shift key
	  keyBoardHIDsub.KEYCODE1=0x00;  // Release A key
 8000508:	4b0a      	ldr	r3, [pc, #40]	; (8000534 <main+0x68>)
 800050a:	2200      	movs	r2, #0
 800050c:	709a      	strb	r2, [r3, #2]
	  keyBoardHIDsub.KEYCODE2=0x00;  // Release B key
 800050e:	4b09      	ldr	r3, [pc, #36]	; (8000534 <main+0x68>)
 8000510:	2200      	movs	r2, #0
 8000512:	70da      	strb	r2, [r3, #3]
	  keyBoardHIDsub.KEYCODE3=0x00;  // Release C key
 8000514:	4b07      	ldr	r3, [pc, #28]	; (8000534 <main+0x68>)
 8000516:	2200      	movs	r2, #0
 8000518:	711a      	strb	r2, [r3, #4]
	  keyBoardHIDsub.KEYCODE4=0x00;	 // Clear buffer from volume up
 800051a:	4b06      	ldr	r3, [pc, #24]	; (8000534 <main+0x68>)
 800051c:	2200      	movs	r2, #0
 800051e:	715a      	strb	r2, [r3, #5]
	  USBD_HID_SendReport(&hUsbDeviceFS,&keyBoardHIDsub,sizeof(keyBoardHIDsub));
 8000520:	2208      	movs	r2, #8
 8000522:	4904      	ldr	r1, [pc, #16]	; (8000534 <main+0x68>)
 8000524:	4804      	ldr	r0, [pc, #16]	; (8000538 <main+0x6c>)
 8000526:	f004 f917 	bl	8004758 <USBD_HID_SendReport>
	  HAL_Delay(1000); 	       // Repeat this task on every 1 second
 800052a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800052e:	f000 f9a7 	bl	8000880 <HAL_Delay>
	  keyBoardHIDsub.KEYCODE1=0x04;  // Press A key
 8000532:	e7d5      	b.n	80004e0 <main+0x14>
 8000534:	20000138 	.word	0x20000138
 8000538:	20000148 	.word	0x20000148

0800053c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b094      	sub	sp, #80	; 0x50
 8000540:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000542:	f107 0320 	add.w	r3, r7, #32
 8000546:	2230      	movs	r2, #48	; 0x30
 8000548:	2100      	movs	r1, #0
 800054a:	4618      	mov	r0, r3
 800054c:	f006 f8da 	bl	8006704 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000550:	f107 030c 	add.w	r3, r7, #12
 8000554:	2200      	movs	r2, #0
 8000556:	601a      	str	r2, [r3, #0]
 8000558:	605a      	str	r2, [r3, #4]
 800055a:	609a      	str	r2, [r3, #8]
 800055c:	60da      	str	r2, [r3, #12]
 800055e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000560:	2300      	movs	r3, #0
 8000562:	60bb      	str	r3, [r7, #8]
 8000564:	4b28      	ldr	r3, [pc, #160]	; (8000608 <SystemClock_Config+0xcc>)
 8000566:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000568:	4a27      	ldr	r2, [pc, #156]	; (8000608 <SystemClock_Config+0xcc>)
 800056a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800056e:	6413      	str	r3, [r2, #64]	; 0x40
 8000570:	4b25      	ldr	r3, [pc, #148]	; (8000608 <SystemClock_Config+0xcc>)
 8000572:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000574:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000578:	60bb      	str	r3, [r7, #8]
 800057a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800057c:	2300      	movs	r3, #0
 800057e:	607b      	str	r3, [r7, #4]
 8000580:	4b22      	ldr	r3, [pc, #136]	; (800060c <SystemClock_Config+0xd0>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	4a21      	ldr	r2, [pc, #132]	; (800060c <SystemClock_Config+0xd0>)
 8000586:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800058a:	6013      	str	r3, [r2, #0]
 800058c:	4b1f      	ldr	r3, [pc, #124]	; (800060c <SystemClock_Config+0xd0>)
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000594:	607b      	str	r3, [r7, #4]
 8000596:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000598:	2301      	movs	r3, #1
 800059a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800059c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005a0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005a2:	2302      	movs	r3, #2
 80005a4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005a6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80005ac:	2319      	movs	r3, #25
 80005ae:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80005b0:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80005b4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005b6:	2302      	movs	r3, #2
 80005b8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80005ba:	2307      	movs	r3, #7
 80005bc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005be:	f107 0320 	add.w	r3, r7, #32
 80005c2:	4618      	mov	r0, r3
 80005c4:	f001 fe94 	bl	80022f0 <HAL_RCC_OscConfig>
 80005c8:	4603      	mov	r3, r0
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d001      	beq.n	80005d2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80005ce:	f000 f847 	bl	8000660 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005d2:	230f      	movs	r3, #15
 80005d4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005d6:	2302      	movs	r3, #2
 80005d8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005da:	2300      	movs	r3, #0
 80005dc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005de:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80005e2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005e8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80005ea:	f107 030c 	add.w	r3, r7, #12
 80005ee:	2105      	movs	r1, #5
 80005f0:	4618      	mov	r0, r3
 80005f2:	f002 f8f5 	bl	80027e0 <HAL_RCC_ClockConfig>
 80005f6:	4603      	mov	r3, r0
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d001      	beq.n	8000600 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80005fc:	f000 f830 	bl	8000660 <Error_Handler>
  }
}
 8000600:	bf00      	nop
 8000602:	3750      	adds	r7, #80	; 0x50
 8000604:	46bd      	mov	sp, r7
 8000606:	bd80      	pop	{r7, pc}
 8000608:	40023800 	.word	0x40023800
 800060c:	40007000 	.word	0x40007000

08000610 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000610:	b480      	push	{r7}
 8000612:	b083      	sub	sp, #12
 8000614:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000616:	2300      	movs	r3, #0
 8000618:	607b      	str	r3, [r7, #4]
 800061a:	4b10      	ldr	r3, [pc, #64]	; (800065c <MX_GPIO_Init+0x4c>)
 800061c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800061e:	4a0f      	ldr	r2, [pc, #60]	; (800065c <MX_GPIO_Init+0x4c>)
 8000620:	f043 0301 	orr.w	r3, r3, #1
 8000624:	6313      	str	r3, [r2, #48]	; 0x30
 8000626:	4b0d      	ldr	r3, [pc, #52]	; (800065c <MX_GPIO_Init+0x4c>)
 8000628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800062a:	f003 0301 	and.w	r3, r3, #1
 800062e:	607b      	str	r3, [r7, #4]
 8000630:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000632:	2300      	movs	r3, #0
 8000634:	603b      	str	r3, [r7, #0]
 8000636:	4b09      	ldr	r3, [pc, #36]	; (800065c <MX_GPIO_Init+0x4c>)
 8000638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800063a:	4a08      	ldr	r2, [pc, #32]	; (800065c <MX_GPIO_Init+0x4c>)
 800063c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000640:	6313      	str	r3, [r2, #48]	; 0x30
 8000642:	4b06      	ldr	r3, [pc, #24]	; (800065c <MX_GPIO_Init+0x4c>)
 8000644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000646:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800064a:	603b      	str	r3, [r7, #0]
 800064c:	683b      	ldr	r3, [r7, #0]

}
 800064e:	bf00      	nop
 8000650:	370c      	adds	r7, #12
 8000652:	46bd      	mov	sp, r7
 8000654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000658:	4770      	bx	lr
 800065a:	bf00      	nop
 800065c:	40023800 	.word	0x40023800

08000660 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000660:	b480      	push	{r7}
 8000662:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000664:	b672      	cpsid	i
}
 8000666:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000668:	e7fe      	b.n	8000668 <Error_Handler+0x8>
	...

0800066c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b082      	sub	sp, #8
 8000670:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000672:	2300      	movs	r3, #0
 8000674:	607b      	str	r3, [r7, #4]
 8000676:	4b10      	ldr	r3, [pc, #64]	; (80006b8 <HAL_MspInit+0x4c>)
 8000678:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800067a:	4a0f      	ldr	r2, [pc, #60]	; (80006b8 <HAL_MspInit+0x4c>)
 800067c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000680:	6453      	str	r3, [r2, #68]	; 0x44
 8000682:	4b0d      	ldr	r3, [pc, #52]	; (80006b8 <HAL_MspInit+0x4c>)
 8000684:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000686:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800068a:	607b      	str	r3, [r7, #4]
 800068c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800068e:	2300      	movs	r3, #0
 8000690:	603b      	str	r3, [r7, #0]
 8000692:	4b09      	ldr	r3, [pc, #36]	; (80006b8 <HAL_MspInit+0x4c>)
 8000694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000696:	4a08      	ldr	r2, [pc, #32]	; (80006b8 <HAL_MspInit+0x4c>)
 8000698:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800069c:	6413      	str	r3, [r2, #64]	; 0x40
 800069e:	4b06      	ldr	r3, [pc, #24]	; (80006b8 <HAL_MspInit+0x4c>)
 80006a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006a6:	603b      	str	r3, [r7, #0]
 80006a8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80006aa:	2007      	movs	r0, #7
 80006ac:	f000 f9dc 	bl	8000a68 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006b0:	bf00      	nop
 80006b2:	3708      	adds	r7, #8
 80006b4:	46bd      	mov	sp, r7
 80006b6:	bd80      	pop	{r7, pc}
 80006b8:	40023800 	.word	0x40023800

080006bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006bc:	b480      	push	{r7}
 80006be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80006c0:	e7fe      	b.n	80006c0 <NMI_Handler+0x4>

080006c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006c2:	b480      	push	{r7}
 80006c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006c6:	e7fe      	b.n	80006c6 <HardFault_Handler+0x4>

080006c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006c8:	b480      	push	{r7}
 80006ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006cc:	e7fe      	b.n	80006cc <MemManage_Handler+0x4>

080006ce <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006ce:	b480      	push	{r7}
 80006d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006d2:	e7fe      	b.n	80006d2 <BusFault_Handler+0x4>

080006d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006d4:	b480      	push	{r7}
 80006d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006d8:	e7fe      	b.n	80006d8 <UsageFault_Handler+0x4>

080006da <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006da:	b480      	push	{r7}
 80006dc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80006de:	bf00      	nop
 80006e0:	46bd      	mov	sp, r7
 80006e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e6:	4770      	bx	lr

080006e8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006e8:	b480      	push	{r7}
 80006ea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006ec:	bf00      	nop
 80006ee:	46bd      	mov	sp, r7
 80006f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f4:	4770      	bx	lr

080006f6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006f6:	b480      	push	{r7}
 80006f8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006fa:	bf00      	nop
 80006fc:	46bd      	mov	sp, r7
 80006fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000702:	4770      	bx	lr

08000704 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000708:	f000 f89a 	bl	8000840 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800070c:	bf00      	nop
 800070e:	bd80      	pop	{r7, pc}

08000710 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000714:	4802      	ldr	r0, [pc, #8]	; (8000720 <OTG_FS_IRQHandler+0x10>)
 8000716:	f000 fcd5 	bl	80010c4 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800071a:	bf00      	nop
 800071c:	bd80      	pop	{r7, pc}
 800071e:	bf00      	nop
 8000720:	20000624 	.word	0x20000624

08000724 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000724:	b480      	push	{r7}
 8000726:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000728:	4b06      	ldr	r3, [pc, #24]	; (8000744 <SystemInit+0x20>)
 800072a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800072e:	4a05      	ldr	r2, [pc, #20]	; (8000744 <SystemInit+0x20>)
 8000730:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000734:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000738:	bf00      	nop
 800073a:	46bd      	mov	sp, r7
 800073c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000740:	4770      	bx	lr
 8000742:	bf00      	nop
 8000744:	e000ed00 	.word	0xe000ed00

08000748 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000748:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000780 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800074c:	480d      	ldr	r0, [pc, #52]	; (8000784 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800074e:	490e      	ldr	r1, [pc, #56]	; (8000788 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000750:	4a0e      	ldr	r2, [pc, #56]	; (800078c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000752:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000754:	e002      	b.n	800075c <LoopCopyDataInit>

08000756 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000756:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000758:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800075a:	3304      	adds	r3, #4

0800075c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800075c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800075e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000760:	d3f9      	bcc.n	8000756 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000762:	4a0b      	ldr	r2, [pc, #44]	; (8000790 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000764:	4c0b      	ldr	r4, [pc, #44]	; (8000794 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000766:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000768:	e001      	b.n	800076e <LoopFillZerobss>

0800076a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800076a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800076c:	3204      	adds	r2, #4

0800076e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800076e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000770:	d3fb      	bcc.n	800076a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000772:	f7ff ffd7 	bl	8000724 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000776:	f005 ffa1 	bl	80066bc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800077a:	f7ff fea7 	bl	80004cc <main>
  bx  lr    
 800077e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000780:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000784:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000788:	2000011c 	.word	0x2000011c
  ldr r2, =_sidata
 800078c:	08006794 	.word	0x08006794
  ldr r2, =_sbss
 8000790:	2000011c 	.word	0x2000011c
  ldr r4, =_ebss
 8000794:	20000b44 	.word	0x20000b44

08000798 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000798:	e7fe      	b.n	8000798 <ADC_IRQHandler>
	...

0800079c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80007a0:	4b0e      	ldr	r3, [pc, #56]	; (80007dc <HAL_Init+0x40>)
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	4a0d      	ldr	r2, [pc, #52]	; (80007dc <HAL_Init+0x40>)
 80007a6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80007aa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80007ac:	4b0b      	ldr	r3, [pc, #44]	; (80007dc <HAL_Init+0x40>)
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	4a0a      	ldr	r2, [pc, #40]	; (80007dc <HAL_Init+0x40>)
 80007b2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80007b6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80007b8:	4b08      	ldr	r3, [pc, #32]	; (80007dc <HAL_Init+0x40>)
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	4a07      	ldr	r2, [pc, #28]	; (80007dc <HAL_Init+0x40>)
 80007be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80007c2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007c4:	2003      	movs	r0, #3
 80007c6:	f000 f94f 	bl	8000a68 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80007ca:	2000      	movs	r0, #0
 80007cc:	f000 f808 	bl	80007e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80007d0:	f7ff ff4c 	bl	800066c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80007d4:	2300      	movs	r3, #0
}
 80007d6:	4618      	mov	r0, r3
 80007d8:	bd80      	pop	{r7, pc}
 80007da:	bf00      	nop
 80007dc:	40023c00 	.word	0x40023c00

080007e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b082      	sub	sp, #8
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80007e8:	4b12      	ldr	r3, [pc, #72]	; (8000834 <HAL_InitTick+0x54>)
 80007ea:	681a      	ldr	r2, [r3, #0]
 80007ec:	4b12      	ldr	r3, [pc, #72]	; (8000838 <HAL_InitTick+0x58>)
 80007ee:	781b      	ldrb	r3, [r3, #0]
 80007f0:	4619      	mov	r1, r3
 80007f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80007fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80007fe:	4618      	mov	r0, r3
 8000800:	f000 f967 	bl	8000ad2 <HAL_SYSTICK_Config>
 8000804:	4603      	mov	r3, r0
 8000806:	2b00      	cmp	r3, #0
 8000808:	d001      	beq.n	800080e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800080a:	2301      	movs	r3, #1
 800080c:	e00e      	b.n	800082c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	2b0f      	cmp	r3, #15
 8000812:	d80a      	bhi.n	800082a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000814:	2200      	movs	r2, #0
 8000816:	6879      	ldr	r1, [r7, #4]
 8000818:	f04f 30ff 	mov.w	r0, #4294967295
 800081c:	f000 f92f 	bl	8000a7e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000820:	4a06      	ldr	r2, [pc, #24]	; (800083c <HAL_InitTick+0x5c>)
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000826:	2300      	movs	r3, #0
 8000828:	e000      	b.n	800082c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800082a:	2301      	movs	r3, #1
}
 800082c:	4618      	mov	r0, r3
 800082e:	3708      	adds	r7, #8
 8000830:	46bd      	mov	sp, r7
 8000832:	bd80      	pop	{r7, pc}
 8000834:	20000000 	.word	0x20000000
 8000838:	20000008 	.word	0x20000008
 800083c:	20000004 	.word	0x20000004

08000840 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000840:	b480      	push	{r7}
 8000842:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000844:	4b06      	ldr	r3, [pc, #24]	; (8000860 <HAL_IncTick+0x20>)
 8000846:	781b      	ldrb	r3, [r3, #0]
 8000848:	461a      	mov	r2, r3
 800084a:	4b06      	ldr	r3, [pc, #24]	; (8000864 <HAL_IncTick+0x24>)
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	4413      	add	r3, r2
 8000850:	4a04      	ldr	r2, [pc, #16]	; (8000864 <HAL_IncTick+0x24>)
 8000852:	6013      	str	r3, [r2, #0]
}
 8000854:	bf00      	nop
 8000856:	46bd      	mov	sp, r7
 8000858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085c:	4770      	bx	lr
 800085e:	bf00      	nop
 8000860:	20000008 	.word	0x20000008
 8000864:	20000140 	.word	0x20000140

08000868 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000868:	b480      	push	{r7}
 800086a:	af00      	add	r7, sp, #0
  return uwTick;
 800086c:	4b03      	ldr	r3, [pc, #12]	; (800087c <HAL_GetTick+0x14>)
 800086e:	681b      	ldr	r3, [r3, #0]
}
 8000870:	4618      	mov	r0, r3
 8000872:	46bd      	mov	sp, r7
 8000874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000878:	4770      	bx	lr
 800087a:	bf00      	nop
 800087c:	20000140 	.word	0x20000140

08000880 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b084      	sub	sp, #16
 8000884:	af00      	add	r7, sp, #0
 8000886:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000888:	f7ff ffee 	bl	8000868 <HAL_GetTick>
 800088c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000892:	68fb      	ldr	r3, [r7, #12]
 8000894:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000898:	d005      	beq.n	80008a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800089a:	4b0a      	ldr	r3, [pc, #40]	; (80008c4 <HAL_Delay+0x44>)
 800089c:	781b      	ldrb	r3, [r3, #0]
 800089e:	461a      	mov	r2, r3
 80008a0:	68fb      	ldr	r3, [r7, #12]
 80008a2:	4413      	add	r3, r2
 80008a4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80008a6:	bf00      	nop
 80008a8:	f7ff ffde 	bl	8000868 <HAL_GetTick>
 80008ac:	4602      	mov	r2, r0
 80008ae:	68bb      	ldr	r3, [r7, #8]
 80008b0:	1ad3      	subs	r3, r2, r3
 80008b2:	68fa      	ldr	r2, [r7, #12]
 80008b4:	429a      	cmp	r2, r3
 80008b6:	d8f7      	bhi.n	80008a8 <HAL_Delay+0x28>
  {
  }
}
 80008b8:	bf00      	nop
 80008ba:	bf00      	nop
 80008bc:	3710      	adds	r7, #16
 80008be:	46bd      	mov	sp, r7
 80008c0:	bd80      	pop	{r7, pc}
 80008c2:	bf00      	nop
 80008c4:	20000008 	.word	0x20000008

080008c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008c8:	b480      	push	{r7}
 80008ca:	b085      	sub	sp, #20
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	f003 0307 	and.w	r3, r3, #7
 80008d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80008d8:	4b0c      	ldr	r3, [pc, #48]	; (800090c <__NVIC_SetPriorityGrouping+0x44>)
 80008da:	68db      	ldr	r3, [r3, #12]
 80008dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80008de:	68ba      	ldr	r2, [r7, #8]
 80008e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80008e4:	4013      	ands	r3, r2
 80008e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80008e8:	68fb      	ldr	r3, [r7, #12]
 80008ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80008ec:	68bb      	ldr	r3, [r7, #8]
 80008ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80008f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80008f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80008fa:	4a04      	ldr	r2, [pc, #16]	; (800090c <__NVIC_SetPriorityGrouping+0x44>)
 80008fc:	68bb      	ldr	r3, [r7, #8]
 80008fe:	60d3      	str	r3, [r2, #12]
}
 8000900:	bf00      	nop
 8000902:	3714      	adds	r7, #20
 8000904:	46bd      	mov	sp, r7
 8000906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090a:	4770      	bx	lr
 800090c:	e000ed00 	.word	0xe000ed00

08000910 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000910:	b480      	push	{r7}
 8000912:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000914:	4b04      	ldr	r3, [pc, #16]	; (8000928 <__NVIC_GetPriorityGrouping+0x18>)
 8000916:	68db      	ldr	r3, [r3, #12]
 8000918:	0a1b      	lsrs	r3, r3, #8
 800091a:	f003 0307 	and.w	r3, r3, #7
}
 800091e:	4618      	mov	r0, r3
 8000920:	46bd      	mov	sp, r7
 8000922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000926:	4770      	bx	lr
 8000928:	e000ed00 	.word	0xe000ed00

0800092c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800092c:	b480      	push	{r7}
 800092e:	b083      	sub	sp, #12
 8000930:	af00      	add	r7, sp, #0
 8000932:	4603      	mov	r3, r0
 8000934:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000936:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800093a:	2b00      	cmp	r3, #0
 800093c:	db0b      	blt.n	8000956 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800093e:	79fb      	ldrb	r3, [r7, #7]
 8000940:	f003 021f 	and.w	r2, r3, #31
 8000944:	4907      	ldr	r1, [pc, #28]	; (8000964 <__NVIC_EnableIRQ+0x38>)
 8000946:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800094a:	095b      	lsrs	r3, r3, #5
 800094c:	2001      	movs	r0, #1
 800094e:	fa00 f202 	lsl.w	r2, r0, r2
 8000952:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000956:	bf00      	nop
 8000958:	370c      	adds	r7, #12
 800095a:	46bd      	mov	sp, r7
 800095c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000960:	4770      	bx	lr
 8000962:	bf00      	nop
 8000964:	e000e100 	.word	0xe000e100

08000968 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000968:	b480      	push	{r7}
 800096a:	b083      	sub	sp, #12
 800096c:	af00      	add	r7, sp, #0
 800096e:	4603      	mov	r3, r0
 8000970:	6039      	str	r1, [r7, #0]
 8000972:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000974:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000978:	2b00      	cmp	r3, #0
 800097a:	db0a      	blt.n	8000992 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800097c:	683b      	ldr	r3, [r7, #0]
 800097e:	b2da      	uxtb	r2, r3
 8000980:	490c      	ldr	r1, [pc, #48]	; (80009b4 <__NVIC_SetPriority+0x4c>)
 8000982:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000986:	0112      	lsls	r2, r2, #4
 8000988:	b2d2      	uxtb	r2, r2
 800098a:	440b      	add	r3, r1
 800098c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000990:	e00a      	b.n	80009a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000992:	683b      	ldr	r3, [r7, #0]
 8000994:	b2da      	uxtb	r2, r3
 8000996:	4908      	ldr	r1, [pc, #32]	; (80009b8 <__NVIC_SetPriority+0x50>)
 8000998:	79fb      	ldrb	r3, [r7, #7]
 800099a:	f003 030f 	and.w	r3, r3, #15
 800099e:	3b04      	subs	r3, #4
 80009a0:	0112      	lsls	r2, r2, #4
 80009a2:	b2d2      	uxtb	r2, r2
 80009a4:	440b      	add	r3, r1
 80009a6:	761a      	strb	r2, [r3, #24]
}
 80009a8:	bf00      	nop
 80009aa:	370c      	adds	r7, #12
 80009ac:	46bd      	mov	sp, r7
 80009ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b2:	4770      	bx	lr
 80009b4:	e000e100 	.word	0xe000e100
 80009b8:	e000ed00 	.word	0xe000ed00

080009bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009bc:	b480      	push	{r7}
 80009be:	b089      	sub	sp, #36	; 0x24
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	60f8      	str	r0, [r7, #12]
 80009c4:	60b9      	str	r1, [r7, #8]
 80009c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80009c8:	68fb      	ldr	r3, [r7, #12]
 80009ca:	f003 0307 	and.w	r3, r3, #7
 80009ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80009d0:	69fb      	ldr	r3, [r7, #28]
 80009d2:	f1c3 0307 	rsb	r3, r3, #7
 80009d6:	2b04      	cmp	r3, #4
 80009d8:	bf28      	it	cs
 80009da:	2304      	movcs	r3, #4
 80009dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009de:	69fb      	ldr	r3, [r7, #28]
 80009e0:	3304      	adds	r3, #4
 80009e2:	2b06      	cmp	r3, #6
 80009e4:	d902      	bls.n	80009ec <NVIC_EncodePriority+0x30>
 80009e6:	69fb      	ldr	r3, [r7, #28]
 80009e8:	3b03      	subs	r3, #3
 80009ea:	e000      	b.n	80009ee <NVIC_EncodePriority+0x32>
 80009ec:	2300      	movs	r3, #0
 80009ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009f0:	f04f 32ff 	mov.w	r2, #4294967295
 80009f4:	69bb      	ldr	r3, [r7, #24]
 80009f6:	fa02 f303 	lsl.w	r3, r2, r3
 80009fa:	43da      	mvns	r2, r3
 80009fc:	68bb      	ldr	r3, [r7, #8]
 80009fe:	401a      	ands	r2, r3
 8000a00:	697b      	ldr	r3, [r7, #20]
 8000a02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a04:	f04f 31ff 	mov.w	r1, #4294967295
 8000a08:	697b      	ldr	r3, [r7, #20]
 8000a0a:	fa01 f303 	lsl.w	r3, r1, r3
 8000a0e:	43d9      	mvns	r1, r3
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a14:	4313      	orrs	r3, r2
         );
}
 8000a16:	4618      	mov	r0, r3
 8000a18:	3724      	adds	r7, #36	; 0x24
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a20:	4770      	bx	lr
	...

08000a24 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b082      	sub	sp, #8
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	3b01      	subs	r3, #1
 8000a30:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000a34:	d301      	bcc.n	8000a3a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a36:	2301      	movs	r3, #1
 8000a38:	e00f      	b.n	8000a5a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a3a:	4a0a      	ldr	r2, [pc, #40]	; (8000a64 <SysTick_Config+0x40>)
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	3b01      	subs	r3, #1
 8000a40:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a42:	210f      	movs	r1, #15
 8000a44:	f04f 30ff 	mov.w	r0, #4294967295
 8000a48:	f7ff ff8e 	bl	8000968 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a4c:	4b05      	ldr	r3, [pc, #20]	; (8000a64 <SysTick_Config+0x40>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a52:	4b04      	ldr	r3, [pc, #16]	; (8000a64 <SysTick_Config+0x40>)
 8000a54:	2207      	movs	r2, #7
 8000a56:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a58:	2300      	movs	r3, #0
}
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	3708      	adds	r7, #8
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	bf00      	nop
 8000a64:	e000e010 	.word	0xe000e010

08000a68 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b082      	sub	sp, #8
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a70:	6878      	ldr	r0, [r7, #4]
 8000a72:	f7ff ff29 	bl	80008c8 <__NVIC_SetPriorityGrouping>
}
 8000a76:	bf00      	nop
 8000a78:	3708      	adds	r7, #8
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bd80      	pop	{r7, pc}

08000a7e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a7e:	b580      	push	{r7, lr}
 8000a80:	b086      	sub	sp, #24
 8000a82:	af00      	add	r7, sp, #0
 8000a84:	4603      	mov	r3, r0
 8000a86:	60b9      	str	r1, [r7, #8]
 8000a88:	607a      	str	r2, [r7, #4]
 8000a8a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000a90:	f7ff ff3e 	bl	8000910 <__NVIC_GetPriorityGrouping>
 8000a94:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a96:	687a      	ldr	r2, [r7, #4]
 8000a98:	68b9      	ldr	r1, [r7, #8]
 8000a9a:	6978      	ldr	r0, [r7, #20]
 8000a9c:	f7ff ff8e 	bl	80009bc <NVIC_EncodePriority>
 8000aa0:	4602      	mov	r2, r0
 8000aa2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000aa6:	4611      	mov	r1, r2
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	f7ff ff5d 	bl	8000968 <__NVIC_SetPriority>
}
 8000aae:	bf00      	nop
 8000ab0:	3718      	adds	r7, #24
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bd80      	pop	{r7, pc}

08000ab6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ab6:	b580      	push	{r7, lr}
 8000ab8:	b082      	sub	sp, #8
 8000aba:	af00      	add	r7, sp, #0
 8000abc:	4603      	mov	r3, r0
 8000abe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ac0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	f7ff ff31 	bl	800092c <__NVIC_EnableIRQ>
}
 8000aca:	bf00      	nop
 8000acc:	3708      	adds	r7, #8
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bd80      	pop	{r7, pc}

08000ad2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ad2:	b580      	push	{r7, lr}
 8000ad4:	b082      	sub	sp, #8
 8000ad6:	af00      	add	r7, sp, #0
 8000ad8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ada:	6878      	ldr	r0, [r7, #4]
 8000adc:	f7ff ffa2 	bl	8000a24 <SysTick_Config>
 8000ae0:	4603      	mov	r3, r0
}
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	3708      	adds	r7, #8
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bd80      	pop	{r7, pc}
	...

08000aec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000aec:	b480      	push	{r7}
 8000aee:	b089      	sub	sp, #36	; 0x24
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
 8000af4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000af6:	2300      	movs	r3, #0
 8000af8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000afa:	2300      	movs	r3, #0
 8000afc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000afe:	2300      	movs	r3, #0
 8000b00:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000b02:	2300      	movs	r3, #0
 8000b04:	61fb      	str	r3, [r7, #28]
 8000b06:	e16b      	b.n	8000de0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000b08:	2201      	movs	r2, #1
 8000b0a:	69fb      	ldr	r3, [r7, #28]
 8000b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b10:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b12:	683b      	ldr	r3, [r7, #0]
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	697a      	ldr	r2, [r7, #20]
 8000b18:	4013      	ands	r3, r2
 8000b1a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000b1c:	693a      	ldr	r2, [r7, #16]
 8000b1e:	697b      	ldr	r3, [r7, #20]
 8000b20:	429a      	cmp	r2, r3
 8000b22:	f040 815a 	bne.w	8000dda <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000b26:	683b      	ldr	r3, [r7, #0]
 8000b28:	685b      	ldr	r3, [r3, #4]
 8000b2a:	f003 0303 	and.w	r3, r3, #3
 8000b2e:	2b01      	cmp	r3, #1
 8000b30:	d005      	beq.n	8000b3e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000b32:	683b      	ldr	r3, [r7, #0]
 8000b34:	685b      	ldr	r3, [r3, #4]
 8000b36:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000b3a:	2b02      	cmp	r3, #2
 8000b3c:	d130      	bne.n	8000ba0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	689b      	ldr	r3, [r3, #8]
 8000b42:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000b44:	69fb      	ldr	r3, [r7, #28]
 8000b46:	005b      	lsls	r3, r3, #1
 8000b48:	2203      	movs	r2, #3
 8000b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b4e:	43db      	mvns	r3, r3
 8000b50:	69ba      	ldr	r2, [r7, #24]
 8000b52:	4013      	ands	r3, r2
 8000b54:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000b56:	683b      	ldr	r3, [r7, #0]
 8000b58:	68da      	ldr	r2, [r3, #12]
 8000b5a:	69fb      	ldr	r3, [r7, #28]
 8000b5c:	005b      	lsls	r3, r3, #1
 8000b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b62:	69ba      	ldr	r2, [r7, #24]
 8000b64:	4313      	orrs	r3, r2
 8000b66:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	69ba      	ldr	r2, [r7, #24]
 8000b6c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	685b      	ldr	r3, [r3, #4]
 8000b72:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000b74:	2201      	movs	r2, #1
 8000b76:	69fb      	ldr	r3, [r7, #28]
 8000b78:	fa02 f303 	lsl.w	r3, r2, r3
 8000b7c:	43db      	mvns	r3, r3
 8000b7e:	69ba      	ldr	r2, [r7, #24]
 8000b80:	4013      	ands	r3, r2
 8000b82:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000b84:	683b      	ldr	r3, [r7, #0]
 8000b86:	685b      	ldr	r3, [r3, #4]
 8000b88:	091b      	lsrs	r3, r3, #4
 8000b8a:	f003 0201 	and.w	r2, r3, #1
 8000b8e:	69fb      	ldr	r3, [r7, #28]
 8000b90:	fa02 f303 	lsl.w	r3, r2, r3
 8000b94:	69ba      	ldr	r2, [r7, #24]
 8000b96:	4313      	orrs	r3, r2
 8000b98:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	69ba      	ldr	r2, [r7, #24]
 8000b9e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ba0:	683b      	ldr	r3, [r7, #0]
 8000ba2:	685b      	ldr	r3, [r3, #4]
 8000ba4:	f003 0303 	and.w	r3, r3, #3
 8000ba8:	2b03      	cmp	r3, #3
 8000baa:	d017      	beq.n	8000bdc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	68db      	ldr	r3, [r3, #12]
 8000bb0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000bb2:	69fb      	ldr	r3, [r7, #28]
 8000bb4:	005b      	lsls	r3, r3, #1
 8000bb6:	2203      	movs	r2, #3
 8000bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000bbc:	43db      	mvns	r3, r3
 8000bbe:	69ba      	ldr	r2, [r7, #24]
 8000bc0:	4013      	ands	r3, r2
 8000bc2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000bc4:	683b      	ldr	r3, [r7, #0]
 8000bc6:	689a      	ldr	r2, [r3, #8]
 8000bc8:	69fb      	ldr	r3, [r7, #28]
 8000bca:	005b      	lsls	r3, r3, #1
 8000bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8000bd0:	69ba      	ldr	r2, [r7, #24]
 8000bd2:	4313      	orrs	r3, r2
 8000bd4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	69ba      	ldr	r2, [r7, #24]
 8000bda:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000bdc:	683b      	ldr	r3, [r7, #0]
 8000bde:	685b      	ldr	r3, [r3, #4]
 8000be0:	f003 0303 	and.w	r3, r3, #3
 8000be4:	2b02      	cmp	r3, #2
 8000be6:	d123      	bne.n	8000c30 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000be8:	69fb      	ldr	r3, [r7, #28]
 8000bea:	08da      	lsrs	r2, r3, #3
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	3208      	adds	r2, #8
 8000bf0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000bf4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000bf6:	69fb      	ldr	r3, [r7, #28]
 8000bf8:	f003 0307 	and.w	r3, r3, #7
 8000bfc:	009b      	lsls	r3, r3, #2
 8000bfe:	220f      	movs	r2, #15
 8000c00:	fa02 f303 	lsl.w	r3, r2, r3
 8000c04:	43db      	mvns	r3, r3
 8000c06:	69ba      	ldr	r2, [r7, #24]
 8000c08:	4013      	ands	r3, r2
 8000c0a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000c0c:	683b      	ldr	r3, [r7, #0]
 8000c0e:	691a      	ldr	r2, [r3, #16]
 8000c10:	69fb      	ldr	r3, [r7, #28]
 8000c12:	f003 0307 	and.w	r3, r3, #7
 8000c16:	009b      	lsls	r3, r3, #2
 8000c18:	fa02 f303 	lsl.w	r3, r2, r3
 8000c1c:	69ba      	ldr	r2, [r7, #24]
 8000c1e:	4313      	orrs	r3, r2
 8000c20:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000c22:	69fb      	ldr	r3, [r7, #28]
 8000c24:	08da      	lsrs	r2, r3, #3
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	3208      	adds	r2, #8
 8000c2a:	69b9      	ldr	r1, [r7, #24]
 8000c2c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000c36:	69fb      	ldr	r3, [r7, #28]
 8000c38:	005b      	lsls	r3, r3, #1
 8000c3a:	2203      	movs	r2, #3
 8000c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c40:	43db      	mvns	r3, r3
 8000c42:	69ba      	ldr	r2, [r7, #24]
 8000c44:	4013      	ands	r3, r2
 8000c46:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000c48:	683b      	ldr	r3, [r7, #0]
 8000c4a:	685b      	ldr	r3, [r3, #4]
 8000c4c:	f003 0203 	and.w	r2, r3, #3
 8000c50:	69fb      	ldr	r3, [r7, #28]
 8000c52:	005b      	lsls	r3, r3, #1
 8000c54:	fa02 f303 	lsl.w	r3, r2, r3
 8000c58:	69ba      	ldr	r2, [r7, #24]
 8000c5a:	4313      	orrs	r3, r2
 8000c5c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	69ba      	ldr	r2, [r7, #24]
 8000c62:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000c64:	683b      	ldr	r3, [r7, #0]
 8000c66:	685b      	ldr	r3, [r3, #4]
 8000c68:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	f000 80b4 	beq.w	8000dda <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c72:	2300      	movs	r3, #0
 8000c74:	60fb      	str	r3, [r7, #12]
 8000c76:	4b60      	ldr	r3, [pc, #384]	; (8000df8 <HAL_GPIO_Init+0x30c>)
 8000c78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c7a:	4a5f      	ldr	r2, [pc, #380]	; (8000df8 <HAL_GPIO_Init+0x30c>)
 8000c7c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c80:	6453      	str	r3, [r2, #68]	; 0x44
 8000c82:	4b5d      	ldr	r3, [pc, #372]	; (8000df8 <HAL_GPIO_Init+0x30c>)
 8000c84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c8a:	60fb      	str	r3, [r7, #12]
 8000c8c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000c8e:	4a5b      	ldr	r2, [pc, #364]	; (8000dfc <HAL_GPIO_Init+0x310>)
 8000c90:	69fb      	ldr	r3, [r7, #28]
 8000c92:	089b      	lsrs	r3, r3, #2
 8000c94:	3302      	adds	r3, #2
 8000c96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000c9c:	69fb      	ldr	r3, [r7, #28]
 8000c9e:	f003 0303 	and.w	r3, r3, #3
 8000ca2:	009b      	lsls	r3, r3, #2
 8000ca4:	220f      	movs	r2, #15
 8000ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8000caa:	43db      	mvns	r3, r3
 8000cac:	69ba      	ldr	r2, [r7, #24]
 8000cae:	4013      	ands	r3, r2
 8000cb0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	4a52      	ldr	r2, [pc, #328]	; (8000e00 <HAL_GPIO_Init+0x314>)
 8000cb6:	4293      	cmp	r3, r2
 8000cb8:	d02b      	beq.n	8000d12 <HAL_GPIO_Init+0x226>
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	4a51      	ldr	r2, [pc, #324]	; (8000e04 <HAL_GPIO_Init+0x318>)
 8000cbe:	4293      	cmp	r3, r2
 8000cc0:	d025      	beq.n	8000d0e <HAL_GPIO_Init+0x222>
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	4a50      	ldr	r2, [pc, #320]	; (8000e08 <HAL_GPIO_Init+0x31c>)
 8000cc6:	4293      	cmp	r3, r2
 8000cc8:	d01f      	beq.n	8000d0a <HAL_GPIO_Init+0x21e>
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	4a4f      	ldr	r2, [pc, #316]	; (8000e0c <HAL_GPIO_Init+0x320>)
 8000cce:	4293      	cmp	r3, r2
 8000cd0:	d019      	beq.n	8000d06 <HAL_GPIO_Init+0x21a>
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	4a4e      	ldr	r2, [pc, #312]	; (8000e10 <HAL_GPIO_Init+0x324>)
 8000cd6:	4293      	cmp	r3, r2
 8000cd8:	d013      	beq.n	8000d02 <HAL_GPIO_Init+0x216>
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	4a4d      	ldr	r2, [pc, #308]	; (8000e14 <HAL_GPIO_Init+0x328>)
 8000cde:	4293      	cmp	r3, r2
 8000ce0:	d00d      	beq.n	8000cfe <HAL_GPIO_Init+0x212>
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	4a4c      	ldr	r2, [pc, #304]	; (8000e18 <HAL_GPIO_Init+0x32c>)
 8000ce6:	4293      	cmp	r3, r2
 8000ce8:	d007      	beq.n	8000cfa <HAL_GPIO_Init+0x20e>
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	4a4b      	ldr	r2, [pc, #300]	; (8000e1c <HAL_GPIO_Init+0x330>)
 8000cee:	4293      	cmp	r3, r2
 8000cf0:	d101      	bne.n	8000cf6 <HAL_GPIO_Init+0x20a>
 8000cf2:	2307      	movs	r3, #7
 8000cf4:	e00e      	b.n	8000d14 <HAL_GPIO_Init+0x228>
 8000cf6:	2308      	movs	r3, #8
 8000cf8:	e00c      	b.n	8000d14 <HAL_GPIO_Init+0x228>
 8000cfa:	2306      	movs	r3, #6
 8000cfc:	e00a      	b.n	8000d14 <HAL_GPIO_Init+0x228>
 8000cfe:	2305      	movs	r3, #5
 8000d00:	e008      	b.n	8000d14 <HAL_GPIO_Init+0x228>
 8000d02:	2304      	movs	r3, #4
 8000d04:	e006      	b.n	8000d14 <HAL_GPIO_Init+0x228>
 8000d06:	2303      	movs	r3, #3
 8000d08:	e004      	b.n	8000d14 <HAL_GPIO_Init+0x228>
 8000d0a:	2302      	movs	r3, #2
 8000d0c:	e002      	b.n	8000d14 <HAL_GPIO_Init+0x228>
 8000d0e:	2301      	movs	r3, #1
 8000d10:	e000      	b.n	8000d14 <HAL_GPIO_Init+0x228>
 8000d12:	2300      	movs	r3, #0
 8000d14:	69fa      	ldr	r2, [r7, #28]
 8000d16:	f002 0203 	and.w	r2, r2, #3
 8000d1a:	0092      	lsls	r2, r2, #2
 8000d1c:	4093      	lsls	r3, r2
 8000d1e:	69ba      	ldr	r2, [r7, #24]
 8000d20:	4313      	orrs	r3, r2
 8000d22:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000d24:	4935      	ldr	r1, [pc, #212]	; (8000dfc <HAL_GPIO_Init+0x310>)
 8000d26:	69fb      	ldr	r3, [r7, #28]
 8000d28:	089b      	lsrs	r3, r3, #2
 8000d2a:	3302      	adds	r3, #2
 8000d2c:	69ba      	ldr	r2, [r7, #24]
 8000d2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000d32:	4b3b      	ldr	r3, [pc, #236]	; (8000e20 <HAL_GPIO_Init+0x334>)
 8000d34:	689b      	ldr	r3, [r3, #8]
 8000d36:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000d38:	693b      	ldr	r3, [r7, #16]
 8000d3a:	43db      	mvns	r3, r3
 8000d3c:	69ba      	ldr	r2, [r7, #24]
 8000d3e:	4013      	ands	r3, r2
 8000d40:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000d42:	683b      	ldr	r3, [r7, #0]
 8000d44:	685b      	ldr	r3, [r3, #4]
 8000d46:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d003      	beq.n	8000d56 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000d4e:	69ba      	ldr	r2, [r7, #24]
 8000d50:	693b      	ldr	r3, [r7, #16]
 8000d52:	4313      	orrs	r3, r2
 8000d54:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000d56:	4a32      	ldr	r2, [pc, #200]	; (8000e20 <HAL_GPIO_Init+0x334>)
 8000d58:	69bb      	ldr	r3, [r7, #24]
 8000d5a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000d5c:	4b30      	ldr	r3, [pc, #192]	; (8000e20 <HAL_GPIO_Init+0x334>)
 8000d5e:	68db      	ldr	r3, [r3, #12]
 8000d60:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000d62:	693b      	ldr	r3, [r7, #16]
 8000d64:	43db      	mvns	r3, r3
 8000d66:	69ba      	ldr	r2, [r7, #24]
 8000d68:	4013      	ands	r3, r2
 8000d6a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000d6c:	683b      	ldr	r3, [r7, #0]
 8000d6e:	685b      	ldr	r3, [r3, #4]
 8000d70:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d003      	beq.n	8000d80 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000d78:	69ba      	ldr	r2, [r7, #24]
 8000d7a:	693b      	ldr	r3, [r7, #16]
 8000d7c:	4313      	orrs	r3, r2
 8000d7e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000d80:	4a27      	ldr	r2, [pc, #156]	; (8000e20 <HAL_GPIO_Init+0x334>)
 8000d82:	69bb      	ldr	r3, [r7, #24]
 8000d84:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000d86:	4b26      	ldr	r3, [pc, #152]	; (8000e20 <HAL_GPIO_Init+0x334>)
 8000d88:	685b      	ldr	r3, [r3, #4]
 8000d8a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000d8c:	693b      	ldr	r3, [r7, #16]
 8000d8e:	43db      	mvns	r3, r3
 8000d90:	69ba      	ldr	r2, [r7, #24]
 8000d92:	4013      	ands	r3, r2
 8000d94:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000d96:	683b      	ldr	r3, [r7, #0]
 8000d98:	685b      	ldr	r3, [r3, #4]
 8000d9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d003      	beq.n	8000daa <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000da2:	69ba      	ldr	r2, [r7, #24]
 8000da4:	693b      	ldr	r3, [r7, #16]
 8000da6:	4313      	orrs	r3, r2
 8000da8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000daa:	4a1d      	ldr	r2, [pc, #116]	; (8000e20 <HAL_GPIO_Init+0x334>)
 8000dac:	69bb      	ldr	r3, [r7, #24]
 8000dae:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000db0:	4b1b      	ldr	r3, [pc, #108]	; (8000e20 <HAL_GPIO_Init+0x334>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000db6:	693b      	ldr	r3, [r7, #16]
 8000db8:	43db      	mvns	r3, r3
 8000dba:	69ba      	ldr	r2, [r7, #24]
 8000dbc:	4013      	ands	r3, r2
 8000dbe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000dc0:	683b      	ldr	r3, [r7, #0]
 8000dc2:	685b      	ldr	r3, [r3, #4]
 8000dc4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d003      	beq.n	8000dd4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8000dcc:	69ba      	ldr	r2, [r7, #24]
 8000dce:	693b      	ldr	r3, [r7, #16]
 8000dd0:	4313      	orrs	r3, r2
 8000dd2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000dd4:	4a12      	ldr	r2, [pc, #72]	; (8000e20 <HAL_GPIO_Init+0x334>)
 8000dd6:	69bb      	ldr	r3, [r7, #24]
 8000dd8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000dda:	69fb      	ldr	r3, [r7, #28]
 8000ddc:	3301      	adds	r3, #1
 8000dde:	61fb      	str	r3, [r7, #28]
 8000de0:	69fb      	ldr	r3, [r7, #28]
 8000de2:	2b0f      	cmp	r3, #15
 8000de4:	f67f ae90 	bls.w	8000b08 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000de8:	bf00      	nop
 8000dea:	bf00      	nop
 8000dec:	3724      	adds	r7, #36	; 0x24
 8000dee:	46bd      	mov	sp, r7
 8000df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df4:	4770      	bx	lr
 8000df6:	bf00      	nop
 8000df8:	40023800 	.word	0x40023800
 8000dfc:	40013800 	.word	0x40013800
 8000e00:	40020000 	.word	0x40020000
 8000e04:	40020400 	.word	0x40020400
 8000e08:	40020800 	.word	0x40020800
 8000e0c:	40020c00 	.word	0x40020c00
 8000e10:	40021000 	.word	0x40021000
 8000e14:	40021400 	.word	0x40021400
 8000e18:	40021800 	.word	0x40021800
 8000e1c:	40021c00 	.word	0x40021c00
 8000e20:	40013c00 	.word	0x40013c00

08000e24 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000e24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e26:	b08f      	sub	sp, #60	; 0x3c
 8000e28:	af0a      	add	r7, sp, #40	; 0x28
 8000e2a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d101      	bne.n	8000e36 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000e32:	2301      	movs	r3, #1
 8000e34:	e10f      	b.n	8001056 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8000e42:	b2db      	uxtb	r3, r3
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d106      	bne.n	8000e56 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000e50:	6878      	ldr	r0, [r7, #4]
 8000e52:	f005 f931 	bl	80060b8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	2203      	movs	r2, #3
 8000e5a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8000e5e:	68bb      	ldr	r3, [r7, #8]
 8000e60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000e62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d102      	bne.n	8000e70 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	4618      	mov	r0, r3
 8000e76:	f001 ff80 	bl	8002d7a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	603b      	str	r3, [r7, #0]
 8000e80:	687e      	ldr	r6, [r7, #4]
 8000e82:	466d      	mov	r5, sp
 8000e84:	f106 0410 	add.w	r4, r6, #16
 8000e88:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000e8a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000e8c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000e8e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000e90:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000e94:	e885 0003 	stmia.w	r5, {r0, r1}
 8000e98:	1d33      	adds	r3, r6, #4
 8000e9a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000e9c:	6838      	ldr	r0, [r7, #0]
 8000e9e:	f001 fe57 	bl	8002b50 <USB_CoreInit>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d005      	beq.n	8000eb4 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	2202      	movs	r2, #2
 8000eac:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8000eb0:	2301      	movs	r3, #1
 8000eb2:	e0d0      	b.n	8001056 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	2100      	movs	r1, #0
 8000eba:	4618      	mov	r0, r3
 8000ebc:	f001 ff6e 	bl	8002d9c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	73fb      	strb	r3, [r7, #15]
 8000ec4:	e04a      	b.n	8000f5c <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000ec6:	7bfa      	ldrb	r2, [r7, #15]
 8000ec8:	6879      	ldr	r1, [r7, #4]
 8000eca:	4613      	mov	r3, r2
 8000ecc:	00db      	lsls	r3, r3, #3
 8000ece:	4413      	add	r3, r2
 8000ed0:	009b      	lsls	r3, r3, #2
 8000ed2:	440b      	add	r3, r1
 8000ed4:	333d      	adds	r3, #61	; 0x3d
 8000ed6:	2201      	movs	r2, #1
 8000ed8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000eda:	7bfa      	ldrb	r2, [r7, #15]
 8000edc:	6879      	ldr	r1, [r7, #4]
 8000ede:	4613      	mov	r3, r2
 8000ee0:	00db      	lsls	r3, r3, #3
 8000ee2:	4413      	add	r3, r2
 8000ee4:	009b      	lsls	r3, r3, #2
 8000ee6:	440b      	add	r3, r1
 8000ee8:	333c      	adds	r3, #60	; 0x3c
 8000eea:	7bfa      	ldrb	r2, [r7, #15]
 8000eec:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000eee:	7bfa      	ldrb	r2, [r7, #15]
 8000ef0:	7bfb      	ldrb	r3, [r7, #15]
 8000ef2:	b298      	uxth	r0, r3
 8000ef4:	6879      	ldr	r1, [r7, #4]
 8000ef6:	4613      	mov	r3, r2
 8000ef8:	00db      	lsls	r3, r3, #3
 8000efa:	4413      	add	r3, r2
 8000efc:	009b      	lsls	r3, r3, #2
 8000efe:	440b      	add	r3, r1
 8000f00:	3344      	adds	r3, #68	; 0x44
 8000f02:	4602      	mov	r2, r0
 8000f04:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000f06:	7bfa      	ldrb	r2, [r7, #15]
 8000f08:	6879      	ldr	r1, [r7, #4]
 8000f0a:	4613      	mov	r3, r2
 8000f0c:	00db      	lsls	r3, r3, #3
 8000f0e:	4413      	add	r3, r2
 8000f10:	009b      	lsls	r3, r3, #2
 8000f12:	440b      	add	r3, r1
 8000f14:	3340      	adds	r3, #64	; 0x40
 8000f16:	2200      	movs	r2, #0
 8000f18:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000f1a:	7bfa      	ldrb	r2, [r7, #15]
 8000f1c:	6879      	ldr	r1, [r7, #4]
 8000f1e:	4613      	mov	r3, r2
 8000f20:	00db      	lsls	r3, r3, #3
 8000f22:	4413      	add	r3, r2
 8000f24:	009b      	lsls	r3, r3, #2
 8000f26:	440b      	add	r3, r1
 8000f28:	3348      	adds	r3, #72	; 0x48
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000f2e:	7bfa      	ldrb	r2, [r7, #15]
 8000f30:	6879      	ldr	r1, [r7, #4]
 8000f32:	4613      	mov	r3, r2
 8000f34:	00db      	lsls	r3, r3, #3
 8000f36:	4413      	add	r3, r2
 8000f38:	009b      	lsls	r3, r3, #2
 8000f3a:	440b      	add	r3, r1
 8000f3c:	334c      	adds	r3, #76	; 0x4c
 8000f3e:	2200      	movs	r2, #0
 8000f40:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8000f42:	7bfa      	ldrb	r2, [r7, #15]
 8000f44:	6879      	ldr	r1, [r7, #4]
 8000f46:	4613      	mov	r3, r2
 8000f48:	00db      	lsls	r3, r3, #3
 8000f4a:	4413      	add	r3, r2
 8000f4c:	009b      	lsls	r3, r3, #2
 8000f4e:	440b      	add	r3, r1
 8000f50:	3354      	adds	r3, #84	; 0x54
 8000f52:	2200      	movs	r2, #0
 8000f54:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000f56:	7bfb      	ldrb	r3, [r7, #15]
 8000f58:	3301      	adds	r3, #1
 8000f5a:	73fb      	strb	r3, [r7, #15]
 8000f5c:	7bfa      	ldrb	r2, [r7, #15]
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	685b      	ldr	r3, [r3, #4]
 8000f62:	429a      	cmp	r2, r3
 8000f64:	d3af      	bcc.n	8000ec6 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000f66:	2300      	movs	r3, #0
 8000f68:	73fb      	strb	r3, [r7, #15]
 8000f6a:	e044      	b.n	8000ff6 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000f6c:	7bfa      	ldrb	r2, [r7, #15]
 8000f6e:	6879      	ldr	r1, [r7, #4]
 8000f70:	4613      	mov	r3, r2
 8000f72:	00db      	lsls	r3, r3, #3
 8000f74:	4413      	add	r3, r2
 8000f76:	009b      	lsls	r3, r3, #2
 8000f78:	440b      	add	r3, r1
 8000f7a:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8000f7e:	2200      	movs	r2, #0
 8000f80:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8000f82:	7bfa      	ldrb	r2, [r7, #15]
 8000f84:	6879      	ldr	r1, [r7, #4]
 8000f86:	4613      	mov	r3, r2
 8000f88:	00db      	lsls	r3, r3, #3
 8000f8a:	4413      	add	r3, r2
 8000f8c:	009b      	lsls	r3, r3, #2
 8000f8e:	440b      	add	r3, r1
 8000f90:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8000f94:	7bfa      	ldrb	r2, [r7, #15]
 8000f96:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000f98:	7bfa      	ldrb	r2, [r7, #15]
 8000f9a:	6879      	ldr	r1, [r7, #4]
 8000f9c:	4613      	mov	r3, r2
 8000f9e:	00db      	lsls	r3, r3, #3
 8000fa0:	4413      	add	r3, r2
 8000fa2:	009b      	lsls	r3, r3, #2
 8000fa4:	440b      	add	r3, r1
 8000fa6:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8000faa:	2200      	movs	r2, #0
 8000fac:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8000fae:	7bfa      	ldrb	r2, [r7, #15]
 8000fb0:	6879      	ldr	r1, [r7, #4]
 8000fb2:	4613      	mov	r3, r2
 8000fb4:	00db      	lsls	r3, r3, #3
 8000fb6:	4413      	add	r3, r2
 8000fb8:	009b      	lsls	r3, r3, #2
 8000fba:	440b      	add	r3, r1
 8000fbc:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000fc4:	7bfa      	ldrb	r2, [r7, #15]
 8000fc6:	6879      	ldr	r1, [r7, #4]
 8000fc8:	4613      	mov	r3, r2
 8000fca:	00db      	lsls	r3, r3, #3
 8000fcc:	4413      	add	r3, r2
 8000fce:	009b      	lsls	r3, r3, #2
 8000fd0:	440b      	add	r3, r1
 8000fd2:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000fda:	7bfa      	ldrb	r2, [r7, #15]
 8000fdc:	6879      	ldr	r1, [r7, #4]
 8000fde:	4613      	mov	r3, r2
 8000fe0:	00db      	lsls	r3, r3, #3
 8000fe2:	4413      	add	r3, r2
 8000fe4:	009b      	lsls	r3, r3, #2
 8000fe6:	440b      	add	r3, r1
 8000fe8:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8000fec:	2200      	movs	r2, #0
 8000fee:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000ff0:	7bfb      	ldrb	r3, [r7, #15]
 8000ff2:	3301      	adds	r3, #1
 8000ff4:	73fb      	strb	r3, [r7, #15]
 8000ff6:	7bfa      	ldrb	r2, [r7, #15]
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	685b      	ldr	r3, [r3, #4]
 8000ffc:	429a      	cmp	r2, r3
 8000ffe:	d3b5      	bcc.n	8000f6c <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	603b      	str	r3, [r7, #0]
 8001006:	687e      	ldr	r6, [r7, #4]
 8001008:	466d      	mov	r5, sp
 800100a:	f106 0410 	add.w	r4, r6, #16
 800100e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001010:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001012:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001014:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001016:	e894 0003 	ldmia.w	r4, {r0, r1}
 800101a:	e885 0003 	stmia.w	r5, {r0, r1}
 800101e:	1d33      	adds	r3, r6, #4
 8001020:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001022:	6838      	ldr	r0, [r7, #0]
 8001024:	f001 ff06 	bl	8002e34 <USB_DevInit>
 8001028:	4603      	mov	r3, r0
 800102a:	2b00      	cmp	r3, #0
 800102c:	d005      	beq.n	800103a <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	2202      	movs	r2, #2
 8001032:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001036:	2301      	movs	r3, #1
 8001038:	e00d      	b.n	8001056 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	2200      	movs	r2, #0
 800103e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	2201      	movs	r2, #1
 8001046:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	4618      	mov	r0, r3
 8001050:	f003 f855 	bl	80040fe <USB_DevDisconnect>

  return HAL_OK;
 8001054:	2300      	movs	r3, #0
}
 8001056:	4618      	mov	r0, r3
 8001058:	3714      	adds	r7, #20
 800105a:	46bd      	mov	sp, r7
 800105c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800105e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800105e:	b580      	push	{r7, lr}
 8001060:	b084      	sub	sp, #16
 8001062:	af00      	add	r7, sp, #0
 8001064:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001072:	2b01      	cmp	r3, #1
 8001074:	d101      	bne.n	800107a <HAL_PCD_Start+0x1c>
 8001076:	2302      	movs	r3, #2
 8001078:	e020      	b.n	80010bc <HAL_PCD_Start+0x5e>
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	2201      	movs	r2, #1
 800107e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001086:	2b01      	cmp	r3, #1
 8001088:	d109      	bne.n	800109e <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800108e:	2b01      	cmp	r3, #1
 8001090:	d005      	beq.n	800109e <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001096:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	4618      	mov	r0, r3
 80010a4:	f001 fe58 	bl	8002d58 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	4618      	mov	r0, r3
 80010ae:	f003 f805 	bl	80040bc <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	2200      	movs	r2, #0
 80010b6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80010ba:	2300      	movs	r3, #0
}
 80010bc:	4618      	mov	r0, r3
 80010be:	3710      	adds	r7, #16
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bd80      	pop	{r7, pc}

080010c4 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80010c4:	b590      	push	{r4, r7, lr}
 80010c6:	b08d      	sub	sp, #52	; 0x34
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80010d2:	6a3b      	ldr	r3, [r7, #32]
 80010d4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	4618      	mov	r0, r3
 80010dc:	f003 f8c3 	bl	8004266 <USB_GetMode>
 80010e0:	4603      	mov	r3, r0
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	f040 848a 	bne.w	80019fc <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	4618      	mov	r0, r3
 80010ee:	f003 f827 	bl	8004140 <USB_ReadInterrupts>
 80010f2:	4603      	mov	r3, r0
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	f000 8480 	beq.w	80019fa <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80010fa:	69fb      	ldr	r3, [r7, #28]
 80010fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001100:	689b      	ldr	r3, [r3, #8]
 8001102:	0a1b      	lsrs	r3, r3, #8
 8001104:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	4618      	mov	r0, r3
 8001114:	f003 f814 	bl	8004140 <USB_ReadInterrupts>
 8001118:	4603      	mov	r3, r0
 800111a:	f003 0302 	and.w	r3, r3, #2
 800111e:	2b02      	cmp	r3, #2
 8001120:	d107      	bne.n	8001132 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	695a      	ldr	r2, [r3, #20]
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	f002 0202 	and.w	r2, r2, #2
 8001130:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	4618      	mov	r0, r3
 8001138:	f003 f802 	bl	8004140 <USB_ReadInterrupts>
 800113c:	4603      	mov	r3, r0
 800113e:	f003 0310 	and.w	r3, r3, #16
 8001142:	2b10      	cmp	r3, #16
 8001144:	d161      	bne.n	800120a <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	699a      	ldr	r2, [r3, #24]
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	f022 0210 	bic.w	r2, r2, #16
 8001154:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8001156:	6a3b      	ldr	r3, [r7, #32]
 8001158:	6a1b      	ldr	r3, [r3, #32]
 800115a:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800115c:	69bb      	ldr	r3, [r7, #24]
 800115e:	f003 020f 	and.w	r2, r3, #15
 8001162:	4613      	mov	r3, r2
 8001164:	00db      	lsls	r3, r3, #3
 8001166:	4413      	add	r3, r2
 8001168:	009b      	lsls	r3, r3, #2
 800116a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800116e:	687a      	ldr	r2, [r7, #4]
 8001170:	4413      	add	r3, r2
 8001172:	3304      	adds	r3, #4
 8001174:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001176:	69bb      	ldr	r3, [r7, #24]
 8001178:	0c5b      	lsrs	r3, r3, #17
 800117a:	f003 030f 	and.w	r3, r3, #15
 800117e:	2b02      	cmp	r3, #2
 8001180:	d124      	bne.n	80011cc <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001182:	69ba      	ldr	r2, [r7, #24]
 8001184:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001188:	4013      	ands	r3, r2
 800118a:	2b00      	cmp	r3, #0
 800118c:	d035      	beq.n	80011fa <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800118e:	697b      	ldr	r3, [r7, #20]
 8001190:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001192:	69bb      	ldr	r3, [r7, #24]
 8001194:	091b      	lsrs	r3, r3, #4
 8001196:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001198:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800119c:	b29b      	uxth	r3, r3
 800119e:	461a      	mov	r2, r3
 80011a0:	6a38      	ldr	r0, [r7, #32]
 80011a2:	f002 fe39 	bl	8003e18 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80011a6:	697b      	ldr	r3, [r7, #20]
 80011a8:	691a      	ldr	r2, [r3, #16]
 80011aa:	69bb      	ldr	r3, [r7, #24]
 80011ac:	091b      	lsrs	r3, r3, #4
 80011ae:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80011b2:	441a      	add	r2, r3
 80011b4:	697b      	ldr	r3, [r7, #20]
 80011b6:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80011b8:	697b      	ldr	r3, [r7, #20]
 80011ba:	6a1a      	ldr	r2, [r3, #32]
 80011bc:	69bb      	ldr	r3, [r7, #24]
 80011be:	091b      	lsrs	r3, r3, #4
 80011c0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80011c4:	441a      	add	r2, r3
 80011c6:	697b      	ldr	r3, [r7, #20]
 80011c8:	621a      	str	r2, [r3, #32]
 80011ca:	e016      	b.n	80011fa <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80011cc:	69bb      	ldr	r3, [r7, #24]
 80011ce:	0c5b      	lsrs	r3, r3, #17
 80011d0:	f003 030f 	and.w	r3, r3, #15
 80011d4:	2b06      	cmp	r3, #6
 80011d6:	d110      	bne.n	80011fa <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80011de:	2208      	movs	r2, #8
 80011e0:	4619      	mov	r1, r3
 80011e2:	6a38      	ldr	r0, [r7, #32]
 80011e4:	f002 fe18 	bl	8003e18 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80011e8:	697b      	ldr	r3, [r7, #20]
 80011ea:	6a1a      	ldr	r2, [r3, #32]
 80011ec:	69bb      	ldr	r3, [r7, #24]
 80011ee:	091b      	lsrs	r3, r3, #4
 80011f0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80011f4:	441a      	add	r2, r3
 80011f6:	697b      	ldr	r3, [r7, #20]
 80011f8:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	699a      	ldr	r2, [r3, #24]
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	f042 0210 	orr.w	r2, r2, #16
 8001208:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	4618      	mov	r0, r3
 8001210:	f002 ff96 	bl	8004140 <USB_ReadInterrupts>
 8001214:	4603      	mov	r3, r0
 8001216:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800121a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800121e:	f040 80a7 	bne.w	8001370 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8001222:	2300      	movs	r3, #0
 8001224:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	4618      	mov	r0, r3
 800122c:	f002 ff9b 	bl	8004166 <USB_ReadDevAllOutEpInterrupt>
 8001230:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8001232:	e099      	b.n	8001368 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001234:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001236:	f003 0301 	and.w	r3, r3, #1
 800123a:	2b00      	cmp	r3, #0
 800123c:	f000 808e 	beq.w	800135c <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001246:	b2d2      	uxtb	r2, r2
 8001248:	4611      	mov	r1, r2
 800124a:	4618      	mov	r0, r3
 800124c:	f002 ffbf 	bl	80041ce <USB_ReadDevOutEPInterrupt>
 8001250:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001252:	693b      	ldr	r3, [r7, #16]
 8001254:	f003 0301 	and.w	r3, r3, #1
 8001258:	2b00      	cmp	r3, #0
 800125a:	d00c      	beq.n	8001276 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800125c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800125e:	015a      	lsls	r2, r3, #5
 8001260:	69fb      	ldr	r3, [r7, #28]
 8001262:	4413      	add	r3, r2
 8001264:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001268:	461a      	mov	r2, r3
 800126a:	2301      	movs	r3, #1
 800126c:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800126e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001270:	6878      	ldr	r0, [r7, #4]
 8001272:	f000 feab 	bl	8001fcc <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001276:	693b      	ldr	r3, [r7, #16]
 8001278:	f003 0308 	and.w	r3, r3, #8
 800127c:	2b00      	cmp	r3, #0
 800127e:	d00c      	beq.n	800129a <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001282:	015a      	lsls	r2, r3, #5
 8001284:	69fb      	ldr	r3, [r7, #28]
 8001286:	4413      	add	r3, r2
 8001288:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800128c:	461a      	mov	r2, r3
 800128e:	2308      	movs	r3, #8
 8001290:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001292:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001294:	6878      	ldr	r0, [r7, #4]
 8001296:	f000 ff81 	bl	800219c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800129a:	693b      	ldr	r3, [r7, #16]
 800129c:	f003 0310 	and.w	r3, r3, #16
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d008      	beq.n	80012b6 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80012a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012a6:	015a      	lsls	r2, r3, #5
 80012a8:	69fb      	ldr	r3, [r7, #28]
 80012aa:	4413      	add	r3, r2
 80012ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80012b0:	461a      	mov	r2, r3
 80012b2:	2310      	movs	r3, #16
 80012b4:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80012b6:	693b      	ldr	r3, [r7, #16]
 80012b8:	f003 0302 	and.w	r3, r3, #2
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d030      	beq.n	8001322 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80012c0:	6a3b      	ldr	r3, [r7, #32]
 80012c2:	695b      	ldr	r3, [r3, #20]
 80012c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012c8:	2b80      	cmp	r3, #128	; 0x80
 80012ca:	d109      	bne.n	80012e0 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80012cc:	69fb      	ldr	r3, [r7, #28]
 80012ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80012d2:	685b      	ldr	r3, [r3, #4]
 80012d4:	69fa      	ldr	r2, [r7, #28]
 80012d6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80012da:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80012de:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80012e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80012e2:	4613      	mov	r3, r2
 80012e4:	00db      	lsls	r3, r3, #3
 80012e6:	4413      	add	r3, r2
 80012e8:	009b      	lsls	r3, r3, #2
 80012ea:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80012ee:	687a      	ldr	r2, [r7, #4]
 80012f0:	4413      	add	r3, r2
 80012f2:	3304      	adds	r3, #4
 80012f4:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80012f6:	697b      	ldr	r3, [r7, #20]
 80012f8:	78db      	ldrb	r3, [r3, #3]
 80012fa:	2b01      	cmp	r3, #1
 80012fc:	d108      	bne.n	8001310 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80012fe:	697b      	ldr	r3, [r7, #20]
 8001300:	2200      	movs	r2, #0
 8001302:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001306:	b2db      	uxtb	r3, r3
 8001308:	4619      	mov	r1, r3
 800130a:	6878      	ldr	r0, [r7, #4]
 800130c:	f004 ffda 	bl	80062c4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8001310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001312:	015a      	lsls	r2, r3, #5
 8001314:	69fb      	ldr	r3, [r7, #28]
 8001316:	4413      	add	r3, r2
 8001318:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800131c:	461a      	mov	r2, r3
 800131e:	2302      	movs	r3, #2
 8001320:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001322:	693b      	ldr	r3, [r7, #16]
 8001324:	f003 0320 	and.w	r3, r3, #32
 8001328:	2b00      	cmp	r3, #0
 800132a:	d008      	beq.n	800133e <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800132c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800132e:	015a      	lsls	r2, r3, #5
 8001330:	69fb      	ldr	r3, [r7, #28]
 8001332:	4413      	add	r3, r2
 8001334:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001338:	461a      	mov	r2, r3
 800133a:	2320      	movs	r3, #32
 800133c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800133e:	693b      	ldr	r3, [r7, #16]
 8001340:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001344:	2b00      	cmp	r3, #0
 8001346:	d009      	beq.n	800135c <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800134a:	015a      	lsls	r2, r3, #5
 800134c:	69fb      	ldr	r3, [r7, #28]
 800134e:	4413      	add	r3, r2
 8001350:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001354:	461a      	mov	r2, r3
 8001356:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800135a:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800135c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800135e:	3301      	adds	r3, #1
 8001360:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001362:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001364:	085b      	lsrs	r3, r3, #1
 8001366:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001368:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800136a:	2b00      	cmp	r3, #0
 800136c:	f47f af62 	bne.w	8001234 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	4618      	mov	r0, r3
 8001376:	f002 fee3 	bl	8004140 <USB_ReadInterrupts>
 800137a:	4603      	mov	r3, r0
 800137c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001380:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001384:	f040 80db 	bne.w	800153e <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	4618      	mov	r0, r3
 800138e:	f002 ff04 	bl	800419a <USB_ReadDevAllInEpInterrupt>
 8001392:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8001394:	2300      	movs	r3, #0
 8001396:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8001398:	e0cd      	b.n	8001536 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800139a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800139c:	f003 0301 	and.w	r3, r3, #1
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	f000 80c2 	beq.w	800152a <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80013ac:	b2d2      	uxtb	r2, r2
 80013ae:	4611      	mov	r1, r2
 80013b0:	4618      	mov	r0, r3
 80013b2:	f002 ff2a 	bl	800420a <USB_ReadDevInEPInterrupt>
 80013b6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80013b8:	693b      	ldr	r3, [r7, #16]
 80013ba:	f003 0301 	and.w	r3, r3, #1
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d057      	beq.n	8001472 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80013c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013c4:	f003 030f 	and.w	r3, r3, #15
 80013c8:	2201      	movs	r2, #1
 80013ca:	fa02 f303 	lsl.w	r3, r2, r3
 80013ce:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80013d0:	69fb      	ldr	r3, [r7, #28]
 80013d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80013d6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	43db      	mvns	r3, r3
 80013dc:	69f9      	ldr	r1, [r7, #28]
 80013de:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80013e2:	4013      	ands	r3, r2
 80013e4:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80013e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013e8:	015a      	lsls	r2, r3, #5
 80013ea:	69fb      	ldr	r3, [r7, #28]
 80013ec:	4413      	add	r3, r2
 80013ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80013f2:	461a      	mov	r2, r3
 80013f4:	2301      	movs	r3, #1
 80013f6:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	691b      	ldr	r3, [r3, #16]
 80013fc:	2b01      	cmp	r3, #1
 80013fe:	d132      	bne.n	8001466 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001400:	6879      	ldr	r1, [r7, #4]
 8001402:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001404:	4613      	mov	r3, r2
 8001406:	00db      	lsls	r3, r3, #3
 8001408:	4413      	add	r3, r2
 800140a:	009b      	lsls	r3, r3, #2
 800140c:	440b      	add	r3, r1
 800140e:	334c      	adds	r3, #76	; 0x4c
 8001410:	6819      	ldr	r1, [r3, #0]
 8001412:	6878      	ldr	r0, [r7, #4]
 8001414:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001416:	4613      	mov	r3, r2
 8001418:	00db      	lsls	r3, r3, #3
 800141a:	4413      	add	r3, r2
 800141c:	009b      	lsls	r3, r3, #2
 800141e:	4403      	add	r3, r0
 8001420:	3348      	adds	r3, #72	; 0x48
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	4419      	add	r1, r3
 8001426:	6878      	ldr	r0, [r7, #4]
 8001428:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800142a:	4613      	mov	r3, r2
 800142c:	00db      	lsls	r3, r3, #3
 800142e:	4413      	add	r3, r2
 8001430:	009b      	lsls	r3, r3, #2
 8001432:	4403      	add	r3, r0
 8001434:	334c      	adds	r3, #76	; 0x4c
 8001436:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800143a:	2b00      	cmp	r3, #0
 800143c:	d113      	bne.n	8001466 <HAL_PCD_IRQHandler+0x3a2>
 800143e:	6879      	ldr	r1, [r7, #4]
 8001440:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001442:	4613      	mov	r3, r2
 8001444:	00db      	lsls	r3, r3, #3
 8001446:	4413      	add	r3, r2
 8001448:	009b      	lsls	r3, r3, #2
 800144a:	440b      	add	r3, r1
 800144c:	3354      	adds	r3, #84	; 0x54
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	2b00      	cmp	r3, #0
 8001452:	d108      	bne.n	8001466 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	6818      	ldr	r0, [r3, #0]
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800145e:	461a      	mov	r2, r3
 8001460:	2101      	movs	r1, #1
 8001462:	f002 ff31 	bl	80042c8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001468:	b2db      	uxtb	r3, r3
 800146a:	4619      	mov	r1, r3
 800146c:	6878      	ldr	r0, [r7, #4]
 800146e:	f004 fea4 	bl	80061ba <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001472:	693b      	ldr	r3, [r7, #16]
 8001474:	f003 0308 	and.w	r3, r3, #8
 8001478:	2b00      	cmp	r3, #0
 800147a:	d008      	beq.n	800148e <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800147c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800147e:	015a      	lsls	r2, r3, #5
 8001480:	69fb      	ldr	r3, [r7, #28]
 8001482:	4413      	add	r3, r2
 8001484:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001488:	461a      	mov	r2, r3
 800148a:	2308      	movs	r3, #8
 800148c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800148e:	693b      	ldr	r3, [r7, #16]
 8001490:	f003 0310 	and.w	r3, r3, #16
 8001494:	2b00      	cmp	r3, #0
 8001496:	d008      	beq.n	80014aa <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800149a:	015a      	lsls	r2, r3, #5
 800149c:	69fb      	ldr	r3, [r7, #28]
 800149e:	4413      	add	r3, r2
 80014a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80014a4:	461a      	mov	r2, r3
 80014a6:	2310      	movs	r3, #16
 80014a8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80014aa:	693b      	ldr	r3, [r7, #16]
 80014ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d008      	beq.n	80014c6 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80014b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014b6:	015a      	lsls	r2, r3, #5
 80014b8:	69fb      	ldr	r3, [r7, #28]
 80014ba:	4413      	add	r3, r2
 80014bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80014c0:	461a      	mov	r2, r3
 80014c2:	2340      	movs	r3, #64	; 0x40
 80014c4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80014c6:	693b      	ldr	r3, [r7, #16]
 80014c8:	f003 0302 	and.w	r3, r3, #2
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d023      	beq.n	8001518 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80014d0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80014d2:	6a38      	ldr	r0, [r7, #32]
 80014d4:	f001 fe12 	bl	80030fc <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80014d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014da:	4613      	mov	r3, r2
 80014dc:	00db      	lsls	r3, r3, #3
 80014de:	4413      	add	r3, r2
 80014e0:	009b      	lsls	r3, r3, #2
 80014e2:	3338      	adds	r3, #56	; 0x38
 80014e4:	687a      	ldr	r2, [r7, #4]
 80014e6:	4413      	add	r3, r2
 80014e8:	3304      	adds	r3, #4
 80014ea:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80014ec:	697b      	ldr	r3, [r7, #20]
 80014ee:	78db      	ldrb	r3, [r3, #3]
 80014f0:	2b01      	cmp	r3, #1
 80014f2:	d108      	bne.n	8001506 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80014f4:	697b      	ldr	r3, [r7, #20]
 80014f6:	2200      	movs	r2, #0
 80014f8:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80014fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014fc:	b2db      	uxtb	r3, r3
 80014fe:	4619      	mov	r1, r3
 8001500:	6878      	ldr	r0, [r7, #4]
 8001502:	f004 fef1 	bl	80062e8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001508:	015a      	lsls	r2, r3, #5
 800150a:	69fb      	ldr	r3, [r7, #28]
 800150c:	4413      	add	r3, r2
 800150e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001512:	461a      	mov	r2, r3
 8001514:	2302      	movs	r3, #2
 8001516:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001518:	693b      	ldr	r3, [r7, #16]
 800151a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800151e:	2b00      	cmp	r3, #0
 8001520:	d003      	beq.n	800152a <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001522:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001524:	6878      	ldr	r0, [r7, #4]
 8001526:	f000 fcc3 	bl	8001eb0 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800152a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800152c:	3301      	adds	r3, #1
 800152e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001530:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001532:	085b      	lsrs	r3, r3, #1
 8001534:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001536:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001538:	2b00      	cmp	r3, #0
 800153a:	f47f af2e 	bne.w	800139a <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	4618      	mov	r0, r3
 8001544:	f002 fdfc 	bl	8004140 <USB_ReadInterrupts>
 8001548:	4603      	mov	r3, r0
 800154a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800154e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001552:	d122      	bne.n	800159a <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001554:	69fb      	ldr	r3, [r7, #28]
 8001556:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800155a:	685b      	ldr	r3, [r3, #4]
 800155c:	69fa      	ldr	r2, [r7, #28]
 800155e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001562:	f023 0301 	bic.w	r3, r3, #1
 8001566:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800156e:	2b01      	cmp	r3, #1
 8001570:	d108      	bne.n	8001584 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	2200      	movs	r2, #0
 8001576:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800157a:	2100      	movs	r1, #0
 800157c:	6878      	ldr	r0, [r7, #4]
 800157e:	f000 feab 	bl	80022d8 <HAL_PCDEx_LPM_Callback>
 8001582:	e002      	b.n	800158a <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001584:	6878      	ldr	r0, [r7, #4]
 8001586:	f004 fe8f 	bl	80062a8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	695a      	ldr	r2, [r3, #20]
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8001598:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	4618      	mov	r0, r3
 80015a0:	f002 fdce 	bl	8004140 <USB_ReadInterrupts>
 80015a4:	4603      	mov	r3, r0
 80015a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80015aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80015ae:	d112      	bne.n	80015d6 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80015b0:	69fb      	ldr	r3, [r7, #28]
 80015b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80015b6:	689b      	ldr	r3, [r3, #8]
 80015b8:	f003 0301 	and.w	r3, r3, #1
 80015bc:	2b01      	cmp	r3, #1
 80015be:	d102      	bne.n	80015c6 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80015c0:	6878      	ldr	r0, [r7, #4]
 80015c2:	f004 fe4b 	bl	800625c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	695a      	ldr	r2, [r3, #20]
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80015d4:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	4618      	mov	r0, r3
 80015dc:	f002 fdb0 	bl	8004140 <USB_ReadInterrupts>
 80015e0:	4603      	mov	r3, r0
 80015e2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80015e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80015ea:	f040 80b7 	bne.w	800175c <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80015ee:	69fb      	ldr	r3, [r7, #28]
 80015f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80015f4:	685b      	ldr	r3, [r3, #4]
 80015f6:	69fa      	ldr	r2, [r7, #28]
 80015f8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80015fc:	f023 0301 	bic.w	r3, r3, #1
 8001600:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	2110      	movs	r1, #16
 8001608:	4618      	mov	r0, r3
 800160a:	f001 fd77 	bl	80030fc <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800160e:	2300      	movs	r3, #0
 8001610:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001612:	e046      	b.n	80016a2 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001614:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001616:	015a      	lsls	r2, r3, #5
 8001618:	69fb      	ldr	r3, [r7, #28]
 800161a:	4413      	add	r3, r2
 800161c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001620:	461a      	mov	r2, r3
 8001622:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001626:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001628:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800162a:	015a      	lsls	r2, r3, #5
 800162c:	69fb      	ldr	r3, [r7, #28]
 800162e:	4413      	add	r3, r2
 8001630:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001638:	0151      	lsls	r1, r2, #5
 800163a:	69fa      	ldr	r2, [r7, #28]
 800163c:	440a      	add	r2, r1
 800163e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001642:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001646:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001648:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800164a:	015a      	lsls	r2, r3, #5
 800164c:	69fb      	ldr	r3, [r7, #28]
 800164e:	4413      	add	r3, r2
 8001650:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001654:	461a      	mov	r2, r3
 8001656:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800165a:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800165c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800165e:	015a      	lsls	r2, r3, #5
 8001660:	69fb      	ldr	r3, [r7, #28]
 8001662:	4413      	add	r3, r2
 8001664:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800166c:	0151      	lsls	r1, r2, #5
 800166e:	69fa      	ldr	r2, [r7, #28]
 8001670:	440a      	add	r2, r1
 8001672:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001676:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800167a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800167c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800167e:	015a      	lsls	r2, r3, #5
 8001680:	69fb      	ldr	r3, [r7, #28]
 8001682:	4413      	add	r3, r2
 8001684:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800168c:	0151      	lsls	r1, r2, #5
 800168e:	69fa      	ldr	r2, [r7, #28]
 8001690:	440a      	add	r2, r1
 8001692:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001696:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800169a:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800169c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800169e:	3301      	adds	r3, #1
 80016a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	685b      	ldr	r3, [r3, #4]
 80016a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80016a8:	429a      	cmp	r2, r3
 80016aa:	d3b3      	bcc.n	8001614 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80016ac:	69fb      	ldr	r3, [r7, #28]
 80016ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80016b2:	69db      	ldr	r3, [r3, #28]
 80016b4:	69fa      	ldr	r2, [r7, #28]
 80016b6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80016ba:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80016be:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d016      	beq.n	80016f6 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80016c8:	69fb      	ldr	r3, [r7, #28]
 80016ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80016ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80016d2:	69fa      	ldr	r2, [r7, #28]
 80016d4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80016d8:	f043 030b 	orr.w	r3, r3, #11
 80016dc:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80016e0:	69fb      	ldr	r3, [r7, #28]
 80016e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80016e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016e8:	69fa      	ldr	r2, [r7, #28]
 80016ea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80016ee:	f043 030b 	orr.w	r3, r3, #11
 80016f2:	6453      	str	r3, [r2, #68]	; 0x44
 80016f4:	e015      	b.n	8001722 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80016f6:	69fb      	ldr	r3, [r7, #28]
 80016f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80016fc:	695b      	ldr	r3, [r3, #20]
 80016fe:	69fa      	ldr	r2, [r7, #28]
 8001700:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001704:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001708:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800170c:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800170e:	69fb      	ldr	r3, [r7, #28]
 8001710:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001714:	691b      	ldr	r3, [r3, #16]
 8001716:	69fa      	ldr	r2, [r7, #28]
 8001718:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800171c:	f043 030b 	orr.w	r3, r3, #11
 8001720:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001722:	69fb      	ldr	r3, [r7, #28]
 8001724:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	69fa      	ldr	r2, [r7, #28]
 800172c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001730:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8001734:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	6818      	ldr	r0, [r3, #0]
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	691b      	ldr	r3, [r3, #16]
 800173e:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001746:	461a      	mov	r2, r3
 8001748:	f002 fdbe 	bl	80042c8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	695a      	ldr	r2, [r3, #20]
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800175a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	4618      	mov	r0, r3
 8001762:	f002 fced 	bl	8004140 <USB_ReadInterrupts>
 8001766:	4603      	mov	r3, r0
 8001768:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800176c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001770:	d124      	bne.n	80017bc <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	4618      	mov	r0, r3
 8001778:	f002 fd83 	bl	8004282 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	4618      	mov	r0, r3
 8001782:	f001 fd38 	bl	80031f6 <USB_GetDevSpeed>
 8001786:	4603      	mov	r3, r0
 8001788:	461a      	mov	r2, r3
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681c      	ldr	r4, [r3, #0]
 8001792:	f001 f9d1 	bl	8002b38 <HAL_RCC_GetHCLKFreq>
 8001796:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800179c:	b2db      	uxtb	r3, r3
 800179e:	461a      	mov	r2, r3
 80017a0:	4620      	mov	r0, r4
 80017a2:	f001 fa37 	bl	8002c14 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80017a6:	6878      	ldr	r0, [r7, #4]
 80017a8:	f004 fd2f 	bl	800620a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	695a      	ldr	r2, [r3, #20]
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80017ba:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	4618      	mov	r0, r3
 80017c2:	f002 fcbd 	bl	8004140 <USB_ReadInterrupts>
 80017c6:	4603      	mov	r3, r0
 80017c8:	f003 0308 	and.w	r3, r3, #8
 80017cc:	2b08      	cmp	r3, #8
 80017ce:	d10a      	bne.n	80017e6 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80017d0:	6878      	ldr	r0, [r7, #4]
 80017d2:	f004 fd0c 	bl	80061ee <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	695a      	ldr	r2, [r3, #20]
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f002 0208 	and.w	r2, r2, #8
 80017e4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	4618      	mov	r0, r3
 80017ec:	f002 fca8 	bl	8004140 <USB_ReadInterrupts>
 80017f0:	4603      	mov	r3, r0
 80017f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017f6:	2b80      	cmp	r3, #128	; 0x80
 80017f8:	d122      	bne.n	8001840 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80017fa:	6a3b      	ldr	r3, [r7, #32]
 80017fc:	699b      	ldr	r3, [r3, #24]
 80017fe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001802:	6a3b      	ldr	r3, [r7, #32]
 8001804:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001806:	2301      	movs	r3, #1
 8001808:	627b      	str	r3, [r7, #36]	; 0x24
 800180a:	e014      	b.n	8001836 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800180c:	6879      	ldr	r1, [r7, #4]
 800180e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001810:	4613      	mov	r3, r2
 8001812:	00db      	lsls	r3, r3, #3
 8001814:	4413      	add	r3, r2
 8001816:	009b      	lsls	r3, r3, #2
 8001818:	440b      	add	r3, r1
 800181a:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800181e:	781b      	ldrb	r3, [r3, #0]
 8001820:	2b01      	cmp	r3, #1
 8001822:	d105      	bne.n	8001830 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8001824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001826:	b2db      	uxtb	r3, r3
 8001828:	4619      	mov	r1, r3
 800182a:	6878      	ldr	r0, [r7, #4]
 800182c:	f000 fb0f 	bl	8001e4e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001832:	3301      	adds	r3, #1
 8001834:	627b      	str	r3, [r7, #36]	; 0x24
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	685b      	ldr	r3, [r3, #4]
 800183a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800183c:	429a      	cmp	r2, r3
 800183e:	d3e5      	bcc.n	800180c <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	4618      	mov	r0, r3
 8001846:	f002 fc7b 	bl	8004140 <USB_ReadInterrupts>
 800184a:	4603      	mov	r3, r0
 800184c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001850:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001854:	d13b      	bne.n	80018ce <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001856:	2301      	movs	r3, #1
 8001858:	627b      	str	r3, [r7, #36]	; 0x24
 800185a:	e02b      	b.n	80018b4 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800185c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800185e:	015a      	lsls	r2, r3, #5
 8001860:	69fb      	ldr	r3, [r7, #28]
 8001862:	4413      	add	r3, r2
 8001864:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800186c:	6879      	ldr	r1, [r7, #4]
 800186e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001870:	4613      	mov	r3, r2
 8001872:	00db      	lsls	r3, r3, #3
 8001874:	4413      	add	r3, r2
 8001876:	009b      	lsls	r3, r3, #2
 8001878:	440b      	add	r3, r1
 800187a:	3340      	adds	r3, #64	; 0x40
 800187c:	781b      	ldrb	r3, [r3, #0]
 800187e:	2b01      	cmp	r3, #1
 8001880:	d115      	bne.n	80018ae <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8001882:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001884:	2b00      	cmp	r3, #0
 8001886:	da12      	bge.n	80018ae <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8001888:	6879      	ldr	r1, [r7, #4]
 800188a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800188c:	4613      	mov	r3, r2
 800188e:	00db      	lsls	r3, r3, #3
 8001890:	4413      	add	r3, r2
 8001892:	009b      	lsls	r3, r3, #2
 8001894:	440b      	add	r3, r1
 8001896:	333f      	adds	r3, #63	; 0x3f
 8001898:	2201      	movs	r2, #1
 800189a:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800189c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800189e:	b2db      	uxtb	r3, r3
 80018a0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80018a4:	b2db      	uxtb	r3, r3
 80018a6:	4619      	mov	r1, r3
 80018a8:	6878      	ldr	r0, [r7, #4]
 80018aa:	f000 fad0 	bl	8001e4e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80018ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018b0:	3301      	adds	r3, #1
 80018b2:	627b      	str	r3, [r7, #36]	; 0x24
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	685b      	ldr	r3, [r3, #4]
 80018b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018ba:	429a      	cmp	r2, r3
 80018bc:	d3ce      	bcc.n	800185c <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	695a      	ldr	r2, [r3, #20]
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80018cc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	4618      	mov	r0, r3
 80018d4:	f002 fc34 	bl	8004140 <USB_ReadInterrupts>
 80018d8:	4603      	mov	r3, r0
 80018da:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018de:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80018e2:	d155      	bne.n	8001990 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80018e4:	2301      	movs	r3, #1
 80018e6:	627b      	str	r3, [r7, #36]	; 0x24
 80018e8:	e045      	b.n	8001976 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80018ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ec:	015a      	lsls	r2, r3, #5
 80018ee:	69fb      	ldr	r3, [r7, #28]
 80018f0:	4413      	add	r3, r2
 80018f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80018fa:	6879      	ldr	r1, [r7, #4]
 80018fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018fe:	4613      	mov	r3, r2
 8001900:	00db      	lsls	r3, r3, #3
 8001902:	4413      	add	r3, r2
 8001904:	009b      	lsls	r3, r3, #2
 8001906:	440b      	add	r3, r1
 8001908:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800190c:	781b      	ldrb	r3, [r3, #0]
 800190e:	2b01      	cmp	r3, #1
 8001910:	d12e      	bne.n	8001970 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001912:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001914:	2b00      	cmp	r3, #0
 8001916:	da2b      	bge.n	8001970 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8001918:	69bb      	ldr	r3, [r7, #24]
 800191a:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8001924:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001928:	429a      	cmp	r2, r3
 800192a:	d121      	bne.n	8001970 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800192c:	6879      	ldr	r1, [r7, #4]
 800192e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001930:	4613      	mov	r3, r2
 8001932:	00db      	lsls	r3, r3, #3
 8001934:	4413      	add	r3, r2
 8001936:	009b      	lsls	r3, r3, #2
 8001938:	440b      	add	r3, r1
 800193a:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800193e:	2201      	movs	r2, #1
 8001940:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8001942:	6a3b      	ldr	r3, [r7, #32]
 8001944:	699b      	ldr	r3, [r3, #24]
 8001946:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800194a:	6a3b      	ldr	r3, [r7, #32]
 800194c:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800194e:	6a3b      	ldr	r3, [r7, #32]
 8001950:	695b      	ldr	r3, [r3, #20]
 8001952:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001956:	2b00      	cmp	r3, #0
 8001958:	d10a      	bne.n	8001970 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800195a:	69fb      	ldr	r3, [r7, #28]
 800195c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001960:	685b      	ldr	r3, [r3, #4]
 8001962:	69fa      	ldr	r2, [r7, #28]
 8001964:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001968:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800196c:	6053      	str	r3, [r2, #4]
            break;
 800196e:	e007      	b.n	8001980 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001972:	3301      	adds	r3, #1
 8001974:	627b      	str	r3, [r7, #36]	; 0x24
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	685b      	ldr	r3, [r3, #4]
 800197a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800197c:	429a      	cmp	r2, r3
 800197e:	d3b4      	bcc.n	80018ea <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	695a      	ldr	r2, [r3, #20]
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800198e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	4618      	mov	r0, r3
 8001996:	f002 fbd3 	bl	8004140 <USB_ReadInterrupts>
 800199a:	4603      	mov	r3, r0
 800199c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80019a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80019a4:	d10a      	bne.n	80019bc <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80019a6:	6878      	ldr	r0, [r7, #4]
 80019a8:	f004 fcb0 	bl	800630c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	695a      	ldr	r2, [r3, #20]
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80019ba:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	4618      	mov	r0, r3
 80019c2:	f002 fbbd 	bl	8004140 <USB_ReadInterrupts>
 80019c6:	4603      	mov	r3, r0
 80019c8:	f003 0304 	and.w	r3, r3, #4
 80019cc:	2b04      	cmp	r3, #4
 80019ce:	d115      	bne.n	80019fc <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	685b      	ldr	r3, [r3, #4]
 80019d6:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80019d8:	69bb      	ldr	r3, [r7, #24]
 80019da:	f003 0304 	and.w	r3, r3, #4
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d002      	beq.n	80019e8 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80019e2:	6878      	ldr	r0, [r7, #4]
 80019e4:	f004 fca0 	bl	8006328 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	6859      	ldr	r1, [r3, #4]
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	69ba      	ldr	r2, [r7, #24]
 80019f4:	430a      	orrs	r2, r1
 80019f6:	605a      	str	r2, [r3, #4]
 80019f8:	e000      	b.n	80019fc <HAL_PCD_IRQHandler+0x938>
      return;
 80019fa:	bf00      	nop
    }
  }
}
 80019fc:	3734      	adds	r7, #52	; 0x34
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd90      	pop	{r4, r7, pc}

08001a02 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001a02:	b580      	push	{r7, lr}
 8001a04:	b082      	sub	sp, #8
 8001a06:	af00      	add	r7, sp, #0
 8001a08:	6078      	str	r0, [r7, #4]
 8001a0a:	460b      	mov	r3, r1
 8001a0c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001a14:	2b01      	cmp	r3, #1
 8001a16:	d101      	bne.n	8001a1c <HAL_PCD_SetAddress+0x1a>
 8001a18:	2302      	movs	r3, #2
 8001a1a:	e013      	b.n	8001a44 <HAL_PCD_SetAddress+0x42>
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	2201      	movs	r2, #1
 8001a20:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	78fa      	ldrb	r2, [r7, #3]
 8001a28:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	78fa      	ldrb	r2, [r7, #3]
 8001a32:	4611      	mov	r1, r2
 8001a34:	4618      	mov	r0, r3
 8001a36:	f002 fb1b 	bl	8004070 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001a42:	2300      	movs	r3, #0
}
 8001a44:	4618      	mov	r0, r3
 8001a46:	3708      	adds	r7, #8
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	bd80      	pop	{r7, pc}

08001a4c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b084      	sub	sp, #16
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
 8001a54:	4608      	mov	r0, r1
 8001a56:	4611      	mov	r1, r2
 8001a58:	461a      	mov	r2, r3
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	70fb      	strb	r3, [r7, #3]
 8001a5e:	460b      	mov	r3, r1
 8001a60:	803b      	strh	r3, [r7, #0]
 8001a62:	4613      	mov	r3, r2
 8001a64:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001a66:	2300      	movs	r3, #0
 8001a68:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001a6a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	da0f      	bge.n	8001a92 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001a72:	78fb      	ldrb	r3, [r7, #3]
 8001a74:	f003 020f 	and.w	r2, r3, #15
 8001a78:	4613      	mov	r3, r2
 8001a7a:	00db      	lsls	r3, r3, #3
 8001a7c:	4413      	add	r3, r2
 8001a7e:	009b      	lsls	r3, r3, #2
 8001a80:	3338      	adds	r3, #56	; 0x38
 8001a82:	687a      	ldr	r2, [r7, #4]
 8001a84:	4413      	add	r3, r2
 8001a86:	3304      	adds	r3, #4
 8001a88:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	2201      	movs	r2, #1
 8001a8e:	705a      	strb	r2, [r3, #1]
 8001a90:	e00f      	b.n	8001ab2 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001a92:	78fb      	ldrb	r3, [r7, #3]
 8001a94:	f003 020f 	and.w	r2, r3, #15
 8001a98:	4613      	mov	r3, r2
 8001a9a:	00db      	lsls	r3, r3, #3
 8001a9c:	4413      	add	r3, r2
 8001a9e:	009b      	lsls	r3, r3, #2
 8001aa0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001aa4:	687a      	ldr	r2, [r7, #4]
 8001aa6:	4413      	add	r3, r2
 8001aa8:	3304      	adds	r3, #4
 8001aaa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	2200      	movs	r2, #0
 8001ab0:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001ab2:	78fb      	ldrb	r3, [r7, #3]
 8001ab4:	f003 030f 	and.w	r3, r3, #15
 8001ab8:	b2da      	uxtb	r2, r3
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001abe:	883a      	ldrh	r2, [r7, #0]
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	78ba      	ldrb	r2, [r7, #2]
 8001ac8:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	785b      	ldrb	r3, [r3, #1]
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d004      	beq.n	8001adc <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	781b      	ldrb	r3, [r3, #0]
 8001ad6:	b29a      	uxth	r2, r3
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001adc:	78bb      	ldrb	r3, [r7, #2]
 8001ade:	2b02      	cmp	r3, #2
 8001ae0:	d102      	bne.n	8001ae8 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001aee:	2b01      	cmp	r3, #1
 8001af0:	d101      	bne.n	8001af6 <HAL_PCD_EP_Open+0xaa>
 8001af2:	2302      	movs	r3, #2
 8001af4:	e00e      	b.n	8001b14 <HAL_PCD_EP_Open+0xc8>
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	2201      	movs	r2, #1
 8001afa:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	68f9      	ldr	r1, [r7, #12]
 8001b04:	4618      	mov	r0, r3
 8001b06:	f001 fb9b 	bl	8003240 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8001b12:	7afb      	ldrb	r3, [r7, #11]
}
 8001b14:	4618      	mov	r0, r3
 8001b16:	3710      	adds	r7, #16
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bd80      	pop	{r7, pc}

08001b1c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b084      	sub	sp, #16
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
 8001b24:	460b      	mov	r3, r1
 8001b26:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001b28:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	da0f      	bge.n	8001b50 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001b30:	78fb      	ldrb	r3, [r7, #3]
 8001b32:	f003 020f 	and.w	r2, r3, #15
 8001b36:	4613      	mov	r3, r2
 8001b38:	00db      	lsls	r3, r3, #3
 8001b3a:	4413      	add	r3, r2
 8001b3c:	009b      	lsls	r3, r3, #2
 8001b3e:	3338      	adds	r3, #56	; 0x38
 8001b40:	687a      	ldr	r2, [r7, #4]
 8001b42:	4413      	add	r3, r2
 8001b44:	3304      	adds	r3, #4
 8001b46:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	2201      	movs	r2, #1
 8001b4c:	705a      	strb	r2, [r3, #1]
 8001b4e:	e00f      	b.n	8001b70 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001b50:	78fb      	ldrb	r3, [r7, #3]
 8001b52:	f003 020f 	and.w	r2, r3, #15
 8001b56:	4613      	mov	r3, r2
 8001b58:	00db      	lsls	r3, r3, #3
 8001b5a:	4413      	add	r3, r2
 8001b5c:	009b      	lsls	r3, r3, #2
 8001b5e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001b62:	687a      	ldr	r2, [r7, #4]
 8001b64:	4413      	add	r3, r2
 8001b66:	3304      	adds	r3, #4
 8001b68:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001b70:	78fb      	ldrb	r3, [r7, #3]
 8001b72:	f003 030f 	and.w	r3, r3, #15
 8001b76:	b2da      	uxtb	r2, r3
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001b82:	2b01      	cmp	r3, #1
 8001b84:	d101      	bne.n	8001b8a <HAL_PCD_EP_Close+0x6e>
 8001b86:	2302      	movs	r3, #2
 8001b88:	e00e      	b.n	8001ba8 <HAL_PCD_EP_Close+0x8c>
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	2201      	movs	r2, #1
 8001b8e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	68f9      	ldr	r1, [r7, #12]
 8001b98:	4618      	mov	r0, r3
 8001b9a:	f001 fbd9 	bl	8003350 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8001ba6:	2300      	movs	r3, #0
}
 8001ba8:	4618      	mov	r0, r3
 8001baa:	3710      	adds	r7, #16
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bd80      	pop	{r7, pc}

08001bb0 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b086      	sub	sp, #24
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	60f8      	str	r0, [r7, #12]
 8001bb8:	607a      	str	r2, [r7, #4]
 8001bba:	603b      	str	r3, [r7, #0]
 8001bbc:	460b      	mov	r3, r1
 8001bbe:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001bc0:	7afb      	ldrb	r3, [r7, #11]
 8001bc2:	f003 020f 	and.w	r2, r3, #15
 8001bc6:	4613      	mov	r3, r2
 8001bc8:	00db      	lsls	r3, r3, #3
 8001bca:	4413      	add	r3, r2
 8001bcc:	009b      	lsls	r3, r3, #2
 8001bce:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001bd2:	68fa      	ldr	r2, [r7, #12]
 8001bd4:	4413      	add	r3, r2
 8001bd6:	3304      	adds	r3, #4
 8001bd8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001bda:	697b      	ldr	r3, [r7, #20]
 8001bdc:	687a      	ldr	r2, [r7, #4]
 8001bde:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8001be0:	697b      	ldr	r3, [r7, #20]
 8001be2:	683a      	ldr	r2, [r7, #0]
 8001be4:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001be6:	697b      	ldr	r3, [r7, #20]
 8001be8:	2200      	movs	r2, #0
 8001bea:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8001bec:	697b      	ldr	r3, [r7, #20]
 8001bee:	2200      	movs	r2, #0
 8001bf0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001bf2:	7afb      	ldrb	r3, [r7, #11]
 8001bf4:	f003 030f 	and.w	r3, r3, #15
 8001bf8:	b2da      	uxtb	r2, r3
 8001bfa:	697b      	ldr	r3, [r7, #20]
 8001bfc:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	691b      	ldr	r3, [r3, #16]
 8001c02:	2b01      	cmp	r3, #1
 8001c04:	d102      	bne.n	8001c0c <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001c06:	687a      	ldr	r2, [r7, #4]
 8001c08:	697b      	ldr	r3, [r7, #20]
 8001c0a:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001c0c:	7afb      	ldrb	r3, [r7, #11]
 8001c0e:	f003 030f 	and.w	r3, r3, #15
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d109      	bne.n	8001c2a <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	6818      	ldr	r0, [r3, #0]
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	691b      	ldr	r3, [r3, #16]
 8001c1e:	b2db      	uxtb	r3, r3
 8001c20:	461a      	mov	r2, r3
 8001c22:	6979      	ldr	r1, [r7, #20]
 8001c24:	f001 feb8 	bl	8003998 <USB_EP0StartXfer>
 8001c28:	e008      	b.n	8001c3c <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	6818      	ldr	r0, [r3, #0]
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	691b      	ldr	r3, [r3, #16]
 8001c32:	b2db      	uxtb	r3, r3
 8001c34:	461a      	mov	r2, r3
 8001c36:	6979      	ldr	r1, [r7, #20]
 8001c38:	f001 fc66 	bl	8003508 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001c3c:	2300      	movs	r3, #0
}
 8001c3e:	4618      	mov	r0, r3
 8001c40:	3718      	adds	r7, #24
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bd80      	pop	{r7, pc}

08001c46 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001c46:	b580      	push	{r7, lr}
 8001c48:	b086      	sub	sp, #24
 8001c4a:	af00      	add	r7, sp, #0
 8001c4c:	60f8      	str	r0, [r7, #12]
 8001c4e:	607a      	str	r2, [r7, #4]
 8001c50:	603b      	str	r3, [r7, #0]
 8001c52:	460b      	mov	r3, r1
 8001c54:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001c56:	7afb      	ldrb	r3, [r7, #11]
 8001c58:	f003 020f 	and.w	r2, r3, #15
 8001c5c:	4613      	mov	r3, r2
 8001c5e:	00db      	lsls	r3, r3, #3
 8001c60:	4413      	add	r3, r2
 8001c62:	009b      	lsls	r3, r3, #2
 8001c64:	3338      	adds	r3, #56	; 0x38
 8001c66:	68fa      	ldr	r2, [r7, #12]
 8001c68:	4413      	add	r3, r2
 8001c6a:	3304      	adds	r3, #4
 8001c6c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001c6e:	697b      	ldr	r3, [r7, #20]
 8001c70:	687a      	ldr	r2, [r7, #4]
 8001c72:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8001c74:	697b      	ldr	r3, [r7, #20]
 8001c76:	683a      	ldr	r2, [r7, #0]
 8001c78:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001c7a:	697b      	ldr	r3, [r7, #20]
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8001c80:	697b      	ldr	r3, [r7, #20]
 8001c82:	2201      	movs	r2, #1
 8001c84:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001c86:	7afb      	ldrb	r3, [r7, #11]
 8001c88:	f003 030f 	and.w	r3, r3, #15
 8001c8c:	b2da      	uxtb	r2, r3
 8001c8e:	697b      	ldr	r3, [r7, #20]
 8001c90:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	691b      	ldr	r3, [r3, #16]
 8001c96:	2b01      	cmp	r3, #1
 8001c98:	d102      	bne.n	8001ca0 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001c9a:	687a      	ldr	r2, [r7, #4]
 8001c9c:	697b      	ldr	r3, [r7, #20]
 8001c9e:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001ca0:	7afb      	ldrb	r3, [r7, #11]
 8001ca2:	f003 030f 	and.w	r3, r3, #15
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d109      	bne.n	8001cbe <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	6818      	ldr	r0, [r3, #0]
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	691b      	ldr	r3, [r3, #16]
 8001cb2:	b2db      	uxtb	r3, r3
 8001cb4:	461a      	mov	r2, r3
 8001cb6:	6979      	ldr	r1, [r7, #20]
 8001cb8:	f001 fe6e 	bl	8003998 <USB_EP0StartXfer>
 8001cbc:	e008      	b.n	8001cd0 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	6818      	ldr	r0, [r3, #0]
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	691b      	ldr	r3, [r3, #16]
 8001cc6:	b2db      	uxtb	r3, r3
 8001cc8:	461a      	mov	r2, r3
 8001cca:	6979      	ldr	r1, [r7, #20]
 8001ccc:	f001 fc1c 	bl	8003508 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001cd0:	2300      	movs	r3, #0
}
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	3718      	adds	r7, #24
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bd80      	pop	{r7, pc}

08001cda <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001cda:	b580      	push	{r7, lr}
 8001cdc:	b084      	sub	sp, #16
 8001cde:	af00      	add	r7, sp, #0
 8001ce0:	6078      	str	r0, [r7, #4]
 8001ce2:	460b      	mov	r3, r1
 8001ce4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001ce6:	78fb      	ldrb	r3, [r7, #3]
 8001ce8:	f003 020f 	and.w	r2, r3, #15
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	685b      	ldr	r3, [r3, #4]
 8001cf0:	429a      	cmp	r2, r3
 8001cf2:	d901      	bls.n	8001cf8 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001cf4:	2301      	movs	r3, #1
 8001cf6:	e050      	b.n	8001d9a <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001cf8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	da0f      	bge.n	8001d20 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001d00:	78fb      	ldrb	r3, [r7, #3]
 8001d02:	f003 020f 	and.w	r2, r3, #15
 8001d06:	4613      	mov	r3, r2
 8001d08:	00db      	lsls	r3, r3, #3
 8001d0a:	4413      	add	r3, r2
 8001d0c:	009b      	lsls	r3, r3, #2
 8001d0e:	3338      	adds	r3, #56	; 0x38
 8001d10:	687a      	ldr	r2, [r7, #4]
 8001d12:	4413      	add	r3, r2
 8001d14:	3304      	adds	r3, #4
 8001d16:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	2201      	movs	r2, #1
 8001d1c:	705a      	strb	r2, [r3, #1]
 8001d1e:	e00d      	b.n	8001d3c <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001d20:	78fa      	ldrb	r2, [r7, #3]
 8001d22:	4613      	mov	r3, r2
 8001d24:	00db      	lsls	r3, r3, #3
 8001d26:	4413      	add	r3, r2
 8001d28:	009b      	lsls	r3, r3, #2
 8001d2a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001d2e:	687a      	ldr	r2, [r7, #4]
 8001d30:	4413      	add	r3, r2
 8001d32:	3304      	adds	r3, #4
 8001d34:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	2200      	movs	r2, #0
 8001d3a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	2201      	movs	r2, #1
 8001d40:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001d42:	78fb      	ldrb	r3, [r7, #3]
 8001d44:	f003 030f 	and.w	r3, r3, #15
 8001d48:	b2da      	uxtb	r2, r3
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001d54:	2b01      	cmp	r3, #1
 8001d56:	d101      	bne.n	8001d5c <HAL_PCD_EP_SetStall+0x82>
 8001d58:	2302      	movs	r3, #2
 8001d5a:	e01e      	b.n	8001d9a <HAL_PCD_EP_SetStall+0xc0>
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	2201      	movs	r2, #1
 8001d60:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	68f9      	ldr	r1, [r7, #12]
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	f002 f8ac 	bl	8003ec8 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001d70:	78fb      	ldrb	r3, [r7, #3]
 8001d72:	f003 030f 	and.w	r3, r3, #15
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d10a      	bne.n	8001d90 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	6818      	ldr	r0, [r3, #0]
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	691b      	ldr	r3, [r3, #16]
 8001d82:	b2d9      	uxtb	r1, r3
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001d8a:	461a      	mov	r2, r3
 8001d8c:	f002 fa9c 	bl	80042c8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2200      	movs	r2, #0
 8001d94:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001d98:	2300      	movs	r3, #0
}
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	3710      	adds	r7, #16
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}

08001da2 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001da2:	b580      	push	{r7, lr}
 8001da4:	b084      	sub	sp, #16
 8001da6:	af00      	add	r7, sp, #0
 8001da8:	6078      	str	r0, [r7, #4]
 8001daa:	460b      	mov	r3, r1
 8001dac:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001dae:	78fb      	ldrb	r3, [r7, #3]
 8001db0:	f003 020f 	and.w	r2, r3, #15
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	685b      	ldr	r3, [r3, #4]
 8001db8:	429a      	cmp	r2, r3
 8001dba:	d901      	bls.n	8001dc0 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001dbc:	2301      	movs	r3, #1
 8001dbe:	e042      	b.n	8001e46 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001dc0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	da0f      	bge.n	8001de8 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001dc8:	78fb      	ldrb	r3, [r7, #3]
 8001dca:	f003 020f 	and.w	r2, r3, #15
 8001dce:	4613      	mov	r3, r2
 8001dd0:	00db      	lsls	r3, r3, #3
 8001dd2:	4413      	add	r3, r2
 8001dd4:	009b      	lsls	r3, r3, #2
 8001dd6:	3338      	adds	r3, #56	; 0x38
 8001dd8:	687a      	ldr	r2, [r7, #4]
 8001dda:	4413      	add	r3, r2
 8001ddc:	3304      	adds	r3, #4
 8001dde:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	2201      	movs	r2, #1
 8001de4:	705a      	strb	r2, [r3, #1]
 8001de6:	e00f      	b.n	8001e08 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001de8:	78fb      	ldrb	r3, [r7, #3]
 8001dea:	f003 020f 	and.w	r2, r3, #15
 8001dee:	4613      	mov	r3, r2
 8001df0:	00db      	lsls	r3, r3, #3
 8001df2:	4413      	add	r3, r2
 8001df4:	009b      	lsls	r3, r3, #2
 8001df6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001dfa:	687a      	ldr	r2, [r7, #4]
 8001dfc:	4413      	add	r3, r2
 8001dfe:	3304      	adds	r3, #4
 8001e00:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	2200      	movs	r2, #0
 8001e06:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001e0e:	78fb      	ldrb	r3, [r7, #3]
 8001e10:	f003 030f 	and.w	r3, r3, #15
 8001e14:	b2da      	uxtb	r2, r3
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001e20:	2b01      	cmp	r3, #1
 8001e22:	d101      	bne.n	8001e28 <HAL_PCD_EP_ClrStall+0x86>
 8001e24:	2302      	movs	r3, #2
 8001e26:	e00e      	b.n	8001e46 <HAL_PCD_EP_ClrStall+0xa4>
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	2201      	movs	r2, #1
 8001e2c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	68f9      	ldr	r1, [r7, #12]
 8001e36:	4618      	mov	r0, r3
 8001e38:	f002 f8b4 	bl	8003fa4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	2200      	movs	r2, #0
 8001e40:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001e44:	2300      	movs	r3, #0
}
 8001e46:	4618      	mov	r0, r3
 8001e48:	3710      	adds	r7, #16
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bd80      	pop	{r7, pc}

08001e4e <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001e4e:	b580      	push	{r7, lr}
 8001e50:	b084      	sub	sp, #16
 8001e52:	af00      	add	r7, sp, #0
 8001e54:	6078      	str	r0, [r7, #4]
 8001e56:	460b      	mov	r3, r1
 8001e58:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8001e5a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	da0c      	bge.n	8001e7c <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e62:	78fb      	ldrb	r3, [r7, #3]
 8001e64:	f003 020f 	and.w	r2, r3, #15
 8001e68:	4613      	mov	r3, r2
 8001e6a:	00db      	lsls	r3, r3, #3
 8001e6c:	4413      	add	r3, r2
 8001e6e:	009b      	lsls	r3, r3, #2
 8001e70:	3338      	adds	r3, #56	; 0x38
 8001e72:	687a      	ldr	r2, [r7, #4]
 8001e74:	4413      	add	r3, r2
 8001e76:	3304      	adds	r3, #4
 8001e78:	60fb      	str	r3, [r7, #12]
 8001e7a:	e00c      	b.n	8001e96 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001e7c:	78fb      	ldrb	r3, [r7, #3]
 8001e7e:	f003 020f 	and.w	r2, r3, #15
 8001e82:	4613      	mov	r3, r2
 8001e84:	00db      	lsls	r3, r3, #3
 8001e86:	4413      	add	r3, r2
 8001e88:	009b      	lsls	r3, r3, #2
 8001e8a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001e8e:	687a      	ldr	r2, [r7, #4]
 8001e90:	4413      	add	r3, r2
 8001e92:	3304      	adds	r3, #4
 8001e94:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	68f9      	ldr	r1, [r7, #12]
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	f001 fed3 	bl	8003c48 <USB_EPStopXfer>
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	72fb      	strb	r3, [r7, #11]

  return ret;
 8001ea6:	7afb      	ldrb	r3, [r7, #11]
}
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	3710      	adds	r7, #16
 8001eac:	46bd      	mov	sp, r7
 8001eae:	bd80      	pop	{r7, pc}

08001eb0 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b08a      	sub	sp, #40	; 0x28
 8001eb4:	af02      	add	r7, sp, #8
 8001eb6:	6078      	str	r0, [r7, #4]
 8001eb8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001ec0:	697b      	ldr	r3, [r7, #20]
 8001ec2:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8001ec4:	683a      	ldr	r2, [r7, #0]
 8001ec6:	4613      	mov	r3, r2
 8001ec8:	00db      	lsls	r3, r3, #3
 8001eca:	4413      	add	r3, r2
 8001ecc:	009b      	lsls	r3, r3, #2
 8001ece:	3338      	adds	r3, #56	; 0x38
 8001ed0:	687a      	ldr	r2, [r7, #4]
 8001ed2:	4413      	add	r3, r2
 8001ed4:	3304      	adds	r3, #4
 8001ed6:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	6a1a      	ldr	r2, [r3, #32]
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	699b      	ldr	r3, [r3, #24]
 8001ee0:	429a      	cmp	r2, r3
 8001ee2:	d901      	bls.n	8001ee8 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8001ee4:	2301      	movs	r3, #1
 8001ee6:	e06c      	b.n	8001fc2 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	699a      	ldr	r2, [r3, #24]
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	6a1b      	ldr	r3, [r3, #32]
 8001ef0:	1ad3      	subs	r3, r2, r3
 8001ef2:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	68db      	ldr	r3, [r3, #12]
 8001ef8:	69fa      	ldr	r2, [r7, #28]
 8001efa:	429a      	cmp	r2, r3
 8001efc:	d902      	bls.n	8001f04 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	68db      	ldr	r3, [r3, #12]
 8001f02:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8001f04:	69fb      	ldr	r3, [r7, #28]
 8001f06:	3303      	adds	r3, #3
 8001f08:	089b      	lsrs	r3, r3, #2
 8001f0a:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001f0c:	e02b      	b.n	8001f66 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	699a      	ldr	r2, [r3, #24]
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	6a1b      	ldr	r3, [r3, #32]
 8001f16:	1ad3      	subs	r3, r2, r3
 8001f18:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	68db      	ldr	r3, [r3, #12]
 8001f1e:	69fa      	ldr	r2, [r7, #28]
 8001f20:	429a      	cmp	r2, r3
 8001f22:	d902      	bls.n	8001f2a <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	68db      	ldr	r3, [r3, #12]
 8001f28:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8001f2a:	69fb      	ldr	r3, [r7, #28]
 8001f2c:	3303      	adds	r3, #3
 8001f2e:	089b      	lsrs	r3, r3, #2
 8001f30:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	6919      	ldr	r1, [r3, #16]
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	b2da      	uxtb	r2, r3
 8001f3a:	69fb      	ldr	r3, [r7, #28]
 8001f3c:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8001f42:	b2db      	uxtb	r3, r3
 8001f44:	9300      	str	r3, [sp, #0]
 8001f46:	4603      	mov	r3, r0
 8001f48:	6978      	ldr	r0, [r7, #20]
 8001f4a:	f001 ff27 	bl	8003d9c <USB_WritePacket>

    ep->xfer_buff  += len;
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	691a      	ldr	r2, [r3, #16]
 8001f52:	69fb      	ldr	r3, [r7, #28]
 8001f54:	441a      	add	r2, r3
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	6a1a      	ldr	r2, [r3, #32]
 8001f5e:	69fb      	ldr	r3, [r7, #28]
 8001f60:	441a      	add	r2, r3
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	015a      	lsls	r2, r3, #5
 8001f6a:	693b      	ldr	r3, [r7, #16]
 8001f6c:	4413      	add	r3, r2
 8001f6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001f72:	699b      	ldr	r3, [r3, #24]
 8001f74:	b29b      	uxth	r3, r3
 8001f76:	69ba      	ldr	r2, [r7, #24]
 8001f78:	429a      	cmp	r2, r3
 8001f7a:	d809      	bhi.n	8001f90 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	6a1a      	ldr	r2, [r3, #32]
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001f84:	429a      	cmp	r2, r3
 8001f86:	d203      	bcs.n	8001f90 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	699b      	ldr	r3, [r3, #24]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d1be      	bne.n	8001f0e <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	699a      	ldr	r2, [r3, #24]
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	6a1b      	ldr	r3, [r3, #32]
 8001f98:	429a      	cmp	r2, r3
 8001f9a:	d811      	bhi.n	8001fc0 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	f003 030f 	and.w	r3, r3, #15
 8001fa2:	2201      	movs	r2, #1
 8001fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa8:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001faa:	693b      	ldr	r3, [r7, #16]
 8001fac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001fb0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001fb2:	68bb      	ldr	r3, [r7, #8]
 8001fb4:	43db      	mvns	r3, r3
 8001fb6:	6939      	ldr	r1, [r7, #16]
 8001fb8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001fbc:	4013      	ands	r3, r2
 8001fbe:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8001fc0:	2300      	movs	r3, #0
}
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	3720      	adds	r7, #32
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}
	...

08001fcc <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b088      	sub	sp, #32
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
 8001fd4:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001fdc:	69fb      	ldr	r3, [r7, #28]
 8001fde:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8001fe0:	69fb      	ldr	r3, [r7, #28]
 8001fe2:	333c      	adds	r3, #60	; 0x3c
 8001fe4:	3304      	adds	r3, #4
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	015a      	lsls	r2, r3, #5
 8001fee:	69bb      	ldr	r3, [r7, #24]
 8001ff0:	4413      	add	r3, r2
 8001ff2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001ff6:	689b      	ldr	r3, [r3, #8]
 8001ff8:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	691b      	ldr	r3, [r3, #16]
 8001ffe:	2b01      	cmp	r3, #1
 8002000:	d17b      	bne.n	80020fa <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002002:	693b      	ldr	r3, [r7, #16]
 8002004:	f003 0308 	and.w	r3, r3, #8
 8002008:	2b00      	cmp	r3, #0
 800200a:	d015      	beq.n	8002038 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800200c:	697b      	ldr	r3, [r7, #20]
 800200e:	4a61      	ldr	r2, [pc, #388]	; (8002194 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002010:	4293      	cmp	r3, r2
 8002012:	f240 80b9 	bls.w	8002188 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002016:	693b      	ldr	r3, [r7, #16]
 8002018:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800201c:	2b00      	cmp	r3, #0
 800201e:	f000 80b3 	beq.w	8002188 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	015a      	lsls	r2, r3, #5
 8002026:	69bb      	ldr	r3, [r7, #24]
 8002028:	4413      	add	r3, r2
 800202a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800202e:	461a      	mov	r2, r3
 8002030:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002034:	6093      	str	r3, [r2, #8]
 8002036:	e0a7      	b.n	8002188 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002038:	693b      	ldr	r3, [r7, #16]
 800203a:	f003 0320 	and.w	r3, r3, #32
 800203e:	2b00      	cmp	r3, #0
 8002040:	d009      	beq.n	8002056 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	015a      	lsls	r2, r3, #5
 8002046:	69bb      	ldr	r3, [r7, #24]
 8002048:	4413      	add	r3, r2
 800204a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800204e:	461a      	mov	r2, r3
 8002050:	2320      	movs	r3, #32
 8002052:	6093      	str	r3, [r2, #8]
 8002054:	e098      	b.n	8002188 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002056:	693b      	ldr	r3, [r7, #16]
 8002058:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800205c:	2b00      	cmp	r3, #0
 800205e:	f040 8093 	bne.w	8002188 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002062:	697b      	ldr	r3, [r7, #20]
 8002064:	4a4b      	ldr	r2, [pc, #300]	; (8002194 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d90f      	bls.n	800208a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800206a:	693b      	ldr	r3, [r7, #16]
 800206c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002070:	2b00      	cmp	r3, #0
 8002072:	d00a      	beq.n	800208a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	015a      	lsls	r2, r3, #5
 8002078:	69bb      	ldr	r3, [r7, #24]
 800207a:	4413      	add	r3, r2
 800207c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002080:	461a      	mov	r2, r3
 8002082:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002086:	6093      	str	r3, [r2, #8]
 8002088:	e07e      	b.n	8002188 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800208a:	683a      	ldr	r2, [r7, #0]
 800208c:	4613      	mov	r3, r2
 800208e:	00db      	lsls	r3, r3, #3
 8002090:	4413      	add	r3, r2
 8002092:	009b      	lsls	r3, r3, #2
 8002094:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002098:	687a      	ldr	r2, [r7, #4]
 800209a:	4413      	add	r3, r2
 800209c:	3304      	adds	r3, #4
 800209e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	69da      	ldr	r2, [r3, #28]
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	0159      	lsls	r1, r3, #5
 80020a8:	69bb      	ldr	r3, [r7, #24]
 80020aa:	440b      	add	r3, r1
 80020ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80020b0:	691b      	ldr	r3, [r3, #16]
 80020b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020b6:	1ad2      	subs	r2, r2, r3
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d114      	bne.n	80020ec <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	699b      	ldr	r3, [r3, #24]
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d109      	bne.n	80020de <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6818      	ldr	r0, [r3, #0]
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80020d4:	461a      	mov	r2, r3
 80020d6:	2101      	movs	r1, #1
 80020d8:	f002 f8f6 	bl	80042c8 <USB_EP0_OutStart>
 80020dc:	e006      	b.n	80020ec <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	691a      	ldr	r2, [r3, #16]
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	6a1b      	ldr	r3, [r3, #32]
 80020e6:	441a      	add	r2, r3
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	b2db      	uxtb	r3, r3
 80020f0:	4619      	mov	r1, r3
 80020f2:	6878      	ldr	r0, [r7, #4]
 80020f4:	f004 f846 	bl	8006184 <HAL_PCD_DataOutStageCallback>
 80020f8:	e046      	b.n	8002188 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80020fa:	697b      	ldr	r3, [r7, #20]
 80020fc:	4a26      	ldr	r2, [pc, #152]	; (8002198 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80020fe:	4293      	cmp	r3, r2
 8002100:	d124      	bne.n	800214c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002102:	693b      	ldr	r3, [r7, #16]
 8002104:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002108:	2b00      	cmp	r3, #0
 800210a:	d00a      	beq.n	8002122 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	015a      	lsls	r2, r3, #5
 8002110:	69bb      	ldr	r3, [r7, #24]
 8002112:	4413      	add	r3, r2
 8002114:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002118:	461a      	mov	r2, r3
 800211a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800211e:	6093      	str	r3, [r2, #8]
 8002120:	e032      	b.n	8002188 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002122:	693b      	ldr	r3, [r7, #16]
 8002124:	f003 0320 	and.w	r3, r3, #32
 8002128:	2b00      	cmp	r3, #0
 800212a:	d008      	beq.n	800213e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	015a      	lsls	r2, r3, #5
 8002130:	69bb      	ldr	r3, [r7, #24]
 8002132:	4413      	add	r3, r2
 8002134:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002138:	461a      	mov	r2, r3
 800213a:	2320      	movs	r3, #32
 800213c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	b2db      	uxtb	r3, r3
 8002142:	4619      	mov	r1, r3
 8002144:	6878      	ldr	r0, [r7, #4]
 8002146:	f004 f81d 	bl	8006184 <HAL_PCD_DataOutStageCallback>
 800214a:	e01d      	b.n	8002188 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	2b00      	cmp	r3, #0
 8002150:	d114      	bne.n	800217c <PCD_EP_OutXfrComplete_int+0x1b0>
 8002152:	6879      	ldr	r1, [r7, #4]
 8002154:	683a      	ldr	r2, [r7, #0]
 8002156:	4613      	mov	r3, r2
 8002158:	00db      	lsls	r3, r3, #3
 800215a:	4413      	add	r3, r2
 800215c:	009b      	lsls	r3, r3, #2
 800215e:	440b      	add	r3, r1
 8002160:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	2b00      	cmp	r3, #0
 8002168:	d108      	bne.n	800217c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6818      	ldr	r0, [r3, #0]
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002174:	461a      	mov	r2, r3
 8002176:	2100      	movs	r1, #0
 8002178:	f002 f8a6 	bl	80042c8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	b2db      	uxtb	r3, r3
 8002180:	4619      	mov	r1, r3
 8002182:	6878      	ldr	r0, [r7, #4]
 8002184:	f003 fffe 	bl	8006184 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002188:	2300      	movs	r3, #0
}
 800218a:	4618      	mov	r0, r3
 800218c:	3720      	adds	r7, #32
 800218e:	46bd      	mov	sp, r7
 8002190:	bd80      	pop	{r7, pc}
 8002192:	bf00      	nop
 8002194:	4f54300a 	.word	0x4f54300a
 8002198:	4f54310a 	.word	0x4f54310a

0800219c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b086      	sub	sp, #24
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
 80021a4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80021ac:	697b      	ldr	r3, [r7, #20]
 80021ae:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80021b0:	697b      	ldr	r3, [r7, #20]
 80021b2:	333c      	adds	r3, #60	; 0x3c
 80021b4:	3304      	adds	r3, #4
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	015a      	lsls	r2, r3, #5
 80021be:	693b      	ldr	r3, [r7, #16]
 80021c0:	4413      	add	r3, r2
 80021c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80021c6:	689b      	ldr	r3, [r3, #8]
 80021c8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	4a15      	ldr	r2, [pc, #84]	; (8002224 <PCD_EP_OutSetupPacket_int+0x88>)
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d90e      	bls.n	80021f0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80021d2:	68bb      	ldr	r3, [r7, #8]
 80021d4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d009      	beq.n	80021f0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	015a      	lsls	r2, r3, #5
 80021e0:	693b      	ldr	r3, [r7, #16]
 80021e2:	4413      	add	r3, r2
 80021e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80021e8:	461a      	mov	r2, r3
 80021ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80021ee:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80021f0:	6878      	ldr	r0, [r7, #4]
 80021f2:	f003 ffb5 	bl	8006160 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	4a0a      	ldr	r2, [pc, #40]	; (8002224 <PCD_EP_OutSetupPacket_int+0x88>)
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d90c      	bls.n	8002218 <PCD_EP_OutSetupPacket_int+0x7c>
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	691b      	ldr	r3, [r3, #16]
 8002202:	2b01      	cmp	r3, #1
 8002204:	d108      	bne.n	8002218 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6818      	ldr	r0, [r3, #0]
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002210:	461a      	mov	r2, r3
 8002212:	2101      	movs	r1, #1
 8002214:	f002 f858 	bl	80042c8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002218:	2300      	movs	r3, #0
}
 800221a:	4618      	mov	r0, r3
 800221c:	3718      	adds	r7, #24
 800221e:	46bd      	mov	sp, r7
 8002220:	bd80      	pop	{r7, pc}
 8002222:	bf00      	nop
 8002224:	4f54300a 	.word	0x4f54300a

08002228 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002228:	b480      	push	{r7}
 800222a:	b085      	sub	sp, #20
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
 8002230:	460b      	mov	r3, r1
 8002232:	70fb      	strb	r3, [r7, #3]
 8002234:	4613      	mov	r3, r2
 8002236:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800223e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002240:	78fb      	ldrb	r3, [r7, #3]
 8002242:	2b00      	cmp	r3, #0
 8002244:	d107      	bne.n	8002256 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002246:	883b      	ldrh	r3, [r7, #0]
 8002248:	0419      	lsls	r1, r3, #16
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	68ba      	ldr	r2, [r7, #8]
 8002250:	430a      	orrs	r2, r1
 8002252:	629a      	str	r2, [r3, #40]	; 0x28
 8002254:	e028      	b.n	80022a8 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800225c:	0c1b      	lsrs	r3, r3, #16
 800225e:	68ba      	ldr	r2, [r7, #8]
 8002260:	4413      	add	r3, r2
 8002262:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002264:	2300      	movs	r3, #0
 8002266:	73fb      	strb	r3, [r7, #15]
 8002268:	e00d      	b.n	8002286 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681a      	ldr	r2, [r3, #0]
 800226e:	7bfb      	ldrb	r3, [r7, #15]
 8002270:	3340      	adds	r3, #64	; 0x40
 8002272:	009b      	lsls	r3, r3, #2
 8002274:	4413      	add	r3, r2
 8002276:	685b      	ldr	r3, [r3, #4]
 8002278:	0c1b      	lsrs	r3, r3, #16
 800227a:	68ba      	ldr	r2, [r7, #8]
 800227c:	4413      	add	r3, r2
 800227e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002280:	7bfb      	ldrb	r3, [r7, #15]
 8002282:	3301      	adds	r3, #1
 8002284:	73fb      	strb	r3, [r7, #15]
 8002286:	7bfa      	ldrb	r2, [r7, #15]
 8002288:	78fb      	ldrb	r3, [r7, #3]
 800228a:	3b01      	subs	r3, #1
 800228c:	429a      	cmp	r2, r3
 800228e:	d3ec      	bcc.n	800226a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002290:	883b      	ldrh	r3, [r7, #0]
 8002292:	0418      	lsls	r0, r3, #16
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6819      	ldr	r1, [r3, #0]
 8002298:	78fb      	ldrb	r3, [r7, #3]
 800229a:	3b01      	subs	r3, #1
 800229c:	68ba      	ldr	r2, [r7, #8]
 800229e:	4302      	orrs	r2, r0
 80022a0:	3340      	adds	r3, #64	; 0x40
 80022a2:	009b      	lsls	r3, r3, #2
 80022a4:	440b      	add	r3, r1
 80022a6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80022a8:	2300      	movs	r3, #0
}
 80022aa:	4618      	mov	r0, r3
 80022ac:	3714      	adds	r7, #20
 80022ae:	46bd      	mov	sp, r7
 80022b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b4:	4770      	bx	lr

080022b6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80022b6:	b480      	push	{r7}
 80022b8:	b083      	sub	sp, #12
 80022ba:	af00      	add	r7, sp, #0
 80022bc:	6078      	str	r0, [r7, #4]
 80022be:	460b      	mov	r3, r1
 80022c0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	887a      	ldrh	r2, [r7, #2]
 80022c8:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80022ca:	2300      	movs	r3, #0
}
 80022cc:	4618      	mov	r0, r3
 80022ce:	370c      	adds	r7, #12
 80022d0:	46bd      	mov	sp, r7
 80022d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d6:	4770      	bx	lr

080022d8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80022d8:	b480      	push	{r7}
 80022da:	b083      	sub	sp, #12
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
 80022e0:	460b      	mov	r3, r1
 80022e2:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80022e4:	bf00      	nop
 80022e6:	370c      	adds	r7, #12
 80022e8:	46bd      	mov	sp, r7
 80022ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ee:	4770      	bx	lr

080022f0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b086      	sub	sp, #24
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d101      	bne.n	8002302 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80022fe:	2301      	movs	r3, #1
 8002300:	e267      	b.n	80027d2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f003 0301 	and.w	r3, r3, #1
 800230a:	2b00      	cmp	r3, #0
 800230c:	d075      	beq.n	80023fa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800230e:	4b88      	ldr	r3, [pc, #544]	; (8002530 <HAL_RCC_OscConfig+0x240>)
 8002310:	689b      	ldr	r3, [r3, #8]
 8002312:	f003 030c 	and.w	r3, r3, #12
 8002316:	2b04      	cmp	r3, #4
 8002318:	d00c      	beq.n	8002334 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800231a:	4b85      	ldr	r3, [pc, #532]	; (8002530 <HAL_RCC_OscConfig+0x240>)
 800231c:	689b      	ldr	r3, [r3, #8]
 800231e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002322:	2b08      	cmp	r3, #8
 8002324:	d112      	bne.n	800234c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002326:	4b82      	ldr	r3, [pc, #520]	; (8002530 <HAL_RCC_OscConfig+0x240>)
 8002328:	685b      	ldr	r3, [r3, #4]
 800232a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800232e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002332:	d10b      	bne.n	800234c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002334:	4b7e      	ldr	r3, [pc, #504]	; (8002530 <HAL_RCC_OscConfig+0x240>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800233c:	2b00      	cmp	r3, #0
 800233e:	d05b      	beq.n	80023f8 <HAL_RCC_OscConfig+0x108>
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	2b00      	cmp	r3, #0
 8002346:	d157      	bne.n	80023f8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002348:	2301      	movs	r3, #1
 800234a:	e242      	b.n	80027d2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	685b      	ldr	r3, [r3, #4]
 8002350:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002354:	d106      	bne.n	8002364 <HAL_RCC_OscConfig+0x74>
 8002356:	4b76      	ldr	r3, [pc, #472]	; (8002530 <HAL_RCC_OscConfig+0x240>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	4a75      	ldr	r2, [pc, #468]	; (8002530 <HAL_RCC_OscConfig+0x240>)
 800235c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002360:	6013      	str	r3, [r2, #0]
 8002362:	e01d      	b.n	80023a0 <HAL_RCC_OscConfig+0xb0>
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800236c:	d10c      	bne.n	8002388 <HAL_RCC_OscConfig+0x98>
 800236e:	4b70      	ldr	r3, [pc, #448]	; (8002530 <HAL_RCC_OscConfig+0x240>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	4a6f      	ldr	r2, [pc, #444]	; (8002530 <HAL_RCC_OscConfig+0x240>)
 8002374:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002378:	6013      	str	r3, [r2, #0]
 800237a:	4b6d      	ldr	r3, [pc, #436]	; (8002530 <HAL_RCC_OscConfig+0x240>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	4a6c      	ldr	r2, [pc, #432]	; (8002530 <HAL_RCC_OscConfig+0x240>)
 8002380:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002384:	6013      	str	r3, [r2, #0]
 8002386:	e00b      	b.n	80023a0 <HAL_RCC_OscConfig+0xb0>
 8002388:	4b69      	ldr	r3, [pc, #420]	; (8002530 <HAL_RCC_OscConfig+0x240>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4a68      	ldr	r2, [pc, #416]	; (8002530 <HAL_RCC_OscConfig+0x240>)
 800238e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002392:	6013      	str	r3, [r2, #0]
 8002394:	4b66      	ldr	r3, [pc, #408]	; (8002530 <HAL_RCC_OscConfig+0x240>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	4a65      	ldr	r2, [pc, #404]	; (8002530 <HAL_RCC_OscConfig+0x240>)
 800239a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800239e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	685b      	ldr	r3, [r3, #4]
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d013      	beq.n	80023d0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023a8:	f7fe fa5e 	bl	8000868 <HAL_GetTick>
 80023ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023ae:	e008      	b.n	80023c2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80023b0:	f7fe fa5a 	bl	8000868 <HAL_GetTick>
 80023b4:	4602      	mov	r2, r0
 80023b6:	693b      	ldr	r3, [r7, #16]
 80023b8:	1ad3      	subs	r3, r2, r3
 80023ba:	2b64      	cmp	r3, #100	; 0x64
 80023bc:	d901      	bls.n	80023c2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80023be:	2303      	movs	r3, #3
 80023c0:	e207      	b.n	80027d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023c2:	4b5b      	ldr	r3, [pc, #364]	; (8002530 <HAL_RCC_OscConfig+0x240>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d0f0      	beq.n	80023b0 <HAL_RCC_OscConfig+0xc0>
 80023ce:	e014      	b.n	80023fa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023d0:	f7fe fa4a 	bl	8000868 <HAL_GetTick>
 80023d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023d6:	e008      	b.n	80023ea <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80023d8:	f7fe fa46 	bl	8000868 <HAL_GetTick>
 80023dc:	4602      	mov	r2, r0
 80023de:	693b      	ldr	r3, [r7, #16]
 80023e0:	1ad3      	subs	r3, r2, r3
 80023e2:	2b64      	cmp	r3, #100	; 0x64
 80023e4:	d901      	bls.n	80023ea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80023e6:	2303      	movs	r3, #3
 80023e8:	e1f3      	b.n	80027d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023ea:	4b51      	ldr	r3, [pc, #324]	; (8002530 <HAL_RCC_OscConfig+0x240>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d1f0      	bne.n	80023d8 <HAL_RCC_OscConfig+0xe8>
 80023f6:	e000      	b.n	80023fa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f003 0302 	and.w	r3, r3, #2
 8002402:	2b00      	cmp	r3, #0
 8002404:	d063      	beq.n	80024ce <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002406:	4b4a      	ldr	r3, [pc, #296]	; (8002530 <HAL_RCC_OscConfig+0x240>)
 8002408:	689b      	ldr	r3, [r3, #8]
 800240a:	f003 030c 	and.w	r3, r3, #12
 800240e:	2b00      	cmp	r3, #0
 8002410:	d00b      	beq.n	800242a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002412:	4b47      	ldr	r3, [pc, #284]	; (8002530 <HAL_RCC_OscConfig+0x240>)
 8002414:	689b      	ldr	r3, [r3, #8]
 8002416:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800241a:	2b08      	cmp	r3, #8
 800241c:	d11c      	bne.n	8002458 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800241e:	4b44      	ldr	r3, [pc, #272]	; (8002530 <HAL_RCC_OscConfig+0x240>)
 8002420:	685b      	ldr	r3, [r3, #4]
 8002422:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002426:	2b00      	cmp	r3, #0
 8002428:	d116      	bne.n	8002458 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800242a:	4b41      	ldr	r3, [pc, #260]	; (8002530 <HAL_RCC_OscConfig+0x240>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f003 0302 	and.w	r3, r3, #2
 8002432:	2b00      	cmp	r3, #0
 8002434:	d005      	beq.n	8002442 <HAL_RCC_OscConfig+0x152>
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	68db      	ldr	r3, [r3, #12]
 800243a:	2b01      	cmp	r3, #1
 800243c:	d001      	beq.n	8002442 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800243e:	2301      	movs	r3, #1
 8002440:	e1c7      	b.n	80027d2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002442:	4b3b      	ldr	r3, [pc, #236]	; (8002530 <HAL_RCC_OscConfig+0x240>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	691b      	ldr	r3, [r3, #16]
 800244e:	00db      	lsls	r3, r3, #3
 8002450:	4937      	ldr	r1, [pc, #220]	; (8002530 <HAL_RCC_OscConfig+0x240>)
 8002452:	4313      	orrs	r3, r2
 8002454:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002456:	e03a      	b.n	80024ce <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	68db      	ldr	r3, [r3, #12]
 800245c:	2b00      	cmp	r3, #0
 800245e:	d020      	beq.n	80024a2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002460:	4b34      	ldr	r3, [pc, #208]	; (8002534 <HAL_RCC_OscConfig+0x244>)
 8002462:	2201      	movs	r2, #1
 8002464:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002466:	f7fe f9ff 	bl	8000868 <HAL_GetTick>
 800246a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800246c:	e008      	b.n	8002480 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800246e:	f7fe f9fb 	bl	8000868 <HAL_GetTick>
 8002472:	4602      	mov	r2, r0
 8002474:	693b      	ldr	r3, [r7, #16]
 8002476:	1ad3      	subs	r3, r2, r3
 8002478:	2b02      	cmp	r3, #2
 800247a:	d901      	bls.n	8002480 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800247c:	2303      	movs	r3, #3
 800247e:	e1a8      	b.n	80027d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002480:	4b2b      	ldr	r3, [pc, #172]	; (8002530 <HAL_RCC_OscConfig+0x240>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f003 0302 	and.w	r3, r3, #2
 8002488:	2b00      	cmp	r3, #0
 800248a:	d0f0      	beq.n	800246e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800248c:	4b28      	ldr	r3, [pc, #160]	; (8002530 <HAL_RCC_OscConfig+0x240>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	691b      	ldr	r3, [r3, #16]
 8002498:	00db      	lsls	r3, r3, #3
 800249a:	4925      	ldr	r1, [pc, #148]	; (8002530 <HAL_RCC_OscConfig+0x240>)
 800249c:	4313      	orrs	r3, r2
 800249e:	600b      	str	r3, [r1, #0]
 80024a0:	e015      	b.n	80024ce <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80024a2:	4b24      	ldr	r3, [pc, #144]	; (8002534 <HAL_RCC_OscConfig+0x244>)
 80024a4:	2200      	movs	r2, #0
 80024a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024a8:	f7fe f9de 	bl	8000868 <HAL_GetTick>
 80024ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024ae:	e008      	b.n	80024c2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80024b0:	f7fe f9da 	bl	8000868 <HAL_GetTick>
 80024b4:	4602      	mov	r2, r0
 80024b6:	693b      	ldr	r3, [r7, #16]
 80024b8:	1ad3      	subs	r3, r2, r3
 80024ba:	2b02      	cmp	r3, #2
 80024bc:	d901      	bls.n	80024c2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80024be:	2303      	movs	r3, #3
 80024c0:	e187      	b.n	80027d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024c2:	4b1b      	ldr	r3, [pc, #108]	; (8002530 <HAL_RCC_OscConfig+0x240>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f003 0302 	and.w	r3, r3, #2
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d1f0      	bne.n	80024b0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f003 0308 	and.w	r3, r3, #8
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d036      	beq.n	8002548 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	695b      	ldr	r3, [r3, #20]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d016      	beq.n	8002510 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80024e2:	4b15      	ldr	r3, [pc, #84]	; (8002538 <HAL_RCC_OscConfig+0x248>)
 80024e4:	2201      	movs	r2, #1
 80024e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024e8:	f7fe f9be 	bl	8000868 <HAL_GetTick>
 80024ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024ee:	e008      	b.n	8002502 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80024f0:	f7fe f9ba 	bl	8000868 <HAL_GetTick>
 80024f4:	4602      	mov	r2, r0
 80024f6:	693b      	ldr	r3, [r7, #16]
 80024f8:	1ad3      	subs	r3, r2, r3
 80024fa:	2b02      	cmp	r3, #2
 80024fc:	d901      	bls.n	8002502 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80024fe:	2303      	movs	r3, #3
 8002500:	e167      	b.n	80027d2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002502:	4b0b      	ldr	r3, [pc, #44]	; (8002530 <HAL_RCC_OscConfig+0x240>)
 8002504:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002506:	f003 0302 	and.w	r3, r3, #2
 800250a:	2b00      	cmp	r3, #0
 800250c:	d0f0      	beq.n	80024f0 <HAL_RCC_OscConfig+0x200>
 800250e:	e01b      	b.n	8002548 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002510:	4b09      	ldr	r3, [pc, #36]	; (8002538 <HAL_RCC_OscConfig+0x248>)
 8002512:	2200      	movs	r2, #0
 8002514:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002516:	f7fe f9a7 	bl	8000868 <HAL_GetTick>
 800251a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800251c:	e00e      	b.n	800253c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800251e:	f7fe f9a3 	bl	8000868 <HAL_GetTick>
 8002522:	4602      	mov	r2, r0
 8002524:	693b      	ldr	r3, [r7, #16]
 8002526:	1ad3      	subs	r3, r2, r3
 8002528:	2b02      	cmp	r3, #2
 800252a:	d907      	bls.n	800253c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800252c:	2303      	movs	r3, #3
 800252e:	e150      	b.n	80027d2 <HAL_RCC_OscConfig+0x4e2>
 8002530:	40023800 	.word	0x40023800
 8002534:	42470000 	.word	0x42470000
 8002538:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800253c:	4b88      	ldr	r3, [pc, #544]	; (8002760 <HAL_RCC_OscConfig+0x470>)
 800253e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002540:	f003 0302 	and.w	r3, r3, #2
 8002544:	2b00      	cmp	r3, #0
 8002546:	d1ea      	bne.n	800251e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f003 0304 	and.w	r3, r3, #4
 8002550:	2b00      	cmp	r3, #0
 8002552:	f000 8097 	beq.w	8002684 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002556:	2300      	movs	r3, #0
 8002558:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800255a:	4b81      	ldr	r3, [pc, #516]	; (8002760 <HAL_RCC_OscConfig+0x470>)
 800255c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800255e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002562:	2b00      	cmp	r3, #0
 8002564:	d10f      	bne.n	8002586 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002566:	2300      	movs	r3, #0
 8002568:	60bb      	str	r3, [r7, #8]
 800256a:	4b7d      	ldr	r3, [pc, #500]	; (8002760 <HAL_RCC_OscConfig+0x470>)
 800256c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800256e:	4a7c      	ldr	r2, [pc, #496]	; (8002760 <HAL_RCC_OscConfig+0x470>)
 8002570:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002574:	6413      	str	r3, [r2, #64]	; 0x40
 8002576:	4b7a      	ldr	r3, [pc, #488]	; (8002760 <HAL_RCC_OscConfig+0x470>)
 8002578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800257a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800257e:	60bb      	str	r3, [r7, #8]
 8002580:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002582:	2301      	movs	r3, #1
 8002584:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002586:	4b77      	ldr	r3, [pc, #476]	; (8002764 <HAL_RCC_OscConfig+0x474>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800258e:	2b00      	cmp	r3, #0
 8002590:	d118      	bne.n	80025c4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002592:	4b74      	ldr	r3, [pc, #464]	; (8002764 <HAL_RCC_OscConfig+0x474>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	4a73      	ldr	r2, [pc, #460]	; (8002764 <HAL_RCC_OscConfig+0x474>)
 8002598:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800259c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800259e:	f7fe f963 	bl	8000868 <HAL_GetTick>
 80025a2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025a4:	e008      	b.n	80025b8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025a6:	f7fe f95f 	bl	8000868 <HAL_GetTick>
 80025aa:	4602      	mov	r2, r0
 80025ac:	693b      	ldr	r3, [r7, #16]
 80025ae:	1ad3      	subs	r3, r2, r3
 80025b0:	2b02      	cmp	r3, #2
 80025b2:	d901      	bls.n	80025b8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80025b4:	2303      	movs	r3, #3
 80025b6:	e10c      	b.n	80027d2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025b8:	4b6a      	ldr	r3, [pc, #424]	; (8002764 <HAL_RCC_OscConfig+0x474>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d0f0      	beq.n	80025a6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	689b      	ldr	r3, [r3, #8]
 80025c8:	2b01      	cmp	r3, #1
 80025ca:	d106      	bne.n	80025da <HAL_RCC_OscConfig+0x2ea>
 80025cc:	4b64      	ldr	r3, [pc, #400]	; (8002760 <HAL_RCC_OscConfig+0x470>)
 80025ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025d0:	4a63      	ldr	r2, [pc, #396]	; (8002760 <HAL_RCC_OscConfig+0x470>)
 80025d2:	f043 0301 	orr.w	r3, r3, #1
 80025d6:	6713      	str	r3, [r2, #112]	; 0x70
 80025d8:	e01c      	b.n	8002614 <HAL_RCC_OscConfig+0x324>
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	689b      	ldr	r3, [r3, #8]
 80025de:	2b05      	cmp	r3, #5
 80025e0:	d10c      	bne.n	80025fc <HAL_RCC_OscConfig+0x30c>
 80025e2:	4b5f      	ldr	r3, [pc, #380]	; (8002760 <HAL_RCC_OscConfig+0x470>)
 80025e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025e6:	4a5e      	ldr	r2, [pc, #376]	; (8002760 <HAL_RCC_OscConfig+0x470>)
 80025e8:	f043 0304 	orr.w	r3, r3, #4
 80025ec:	6713      	str	r3, [r2, #112]	; 0x70
 80025ee:	4b5c      	ldr	r3, [pc, #368]	; (8002760 <HAL_RCC_OscConfig+0x470>)
 80025f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025f2:	4a5b      	ldr	r2, [pc, #364]	; (8002760 <HAL_RCC_OscConfig+0x470>)
 80025f4:	f043 0301 	orr.w	r3, r3, #1
 80025f8:	6713      	str	r3, [r2, #112]	; 0x70
 80025fa:	e00b      	b.n	8002614 <HAL_RCC_OscConfig+0x324>
 80025fc:	4b58      	ldr	r3, [pc, #352]	; (8002760 <HAL_RCC_OscConfig+0x470>)
 80025fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002600:	4a57      	ldr	r2, [pc, #348]	; (8002760 <HAL_RCC_OscConfig+0x470>)
 8002602:	f023 0301 	bic.w	r3, r3, #1
 8002606:	6713      	str	r3, [r2, #112]	; 0x70
 8002608:	4b55      	ldr	r3, [pc, #340]	; (8002760 <HAL_RCC_OscConfig+0x470>)
 800260a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800260c:	4a54      	ldr	r2, [pc, #336]	; (8002760 <HAL_RCC_OscConfig+0x470>)
 800260e:	f023 0304 	bic.w	r3, r3, #4
 8002612:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	689b      	ldr	r3, [r3, #8]
 8002618:	2b00      	cmp	r3, #0
 800261a:	d015      	beq.n	8002648 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800261c:	f7fe f924 	bl	8000868 <HAL_GetTick>
 8002620:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002622:	e00a      	b.n	800263a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002624:	f7fe f920 	bl	8000868 <HAL_GetTick>
 8002628:	4602      	mov	r2, r0
 800262a:	693b      	ldr	r3, [r7, #16]
 800262c:	1ad3      	subs	r3, r2, r3
 800262e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002632:	4293      	cmp	r3, r2
 8002634:	d901      	bls.n	800263a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002636:	2303      	movs	r3, #3
 8002638:	e0cb      	b.n	80027d2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800263a:	4b49      	ldr	r3, [pc, #292]	; (8002760 <HAL_RCC_OscConfig+0x470>)
 800263c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800263e:	f003 0302 	and.w	r3, r3, #2
 8002642:	2b00      	cmp	r3, #0
 8002644:	d0ee      	beq.n	8002624 <HAL_RCC_OscConfig+0x334>
 8002646:	e014      	b.n	8002672 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002648:	f7fe f90e 	bl	8000868 <HAL_GetTick>
 800264c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800264e:	e00a      	b.n	8002666 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002650:	f7fe f90a 	bl	8000868 <HAL_GetTick>
 8002654:	4602      	mov	r2, r0
 8002656:	693b      	ldr	r3, [r7, #16]
 8002658:	1ad3      	subs	r3, r2, r3
 800265a:	f241 3288 	movw	r2, #5000	; 0x1388
 800265e:	4293      	cmp	r3, r2
 8002660:	d901      	bls.n	8002666 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002662:	2303      	movs	r3, #3
 8002664:	e0b5      	b.n	80027d2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002666:	4b3e      	ldr	r3, [pc, #248]	; (8002760 <HAL_RCC_OscConfig+0x470>)
 8002668:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800266a:	f003 0302 	and.w	r3, r3, #2
 800266e:	2b00      	cmp	r3, #0
 8002670:	d1ee      	bne.n	8002650 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002672:	7dfb      	ldrb	r3, [r7, #23]
 8002674:	2b01      	cmp	r3, #1
 8002676:	d105      	bne.n	8002684 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002678:	4b39      	ldr	r3, [pc, #228]	; (8002760 <HAL_RCC_OscConfig+0x470>)
 800267a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800267c:	4a38      	ldr	r2, [pc, #224]	; (8002760 <HAL_RCC_OscConfig+0x470>)
 800267e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002682:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	699b      	ldr	r3, [r3, #24]
 8002688:	2b00      	cmp	r3, #0
 800268a:	f000 80a1 	beq.w	80027d0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800268e:	4b34      	ldr	r3, [pc, #208]	; (8002760 <HAL_RCC_OscConfig+0x470>)
 8002690:	689b      	ldr	r3, [r3, #8]
 8002692:	f003 030c 	and.w	r3, r3, #12
 8002696:	2b08      	cmp	r3, #8
 8002698:	d05c      	beq.n	8002754 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	699b      	ldr	r3, [r3, #24]
 800269e:	2b02      	cmp	r3, #2
 80026a0:	d141      	bne.n	8002726 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026a2:	4b31      	ldr	r3, [pc, #196]	; (8002768 <HAL_RCC_OscConfig+0x478>)
 80026a4:	2200      	movs	r2, #0
 80026a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026a8:	f7fe f8de 	bl	8000868 <HAL_GetTick>
 80026ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026ae:	e008      	b.n	80026c2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026b0:	f7fe f8da 	bl	8000868 <HAL_GetTick>
 80026b4:	4602      	mov	r2, r0
 80026b6:	693b      	ldr	r3, [r7, #16]
 80026b8:	1ad3      	subs	r3, r2, r3
 80026ba:	2b02      	cmp	r3, #2
 80026bc:	d901      	bls.n	80026c2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80026be:	2303      	movs	r3, #3
 80026c0:	e087      	b.n	80027d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026c2:	4b27      	ldr	r3, [pc, #156]	; (8002760 <HAL_RCC_OscConfig+0x470>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d1f0      	bne.n	80026b0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	69da      	ldr	r2, [r3, #28]
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6a1b      	ldr	r3, [r3, #32]
 80026d6:	431a      	orrs	r2, r3
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026dc:	019b      	lsls	r3, r3, #6
 80026de:	431a      	orrs	r2, r3
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026e4:	085b      	lsrs	r3, r3, #1
 80026e6:	3b01      	subs	r3, #1
 80026e8:	041b      	lsls	r3, r3, #16
 80026ea:	431a      	orrs	r2, r3
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026f0:	061b      	lsls	r3, r3, #24
 80026f2:	491b      	ldr	r1, [pc, #108]	; (8002760 <HAL_RCC_OscConfig+0x470>)
 80026f4:	4313      	orrs	r3, r2
 80026f6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80026f8:	4b1b      	ldr	r3, [pc, #108]	; (8002768 <HAL_RCC_OscConfig+0x478>)
 80026fa:	2201      	movs	r2, #1
 80026fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026fe:	f7fe f8b3 	bl	8000868 <HAL_GetTick>
 8002702:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002704:	e008      	b.n	8002718 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002706:	f7fe f8af 	bl	8000868 <HAL_GetTick>
 800270a:	4602      	mov	r2, r0
 800270c:	693b      	ldr	r3, [r7, #16]
 800270e:	1ad3      	subs	r3, r2, r3
 8002710:	2b02      	cmp	r3, #2
 8002712:	d901      	bls.n	8002718 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002714:	2303      	movs	r3, #3
 8002716:	e05c      	b.n	80027d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002718:	4b11      	ldr	r3, [pc, #68]	; (8002760 <HAL_RCC_OscConfig+0x470>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002720:	2b00      	cmp	r3, #0
 8002722:	d0f0      	beq.n	8002706 <HAL_RCC_OscConfig+0x416>
 8002724:	e054      	b.n	80027d0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002726:	4b10      	ldr	r3, [pc, #64]	; (8002768 <HAL_RCC_OscConfig+0x478>)
 8002728:	2200      	movs	r2, #0
 800272a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800272c:	f7fe f89c 	bl	8000868 <HAL_GetTick>
 8002730:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002732:	e008      	b.n	8002746 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002734:	f7fe f898 	bl	8000868 <HAL_GetTick>
 8002738:	4602      	mov	r2, r0
 800273a:	693b      	ldr	r3, [r7, #16]
 800273c:	1ad3      	subs	r3, r2, r3
 800273e:	2b02      	cmp	r3, #2
 8002740:	d901      	bls.n	8002746 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002742:	2303      	movs	r3, #3
 8002744:	e045      	b.n	80027d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002746:	4b06      	ldr	r3, [pc, #24]	; (8002760 <HAL_RCC_OscConfig+0x470>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800274e:	2b00      	cmp	r3, #0
 8002750:	d1f0      	bne.n	8002734 <HAL_RCC_OscConfig+0x444>
 8002752:	e03d      	b.n	80027d0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	699b      	ldr	r3, [r3, #24]
 8002758:	2b01      	cmp	r3, #1
 800275a:	d107      	bne.n	800276c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800275c:	2301      	movs	r3, #1
 800275e:	e038      	b.n	80027d2 <HAL_RCC_OscConfig+0x4e2>
 8002760:	40023800 	.word	0x40023800
 8002764:	40007000 	.word	0x40007000
 8002768:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800276c:	4b1b      	ldr	r3, [pc, #108]	; (80027dc <HAL_RCC_OscConfig+0x4ec>)
 800276e:	685b      	ldr	r3, [r3, #4]
 8002770:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	699b      	ldr	r3, [r3, #24]
 8002776:	2b01      	cmp	r3, #1
 8002778:	d028      	beq.n	80027cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002784:	429a      	cmp	r2, r3
 8002786:	d121      	bne.n	80027cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002792:	429a      	cmp	r2, r3
 8002794:	d11a      	bne.n	80027cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002796:	68fa      	ldr	r2, [r7, #12]
 8002798:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800279c:	4013      	ands	r3, r2
 800279e:	687a      	ldr	r2, [r7, #4]
 80027a0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80027a2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80027a4:	4293      	cmp	r3, r2
 80027a6:	d111      	bne.n	80027cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027b2:	085b      	lsrs	r3, r3, #1
 80027b4:	3b01      	subs	r3, #1
 80027b6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80027b8:	429a      	cmp	r2, r3
 80027ba:	d107      	bne.n	80027cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027c6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80027c8:	429a      	cmp	r2, r3
 80027ca:	d001      	beq.n	80027d0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80027cc:	2301      	movs	r3, #1
 80027ce:	e000      	b.n	80027d2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80027d0:	2300      	movs	r3, #0
}
 80027d2:	4618      	mov	r0, r3
 80027d4:	3718      	adds	r7, #24
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bd80      	pop	{r7, pc}
 80027da:	bf00      	nop
 80027dc:	40023800 	.word	0x40023800

080027e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b084      	sub	sp, #16
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
 80027e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d101      	bne.n	80027f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80027f0:	2301      	movs	r3, #1
 80027f2:	e0cc      	b.n	800298e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80027f4:	4b68      	ldr	r3, [pc, #416]	; (8002998 <HAL_RCC_ClockConfig+0x1b8>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f003 0307 	and.w	r3, r3, #7
 80027fc:	683a      	ldr	r2, [r7, #0]
 80027fe:	429a      	cmp	r2, r3
 8002800:	d90c      	bls.n	800281c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002802:	4b65      	ldr	r3, [pc, #404]	; (8002998 <HAL_RCC_ClockConfig+0x1b8>)
 8002804:	683a      	ldr	r2, [r7, #0]
 8002806:	b2d2      	uxtb	r2, r2
 8002808:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800280a:	4b63      	ldr	r3, [pc, #396]	; (8002998 <HAL_RCC_ClockConfig+0x1b8>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f003 0307 	and.w	r3, r3, #7
 8002812:	683a      	ldr	r2, [r7, #0]
 8002814:	429a      	cmp	r2, r3
 8002816:	d001      	beq.n	800281c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002818:	2301      	movs	r3, #1
 800281a:	e0b8      	b.n	800298e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f003 0302 	and.w	r3, r3, #2
 8002824:	2b00      	cmp	r3, #0
 8002826:	d020      	beq.n	800286a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f003 0304 	and.w	r3, r3, #4
 8002830:	2b00      	cmp	r3, #0
 8002832:	d005      	beq.n	8002840 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002834:	4b59      	ldr	r3, [pc, #356]	; (800299c <HAL_RCC_ClockConfig+0x1bc>)
 8002836:	689b      	ldr	r3, [r3, #8]
 8002838:	4a58      	ldr	r2, [pc, #352]	; (800299c <HAL_RCC_ClockConfig+0x1bc>)
 800283a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800283e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f003 0308 	and.w	r3, r3, #8
 8002848:	2b00      	cmp	r3, #0
 800284a:	d005      	beq.n	8002858 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800284c:	4b53      	ldr	r3, [pc, #332]	; (800299c <HAL_RCC_ClockConfig+0x1bc>)
 800284e:	689b      	ldr	r3, [r3, #8]
 8002850:	4a52      	ldr	r2, [pc, #328]	; (800299c <HAL_RCC_ClockConfig+0x1bc>)
 8002852:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002856:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002858:	4b50      	ldr	r3, [pc, #320]	; (800299c <HAL_RCC_ClockConfig+0x1bc>)
 800285a:	689b      	ldr	r3, [r3, #8]
 800285c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	689b      	ldr	r3, [r3, #8]
 8002864:	494d      	ldr	r1, [pc, #308]	; (800299c <HAL_RCC_ClockConfig+0x1bc>)
 8002866:	4313      	orrs	r3, r2
 8002868:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f003 0301 	and.w	r3, r3, #1
 8002872:	2b00      	cmp	r3, #0
 8002874:	d044      	beq.n	8002900 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	2b01      	cmp	r3, #1
 800287c:	d107      	bne.n	800288e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800287e:	4b47      	ldr	r3, [pc, #284]	; (800299c <HAL_RCC_ClockConfig+0x1bc>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002886:	2b00      	cmp	r3, #0
 8002888:	d119      	bne.n	80028be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800288a:	2301      	movs	r3, #1
 800288c:	e07f      	b.n	800298e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	685b      	ldr	r3, [r3, #4]
 8002892:	2b02      	cmp	r3, #2
 8002894:	d003      	beq.n	800289e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800289a:	2b03      	cmp	r3, #3
 800289c:	d107      	bne.n	80028ae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800289e:	4b3f      	ldr	r3, [pc, #252]	; (800299c <HAL_RCC_ClockConfig+0x1bc>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d109      	bne.n	80028be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028aa:	2301      	movs	r3, #1
 80028ac:	e06f      	b.n	800298e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028ae:	4b3b      	ldr	r3, [pc, #236]	; (800299c <HAL_RCC_ClockConfig+0x1bc>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f003 0302 	and.w	r3, r3, #2
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d101      	bne.n	80028be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028ba:	2301      	movs	r3, #1
 80028bc:	e067      	b.n	800298e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80028be:	4b37      	ldr	r3, [pc, #220]	; (800299c <HAL_RCC_ClockConfig+0x1bc>)
 80028c0:	689b      	ldr	r3, [r3, #8]
 80028c2:	f023 0203 	bic.w	r2, r3, #3
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	685b      	ldr	r3, [r3, #4]
 80028ca:	4934      	ldr	r1, [pc, #208]	; (800299c <HAL_RCC_ClockConfig+0x1bc>)
 80028cc:	4313      	orrs	r3, r2
 80028ce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80028d0:	f7fd ffca 	bl	8000868 <HAL_GetTick>
 80028d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028d6:	e00a      	b.n	80028ee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028d8:	f7fd ffc6 	bl	8000868 <HAL_GetTick>
 80028dc:	4602      	mov	r2, r0
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	1ad3      	subs	r3, r2, r3
 80028e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d901      	bls.n	80028ee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80028ea:	2303      	movs	r3, #3
 80028ec:	e04f      	b.n	800298e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028ee:	4b2b      	ldr	r3, [pc, #172]	; (800299c <HAL_RCC_ClockConfig+0x1bc>)
 80028f0:	689b      	ldr	r3, [r3, #8]
 80028f2:	f003 020c 	and.w	r2, r3, #12
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	685b      	ldr	r3, [r3, #4]
 80028fa:	009b      	lsls	r3, r3, #2
 80028fc:	429a      	cmp	r2, r3
 80028fe:	d1eb      	bne.n	80028d8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002900:	4b25      	ldr	r3, [pc, #148]	; (8002998 <HAL_RCC_ClockConfig+0x1b8>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f003 0307 	and.w	r3, r3, #7
 8002908:	683a      	ldr	r2, [r7, #0]
 800290a:	429a      	cmp	r2, r3
 800290c:	d20c      	bcs.n	8002928 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800290e:	4b22      	ldr	r3, [pc, #136]	; (8002998 <HAL_RCC_ClockConfig+0x1b8>)
 8002910:	683a      	ldr	r2, [r7, #0]
 8002912:	b2d2      	uxtb	r2, r2
 8002914:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002916:	4b20      	ldr	r3, [pc, #128]	; (8002998 <HAL_RCC_ClockConfig+0x1b8>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f003 0307 	and.w	r3, r3, #7
 800291e:	683a      	ldr	r2, [r7, #0]
 8002920:	429a      	cmp	r2, r3
 8002922:	d001      	beq.n	8002928 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002924:	2301      	movs	r3, #1
 8002926:	e032      	b.n	800298e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f003 0304 	and.w	r3, r3, #4
 8002930:	2b00      	cmp	r3, #0
 8002932:	d008      	beq.n	8002946 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002934:	4b19      	ldr	r3, [pc, #100]	; (800299c <HAL_RCC_ClockConfig+0x1bc>)
 8002936:	689b      	ldr	r3, [r3, #8]
 8002938:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	68db      	ldr	r3, [r3, #12]
 8002940:	4916      	ldr	r1, [pc, #88]	; (800299c <HAL_RCC_ClockConfig+0x1bc>)
 8002942:	4313      	orrs	r3, r2
 8002944:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f003 0308 	and.w	r3, r3, #8
 800294e:	2b00      	cmp	r3, #0
 8002950:	d009      	beq.n	8002966 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002952:	4b12      	ldr	r3, [pc, #72]	; (800299c <HAL_RCC_ClockConfig+0x1bc>)
 8002954:	689b      	ldr	r3, [r3, #8]
 8002956:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	691b      	ldr	r3, [r3, #16]
 800295e:	00db      	lsls	r3, r3, #3
 8002960:	490e      	ldr	r1, [pc, #56]	; (800299c <HAL_RCC_ClockConfig+0x1bc>)
 8002962:	4313      	orrs	r3, r2
 8002964:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002966:	f000 f821 	bl	80029ac <HAL_RCC_GetSysClockFreq>
 800296a:	4602      	mov	r2, r0
 800296c:	4b0b      	ldr	r3, [pc, #44]	; (800299c <HAL_RCC_ClockConfig+0x1bc>)
 800296e:	689b      	ldr	r3, [r3, #8]
 8002970:	091b      	lsrs	r3, r3, #4
 8002972:	f003 030f 	and.w	r3, r3, #15
 8002976:	490a      	ldr	r1, [pc, #40]	; (80029a0 <HAL_RCC_ClockConfig+0x1c0>)
 8002978:	5ccb      	ldrb	r3, [r1, r3]
 800297a:	fa22 f303 	lsr.w	r3, r2, r3
 800297e:	4a09      	ldr	r2, [pc, #36]	; (80029a4 <HAL_RCC_ClockConfig+0x1c4>)
 8002980:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002982:	4b09      	ldr	r3, [pc, #36]	; (80029a8 <HAL_RCC_ClockConfig+0x1c8>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	4618      	mov	r0, r3
 8002988:	f7fd ff2a 	bl	80007e0 <HAL_InitTick>

  return HAL_OK;
 800298c:	2300      	movs	r3, #0
}
 800298e:	4618      	mov	r0, r3
 8002990:	3710      	adds	r7, #16
 8002992:	46bd      	mov	sp, r7
 8002994:	bd80      	pop	{r7, pc}
 8002996:	bf00      	nop
 8002998:	40023c00 	.word	0x40023c00
 800299c:	40023800 	.word	0x40023800
 80029a0:	08006774 	.word	0x08006774
 80029a4:	20000000 	.word	0x20000000
 80029a8:	20000004 	.word	0x20000004

080029ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80029ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80029b0:	b090      	sub	sp, #64	; 0x40
 80029b2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80029b4:	2300      	movs	r3, #0
 80029b6:	637b      	str	r3, [r7, #52]	; 0x34
 80029b8:	2300      	movs	r3, #0
 80029ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 80029bc:	2300      	movs	r3, #0
 80029be:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80029c0:	2300      	movs	r3, #0
 80029c2:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80029c4:	4b59      	ldr	r3, [pc, #356]	; (8002b2c <HAL_RCC_GetSysClockFreq+0x180>)
 80029c6:	689b      	ldr	r3, [r3, #8]
 80029c8:	f003 030c 	and.w	r3, r3, #12
 80029cc:	2b08      	cmp	r3, #8
 80029ce:	d00d      	beq.n	80029ec <HAL_RCC_GetSysClockFreq+0x40>
 80029d0:	2b08      	cmp	r3, #8
 80029d2:	f200 80a1 	bhi.w	8002b18 <HAL_RCC_GetSysClockFreq+0x16c>
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d002      	beq.n	80029e0 <HAL_RCC_GetSysClockFreq+0x34>
 80029da:	2b04      	cmp	r3, #4
 80029dc:	d003      	beq.n	80029e6 <HAL_RCC_GetSysClockFreq+0x3a>
 80029de:	e09b      	b.n	8002b18 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80029e0:	4b53      	ldr	r3, [pc, #332]	; (8002b30 <HAL_RCC_GetSysClockFreq+0x184>)
 80029e2:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80029e4:	e09b      	b.n	8002b1e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80029e6:	4b53      	ldr	r3, [pc, #332]	; (8002b34 <HAL_RCC_GetSysClockFreq+0x188>)
 80029e8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80029ea:	e098      	b.n	8002b1e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80029ec:	4b4f      	ldr	r3, [pc, #316]	; (8002b2c <HAL_RCC_GetSysClockFreq+0x180>)
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80029f4:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80029f6:	4b4d      	ldr	r3, [pc, #308]	; (8002b2c <HAL_RCC_GetSysClockFreq+0x180>)
 80029f8:	685b      	ldr	r3, [r3, #4]
 80029fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d028      	beq.n	8002a54 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a02:	4b4a      	ldr	r3, [pc, #296]	; (8002b2c <HAL_RCC_GetSysClockFreq+0x180>)
 8002a04:	685b      	ldr	r3, [r3, #4]
 8002a06:	099b      	lsrs	r3, r3, #6
 8002a08:	2200      	movs	r2, #0
 8002a0a:	623b      	str	r3, [r7, #32]
 8002a0c:	627a      	str	r2, [r7, #36]	; 0x24
 8002a0e:	6a3b      	ldr	r3, [r7, #32]
 8002a10:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002a14:	2100      	movs	r1, #0
 8002a16:	4b47      	ldr	r3, [pc, #284]	; (8002b34 <HAL_RCC_GetSysClockFreq+0x188>)
 8002a18:	fb03 f201 	mul.w	r2, r3, r1
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	fb00 f303 	mul.w	r3, r0, r3
 8002a22:	4413      	add	r3, r2
 8002a24:	4a43      	ldr	r2, [pc, #268]	; (8002b34 <HAL_RCC_GetSysClockFreq+0x188>)
 8002a26:	fba0 1202 	umull	r1, r2, r0, r2
 8002a2a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002a2c:	460a      	mov	r2, r1
 8002a2e:	62ba      	str	r2, [r7, #40]	; 0x28
 8002a30:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a32:	4413      	add	r3, r2
 8002a34:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a38:	2200      	movs	r2, #0
 8002a3a:	61bb      	str	r3, [r7, #24]
 8002a3c:	61fa      	str	r2, [r7, #28]
 8002a3e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002a42:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002a46:	f7fd fbbf 	bl	80001c8 <__aeabi_uldivmod>
 8002a4a:	4602      	mov	r2, r0
 8002a4c:	460b      	mov	r3, r1
 8002a4e:	4613      	mov	r3, r2
 8002a50:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002a52:	e053      	b.n	8002afc <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a54:	4b35      	ldr	r3, [pc, #212]	; (8002b2c <HAL_RCC_GetSysClockFreq+0x180>)
 8002a56:	685b      	ldr	r3, [r3, #4]
 8002a58:	099b      	lsrs	r3, r3, #6
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	613b      	str	r3, [r7, #16]
 8002a5e:	617a      	str	r2, [r7, #20]
 8002a60:	693b      	ldr	r3, [r7, #16]
 8002a62:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002a66:	f04f 0b00 	mov.w	fp, #0
 8002a6a:	4652      	mov	r2, sl
 8002a6c:	465b      	mov	r3, fp
 8002a6e:	f04f 0000 	mov.w	r0, #0
 8002a72:	f04f 0100 	mov.w	r1, #0
 8002a76:	0159      	lsls	r1, r3, #5
 8002a78:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002a7c:	0150      	lsls	r0, r2, #5
 8002a7e:	4602      	mov	r2, r0
 8002a80:	460b      	mov	r3, r1
 8002a82:	ebb2 080a 	subs.w	r8, r2, sl
 8002a86:	eb63 090b 	sbc.w	r9, r3, fp
 8002a8a:	f04f 0200 	mov.w	r2, #0
 8002a8e:	f04f 0300 	mov.w	r3, #0
 8002a92:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002a96:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002a9a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002a9e:	ebb2 0408 	subs.w	r4, r2, r8
 8002aa2:	eb63 0509 	sbc.w	r5, r3, r9
 8002aa6:	f04f 0200 	mov.w	r2, #0
 8002aaa:	f04f 0300 	mov.w	r3, #0
 8002aae:	00eb      	lsls	r3, r5, #3
 8002ab0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002ab4:	00e2      	lsls	r2, r4, #3
 8002ab6:	4614      	mov	r4, r2
 8002ab8:	461d      	mov	r5, r3
 8002aba:	eb14 030a 	adds.w	r3, r4, sl
 8002abe:	603b      	str	r3, [r7, #0]
 8002ac0:	eb45 030b 	adc.w	r3, r5, fp
 8002ac4:	607b      	str	r3, [r7, #4]
 8002ac6:	f04f 0200 	mov.w	r2, #0
 8002aca:	f04f 0300 	mov.w	r3, #0
 8002ace:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002ad2:	4629      	mov	r1, r5
 8002ad4:	028b      	lsls	r3, r1, #10
 8002ad6:	4621      	mov	r1, r4
 8002ad8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002adc:	4621      	mov	r1, r4
 8002ade:	028a      	lsls	r2, r1, #10
 8002ae0:	4610      	mov	r0, r2
 8002ae2:	4619      	mov	r1, r3
 8002ae4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	60bb      	str	r3, [r7, #8]
 8002aea:	60fa      	str	r2, [r7, #12]
 8002aec:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002af0:	f7fd fb6a 	bl	80001c8 <__aeabi_uldivmod>
 8002af4:	4602      	mov	r2, r0
 8002af6:	460b      	mov	r3, r1
 8002af8:	4613      	mov	r3, r2
 8002afa:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002afc:	4b0b      	ldr	r3, [pc, #44]	; (8002b2c <HAL_RCC_GetSysClockFreq+0x180>)
 8002afe:	685b      	ldr	r3, [r3, #4]
 8002b00:	0c1b      	lsrs	r3, r3, #16
 8002b02:	f003 0303 	and.w	r3, r3, #3
 8002b06:	3301      	adds	r3, #1
 8002b08:	005b      	lsls	r3, r3, #1
 8002b0a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8002b0c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002b0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b10:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b14:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002b16:	e002      	b.n	8002b1e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002b18:	4b05      	ldr	r3, [pc, #20]	; (8002b30 <HAL_RCC_GetSysClockFreq+0x184>)
 8002b1a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002b1c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002b20:	4618      	mov	r0, r3
 8002b22:	3740      	adds	r7, #64	; 0x40
 8002b24:	46bd      	mov	sp, r7
 8002b26:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002b2a:	bf00      	nop
 8002b2c:	40023800 	.word	0x40023800
 8002b30:	00f42400 	.word	0x00f42400
 8002b34:	017d7840 	.word	0x017d7840

08002b38 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b38:	b480      	push	{r7}
 8002b3a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b3c:	4b03      	ldr	r3, [pc, #12]	; (8002b4c <HAL_RCC_GetHCLKFreq+0x14>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
}
 8002b40:	4618      	mov	r0, r3
 8002b42:	46bd      	mov	sp, r7
 8002b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b48:	4770      	bx	lr
 8002b4a:	bf00      	nop
 8002b4c:	20000000 	.word	0x20000000

08002b50 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002b50:	b084      	sub	sp, #16
 8002b52:	b580      	push	{r7, lr}
 8002b54:	b084      	sub	sp, #16
 8002b56:	af00      	add	r7, sp, #0
 8002b58:	6078      	str	r0, [r7, #4]
 8002b5a:	f107 001c 	add.w	r0, r7, #28
 8002b5e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002b62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b64:	2b01      	cmp	r3, #1
 8002b66:	d122      	bne.n	8002bae <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b6c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	68db      	ldr	r3, [r3, #12]
 8002b78:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8002b7c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002b80:	687a      	ldr	r2, [r7, #4]
 8002b82:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	68db      	ldr	r3, [r3, #12]
 8002b88:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8002b90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b92:	2b01      	cmp	r3, #1
 8002b94:	d105      	bne.n	8002ba2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	68db      	ldr	r3, [r3, #12]
 8002b9a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8002ba2:	6878      	ldr	r0, [r7, #4]
 8002ba4:	f001 fbee 	bl	8004384 <USB_CoreReset>
 8002ba8:	4603      	mov	r3, r0
 8002baa:	73fb      	strb	r3, [r7, #15]
 8002bac:	e01a      	b.n	8002be4 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	68db      	ldr	r3, [r3, #12]
 8002bb2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8002bba:	6878      	ldr	r0, [r7, #4]
 8002bbc:	f001 fbe2 	bl	8004384 <USB_CoreReset>
 8002bc0:	4603      	mov	r3, r0
 8002bc2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8002bc4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d106      	bne.n	8002bd8 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bce:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	639a      	str	r2, [r3, #56]	; 0x38
 8002bd6:	e005      	b.n	8002be4 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bdc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8002be4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002be6:	2b01      	cmp	r3, #1
 8002be8:	d10b      	bne.n	8002c02 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	689b      	ldr	r3, [r3, #8]
 8002bee:	f043 0206 	orr.w	r2, r3, #6
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	689b      	ldr	r3, [r3, #8]
 8002bfa:	f043 0220 	orr.w	r2, r3, #32
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8002c02:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c04:	4618      	mov	r0, r3
 8002c06:	3710      	adds	r7, #16
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002c0e:	b004      	add	sp, #16
 8002c10:	4770      	bx	lr
	...

08002c14 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8002c14:	b480      	push	{r7}
 8002c16:	b087      	sub	sp, #28
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	60f8      	str	r0, [r7, #12]
 8002c1c:	60b9      	str	r1, [r7, #8]
 8002c1e:	4613      	mov	r3, r2
 8002c20:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8002c22:	79fb      	ldrb	r3, [r7, #7]
 8002c24:	2b02      	cmp	r3, #2
 8002c26:	d165      	bne.n	8002cf4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8002c28:	68bb      	ldr	r3, [r7, #8]
 8002c2a:	4a41      	ldr	r2, [pc, #260]	; (8002d30 <USB_SetTurnaroundTime+0x11c>)
 8002c2c:	4293      	cmp	r3, r2
 8002c2e:	d906      	bls.n	8002c3e <USB_SetTurnaroundTime+0x2a>
 8002c30:	68bb      	ldr	r3, [r7, #8]
 8002c32:	4a40      	ldr	r2, [pc, #256]	; (8002d34 <USB_SetTurnaroundTime+0x120>)
 8002c34:	4293      	cmp	r3, r2
 8002c36:	d202      	bcs.n	8002c3e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8002c38:	230f      	movs	r3, #15
 8002c3a:	617b      	str	r3, [r7, #20]
 8002c3c:	e062      	b.n	8002d04 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8002c3e:	68bb      	ldr	r3, [r7, #8]
 8002c40:	4a3c      	ldr	r2, [pc, #240]	; (8002d34 <USB_SetTurnaroundTime+0x120>)
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d306      	bcc.n	8002c54 <USB_SetTurnaroundTime+0x40>
 8002c46:	68bb      	ldr	r3, [r7, #8]
 8002c48:	4a3b      	ldr	r2, [pc, #236]	; (8002d38 <USB_SetTurnaroundTime+0x124>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d202      	bcs.n	8002c54 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8002c4e:	230e      	movs	r3, #14
 8002c50:	617b      	str	r3, [r7, #20]
 8002c52:	e057      	b.n	8002d04 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8002c54:	68bb      	ldr	r3, [r7, #8]
 8002c56:	4a38      	ldr	r2, [pc, #224]	; (8002d38 <USB_SetTurnaroundTime+0x124>)
 8002c58:	4293      	cmp	r3, r2
 8002c5a:	d306      	bcc.n	8002c6a <USB_SetTurnaroundTime+0x56>
 8002c5c:	68bb      	ldr	r3, [r7, #8]
 8002c5e:	4a37      	ldr	r2, [pc, #220]	; (8002d3c <USB_SetTurnaroundTime+0x128>)
 8002c60:	4293      	cmp	r3, r2
 8002c62:	d202      	bcs.n	8002c6a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8002c64:	230d      	movs	r3, #13
 8002c66:	617b      	str	r3, [r7, #20]
 8002c68:	e04c      	b.n	8002d04 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8002c6a:	68bb      	ldr	r3, [r7, #8]
 8002c6c:	4a33      	ldr	r2, [pc, #204]	; (8002d3c <USB_SetTurnaroundTime+0x128>)
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	d306      	bcc.n	8002c80 <USB_SetTurnaroundTime+0x6c>
 8002c72:	68bb      	ldr	r3, [r7, #8]
 8002c74:	4a32      	ldr	r2, [pc, #200]	; (8002d40 <USB_SetTurnaroundTime+0x12c>)
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d802      	bhi.n	8002c80 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8002c7a:	230c      	movs	r3, #12
 8002c7c:	617b      	str	r3, [r7, #20]
 8002c7e:	e041      	b.n	8002d04 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8002c80:	68bb      	ldr	r3, [r7, #8]
 8002c82:	4a2f      	ldr	r2, [pc, #188]	; (8002d40 <USB_SetTurnaroundTime+0x12c>)
 8002c84:	4293      	cmp	r3, r2
 8002c86:	d906      	bls.n	8002c96 <USB_SetTurnaroundTime+0x82>
 8002c88:	68bb      	ldr	r3, [r7, #8]
 8002c8a:	4a2e      	ldr	r2, [pc, #184]	; (8002d44 <USB_SetTurnaroundTime+0x130>)
 8002c8c:	4293      	cmp	r3, r2
 8002c8e:	d802      	bhi.n	8002c96 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8002c90:	230b      	movs	r3, #11
 8002c92:	617b      	str	r3, [r7, #20]
 8002c94:	e036      	b.n	8002d04 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8002c96:	68bb      	ldr	r3, [r7, #8]
 8002c98:	4a2a      	ldr	r2, [pc, #168]	; (8002d44 <USB_SetTurnaroundTime+0x130>)
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d906      	bls.n	8002cac <USB_SetTurnaroundTime+0x98>
 8002c9e:	68bb      	ldr	r3, [r7, #8]
 8002ca0:	4a29      	ldr	r2, [pc, #164]	; (8002d48 <USB_SetTurnaroundTime+0x134>)
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d802      	bhi.n	8002cac <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8002ca6:	230a      	movs	r3, #10
 8002ca8:	617b      	str	r3, [r7, #20]
 8002caa:	e02b      	b.n	8002d04 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8002cac:	68bb      	ldr	r3, [r7, #8]
 8002cae:	4a26      	ldr	r2, [pc, #152]	; (8002d48 <USB_SetTurnaroundTime+0x134>)
 8002cb0:	4293      	cmp	r3, r2
 8002cb2:	d906      	bls.n	8002cc2 <USB_SetTurnaroundTime+0xae>
 8002cb4:	68bb      	ldr	r3, [r7, #8]
 8002cb6:	4a25      	ldr	r2, [pc, #148]	; (8002d4c <USB_SetTurnaroundTime+0x138>)
 8002cb8:	4293      	cmp	r3, r2
 8002cba:	d202      	bcs.n	8002cc2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8002cbc:	2309      	movs	r3, #9
 8002cbe:	617b      	str	r3, [r7, #20]
 8002cc0:	e020      	b.n	8002d04 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8002cc2:	68bb      	ldr	r3, [r7, #8]
 8002cc4:	4a21      	ldr	r2, [pc, #132]	; (8002d4c <USB_SetTurnaroundTime+0x138>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d306      	bcc.n	8002cd8 <USB_SetTurnaroundTime+0xc4>
 8002cca:	68bb      	ldr	r3, [r7, #8]
 8002ccc:	4a20      	ldr	r2, [pc, #128]	; (8002d50 <USB_SetTurnaroundTime+0x13c>)
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d802      	bhi.n	8002cd8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8002cd2:	2308      	movs	r3, #8
 8002cd4:	617b      	str	r3, [r7, #20]
 8002cd6:	e015      	b.n	8002d04 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8002cd8:	68bb      	ldr	r3, [r7, #8]
 8002cda:	4a1d      	ldr	r2, [pc, #116]	; (8002d50 <USB_SetTurnaroundTime+0x13c>)
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	d906      	bls.n	8002cee <USB_SetTurnaroundTime+0xda>
 8002ce0:	68bb      	ldr	r3, [r7, #8]
 8002ce2:	4a1c      	ldr	r2, [pc, #112]	; (8002d54 <USB_SetTurnaroundTime+0x140>)
 8002ce4:	4293      	cmp	r3, r2
 8002ce6:	d202      	bcs.n	8002cee <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8002ce8:	2307      	movs	r3, #7
 8002cea:	617b      	str	r3, [r7, #20]
 8002cec:	e00a      	b.n	8002d04 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8002cee:	2306      	movs	r3, #6
 8002cf0:	617b      	str	r3, [r7, #20]
 8002cf2:	e007      	b.n	8002d04 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8002cf4:	79fb      	ldrb	r3, [r7, #7]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d102      	bne.n	8002d00 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8002cfa:	2309      	movs	r3, #9
 8002cfc:	617b      	str	r3, [r7, #20]
 8002cfe:	e001      	b.n	8002d04 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8002d00:	2309      	movs	r3, #9
 8002d02:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	68db      	ldr	r3, [r3, #12]
 8002d08:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	68da      	ldr	r2, [r3, #12]
 8002d14:	697b      	ldr	r3, [r7, #20]
 8002d16:	029b      	lsls	r3, r3, #10
 8002d18:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8002d1c:	431a      	orrs	r2, r3
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002d22:	2300      	movs	r3, #0
}
 8002d24:	4618      	mov	r0, r3
 8002d26:	371c      	adds	r7, #28
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2e:	4770      	bx	lr
 8002d30:	00d8acbf 	.word	0x00d8acbf
 8002d34:	00e4e1c0 	.word	0x00e4e1c0
 8002d38:	00f42400 	.word	0x00f42400
 8002d3c:	01067380 	.word	0x01067380
 8002d40:	011a499f 	.word	0x011a499f
 8002d44:	01312cff 	.word	0x01312cff
 8002d48:	014ca43f 	.word	0x014ca43f
 8002d4c:	016e3600 	.word	0x016e3600
 8002d50:	01a6ab1f 	.word	0x01a6ab1f
 8002d54:	01e84800 	.word	0x01e84800

08002d58 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8002d58:	b480      	push	{r7}
 8002d5a:	b083      	sub	sp, #12
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	689b      	ldr	r3, [r3, #8]
 8002d64:	f043 0201 	orr.w	r2, r3, #1
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002d6c:	2300      	movs	r3, #0
}
 8002d6e:	4618      	mov	r0, r3
 8002d70:	370c      	adds	r7, #12
 8002d72:	46bd      	mov	sp, r7
 8002d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d78:	4770      	bx	lr

08002d7a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8002d7a:	b480      	push	{r7}
 8002d7c:	b083      	sub	sp, #12
 8002d7e:	af00      	add	r7, sp, #0
 8002d80:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	689b      	ldr	r3, [r3, #8]
 8002d86:	f023 0201 	bic.w	r2, r3, #1
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002d8e:	2300      	movs	r3, #0
}
 8002d90:	4618      	mov	r0, r3
 8002d92:	370c      	adds	r7, #12
 8002d94:	46bd      	mov	sp, r7
 8002d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9a:	4770      	bx	lr

08002d9c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b084      	sub	sp, #16
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
 8002da4:	460b      	mov	r3, r1
 8002da6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8002da8:	2300      	movs	r3, #0
 8002daa:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	68db      	ldr	r3, [r3, #12]
 8002db0:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8002db8:	78fb      	ldrb	r3, [r7, #3]
 8002dba:	2b01      	cmp	r3, #1
 8002dbc:	d115      	bne.n	8002dea <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	68db      	ldr	r3, [r3, #12]
 8002dc2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8002dca:	2001      	movs	r0, #1
 8002dcc:	f7fd fd58 	bl	8000880 <HAL_Delay>
      ms++;
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	3301      	adds	r3, #1
 8002dd4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8002dd6:	6878      	ldr	r0, [r7, #4]
 8002dd8:	f001 fa45 	bl	8004266 <USB_GetMode>
 8002ddc:	4603      	mov	r3, r0
 8002dde:	2b01      	cmp	r3, #1
 8002de0:	d01e      	beq.n	8002e20 <USB_SetCurrentMode+0x84>
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	2b31      	cmp	r3, #49	; 0x31
 8002de6:	d9f0      	bls.n	8002dca <USB_SetCurrentMode+0x2e>
 8002de8:	e01a      	b.n	8002e20 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8002dea:	78fb      	ldrb	r3, [r7, #3]
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d115      	bne.n	8002e1c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	68db      	ldr	r3, [r3, #12]
 8002df4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8002dfc:	2001      	movs	r0, #1
 8002dfe:	f7fd fd3f 	bl	8000880 <HAL_Delay>
      ms++;
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	3301      	adds	r3, #1
 8002e06:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8002e08:	6878      	ldr	r0, [r7, #4]
 8002e0a:	f001 fa2c 	bl	8004266 <USB_GetMode>
 8002e0e:	4603      	mov	r3, r0
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d005      	beq.n	8002e20 <USB_SetCurrentMode+0x84>
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	2b31      	cmp	r3, #49	; 0x31
 8002e18:	d9f0      	bls.n	8002dfc <USB_SetCurrentMode+0x60>
 8002e1a:	e001      	b.n	8002e20 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8002e1c:	2301      	movs	r3, #1
 8002e1e:	e005      	b.n	8002e2c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	2b32      	cmp	r3, #50	; 0x32
 8002e24:	d101      	bne.n	8002e2a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8002e26:	2301      	movs	r3, #1
 8002e28:	e000      	b.n	8002e2c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8002e2a:	2300      	movs	r3, #0
}
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	3710      	adds	r7, #16
 8002e30:	46bd      	mov	sp, r7
 8002e32:	bd80      	pop	{r7, pc}

08002e34 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002e34:	b084      	sub	sp, #16
 8002e36:	b580      	push	{r7, lr}
 8002e38:	b086      	sub	sp, #24
 8002e3a:	af00      	add	r7, sp, #0
 8002e3c:	6078      	str	r0, [r7, #4]
 8002e3e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8002e42:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8002e46:	2300      	movs	r3, #0
 8002e48:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8002e4e:	2300      	movs	r3, #0
 8002e50:	613b      	str	r3, [r7, #16]
 8002e52:	e009      	b.n	8002e68 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8002e54:	687a      	ldr	r2, [r7, #4]
 8002e56:	693b      	ldr	r3, [r7, #16]
 8002e58:	3340      	adds	r3, #64	; 0x40
 8002e5a:	009b      	lsls	r3, r3, #2
 8002e5c:	4413      	add	r3, r2
 8002e5e:	2200      	movs	r2, #0
 8002e60:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8002e62:	693b      	ldr	r3, [r7, #16]
 8002e64:	3301      	adds	r3, #1
 8002e66:	613b      	str	r3, [r7, #16]
 8002e68:	693b      	ldr	r3, [r7, #16]
 8002e6a:	2b0e      	cmp	r3, #14
 8002e6c:	d9f2      	bls.n	8002e54 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8002e6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d11c      	bne.n	8002eae <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e7a:	685b      	ldr	r3, [r3, #4]
 8002e7c:	68fa      	ldr	r2, [r7, #12]
 8002e7e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002e82:	f043 0302 	orr.w	r3, r3, #2
 8002e86:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e8c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e98:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ea4:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	639a      	str	r2, [r3, #56]	; 0x38
 8002eac:	e00b      	b.n	8002ec6 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002eb2:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ebe:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8002ecc:	461a      	mov	r2, r3
 8002ece:	2300      	movs	r3, #0
 8002ed0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ed8:	4619      	mov	r1, r3
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ee0:	461a      	mov	r2, r3
 8002ee2:	680b      	ldr	r3, [r1, #0]
 8002ee4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002ee6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ee8:	2b01      	cmp	r3, #1
 8002eea:	d10c      	bne.n	8002f06 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8002eec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d104      	bne.n	8002efc <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8002ef2:	2100      	movs	r1, #0
 8002ef4:	6878      	ldr	r0, [r7, #4]
 8002ef6:	f000 f965 	bl	80031c4 <USB_SetDevSpeed>
 8002efa:	e008      	b.n	8002f0e <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8002efc:	2101      	movs	r1, #1
 8002efe:	6878      	ldr	r0, [r7, #4]
 8002f00:	f000 f960 	bl	80031c4 <USB_SetDevSpeed>
 8002f04:	e003      	b.n	8002f0e <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8002f06:	2103      	movs	r1, #3
 8002f08:	6878      	ldr	r0, [r7, #4]
 8002f0a:	f000 f95b 	bl	80031c4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8002f0e:	2110      	movs	r1, #16
 8002f10:	6878      	ldr	r0, [r7, #4]
 8002f12:	f000 f8f3 	bl	80030fc <USB_FlushTxFifo>
 8002f16:	4603      	mov	r3, r0
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d001      	beq.n	8002f20 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8002f1c:	2301      	movs	r3, #1
 8002f1e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8002f20:	6878      	ldr	r0, [r7, #4]
 8002f22:	f000 f91f 	bl	8003164 <USB_FlushRxFifo>
 8002f26:	4603      	mov	r3, r0
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d001      	beq.n	8002f30 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8002f2c:	2301      	movs	r3, #1
 8002f2e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f36:	461a      	mov	r2, r3
 8002f38:	2300      	movs	r3, #0
 8002f3a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f42:	461a      	mov	r2, r3
 8002f44:	2300      	movs	r3, #0
 8002f46:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f4e:	461a      	mov	r2, r3
 8002f50:	2300      	movs	r3, #0
 8002f52:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002f54:	2300      	movs	r3, #0
 8002f56:	613b      	str	r3, [r7, #16]
 8002f58:	e043      	b.n	8002fe2 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8002f5a:	693b      	ldr	r3, [r7, #16]
 8002f5c:	015a      	lsls	r2, r3, #5
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	4413      	add	r3, r2
 8002f62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002f6c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002f70:	d118      	bne.n	8002fa4 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8002f72:	693b      	ldr	r3, [r7, #16]
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d10a      	bne.n	8002f8e <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8002f78:	693b      	ldr	r3, [r7, #16]
 8002f7a:	015a      	lsls	r2, r3, #5
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	4413      	add	r3, r2
 8002f80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002f84:	461a      	mov	r2, r3
 8002f86:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002f8a:	6013      	str	r3, [r2, #0]
 8002f8c:	e013      	b.n	8002fb6 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8002f8e:	693b      	ldr	r3, [r7, #16]
 8002f90:	015a      	lsls	r2, r3, #5
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	4413      	add	r3, r2
 8002f96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002f9a:	461a      	mov	r2, r3
 8002f9c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002fa0:	6013      	str	r3, [r2, #0]
 8002fa2:	e008      	b.n	8002fb6 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8002fa4:	693b      	ldr	r3, [r7, #16]
 8002fa6:	015a      	lsls	r2, r3, #5
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	4413      	add	r3, r2
 8002fac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002fb0:	461a      	mov	r2, r3
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8002fb6:	693b      	ldr	r3, [r7, #16]
 8002fb8:	015a      	lsls	r2, r3, #5
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	4413      	add	r3, r2
 8002fbe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002fc2:	461a      	mov	r2, r3
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8002fc8:	693b      	ldr	r3, [r7, #16]
 8002fca:	015a      	lsls	r2, r3, #5
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	4413      	add	r3, r2
 8002fd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002fd4:	461a      	mov	r2, r3
 8002fd6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002fda:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002fdc:	693b      	ldr	r3, [r7, #16]
 8002fde:	3301      	adds	r3, #1
 8002fe0:	613b      	str	r3, [r7, #16]
 8002fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fe4:	693a      	ldr	r2, [r7, #16]
 8002fe6:	429a      	cmp	r2, r3
 8002fe8:	d3b7      	bcc.n	8002f5a <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002fea:	2300      	movs	r3, #0
 8002fec:	613b      	str	r3, [r7, #16]
 8002fee:	e043      	b.n	8003078 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8002ff0:	693b      	ldr	r3, [r7, #16]
 8002ff2:	015a      	lsls	r2, r3, #5
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	4413      	add	r3, r2
 8002ff8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003002:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003006:	d118      	bne.n	800303a <USB_DevInit+0x206>
    {
      if (i == 0U)
 8003008:	693b      	ldr	r3, [r7, #16]
 800300a:	2b00      	cmp	r3, #0
 800300c:	d10a      	bne.n	8003024 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800300e:	693b      	ldr	r3, [r7, #16]
 8003010:	015a      	lsls	r2, r3, #5
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	4413      	add	r3, r2
 8003016:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800301a:	461a      	mov	r2, r3
 800301c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003020:	6013      	str	r3, [r2, #0]
 8003022:	e013      	b.n	800304c <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003024:	693b      	ldr	r3, [r7, #16]
 8003026:	015a      	lsls	r2, r3, #5
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	4413      	add	r3, r2
 800302c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003030:	461a      	mov	r2, r3
 8003032:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003036:	6013      	str	r3, [r2, #0]
 8003038:	e008      	b.n	800304c <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800303a:	693b      	ldr	r3, [r7, #16]
 800303c:	015a      	lsls	r2, r3, #5
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	4413      	add	r3, r2
 8003042:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003046:	461a      	mov	r2, r3
 8003048:	2300      	movs	r3, #0
 800304a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800304c:	693b      	ldr	r3, [r7, #16]
 800304e:	015a      	lsls	r2, r3, #5
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	4413      	add	r3, r2
 8003054:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003058:	461a      	mov	r2, r3
 800305a:	2300      	movs	r3, #0
 800305c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800305e:	693b      	ldr	r3, [r7, #16]
 8003060:	015a      	lsls	r2, r3, #5
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	4413      	add	r3, r2
 8003066:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800306a:	461a      	mov	r2, r3
 800306c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003070:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003072:	693b      	ldr	r3, [r7, #16]
 8003074:	3301      	adds	r3, #1
 8003076:	613b      	str	r3, [r7, #16]
 8003078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800307a:	693a      	ldr	r2, [r7, #16]
 800307c:	429a      	cmp	r2, r3
 800307e:	d3b7      	bcc.n	8002ff0 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003086:	691b      	ldr	r3, [r3, #16]
 8003088:	68fa      	ldr	r2, [r7, #12]
 800308a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800308e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003092:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2200      	movs	r2, #0
 8003098:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80030a0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80030a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d105      	bne.n	80030b4 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	699b      	ldr	r3, [r3, #24]
 80030ac:	f043 0210 	orr.w	r2, r3, #16
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	699a      	ldr	r2, [r3, #24]
 80030b8:	4b0f      	ldr	r3, [pc, #60]	; (80030f8 <USB_DevInit+0x2c4>)
 80030ba:	4313      	orrs	r3, r2
 80030bc:	687a      	ldr	r2, [r7, #4]
 80030be:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80030c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d005      	beq.n	80030d2 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	699b      	ldr	r3, [r3, #24]
 80030ca:	f043 0208 	orr.w	r2, r3, #8
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80030d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80030d4:	2b01      	cmp	r3, #1
 80030d6:	d107      	bne.n	80030e8 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	699b      	ldr	r3, [r3, #24]
 80030dc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80030e0:	f043 0304 	orr.w	r3, r3, #4
 80030e4:	687a      	ldr	r2, [r7, #4]
 80030e6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80030e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80030ea:	4618      	mov	r0, r3
 80030ec:	3718      	adds	r7, #24
 80030ee:	46bd      	mov	sp, r7
 80030f0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80030f4:	b004      	add	sp, #16
 80030f6:	4770      	bx	lr
 80030f8:	803c3800 	.word	0x803c3800

080030fc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80030fc:	b480      	push	{r7}
 80030fe:	b085      	sub	sp, #20
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
 8003104:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003106:	2300      	movs	r3, #0
 8003108:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	3301      	adds	r3, #1
 800310e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	4a13      	ldr	r2, [pc, #76]	; (8003160 <USB_FlushTxFifo+0x64>)
 8003114:	4293      	cmp	r3, r2
 8003116:	d901      	bls.n	800311c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8003118:	2303      	movs	r3, #3
 800311a:	e01b      	b.n	8003154 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	691b      	ldr	r3, [r3, #16]
 8003120:	2b00      	cmp	r3, #0
 8003122:	daf2      	bge.n	800310a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003124:	2300      	movs	r3, #0
 8003126:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	019b      	lsls	r3, r3, #6
 800312c:	f043 0220 	orr.w	r2, r3, #32
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	3301      	adds	r3, #1
 8003138:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	4a08      	ldr	r2, [pc, #32]	; (8003160 <USB_FlushTxFifo+0x64>)
 800313e:	4293      	cmp	r3, r2
 8003140:	d901      	bls.n	8003146 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8003142:	2303      	movs	r3, #3
 8003144:	e006      	b.n	8003154 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	691b      	ldr	r3, [r3, #16]
 800314a:	f003 0320 	and.w	r3, r3, #32
 800314e:	2b20      	cmp	r3, #32
 8003150:	d0f0      	beq.n	8003134 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8003152:	2300      	movs	r3, #0
}
 8003154:	4618      	mov	r0, r3
 8003156:	3714      	adds	r7, #20
 8003158:	46bd      	mov	sp, r7
 800315a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315e:	4770      	bx	lr
 8003160:	00030d40 	.word	0x00030d40

08003164 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003164:	b480      	push	{r7}
 8003166:	b085      	sub	sp, #20
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800316c:	2300      	movs	r3, #0
 800316e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	3301      	adds	r3, #1
 8003174:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	4a11      	ldr	r2, [pc, #68]	; (80031c0 <USB_FlushRxFifo+0x5c>)
 800317a:	4293      	cmp	r3, r2
 800317c:	d901      	bls.n	8003182 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800317e:	2303      	movs	r3, #3
 8003180:	e018      	b.n	80031b4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	691b      	ldr	r3, [r3, #16]
 8003186:	2b00      	cmp	r3, #0
 8003188:	daf2      	bge.n	8003170 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800318a:	2300      	movs	r3, #0
 800318c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	2210      	movs	r2, #16
 8003192:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	3301      	adds	r3, #1
 8003198:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	4a08      	ldr	r2, [pc, #32]	; (80031c0 <USB_FlushRxFifo+0x5c>)
 800319e:	4293      	cmp	r3, r2
 80031a0:	d901      	bls.n	80031a6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80031a2:	2303      	movs	r3, #3
 80031a4:	e006      	b.n	80031b4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	691b      	ldr	r3, [r3, #16]
 80031aa:	f003 0310 	and.w	r3, r3, #16
 80031ae:	2b10      	cmp	r3, #16
 80031b0:	d0f0      	beq.n	8003194 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80031b2:	2300      	movs	r3, #0
}
 80031b4:	4618      	mov	r0, r3
 80031b6:	3714      	adds	r7, #20
 80031b8:	46bd      	mov	sp, r7
 80031ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031be:	4770      	bx	lr
 80031c0:	00030d40 	.word	0x00030d40

080031c4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80031c4:	b480      	push	{r7}
 80031c6:	b085      	sub	sp, #20
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
 80031cc:	460b      	mov	r3, r1
 80031ce:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80031da:	681a      	ldr	r2, [r3, #0]
 80031dc:	78fb      	ldrb	r3, [r7, #3]
 80031de:	68f9      	ldr	r1, [r7, #12]
 80031e0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80031e4:	4313      	orrs	r3, r2
 80031e6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80031e8:	2300      	movs	r3, #0
}
 80031ea:	4618      	mov	r0, r3
 80031ec:	3714      	adds	r7, #20
 80031ee:	46bd      	mov	sp, r7
 80031f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f4:	4770      	bx	lr

080031f6 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80031f6:	b480      	push	{r7}
 80031f8:	b087      	sub	sp, #28
 80031fa:	af00      	add	r7, sp, #0
 80031fc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8003202:	693b      	ldr	r3, [r7, #16]
 8003204:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003208:	689b      	ldr	r3, [r3, #8]
 800320a:	f003 0306 	and.w	r3, r3, #6
 800320e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	2b00      	cmp	r3, #0
 8003214:	d102      	bne.n	800321c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8003216:	2300      	movs	r3, #0
 8003218:	75fb      	strb	r3, [r7, #23]
 800321a:	e00a      	b.n	8003232 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	2b02      	cmp	r3, #2
 8003220:	d002      	beq.n	8003228 <USB_GetDevSpeed+0x32>
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	2b06      	cmp	r3, #6
 8003226:	d102      	bne.n	800322e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8003228:	2302      	movs	r3, #2
 800322a:	75fb      	strb	r3, [r7, #23]
 800322c:	e001      	b.n	8003232 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800322e:	230f      	movs	r3, #15
 8003230:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8003232:	7dfb      	ldrb	r3, [r7, #23]
}
 8003234:	4618      	mov	r0, r3
 8003236:	371c      	adds	r7, #28
 8003238:	46bd      	mov	sp, r7
 800323a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323e:	4770      	bx	lr

08003240 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003240:	b480      	push	{r7}
 8003242:	b085      	sub	sp, #20
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
 8003248:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	781b      	ldrb	r3, [r3, #0]
 8003252:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	785b      	ldrb	r3, [r3, #1]
 8003258:	2b01      	cmp	r3, #1
 800325a:	d13a      	bne.n	80032d2 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003262:	69da      	ldr	r2, [r3, #28]
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	781b      	ldrb	r3, [r3, #0]
 8003268:	f003 030f 	and.w	r3, r3, #15
 800326c:	2101      	movs	r1, #1
 800326e:	fa01 f303 	lsl.w	r3, r1, r3
 8003272:	b29b      	uxth	r3, r3
 8003274:	68f9      	ldr	r1, [r7, #12]
 8003276:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800327a:	4313      	orrs	r3, r2
 800327c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800327e:	68bb      	ldr	r3, [r7, #8]
 8003280:	015a      	lsls	r2, r3, #5
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	4413      	add	r3, r2
 8003286:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003290:	2b00      	cmp	r3, #0
 8003292:	d155      	bne.n	8003340 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003294:	68bb      	ldr	r3, [r7, #8]
 8003296:	015a      	lsls	r2, r3, #5
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	4413      	add	r3, r2
 800329c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80032a0:	681a      	ldr	r2, [r3, #0]
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	68db      	ldr	r3, [r3, #12]
 80032a6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	791b      	ldrb	r3, [r3, #4]
 80032ae:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80032b0:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80032b2:	68bb      	ldr	r3, [r7, #8]
 80032b4:	059b      	lsls	r3, r3, #22
 80032b6:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80032b8:	4313      	orrs	r3, r2
 80032ba:	68ba      	ldr	r2, [r7, #8]
 80032bc:	0151      	lsls	r1, r2, #5
 80032be:	68fa      	ldr	r2, [r7, #12]
 80032c0:	440a      	add	r2, r1
 80032c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80032c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80032ce:	6013      	str	r3, [r2, #0]
 80032d0:	e036      	b.n	8003340 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80032d8:	69da      	ldr	r2, [r3, #28]
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	781b      	ldrb	r3, [r3, #0]
 80032de:	f003 030f 	and.w	r3, r3, #15
 80032e2:	2101      	movs	r1, #1
 80032e4:	fa01 f303 	lsl.w	r3, r1, r3
 80032e8:	041b      	lsls	r3, r3, #16
 80032ea:	68f9      	ldr	r1, [r7, #12]
 80032ec:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80032f0:	4313      	orrs	r3, r2
 80032f2:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80032f4:	68bb      	ldr	r3, [r7, #8]
 80032f6:	015a      	lsls	r2, r3, #5
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	4413      	add	r3, r2
 80032fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003306:	2b00      	cmp	r3, #0
 8003308:	d11a      	bne.n	8003340 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800330a:	68bb      	ldr	r3, [r7, #8]
 800330c:	015a      	lsls	r2, r3, #5
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	4413      	add	r3, r2
 8003312:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003316:	681a      	ldr	r2, [r3, #0]
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	68db      	ldr	r3, [r3, #12]
 800331c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	791b      	ldrb	r3, [r3, #4]
 8003324:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003326:	430b      	orrs	r3, r1
 8003328:	4313      	orrs	r3, r2
 800332a:	68ba      	ldr	r2, [r7, #8]
 800332c:	0151      	lsls	r1, r2, #5
 800332e:	68fa      	ldr	r2, [r7, #12]
 8003330:	440a      	add	r2, r1
 8003332:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003336:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800333a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800333e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8003340:	2300      	movs	r3, #0
}
 8003342:	4618      	mov	r0, r3
 8003344:	3714      	adds	r7, #20
 8003346:	46bd      	mov	sp, r7
 8003348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334c:	4770      	bx	lr
	...

08003350 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003350:	b480      	push	{r7}
 8003352:	b085      	sub	sp, #20
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
 8003358:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	781b      	ldrb	r3, [r3, #0]
 8003362:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	785b      	ldrb	r3, [r3, #1]
 8003368:	2b01      	cmp	r3, #1
 800336a:	d161      	bne.n	8003430 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800336c:	68bb      	ldr	r3, [r7, #8]
 800336e:	015a      	lsls	r2, r3, #5
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	4413      	add	r3, r2
 8003374:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800337e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003382:	d11f      	bne.n	80033c4 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003384:	68bb      	ldr	r3, [r7, #8]
 8003386:	015a      	lsls	r2, r3, #5
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	4413      	add	r3, r2
 800338c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	68ba      	ldr	r2, [r7, #8]
 8003394:	0151      	lsls	r1, r2, #5
 8003396:	68fa      	ldr	r2, [r7, #12]
 8003398:	440a      	add	r2, r1
 800339a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800339e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80033a2:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80033a4:	68bb      	ldr	r3, [r7, #8]
 80033a6:	015a      	lsls	r2, r3, #5
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	4413      	add	r3, r2
 80033ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	68ba      	ldr	r2, [r7, #8]
 80033b4:	0151      	lsls	r1, r2, #5
 80033b6:	68fa      	ldr	r2, [r7, #12]
 80033b8:	440a      	add	r2, r1
 80033ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80033be:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80033c2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80033ca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	781b      	ldrb	r3, [r3, #0]
 80033d0:	f003 030f 	and.w	r3, r3, #15
 80033d4:	2101      	movs	r1, #1
 80033d6:	fa01 f303 	lsl.w	r3, r1, r3
 80033da:	b29b      	uxth	r3, r3
 80033dc:	43db      	mvns	r3, r3
 80033de:	68f9      	ldr	r1, [r7, #12]
 80033e0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80033e4:	4013      	ands	r3, r2
 80033e6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80033ee:	69da      	ldr	r2, [r3, #28]
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	781b      	ldrb	r3, [r3, #0]
 80033f4:	f003 030f 	and.w	r3, r3, #15
 80033f8:	2101      	movs	r1, #1
 80033fa:	fa01 f303 	lsl.w	r3, r1, r3
 80033fe:	b29b      	uxth	r3, r3
 8003400:	43db      	mvns	r3, r3
 8003402:	68f9      	ldr	r1, [r7, #12]
 8003404:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003408:	4013      	ands	r3, r2
 800340a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800340c:	68bb      	ldr	r3, [r7, #8]
 800340e:	015a      	lsls	r2, r3, #5
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	4413      	add	r3, r2
 8003414:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003418:	681a      	ldr	r2, [r3, #0]
 800341a:	68bb      	ldr	r3, [r7, #8]
 800341c:	0159      	lsls	r1, r3, #5
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	440b      	add	r3, r1
 8003422:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003426:	4619      	mov	r1, r3
 8003428:	4b35      	ldr	r3, [pc, #212]	; (8003500 <USB_DeactivateEndpoint+0x1b0>)
 800342a:	4013      	ands	r3, r2
 800342c:	600b      	str	r3, [r1, #0]
 800342e:	e060      	b.n	80034f2 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003430:	68bb      	ldr	r3, [r7, #8]
 8003432:	015a      	lsls	r2, r3, #5
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	4413      	add	r3, r2
 8003438:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003442:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003446:	d11f      	bne.n	8003488 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003448:	68bb      	ldr	r3, [r7, #8]
 800344a:	015a      	lsls	r2, r3, #5
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	4413      	add	r3, r2
 8003450:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	68ba      	ldr	r2, [r7, #8]
 8003458:	0151      	lsls	r1, r2, #5
 800345a:	68fa      	ldr	r2, [r7, #12]
 800345c:	440a      	add	r2, r1
 800345e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003462:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003466:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8003468:	68bb      	ldr	r3, [r7, #8]
 800346a:	015a      	lsls	r2, r3, #5
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	4413      	add	r3, r2
 8003470:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	68ba      	ldr	r2, [r7, #8]
 8003478:	0151      	lsls	r1, r2, #5
 800347a:	68fa      	ldr	r2, [r7, #12]
 800347c:	440a      	add	r2, r1
 800347e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003482:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003486:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800348e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	781b      	ldrb	r3, [r3, #0]
 8003494:	f003 030f 	and.w	r3, r3, #15
 8003498:	2101      	movs	r1, #1
 800349a:	fa01 f303 	lsl.w	r3, r1, r3
 800349e:	041b      	lsls	r3, r3, #16
 80034a0:	43db      	mvns	r3, r3
 80034a2:	68f9      	ldr	r1, [r7, #12]
 80034a4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80034a8:	4013      	ands	r3, r2
 80034aa:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80034b2:	69da      	ldr	r2, [r3, #28]
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	781b      	ldrb	r3, [r3, #0]
 80034b8:	f003 030f 	and.w	r3, r3, #15
 80034bc:	2101      	movs	r1, #1
 80034be:	fa01 f303 	lsl.w	r3, r1, r3
 80034c2:	041b      	lsls	r3, r3, #16
 80034c4:	43db      	mvns	r3, r3
 80034c6:	68f9      	ldr	r1, [r7, #12]
 80034c8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80034cc:	4013      	ands	r3, r2
 80034ce:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80034d0:	68bb      	ldr	r3, [r7, #8]
 80034d2:	015a      	lsls	r2, r3, #5
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	4413      	add	r3, r2
 80034d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034dc:	681a      	ldr	r2, [r3, #0]
 80034de:	68bb      	ldr	r3, [r7, #8]
 80034e0:	0159      	lsls	r1, r3, #5
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	440b      	add	r3, r1
 80034e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034ea:	4619      	mov	r1, r3
 80034ec:	4b05      	ldr	r3, [pc, #20]	; (8003504 <USB_DeactivateEndpoint+0x1b4>)
 80034ee:	4013      	ands	r3, r2
 80034f0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80034f2:	2300      	movs	r3, #0
}
 80034f4:	4618      	mov	r0, r3
 80034f6:	3714      	adds	r7, #20
 80034f8:	46bd      	mov	sp, r7
 80034fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fe:	4770      	bx	lr
 8003500:	ec337800 	.word	0xec337800
 8003504:	eff37800 	.word	0xeff37800

08003508 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	b08a      	sub	sp, #40	; 0x28
 800350c:	af02      	add	r7, sp, #8
 800350e:	60f8      	str	r0, [r7, #12]
 8003510:	60b9      	str	r1, [r7, #8]
 8003512:	4613      	mov	r3, r2
 8003514:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800351a:	68bb      	ldr	r3, [r7, #8]
 800351c:	781b      	ldrb	r3, [r3, #0]
 800351e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003520:	68bb      	ldr	r3, [r7, #8]
 8003522:	785b      	ldrb	r3, [r3, #1]
 8003524:	2b01      	cmp	r3, #1
 8003526:	f040 815c 	bne.w	80037e2 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800352a:	68bb      	ldr	r3, [r7, #8]
 800352c:	699b      	ldr	r3, [r3, #24]
 800352e:	2b00      	cmp	r3, #0
 8003530:	d132      	bne.n	8003598 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003532:	69bb      	ldr	r3, [r7, #24]
 8003534:	015a      	lsls	r2, r3, #5
 8003536:	69fb      	ldr	r3, [r7, #28]
 8003538:	4413      	add	r3, r2
 800353a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800353e:	691b      	ldr	r3, [r3, #16]
 8003540:	69ba      	ldr	r2, [r7, #24]
 8003542:	0151      	lsls	r1, r2, #5
 8003544:	69fa      	ldr	r2, [r7, #28]
 8003546:	440a      	add	r2, r1
 8003548:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800354c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003550:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003554:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003556:	69bb      	ldr	r3, [r7, #24]
 8003558:	015a      	lsls	r2, r3, #5
 800355a:	69fb      	ldr	r3, [r7, #28]
 800355c:	4413      	add	r3, r2
 800355e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003562:	691b      	ldr	r3, [r3, #16]
 8003564:	69ba      	ldr	r2, [r7, #24]
 8003566:	0151      	lsls	r1, r2, #5
 8003568:	69fa      	ldr	r2, [r7, #28]
 800356a:	440a      	add	r2, r1
 800356c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003570:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003574:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003576:	69bb      	ldr	r3, [r7, #24]
 8003578:	015a      	lsls	r2, r3, #5
 800357a:	69fb      	ldr	r3, [r7, #28]
 800357c:	4413      	add	r3, r2
 800357e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003582:	691b      	ldr	r3, [r3, #16]
 8003584:	69ba      	ldr	r2, [r7, #24]
 8003586:	0151      	lsls	r1, r2, #5
 8003588:	69fa      	ldr	r2, [r7, #28]
 800358a:	440a      	add	r2, r1
 800358c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003590:	0cdb      	lsrs	r3, r3, #19
 8003592:	04db      	lsls	r3, r3, #19
 8003594:	6113      	str	r3, [r2, #16]
 8003596:	e074      	b.n	8003682 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003598:	69bb      	ldr	r3, [r7, #24]
 800359a:	015a      	lsls	r2, r3, #5
 800359c:	69fb      	ldr	r3, [r7, #28]
 800359e:	4413      	add	r3, r2
 80035a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035a4:	691b      	ldr	r3, [r3, #16]
 80035a6:	69ba      	ldr	r2, [r7, #24]
 80035a8:	0151      	lsls	r1, r2, #5
 80035aa:	69fa      	ldr	r2, [r7, #28]
 80035ac:	440a      	add	r2, r1
 80035ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80035b2:	0cdb      	lsrs	r3, r3, #19
 80035b4:	04db      	lsls	r3, r3, #19
 80035b6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80035b8:	69bb      	ldr	r3, [r7, #24]
 80035ba:	015a      	lsls	r2, r3, #5
 80035bc:	69fb      	ldr	r3, [r7, #28]
 80035be:	4413      	add	r3, r2
 80035c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035c4:	691b      	ldr	r3, [r3, #16]
 80035c6:	69ba      	ldr	r2, [r7, #24]
 80035c8:	0151      	lsls	r1, r2, #5
 80035ca:	69fa      	ldr	r2, [r7, #28]
 80035cc:	440a      	add	r2, r1
 80035ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80035d2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80035d6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80035da:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80035dc:	69bb      	ldr	r3, [r7, #24]
 80035de:	015a      	lsls	r2, r3, #5
 80035e0:	69fb      	ldr	r3, [r7, #28]
 80035e2:	4413      	add	r3, r2
 80035e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035e8:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80035ea:	68bb      	ldr	r3, [r7, #8]
 80035ec:	6999      	ldr	r1, [r3, #24]
 80035ee:	68bb      	ldr	r3, [r7, #8]
 80035f0:	68db      	ldr	r3, [r3, #12]
 80035f2:	440b      	add	r3, r1
 80035f4:	1e59      	subs	r1, r3, #1
 80035f6:	68bb      	ldr	r3, [r7, #8]
 80035f8:	68db      	ldr	r3, [r3, #12]
 80035fa:	fbb1 f3f3 	udiv	r3, r1, r3
 80035fe:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8003600:	4b9d      	ldr	r3, [pc, #628]	; (8003878 <USB_EPStartXfer+0x370>)
 8003602:	400b      	ands	r3, r1
 8003604:	69b9      	ldr	r1, [r7, #24]
 8003606:	0148      	lsls	r0, r1, #5
 8003608:	69f9      	ldr	r1, [r7, #28]
 800360a:	4401      	add	r1, r0
 800360c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003610:	4313      	orrs	r3, r2
 8003612:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8003614:	69bb      	ldr	r3, [r7, #24]
 8003616:	015a      	lsls	r2, r3, #5
 8003618:	69fb      	ldr	r3, [r7, #28]
 800361a:	4413      	add	r3, r2
 800361c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003620:	691a      	ldr	r2, [r3, #16]
 8003622:	68bb      	ldr	r3, [r7, #8]
 8003624:	699b      	ldr	r3, [r3, #24]
 8003626:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800362a:	69b9      	ldr	r1, [r7, #24]
 800362c:	0148      	lsls	r0, r1, #5
 800362e:	69f9      	ldr	r1, [r7, #28]
 8003630:	4401      	add	r1, r0
 8003632:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003636:	4313      	orrs	r3, r2
 8003638:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800363a:	68bb      	ldr	r3, [r7, #8]
 800363c:	791b      	ldrb	r3, [r3, #4]
 800363e:	2b01      	cmp	r3, #1
 8003640:	d11f      	bne.n	8003682 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8003642:	69bb      	ldr	r3, [r7, #24]
 8003644:	015a      	lsls	r2, r3, #5
 8003646:	69fb      	ldr	r3, [r7, #28]
 8003648:	4413      	add	r3, r2
 800364a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800364e:	691b      	ldr	r3, [r3, #16]
 8003650:	69ba      	ldr	r2, [r7, #24]
 8003652:	0151      	lsls	r1, r2, #5
 8003654:	69fa      	ldr	r2, [r7, #28]
 8003656:	440a      	add	r2, r1
 8003658:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800365c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8003660:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8003662:	69bb      	ldr	r3, [r7, #24]
 8003664:	015a      	lsls	r2, r3, #5
 8003666:	69fb      	ldr	r3, [r7, #28]
 8003668:	4413      	add	r3, r2
 800366a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800366e:	691b      	ldr	r3, [r3, #16]
 8003670:	69ba      	ldr	r2, [r7, #24]
 8003672:	0151      	lsls	r1, r2, #5
 8003674:	69fa      	ldr	r2, [r7, #28]
 8003676:	440a      	add	r2, r1
 8003678:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800367c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003680:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8003682:	79fb      	ldrb	r3, [r7, #7]
 8003684:	2b01      	cmp	r3, #1
 8003686:	d14b      	bne.n	8003720 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8003688:	68bb      	ldr	r3, [r7, #8]
 800368a:	695b      	ldr	r3, [r3, #20]
 800368c:	2b00      	cmp	r3, #0
 800368e:	d009      	beq.n	80036a4 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8003690:	69bb      	ldr	r3, [r7, #24]
 8003692:	015a      	lsls	r2, r3, #5
 8003694:	69fb      	ldr	r3, [r7, #28]
 8003696:	4413      	add	r3, r2
 8003698:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800369c:	461a      	mov	r2, r3
 800369e:	68bb      	ldr	r3, [r7, #8]
 80036a0:	695b      	ldr	r3, [r3, #20]
 80036a2:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80036a4:	68bb      	ldr	r3, [r7, #8]
 80036a6:	791b      	ldrb	r3, [r3, #4]
 80036a8:	2b01      	cmp	r3, #1
 80036aa:	d128      	bne.n	80036fe <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80036ac:	69fb      	ldr	r3, [r7, #28]
 80036ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036b2:	689b      	ldr	r3, [r3, #8]
 80036b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d110      	bne.n	80036de <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80036bc:	69bb      	ldr	r3, [r7, #24]
 80036be:	015a      	lsls	r2, r3, #5
 80036c0:	69fb      	ldr	r3, [r7, #28]
 80036c2:	4413      	add	r3, r2
 80036c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	69ba      	ldr	r2, [r7, #24]
 80036cc:	0151      	lsls	r1, r2, #5
 80036ce:	69fa      	ldr	r2, [r7, #28]
 80036d0:	440a      	add	r2, r1
 80036d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80036d6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80036da:	6013      	str	r3, [r2, #0]
 80036dc:	e00f      	b.n	80036fe <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80036de:	69bb      	ldr	r3, [r7, #24]
 80036e0:	015a      	lsls	r2, r3, #5
 80036e2:	69fb      	ldr	r3, [r7, #28]
 80036e4:	4413      	add	r3, r2
 80036e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	69ba      	ldr	r2, [r7, #24]
 80036ee:	0151      	lsls	r1, r2, #5
 80036f0:	69fa      	ldr	r2, [r7, #28]
 80036f2:	440a      	add	r2, r1
 80036f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80036f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036fc:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80036fe:	69bb      	ldr	r3, [r7, #24]
 8003700:	015a      	lsls	r2, r3, #5
 8003702:	69fb      	ldr	r3, [r7, #28]
 8003704:	4413      	add	r3, r2
 8003706:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	69ba      	ldr	r2, [r7, #24]
 800370e:	0151      	lsls	r1, r2, #5
 8003710:	69fa      	ldr	r2, [r7, #28]
 8003712:	440a      	add	r2, r1
 8003714:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003718:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800371c:	6013      	str	r3, [r2, #0]
 800371e:	e133      	b.n	8003988 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003720:	69bb      	ldr	r3, [r7, #24]
 8003722:	015a      	lsls	r2, r3, #5
 8003724:	69fb      	ldr	r3, [r7, #28]
 8003726:	4413      	add	r3, r2
 8003728:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	69ba      	ldr	r2, [r7, #24]
 8003730:	0151      	lsls	r1, r2, #5
 8003732:	69fa      	ldr	r2, [r7, #28]
 8003734:	440a      	add	r2, r1
 8003736:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800373a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800373e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003740:	68bb      	ldr	r3, [r7, #8]
 8003742:	791b      	ldrb	r3, [r3, #4]
 8003744:	2b01      	cmp	r3, #1
 8003746:	d015      	beq.n	8003774 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8003748:	68bb      	ldr	r3, [r7, #8]
 800374a:	699b      	ldr	r3, [r3, #24]
 800374c:	2b00      	cmp	r3, #0
 800374e:	f000 811b 	beq.w	8003988 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8003752:	69fb      	ldr	r3, [r7, #28]
 8003754:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003758:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800375a:	68bb      	ldr	r3, [r7, #8]
 800375c:	781b      	ldrb	r3, [r3, #0]
 800375e:	f003 030f 	and.w	r3, r3, #15
 8003762:	2101      	movs	r1, #1
 8003764:	fa01 f303 	lsl.w	r3, r1, r3
 8003768:	69f9      	ldr	r1, [r7, #28]
 800376a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800376e:	4313      	orrs	r3, r2
 8003770:	634b      	str	r3, [r1, #52]	; 0x34
 8003772:	e109      	b.n	8003988 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003774:	69fb      	ldr	r3, [r7, #28]
 8003776:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800377a:	689b      	ldr	r3, [r3, #8]
 800377c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003780:	2b00      	cmp	r3, #0
 8003782:	d110      	bne.n	80037a6 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003784:	69bb      	ldr	r3, [r7, #24]
 8003786:	015a      	lsls	r2, r3, #5
 8003788:	69fb      	ldr	r3, [r7, #28]
 800378a:	4413      	add	r3, r2
 800378c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	69ba      	ldr	r2, [r7, #24]
 8003794:	0151      	lsls	r1, r2, #5
 8003796:	69fa      	ldr	r2, [r7, #28]
 8003798:	440a      	add	r2, r1
 800379a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800379e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80037a2:	6013      	str	r3, [r2, #0]
 80037a4:	e00f      	b.n	80037c6 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80037a6:	69bb      	ldr	r3, [r7, #24]
 80037a8:	015a      	lsls	r2, r3, #5
 80037aa:	69fb      	ldr	r3, [r7, #28]
 80037ac:	4413      	add	r3, r2
 80037ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	69ba      	ldr	r2, [r7, #24]
 80037b6:	0151      	lsls	r1, r2, #5
 80037b8:	69fa      	ldr	r2, [r7, #28]
 80037ba:	440a      	add	r2, r1
 80037bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80037c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037c4:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80037c6:	68bb      	ldr	r3, [r7, #8]
 80037c8:	6919      	ldr	r1, [r3, #16]
 80037ca:	68bb      	ldr	r3, [r7, #8]
 80037cc:	781a      	ldrb	r2, [r3, #0]
 80037ce:	68bb      	ldr	r3, [r7, #8]
 80037d0:	699b      	ldr	r3, [r3, #24]
 80037d2:	b298      	uxth	r0, r3
 80037d4:	79fb      	ldrb	r3, [r7, #7]
 80037d6:	9300      	str	r3, [sp, #0]
 80037d8:	4603      	mov	r3, r0
 80037da:	68f8      	ldr	r0, [r7, #12]
 80037dc:	f000 fade 	bl	8003d9c <USB_WritePacket>
 80037e0:	e0d2      	b.n	8003988 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80037e2:	69bb      	ldr	r3, [r7, #24]
 80037e4:	015a      	lsls	r2, r3, #5
 80037e6:	69fb      	ldr	r3, [r7, #28]
 80037e8:	4413      	add	r3, r2
 80037ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037ee:	691b      	ldr	r3, [r3, #16]
 80037f0:	69ba      	ldr	r2, [r7, #24]
 80037f2:	0151      	lsls	r1, r2, #5
 80037f4:	69fa      	ldr	r2, [r7, #28]
 80037f6:	440a      	add	r2, r1
 80037f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80037fc:	0cdb      	lsrs	r3, r3, #19
 80037fe:	04db      	lsls	r3, r3, #19
 8003800:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8003802:	69bb      	ldr	r3, [r7, #24]
 8003804:	015a      	lsls	r2, r3, #5
 8003806:	69fb      	ldr	r3, [r7, #28]
 8003808:	4413      	add	r3, r2
 800380a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800380e:	691b      	ldr	r3, [r3, #16]
 8003810:	69ba      	ldr	r2, [r7, #24]
 8003812:	0151      	lsls	r1, r2, #5
 8003814:	69fa      	ldr	r2, [r7, #28]
 8003816:	440a      	add	r2, r1
 8003818:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800381c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003820:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003824:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8003826:	68bb      	ldr	r3, [r7, #8]
 8003828:	699b      	ldr	r3, [r3, #24]
 800382a:	2b00      	cmp	r3, #0
 800382c:	d126      	bne.n	800387c <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800382e:	69bb      	ldr	r3, [r7, #24]
 8003830:	015a      	lsls	r2, r3, #5
 8003832:	69fb      	ldr	r3, [r7, #28]
 8003834:	4413      	add	r3, r2
 8003836:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800383a:	691a      	ldr	r2, [r3, #16]
 800383c:	68bb      	ldr	r3, [r7, #8]
 800383e:	68db      	ldr	r3, [r3, #12]
 8003840:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003844:	69b9      	ldr	r1, [r7, #24]
 8003846:	0148      	lsls	r0, r1, #5
 8003848:	69f9      	ldr	r1, [r7, #28]
 800384a:	4401      	add	r1, r0
 800384c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003850:	4313      	orrs	r3, r2
 8003852:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003854:	69bb      	ldr	r3, [r7, #24]
 8003856:	015a      	lsls	r2, r3, #5
 8003858:	69fb      	ldr	r3, [r7, #28]
 800385a:	4413      	add	r3, r2
 800385c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003860:	691b      	ldr	r3, [r3, #16]
 8003862:	69ba      	ldr	r2, [r7, #24]
 8003864:	0151      	lsls	r1, r2, #5
 8003866:	69fa      	ldr	r2, [r7, #28]
 8003868:	440a      	add	r2, r1
 800386a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800386e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003872:	6113      	str	r3, [r2, #16]
 8003874:	e03a      	b.n	80038ec <USB_EPStartXfer+0x3e4>
 8003876:	bf00      	nop
 8003878:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800387c:	68bb      	ldr	r3, [r7, #8]
 800387e:	699a      	ldr	r2, [r3, #24]
 8003880:	68bb      	ldr	r3, [r7, #8]
 8003882:	68db      	ldr	r3, [r3, #12]
 8003884:	4413      	add	r3, r2
 8003886:	1e5a      	subs	r2, r3, #1
 8003888:	68bb      	ldr	r3, [r7, #8]
 800388a:	68db      	ldr	r3, [r3, #12]
 800388c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003890:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8003892:	68bb      	ldr	r3, [r7, #8]
 8003894:	68db      	ldr	r3, [r3, #12]
 8003896:	8afa      	ldrh	r2, [r7, #22]
 8003898:	fb03 f202 	mul.w	r2, r3, r2
 800389c:	68bb      	ldr	r3, [r7, #8]
 800389e:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80038a0:	69bb      	ldr	r3, [r7, #24]
 80038a2:	015a      	lsls	r2, r3, #5
 80038a4:	69fb      	ldr	r3, [r7, #28]
 80038a6:	4413      	add	r3, r2
 80038a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038ac:	691a      	ldr	r2, [r3, #16]
 80038ae:	8afb      	ldrh	r3, [r7, #22]
 80038b0:	04d9      	lsls	r1, r3, #19
 80038b2:	4b38      	ldr	r3, [pc, #224]	; (8003994 <USB_EPStartXfer+0x48c>)
 80038b4:	400b      	ands	r3, r1
 80038b6:	69b9      	ldr	r1, [r7, #24]
 80038b8:	0148      	lsls	r0, r1, #5
 80038ba:	69f9      	ldr	r1, [r7, #28]
 80038bc:	4401      	add	r1, r0
 80038be:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80038c2:	4313      	orrs	r3, r2
 80038c4:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80038c6:	69bb      	ldr	r3, [r7, #24]
 80038c8:	015a      	lsls	r2, r3, #5
 80038ca:	69fb      	ldr	r3, [r7, #28]
 80038cc:	4413      	add	r3, r2
 80038ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038d2:	691a      	ldr	r2, [r3, #16]
 80038d4:	68bb      	ldr	r3, [r7, #8]
 80038d6:	69db      	ldr	r3, [r3, #28]
 80038d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80038dc:	69b9      	ldr	r1, [r7, #24]
 80038de:	0148      	lsls	r0, r1, #5
 80038e0:	69f9      	ldr	r1, [r7, #28]
 80038e2:	4401      	add	r1, r0
 80038e4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80038e8:	4313      	orrs	r3, r2
 80038ea:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80038ec:	79fb      	ldrb	r3, [r7, #7]
 80038ee:	2b01      	cmp	r3, #1
 80038f0:	d10d      	bne.n	800390e <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80038f2:	68bb      	ldr	r3, [r7, #8]
 80038f4:	691b      	ldr	r3, [r3, #16]
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d009      	beq.n	800390e <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80038fa:	68bb      	ldr	r3, [r7, #8]
 80038fc:	6919      	ldr	r1, [r3, #16]
 80038fe:	69bb      	ldr	r3, [r7, #24]
 8003900:	015a      	lsls	r2, r3, #5
 8003902:	69fb      	ldr	r3, [r7, #28]
 8003904:	4413      	add	r3, r2
 8003906:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800390a:	460a      	mov	r2, r1
 800390c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800390e:	68bb      	ldr	r3, [r7, #8]
 8003910:	791b      	ldrb	r3, [r3, #4]
 8003912:	2b01      	cmp	r3, #1
 8003914:	d128      	bne.n	8003968 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003916:	69fb      	ldr	r3, [r7, #28]
 8003918:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800391c:	689b      	ldr	r3, [r3, #8]
 800391e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003922:	2b00      	cmp	r3, #0
 8003924:	d110      	bne.n	8003948 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8003926:	69bb      	ldr	r3, [r7, #24]
 8003928:	015a      	lsls	r2, r3, #5
 800392a:	69fb      	ldr	r3, [r7, #28]
 800392c:	4413      	add	r3, r2
 800392e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	69ba      	ldr	r2, [r7, #24]
 8003936:	0151      	lsls	r1, r2, #5
 8003938:	69fa      	ldr	r2, [r7, #28]
 800393a:	440a      	add	r2, r1
 800393c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003940:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003944:	6013      	str	r3, [r2, #0]
 8003946:	e00f      	b.n	8003968 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8003948:	69bb      	ldr	r3, [r7, #24]
 800394a:	015a      	lsls	r2, r3, #5
 800394c:	69fb      	ldr	r3, [r7, #28]
 800394e:	4413      	add	r3, r2
 8003950:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	69ba      	ldr	r2, [r7, #24]
 8003958:	0151      	lsls	r1, r2, #5
 800395a:	69fa      	ldr	r2, [r7, #28]
 800395c:	440a      	add	r2, r1
 800395e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003962:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003966:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8003968:	69bb      	ldr	r3, [r7, #24]
 800396a:	015a      	lsls	r2, r3, #5
 800396c:	69fb      	ldr	r3, [r7, #28]
 800396e:	4413      	add	r3, r2
 8003970:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	69ba      	ldr	r2, [r7, #24]
 8003978:	0151      	lsls	r1, r2, #5
 800397a:	69fa      	ldr	r2, [r7, #28]
 800397c:	440a      	add	r2, r1
 800397e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003982:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003986:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003988:	2300      	movs	r3, #0
}
 800398a:	4618      	mov	r0, r3
 800398c:	3720      	adds	r7, #32
 800398e:	46bd      	mov	sp, r7
 8003990:	bd80      	pop	{r7, pc}
 8003992:	bf00      	nop
 8003994:	1ff80000 	.word	0x1ff80000

08003998 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8003998:	b480      	push	{r7}
 800399a:	b087      	sub	sp, #28
 800399c:	af00      	add	r7, sp, #0
 800399e:	60f8      	str	r0, [r7, #12]
 80039a0:	60b9      	str	r1, [r7, #8]
 80039a2:	4613      	mov	r3, r2
 80039a4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80039aa:	68bb      	ldr	r3, [r7, #8]
 80039ac:	781b      	ldrb	r3, [r3, #0]
 80039ae:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80039b0:	68bb      	ldr	r3, [r7, #8]
 80039b2:	785b      	ldrb	r3, [r3, #1]
 80039b4:	2b01      	cmp	r3, #1
 80039b6:	f040 80ce 	bne.w	8003b56 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80039ba:	68bb      	ldr	r3, [r7, #8]
 80039bc:	699b      	ldr	r3, [r3, #24]
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d132      	bne.n	8003a28 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80039c2:	693b      	ldr	r3, [r7, #16]
 80039c4:	015a      	lsls	r2, r3, #5
 80039c6:	697b      	ldr	r3, [r7, #20]
 80039c8:	4413      	add	r3, r2
 80039ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039ce:	691b      	ldr	r3, [r3, #16]
 80039d0:	693a      	ldr	r2, [r7, #16]
 80039d2:	0151      	lsls	r1, r2, #5
 80039d4:	697a      	ldr	r2, [r7, #20]
 80039d6:	440a      	add	r2, r1
 80039d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80039dc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80039e0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80039e4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80039e6:	693b      	ldr	r3, [r7, #16]
 80039e8:	015a      	lsls	r2, r3, #5
 80039ea:	697b      	ldr	r3, [r7, #20]
 80039ec:	4413      	add	r3, r2
 80039ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039f2:	691b      	ldr	r3, [r3, #16]
 80039f4:	693a      	ldr	r2, [r7, #16]
 80039f6:	0151      	lsls	r1, r2, #5
 80039f8:	697a      	ldr	r2, [r7, #20]
 80039fa:	440a      	add	r2, r1
 80039fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003a00:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003a04:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003a06:	693b      	ldr	r3, [r7, #16]
 8003a08:	015a      	lsls	r2, r3, #5
 8003a0a:	697b      	ldr	r3, [r7, #20]
 8003a0c:	4413      	add	r3, r2
 8003a0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a12:	691b      	ldr	r3, [r3, #16]
 8003a14:	693a      	ldr	r2, [r7, #16]
 8003a16:	0151      	lsls	r1, r2, #5
 8003a18:	697a      	ldr	r2, [r7, #20]
 8003a1a:	440a      	add	r2, r1
 8003a1c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003a20:	0cdb      	lsrs	r3, r3, #19
 8003a22:	04db      	lsls	r3, r3, #19
 8003a24:	6113      	str	r3, [r2, #16]
 8003a26:	e04e      	b.n	8003ac6 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003a28:	693b      	ldr	r3, [r7, #16]
 8003a2a:	015a      	lsls	r2, r3, #5
 8003a2c:	697b      	ldr	r3, [r7, #20]
 8003a2e:	4413      	add	r3, r2
 8003a30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a34:	691b      	ldr	r3, [r3, #16]
 8003a36:	693a      	ldr	r2, [r7, #16]
 8003a38:	0151      	lsls	r1, r2, #5
 8003a3a:	697a      	ldr	r2, [r7, #20]
 8003a3c:	440a      	add	r2, r1
 8003a3e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003a42:	0cdb      	lsrs	r3, r3, #19
 8003a44:	04db      	lsls	r3, r3, #19
 8003a46:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003a48:	693b      	ldr	r3, [r7, #16]
 8003a4a:	015a      	lsls	r2, r3, #5
 8003a4c:	697b      	ldr	r3, [r7, #20]
 8003a4e:	4413      	add	r3, r2
 8003a50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a54:	691b      	ldr	r3, [r3, #16]
 8003a56:	693a      	ldr	r2, [r7, #16]
 8003a58:	0151      	lsls	r1, r2, #5
 8003a5a:	697a      	ldr	r2, [r7, #20]
 8003a5c:	440a      	add	r2, r1
 8003a5e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003a62:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003a66:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003a6a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8003a6c:	68bb      	ldr	r3, [r7, #8]
 8003a6e:	699a      	ldr	r2, [r3, #24]
 8003a70:	68bb      	ldr	r3, [r7, #8]
 8003a72:	68db      	ldr	r3, [r3, #12]
 8003a74:	429a      	cmp	r2, r3
 8003a76:	d903      	bls.n	8003a80 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8003a78:	68bb      	ldr	r3, [r7, #8]
 8003a7a:	68da      	ldr	r2, [r3, #12]
 8003a7c:	68bb      	ldr	r3, [r7, #8]
 8003a7e:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003a80:	693b      	ldr	r3, [r7, #16]
 8003a82:	015a      	lsls	r2, r3, #5
 8003a84:	697b      	ldr	r3, [r7, #20]
 8003a86:	4413      	add	r3, r2
 8003a88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a8c:	691b      	ldr	r3, [r3, #16]
 8003a8e:	693a      	ldr	r2, [r7, #16]
 8003a90:	0151      	lsls	r1, r2, #5
 8003a92:	697a      	ldr	r2, [r7, #20]
 8003a94:	440a      	add	r2, r1
 8003a96:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003a9a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003a9e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8003aa0:	693b      	ldr	r3, [r7, #16]
 8003aa2:	015a      	lsls	r2, r3, #5
 8003aa4:	697b      	ldr	r3, [r7, #20]
 8003aa6:	4413      	add	r3, r2
 8003aa8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003aac:	691a      	ldr	r2, [r3, #16]
 8003aae:	68bb      	ldr	r3, [r7, #8]
 8003ab0:	699b      	ldr	r3, [r3, #24]
 8003ab2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ab6:	6939      	ldr	r1, [r7, #16]
 8003ab8:	0148      	lsls	r0, r1, #5
 8003aba:	6979      	ldr	r1, [r7, #20]
 8003abc:	4401      	add	r1, r0
 8003abe:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003ac2:	4313      	orrs	r3, r2
 8003ac4:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8003ac6:	79fb      	ldrb	r3, [r7, #7]
 8003ac8:	2b01      	cmp	r3, #1
 8003aca:	d11e      	bne.n	8003b0a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8003acc:	68bb      	ldr	r3, [r7, #8]
 8003ace:	695b      	ldr	r3, [r3, #20]
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d009      	beq.n	8003ae8 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8003ad4:	693b      	ldr	r3, [r7, #16]
 8003ad6:	015a      	lsls	r2, r3, #5
 8003ad8:	697b      	ldr	r3, [r7, #20]
 8003ada:	4413      	add	r3, r2
 8003adc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ae0:	461a      	mov	r2, r3
 8003ae2:	68bb      	ldr	r3, [r7, #8]
 8003ae4:	695b      	ldr	r3, [r3, #20]
 8003ae6:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003ae8:	693b      	ldr	r3, [r7, #16]
 8003aea:	015a      	lsls	r2, r3, #5
 8003aec:	697b      	ldr	r3, [r7, #20]
 8003aee:	4413      	add	r3, r2
 8003af0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	693a      	ldr	r2, [r7, #16]
 8003af8:	0151      	lsls	r1, r2, #5
 8003afa:	697a      	ldr	r2, [r7, #20]
 8003afc:	440a      	add	r2, r1
 8003afe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003b02:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003b06:	6013      	str	r3, [r2, #0]
 8003b08:	e097      	b.n	8003c3a <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003b0a:	693b      	ldr	r3, [r7, #16]
 8003b0c:	015a      	lsls	r2, r3, #5
 8003b0e:	697b      	ldr	r3, [r7, #20]
 8003b10:	4413      	add	r3, r2
 8003b12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	693a      	ldr	r2, [r7, #16]
 8003b1a:	0151      	lsls	r1, r2, #5
 8003b1c:	697a      	ldr	r2, [r7, #20]
 8003b1e:	440a      	add	r2, r1
 8003b20:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003b24:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003b28:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8003b2a:	68bb      	ldr	r3, [r7, #8]
 8003b2c:	699b      	ldr	r3, [r3, #24]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	f000 8083 	beq.w	8003c3a <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8003b34:	697b      	ldr	r3, [r7, #20]
 8003b36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b3a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003b3c:	68bb      	ldr	r3, [r7, #8]
 8003b3e:	781b      	ldrb	r3, [r3, #0]
 8003b40:	f003 030f 	and.w	r3, r3, #15
 8003b44:	2101      	movs	r1, #1
 8003b46:	fa01 f303 	lsl.w	r3, r1, r3
 8003b4a:	6979      	ldr	r1, [r7, #20]
 8003b4c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003b50:	4313      	orrs	r3, r2
 8003b52:	634b      	str	r3, [r1, #52]	; 0x34
 8003b54:	e071      	b.n	8003c3a <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8003b56:	693b      	ldr	r3, [r7, #16]
 8003b58:	015a      	lsls	r2, r3, #5
 8003b5a:	697b      	ldr	r3, [r7, #20]
 8003b5c:	4413      	add	r3, r2
 8003b5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b62:	691b      	ldr	r3, [r3, #16]
 8003b64:	693a      	ldr	r2, [r7, #16]
 8003b66:	0151      	lsls	r1, r2, #5
 8003b68:	697a      	ldr	r2, [r7, #20]
 8003b6a:	440a      	add	r2, r1
 8003b6c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003b70:	0cdb      	lsrs	r3, r3, #19
 8003b72:	04db      	lsls	r3, r3, #19
 8003b74:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8003b76:	693b      	ldr	r3, [r7, #16]
 8003b78:	015a      	lsls	r2, r3, #5
 8003b7a:	697b      	ldr	r3, [r7, #20]
 8003b7c:	4413      	add	r3, r2
 8003b7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b82:	691b      	ldr	r3, [r3, #16]
 8003b84:	693a      	ldr	r2, [r7, #16]
 8003b86:	0151      	lsls	r1, r2, #5
 8003b88:	697a      	ldr	r2, [r7, #20]
 8003b8a:	440a      	add	r2, r1
 8003b8c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003b90:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003b94:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003b98:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8003b9a:	68bb      	ldr	r3, [r7, #8]
 8003b9c:	699b      	ldr	r3, [r3, #24]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d003      	beq.n	8003baa <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8003ba2:	68bb      	ldr	r3, [r7, #8]
 8003ba4:	68da      	ldr	r2, [r3, #12]
 8003ba6:	68bb      	ldr	r3, [r7, #8]
 8003ba8:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8003baa:	68bb      	ldr	r3, [r7, #8]
 8003bac:	68da      	ldr	r2, [r3, #12]
 8003bae:	68bb      	ldr	r3, [r7, #8]
 8003bb0:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003bb2:	693b      	ldr	r3, [r7, #16]
 8003bb4:	015a      	lsls	r2, r3, #5
 8003bb6:	697b      	ldr	r3, [r7, #20]
 8003bb8:	4413      	add	r3, r2
 8003bba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bbe:	691b      	ldr	r3, [r3, #16]
 8003bc0:	693a      	ldr	r2, [r7, #16]
 8003bc2:	0151      	lsls	r1, r2, #5
 8003bc4:	697a      	ldr	r2, [r7, #20]
 8003bc6:	440a      	add	r2, r1
 8003bc8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003bcc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003bd0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8003bd2:	693b      	ldr	r3, [r7, #16]
 8003bd4:	015a      	lsls	r2, r3, #5
 8003bd6:	697b      	ldr	r3, [r7, #20]
 8003bd8:	4413      	add	r3, r2
 8003bda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bde:	691a      	ldr	r2, [r3, #16]
 8003be0:	68bb      	ldr	r3, [r7, #8]
 8003be2:	69db      	ldr	r3, [r3, #28]
 8003be4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003be8:	6939      	ldr	r1, [r7, #16]
 8003bea:	0148      	lsls	r0, r1, #5
 8003bec:	6979      	ldr	r1, [r7, #20]
 8003bee:	4401      	add	r1, r0
 8003bf0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003bf4:	4313      	orrs	r3, r2
 8003bf6:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8003bf8:	79fb      	ldrb	r3, [r7, #7]
 8003bfa:	2b01      	cmp	r3, #1
 8003bfc:	d10d      	bne.n	8003c1a <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8003bfe:	68bb      	ldr	r3, [r7, #8]
 8003c00:	691b      	ldr	r3, [r3, #16]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d009      	beq.n	8003c1a <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8003c06:	68bb      	ldr	r3, [r7, #8]
 8003c08:	6919      	ldr	r1, [r3, #16]
 8003c0a:	693b      	ldr	r3, [r7, #16]
 8003c0c:	015a      	lsls	r2, r3, #5
 8003c0e:	697b      	ldr	r3, [r7, #20]
 8003c10:	4413      	add	r3, r2
 8003c12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c16:	460a      	mov	r2, r1
 8003c18:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8003c1a:	693b      	ldr	r3, [r7, #16]
 8003c1c:	015a      	lsls	r2, r3, #5
 8003c1e:	697b      	ldr	r3, [r7, #20]
 8003c20:	4413      	add	r3, r2
 8003c22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	693a      	ldr	r2, [r7, #16]
 8003c2a:	0151      	lsls	r1, r2, #5
 8003c2c:	697a      	ldr	r2, [r7, #20]
 8003c2e:	440a      	add	r2, r1
 8003c30:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003c34:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003c38:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003c3a:	2300      	movs	r3, #0
}
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	371c      	adds	r7, #28
 8003c40:	46bd      	mov	sp, r7
 8003c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c46:	4770      	bx	lr

08003c48 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003c48:	b480      	push	{r7}
 8003c4a:	b087      	sub	sp, #28
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
 8003c50:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003c52:	2300      	movs	r3, #0
 8003c54:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8003c56:	2300      	movs	r3, #0
 8003c58:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003c5e:	683b      	ldr	r3, [r7, #0]
 8003c60:	785b      	ldrb	r3, [r3, #1]
 8003c62:	2b01      	cmp	r3, #1
 8003c64:	d14a      	bne.n	8003cfc <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003c66:	683b      	ldr	r3, [r7, #0]
 8003c68:	781b      	ldrb	r3, [r3, #0]
 8003c6a:	015a      	lsls	r2, r3, #5
 8003c6c:	693b      	ldr	r3, [r7, #16]
 8003c6e:	4413      	add	r3, r2
 8003c70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003c7a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003c7e:	f040 8086 	bne.w	8003d8e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	781b      	ldrb	r3, [r3, #0]
 8003c86:	015a      	lsls	r2, r3, #5
 8003c88:	693b      	ldr	r3, [r7, #16]
 8003c8a:	4413      	add	r3, r2
 8003c8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	683a      	ldr	r2, [r7, #0]
 8003c94:	7812      	ldrb	r2, [r2, #0]
 8003c96:	0151      	lsls	r1, r2, #5
 8003c98:	693a      	ldr	r2, [r7, #16]
 8003c9a:	440a      	add	r2, r1
 8003c9c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003ca0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003ca4:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	781b      	ldrb	r3, [r3, #0]
 8003caa:	015a      	lsls	r2, r3, #5
 8003cac:	693b      	ldr	r3, [r7, #16]
 8003cae:	4413      	add	r3, r2
 8003cb0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	683a      	ldr	r2, [r7, #0]
 8003cb8:	7812      	ldrb	r2, [r2, #0]
 8003cba:	0151      	lsls	r1, r2, #5
 8003cbc:	693a      	ldr	r2, [r7, #16]
 8003cbe:	440a      	add	r2, r1
 8003cc0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003cc4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003cc8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	3301      	adds	r3, #1
 8003cce:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	f242 7210 	movw	r2, #10000	; 0x2710
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d902      	bls.n	8003ce0 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8003cda:	2301      	movs	r3, #1
 8003cdc:	75fb      	strb	r3, [r7, #23]
          break;
 8003cde:	e056      	b.n	8003d8e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8003ce0:	683b      	ldr	r3, [r7, #0]
 8003ce2:	781b      	ldrb	r3, [r3, #0]
 8003ce4:	015a      	lsls	r2, r3, #5
 8003ce6:	693b      	ldr	r3, [r7, #16]
 8003ce8:	4413      	add	r3, r2
 8003cea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003cf4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003cf8:	d0e7      	beq.n	8003cca <USB_EPStopXfer+0x82>
 8003cfa:	e048      	b.n	8003d8e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	781b      	ldrb	r3, [r3, #0]
 8003d00:	015a      	lsls	r2, r3, #5
 8003d02:	693b      	ldr	r3, [r7, #16]
 8003d04:	4413      	add	r3, r2
 8003d06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003d10:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003d14:	d13b      	bne.n	8003d8e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	781b      	ldrb	r3, [r3, #0]
 8003d1a:	015a      	lsls	r2, r3, #5
 8003d1c:	693b      	ldr	r3, [r7, #16]
 8003d1e:	4413      	add	r3, r2
 8003d20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	683a      	ldr	r2, [r7, #0]
 8003d28:	7812      	ldrb	r2, [r2, #0]
 8003d2a:	0151      	lsls	r1, r2, #5
 8003d2c:	693a      	ldr	r2, [r7, #16]
 8003d2e:	440a      	add	r2, r1
 8003d30:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003d34:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003d38:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8003d3a:	683b      	ldr	r3, [r7, #0]
 8003d3c:	781b      	ldrb	r3, [r3, #0]
 8003d3e:	015a      	lsls	r2, r3, #5
 8003d40:	693b      	ldr	r3, [r7, #16]
 8003d42:	4413      	add	r3, r2
 8003d44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	683a      	ldr	r2, [r7, #0]
 8003d4c:	7812      	ldrb	r2, [r2, #0]
 8003d4e:	0151      	lsls	r1, r2, #5
 8003d50:	693a      	ldr	r2, [r7, #16]
 8003d52:	440a      	add	r2, r1
 8003d54:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003d58:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003d5c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	3301      	adds	r3, #1
 8003d62:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	f242 7210 	movw	r2, #10000	; 0x2710
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	d902      	bls.n	8003d74 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8003d6e:	2301      	movs	r3, #1
 8003d70:	75fb      	strb	r3, [r7, #23]
          break;
 8003d72:	e00c      	b.n	8003d8e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	781b      	ldrb	r3, [r3, #0]
 8003d78:	015a      	lsls	r2, r3, #5
 8003d7a:	693b      	ldr	r3, [r7, #16]
 8003d7c:	4413      	add	r3, r2
 8003d7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003d88:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003d8c:	d0e7      	beq.n	8003d5e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8003d8e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d90:	4618      	mov	r0, r3
 8003d92:	371c      	adds	r7, #28
 8003d94:	46bd      	mov	sp, r7
 8003d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9a:	4770      	bx	lr

08003d9c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8003d9c:	b480      	push	{r7}
 8003d9e:	b089      	sub	sp, #36	; 0x24
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	60f8      	str	r0, [r7, #12]
 8003da4:	60b9      	str	r1, [r7, #8]
 8003da6:	4611      	mov	r1, r2
 8003da8:	461a      	mov	r2, r3
 8003daa:	460b      	mov	r3, r1
 8003dac:	71fb      	strb	r3, [r7, #7]
 8003dae:	4613      	mov	r3, r2
 8003db0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8003db6:	68bb      	ldr	r3, [r7, #8]
 8003db8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8003dba:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d123      	bne.n	8003e0a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8003dc2:	88bb      	ldrh	r3, [r7, #4]
 8003dc4:	3303      	adds	r3, #3
 8003dc6:	089b      	lsrs	r3, r3, #2
 8003dc8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8003dca:	2300      	movs	r3, #0
 8003dcc:	61bb      	str	r3, [r7, #24]
 8003dce:	e018      	b.n	8003e02 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8003dd0:	79fb      	ldrb	r3, [r7, #7]
 8003dd2:	031a      	lsls	r2, r3, #12
 8003dd4:	697b      	ldr	r3, [r7, #20]
 8003dd6:	4413      	add	r3, r2
 8003dd8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ddc:	461a      	mov	r2, r3
 8003dde:	69fb      	ldr	r3, [r7, #28]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	6013      	str	r3, [r2, #0]
      pSrc++;
 8003de4:	69fb      	ldr	r3, [r7, #28]
 8003de6:	3301      	adds	r3, #1
 8003de8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003dea:	69fb      	ldr	r3, [r7, #28]
 8003dec:	3301      	adds	r3, #1
 8003dee:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003df0:	69fb      	ldr	r3, [r7, #28]
 8003df2:	3301      	adds	r3, #1
 8003df4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003df6:	69fb      	ldr	r3, [r7, #28]
 8003df8:	3301      	adds	r3, #1
 8003dfa:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8003dfc:	69bb      	ldr	r3, [r7, #24]
 8003dfe:	3301      	adds	r3, #1
 8003e00:	61bb      	str	r3, [r7, #24]
 8003e02:	69ba      	ldr	r2, [r7, #24]
 8003e04:	693b      	ldr	r3, [r7, #16]
 8003e06:	429a      	cmp	r2, r3
 8003e08:	d3e2      	bcc.n	8003dd0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8003e0a:	2300      	movs	r3, #0
}
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	3724      	adds	r7, #36	; 0x24
 8003e10:	46bd      	mov	sp, r7
 8003e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e16:	4770      	bx	lr

08003e18 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8003e18:	b480      	push	{r7}
 8003e1a:	b08b      	sub	sp, #44	; 0x2c
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	60f8      	str	r0, [r7, #12]
 8003e20:	60b9      	str	r1, [r7, #8]
 8003e22:	4613      	mov	r3, r2
 8003e24:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8003e2a:	68bb      	ldr	r3, [r7, #8]
 8003e2c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8003e2e:	88fb      	ldrh	r3, [r7, #6]
 8003e30:	089b      	lsrs	r3, r3, #2
 8003e32:	b29b      	uxth	r3, r3
 8003e34:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8003e36:	88fb      	ldrh	r3, [r7, #6]
 8003e38:	f003 0303 	and.w	r3, r3, #3
 8003e3c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8003e3e:	2300      	movs	r3, #0
 8003e40:	623b      	str	r3, [r7, #32]
 8003e42:	e014      	b.n	8003e6e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8003e44:	69bb      	ldr	r3, [r7, #24]
 8003e46:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e4a:	681a      	ldr	r2, [r3, #0]
 8003e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e4e:	601a      	str	r2, [r3, #0]
    pDest++;
 8003e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e52:	3301      	adds	r3, #1
 8003e54:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8003e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e58:	3301      	adds	r3, #1
 8003e5a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8003e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e5e:	3301      	adds	r3, #1
 8003e60:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8003e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e64:	3301      	adds	r3, #1
 8003e66:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8003e68:	6a3b      	ldr	r3, [r7, #32]
 8003e6a:	3301      	adds	r3, #1
 8003e6c:	623b      	str	r3, [r7, #32]
 8003e6e:	6a3a      	ldr	r2, [r7, #32]
 8003e70:	697b      	ldr	r3, [r7, #20]
 8003e72:	429a      	cmp	r2, r3
 8003e74:	d3e6      	bcc.n	8003e44 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8003e76:	8bfb      	ldrh	r3, [r7, #30]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d01e      	beq.n	8003eba <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8003e80:	69bb      	ldr	r3, [r7, #24]
 8003e82:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e86:	461a      	mov	r2, r3
 8003e88:	f107 0310 	add.w	r3, r7, #16
 8003e8c:	6812      	ldr	r2, [r2, #0]
 8003e8e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8003e90:	693a      	ldr	r2, [r7, #16]
 8003e92:	6a3b      	ldr	r3, [r7, #32]
 8003e94:	b2db      	uxtb	r3, r3
 8003e96:	00db      	lsls	r3, r3, #3
 8003e98:	fa22 f303 	lsr.w	r3, r2, r3
 8003e9c:	b2da      	uxtb	r2, r3
 8003e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ea0:	701a      	strb	r2, [r3, #0]
      i++;
 8003ea2:	6a3b      	ldr	r3, [r7, #32]
 8003ea4:	3301      	adds	r3, #1
 8003ea6:	623b      	str	r3, [r7, #32]
      pDest++;
 8003ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eaa:	3301      	adds	r3, #1
 8003eac:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8003eae:	8bfb      	ldrh	r3, [r7, #30]
 8003eb0:	3b01      	subs	r3, #1
 8003eb2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8003eb4:	8bfb      	ldrh	r3, [r7, #30]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d1ea      	bne.n	8003e90 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8003eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	372c      	adds	r7, #44	; 0x2c
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec6:	4770      	bx	lr

08003ec8 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003ec8:	b480      	push	{r7}
 8003eca:	b085      	sub	sp, #20
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
 8003ed0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003ed6:	683b      	ldr	r3, [r7, #0]
 8003ed8:	781b      	ldrb	r3, [r3, #0]
 8003eda:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	785b      	ldrb	r3, [r3, #1]
 8003ee0:	2b01      	cmp	r3, #1
 8003ee2:	d12c      	bne.n	8003f3e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8003ee4:	68bb      	ldr	r3, [r7, #8]
 8003ee6:	015a      	lsls	r2, r3, #5
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	4413      	add	r3, r2
 8003eec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	db12      	blt.n	8003f1c <USB_EPSetStall+0x54>
 8003ef6:	68bb      	ldr	r3, [r7, #8]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d00f      	beq.n	8003f1c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8003efc:	68bb      	ldr	r3, [r7, #8]
 8003efe:	015a      	lsls	r2, r3, #5
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	4413      	add	r3, r2
 8003f04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	68ba      	ldr	r2, [r7, #8]
 8003f0c:	0151      	lsls	r1, r2, #5
 8003f0e:	68fa      	ldr	r2, [r7, #12]
 8003f10:	440a      	add	r2, r1
 8003f12:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f16:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003f1a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8003f1c:	68bb      	ldr	r3, [r7, #8]
 8003f1e:	015a      	lsls	r2, r3, #5
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	4413      	add	r3, r2
 8003f24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	68ba      	ldr	r2, [r7, #8]
 8003f2c:	0151      	lsls	r1, r2, #5
 8003f2e:	68fa      	ldr	r2, [r7, #12]
 8003f30:	440a      	add	r2, r1
 8003f32:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f36:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003f3a:	6013      	str	r3, [r2, #0]
 8003f3c:	e02b      	b.n	8003f96 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8003f3e:	68bb      	ldr	r3, [r7, #8]
 8003f40:	015a      	lsls	r2, r3, #5
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	4413      	add	r3, r2
 8003f46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	db12      	blt.n	8003f76 <USB_EPSetStall+0xae>
 8003f50:	68bb      	ldr	r3, [r7, #8]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d00f      	beq.n	8003f76 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8003f56:	68bb      	ldr	r3, [r7, #8]
 8003f58:	015a      	lsls	r2, r3, #5
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	4413      	add	r3, r2
 8003f5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	68ba      	ldr	r2, [r7, #8]
 8003f66:	0151      	lsls	r1, r2, #5
 8003f68:	68fa      	ldr	r2, [r7, #12]
 8003f6a:	440a      	add	r2, r1
 8003f6c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003f70:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003f74:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8003f76:	68bb      	ldr	r3, [r7, #8]
 8003f78:	015a      	lsls	r2, r3, #5
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	4413      	add	r3, r2
 8003f7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	68ba      	ldr	r2, [r7, #8]
 8003f86:	0151      	lsls	r1, r2, #5
 8003f88:	68fa      	ldr	r2, [r7, #12]
 8003f8a:	440a      	add	r2, r1
 8003f8c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003f90:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003f94:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003f96:	2300      	movs	r3, #0
}
 8003f98:	4618      	mov	r0, r3
 8003f9a:	3714      	adds	r7, #20
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa2:	4770      	bx	lr

08003fa4 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003fa4:	b480      	push	{r7}
 8003fa6:	b085      	sub	sp, #20
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
 8003fac:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	781b      	ldrb	r3, [r3, #0]
 8003fb6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	785b      	ldrb	r3, [r3, #1]
 8003fbc:	2b01      	cmp	r3, #1
 8003fbe:	d128      	bne.n	8004012 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003fc0:	68bb      	ldr	r3, [r7, #8]
 8003fc2:	015a      	lsls	r2, r3, #5
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	4413      	add	r3, r2
 8003fc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	68ba      	ldr	r2, [r7, #8]
 8003fd0:	0151      	lsls	r1, r2, #5
 8003fd2:	68fa      	ldr	r2, [r7, #12]
 8003fd4:	440a      	add	r2, r1
 8003fd6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003fda:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003fde:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	791b      	ldrb	r3, [r3, #4]
 8003fe4:	2b03      	cmp	r3, #3
 8003fe6:	d003      	beq.n	8003ff0 <USB_EPClearStall+0x4c>
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	791b      	ldrb	r3, [r3, #4]
 8003fec:	2b02      	cmp	r3, #2
 8003fee:	d138      	bne.n	8004062 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8003ff0:	68bb      	ldr	r3, [r7, #8]
 8003ff2:	015a      	lsls	r2, r3, #5
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	4413      	add	r3, r2
 8003ff8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	68ba      	ldr	r2, [r7, #8]
 8004000:	0151      	lsls	r1, r2, #5
 8004002:	68fa      	ldr	r2, [r7, #12]
 8004004:	440a      	add	r2, r1
 8004006:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800400a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800400e:	6013      	str	r3, [r2, #0]
 8004010:	e027      	b.n	8004062 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004012:	68bb      	ldr	r3, [r7, #8]
 8004014:	015a      	lsls	r2, r3, #5
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	4413      	add	r3, r2
 800401a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	68ba      	ldr	r2, [r7, #8]
 8004022:	0151      	lsls	r1, r2, #5
 8004024:	68fa      	ldr	r2, [r7, #12]
 8004026:	440a      	add	r2, r1
 8004028:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800402c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004030:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004032:	683b      	ldr	r3, [r7, #0]
 8004034:	791b      	ldrb	r3, [r3, #4]
 8004036:	2b03      	cmp	r3, #3
 8004038:	d003      	beq.n	8004042 <USB_EPClearStall+0x9e>
 800403a:	683b      	ldr	r3, [r7, #0]
 800403c:	791b      	ldrb	r3, [r3, #4]
 800403e:	2b02      	cmp	r3, #2
 8004040:	d10f      	bne.n	8004062 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004042:	68bb      	ldr	r3, [r7, #8]
 8004044:	015a      	lsls	r2, r3, #5
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	4413      	add	r3, r2
 800404a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	68ba      	ldr	r2, [r7, #8]
 8004052:	0151      	lsls	r1, r2, #5
 8004054:	68fa      	ldr	r2, [r7, #12]
 8004056:	440a      	add	r2, r1
 8004058:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800405c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004060:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8004062:	2300      	movs	r3, #0
}
 8004064:	4618      	mov	r0, r3
 8004066:	3714      	adds	r7, #20
 8004068:	46bd      	mov	sp, r7
 800406a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406e:	4770      	bx	lr

08004070 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8004070:	b480      	push	{r7}
 8004072:	b085      	sub	sp, #20
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
 8004078:	460b      	mov	r3, r1
 800407a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	68fa      	ldr	r2, [r7, #12]
 800408a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800408e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004092:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800409a:	681a      	ldr	r2, [r3, #0]
 800409c:	78fb      	ldrb	r3, [r7, #3]
 800409e:	011b      	lsls	r3, r3, #4
 80040a0:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80040a4:	68f9      	ldr	r1, [r7, #12]
 80040a6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80040aa:	4313      	orrs	r3, r2
 80040ac:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80040ae:	2300      	movs	r3, #0
}
 80040b0:	4618      	mov	r0, r3
 80040b2:	3714      	adds	r7, #20
 80040b4:	46bd      	mov	sp, r7
 80040b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ba:	4770      	bx	lr

080040bc <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80040bc:	b480      	push	{r7}
 80040be:	b085      	sub	sp, #20
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	68fa      	ldr	r2, [r7, #12]
 80040d2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80040d6:	f023 0303 	bic.w	r3, r3, #3
 80040da:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040e2:	685b      	ldr	r3, [r3, #4]
 80040e4:	68fa      	ldr	r2, [r7, #12]
 80040e6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80040ea:	f023 0302 	bic.w	r3, r3, #2
 80040ee:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80040f0:	2300      	movs	r3, #0
}
 80040f2:	4618      	mov	r0, r3
 80040f4:	3714      	adds	r7, #20
 80040f6:	46bd      	mov	sp, r7
 80040f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fc:	4770      	bx	lr

080040fe <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80040fe:	b480      	push	{r7}
 8004100:	b085      	sub	sp, #20
 8004102:	af00      	add	r7, sp, #0
 8004104:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	68fa      	ldr	r2, [r7, #12]
 8004114:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004118:	f023 0303 	bic.w	r3, r3, #3
 800411c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004124:	685b      	ldr	r3, [r3, #4]
 8004126:	68fa      	ldr	r2, [r7, #12]
 8004128:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800412c:	f043 0302 	orr.w	r3, r3, #2
 8004130:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004132:	2300      	movs	r3, #0
}
 8004134:	4618      	mov	r0, r3
 8004136:	3714      	adds	r7, #20
 8004138:	46bd      	mov	sp, r7
 800413a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413e:	4770      	bx	lr

08004140 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8004140:	b480      	push	{r7}
 8004142:	b085      	sub	sp, #20
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	695b      	ldr	r3, [r3, #20]
 800414c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	699b      	ldr	r3, [r3, #24]
 8004152:	68fa      	ldr	r2, [r7, #12]
 8004154:	4013      	ands	r3, r2
 8004156:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004158:	68fb      	ldr	r3, [r7, #12]
}
 800415a:	4618      	mov	r0, r3
 800415c:	3714      	adds	r7, #20
 800415e:	46bd      	mov	sp, r7
 8004160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004164:	4770      	bx	lr

08004166 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004166:	b480      	push	{r7}
 8004168:	b085      	sub	sp, #20
 800416a:	af00      	add	r7, sp, #0
 800416c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004178:	699b      	ldr	r3, [r3, #24]
 800417a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004182:	69db      	ldr	r3, [r3, #28]
 8004184:	68ba      	ldr	r2, [r7, #8]
 8004186:	4013      	ands	r3, r2
 8004188:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800418a:	68bb      	ldr	r3, [r7, #8]
 800418c:	0c1b      	lsrs	r3, r3, #16
}
 800418e:	4618      	mov	r0, r3
 8004190:	3714      	adds	r7, #20
 8004192:	46bd      	mov	sp, r7
 8004194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004198:	4770      	bx	lr

0800419a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800419a:	b480      	push	{r7}
 800419c:	b085      	sub	sp, #20
 800419e:	af00      	add	r7, sp, #0
 80041a0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041ac:	699b      	ldr	r3, [r3, #24]
 80041ae:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041b6:	69db      	ldr	r3, [r3, #28]
 80041b8:	68ba      	ldr	r2, [r7, #8]
 80041ba:	4013      	ands	r3, r2
 80041bc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80041be:	68bb      	ldr	r3, [r7, #8]
 80041c0:	b29b      	uxth	r3, r3
}
 80041c2:	4618      	mov	r0, r3
 80041c4:	3714      	adds	r7, #20
 80041c6:	46bd      	mov	sp, r7
 80041c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041cc:	4770      	bx	lr

080041ce <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80041ce:	b480      	push	{r7}
 80041d0:	b085      	sub	sp, #20
 80041d2:	af00      	add	r7, sp, #0
 80041d4:	6078      	str	r0, [r7, #4]
 80041d6:	460b      	mov	r3, r1
 80041d8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80041de:	78fb      	ldrb	r3, [r7, #3]
 80041e0:	015a      	lsls	r2, r3, #5
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	4413      	add	r3, r2
 80041e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041ea:	689b      	ldr	r3, [r3, #8]
 80041ec:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041f4:	695b      	ldr	r3, [r3, #20]
 80041f6:	68ba      	ldr	r2, [r7, #8]
 80041f8:	4013      	ands	r3, r2
 80041fa:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80041fc:	68bb      	ldr	r3, [r7, #8]
}
 80041fe:	4618      	mov	r0, r3
 8004200:	3714      	adds	r7, #20
 8004202:	46bd      	mov	sp, r7
 8004204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004208:	4770      	bx	lr

0800420a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800420a:	b480      	push	{r7}
 800420c:	b087      	sub	sp, #28
 800420e:	af00      	add	r7, sp, #0
 8004210:	6078      	str	r0, [r7, #4]
 8004212:	460b      	mov	r3, r1
 8004214:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800421a:	697b      	ldr	r3, [r7, #20]
 800421c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004220:	691b      	ldr	r3, [r3, #16]
 8004222:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8004224:	697b      	ldr	r3, [r7, #20]
 8004226:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800422a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800422c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800422e:	78fb      	ldrb	r3, [r7, #3]
 8004230:	f003 030f 	and.w	r3, r3, #15
 8004234:	68fa      	ldr	r2, [r7, #12]
 8004236:	fa22 f303 	lsr.w	r3, r2, r3
 800423a:	01db      	lsls	r3, r3, #7
 800423c:	b2db      	uxtb	r3, r3
 800423e:	693a      	ldr	r2, [r7, #16]
 8004240:	4313      	orrs	r3, r2
 8004242:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8004244:	78fb      	ldrb	r3, [r7, #3]
 8004246:	015a      	lsls	r2, r3, #5
 8004248:	697b      	ldr	r3, [r7, #20]
 800424a:	4413      	add	r3, r2
 800424c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004250:	689b      	ldr	r3, [r3, #8]
 8004252:	693a      	ldr	r2, [r7, #16]
 8004254:	4013      	ands	r3, r2
 8004256:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004258:	68bb      	ldr	r3, [r7, #8]
}
 800425a:	4618      	mov	r0, r3
 800425c:	371c      	adds	r7, #28
 800425e:	46bd      	mov	sp, r7
 8004260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004264:	4770      	bx	lr

08004266 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004266:	b480      	push	{r7}
 8004268:	b083      	sub	sp, #12
 800426a:	af00      	add	r7, sp, #0
 800426c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	695b      	ldr	r3, [r3, #20]
 8004272:	f003 0301 	and.w	r3, r3, #1
}
 8004276:	4618      	mov	r0, r3
 8004278:	370c      	adds	r7, #12
 800427a:	46bd      	mov	sp, r7
 800427c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004280:	4770      	bx	lr

08004282 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8004282:	b480      	push	{r7}
 8004284:	b085      	sub	sp, #20
 8004286:	af00      	add	r7, sp, #0
 8004288:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	68fa      	ldr	r2, [r7, #12]
 8004298:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800429c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80042a0:	f023 0307 	bic.w	r3, r3, #7
 80042a4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042ac:	685b      	ldr	r3, [r3, #4]
 80042ae:	68fa      	ldr	r2, [r7, #12]
 80042b0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80042b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042b8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80042ba:	2300      	movs	r3, #0
}
 80042bc:	4618      	mov	r0, r3
 80042be:	3714      	adds	r7, #20
 80042c0:	46bd      	mov	sp, r7
 80042c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c6:	4770      	bx	lr

080042c8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80042c8:	b480      	push	{r7}
 80042ca:	b087      	sub	sp, #28
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	60f8      	str	r0, [r7, #12]
 80042d0:	460b      	mov	r3, r1
 80042d2:	607a      	str	r2, [r7, #4]
 80042d4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	333c      	adds	r3, #60	; 0x3c
 80042de:	3304      	adds	r3, #4
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80042e4:	693b      	ldr	r3, [r7, #16]
 80042e6:	4a26      	ldr	r2, [pc, #152]	; (8004380 <USB_EP0_OutStart+0xb8>)
 80042e8:	4293      	cmp	r3, r2
 80042ea:	d90a      	bls.n	8004302 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80042ec:	697b      	ldr	r3, [r7, #20]
 80042ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80042f8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80042fc:	d101      	bne.n	8004302 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80042fe:	2300      	movs	r3, #0
 8004300:	e037      	b.n	8004372 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8004302:	697b      	ldr	r3, [r7, #20]
 8004304:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004308:	461a      	mov	r2, r3
 800430a:	2300      	movs	r3, #0
 800430c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800430e:	697b      	ldr	r3, [r7, #20]
 8004310:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004314:	691b      	ldr	r3, [r3, #16]
 8004316:	697a      	ldr	r2, [r7, #20]
 8004318:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800431c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004320:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8004322:	697b      	ldr	r3, [r7, #20]
 8004324:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004328:	691b      	ldr	r3, [r3, #16]
 800432a:	697a      	ldr	r2, [r7, #20]
 800432c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004330:	f043 0318 	orr.w	r3, r3, #24
 8004334:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8004336:	697b      	ldr	r3, [r7, #20]
 8004338:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800433c:	691b      	ldr	r3, [r3, #16]
 800433e:	697a      	ldr	r2, [r7, #20]
 8004340:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004344:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8004348:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800434a:	7afb      	ldrb	r3, [r7, #11]
 800434c:	2b01      	cmp	r3, #1
 800434e:	d10f      	bne.n	8004370 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8004350:	697b      	ldr	r3, [r7, #20]
 8004352:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004356:	461a      	mov	r2, r3
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800435c:	697b      	ldr	r3, [r7, #20]
 800435e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	697a      	ldr	r2, [r7, #20]
 8004366:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800436a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800436e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004370:	2300      	movs	r3, #0
}
 8004372:	4618      	mov	r0, r3
 8004374:	371c      	adds	r7, #28
 8004376:	46bd      	mov	sp, r7
 8004378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437c:	4770      	bx	lr
 800437e:	bf00      	nop
 8004380:	4f54300a 	.word	0x4f54300a

08004384 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004384:	b480      	push	{r7}
 8004386:	b085      	sub	sp, #20
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800438c:	2300      	movs	r3, #0
 800438e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	3301      	adds	r3, #1
 8004394:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	4a13      	ldr	r2, [pc, #76]	; (80043e8 <USB_CoreReset+0x64>)
 800439a:	4293      	cmp	r3, r2
 800439c:	d901      	bls.n	80043a2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800439e:	2303      	movs	r3, #3
 80043a0:	e01b      	b.n	80043da <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	691b      	ldr	r3, [r3, #16]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	daf2      	bge.n	8004390 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80043aa:	2300      	movs	r3, #0
 80043ac:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	691b      	ldr	r3, [r3, #16]
 80043b2:	f043 0201 	orr.w	r2, r3, #1
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	3301      	adds	r3, #1
 80043be:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	4a09      	ldr	r2, [pc, #36]	; (80043e8 <USB_CoreReset+0x64>)
 80043c4:	4293      	cmp	r3, r2
 80043c6:	d901      	bls.n	80043cc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80043c8:	2303      	movs	r3, #3
 80043ca:	e006      	b.n	80043da <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	691b      	ldr	r3, [r3, #16]
 80043d0:	f003 0301 	and.w	r3, r3, #1
 80043d4:	2b01      	cmp	r3, #1
 80043d6:	d0f0      	beq.n	80043ba <USB_CoreReset+0x36>

  return HAL_OK;
 80043d8:	2300      	movs	r3, #0
}
 80043da:	4618      	mov	r0, r3
 80043dc:	3714      	adds	r7, #20
 80043de:	46bd      	mov	sp, r7
 80043e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e4:	4770      	bx	lr
 80043e6:	bf00      	nop
 80043e8:	00030d40 	.word	0x00030d40

080043ec <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b084      	sub	sp, #16
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
 80043f4:	460b      	mov	r3, r1
 80043f6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_HID_HandleTypeDef *hhid;

  hhid = (USBD_HID_HandleTypeDef *)USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 80043f8:	2010      	movs	r0, #16
 80043fa:	f002 f91b 	bl	8006634 <USBD_static_malloc>
 80043fe:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	2b00      	cmp	r3, #0
 8004404:	d109      	bne.n	800441a <USBD_HID_Init+0x2e>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	32b0      	adds	r2, #176	; 0xb0
 8004410:	2100      	movs	r1, #0
 8004412:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8004416:	2302      	movs	r3, #2
 8004418:	e048      	b.n	80044ac <USBD_HID_Init+0xc0>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hhid;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	32b0      	adds	r2, #176	; 0xb0
 8004424:	68f9      	ldr	r1, [r7, #12]
 8004426:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	32b0      	adds	r2, #176	; 0xb0
 8004434:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	7c1b      	ldrb	r3, [r3, #16]
 8004442:	2b00      	cmp	r3, #0
 8004444:	d10d      	bne.n	8004462 <USBD_HID_Init+0x76>
  {
    pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = HID_HS_BINTERVAL;
 8004446:	4b1b      	ldr	r3, [pc, #108]	; (80044b4 <USBD_HID_Init+0xc8>)
 8004448:	781b      	ldrb	r3, [r3, #0]
 800444a:	f003 020f 	and.w	r2, r3, #15
 800444e:	6879      	ldr	r1, [r7, #4]
 8004450:	4613      	mov	r3, r2
 8004452:	009b      	lsls	r3, r3, #2
 8004454:	4413      	add	r3, r2
 8004456:	009b      	lsls	r3, r3, #2
 8004458:	440b      	add	r3, r1
 800445a:	3326      	adds	r3, #38	; 0x26
 800445c:	2207      	movs	r2, #7
 800445e:	801a      	strh	r2, [r3, #0]
 8004460:	e00c      	b.n	800447c <USBD_HID_Init+0x90>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = HID_FS_BINTERVAL;
 8004462:	4b14      	ldr	r3, [pc, #80]	; (80044b4 <USBD_HID_Init+0xc8>)
 8004464:	781b      	ldrb	r3, [r3, #0]
 8004466:	f003 020f 	and.w	r2, r3, #15
 800446a:	6879      	ldr	r1, [r7, #4]
 800446c:	4613      	mov	r3, r2
 800446e:	009b      	lsls	r3, r3, #2
 8004470:	4413      	add	r3, r2
 8004472:	009b      	lsls	r3, r3, #2
 8004474:	440b      	add	r3, r1
 8004476:	3326      	adds	r3, #38	; 0x26
 8004478:	220a      	movs	r2, #10
 800447a:	801a      	strh	r2, [r3, #0]
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, HIDInEpAdd, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 800447c:	4b0d      	ldr	r3, [pc, #52]	; (80044b4 <USBD_HID_Init+0xc8>)
 800447e:	7819      	ldrb	r1, [r3, #0]
 8004480:	2304      	movs	r3, #4
 8004482:	2203      	movs	r2, #3
 8004484:	6878      	ldr	r0, [r7, #4]
 8004486:	f001 ffc4 	bl	8006412 <USBD_LL_OpenEP>
  pdev->ep_in[HIDInEpAdd & 0xFU].is_used = 1U;
 800448a:	4b0a      	ldr	r3, [pc, #40]	; (80044b4 <USBD_HID_Init+0xc8>)
 800448c:	781b      	ldrb	r3, [r3, #0]
 800448e:	f003 020f 	and.w	r2, r3, #15
 8004492:	6879      	ldr	r1, [r7, #4]
 8004494:	4613      	mov	r3, r2
 8004496:	009b      	lsls	r3, r3, #2
 8004498:	4413      	add	r3, r2
 800449a:	009b      	lsls	r3, r3, #2
 800449c:	440b      	add	r3, r1
 800449e:	3324      	adds	r3, #36	; 0x24
 80044a0:	2201      	movs	r2, #1
 80044a2:	801a      	strh	r2, [r3, #0]

  hhid->state = HID_IDLE;
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	2200      	movs	r2, #0
 80044a8:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 80044aa:	2300      	movs	r3, #0
}
 80044ac:	4618      	mov	r0, r3
 80044ae:	3710      	adds	r7, #16
 80044b0:	46bd      	mov	sp, r7
 80044b2:	bd80      	pop	{r7, pc}
 80044b4:	200000ca 	.word	0x200000ca

080044b8 <USBD_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	b082      	sub	sp, #8
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
 80044c0:	460b      	mov	r3, r1
 80044c2:	70fb      	strb	r3, [r7, #3]
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close HID EPs */
  (void)USBD_LL_CloseEP(pdev, HIDInEpAdd);
 80044c4:	4b1f      	ldr	r3, [pc, #124]	; (8004544 <USBD_HID_DeInit+0x8c>)
 80044c6:	781b      	ldrb	r3, [r3, #0]
 80044c8:	4619      	mov	r1, r3
 80044ca:	6878      	ldr	r0, [r7, #4]
 80044cc:	f001 ffc7 	bl	800645e <USBD_LL_CloseEP>
  pdev->ep_in[HIDInEpAdd & 0xFU].is_used = 0U;
 80044d0:	4b1c      	ldr	r3, [pc, #112]	; (8004544 <USBD_HID_DeInit+0x8c>)
 80044d2:	781b      	ldrb	r3, [r3, #0]
 80044d4:	f003 020f 	and.w	r2, r3, #15
 80044d8:	6879      	ldr	r1, [r7, #4]
 80044da:	4613      	mov	r3, r2
 80044dc:	009b      	lsls	r3, r3, #2
 80044de:	4413      	add	r3, r2
 80044e0:	009b      	lsls	r3, r3, #2
 80044e2:	440b      	add	r3, r1
 80044e4:	3324      	adds	r3, #36	; 0x24
 80044e6:	2200      	movs	r2, #0
 80044e8:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = 0U;
 80044ea:	4b16      	ldr	r3, [pc, #88]	; (8004544 <USBD_HID_DeInit+0x8c>)
 80044ec:	781b      	ldrb	r3, [r3, #0]
 80044ee:	f003 020f 	and.w	r2, r3, #15
 80044f2:	6879      	ldr	r1, [r7, #4]
 80044f4:	4613      	mov	r3, r2
 80044f6:	009b      	lsls	r3, r3, #2
 80044f8:	4413      	add	r3, r2
 80044fa:	009b      	lsls	r3, r3, #2
 80044fc:	440b      	add	r3, r1
 80044fe:	3326      	adds	r3, #38	; 0x26
 8004500:	2200      	movs	r2, #0
 8004502:	801a      	strh	r2, [r3, #0]

  /* Free allocated memory */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	32b0      	adds	r2, #176	; 0xb0
 800450e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004512:	2b00      	cmp	r3, #0
 8004514:	d011      	beq.n	800453a <USBD_HID_DeInit+0x82>
  {
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	32b0      	adds	r2, #176	; 0xb0
 8004520:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004524:	4618      	mov	r0, r3
 8004526:	f002 f893 	bl	8006650 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	32b0      	adds	r2, #176	; 0xb0
 8004534:	2100      	movs	r1, #0
 8004536:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return (uint8_t)USBD_OK;
 800453a:	2300      	movs	r3, #0
}
 800453c:	4618      	mov	r0, r3
 800453e:	3708      	adds	r7, #8
 8004540:	46bd      	mov	sp, r7
 8004542:	bd80      	pop	{r7, pc}
 8004544:	200000ca 	.word	0x200000ca

08004548 <USBD_HID_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_HID_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8004548:	b580      	push	{r7, lr}
 800454a:	b086      	sub	sp, #24
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
 8004550:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	32b0      	adds	r2, #176	; 0xb0
 800455c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004560:	60fb      	str	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 8004562:	2300      	movs	r3, #0
 8004564:	75fb      	strb	r3, [r7, #23]
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 8004566:	2300      	movs	r3, #0
 8004568:	817b      	strh	r3, [r7, #10]

  if (hhid == NULL)
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	2b00      	cmp	r3, #0
 800456e:	d101      	bne.n	8004574 <USBD_HID_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 8004570:	2303      	movs	r3, #3
 8004572:	e0e8      	b.n	8004746 <USBD_HID_Setup+0x1fe>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004574:	683b      	ldr	r3, [r7, #0]
 8004576:	781b      	ldrb	r3, [r3, #0]
 8004578:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800457c:	2b00      	cmp	r3, #0
 800457e:	d046      	beq.n	800460e <USBD_HID_Setup+0xc6>
 8004580:	2b20      	cmp	r3, #32
 8004582:	f040 80d8 	bne.w	8004736 <USBD_HID_Setup+0x1ee>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 8004586:	683b      	ldr	r3, [r7, #0]
 8004588:	785b      	ldrb	r3, [r3, #1]
 800458a:	3b02      	subs	r3, #2
 800458c:	2b09      	cmp	r3, #9
 800458e:	d836      	bhi.n	80045fe <USBD_HID_Setup+0xb6>
 8004590:	a201      	add	r2, pc, #4	; (adr r2, 8004598 <USBD_HID_Setup+0x50>)
 8004592:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004596:	bf00      	nop
 8004598:	080045ef 	.word	0x080045ef
 800459c:	080045cf 	.word	0x080045cf
 80045a0:	080045ff 	.word	0x080045ff
 80045a4:	080045ff 	.word	0x080045ff
 80045a8:	080045ff 	.word	0x080045ff
 80045ac:	080045ff 	.word	0x080045ff
 80045b0:	080045ff 	.word	0x080045ff
 80045b4:	080045ff 	.word	0x080045ff
 80045b8:	080045dd 	.word	0x080045dd
 80045bc:	080045c1 	.word	0x080045c1
      {
        case HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	885b      	ldrh	r3, [r3, #2]
 80045c4:	b2db      	uxtb	r3, r3
 80045c6:	461a      	mov	r2, r3
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	601a      	str	r2, [r3, #0]
          break;
 80045cc:	e01e      	b.n	800460c <USBD_HID_Setup+0xc4>

        case HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	2201      	movs	r2, #1
 80045d2:	4619      	mov	r1, r3
 80045d4:	6878      	ldr	r0, [r7, #4]
 80045d6:	f001 fbd5 	bl	8005d84 <USBD_CtlSendData>
          break;
 80045da:	e017      	b.n	800460c <USBD_HID_Setup+0xc4>

        case HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	885b      	ldrh	r3, [r3, #2]
 80045e0:	0a1b      	lsrs	r3, r3, #8
 80045e2:	b29b      	uxth	r3, r3
 80045e4:	b2db      	uxtb	r3, r3
 80045e6:	461a      	mov	r2, r3
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	605a      	str	r2, [r3, #4]
          break;
 80045ec:	e00e      	b.n	800460c <USBD_HID_Setup+0xc4>

        case HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	3304      	adds	r3, #4
 80045f2:	2201      	movs	r2, #1
 80045f4:	4619      	mov	r1, r3
 80045f6:	6878      	ldr	r0, [r7, #4]
 80045f8:	f001 fbc4 	bl	8005d84 <USBD_CtlSendData>
          break;
 80045fc:	e006      	b.n	800460c <USBD_HID_Setup+0xc4>

        default:
          USBD_CtlError(pdev, req);
 80045fe:	6839      	ldr	r1, [r7, #0]
 8004600:	6878      	ldr	r0, [r7, #4]
 8004602:	f001 fb4e 	bl	8005ca2 <USBD_CtlError>
          ret = USBD_FAIL;
 8004606:	2303      	movs	r3, #3
 8004608:	75fb      	strb	r3, [r7, #23]
          break;
 800460a:	bf00      	nop
      }
      break;
 800460c:	e09a      	b.n	8004744 <USBD_HID_Setup+0x1fc>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	785b      	ldrb	r3, [r3, #1]
 8004612:	2b0b      	cmp	r3, #11
 8004614:	f200 8086 	bhi.w	8004724 <USBD_HID_Setup+0x1dc>
 8004618:	a201      	add	r2, pc, #4	; (adr r2, 8004620 <USBD_HID_Setup+0xd8>)
 800461a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800461e:	bf00      	nop
 8004620:	08004651 	.word	0x08004651
 8004624:	08004733 	.word	0x08004733
 8004628:	08004725 	.word	0x08004725
 800462c:	08004725 	.word	0x08004725
 8004630:	08004725 	.word	0x08004725
 8004634:	08004725 	.word	0x08004725
 8004638:	0800467b 	.word	0x0800467b
 800463c:	08004725 	.word	0x08004725
 8004640:	08004725 	.word	0x08004725
 8004644:	08004725 	.word	0x08004725
 8004648:	080046d3 	.word	0x080046d3
 800464c:	080046fd 	.word	0x080046fd
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004656:	b2db      	uxtb	r3, r3
 8004658:	2b03      	cmp	r3, #3
 800465a:	d107      	bne.n	800466c <USBD_HID_Setup+0x124>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800465c:	f107 030a 	add.w	r3, r7, #10
 8004660:	2202      	movs	r2, #2
 8004662:	4619      	mov	r1, r3
 8004664:	6878      	ldr	r0, [r7, #4]
 8004666:	f001 fb8d 	bl	8005d84 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800466a:	e063      	b.n	8004734 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 800466c:	6839      	ldr	r1, [r7, #0]
 800466e:	6878      	ldr	r0, [r7, #4]
 8004670:	f001 fb17 	bl	8005ca2 <USBD_CtlError>
            ret = USBD_FAIL;
 8004674:	2303      	movs	r3, #3
 8004676:	75fb      	strb	r3, [r7, #23]
          break;
 8004678:	e05c      	b.n	8004734 <USBD_HID_Setup+0x1ec>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == HID_REPORT_DESC)
 800467a:	683b      	ldr	r3, [r7, #0]
 800467c:	885b      	ldrh	r3, [r3, #2]
 800467e:	0a1b      	lsrs	r3, r3, #8
 8004680:	b29b      	uxth	r3, r3
 8004682:	2b22      	cmp	r3, #34	; 0x22
 8004684:	d108      	bne.n	8004698 <USBD_HID_Setup+0x150>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 8004686:	683b      	ldr	r3, [r7, #0]
 8004688:	88db      	ldrh	r3, [r3, #6]
 800468a:	2b4a      	cmp	r3, #74	; 0x4a
 800468c:	bf28      	it	cs
 800468e:	234a      	movcs	r3, #74	; 0x4a
 8004690:	82bb      	strh	r3, [r7, #20]
            pbuf = HID_MOUSE_ReportDesc;
 8004692:	4b2f      	ldr	r3, [pc, #188]	; (8004750 <USBD_HID_Setup+0x208>)
 8004694:	613b      	str	r3, [r7, #16]
 8004696:	e015      	b.n	80046c4 <USBD_HID_Setup+0x17c>
          }
          else if ((req->wValue >> 8) == HID_DESCRIPTOR_TYPE)
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	885b      	ldrh	r3, [r3, #2]
 800469c:	0a1b      	lsrs	r3, r3, #8
 800469e:	b29b      	uxth	r3, r3
 80046a0:	2b21      	cmp	r3, #33	; 0x21
 80046a2:	d108      	bne.n	80046b6 <USBD_HID_Setup+0x16e>
          {
            pbuf = USBD_HID_Desc;
 80046a4:	4b2b      	ldr	r3, [pc, #172]	; (8004754 <USBD_HID_Setup+0x20c>)
 80046a6:	613b      	str	r3, [r7, #16]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 80046a8:	683b      	ldr	r3, [r7, #0]
 80046aa:	88db      	ldrh	r3, [r3, #6]
 80046ac:	2b09      	cmp	r3, #9
 80046ae:	bf28      	it	cs
 80046b0:	2309      	movcs	r3, #9
 80046b2:	82bb      	strh	r3, [r7, #20]
 80046b4:	e006      	b.n	80046c4 <USBD_HID_Setup+0x17c>
          }
          else
          {
            USBD_CtlError(pdev, req);
 80046b6:	6839      	ldr	r1, [r7, #0]
 80046b8:	6878      	ldr	r0, [r7, #4]
 80046ba:	f001 faf2 	bl	8005ca2 <USBD_CtlError>
            ret = USBD_FAIL;
 80046be:	2303      	movs	r3, #3
 80046c0:	75fb      	strb	r3, [r7, #23]
            break;
 80046c2:	e037      	b.n	8004734 <USBD_HID_Setup+0x1ec>
          }
          (void)USBD_CtlSendData(pdev, pbuf, len);
 80046c4:	8abb      	ldrh	r3, [r7, #20]
 80046c6:	461a      	mov	r2, r3
 80046c8:	6939      	ldr	r1, [r7, #16]
 80046ca:	6878      	ldr	r0, [r7, #4]
 80046cc:	f001 fb5a 	bl	8005d84 <USBD_CtlSendData>
          break;
 80046d0:	e030      	b.n	8004734 <USBD_HID_Setup+0x1ec>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80046d8:	b2db      	uxtb	r3, r3
 80046da:	2b03      	cmp	r3, #3
 80046dc:	d107      	bne.n	80046ee <USBD_HID_Setup+0x1a6>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	3308      	adds	r3, #8
 80046e2:	2201      	movs	r2, #1
 80046e4:	4619      	mov	r1, r3
 80046e6:	6878      	ldr	r0, [r7, #4]
 80046e8:	f001 fb4c 	bl	8005d84 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80046ec:	e022      	b.n	8004734 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 80046ee:	6839      	ldr	r1, [r7, #0]
 80046f0:	6878      	ldr	r0, [r7, #4]
 80046f2:	f001 fad6 	bl	8005ca2 <USBD_CtlError>
            ret = USBD_FAIL;
 80046f6:	2303      	movs	r3, #3
 80046f8:	75fb      	strb	r3, [r7, #23]
          break;
 80046fa:	e01b      	b.n	8004734 <USBD_HID_Setup+0x1ec>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004702:	b2db      	uxtb	r3, r3
 8004704:	2b03      	cmp	r3, #3
 8004706:	d106      	bne.n	8004716 <USBD_HID_Setup+0x1ce>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	885b      	ldrh	r3, [r3, #2]
 800470c:	b2db      	uxtb	r3, r3
 800470e:	461a      	mov	r2, r3
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004714:	e00e      	b.n	8004734 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 8004716:	6839      	ldr	r1, [r7, #0]
 8004718:	6878      	ldr	r0, [r7, #4]
 800471a:	f001 fac2 	bl	8005ca2 <USBD_CtlError>
            ret = USBD_FAIL;
 800471e:	2303      	movs	r3, #3
 8004720:	75fb      	strb	r3, [r7, #23]
          break;
 8004722:	e007      	b.n	8004734 <USBD_HID_Setup+0x1ec>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8004724:	6839      	ldr	r1, [r7, #0]
 8004726:	6878      	ldr	r0, [r7, #4]
 8004728:	f001 fabb 	bl	8005ca2 <USBD_CtlError>
          ret = USBD_FAIL;
 800472c:	2303      	movs	r3, #3
 800472e:	75fb      	strb	r3, [r7, #23]
          break;
 8004730:	e000      	b.n	8004734 <USBD_HID_Setup+0x1ec>
          break;
 8004732:	bf00      	nop
      }
      break;
 8004734:	e006      	b.n	8004744 <USBD_HID_Setup+0x1fc>

    default:
      USBD_CtlError(pdev, req);
 8004736:	6839      	ldr	r1, [r7, #0]
 8004738:	6878      	ldr	r0, [r7, #4]
 800473a:	f001 fab2 	bl	8005ca2 <USBD_CtlError>
      ret = USBD_FAIL;
 800473e:	2303      	movs	r3, #3
 8004740:	75fb      	strb	r3, [r7, #23]
      break;
 8004742:	bf00      	nop
  }

  return (uint8_t)ret;
 8004744:	7dfb      	ldrb	r3, [r7, #23]
}
 8004746:	4618      	mov	r0, r3
 8004748:	3718      	adds	r7, #24
 800474a:	46bd      	mov	sp, r7
 800474c:	bd80      	pop	{r7, pc}
 800474e:	bf00      	nop
 8004750:	20000080 	.word	0x20000080
 8004754:	20000068 	.word	0x20000068

08004758 <USBD_HID_SendReport>:
  * @param  pdev: device instance
  * @param  buff: pointer to report
  * @retval status
  */
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef *pdev, uint8_t *report, uint16_t len)
{
 8004758:	b580      	push	{r7, lr}
 800475a:	b086      	sub	sp, #24
 800475c:	af00      	add	r7, sp, #0
 800475e:	60f8      	str	r0, [r7, #12]
 8004760:	60b9      	str	r1, [r7, #8]
 8004762:	4613      	mov	r3, r2
 8004764:	80fb      	strh	r3, [r7, #6]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	32b0      	adds	r2, #176	; 0xb0
 8004770:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004774:	617b      	str	r3, [r7, #20]

  if (hhid == NULL)
 8004776:	697b      	ldr	r3, [r7, #20]
 8004778:	2b00      	cmp	r3, #0
 800477a:	d101      	bne.n	8004780 <USBD_HID_SendReport+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800477c:	2303      	movs	r3, #3
 800477e:	e014      	b.n	80047aa <USBD_HID_SendReport+0x52>
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004786:	b2db      	uxtb	r3, r3
 8004788:	2b03      	cmp	r3, #3
 800478a:	d10d      	bne.n	80047a8 <USBD_HID_SendReport+0x50>
  {
    if (hhid->state == HID_IDLE)
 800478c:	697b      	ldr	r3, [r7, #20]
 800478e:	7b1b      	ldrb	r3, [r3, #12]
 8004790:	2b00      	cmp	r3, #0
 8004792:	d109      	bne.n	80047a8 <USBD_HID_SendReport+0x50>
    {
      hhid->state = HID_BUSY;
 8004794:	697b      	ldr	r3, [r7, #20]
 8004796:	2201      	movs	r2, #1
 8004798:	731a      	strb	r2, [r3, #12]
      (void)USBD_LL_Transmit(pdev, HIDInEpAdd, report, len);
 800479a:	4b06      	ldr	r3, [pc, #24]	; (80047b4 <USBD_HID_SendReport+0x5c>)
 800479c:	7819      	ldrb	r1, [r3, #0]
 800479e:	88fb      	ldrh	r3, [r7, #6]
 80047a0:	68ba      	ldr	r2, [r7, #8]
 80047a2:	68f8      	ldr	r0, [r7, #12]
 80047a4:	f001 ff03 	bl	80065ae <USBD_LL_Transmit>
    }
  }

  return (uint8_t)USBD_OK;
 80047a8:	2300      	movs	r3, #0
}
 80047aa:	4618      	mov	r0, r3
 80047ac:	3718      	adds	r7, #24
 80047ae:	46bd      	mov	sp, r7
 80047b0:	bd80      	pop	{r7, pc}
 80047b2:	bf00      	nop
 80047b4:	200000ca 	.word	0x200000ca

080047b8 <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 80047b8:	b580      	push	{r7, lr}
 80047ba:	b084      	sub	sp, #16
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 80047c0:	2181      	movs	r1, #129	; 0x81
 80047c2:	4809      	ldr	r0, [pc, #36]	; (80047e8 <USBD_HID_GetFSCfgDesc+0x30>)
 80047c4:	f000 fc35 	bl	8005032 <USBD_GetEpDesc>
 80047c8:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d002      	beq.n	80047d6 <USBD_HID_GetFSCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_FS_BINTERVAL;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	220a      	movs	r2, #10
 80047d4:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	2222      	movs	r2, #34	; 0x22
 80047da:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 80047dc:	4b02      	ldr	r3, [pc, #8]	; (80047e8 <USBD_HID_GetFSCfgDesc+0x30>)
}
 80047de:	4618      	mov	r0, r3
 80047e0:	3710      	adds	r7, #16
 80047e2:	46bd      	mov	sp, r7
 80047e4:	bd80      	pop	{r7, pc}
 80047e6:	bf00      	nop
 80047e8:	20000044 	.word	0x20000044

080047ec <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 80047ec:	b580      	push	{r7, lr}
 80047ee:	b084      	sub	sp, #16
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 80047f4:	2181      	movs	r1, #129	; 0x81
 80047f6:	4809      	ldr	r0, [pc, #36]	; (800481c <USBD_HID_GetHSCfgDesc+0x30>)
 80047f8:	f000 fc1b 	bl	8005032 <USBD_GetEpDesc>
 80047fc:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	2b00      	cmp	r3, #0
 8004802:	d002      	beq.n	800480a <USBD_HID_GetHSCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_HS_BINTERVAL;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	2207      	movs	r2, #7
 8004808:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	2222      	movs	r2, #34	; 0x22
 800480e:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 8004810:	4b02      	ldr	r3, [pc, #8]	; (800481c <USBD_HID_GetHSCfgDesc+0x30>)
}
 8004812:	4618      	mov	r0, r3
 8004814:	3710      	adds	r7, #16
 8004816:	46bd      	mov	sp, r7
 8004818:	bd80      	pop	{r7, pc}
 800481a:	bf00      	nop
 800481c:	20000044 	.word	0x20000044

08004820 <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8004820:	b580      	push	{r7, lr}
 8004822:	b084      	sub	sp, #16
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 8004828:	2181      	movs	r1, #129	; 0x81
 800482a:	4809      	ldr	r0, [pc, #36]	; (8004850 <USBD_HID_GetOtherSpeedCfgDesc+0x30>)
 800482c:	f000 fc01 	bl	8005032 <USBD_GetEpDesc>
 8004830:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	2b00      	cmp	r3, #0
 8004836:	d002      	beq.n	800483e <USBD_HID_GetOtherSpeedCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_FS_BINTERVAL;
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	220a      	movs	r2, #10
 800483c:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	2222      	movs	r2, #34	; 0x22
 8004842:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 8004844:	4b02      	ldr	r3, [pc, #8]	; (8004850 <USBD_HID_GetOtherSpeedCfgDesc+0x30>)
}
 8004846:	4618      	mov	r0, r3
 8004848:	3710      	adds	r7, #16
 800484a:	46bd      	mov	sp, r7
 800484c:	bd80      	pop	{r7, pc}
 800484e:	bf00      	nop
 8004850:	20000044 	.word	0x20000044

08004854 <USBD_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004854:	b480      	push	{r7}
 8004856:	b083      	sub	sp, #12
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
 800485c:	460b      	mov	r3, r1
 800485e:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId])->state = HID_IDLE;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	32b0      	adds	r2, #176	; 0xb0
 800486a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800486e:	2200      	movs	r2, #0
 8004870:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 8004872:	2300      	movs	r3, #0
}
 8004874:	4618      	mov	r0, r3
 8004876:	370c      	adds	r7, #12
 8004878:	46bd      	mov	sp, r7
 800487a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487e:	4770      	bx	lr

08004880 <USBD_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8004880:	b480      	push	{r7}
 8004882:	b083      	sub	sp, #12
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_DeviceQualifierDesc);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	220a      	movs	r2, #10
 800488c:	801a      	strh	r2, [r3, #0]

  return USBD_HID_DeviceQualifierDesc;
 800488e:	4b03      	ldr	r3, [pc, #12]	; (800489c <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 8004890:	4618      	mov	r0, r3
 8004892:	370c      	adds	r7, #12
 8004894:	46bd      	mov	sp, r7
 8004896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489a:	4770      	bx	lr
 800489c:	20000074 	.word	0x20000074

080048a0 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80048a0:	b580      	push	{r7, lr}
 80048a2:	b086      	sub	sp, #24
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	60f8      	str	r0, [r7, #12]
 80048a8:	60b9      	str	r1, [r7, #8]
 80048aa:	4613      	mov	r3, r2
 80048ac:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d101      	bne.n	80048b8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80048b4:	2303      	movs	r3, #3
 80048b6:	e01f      	b.n	80048f8 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	2200      	movs	r2, #0
 80048bc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	2200      	movs	r2, #0
 80048c4:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	2200      	movs	r2, #0
 80048cc:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80048d0:	68bb      	ldr	r3, [r7, #8]
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d003      	beq.n	80048de <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	68ba      	ldr	r2, [r7, #8]
 80048da:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	2201      	movs	r2, #1
 80048e2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	79fa      	ldrb	r2, [r7, #7]
 80048ea:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80048ec:	68f8      	ldr	r0, [r7, #12]
 80048ee:	f001 fd29 	bl	8006344 <USBD_LL_Init>
 80048f2:	4603      	mov	r3, r0
 80048f4:	75fb      	strb	r3, [r7, #23]

  return ret;
 80048f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80048f8:	4618      	mov	r0, r3
 80048fa:	3718      	adds	r7, #24
 80048fc:	46bd      	mov	sp, r7
 80048fe:	bd80      	pop	{r7, pc}

08004900 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8004900:	b580      	push	{r7, lr}
 8004902:	b084      	sub	sp, #16
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]
 8004908:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800490a:	2300      	movs	r3, #0
 800490c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800490e:	683b      	ldr	r3, [r7, #0]
 8004910:	2b00      	cmp	r3, #0
 8004912:	d101      	bne.n	8004918 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8004914:	2303      	movs	r3, #3
 8004916:	e025      	b.n	8004964 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	683a      	ldr	r2, [r7, #0]
 800491c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	32ae      	adds	r2, #174	; 0xae
 800492a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800492e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004930:	2b00      	cmp	r3, #0
 8004932:	d00f      	beq.n	8004954 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	32ae      	adds	r2, #174	; 0xae
 800493e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004942:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004944:	f107 020e 	add.w	r2, r7, #14
 8004948:	4610      	mov	r0, r2
 800494a:	4798      	blx	r3
 800494c:	4602      	mov	r2, r0
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800495a:	1c5a      	adds	r2, r3, #1
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8004962:	2300      	movs	r3, #0
}
 8004964:	4618      	mov	r0, r3
 8004966:	3710      	adds	r7, #16
 8004968:	46bd      	mov	sp, r7
 800496a:	bd80      	pop	{r7, pc}

0800496c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800496c:	b580      	push	{r7, lr}
 800496e:	b082      	sub	sp, #8
 8004970:	af00      	add	r7, sp, #0
 8004972:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8004974:	6878      	ldr	r0, [r7, #4]
 8004976:	f001 fd31 	bl	80063dc <USBD_LL_Start>
 800497a:	4603      	mov	r3, r0
}
 800497c:	4618      	mov	r0, r3
 800497e:	3708      	adds	r7, #8
 8004980:	46bd      	mov	sp, r7
 8004982:	bd80      	pop	{r7, pc}

08004984 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8004984:	b480      	push	{r7}
 8004986:	b083      	sub	sp, #12
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800498c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800498e:	4618      	mov	r0, r3
 8004990:	370c      	adds	r7, #12
 8004992:	46bd      	mov	sp, r7
 8004994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004998:	4770      	bx	lr

0800499a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800499a:	b580      	push	{r7, lr}
 800499c:	b084      	sub	sp, #16
 800499e:	af00      	add	r7, sp, #0
 80049a0:	6078      	str	r0, [r7, #4]
 80049a2:	460b      	mov	r3, r1
 80049a4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80049a6:	2300      	movs	r3, #0
 80049a8:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d009      	beq.n	80049c8 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	78fa      	ldrb	r2, [r7, #3]
 80049be:	4611      	mov	r1, r2
 80049c0:	6878      	ldr	r0, [r7, #4]
 80049c2:	4798      	blx	r3
 80049c4:	4603      	mov	r3, r0
 80049c6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80049c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80049ca:	4618      	mov	r0, r3
 80049cc:	3710      	adds	r7, #16
 80049ce:	46bd      	mov	sp, r7
 80049d0:	bd80      	pop	{r7, pc}

080049d2 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80049d2:	b580      	push	{r7, lr}
 80049d4:	b084      	sub	sp, #16
 80049d6:	af00      	add	r7, sp, #0
 80049d8:	6078      	str	r0, [r7, #4]
 80049da:	460b      	mov	r3, r1
 80049dc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80049de:	2300      	movs	r3, #0
 80049e0:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80049e8:	685b      	ldr	r3, [r3, #4]
 80049ea:	78fa      	ldrb	r2, [r7, #3]
 80049ec:	4611      	mov	r1, r2
 80049ee:	6878      	ldr	r0, [r7, #4]
 80049f0:	4798      	blx	r3
 80049f2:	4603      	mov	r3, r0
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d001      	beq.n	80049fc <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80049f8:	2303      	movs	r3, #3
 80049fa:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80049fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80049fe:	4618      	mov	r0, r3
 8004a00:	3710      	adds	r7, #16
 8004a02:	46bd      	mov	sp, r7
 8004a04:	bd80      	pop	{r7, pc}

08004a06 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8004a06:	b580      	push	{r7, lr}
 8004a08:	b084      	sub	sp, #16
 8004a0a:	af00      	add	r7, sp, #0
 8004a0c:	6078      	str	r0, [r7, #4]
 8004a0e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8004a16:	6839      	ldr	r1, [r7, #0]
 8004a18:	4618      	mov	r0, r3
 8004a1a:	f001 f908 	bl	8005c2e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	2201      	movs	r2, #1
 8004a22:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8004a2c:	461a      	mov	r2, r3
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8004a3a:	f003 031f 	and.w	r3, r3, #31
 8004a3e:	2b02      	cmp	r3, #2
 8004a40:	d01a      	beq.n	8004a78 <USBD_LL_SetupStage+0x72>
 8004a42:	2b02      	cmp	r3, #2
 8004a44:	d822      	bhi.n	8004a8c <USBD_LL_SetupStage+0x86>
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d002      	beq.n	8004a50 <USBD_LL_SetupStage+0x4a>
 8004a4a:	2b01      	cmp	r3, #1
 8004a4c:	d00a      	beq.n	8004a64 <USBD_LL_SetupStage+0x5e>
 8004a4e:	e01d      	b.n	8004a8c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8004a56:	4619      	mov	r1, r3
 8004a58:	6878      	ldr	r0, [r7, #4]
 8004a5a:	f000 fb5f 	bl	800511c <USBD_StdDevReq>
 8004a5e:	4603      	mov	r3, r0
 8004a60:	73fb      	strb	r3, [r7, #15]
      break;
 8004a62:	e020      	b.n	8004aa6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8004a6a:	4619      	mov	r1, r3
 8004a6c:	6878      	ldr	r0, [r7, #4]
 8004a6e:	f000 fbc7 	bl	8005200 <USBD_StdItfReq>
 8004a72:	4603      	mov	r3, r0
 8004a74:	73fb      	strb	r3, [r7, #15]
      break;
 8004a76:	e016      	b.n	8004aa6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8004a7e:	4619      	mov	r1, r3
 8004a80:	6878      	ldr	r0, [r7, #4]
 8004a82:	f000 fc29 	bl	80052d8 <USBD_StdEPReq>
 8004a86:	4603      	mov	r3, r0
 8004a88:	73fb      	strb	r3, [r7, #15]
      break;
 8004a8a:	e00c      	b.n	8004aa6 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8004a92:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004a96:	b2db      	uxtb	r3, r3
 8004a98:	4619      	mov	r1, r3
 8004a9a:	6878      	ldr	r0, [r7, #4]
 8004a9c:	f001 fcfe 	bl	800649c <USBD_LL_StallEP>
 8004aa0:	4603      	mov	r3, r0
 8004aa2:	73fb      	strb	r3, [r7, #15]
      break;
 8004aa4:	bf00      	nop
  }

  return ret;
 8004aa6:	7bfb      	ldrb	r3, [r7, #15]
}
 8004aa8:	4618      	mov	r0, r3
 8004aaa:	3710      	adds	r7, #16
 8004aac:	46bd      	mov	sp, r7
 8004aae:	bd80      	pop	{r7, pc}

08004ab0 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	b086      	sub	sp, #24
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	60f8      	str	r0, [r7, #12]
 8004ab8:	460b      	mov	r3, r1
 8004aba:	607a      	str	r2, [r7, #4]
 8004abc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8004abe:	2300      	movs	r3, #0
 8004ac0:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8004ac2:	7afb      	ldrb	r3, [r7, #11]
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d16e      	bne.n	8004ba6 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8004ace:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8004ad6:	2b03      	cmp	r3, #3
 8004ad8:	f040 8098 	bne.w	8004c0c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8004adc:	693b      	ldr	r3, [r7, #16]
 8004ade:	689a      	ldr	r2, [r3, #8]
 8004ae0:	693b      	ldr	r3, [r7, #16]
 8004ae2:	68db      	ldr	r3, [r3, #12]
 8004ae4:	429a      	cmp	r2, r3
 8004ae6:	d913      	bls.n	8004b10 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8004ae8:	693b      	ldr	r3, [r7, #16]
 8004aea:	689a      	ldr	r2, [r3, #8]
 8004aec:	693b      	ldr	r3, [r7, #16]
 8004aee:	68db      	ldr	r3, [r3, #12]
 8004af0:	1ad2      	subs	r2, r2, r3
 8004af2:	693b      	ldr	r3, [r7, #16]
 8004af4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8004af6:	693b      	ldr	r3, [r7, #16]
 8004af8:	68da      	ldr	r2, [r3, #12]
 8004afa:	693b      	ldr	r3, [r7, #16]
 8004afc:	689b      	ldr	r3, [r3, #8]
 8004afe:	4293      	cmp	r3, r2
 8004b00:	bf28      	it	cs
 8004b02:	4613      	movcs	r3, r2
 8004b04:	461a      	mov	r2, r3
 8004b06:	6879      	ldr	r1, [r7, #4]
 8004b08:	68f8      	ldr	r0, [r7, #12]
 8004b0a:	f001 f967 	bl	8005ddc <USBD_CtlContinueRx>
 8004b0e:	e07d      	b.n	8004c0c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8004b16:	f003 031f 	and.w	r3, r3, #31
 8004b1a:	2b02      	cmp	r3, #2
 8004b1c:	d014      	beq.n	8004b48 <USBD_LL_DataOutStage+0x98>
 8004b1e:	2b02      	cmp	r3, #2
 8004b20:	d81d      	bhi.n	8004b5e <USBD_LL_DataOutStage+0xae>
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d002      	beq.n	8004b2c <USBD_LL_DataOutStage+0x7c>
 8004b26:	2b01      	cmp	r3, #1
 8004b28:	d003      	beq.n	8004b32 <USBD_LL_DataOutStage+0x82>
 8004b2a:	e018      	b.n	8004b5e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8004b2c:	2300      	movs	r3, #0
 8004b2e:	75bb      	strb	r3, [r7, #22]
            break;
 8004b30:	e018      	b.n	8004b64 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8004b38:	b2db      	uxtb	r3, r3
 8004b3a:	4619      	mov	r1, r3
 8004b3c:	68f8      	ldr	r0, [r7, #12]
 8004b3e:	f000 fa5e 	bl	8004ffe <USBD_CoreFindIF>
 8004b42:	4603      	mov	r3, r0
 8004b44:	75bb      	strb	r3, [r7, #22]
            break;
 8004b46:	e00d      	b.n	8004b64 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8004b4e:	b2db      	uxtb	r3, r3
 8004b50:	4619      	mov	r1, r3
 8004b52:	68f8      	ldr	r0, [r7, #12]
 8004b54:	f000 fa60 	bl	8005018 <USBD_CoreFindEP>
 8004b58:	4603      	mov	r3, r0
 8004b5a:	75bb      	strb	r3, [r7, #22]
            break;
 8004b5c:	e002      	b.n	8004b64 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8004b5e:	2300      	movs	r3, #0
 8004b60:	75bb      	strb	r3, [r7, #22]
            break;
 8004b62:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8004b64:	7dbb      	ldrb	r3, [r7, #22]
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d119      	bne.n	8004b9e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004b70:	b2db      	uxtb	r3, r3
 8004b72:	2b03      	cmp	r3, #3
 8004b74:	d113      	bne.n	8004b9e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8004b76:	7dba      	ldrb	r2, [r7, #22]
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	32ae      	adds	r2, #174	; 0xae
 8004b7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b80:	691b      	ldr	r3, [r3, #16]
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d00b      	beq.n	8004b9e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8004b86:	7dba      	ldrb	r2, [r7, #22]
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8004b8e:	7dba      	ldrb	r2, [r7, #22]
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	32ae      	adds	r2, #174	; 0xae
 8004b94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b98:	691b      	ldr	r3, [r3, #16]
 8004b9a:	68f8      	ldr	r0, [r7, #12]
 8004b9c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8004b9e:	68f8      	ldr	r0, [r7, #12]
 8004ba0:	f001 f92d 	bl	8005dfe <USBD_CtlSendStatus>
 8004ba4:	e032      	b.n	8004c0c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8004ba6:	7afb      	ldrb	r3, [r7, #11]
 8004ba8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004bac:	b2db      	uxtb	r3, r3
 8004bae:	4619      	mov	r1, r3
 8004bb0:	68f8      	ldr	r0, [r7, #12]
 8004bb2:	f000 fa31 	bl	8005018 <USBD_CoreFindEP>
 8004bb6:	4603      	mov	r3, r0
 8004bb8:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8004bba:	7dbb      	ldrb	r3, [r7, #22]
 8004bbc:	2bff      	cmp	r3, #255	; 0xff
 8004bbe:	d025      	beq.n	8004c0c <USBD_LL_DataOutStage+0x15c>
 8004bc0:	7dbb      	ldrb	r3, [r7, #22]
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d122      	bne.n	8004c0c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004bcc:	b2db      	uxtb	r3, r3
 8004bce:	2b03      	cmp	r3, #3
 8004bd0:	d117      	bne.n	8004c02 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8004bd2:	7dba      	ldrb	r2, [r7, #22]
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	32ae      	adds	r2, #174	; 0xae
 8004bd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004bdc:	699b      	ldr	r3, [r3, #24]
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d00f      	beq.n	8004c02 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8004be2:	7dba      	ldrb	r2, [r7, #22]
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8004bea:	7dba      	ldrb	r2, [r7, #22]
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	32ae      	adds	r2, #174	; 0xae
 8004bf0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004bf4:	699b      	ldr	r3, [r3, #24]
 8004bf6:	7afa      	ldrb	r2, [r7, #11]
 8004bf8:	4611      	mov	r1, r2
 8004bfa:	68f8      	ldr	r0, [r7, #12]
 8004bfc:	4798      	blx	r3
 8004bfe:	4603      	mov	r3, r0
 8004c00:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8004c02:	7dfb      	ldrb	r3, [r7, #23]
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d001      	beq.n	8004c0c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8004c08:	7dfb      	ldrb	r3, [r7, #23]
 8004c0a:	e000      	b.n	8004c0e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8004c0c:	2300      	movs	r3, #0
}
 8004c0e:	4618      	mov	r0, r3
 8004c10:	3718      	adds	r7, #24
 8004c12:	46bd      	mov	sp, r7
 8004c14:	bd80      	pop	{r7, pc}

08004c16 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8004c16:	b580      	push	{r7, lr}
 8004c18:	b086      	sub	sp, #24
 8004c1a:	af00      	add	r7, sp, #0
 8004c1c:	60f8      	str	r0, [r7, #12]
 8004c1e:	460b      	mov	r3, r1
 8004c20:	607a      	str	r2, [r7, #4]
 8004c22:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8004c24:	7afb      	ldrb	r3, [r7, #11]
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d16f      	bne.n	8004d0a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	3314      	adds	r3, #20
 8004c2e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8004c36:	2b02      	cmp	r3, #2
 8004c38:	d15a      	bne.n	8004cf0 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8004c3a:	693b      	ldr	r3, [r7, #16]
 8004c3c:	689a      	ldr	r2, [r3, #8]
 8004c3e:	693b      	ldr	r3, [r7, #16]
 8004c40:	68db      	ldr	r3, [r3, #12]
 8004c42:	429a      	cmp	r2, r3
 8004c44:	d914      	bls.n	8004c70 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8004c46:	693b      	ldr	r3, [r7, #16]
 8004c48:	689a      	ldr	r2, [r3, #8]
 8004c4a:	693b      	ldr	r3, [r7, #16]
 8004c4c:	68db      	ldr	r3, [r3, #12]
 8004c4e:	1ad2      	subs	r2, r2, r3
 8004c50:	693b      	ldr	r3, [r7, #16]
 8004c52:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8004c54:	693b      	ldr	r3, [r7, #16]
 8004c56:	689b      	ldr	r3, [r3, #8]
 8004c58:	461a      	mov	r2, r3
 8004c5a:	6879      	ldr	r1, [r7, #4]
 8004c5c:	68f8      	ldr	r0, [r7, #12]
 8004c5e:	f001 f8ac 	bl	8005dba <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8004c62:	2300      	movs	r3, #0
 8004c64:	2200      	movs	r2, #0
 8004c66:	2100      	movs	r1, #0
 8004c68:	68f8      	ldr	r0, [r7, #12]
 8004c6a:	f001 fcc1 	bl	80065f0 <USBD_LL_PrepareReceive>
 8004c6e:	e03f      	b.n	8004cf0 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8004c70:	693b      	ldr	r3, [r7, #16]
 8004c72:	68da      	ldr	r2, [r3, #12]
 8004c74:	693b      	ldr	r3, [r7, #16]
 8004c76:	689b      	ldr	r3, [r3, #8]
 8004c78:	429a      	cmp	r2, r3
 8004c7a:	d11c      	bne.n	8004cb6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8004c7c:	693b      	ldr	r3, [r7, #16]
 8004c7e:	685a      	ldr	r2, [r3, #4]
 8004c80:	693b      	ldr	r3, [r7, #16]
 8004c82:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8004c84:	429a      	cmp	r2, r3
 8004c86:	d316      	bcc.n	8004cb6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8004c88:	693b      	ldr	r3, [r7, #16]
 8004c8a:	685a      	ldr	r2, [r3, #4]
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8004c92:	429a      	cmp	r2, r3
 8004c94:	d20f      	bcs.n	8004cb6 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8004c96:	2200      	movs	r2, #0
 8004c98:	2100      	movs	r1, #0
 8004c9a:	68f8      	ldr	r0, [r7, #12]
 8004c9c:	f001 f88d 	bl	8005dba <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	2200      	movs	r2, #0
 8004ca4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8004ca8:	2300      	movs	r3, #0
 8004caa:	2200      	movs	r2, #0
 8004cac:	2100      	movs	r1, #0
 8004cae:	68f8      	ldr	r0, [r7, #12]
 8004cb0:	f001 fc9e 	bl	80065f0 <USBD_LL_PrepareReceive>
 8004cb4:	e01c      	b.n	8004cf0 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004cbc:	b2db      	uxtb	r3, r3
 8004cbe:	2b03      	cmp	r3, #3
 8004cc0:	d10f      	bne.n	8004ce2 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004cc8:	68db      	ldr	r3, [r3, #12]
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d009      	beq.n	8004ce2 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004cdc:	68db      	ldr	r3, [r3, #12]
 8004cde:	68f8      	ldr	r0, [r7, #12]
 8004ce0:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8004ce2:	2180      	movs	r1, #128	; 0x80
 8004ce4:	68f8      	ldr	r0, [r7, #12]
 8004ce6:	f001 fbd9 	bl	800649c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8004cea:	68f8      	ldr	r0, [r7, #12]
 8004cec:	f001 f89a 	bl	8005e24 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d03a      	beq.n	8004d70 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8004cfa:	68f8      	ldr	r0, [r7, #12]
 8004cfc:	f7ff fe42 	bl	8004984 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	2200      	movs	r2, #0
 8004d04:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8004d08:	e032      	b.n	8004d70 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8004d0a:	7afb      	ldrb	r3, [r7, #11]
 8004d0c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004d10:	b2db      	uxtb	r3, r3
 8004d12:	4619      	mov	r1, r3
 8004d14:	68f8      	ldr	r0, [r7, #12]
 8004d16:	f000 f97f 	bl	8005018 <USBD_CoreFindEP>
 8004d1a:	4603      	mov	r3, r0
 8004d1c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8004d1e:	7dfb      	ldrb	r3, [r7, #23]
 8004d20:	2bff      	cmp	r3, #255	; 0xff
 8004d22:	d025      	beq.n	8004d70 <USBD_LL_DataInStage+0x15a>
 8004d24:	7dfb      	ldrb	r3, [r7, #23]
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d122      	bne.n	8004d70 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004d30:	b2db      	uxtb	r3, r3
 8004d32:	2b03      	cmp	r3, #3
 8004d34:	d11c      	bne.n	8004d70 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8004d36:	7dfa      	ldrb	r2, [r7, #23]
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	32ae      	adds	r2, #174	; 0xae
 8004d3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004d40:	695b      	ldr	r3, [r3, #20]
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d014      	beq.n	8004d70 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8004d46:	7dfa      	ldrb	r2, [r7, #23]
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8004d4e:	7dfa      	ldrb	r2, [r7, #23]
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	32ae      	adds	r2, #174	; 0xae
 8004d54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004d58:	695b      	ldr	r3, [r3, #20]
 8004d5a:	7afa      	ldrb	r2, [r7, #11]
 8004d5c:	4611      	mov	r1, r2
 8004d5e:	68f8      	ldr	r0, [r7, #12]
 8004d60:	4798      	blx	r3
 8004d62:	4603      	mov	r3, r0
 8004d64:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8004d66:	7dbb      	ldrb	r3, [r7, #22]
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d001      	beq.n	8004d70 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8004d6c:	7dbb      	ldrb	r3, [r7, #22]
 8004d6e:	e000      	b.n	8004d72 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8004d70:	2300      	movs	r3, #0
}
 8004d72:	4618      	mov	r0, r3
 8004d74:	3718      	adds	r7, #24
 8004d76:	46bd      	mov	sp, r7
 8004d78:	bd80      	pop	{r7, pc}

08004d7a <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8004d7a:	b580      	push	{r7, lr}
 8004d7c:	b084      	sub	sp, #16
 8004d7e:	af00      	add	r7, sp, #0
 8004d80:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8004d82:	2300      	movs	r3, #0
 8004d84:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	2201      	movs	r2, #1
 8004d8a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	2200      	movs	r2, #0
 8004d92:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	2200      	movs	r2, #0
 8004d9a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2200      	movs	r2, #0
 8004da0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2200      	movs	r2, #0
 8004da8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d014      	beq.n	8004de0 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004dbc:	685b      	ldr	r3, [r3, #4]
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d00e      	beq.n	8004de0 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004dc8:	685b      	ldr	r3, [r3, #4]
 8004dca:	687a      	ldr	r2, [r7, #4]
 8004dcc:	6852      	ldr	r2, [r2, #4]
 8004dce:	b2d2      	uxtb	r2, r2
 8004dd0:	4611      	mov	r1, r2
 8004dd2:	6878      	ldr	r0, [r7, #4]
 8004dd4:	4798      	blx	r3
 8004dd6:	4603      	mov	r3, r0
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d001      	beq.n	8004de0 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8004ddc:	2303      	movs	r3, #3
 8004dde:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8004de0:	2340      	movs	r3, #64	; 0x40
 8004de2:	2200      	movs	r2, #0
 8004de4:	2100      	movs	r1, #0
 8004de6:	6878      	ldr	r0, [r7, #4]
 8004de8:	f001 fb13 	bl	8006412 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2201      	movs	r2, #1
 8004df0:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2240      	movs	r2, #64	; 0x40
 8004df8:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8004dfc:	2340      	movs	r3, #64	; 0x40
 8004dfe:	2200      	movs	r2, #0
 8004e00:	2180      	movs	r1, #128	; 0x80
 8004e02:	6878      	ldr	r0, [r7, #4]
 8004e04:	f001 fb05 	bl	8006412 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2201      	movs	r2, #1
 8004e0c:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	2240      	movs	r2, #64	; 0x40
 8004e12:	621a      	str	r2, [r3, #32]

  return ret;
 8004e14:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e16:	4618      	mov	r0, r3
 8004e18:	3710      	adds	r7, #16
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	bd80      	pop	{r7, pc}

08004e1e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8004e1e:	b480      	push	{r7}
 8004e20:	b083      	sub	sp, #12
 8004e22:	af00      	add	r7, sp, #0
 8004e24:	6078      	str	r0, [r7, #4]
 8004e26:	460b      	mov	r3, r1
 8004e28:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	78fa      	ldrb	r2, [r7, #3]
 8004e2e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8004e30:	2300      	movs	r3, #0
}
 8004e32:	4618      	mov	r0, r3
 8004e34:	370c      	adds	r7, #12
 8004e36:	46bd      	mov	sp, r7
 8004e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3c:	4770      	bx	lr

08004e3e <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8004e3e:	b480      	push	{r7}
 8004e40:	b083      	sub	sp, #12
 8004e42:	af00      	add	r7, sp, #0
 8004e44:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004e4c:	b2da      	uxtb	r2, r3
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2204      	movs	r2, #4
 8004e58:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8004e5c:	2300      	movs	r3, #0
}
 8004e5e:	4618      	mov	r0, r3
 8004e60:	370c      	adds	r7, #12
 8004e62:	46bd      	mov	sp, r7
 8004e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e68:	4770      	bx	lr

08004e6a <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8004e6a:	b480      	push	{r7}
 8004e6c:	b083      	sub	sp, #12
 8004e6e:	af00      	add	r7, sp, #0
 8004e70:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004e78:	b2db      	uxtb	r3, r3
 8004e7a:	2b04      	cmp	r3, #4
 8004e7c:	d106      	bne.n	8004e8c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8004e84:	b2da      	uxtb	r2, r3
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8004e8c:	2300      	movs	r3, #0
}
 8004e8e:	4618      	mov	r0, r3
 8004e90:	370c      	adds	r7, #12
 8004e92:	46bd      	mov	sp, r7
 8004e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e98:	4770      	bx	lr

08004e9a <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8004e9a:	b580      	push	{r7, lr}
 8004e9c:	b082      	sub	sp, #8
 8004e9e:	af00      	add	r7, sp, #0
 8004ea0:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004ea8:	b2db      	uxtb	r3, r3
 8004eaa:	2b03      	cmp	r3, #3
 8004eac:	d110      	bne.n	8004ed0 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d00b      	beq.n	8004ed0 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004ebe:	69db      	ldr	r3, [r3, #28]
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d005      	beq.n	8004ed0 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004eca:	69db      	ldr	r3, [r3, #28]
 8004ecc:	6878      	ldr	r0, [r7, #4]
 8004ece:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8004ed0:	2300      	movs	r3, #0
}
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	3708      	adds	r7, #8
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	bd80      	pop	{r7, pc}

08004eda <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8004eda:	b580      	push	{r7, lr}
 8004edc:	b082      	sub	sp, #8
 8004ede:	af00      	add	r7, sp, #0
 8004ee0:	6078      	str	r0, [r7, #4]
 8004ee2:	460b      	mov	r3, r1
 8004ee4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	32ae      	adds	r2, #174	; 0xae
 8004ef0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d101      	bne.n	8004efc <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8004ef8:	2303      	movs	r3, #3
 8004efa:	e01c      	b.n	8004f36 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004f02:	b2db      	uxtb	r3, r3
 8004f04:	2b03      	cmp	r3, #3
 8004f06:	d115      	bne.n	8004f34 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	32ae      	adds	r2, #174	; 0xae
 8004f12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f16:	6a1b      	ldr	r3, [r3, #32]
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d00b      	beq.n	8004f34 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	32ae      	adds	r2, #174	; 0xae
 8004f26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f2a:	6a1b      	ldr	r3, [r3, #32]
 8004f2c:	78fa      	ldrb	r2, [r7, #3]
 8004f2e:	4611      	mov	r1, r2
 8004f30:	6878      	ldr	r0, [r7, #4]
 8004f32:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8004f34:	2300      	movs	r3, #0
}
 8004f36:	4618      	mov	r0, r3
 8004f38:	3708      	adds	r7, #8
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	bd80      	pop	{r7, pc}

08004f3e <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8004f3e:	b580      	push	{r7, lr}
 8004f40:	b082      	sub	sp, #8
 8004f42:	af00      	add	r7, sp, #0
 8004f44:	6078      	str	r0, [r7, #4]
 8004f46:	460b      	mov	r3, r1
 8004f48:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	32ae      	adds	r2, #174	; 0xae
 8004f54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d101      	bne.n	8004f60 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8004f5c:	2303      	movs	r3, #3
 8004f5e:	e01c      	b.n	8004f9a <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004f66:	b2db      	uxtb	r3, r3
 8004f68:	2b03      	cmp	r3, #3
 8004f6a:	d115      	bne.n	8004f98 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	32ae      	adds	r2, #174	; 0xae
 8004f76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d00b      	beq.n	8004f98 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	32ae      	adds	r2, #174	; 0xae
 8004f8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f90:	78fa      	ldrb	r2, [r7, #3]
 8004f92:	4611      	mov	r1, r2
 8004f94:	6878      	ldr	r0, [r7, #4]
 8004f96:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8004f98:	2300      	movs	r3, #0
}
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	3708      	adds	r7, #8
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	bd80      	pop	{r7, pc}

08004fa2 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8004fa2:	b480      	push	{r7}
 8004fa4:	b083      	sub	sp, #12
 8004fa6:	af00      	add	r7, sp, #0
 8004fa8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8004faa:	2300      	movs	r3, #0
}
 8004fac:	4618      	mov	r0, r3
 8004fae:	370c      	adds	r7, #12
 8004fb0:	46bd      	mov	sp, r7
 8004fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb6:	4770      	bx	lr

08004fb8 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8004fb8:	b580      	push	{r7, lr}
 8004fba:	b084      	sub	sp, #16
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8004fc0:	2300      	movs	r3, #0
 8004fc2:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2201      	movs	r2, #1
 8004fc8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d00e      	beq.n	8004ff4 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004fdc:	685b      	ldr	r3, [r3, #4]
 8004fde:	687a      	ldr	r2, [r7, #4]
 8004fe0:	6852      	ldr	r2, [r2, #4]
 8004fe2:	b2d2      	uxtb	r2, r2
 8004fe4:	4611      	mov	r1, r2
 8004fe6:	6878      	ldr	r0, [r7, #4]
 8004fe8:	4798      	blx	r3
 8004fea:	4603      	mov	r3, r0
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d001      	beq.n	8004ff4 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8004ff0:	2303      	movs	r3, #3
 8004ff2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8004ff4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	3710      	adds	r7, #16
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	bd80      	pop	{r7, pc}

08004ffe <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8004ffe:	b480      	push	{r7}
 8005000:	b083      	sub	sp, #12
 8005002:	af00      	add	r7, sp, #0
 8005004:	6078      	str	r0, [r7, #4]
 8005006:	460b      	mov	r3, r1
 8005008:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800500a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800500c:	4618      	mov	r0, r3
 800500e:	370c      	adds	r7, #12
 8005010:	46bd      	mov	sp, r7
 8005012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005016:	4770      	bx	lr

08005018 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8005018:	b480      	push	{r7}
 800501a:	b083      	sub	sp, #12
 800501c:	af00      	add	r7, sp, #0
 800501e:	6078      	str	r0, [r7, #4]
 8005020:	460b      	mov	r3, r1
 8005022:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8005024:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8005026:	4618      	mov	r0, r3
 8005028:	370c      	adds	r7, #12
 800502a:	46bd      	mov	sp, r7
 800502c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005030:	4770      	bx	lr

08005032 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8005032:	b580      	push	{r7, lr}
 8005034:	b086      	sub	sp, #24
 8005036:	af00      	add	r7, sp, #0
 8005038:	6078      	str	r0, [r7, #4]
 800503a:	460b      	mov	r3, r1
 800503c:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8005046:	2300      	movs	r3, #0
 8005048:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	885b      	ldrh	r3, [r3, #2]
 800504e:	b29a      	uxth	r2, r3
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	781b      	ldrb	r3, [r3, #0]
 8005054:	b29b      	uxth	r3, r3
 8005056:	429a      	cmp	r2, r3
 8005058:	d920      	bls.n	800509c <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	781b      	ldrb	r3, [r3, #0]
 800505e:	b29b      	uxth	r3, r3
 8005060:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8005062:	e013      	b.n	800508c <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8005064:	f107 030a 	add.w	r3, r7, #10
 8005068:	4619      	mov	r1, r3
 800506a:	6978      	ldr	r0, [r7, #20]
 800506c:	f000 f81b 	bl	80050a6 <USBD_GetNextDesc>
 8005070:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8005072:	697b      	ldr	r3, [r7, #20]
 8005074:	785b      	ldrb	r3, [r3, #1]
 8005076:	2b05      	cmp	r3, #5
 8005078:	d108      	bne.n	800508c <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800507a:	697b      	ldr	r3, [r7, #20]
 800507c:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800507e:	693b      	ldr	r3, [r7, #16]
 8005080:	789b      	ldrb	r3, [r3, #2]
 8005082:	78fa      	ldrb	r2, [r7, #3]
 8005084:	429a      	cmp	r2, r3
 8005086:	d008      	beq.n	800509a <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8005088:	2300      	movs	r3, #0
 800508a:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	885b      	ldrh	r3, [r3, #2]
 8005090:	b29a      	uxth	r2, r3
 8005092:	897b      	ldrh	r3, [r7, #10]
 8005094:	429a      	cmp	r2, r3
 8005096:	d8e5      	bhi.n	8005064 <USBD_GetEpDesc+0x32>
 8005098:	e000      	b.n	800509c <USBD_GetEpDesc+0x6a>
          break;
 800509a:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800509c:	693b      	ldr	r3, [r7, #16]
}
 800509e:	4618      	mov	r0, r3
 80050a0:	3718      	adds	r7, #24
 80050a2:	46bd      	mov	sp, r7
 80050a4:	bd80      	pop	{r7, pc}

080050a6 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80050a6:	b480      	push	{r7}
 80050a8:	b085      	sub	sp, #20
 80050aa:	af00      	add	r7, sp, #0
 80050ac:	6078      	str	r0, [r7, #4]
 80050ae:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80050b4:	683b      	ldr	r3, [r7, #0]
 80050b6:	881a      	ldrh	r2, [r3, #0]
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	781b      	ldrb	r3, [r3, #0]
 80050bc:	b29b      	uxth	r3, r3
 80050be:	4413      	add	r3, r2
 80050c0:	b29a      	uxth	r2, r3
 80050c2:	683b      	ldr	r3, [r7, #0]
 80050c4:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	781b      	ldrb	r3, [r3, #0]
 80050ca:	461a      	mov	r2, r3
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	4413      	add	r3, r2
 80050d0:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80050d2:	68fb      	ldr	r3, [r7, #12]
}
 80050d4:	4618      	mov	r0, r3
 80050d6:	3714      	adds	r7, #20
 80050d8:	46bd      	mov	sp, r7
 80050da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050de:	4770      	bx	lr

080050e0 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80050e0:	b480      	push	{r7}
 80050e2:	b087      	sub	sp, #28
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80050ec:	697b      	ldr	r3, [r7, #20]
 80050ee:	781b      	ldrb	r3, [r3, #0]
 80050f0:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80050f2:	697b      	ldr	r3, [r7, #20]
 80050f4:	3301      	adds	r3, #1
 80050f6:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80050f8:	697b      	ldr	r3, [r7, #20]
 80050fa:	781b      	ldrb	r3, [r3, #0]
 80050fc:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80050fe:	8a3b      	ldrh	r3, [r7, #16]
 8005100:	021b      	lsls	r3, r3, #8
 8005102:	b21a      	sxth	r2, r3
 8005104:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005108:	4313      	orrs	r3, r2
 800510a:	b21b      	sxth	r3, r3
 800510c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800510e:	89fb      	ldrh	r3, [r7, #14]
}
 8005110:	4618      	mov	r0, r3
 8005112:	371c      	adds	r7, #28
 8005114:	46bd      	mov	sp, r7
 8005116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511a:	4770      	bx	lr

0800511c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800511c:	b580      	push	{r7, lr}
 800511e:	b084      	sub	sp, #16
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
 8005124:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005126:	2300      	movs	r3, #0
 8005128:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800512a:	683b      	ldr	r3, [r7, #0]
 800512c:	781b      	ldrb	r3, [r3, #0]
 800512e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005132:	2b40      	cmp	r3, #64	; 0x40
 8005134:	d005      	beq.n	8005142 <USBD_StdDevReq+0x26>
 8005136:	2b40      	cmp	r3, #64	; 0x40
 8005138:	d857      	bhi.n	80051ea <USBD_StdDevReq+0xce>
 800513a:	2b00      	cmp	r3, #0
 800513c:	d00f      	beq.n	800515e <USBD_StdDevReq+0x42>
 800513e:	2b20      	cmp	r3, #32
 8005140:	d153      	bne.n	80051ea <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	32ae      	adds	r2, #174	; 0xae
 800514c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005150:	689b      	ldr	r3, [r3, #8]
 8005152:	6839      	ldr	r1, [r7, #0]
 8005154:	6878      	ldr	r0, [r7, #4]
 8005156:	4798      	blx	r3
 8005158:	4603      	mov	r3, r0
 800515a:	73fb      	strb	r3, [r7, #15]
      break;
 800515c:	e04a      	b.n	80051f4 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800515e:	683b      	ldr	r3, [r7, #0]
 8005160:	785b      	ldrb	r3, [r3, #1]
 8005162:	2b09      	cmp	r3, #9
 8005164:	d83b      	bhi.n	80051de <USBD_StdDevReq+0xc2>
 8005166:	a201      	add	r2, pc, #4	; (adr r2, 800516c <USBD_StdDevReq+0x50>)
 8005168:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800516c:	080051c1 	.word	0x080051c1
 8005170:	080051d5 	.word	0x080051d5
 8005174:	080051df 	.word	0x080051df
 8005178:	080051cb 	.word	0x080051cb
 800517c:	080051df 	.word	0x080051df
 8005180:	0800519f 	.word	0x0800519f
 8005184:	08005195 	.word	0x08005195
 8005188:	080051df 	.word	0x080051df
 800518c:	080051b7 	.word	0x080051b7
 8005190:	080051a9 	.word	0x080051a9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8005194:	6839      	ldr	r1, [r7, #0]
 8005196:	6878      	ldr	r0, [r7, #4]
 8005198:	f000 fa3c 	bl	8005614 <USBD_GetDescriptor>
          break;
 800519c:	e024      	b.n	80051e8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800519e:	6839      	ldr	r1, [r7, #0]
 80051a0:	6878      	ldr	r0, [r7, #4]
 80051a2:	f000 fba1 	bl	80058e8 <USBD_SetAddress>
          break;
 80051a6:	e01f      	b.n	80051e8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80051a8:	6839      	ldr	r1, [r7, #0]
 80051aa:	6878      	ldr	r0, [r7, #4]
 80051ac:	f000 fbe0 	bl	8005970 <USBD_SetConfig>
 80051b0:	4603      	mov	r3, r0
 80051b2:	73fb      	strb	r3, [r7, #15]
          break;
 80051b4:	e018      	b.n	80051e8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80051b6:	6839      	ldr	r1, [r7, #0]
 80051b8:	6878      	ldr	r0, [r7, #4]
 80051ba:	f000 fc83 	bl	8005ac4 <USBD_GetConfig>
          break;
 80051be:	e013      	b.n	80051e8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80051c0:	6839      	ldr	r1, [r7, #0]
 80051c2:	6878      	ldr	r0, [r7, #4]
 80051c4:	f000 fcb4 	bl	8005b30 <USBD_GetStatus>
          break;
 80051c8:	e00e      	b.n	80051e8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80051ca:	6839      	ldr	r1, [r7, #0]
 80051cc:	6878      	ldr	r0, [r7, #4]
 80051ce:	f000 fce3 	bl	8005b98 <USBD_SetFeature>
          break;
 80051d2:	e009      	b.n	80051e8 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80051d4:	6839      	ldr	r1, [r7, #0]
 80051d6:	6878      	ldr	r0, [r7, #4]
 80051d8:	f000 fd07 	bl	8005bea <USBD_ClrFeature>
          break;
 80051dc:	e004      	b.n	80051e8 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80051de:	6839      	ldr	r1, [r7, #0]
 80051e0:	6878      	ldr	r0, [r7, #4]
 80051e2:	f000 fd5e 	bl	8005ca2 <USBD_CtlError>
          break;
 80051e6:	bf00      	nop
      }
      break;
 80051e8:	e004      	b.n	80051f4 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80051ea:	6839      	ldr	r1, [r7, #0]
 80051ec:	6878      	ldr	r0, [r7, #4]
 80051ee:	f000 fd58 	bl	8005ca2 <USBD_CtlError>
      break;
 80051f2:	bf00      	nop
  }

  return ret;
 80051f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80051f6:	4618      	mov	r0, r3
 80051f8:	3710      	adds	r7, #16
 80051fa:	46bd      	mov	sp, r7
 80051fc:	bd80      	pop	{r7, pc}
 80051fe:	bf00      	nop

08005200 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005200:	b580      	push	{r7, lr}
 8005202:	b084      	sub	sp, #16
 8005204:	af00      	add	r7, sp, #0
 8005206:	6078      	str	r0, [r7, #4]
 8005208:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800520a:	2300      	movs	r3, #0
 800520c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800520e:	683b      	ldr	r3, [r7, #0]
 8005210:	781b      	ldrb	r3, [r3, #0]
 8005212:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005216:	2b40      	cmp	r3, #64	; 0x40
 8005218:	d005      	beq.n	8005226 <USBD_StdItfReq+0x26>
 800521a:	2b40      	cmp	r3, #64	; 0x40
 800521c:	d852      	bhi.n	80052c4 <USBD_StdItfReq+0xc4>
 800521e:	2b00      	cmp	r3, #0
 8005220:	d001      	beq.n	8005226 <USBD_StdItfReq+0x26>
 8005222:	2b20      	cmp	r3, #32
 8005224:	d14e      	bne.n	80052c4 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800522c:	b2db      	uxtb	r3, r3
 800522e:	3b01      	subs	r3, #1
 8005230:	2b02      	cmp	r3, #2
 8005232:	d840      	bhi.n	80052b6 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8005234:	683b      	ldr	r3, [r7, #0]
 8005236:	889b      	ldrh	r3, [r3, #4]
 8005238:	b2db      	uxtb	r3, r3
 800523a:	2b01      	cmp	r3, #1
 800523c:	d836      	bhi.n	80052ac <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800523e:	683b      	ldr	r3, [r7, #0]
 8005240:	889b      	ldrh	r3, [r3, #4]
 8005242:	b2db      	uxtb	r3, r3
 8005244:	4619      	mov	r1, r3
 8005246:	6878      	ldr	r0, [r7, #4]
 8005248:	f7ff fed9 	bl	8004ffe <USBD_CoreFindIF>
 800524c:	4603      	mov	r3, r0
 800524e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005250:	7bbb      	ldrb	r3, [r7, #14]
 8005252:	2bff      	cmp	r3, #255	; 0xff
 8005254:	d01d      	beq.n	8005292 <USBD_StdItfReq+0x92>
 8005256:	7bbb      	ldrb	r3, [r7, #14]
 8005258:	2b00      	cmp	r3, #0
 800525a:	d11a      	bne.n	8005292 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800525c:	7bba      	ldrb	r2, [r7, #14]
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	32ae      	adds	r2, #174	; 0xae
 8005262:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005266:	689b      	ldr	r3, [r3, #8]
 8005268:	2b00      	cmp	r3, #0
 800526a:	d00f      	beq.n	800528c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800526c:	7bba      	ldrb	r2, [r7, #14]
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8005274:	7bba      	ldrb	r2, [r7, #14]
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	32ae      	adds	r2, #174	; 0xae
 800527a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800527e:	689b      	ldr	r3, [r3, #8]
 8005280:	6839      	ldr	r1, [r7, #0]
 8005282:	6878      	ldr	r0, [r7, #4]
 8005284:	4798      	blx	r3
 8005286:	4603      	mov	r3, r0
 8005288:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800528a:	e004      	b.n	8005296 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800528c:	2303      	movs	r3, #3
 800528e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8005290:	e001      	b.n	8005296 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8005292:	2303      	movs	r3, #3
 8005294:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8005296:	683b      	ldr	r3, [r7, #0]
 8005298:	88db      	ldrh	r3, [r3, #6]
 800529a:	2b00      	cmp	r3, #0
 800529c:	d110      	bne.n	80052c0 <USBD_StdItfReq+0xc0>
 800529e:	7bfb      	ldrb	r3, [r7, #15]
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d10d      	bne.n	80052c0 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80052a4:	6878      	ldr	r0, [r7, #4]
 80052a6:	f000 fdaa 	bl	8005dfe <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80052aa:	e009      	b.n	80052c0 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80052ac:	6839      	ldr	r1, [r7, #0]
 80052ae:	6878      	ldr	r0, [r7, #4]
 80052b0:	f000 fcf7 	bl	8005ca2 <USBD_CtlError>
          break;
 80052b4:	e004      	b.n	80052c0 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80052b6:	6839      	ldr	r1, [r7, #0]
 80052b8:	6878      	ldr	r0, [r7, #4]
 80052ba:	f000 fcf2 	bl	8005ca2 <USBD_CtlError>
          break;
 80052be:	e000      	b.n	80052c2 <USBD_StdItfReq+0xc2>
          break;
 80052c0:	bf00      	nop
      }
      break;
 80052c2:	e004      	b.n	80052ce <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80052c4:	6839      	ldr	r1, [r7, #0]
 80052c6:	6878      	ldr	r0, [r7, #4]
 80052c8:	f000 fceb 	bl	8005ca2 <USBD_CtlError>
      break;
 80052cc:	bf00      	nop
  }

  return ret;
 80052ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80052d0:	4618      	mov	r0, r3
 80052d2:	3710      	adds	r7, #16
 80052d4:	46bd      	mov	sp, r7
 80052d6:	bd80      	pop	{r7, pc}

080052d8 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80052d8:	b580      	push	{r7, lr}
 80052da:	b084      	sub	sp, #16
 80052dc:	af00      	add	r7, sp, #0
 80052de:	6078      	str	r0, [r7, #4]
 80052e0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80052e2:	2300      	movs	r3, #0
 80052e4:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80052e6:	683b      	ldr	r3, [r7, #0]
 80052e8:	889b      	ldrh	r3, [r3, #4]
 80052ea:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80052ec:	683b      	ldr	r3, [r7, #0]
 80052ee:	781b      	ldrb	r3, [r3, #0]
 80052f0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80052f4:	2b40      	cmp	r3, #64	; 0x40
 80052f6:	d007      	beq.n	8005308 <USBD_StdEPReq+0x30>
 80052f8:	2b40      	cmp	r3, #64	; 0x40
 80052fa:	f200 817f 	bhi.w	80055fc <USBD_StdEPReq+0x324>
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d02a      	beq.n	8005358 <USBD_StdEPReq+0x80>
 8005302:	2b20      	cmp	r3, #32
 8005304:	f040 817a 	bne.w	80055fc <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8005308:	7bbb      	ldrb	r3, [r7, #14]
 800530a:	4619      	mov	r1, r3
 800530c:	6878      	ldr	r0, [r7, #4]
 800530e:	f7ff fe83 	bl	8005018 <USBD_CoreFindEP>
 8005312:	4603      	mov	r3, r0
 8005314:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005316:	7b7b      	ldrb	r3, [r7, #13]
 8005318:	2bff      	cmp	r3, #255	; 0xff
 800531a:	f000 8174 	beq.w	8005606 <USBD_StdEPReq+0x32e>
 800531e:	7b7b      	ldrb	r3, [r7, #13]
 8005320:	2b00      	cmp	r3, #0
 8005322:	f040 8170 	bne.w	8005606 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8005326:	7b7a      	ldrb	r2, [r7, #13]
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800532e:	7b7a      	ldrb	r2, [r7, #13]
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	32ae      	adds	r2, #174	; 0xae
 8005334:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005338:	689b      	ldr	r3, [r3, #8]
 800533a:	2b00      	cmp	r3, #0
 800533c:	f000 8163 	beq.w	8005606 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8005340:	7b7a      	ldrb	r2, [r7, #13]
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	32ae      	adds	r2, #174	; 0xae
 8005346:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800534a:	689b      	ldr	r3, [r3, #8]
 800534c:	6839      	ldr	r1, [r7, #0]
 800534e:	6878      	ldr	r0, [r7, #4]
 8005350:	4798      	blx	r3
 8005352:	4603      	mov	r3, r0
 8005354:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005356:	e156      	b.n	8005606 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005358:	683b      	ldr	r3, [r7, #0]
 800535a:	785b      	ldrb	r3, [r3, #1]
 800535c:	2b03      	cmp	r3, #3
 800535e:	d008      	beq.n	8005372 <USBD_StdEPReq+0x9a>
 8005360:	2b03      	cmp	r3, #3
 8005362:	f300 8145 	bgt.w	80055f0 <USBD_StdEPReq+0x318>
 8005366:	2b00      	cmp	r3, #0
 8005368:	f000 809b 	beq.w	80054a2 <USBD_StdEPReq+0x1ca>
 800536c:	2b01      	cmp	r3, #1
 800536e:	d03c      	beq.n	80053ea <USBD_StdEPReq+0x112>
 8005370:	e13e      	b.n	80055f0 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005378:	b2db      	uxtb	r3, r3
 800537a:	2b02      	cmp	r3, #2
 800537c:	d002      	beq.n	8005384 <USBD_StdEPReq+0xac>
 800537e:	2b03      	cmp	r3, #3
 8005380:	d016      	beq.n	80053b0 <USBD_StdEPReq+0xd8>
 8005382:	e02c      	b.n	80053de <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005384:	7bbb      	ldrb	r3, [r7, #14]
 8005386:	2b00      	cmp	r3, #0
 8005388:	d00d      	beq.n	80053a6 <USBD_StdEPReq+0xce>
 800538a:	7bbb      	ldrb	r3, [r7, #14]
 800538c:	2b80      	cmp	r3, #128	; 0x80
 800538e:	d00a      	beq.n	80053a6 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8005390:	7bbb      	ldrb	r3, [r7, #14]
 8005392:	4619      	mov	r1, r3
 8005394:	6878      	ldr	r0, [r7, #4]
 8005396:	f001 f881 	bl	800649c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800539a:	2180      	movs	r1, #128	; 0x80
 800539c:	6878      	ldr	r0, [r7, #4]
 800539e:	f001 f87d 	bl	800649c <USBD_LL_StallEP>
 80053a2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80053a4:	e020      	b.n	80053e8 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80053a6:	6839      	ldr	r1, [r7, #0]
 80053a8:	6878      	ldr	r0, [r7, #4]
 80053aa:	f000 fc7a 	bl	8005ca2 <USBD_CtlError>
              break;
 80053ae:	e01b      	b.n	80053e8 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80053b0:	683b      	ldr	r3, [r7, #0]
 80053b2:	885b      	ldrh	r3, [r3, #2]
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d10e      	bne.n	80053d6 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80053b8:	7bbb      	ldrb	r3, [r7, #14]
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d00b      	beq.n	80053d6 <USBD_StdEPReq+0xfe>
 80053be:	7bbb      	ldrb	r3, [r7, #14]
 80053c0:	2b80      	cmp	r3, #128	; 0x80
 80053c2:	d008      	beq.n	80053d6 <USBD_StdEPReq+0xfe>
 80053c4:	683b      	ldr	r3, [r7, #0]
 80053c6:	88db      	ldrh	r3, [r3, #6]
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d104      	bne.n	80053d6 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80053cc:	7bbb      	ldrb	r3, [r7, #14]
 80053ce:	4619      	mov	r1, r3
 80053d0:	6878      	ldr	r0, [r7, #4]
 80053d2:	f001 f863 	bl	800649c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80053d6:	6878      	ldr	r0, [r7, #4]
 80053d8:	f000 fd11 	bl	8005dfe <USBD_CtlSendStatus>

              break;
 80053dc:	e004      	b.n	80053e8 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80053de:	6839      	ldr	r1, [r7, #0]
 80053e0:	6878      	ldr	r0, [r7, #4]
 80053e2:	f000 fc5e 	bl	8005ca2 <USBD_CtlError>
              break;
 80053e6:	bf00      	nop
          }
          break;
 80053e8:	e107      	b.n	80055fa <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80053f0:	b2db      	uxtb	r3, r3
 80053f2:	2b02      	cmp	r3, #2
 80053f4:	d002      	beq.n	80053fc <USBD_StdEPReq+0x124>
 80053f6:	2b03      	cmp	r3, #3
 80053f8:	d016      	beq.n	8005428 <USBD_StdEPReq+0x150>
 80053fa:	e04b      	b.n	8005494 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80053fc:	7bbb      	ldrb	r3, [r7, #14]
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d00d      	beq.n	800541e <USBD_StdEPReq+0x146>
 8005402:	7bbb      	ldrb	r3, [r7, #14]
 8005404:	2b80      	cmp	r3, #128	; 0x80
 8005406:	d00a      	beq.n	800541e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8005408:	7bbb      	ldrb	r3, [r7, #14]
 800540a:	4619      	mov	r1, r3
 800540c:	6878      	ldr	r0, [r7, #4]
 800540e:	f001 f845 	bl	800649c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8005412:	2180      	movs	r1, #128	; 0x80
 8005414:	6878      	ldr	r0, [r7, #4]
 8005416:	f001 f841 	bl	800649c <USBD_LL_StallEP>
 800541a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800541c:	e040      	b.n	80054a0 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800541e:	6839      	ldr	r1, [r7, #0]
 8005420:	6878      	ldr	r0, [r7, #4]
 8005422:	f000 fc3e 	bl	8005ca2 <USBD_CtlError>
              break;
 8005426:	e03b      	b.n	80054a0 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005428:	683b      	ldr	r3, [r7, #0]
 800542a:	885b      	ldrh	r3, [r3, #2]
 800542c:	2b00      	cmp	r3, #0
 800542e:	d136      	bne.n	800549e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8005430:	7bbb      	ldrb	r3, [r7, #14]
 8005432:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005436:	2b00      	cmp	r3, #0
 8005438:	d004      	beq.n	8005444 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800543a:	7bbb      	ldrb	r3, [r7, #14]
 800543c:	4619      	mov	r1, r3
 800543e:	6878      	ldr	r0, [r7, #4]
 8005440:	f001 f84b 	bl	80064da <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8005444:	6878      	ldr	r0, [r7, #4]
 8005446:	f000 fcda 	bl	8005dfe <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800544a:	7bbb      	ldrb	r3, [r7, #14]
 800544c:	4619      	mov	r1, r3
 800544e:	6878      	ldr	r0, [r7, #4]
 8005450:	f7ff fde2 	bl	8005018 <USBD_CoreFindEP>
 8005454:	4603      	mov	r3, r0
 8005456:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005458:	7b7b      	ldrb	r3, [r7, #13]
 800545a:	2bff      	cmp	r3, #255	; 0xff
 800545c:	d01f      	beq.n	800549e <USBD_StdEPReq+0x1c6>
 800545e:	7b7b      	ldrb	r3, [r7, #13]
 8005460:	2b00      	cmp	r3, #0
 8005462:	d11c      	bne.n	800549e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8005464:	7b7a      	ldrb	r2, [r7, #13]
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800546c:	7b7a      	ldrb	r2, [r7, #13]
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	32ae      	adds	r2, #174	; 0xae
 8005472:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005476:	689b      	ldr	r3, [r3, #8]
 8005478:	2b00      	cmp	r3, #0
 800547a:	d010      	beq.n	800549e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800547c:	7b7a      	ldrb	r2, [r7, #13]
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	32ae      	adds	r2, #174	; 0xae
 8005482:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005486:	689b      	ldr	r3, [r3, #8]
 8005488:	6839      	ldr	r1, [r7, #0]
 800548a:	6878      	ldr	r0, [r7, #4]
 800548c:	4798      	blx	r3
 800548e:	4603      	mov	r3, r0
 8005490:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8005492:	e004      	b.n	800549e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8005494:	6839      	ldr	r1, [r7, #0]
 8005496:	6878      	ldr	r0, [r7, #4]
 8005498:	f000 fc03 	bl	8005ca2 <USBD_CtlError>
              break;
 800549c:	e000      	b.n	80054a0 <USBD_StdEPReq+0x1c8>
              break;
 800549e:	bf00      	nop
          }
          break;
 80054a0:	e0ab      	b.n	80055fa <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80054a8:	b2db      	uxtb	r3, r3
 80054aa:	2b02      	cmp	r3, #2
 80054ac:	d002      	beq.n	80054b4 <USBD_StdEPReq+0x1dc>
 80054ae:	2b03      	cmp	r3, #3
 80054b0:	d032      	beq.n	8005518 <USBD_StdEPReq+0x240>
 80054b2:	e097      	b.n	80055e4 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80054b4:	7bbb      	ldrb	r3, [r7, #14]
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d007      	beq.n	80054ca <USBD_StdEPReq+0x1f2>
 80054ba:	7bbb      	ldrb	r3, [r7, #14]
 80054bc:	2b80      	cmp	r3, #128	; 0x80
 80054be:	d004      	beq.n	80054ca <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80054c0:	6839      	ldr	r1, [r7, #0]
 80054c2:	6878      	ldr	r0, [r7, #4]
 80054c4:	f000 fbed 	bl	8005ca2 <USBD_CtlError>
                break;
 80054c8:	e091      	b.n	80055ee <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80054ca:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	da0b      	bge.n	80054ea <USBD_StdEPReq+0x212>
 80054d2:	7bbb      	ldrb	r3, [r7, #14]
 80054d4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80054d8:	4613      	mov	r3, r2
 80054da:	009b      	lsls	r3, r3, #2
 80054dc:	4413      	add	r3, r2
 80054de:	009b      	lsls	r3, r3, #2
 80054e0:	3310      	adds	r3, #16
 80054e2:	687a      	ldr	r2, [r7, #4]
 80054e4:	4413      	add	r3, r2
 80054e6:	3304      	adds	r3, #4
 80054e8:	e00b      	b.n	8005502 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80054ea:	7bbb      	ldrb	r3, [r7, #14]
 80054ec:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80054f0:	4613      	mov	r3, r2
 80054f2:	009b      	lsls	r3, r3, #2
 80054f4:	4413      	add	r3, r2
 80054f6:	009b      	lsls	r3, r3, #2
 80054f8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80054fc:	687a      	ldr	r2, [r7, #4]
 80054fe:	4413      	add	r3, r2
 8005500:	3304      	adds	r3, #4
 8005502:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8005504:	68bb      	ldr	r3, [r7, #8]
 8005506:	2200      	movs	r2, #0
 8005508:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800550a:	68bb      	ldr	r3, [r7, #8]
 800550c:	2202      	movs	r2, #2
 800550e:	4619      	mov	r1, r3
 8005510:	6878      	ldr	r0, [r7, #4]
 8005512:	f000 fc37 	bl	8005d84 <USBD_CtlSendData>
              break;
 8005516:	e06a      	b.n	80055ee <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8005518:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800551c:	2b00      	cmp	r3, #0
 800551e:	da11      	bge.n	8005544 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8005520:	7bbb      	ldrb	r3, [r7, #14]
 8005522:	f003 020f 	and.w	r2, r3, #15
 8005526:	6879      	ldr	r1, [r7, #4]
 8005528:	4613      	mov	r3, r2
 800552a:	009b      	lsls	r3, r3, #2
 800552c:	4413      	add	r3, r2
 800552e:	009b      	lsls	r3, r3, #2
 8005530:	440b      	add	r3, r1
 8005532:	3324      	adds	r3, #36	; 0x24
 8005534:	881b      	ldrh	r3, [r3, #0]
 8005536:	2b00      	cmp	r3, #0
 8005538:	d117      	bne.n	800556a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800553a:	6839      	ldr	r1, [r7, #0]
 800553c:	6878      	ldr	r0, [r7, #4]
 800553e:	f000 fbb0 	bl	8005ca2 <USBD_CtlError>
                  break;
 8005542:	e054      	b.n	80055ee <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8005544:	7bbb      	ldrb	r3, [r7, #14]
 8005546:	f003 020f 	and.w	r2, r3, #15
 800554a:	6879      	ldr	r1, [r7, #4]
 800554c:	4613      	mov	r3, r2
 800554e:	009b      	lsls	r3, r3, #2
 8005550:	4413      	add	r3, r2
 8005552:	009b      	lsls	r3, r3, #2
 8005554:	440b      	add	r3, r1
 8005556:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800555a:	881b      	ldrh	r3, [r3, #0]
 800555c:	2b00      	cmp	r3, #0
 800555e:	d104      	bne.n	800556a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8005560:	6839      	ldr	r1, [r7, #0]
 8005562:	6878      	ldr	r0, [r7, #4]
 8005564:	f000 fb9d 	bl	8005ca2 <USBD_CtlError>
                  break;
 8005568:	e041      	b.n	80055ee <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800556a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800556e:	2b00      	cmp	r3, #0
 8005570:	da0b      	bge.n	800558a <USBD_StdEPReq+0x2b2>
 8005572:	7bbb      	ldrb	r3, [r7, #14]
 8005574:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005578:	4613      	mov	r3, r2
 800557a:	009b      	lsls	r3, r3, #2
 800557c:	4413      	add	r3, r2
 800557e:	009b      	lsls	r3, r3, #2
 8005580:	3310      	adds	r3, #16
 8005582:	687a      	ldr	r2, [r7, #4]
 8005584:	4413      	add	r3, r2
 8005586:	3304      	adds	r3, #4
 8005588:	e00b      	b.n	80055a2 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800558a:	7bbb      	ldrb	r3, [r7, #14]
 800558c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005590:	4613      	mov	r3, r2
 8005592:	009b      	lsls	r3, r3, #2
 8005594:	4413      	add	r3, r2
 8005596:	009b      	lsls	r3, r3, #2
 8005598:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800559c:	687a      	ldr	r2, [r7, #4]
 800559e:	4413      	add	r3, r2
 80055a0:	3304      	adds	r3, #4
 80055a2:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80055a4:	7bbb      	ldrb	r3, [r7, #14]
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d002      	beq.n	80055b0 <USBD_StdEPReq+0x2d8>
 80055aa:	7bbb      	ldrb	r3, [r7, #14]
 80055ac:	2b80      	cmp	r3, #128	; 0x80
 80055ae:	d103      	bne.n	80055b8 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80055b0:	68bb      	ldr	r3, [r7, #8]
 80055b2:	2200      	movs	r2, #0
 80055b4:	601a      	str	r2, [r3, #0]
 80055b6:	e00e      	b.n	80055d6 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80055b8:	7bbb      	ldrb	r3, [r7, #14]
 80055ba:	4619      	mov	r1, r3
 80055bc:	6878      	ldr	r0, [r7, #4]
 80055be:	f000 ffab 	bl	8006518 <USBD_LL_IsStallEP>
 80055c2:	4603      	mov	r3, r0
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d003      	beq.n	80055d0 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80055c8:	68bb      	ldr	r3, [r7, #8]
 80055ca:	2201      	movs	r2, #1
 80055cc:	601a      	str	r2, [r3, #0]
 80055ce:	e002      	b.n	80055d6 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80055d0:	68bb      	ldr	r3, [r7, #8]
 80055d2:	2200      	movs	r2, #0
 80055d4:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80055d6:	68bb      	ldr	r3, [r7, #8]
 80055d8:	2202      	movs	r2, #2
 80055da:	4619      	mov	r1, r3
 80055dc:	6878      	ldr	r0, [r7, #4]
 80055de:	f000 fbd1 	bl	8005d84 <USBD_CtlSendData>
              break;
 80055e2:	e004      	b.n	80055ee <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 80055e4:	6839      	ldr	r1, [r7, #0]
 80055e6:	6878      	ldr	r0, [r7, #4]
 80055e8:	f000 fb5b 	bl	8005ca2 <USBD_CtlError>
              break;
 80055ec:	bf00      	nop
          }
          break;
 80055ee:	e004      	b.n	80055fa <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80055f0:	6839      	ldr	r1, [r7, #0]
 80055f2:	6878      	ldr	r0, [r7, #4]
 80055f4:	f000 fb55 	bl	8005ca2 <USBD_CtlError>
          break;
 80055f8:	bf00      	nop
      }
      break;
 80055fa:	e005      	b.n	8005608 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80055fc:	6839      	ldr	r1, [r7, #0]
 80055fe:	6878      	ldr	r0, [r7, #4]
 8005600:	f000 fb4f 	bl	8005ca2 <USBD_CtlError>
      break;
 8005604:	e000      	b.n	8005608 <USBD_StdEPReq+0x330>
      break;
 8005606:	bf00      	nop
  }

  return ret;
 8005608:	7bfb      	ldrb	r3, [r7, #15]
}
 800560a:	4618      	mov	r0, r3
 800560c:	3710      	adds	r7, #16
 800560e:	46bd      	mov	sp, r7
 8005610:	bd80      	pop	{r7, pc}
	...

08005614 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005614:	b580      	push	{r7, lr}
 8005616:	b084      	sub	sp, #16
 8005618:	af00      	add	r7, sp, #0
 800561a:	6078      	str	r0, [r7, #4]
 800561c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800561e:	2300      	movs	r3, #0
 8005620:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8005622:	2300      	movs	r3, #0
 8005624:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8005626:	2300      	movs	r3, #0
 8005628:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800562a:	683b      	ldr	r3, [r7, #0]
 800562c:	885b      	ldrh	r3, [r3, #2]
 800562e:	0a1b      	lsrs	r3, r3, #8
 8005630:	b29b      	uxth	r3, r3
 8005632:	3b01      	subs	r3, #1
 8005634:	2b06      	cmp	r3, #6
 8005636:	f200 8128 	bhi.w	800588a <USBD_GetDescriptor+0x276>
 800563a:	a201      	add	r2, pc, #4	; (adr r2, 8005640 <USBD_GetDescriptor+0x2c>)
 800563c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005640:	0800565d 	.word	0x0800565d
 8005644:	08005675 	.word	0x08005675
 8005648:	080056b5 	.word	0x080056b5
 800564c:	0800588b 	.word	0x0800588b
 8005650:	0800588b 	.word	0x0800588b
 8005654:	0800582b 	.word	0x0800582b
 8005658:	08005857 	.word	0x08005857
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	687a      	ldr	r2, [r7, #4]
 8005666:	7c12      	ldrb	r2, [r2, #16]
 8005668:	f107 0108 	add.w	r1, r7, #8
 800566c:	4610      	mov	r0, r2
 800566e:	4798      	blx	r3
 8005670:	60f8      	str	r0, [r7, #12]
      break;
 8005672:	e112      	b.n	800589a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	7c1b      	ldrb	r3, [r3, #16]
 8005678:	2b00      	cmp	r3, #0
 800567a:	d10d      	bne.n	8005698 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005682:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005684:	f107 0208 	add.w	r2, r7, #8
 8005688:	4610      	mov	r0, r2
 800568a:	4798      	blx	r3
 800568c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	3301      	adds	r3, #1
 8005692:	2202      	movs	r2, #2
 8005694:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8005696:	e100      	b.n	800589a <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800569e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056a0:	f107 0208 	add.w	r2, r7, #8
 80056a4:	4610      	mov	r0, r2
 80056a6:	4798      	blx	r3
 80056a8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	3301      	adds	r3, #1
 80056ae:	2202      	movs	r2, #2
 80056b0:	701a      	strb	r2, [r3, #0]
      break;
 80056b2:	e0f2      	b.n	800589a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80056b4:	683b      	ldr	r3, [r7, #0]
 80056b6:	885b      	ldrh	r3, [r3, #2]
 80056b8:	b2db      	uxtb	r3, r3
 80056ba:	2b05      	cmp	r3, #5
 80056bc:	f200 80ac 	bhi.w	8005818 <USBD_GetDescriptor+0x204>
 80056c0:	a201      	add	r2, pc, #4	; (adr r2, 80056c8 <USBD_GetDescriptor+0xb4>)
 80056c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056c6:	bf00      	nop
 80056c8:	080056e1 	.word	0x080056e1
 80056cc:	08005715 	.word	0x08005715
 80056d0:	08005749 	.word	0x08005749
 80056d4:	0800577d 	.word	0x0800577d
 80056d8:	080057b1 	.word	0x080057b1
 80056dc:	080057e5 	.word	0x080057e5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80056e6:	685b      	ldr	r3, [r3, #4]
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d00b      	beq.n	8005704 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80056f2:	685b      	ldr	r3, [r3, #4]
 80056f4:	687a      	ldr	r2, [r7, #4]
 80056f6:	7c12      	ldrb	r2, [r2, #16]
 80056f8:	f107 0108 	add.w	r1, r7, #8
 80056fc:	4610      	mov	r0, r2
 80056fe:	4798      	blx	r3
 8005700:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005702:	e091      	b.n	8005828 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005704:	6839      	ldr	r1, [r7, #0]
 8005706:	6878      	ldr	r0, [r7, #4]
 8005708:	f000 facb 	bl	8005ca2 <USBD_CtlError>
            err++;
 800570c:	7afb      	ldrb	r3, [r7, #11]
 800570e:	3301      	adds	r3, #1
 8005710:	72fb      	strb	r3, [r7, #11]
          break;
 8005712:	e089      	b.n	8005828 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800571a:	689b      	ldr	r3, [r3, #8]
 800571c:	2b00      	cmp	r3, #0
 800571e:	d00b      	beq.n	8005738 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005726:	689b      	ldr	r3, [r3, #8]
 8005728:	687a      	ldr	r2, [r7, #4]
 800572a:	7c12      	ldrb	r2, [r2, #16]
 800572c:	f107 0108 	add.w	r1, r7, #8
 8005730:	4610      	mov	r0, r2
 8005732:	4798      	blx	r3
 8005734:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005736:	e077      	b.n	8005828 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005738:	6839      	ldr	r1, [r7, #0]
 800573a:	6878      	ldr	r0, [r7, #4]
 800573c:	f000 fab1 	bl	8005ca2 <USBD_CtlError>
            err++;
 8005740:	7afb      	ldrb	r3, [r7, #11]
 8005742:	3301      	adds	r3, #1
 8005744:	72fb      	strb	r3, [r7, #11]
          break;
 8005746:	e06f      	b.n	8005828 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800574e:	68db      	ldr	r3, [r3, #12]
 8005750:	2b00      	cmp	r3, #0
 8005752:	d00b      	beq.n	800576c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800575a:	68db      	ldr	r3, [r3, #12]
 800575c:	687a      	ldr	r2, [r7, #4]
 800575e:	7c12      	ldrb	r2, [r2, #16]
 8005760:	f107 0108 	add.w	r1, r7, #8
 8005764:	4610      	mov	r0, r2
 8005766:	4798      	blx	r3
 8005768:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800576a:	e05d      	b.n	8005828 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800576c:	6839      	ldr	r1, [r7, #0]
 800576e:	6878      	ldr	r0, [r7, #4]
 8005770:	f000 fa97 	bl	8005ca2 <USBD_CtlError>
            err++;
 8005774:	7afb      	ldrb	r3, [r7, #11]
 8005776:	3301      	adds	r3, #1
 8005778:	72fb      	strb	r3, [r7, #11]
          break;
 800577a:	e055      	b.n	8005828 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005782:	691b      	ldr	r3, [r3, #16]
 8005784:	2b00      	cmp	r3, #0
 8005786:	d00b      	beq.n	80057a0 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800578e:	691b      	ldr	r3, [r3, #16]
 8005790:	687a      	ldr	r2, [r7, #4]
 8005792:	7c12      	ldrb	r2, [r2, #16]
 8005794:	f107 0108 	add.w	r1, r7, #8
 8005798:	4610      	mov	r0, r2
 800579a:	4798      	blx	r3
 800579c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800579e:	e043      	b.n	8005828 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80057a0:	6839      	ldr	r1, [r7, #0]
 80057a2:	6878      	ldr	r0, [r7, #4]
 80057a4:	f000 fa7d 	bl	8005ca2 <USBD_CtlError>
            err++;
 80057a8:	7afb      	ldrb	r3, [r7, #11]
 80057aa:	3301      	adds	r3, #1
 80057ac:	72fb      	strb	r3, [r7, #11]
          break;
 80057ae:	e03b      	b.n	8005828 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80057b6:	695b      	ldr	r3, [r3, #20]
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d00b      	beq.n	80057d4 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80057c2:	695b      	ldr	r3, [r3, #20]
 80057c4:	687a      	ldr	r2, [r7, #4]
 80057c6:	7c12      	ldrb	r2, [r2, #16]
 80057c8:	f107 0108 	add.w	r1, r7, #8
 80057cc:	4610      	mov	r0, r2
 80057ce:	4798      	blx	r3
 80057d0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80057d2:	e029      	b.n	8005828 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80057d4:	6839      	ldr	r1, [r7, #0]
 80057d6:	6878      	ldr	r0, [r7, #4]
 80057d8:	f000 fa63 	bl	8005ca2 <USBD_CtlError>
            err++;
 80057dc:	7afb      	ldrb	r3, [r7, #11]
 80057de:	3301      	adds	r3, #1
 80057e0:	72fb      	strb	r3, [r7, #11]
          break;
 80057e2:	e021      	b.n	8005828 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80057ea:	699b      	ldr	r3, [r3, #24]
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d00b      	beq.n	8005808 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80057f6:	699b      	ldr	r3, [r3, #24]
 80057f8:	687a      	ldr	r2, [r7, #4]
 80057fa:	7c12      	ldrb	r2, [r2, #16]
 80057fc:	f107 0108 	add.w	r1, r7, #8
 8005800:	4610      	mov	r0, r2
 8005802:	4798      	blx	r3
 8005804:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005806:	e00f      	b.n	8005828 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005808:	6839      	ldr	r1, [r7, #0]
 800580a:	6878      	ldr	r0, [r7, #4]
 800580c:	f000 fa49 	bl	8005ca2 <USBD_CtlError>
            err++;
 8005810:	7afb      	ldrb	r3, [r7, #11]
 8005812:	3301      	adds	r3, #1
 8005814:	72fb      	strb	r3, [r7, #11]
          break;
 8005816:	e007      	b.n	8005828 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8005818:	6839      	ldr	r1, [r7, #0]
 800581a:	6878      	ldr	r0, [r7, #4]
 800581c:	f000 fa41 	bl	8005ca2 <USBD_CtlError>
          err++;
 8005820:	7afb      	ldrb	r3, [r7, #11]
 8005822:	3301      	adds	r3, #1
 8005824:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8005826:	bf00      	nop
      }
      break;
 8005828:	e037      	b.n	800589a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	7c1b      	ldrb	r3, [r3, #16]
 800582e:	2b00      	cmp	r3, #0
 8005830:	d109      	bne.n	8005846 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005838:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800583a:	f107 0208 	add.w	r2, r7, #8
 800583e:	4610      	mov	r0, r2
 8005840:	4798      	blx	r3
 8005842:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005844:	e029      	b.n	800589a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8005846:	6839      	ldr	r1, [r7, #0]
 8005848:	6878      	ldr	r0, [r7, #4]
 800584a:	f000 fa2a 	bl	8005ca2 <USBD_CtlError>
        err++;
 800584e:	7afb      	ldrb	r3, [r7, #11]
 8005850:	3301      	adds	r3, #1
 8005852:	72fb      	strb	r3, [r7, #11]
      break;
 8005854:	e021      	b.n	800589a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	7c1b      	ldrb	r3, [r3, #16]
 800585a:	2b00      	cmp	r3, #0
 800585c:	d10d      	bne.n	800587a <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005866:	f107 0208 	add.w	r2, r7, #8
 800586a:	4610      	mov	r0, r2
 800586c:	4798      	blx	r3
 800586e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	3301      	adds	r3, #1
 8005874:	2207      	movs	r2, #7
 8005876:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005878:	e00f      	b.n	800589a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800587a:	6839      	ldr	r1, [r7, #0]
 800587c:	6878      	ldr	r0, [r7, #4]
 800587e:	f000 fa10 	bl	8005ca2 <USBD_CtlError>
        err++;
 8005882:	7afb      	ldrb	r3, [r7, #11]
 8005884:	3301      	adds	r3, #1
 8005886:	72fb      	strb	r3, [r7, #11]
      break;
 8005888:	e007      	b.n	800589a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800588a:	6839      	ldr	r1, [r7, #0]
 800588c:	6878      	ldr	r0, [r7, #4]
 800588e:	f000 fa08 	bl	8005ca2 <USBD_CtlError>
      err++;
 8005892:	7afb      	ldrb	r3, [r7, #11]
 8005894:	3301      	adds	r3, #1
 8005896:	72fb      	strb	r3, [r7, #11]
      break;
 8005898:	bf00      	nop
  }

  if (err != 0U)
 800589a:	7afb      	ldrb	r3, [r7, #11]
 800589c:	2b00      	cmp	r3, #0
 800589e:	d11e      	bne.n	80058de <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 80058a0:	683b      	ldr	r3, [r7, #0]
 80058a2:	88db      	ldrh	r3, [r3, #6]
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d016      	beq.n	80058d6 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 80058a8:	893b      	ldrh	r3, [r7, #8]
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d00e      	beq.n	80058cc <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 80058ae:	683b      	ldr	r3, [r7, #0]
 80058b0:	88da      	ldrh	r2, [r3, #6]
 80058b2:	893b      	ldrh	r3, [r7, #8]
 80058b4:	4293      	cmp	r3, r2
 80058b6:	bf28      	it	cs
 80058b8:	4613      	movcs	r3, r2
 80058ba:	b29b      	uxth	r3, r3
 80058bc:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80058be:	893b      	ldrh	r3, [r7, #8]
 80058c0:	461a      	mov	r2, r3
 80058c2:	68f9      	ldr	r1, [r7, #12]
 80058c4:	6878      	ldr	r0, [r7, #4]
 80058c6:	f000 fa5d 	bl	8005d84 <USBD_CtlSendData>
 80058ca:	e009      	b.n	80058e0 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80058cc:	6839      	ldr	r1, [r7, #0]
 80058ce:	6878      	ldr	r0, [r7, #4]
 80058d0:	f000 f9e7 	bl	8005ca2 <USBD_CtlError>
 80058d4:	e004      	b.n	80058e0 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80058d6:	6878      	ldr	r0, [r7, #4]
 80058d8:	f000 fa91 	bl	8005dfe <USBD_CtlSendStatus>
 80058dc:	e000      	b.n	80058e0 <USBD_GetDescriptor+0x2cc>
    return;
 80058de:	bf00      	nop
  }
}
 80058e0:	3710      	adds	r7, #16
 80058e2:	46bd      	mov	sp, r7
 80058e4:	bd80      	pop	{r7, pc}
 80058e6:	bf00      	nop

080058e8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80058e8:	b580      	push	{r7, lr}
 80058ea:	b084      	sub	sp, #16
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	6078      	str	r0, [r7, #4]
 80058f0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80058f2:	683b      	ldr	r3, [r7, #0]
 80058f4:	889b      	ldrh	r3, [r3, #4]
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d131      	bne.n	800595e <USBD_SetAddress+0x76>
 80058fa:	683b      	ldr	r3, [r7, #0]
 80058fc:	88db      	ldrh	r3, [r3, #6]
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d12d      	bne.n	800595e <USBD_SetAddress+0x76>
 8005902:	683b      	ldr	r3, [r7, #0]
 8005904:	885b      	ldrh	r3, [r3, #2]
 8005906:	2b7f      	cmp	r3, #127	; 0x7f
 8005908:	d829      	bhi.n	800595e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800590a:	683b      	ldr	r3, [r7, #0]
 800590c:	885b      	ldrh	r3, [r3, #2]
 800590e:	b2db      	uxtb	r3, r3
 8005910:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005914:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800591c:	b2db      	uxtb	r3, r3
 800591e:	2b03      	cmp	r3, #3
 8005920:	d104      	bne.n	800592c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8005922:	6839      	ldr	r1, [r7, #0]
 8005924:	6878      	ldr	r0, [r7, #4]
 8005926:	f000 f9bc 	bl	8005ca2 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800592a:	e01d      	b.n	8005968 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	7bfa      	ldrb	r2, [r7, #15]
 8005930:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8005934:	7bfb      	ldrb	r3, [r7, #15]
 8005936:	4619      	mov	r1, r3
 8005938:	6878      	ldr	r0, [r7, #4]
 800593a:	f000 fe19 	bl	8006570 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800593e:	6878      	ldr	r0, [r7, #4]
 8005940:	f000 fa5d 	bl	8005dfe <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8005944:	7bfb      	ldrb	r3, [r7, #15]
 8005946:	2b00      	cmp	r3, #0
 8005948:	d004      	beq.n	8005954 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	2202      	movs	r2, #2
 800594e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005952:	e009      	b.n	8005968 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	2201      	movs	r2, #1
 8005958:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800595c:	e004      	b.n	8005968 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800595e:	6839      	ldr	r1, [r7, #0]
 8005960:	6878      	ldr	r0, [r7, #4]
 8005962:	f000 f99e 	bl	8005ca2 <USBD_CtlError>
  }
}
 8005966:	bf00      	nop
 8005968:	bf00      	nop
 800596a:	3710      	adds	r7, #16
 800596c:	46bd      	mov	sp, r7
 800596e:	bd80      	pop	{r7, pc}

08005970 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005970:	b580      	push	{r7, lr}
 8005972:	b084      	sub	sp, #16
 8005974:	af00      	add	r7, sp, #0
 8005976:	6078      	str	r0, [r7, #4]
 8005978:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800597a:	2300      	movs	r3, #0
 800597c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800597e:	683b      	ldr	r3, [r7, #0]
 8005980:	885b      	ldrh	r3, [r3, #2]
 8005982:	b2da      	uxtb	r2, r3
 8005984:	4b4e      	ldr	r3, [pc, #312]	; (8005ac0 <USBD_SetConfig+0x150>)
 8005986:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8005988:	4b4d      	ldr	r3, [pc, #308]	; (8005ac0 <USBD_SetConfig+0x150>)
 800598a:	781b      	ldrb	r3, [r3, #0]
 800598c:	2b01      	cmp	r3, #1
 800598e:	d905      	bls.n	800599c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8005990:	6839      	ldr	r1, [r7, #0]
 8005992:	6878      	ldr	r0, [r7, #4]
 8005994:	f000 f985 	bl	8005ca2 <USBD_CtlError>
    return USBD_FAIL;
 8005998:	2303      	movs	r3, #3
 800599a:	e08c      	b.n	8005ab6 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80059a2:	b2db      	uxtb	r3, r3
 80059a4:	2b02      	cmp	r3, #2
 80059a6:	d002      	beq.n	80059ae <USBD_SetConfig+0x3e>
 80059a8:	2b03      	cmp	r3, #3
 80059aa:	d029      	beq.n	8005a00 <USBD_SetConfig+0x90>
 80059ac:	e075      	b.n	8005a9a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80059ae:	4b44      	ldr	r3, [pc, #272]	; (8005ac0 <USBD_SetConfig+0x150>)
 80059b0:	781b      	ldrb	r3, [r3, #0]
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d020      	beq.n	80059f8 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80059b6:	4b42      	ldr	r3, [pc, #264]	; (8005ac0 <USBD_SetConfig+0x150>)
 80059b8:	781b      	ldrb	r3, [r3, #0]
 80059ba:	461a      	mov	r2, r3
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80059c0:	4b3f      	ldr	r3, [pc, #252]	; (8005ac0 <USBD_SetConfig+0x150>)
 80059c2:	781b      	ldrb	r3, [r3, #0]
 80059c4:	4619      	mov	r1, r3
 80059c6:	6878      	ldr	r0, [r7, #4]
 80059c8:	f7fe ffe7 	bl	800499a <USBD_SetClassConfig>
 80059cc:	4603      	mov	r3, r0
 80059ce:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80059d0:	7bfb      	ldrb	r3, [r7, #15]
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d008      	beq.n	80059e8 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80059d6:	6839      	ldr	r1, [r7, #0]
 80059d8:	6878      	ldr	r0, [r7, #4]
 80059da:	f000 f962 	bl	8005ca2 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	2202      	movs	r2, #2
 80059e2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80059e6:	e065      	b.n	8005ab4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80059e8:	6878      	ldr	r0, [r7, #4]
 80059ea:	f000 fa08 	bl	8005dfe <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	2203      	movs	r2, #3
 80059f2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80059f6:	e05d      	b.n	8005ab4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80059f8:	6878      	ldr	r0, [r7, #4]
 80059fa:	f000 fa00 	bl	8005dfe <USBD_CtlSendStatus>
      break;
 80059fe:	e059      	b.n	8005ab4 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8005a00:	4b2f      	ldr	r3, [pc, #188]	; (8005ac0 <USBD_SetConfig+0x150>)
 8005a02:	781b      	ldrb	r3, [r3, #0]
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d112      	bne.n	8005a2e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	2202      	movs	r2, #2
 8005a0c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8005a10:	4b2b      	ldr	r3, [pc, #172]	; (8005ac0 <USBD_SetConfig+0x150>)
 8005a12:	781b      	ldrb	r3, [r3, #0]
 8005a14:	461a      	mov	r2, r3
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8005a1a:	4b29      	ldr	r3, [pc, #164]	; (8005ac0 <USBD_SetConfig+0x150>)
 8005a1c:	781b      	ldrb	r3, [r3, #0]
 8005a1e:	4619      	mov	r1, r3
 8005a20:	6878      	ldr	r0, [r7, #4]
 8005a22:	f7fe ffd6 	bl	80049d2 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8005a26:	6878      	ldr	r0, [r7, #4]
 8005a28:	f000 f9e9 	bl	8005dfe <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8005a2c:	e042      	b.n	8005ab4 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8005a2e:	4b24      	ldr	r3, [pc, #144]	; (8005ac0 <USBD_SetConfig+0x150>)
 8005a30:	781b      	ldrb	r3, [r3, #0]
 8005a32:	461a      	mov	r2, r3
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	685b      	ldr	r3, [r3, #4]
 8005a38:	429a      	cmp	r2, r3
 8005a3a:	d02a      	beq.n	8005a92 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	685b      	ldr	r3, [r3, #4]
 8005a40:	b2db      	uxtb	r3, r3
 8005a42:	4619      	mov	r1, r3
 8005a44:	6878      	ldr	r0, [r7, #4]
 8005a46:	f7fe ffc4 	bl	80049d2 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8005a4a:	4b1d      	ldr	r3, [pc, #116]	; (8005ac0 <USBD_SetConfig+0x150>)
 8005a4c:	781b      	ldrb	r3, [r3, #0]
 8005a4e:	461a      	mov	r2, r3
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8005a54:	4b1a      	ldr	r3, [pc, #104]	; (8005ac0 <USBD_SetConfig+0x150>)
 8005a56:	781b      	ldrb	r3, [r3, #0]
 8005a58:	4619      	mov	r1, r3
 8005a5a:	6878      	ldr	r0, [r7, #4]
 8005a5c:	f7fe ff9d 	bl	800499a <USBD_SetClassConfig>
 8005a60:	4603      	mov	r3, r0
 8005a62:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8005a64:	7bfb      	ldrb	r3, [r7, #15]
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d00f      	beq.n	8005a8a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8005a6a:	6839      	ldr	r1, [r7, #0]
 8005a6c:	6878      	ldr	r0, [r7, #4]
 8005a6e:	f000 f918 	bl	8005ca2 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	685b      	ldr	r3, [r3, #4]
 8005a76:	b2db      	uxtb	r3, r3
 8005a78:	4619      	mov	r1, r3
 8005a7a:	6878      	ldr	r0, [r7, #4]
 8005a7c:	f7fe ffa9 	bl	80049d2 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	2202      	movs	r2, #2
 8005a84:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8005a88:	e014      	b.n	8005ab4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8005a8a:	6878      	ldr	r0, [r7, #4]
 8005a8c:	f000 f9b7 	bl	8005dfe <USBD_CtlSendStatus>
      break;
 8005a90:	e010      	b.n	8005ab4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8005a92:	6878      	ldr	r0, [r7, #4]
 8005a94:	f000 f9b3 	bl	8005dfe <USBD_CtlSendStatus>
      break;
 8005a98:	e00c      	b.n	8005ab4 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8005a9a:	6839      	ldr	r1, [r7, #0]
 8005a9c:	6878      	ldr	r0, [r7, #4]
 8005a9e:	f000 f900 	bl	8005ca2 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8005aa2:	4b07      	ldr	r3, [pc, #28]	; (8005ac0 <USBD_SetConfig+0x150>)
 8005aa4:	781b      	ldrb	r3, [r3, #0]
 8005aa6:	4619      	mov	r1, r3
 8005aa8:	6878      	ldr	r0, [r7, #4]
 8005aaa:	f7fe ff92 	bl	80049d2 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8005aae:	2303      	movs	r3, #3
 8005ab0:	73fb      	strb	r3, [r7, #15]
      break;
 8005ab2:	bf00      	nop
  }

  return ret;
 8005ab4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ab6:	4618      	mov	r0, r3
 8005ab8:	3710      	adds	r7, #16
 8005aba:	46bd      	mov	sp, r7
 8005abc:	bd80      	pop	{r7, pc}
 8005abe:	bf00      	nop
 8005ac0:	20000144 	.word	0x20000144

08005ac4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005ac4:	b580      	push	{r7, lr}
 8005ac6:	b082      	sub	sp, #8
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	6078      	str	r0, [r7, #4]
 8005acc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8005ace:	683b      	ldr	r3, [r7, #0]
 8005ad0:	88db      	ldrh	r3, [r3, #6]
 8005ad2:	2b01      	cmp	r3, #1
 8005ad4:	d004      	beq.n	8005ae0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8005ad6:	6839      	ldr	r1, [r7, #0]
 8005ad8:	6878      	ldr	r0, [r7, #4]
 8005ada:	f000 f8e2 	bl	8005ca2 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8005ade:	e023      	b.n	8005b28 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005ae6:	b2db      	uxtb	r3, r3
 8005ae8:	2b02      	cmp	r3, #2
 8005aea:	dc02      	bgt.n	8005af2 <USBD_GetConfig+0x2e>
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	dc03      	bgt.n	8005af8 <USBD_GetConfig+0x34>
 8005af0:	e015      	b.n	8005b1e <USBD_GetConfig+0x5a>
 8005af2:	2b03      	cmp	r3, #3
 8005af4:	d00b      	beq.n	8005b0e <USBD_GetConfig+0x4a>
 8005af6:	e012      	b.n	8005b1e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	2200      	movs	r2, #0
 8005afc:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	3308      	adds	r3, #8
 8005b02:	2201      	movs	r2, #1
 8005b04:	4619      	mov	r1, r3
 8005b06:	6878      	ldr	r0, [r7, #4]
 8005b08:	f000 f93c 	bl	8005d84 <USBD_CtlSendData>
        break;
 8005b0c:	e00c      	b.n	8005b28 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	3304      	adds	r3, #4
 8005b12:	2201      	movs	r2, #1
 8005b14:	4619      	mov	r1, r3
 8005b16:	6878      	ldr	r0, [r7, #4]
 8005b18:	f000 f934 	bl	8005d84 <USBD_CtlSendData>
        break;
 8005b1c:	e004      	b.n	8005b28 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8005b1e:	6839      	ldr	r1, [r7, #0]
 8005b20:	6878      	ldr	r0, [r7, #4]
 8005b22:	f000 f8be 	bl	8005ca2 <USBD_CtlError>
        break;
 8005b26:	bf00      	nop
}
 8005b28:	bf00      	nop
 8005b2a:	3708      	adds	r7, #8
 8005b2c:	46bd      	mov	sp, r7
 8005b2e:	bd80      	pop	{r7, pc}

08005b30 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005b30:	b580      	push	{r7, lr}
 8005b32:	b082      	sub	sp, #8
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	6078      	str	r0, [r7, #4]
 8005b38:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005b40:	b2db      	uxtb	r3, r3
 8005b42:	3b01      	subs	r3, #1
 8005b44:	2b02      	cmp	r3, #2
 8005b46:	d81e      	bhi.n	8005b86 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8005b48:	683b      	ldr	r3, [r7, #0]
 8005b4a:	88db      	ldrh	r3, [r3, #6]
 8005b4c:	2b02      	cmp	r3, #2
 8005b4e:	d004      	beq.n	8005b5a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8005b50:	6839      	ldr	r1, [r7, #0]
 8005b52:	6878      	ldr	r0, [r7, #4]
 8005b54:	f000 f8a5 	bl	8005ca2 <USBD_CtlError>
        break;
 8005b58:	e01a      	b.n	8005b90 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	2201      	movs	r2, #1
 8005b5e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d005      	beq.n	8005b76 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	68db      	ldr	r3, [r3, #12]
 8005b6e:	f043 0202 	orr.w	r2, r3, #2
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	330c      	adds	r3, #12
 8005b7a:	2202      	movs	r2, #2
 8005b7c:	4619      	mov	r1, r3
 8005b7e:	6878      	ldr	r0, [r7, #4]
 8005b80:	f000 f900 	bl	8005d84 <USBD_CtlSendData>
      break;
 8005b84:	e004      	b.n	8005b90 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8005b86:	6839      	ldr	r1, [r7, #0]
 8005b88:	6878      	ldr	r0, [r7, #4]
 8005b8a:	f000 f88a 	bl	8005ca2 <USBD_CtlError>
      break;
 8005b8e:	bf00      	nop
  }
}
 8005b90:	bf00      	nop
 8005b92:	3708      	adds	r7, #8
 8005b94:	46bd      	mov	sp, r7
 8005b96:	bd80      	pop	{r7, pc}

08005b98 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005b98:	b580      	push	{r7, lr}
 8005b9a:	b082      	sub	sp, #8
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	6078      	str	r0, [r7, #4]
 8005ba0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005ba2:	683b      	ldr	r3, [r7, #0]
 8005ba4:	885b      	ldrh	r3, [r3, #2]
 8005ba6:	2b01      	cmp	r3, #1
 8005ba8:	d107      	bne.n	8005bba <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	2201      	movs	r2, #1
 8005bae:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8005bb2:	6878      	ldr	r0, [r7, #4]
 8005bb4:	f000 f923 	bl	8005dfe <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8005bb8:	e013      	b.n	8005be2 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8005bba:	683b      	ldr	r3, [r7, #0]
 8005bbc:	885b      	ldrh	r3, [r3, #2]
 8005bbe:	2b02      	cmp	r3, #2
 8005bc0:	d10b      	bne.n	8005bda <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8005bc2:	683b      	ldr	r3, [r7, #0]
 8005bc4:	889b      	ldrh	r3, [r3, #4]
 8005bc6:	0a1b      	lsrs	r3, r3, #8
 8005bc8:	b29b      	uxth	r3, r3
 8005bca:	b2da      	uxtb	r2, r3
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8005bd2:	6878      	ldr	r0, [r7, #4]
 8005bd4:	f000 f913 	bl	8005dfe <USBD_CtlSendStatus>
}
 8005bd8:	e003      	b.n	8005be2 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8005bda:	6839      	ldr	r1, [r7, #0]
 8005bdc:	6878      	ldr	r0, [r7, #4]
 8005bde:	f000 f860 	bl	8005ca2 <USBD_CtlError>
}
 8005be2:	bf00      	nop
 8005be4:	3708      	adds	r7, #8
 8005be6:	46bd      	mov	sp, r7
 8005be8:	bd80      	pop	{r7, pc}

08005bea <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005bea:	b580      	push	{r7, lr}
 8005bec:	b082      	sub	sp, #8
 8005bee:	af00      	add	r7, sp, #0
 8005bf0:	6078      	str	r0, [r7, #4]
 8005bf2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005bfa:	b2db      	uxtb	r3, r3
 8005bfc:	3b01      	subs	r3, #1
 8005bfe:	2b02      	cmp	r3, #2
 8005c00:	d80b      	bhi.n	8005c1a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005c02:	683b      	ldr	r3, [r7, #0]
 8005c04:	885b      	ldrh	r3, [r3, #2]
 8005c06:	2b01      	cmp	r3, #1
 8005c08:	d10c      	bne.n	8005c24 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	2200      	movs	r2, #0
 8005c0e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8005c12:	6878      	ldr	r0, [r7, #4]
 8005c14:	f000 f8f3 	bl	8005dfe <USBD_CtlSendStatus>
      }
      break;
 8005c18:	e004      	b.n	8005c24 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8005c1a:	6839      	ldr	r1, [r7, #0]
 8005c1c:	6878      	ldr	r0, [r7, #4]
 8005c1e:	f000 f840 	bl	8005ca2 <USBD_CtlError>
      break;
 8005c22:	e000      	b.n	8005c26 <USBD_ClrFeature+0x3c>
      break;
 8005c24:	bf00      	nop
  }
}
 8005c26:	bf00      	nop
 8005c28:	3708      	adds	r7, #8
 8005c2a:	46bd      	mov	sp, r7
 8005c2c:	bd80      	pop	{r7, pc}

08005c2e <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8005c2e:	b580      	push	{r7, lr}
 8005c30:	b084      	sub	sp, #16
 8005c32:	af00      	add	r7, sp, #0
 8005c34:	6078      	str	r0, [r7, #4]
 8005c36:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8005c38:	683b      	ldr	r3, [r7, #0]
 8005c3a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	781a      	ldrb	r2, [r3, #0]
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	3301      	adds	r3, #1
 8005c48:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	781a      	ldrb	r2, [r3, #0]
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	3301      	adds	r3, #1
 8005c56:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8005c58:	68f8      	ldr	r0, [r7, #12]
 8005c5a:	f7ff fa41 	bl	80050e0 <SWAPBYTE>
 8005c5e:	4603      	mov	r3, r0
 8005c60:	461a      	mov	r2, r3
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	3301      	adds	r3, #1
 8005c6a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	3301      	adds	r3, #1
 8005c70:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8005c72:	68f8      	ldr	r0, [r7, #12]
 8005c74:	f7ff fa34 	bl	80050e0 <SWAPBYTE>
 8005c78:	4603      	mov	r3, r0
 8005c7a:	461a      	mov	r2, r3
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	3301      	adds	r3, #1
 8005c84:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	3301      	adds	r3, #1
 8005c8a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8005c8c:	68f8      	ldr	r0, [r7, #12]
 8005c8e:	f7ff fa27 	bl	80050e0 <SWAPBYTE>
 8005c92:	4603      	mov	r3, r0
 8005c94:	461a      	mov	r2, r3
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	80da      	strh	r2, [r3, #6]
}
 8005c9a:	bf00      	nop
 8005c9c:	3710      	adds	r7, #16
 8005c9e:	46bd      	mov	sp, r7
 8005ca0:	bd80      	pop	{r7, pc}

08005ca2 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005ca2:	b580      	push	{r7, lr}
 8005ca4:	b082      	sub	sp, #8
 8005ca6:	af00      	add	r7, sp, #0
 8005ca8:	6078      	str	r0, [r7, #4]
 8005caa:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8005cac:	2180      	movs	r1, #128	; 0x80
 8005cae:	6878      	ldr	r0, [r7, #4]
 8005cb0:	f000 fbf4 	bl	800649c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8005cb4:	2100      	movs	r1, #0
 8005cb6:	6878      	ldr	r0, [r7, #4]
 8005cb8:	f000 fbf0 	bl	800649c <USBD_LL_StallEP>
}
 8005cbc:	bf00      	nop
 8005cbe:	3708      	adds	r7, #8
 8005cc0:	46bd      	mov	sp, r7
 8005cc2:	bd80      	pop	{r7, pc}

08005cc4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8005cc4:	b580      	push	{r7, lr}
 8005cc6:	b086      	sub	sp, #24
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	60f8      	str	r0, [r7, #12]
 8005ccc:	60b9      	str	r1, [r7, #8]
 8005cce:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8005cd0:	2300      	movs	r3, #0
 8005cd2:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d036      	beq.n	8005d48 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8005cde:	6938      	ldr	r0, [r7, #16]
 8005ce0:	f000 f836 	bl	8005d50 <USBD_GetLen>
 8005ce4:	4603      	mov	r3, r0
 8005ce6:	3301      	adds	r3, #1
 8005ce8:	b29b      	uxth	r3, r3
 8005cea:	005b      	lsls	r3, r3, #1
 8005cec:	b29a      	uxth	r2, r3
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8005cf2:	7dfb      	ldrb	r3, [r7, #23]
 8005cf4:	68ba      	ldr	r2, [r7, #8]
 8005cf6:	4413      	add	r3, r2
 8005cf8:	687a      	ldr	r2, [r7, #4]
 8005cfa:	7812      	ldrb	r2, [r2, #0]
 8005cfc:	701a      	strb	r2, [r3, #0]
  idx++;
 8005cfe:	7dfb      	ldrb	r3, [r7, #23]
 8005d00:	3301      	adds	r3, #1
 8005d02:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8005d04:	7dfb      	ldrb	r3, [r7, #23]
 8005d06:	68ba      	ldr	r2, [r7, #8]
 8005d08:	4413      	add	r3, r2
 8005d0a:	2203      	movs	r2, #3
 8005d0c:	701a      	strb	r2, [r3, #0]
  idx++;
 8005d0e:	7dfb      	ldrb	r3, [r7, #23]
 8005d10:	3301      	adds	r3, #1
 8005d12:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8005d14:	e013      	b.n	8005d3e <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8005d16:	7dfb      	ldrb	r3, [r7, #23]
 8005d18:	68ba      	ldr	r2, [r7, #8]
 8005d1a:	4413      	add	r3, r2
 8005d1c:	693a      	ldr	r2, [r7, #16]
 8005d1e:	7812      	ldrb	r2, [r2, #0]
 8005d20:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8005d22:	693b      	ldr	r3, [r7, #16]
 8005d24:	3301      	adds	r3, #1
 8005d26:	613b      	str	r3, [r7, #16]
    idx++;
 8005d28:	7dfb      	ldrb	r3, [r7, #23]
 8005d2a:	3301      	adds	r3, #1
 8005d2c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8005d2e:	7dfb      	ldrb	r3, [r7, #23]
 8005d30:	68ba      	ldr	r2, [r7, #8]
 8005d32:	4413      	add	r3, r2
 8005d34:	2200      	movs	r2, #0
 8005d36:	701a      	strb	r2, [r3, #0]
    idx++;
 8005d38:	7dfb      	ldrb	r3, [r7, #23]
 8005d3a:	3301      	adds	r3, #1
 8005d3c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8005d3e:	693b      	ldr	r3, [r7, #16]
 8005d40:	781b      	ldrb	r3, [r3, #0]
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d1e7      	bne.n	8005d16 <USBD_GetString+0x52>
 8005d46:	e000      	b.n	8005d4a <USBD_GetString+0x86>
    return;
 8005d48:	bf00      	nop
  }
}
 8005d4a:	3718      	adds	r7, #24
 8005d4c:	46bd      	mov	sp, r7
 8005d4e:	bd80      	pop	{r7, pc}

08005d50 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8005d50:	b480      	push	{r7}
 8005d52:	b085      	sub	sp, #20
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8005d58:	2300      	movs	r3, #0
 8005d5a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8005d60:	e005      	b.n	8005d6e <USBD_GetLen+0x1e>
  {
    len++;
 8005d62:	7bfb      	ldrb	r3, [r7, #15]
 8005d64:	3301      	adds	r3, #1
 8005d66:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8005d68:	68bb      	ldr	r3, [r7, #8]
 8005d6a:	3301      	adds	r3, #1
 8005d6c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8005d6e:	68bb      	ldr	r3, [r7, #8]
 8005d70:	781b      	ldrb	r3, [r3, #0]
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d1f5      	bne.n	8005d62 <USBD_GetLen+0x12>
  }

  return len;
 8005d76:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d78:	4618      	mov	r0, r3
 8005d7a:	3714      	adds	r7, #20
 8005d7c:	46bd      	mov	sp, r7
 8005d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d82:	4770      	bx	lr

08005d84 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8005d84:	b580      	push	{r7, lr}
 8005d86:	b084      	sub	sp, #16
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	60f8      	str	r0, [r7, #12]
 8005d8c:	60b9      	str	r1, [r7, #8]
 8005d8e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	2202      	movs	r2, #2
 8005d94:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	687a      	ldr	r2, [r7, #4]
 8005d9c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	687a      	ldr	r2, [r7, #4]
 8005da2:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	68ba      	ldr	r2, [r7, #8]
 8005da8:	2100      	movs	r1, #0
 8005daa:	68f8      	ldr	r0, [r7, #12]
 8005dac:	f000 fbff 	bl	80065ae <USBD_LL_Transmit>

  return USBD_OK;
 8005db0:	2300      	movs	r3, #0
}
 8005db2:	4618      	mov	r0, r3
 8005db4:	3710      	adds	r7, #16
 8005db6:	46bd      	mov	sp, r7
 8005db8:	bd80      	pop	{r7, pc}

08005dba <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8005dba:	b580      	push	{r7, lr}
 8005dbc:	b084      	sub	sp, #16
 8005dbe:	af00      	add	r7, sp, #0
 8005dc0:	60f8      	str	r0, [r7, #12]
 8005dc2:	60b9      	str	r1, [r7, #8]
 8005dc4:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	68ba      	ldr	r2, [r7, #8]
 8005dca:	2100      	movs	r1, #0
 8005dcc:	68f8      	ldr	r0, [r7, #12]
 8005dce:	f000 fbee 	bl	80065ae <USBD_LL_Transmit>

  return USBD_OK;
 8005dd2:	2300      	movs	r3, #0
}
 8005dd4:	4618      	mov	r0, r3
 8005dd6:	3710      	adds	r7, #16
 8005dd8:	46bd      	mov	sp, r7
 8005dda:	bd80      	pop	{r7, pc}

08005ddc <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8005ddc:	b580      	push	{r7, lr}
 8005dde:	b084      	sub	sp, #16
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	60f8      	str	r0, [r7, #12]
 8005de4:	60b9      	str	r1, [r7, #8]
 8005de6:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	68ba      	ldr	r2, [r7, #8]
 8005dec:	2100      	movs	r1, #0
 8005dee:	68f8      	ldr	r0, [r7, #12]
 8005df0:	f000 fbfe 	bl	80065f0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8005df4:	2300      	movs	r3, #0
}
 8005df6:	4618      	mov	r0, r3
 8005df8:	3710      	adds	r7, #16
 8005dfa:	46bd      	mov	sp, r7
 8005dfc:	bd80      	pop	{r7, pc}

08005dfe <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8005dfe:	b580      	push	{r7, lr}
 8005e00:	b082      	sub	sp, #8
 8005e02:	af00      	add	r7, sp, #0
 8005e04:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	2204      	movs	r2, #4
 8005e0a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8005e0e:	2300      	movs	r3, #0
 8005e10:	2200      	movs	r2, #0
 8005e12:	2100      	movs	r1, #0
 8005e14:	6878      	ldr	r0, [r7, #4]
 8005e16:	f000 fbca 	bl	80065ae <USBD_LL_Transmit>

  return USBD_OK;
 8005e1a:	2300      	movs	r3, #0
}
 8005e1c:	4618      	mov	r0, r3
 8005e1e:	3708      	adds	r7, #8
 8005e20:	46bd      	mov	sp, r7
 8005e22:	bd80      	pop	{r7, pc}

08005e24 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8005e24:	b580      	push	{r7, lr}
 8005e26:	b082      	sub	sp, #8
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	2205      	movs	r2, #5
 8005e30:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005e34:	2300      	movs	r3, #0
 8005e36:	2200      	movs	r2, #0
 8005e38:	2100      	movs	r1, #0
 8005e3a:	6878      	ldr	r0, [r7, #4]
 8005e3c:	f000 fbd8 	bl	80065f0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8005e40:	2300      	movs	r3, #0
}
 8005e42:	4618      	mov	r0, r3
 8005e44:	3708      	adds	r7, #8
 8005e46:	46bd      	mov	sp, r7
 8005e48:	bd80      	pop	{r7, pc}
	...

08005e4c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8005e4c:	b580      	push	{r7, lr}
 8005e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8005e50:	2200      	movs	r2, #0
 8005e52:	490e      	ldr	r1, [pc, #56]	; (8005e8c <MX_USB_DEVICE_Init+0x40>)
 8005e54:	480e      	ldr	r0, [pc, #56]	; (8005e90 <MX_USB_DEVICE_Init+0x44>)
 8005e56:	f7fe fd23 	bl	80048a0 <USBD_Init>
 8005e5a:	4603      	mov	r3, r0
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d001      	beq.n	8005e64 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8005e60:	f7fa fbfe 	bl	8000660 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 8005e64:	490b      	ldr	r1, [pc, #44]	; (8005e94 <MX_USB_DEVICE_Init+0x48>)
 8005e66:	480a      	ldr	r0, [pc, #40]	; (8005e90 <MX_USB_DEVICE_Init+0x44>)
 8005e68:	f7fe fd4a 	bl	8004900 <USBD_RegisterClass>
 8005e6c:	4603      	mov	r3, r0
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d001      	beq.n	8005e76 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8005e72:	f7fa fbf5 	bl	8000660 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8005e76:	4806      	ldr	r0, [pc, #24]	; (8005e90 <MX_USB_DEVICE_Init+0x44>)
 8005e78:	f7fe fd78 	bl	800496c <USBD_Start>
 8005e7c:	4603      	mov	r3, r0
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d001      	beq.n	8005e86 <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 8005e82:	f7fa fbed 	bl	8000660 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8005e86:	bf00      	nop
 8005e88:	bd80      	pop	{r7, pc}
 8005e8a:	bf00      	nop
 8005e8c:	200000cc 	.word	0x200000cc
 8005e90:	20000148 	.word	0x20000148
 8005e94:	2000000c 	.word	0x2000000c

08005e98 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005e98:	b480      	push	{r7}
 8005e9a:	b083      	sub	sp, #12
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	4603      	mov	r3, r0
 8005ea0:	6039      	str	r1, [r7, #0]
 8005ea2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8005ea4:	683b      	ldr	r3, [r7, #0]
 8005ea6:	2212      	movs	r2, #18
 8005ea8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8005eaa:	4b03      	ldr	r3, [pc, #12]	; (8005eb8 <USBD_FS_DeviceDescriptor+0x20>)
}
 8005eac:	4618      	mov	r0, r3
 8005eae:	370c      	adds	r7, #12
 8005eb0:	46bd      	mov	sp, r7
 8005eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb6:	4770      	bx	lr
 8005eb8:	200000e8 	.word	0x200000e8

08005ebc <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005ebc:	b480      	push	{r7}
 8005ebe:	b083      	sub	sp, #12
 8005ec0:	af00      	add	r7, sp, #0
 8005ec2:	4603      	mov	r3, r0
 8005ec4:	6039      	str	r1, [r7, #0]
 8005ec6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8005ec8:	683b      	ldr	r3, [r7, #0]
 8005eca:	2204      	movs	r2, #4
 8005ecc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8005ece:	4b03      	ldr	r3, [pc, #12]	; (8005edc <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8005ed0:	4618      	mov	r0, r3
 8005ed2:	370c      	adds	r7, #12
 8005ed4:	46bd      	mov	sp, r7
 8005ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eda:	4770      	bx	lr
 8005edc:	200000fc 	.word	0x200000fc

08005ee0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005ee0:	b580      	push	{r7, lr}
 8005ee2:	b082      	sub	sp, #8
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	4603      	mov	r3, r0
 8005ee8:	6039      	str	r1, [r7, #0]
 8005eea:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8005eec:	79fb      	ldrb	r3, [r7, #7]
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d105      	bne.n	8005efe <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8005ef2:	683a      	ldr	r2, [r7, #0]
 8005ef4:	4907      	ldr	r1, [pc, #28]	; (8005f14 <USBD_FS_ProductStrDescriptor+0x34>)
 8005ef6:	4808      	ldr	r0, [pc, #32]	; (8005f18 <USBD_FS_ProductStrDescriptor+0x38>)
 8005ef8:	f7ff fee4 	bl	8005cc4 <USBD_GetString>
 8005efc:	e004      	b.n	8005f08 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8005efe:	683a      	ldr	r2, [r7, #0]
 8005f00:	4904      	ldr	r1, [pc, #16]	; (8005f14 <USBD_FS_ProductStrDescriptor+0x34>)
 8005f02:	4805      	ldr	r0, [pc, #20]	; (8005f18 <USBD_FS_ProductStrDescriptor+0x38>)
 8005f04:	f7ff fede 	bl	8005cc4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8005f08:	4b02      	ldr	r3, [pc, #8]	; (8005f14 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8005f0a:	4618      	mov	r0, r3
 8005f0c:	3708      	adds	r7, #8
 8005f0e:	46bd      	mov	sp, r7
 8005f10:	bd80      	pop	{r7, pc}
 8005f12:	bf00      	nop
 8005f14:	20000424 	.word	0x20000424
 8005f18:	0800672c 	.word	0x0800672c

08005f1c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005f1c:	b580      	push	{r7, lr}
 8005f1e:	b082      	sub	sp, #8
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	4603      	mov	r3, r0
 8005f24:	6039      	str	r1, [r7, #0]
 8005f26:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8005f28:	683a      	ldr	r2, [r7, #0]
 8005f2a:	4904      	ldr	r1, [pc, #16]	; (8005f3c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8005f2c:	4804      	ldr	r0, [pc, #16]	; (8005f40 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8005f2e:	f7ff fec9 	bl	8005cc4 <USBD_GetString>
  return USBD_StrDesc;
 8005f32:	4b02      	ldr	r3, [pc, #8]	; (8005f3c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8005f34:	4618      	mov	r0, r3
 8005f36:	3708      	adds	r7, #8
 8005f38:	46bd      	mov	sp, r7
 8005f3a:	bd80      	pop	{r7, pc}
 8005f3c:	20000424 	.word	0x20000424
 8005f40:	08006744 	.word	0x08006744

08005f44 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005f44:	b580      	push	{r7, lr}
 8005f46:	b082      	sub	sp, #8
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	4603      	mov	r3, r0
 8005f4c:	6039      	str	r1, [r7, #0]
 8005f4e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8005f50:	683b      	ldr	r3, [r7, #0]
 8005f52:	221a      	movs	r2, #26
 8005f54:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8005f56:	f000 f843 	bl	8005fe0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8005f5a:	4b02      	ldr	r3, [pc, #8]	; (8005f64 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8005f5c:	4618      	mov	r0, r3
 8005f5e:	3708      	adds	r7, #8
 8005f60:	46bd      	mov	sp, r7
 8005f62:	bd80      	pop	{r7, pc}
 8005f64:	20000100 	.word	0x20000100

08005f68 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005f68:	b580      	push	{r7, lr}
 8005f6a:	b082      	sub	sp, #8
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	4603      	mov	r3, r0
 8005f70:	6039      	str	r1, [r7, #0]
 8005f72:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8005f74:	79fb      	ldrb	r3, [r7, #7]
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d105      	bne.n	8005f86 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8005f7a:	683a      	ldr	r2, [r7, #0]
 8005f7c:	4907      	ldr	r1, [pc, #28]	; (8005f9c <USBD_FS_ConfigStrDescriptor+0x34>)
 8005f7e:	4808      	ldr	r0, [pc, #32]	; (8005fa0 <USBD_FS_ConfigStrDescriptor+0x38>)
 8005f80:	f7ff fea0 	bl	8005cc4 <USBD_GetString>
 8005f84:	e004      	b.n	8005f90 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8005f86:	683a      	ldr	r2, [r7, #0]
 8005f88:	4904      	ldr	r1, [pc, #16]	; (8005f9c <USBD_FS_ConfigStrDescriptor+0x34>)
 8005f8a:	4805      	ldr	r0, [pc, #20]	; (8005fa0 <USBD_FS_ConfigStrDescriptor+0x38>)
 8005f8c:	f7ff fe9a 	bl	8005cc4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8005f90:	4b02      	ldr	r3, [pc, #8]	; (8005f9c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8005f92:	4618      	mov	r0, r3
 8005f94:	3708      	adds	r7, #8
 8005f96:	46bd      	mov	sp, r7
 8005f98:	bd80      	pop	{r7, pc}
 8005f9a:	bf00      	nop
 8005f9c:	20000424 	.word	0x20000424
 8005fa0:	08006758 	.word	0x08006758

08005fa4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005fa4:	b580      	push	{r7, lr}
 8005fa6:	b082      	sub	sp, #8
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	4603      	mov	r3, r0
 8005fac:	6039      	str	r1, [r7, #0]
 8005fae:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8005fb0:	79fb      	ldrb	r3, [r7, #7]
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d105      	bne.n	8005fc2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8005fb6:	683a      	ldr	r2, [r7, #0]
 8005fb8:	4907      	ldr	r1, [pc, #28]	; (8005fd8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8005fba:	4808      	ldr	r0, [pc, #32]	; (8005fdc <USBD_FS_InterfaceStrDescriptor+0x38>)
 8005fbc:	f7ff fe82 	bl	8005cc4 <USBD_GetString>
 8005fc0:	e004      	b.n	8005fcc <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8005fc2:	683a      	ldr	r2, [r7, #0]
 8005fc4:	4904      	ldr	r1, [pc, #16]	; (8005fd8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8005fc6:	4805      	ldr	r0, [pc, #20]	; (8005fdc <USBD_FS_InterfaceStrDescriptor+0x38>)
 8005fc8:	f7ff fe7c 	bl	8005cc4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8005fcc:	4b02      	ldr	r3, [pc, #8]	; (8005fd8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8005fce:	4618      	mov	r0, r3
 8005fd0:	3708      	adds	r7, #8
 8005fd2:	46bd      	mov	sp, r7
 8005fd4:	bd80      	pop	{r7, pc}
 8005fd6:	bf00      	nop
 8005fd8:	20000424 	.word	0x20000424
 8005fdc:	08006764 	.word	0x08006764

08005fe0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8005fe0:	b580      	push	{r7, lr}
 8005fe2:	b084      	sub	sp, #16
 8005fe4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8005fe6:	4b0f      	ldr	r3, [pc, #60]	; (8006024 <Get_SerialNum+0x44>)
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8005fec:	4b0e      	ldr	r3, [pc, #56]	; (8006028 <Get_SerialNum+0x48>)
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8005ff2:	4b0e      	ldr	r3, [pc, #56]	; (800602c <Get_SerialNum+0x4c>)
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8005ff8:	68fa      	ldr	r2, [r7, #12]
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	4413      	add	r3, r2
 8005ffe:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	2b00      	cmp	r3, #0
 8006004:	d009      	beq.n	800601a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8006006:	2208      	movs	r2, #8
 8006008:	4909      	ldr	r1, [pc, #36]	; (8006030 <Get_SerialNum+0x50>)
 800600a:	68f8      	ldr	r0, [r7, #12]
 800600c:	f000 f814 	bl	8006038 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8006010:	2204      	movs	r2, #4
 8006012:	4908      	ldr	r1, [pc, #32]	; (8006034 <Get_SerialNum+0x54>)
 8006014:	68b8      	ldr	r0, [r7, #8]
 8006016:	f000 f80f 	bl	8006038 <IntToUnicode>
  }
}
 800601a:	bf00      	nop
 800601c:	3710      	adds	r7, #16
 800601e:	46bd      	mov	sp, r7
 8006020:	bd80      	pop	{r7, pc}
 8006022:	bf00      	nop
 8006024:	1fff7a10 	.word	0x1fff7a10
 8006028:	1fff7a14 	.word	0x1fff7a14
 800602c:	1fff7a18 	.word	0x1fff7a18
 8006030:	20000102 	.word	0x20000102
 8006034:	20000112 	.word	0x20000112

08006038 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8006038:	b480      	push	{r7}
 800603a:	b087      	sub	sp, #28
 800603c:	af00      	add	r7, sp, #0
 800603e:	60f8      	str	r0, [r7, #12]
 8006040:	60b9      	str	r1, [r7, #8]
 8006042:	4613      	mov	r3, r2
 8006044:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8006046:	2300      	movs	r3, #0
 8006048:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800604a:	2300      	movs	r3, #0
 800604c:	75fb      	strb	r3, [r7, #23]
 800604e:	e027      	b.n	80060a0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	0f1b      	lsrs	r3, r3, #28
 8006054:	2b09      	cmp	r3, #9
 8006056:	d80b      	bhi.n	8006070 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	0f1b      	lsrs	r3, r3, #28
 800605c:	b2da      	uxtb	r2, r3
 800605e:	7dfb      	ldrb	r3, [r7, #23]
 8006060:	005b      	lsls	r3, r3, #1
 8006062:	4619      	mov	r1, r3
 8006064:	68bb      	ldr	r3, [r7, #8]
 8006066:	440b      	add	r3, r1
 8006068:	3230      	adds	r2, #48	; 0x30
 800606a:	b2d2      	uxtb	r2, r2
 800606c:	701a      	strb	r2, [r3, #0]
 800606e:	e00a      	b.n	8006086 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	0f1b      	lsrs	r3, r3, #28
 8006074:	b2da      	uxtb	r2, r3
 8006076:	7dfb      	ldrb	r3, [r7, #23]
 8006078:	005b      	lsls	r3, r3, #1
 800607a:	4619      	mov	r1, r3
 800607c:	68bb      	ldr	r3, [r7, #8]
 800607e:	440b      	add	r3, r1
 8006080:	3237      	adds	r2, #55	; 0x37
 8006082:	b2d2      	uxtb	r2, r2
 8006084:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	011b      	lsls	r3, r3, #4
 800608a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800608c:	7dfb      	ldrb	r3, [r7, #23]
 800608e:	005b      	lsls	r3, r3, #1
 8006090:	3301      	adds	r3, #1
 8006092:	68ba      	ldr	r2, [r7, #8]
 8006094:	4413      	add	r3, r2
 8006096:	2200      	movs	r2, #0
 8006098:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800609a:	7dfb      	ldrb	r3, [r7, #23]
 800609c:	3301      	adds	r3, #1
 800609e:	75fb      	strb	r3, [r7, #23]
 80060a0:	7dfa      	ldrb	r2, [r7, #23]
 80060a2:	79fb      	ldrb	r3, [r7, #7]
 80060a4:	429a      	cmp	r2, r3
 80060a6:	d3d3      	bcc.n	8006050 <IntToUnicode+0x18>
  }
}
 80060a8:	bf00      	nop
 80060aa:	bf00      	nop
 80060ac:	371c      	adds	r7, #28
 80060ae:	46bd      	mov	sp, r7
 80060b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b4:	4770      	bx	lr
	...

080060b8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80060b8:	b580      	push	{r7, lr}
 80060ba:	b08a      	sub	sp, #40	; 0x28
 80060bc:	af00      	add	r7, sp, #0
 80060be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80060c0:	f107 0314 	add.w	r3, r7, #20
 80060c4:	2200      	movs	r2, #0
 80060c6:	601a      	str	r2, [r3, #0]
 80060c8:	605a      	str	r2, [r3, #4]
 80060ca:	609a      	str	r2, [r3, #8]
 80060cc:	60da      	str	r2, [r3, #12]
 80060ce:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80060d8:	d13a      	bne.n	8006150 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80060da:	2300      	movs	r3, #0
 80060dc:	613b      	str	r3, [r7, #16]
 80060de:	4b1e      	ldr	r3, [pc, #120]	; (8006158 <HAL_PCD_MspInit+0xa0>)
 80060e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060e2:	4a1d      	ldr	r2, [pc, #116]	; (8006158 <HAL_PCD_MspInit+0xa0>)
 80060e4:	f043 0301 	orr.w	r3, r3, #1
 80060e8:	6313      	str	r3, [r2, #48]	; 0x30
 80060ea:	4b1b      	ldr	r3, [pc, #108]	; (8006158 <HAL_PCD_MspInit+0xa0>)
 80060ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060ee:	f003 0301 	and.w	r3, r3, #1
 80060f2:	613b      	str	r3, [r7, #16]
 80060f4:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11;
 80060f6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80060fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80060fc:	2302      	movs	r3, #2
 80060fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006100:	2300      	movs	r3, #0
 8006102:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006104:	2303      	movs	r3, #3
 8006106:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8006108:	230a      	movs	r3, #10
 800610a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800610c:	f107 0314 	add.w	r3, r7, #20
 8006110:	4619      	mov	r1, r3
 8006112:	4812      	ldr	r0, [pc, #72]	; (800615c <HAL_PCD_MspInit+0xa4>)
 8006114:	f7fa fcea 	bl	8000aec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8006118:	4b0f      	ldr	r3, [pc, #60]	; (8006158 <HAL_PCD_MspInit+0xa0>)
 800611a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800611c:	4a0e      	ldr	r2, [pc, #56]	; (8006158 <HAL_PCD_MspInit+0xa0>)
 800611e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006122:	6353      	str	r3, [r2, #52]	; 0x34
 8006124:	2300      	movs	r3, #0
 8006126:	60fb      	str	r3, [r7, #12]
 8006128:	4b0b      	ldr	r3, [pc, #44]	; (8006158 <HAL_PCD_MspInit+0xa0>)
 800612a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800612c:	4a0a      	ldr	r2, [pc, #40]	; (8006158 <HAL_PCD_MspInit+0xa0>)
 800612e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006132:	6453      	str	r3, [r2, #68]	; 0x44
 8006134:	4b08      	ldr	r3, [pc, #32]	; (8006158 <HAL_PCD_MspInit+0xa0>)
 8006136:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006138:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800613c:	60fb      	str	r3, [r7, #12]
 800613e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8006140:	2200      	movs	r2, #0
 8006142:	2100      	movs	r1, #0
 8006144:	2043      	movs	r0, #67	; 0x43
 8006146:	f7fa fc9a 	bl	8000a7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800614a:	2043      	movs	r0, #67	; 0x43
 800614c:	f7fa fcb3 	bl	8000ab6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8006150:	bf00      	nop
 8006152:	3728      	adds	r7, #40	; 0x28
 8006154:	46bd      	mov	sp, r7
 8006156:	bd80      	pop	{r7, pc}
 8006158:	40023800 	.word	0x40023800
 800615c:	40020000 	.word	0x40020000

08006160 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006160:	b580      	push	{r7, lr}
 8006162:	b082      	sub	sp, #8
 8006164:	af00      	add	r7, sp, #0
 8006166:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8006174:	4619      	mov	r1, r3
 8006176:	4610      	mov	r0, r2
 8006178:	f7fe fc45 	bl	8004a06 <USBD_LL_SetupStage>
}
 800617c:	bf00      	nop
 800617e:	3708      	adds	r7, #8
 8006180:	46bd      	mov	sp, r7
 8006182:	bd80      	pop	{r7, pc}

08006184 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006184:	b580      	push	{r7, lr}
 8006186:	b082      	sub	sp, #8
 8006188:	af00      	add	r7, sp, #0
 800618a:	6078      	str	r0, [r7, #4]
 800618c:	460b      	mov	r3, r1
 800618e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8006196:	78fa      	ldrb	r2, [r7, #3]
 8006198:	6879      	ldr	r1, [r7, #4]
 800619a:	4613      	mov	r3, r2
 800619c:	00db      	lsls	r3, r3, #3
 800619e:	4413      	add	r3, r2
 80061a0:	009b      	lsls	r3, r3, #2
 80061a2:	440b      	add	r3, r1
 80061a4:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80061a8:	681a      	ldr	r2, [r3, #0]
 80061aa:	78fb      	ldrb	r3, [r7, #3]
 80061ac:	4619      	mov	r1, r3
 80061ae:	f7fe fc7f 	bl	8004ab0 <USBD_LL_DataOutStage>
}
 80061b2:	bf00      	nop
 80061b4:	3708      	adds	r7, #8
 80061b6:	46bd      	mov	sp, r7
 80061b8:	bd80      	pop	{r7, pc}

080061ba <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80061ba:	b580      	push	{r7, lr}
 80061bc:	b082      	sub	sp, #8
 80061be:	af00      	add	r7, sp, #0
 80061c0:	6078      	str	r0, [r7, #4]
 80061c2:	460b      	mov	r3, r1
 80061c4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 80061cc:	78fa      	ldrb	r2, [r7, #3]
 80061ce:	6879      	ldr	r1, [r7, #4]
 80061d0:	4613      	mov	r3, r2
 80061d2:	00db      	lsls	r3, r3, #3
 80061d4:	4413      	add	r3, r2
 80061d6:	009b      	lsls	r3, r3, #2
 80061d8:	440b      	add	r3, r1
 80061da:	334c      	adds	r3, #76	; 0x4c
 80061dc:	681a      	ldr	r2, [r3, #0]
 80061de:	78fb      	ldrb	r3, [r7, #3]
 80061e0:	4619      	mov	r1, r3
 80061e2:	f7fe fd18 	bl	8004c16 <USBD_LL_DataInStage>
}
 80061e6:	bf00      	nop
 80061e8:	3708      	adds	r7, #8
 80061ea:	46bd      	mov	sp, r7
 80061ec:	bd80      	pop	{r7, pc}

080061ee <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80061ee:	b580      	push	{r7, lr}
 80061f0:	b082      	sub	sp, #8
 80061f2:	af00      	add	r7, sp, #0
 80061f4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80061fc:	4618      	mov	r0, r3
 80061fe:	f7fe fe4c 	bl	8004e9a <USBD_LL_SOF>
}
 8006202:	bf00      	nop
 8006204:	3708      	adds	r7, #8
 8006206:	46bd      	mov	sp, r7
 8006208:	bd80      	pop	{r7, pc}

0800620a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800620a:	b580      	push	{r7, lr}
 800620c:	b084      	sub	sp, #16
 800620e:	af00      	add	r7, sp, #0
 8006210:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8006212:	2301      	movs	r3, #1
 8006214:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	68db      	ldr	r3, [r3, #12]
 800621a:	2b00      	cmp	r3, #0
 800621c:	d102      	bne.n	8006224 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800621e:	2300      	movs	r3, #0
 8006220:	73fb      	strb	r3, [r7, #15]
 8006222:	e008      	b.n	8006236 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	68db      	ldr	r3, [r3, #12]
 8006228:	2b02      	cmp	r3, #2
 800622a:	d102      	bne.n	8006232 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800622c:	2301      	movs	r3, #1
 800622e:	73fb      	strb	r3, [r7, #15]
 8006230:	e001      	b.n	8006236 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8006232:	f7fa fa15 	bl	8000660 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800623c:	7bfa      	ldrb	r2, [r7, #15]
 800623e:	4611      	mov	r1, r2
 8006240:	4618      	mov	r0, r3
 8006242:	f7fe fdec 	bl	8004e1e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800624c:	4618      	mov	r0, r3
 800624e:	f7fe fd94 	bl	8004d7a <USBD_LL_Reset>
}
 8006252:	bf00      	nop
 8006254:	3710      	adds	r7, #16
 8006256:	46bd      	mov	sp, r7
 8006258:	bd80      	pop	{r7, pc}
	...

0800625c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800625c:	b580      	push	{r7, lr}
 800625e:	b082      	sub	sp, #8
 8006260:	af00      	add	r7, sp, #0
 8006262:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800626a:	4618      	mov	r0, r3
 800626c:	f7fe fde7 	bl	8004e3e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	687a      	ldr	r2, [r7, #4]
 800627c:	6812      	ldr	r2, [r2, #0]
 800627e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006282:	f043 0301 	orr.w	r3, r3, #1
 8006286:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	6a1b      	ldr	r3, [r3, #32]
 800628c:	2b00      	cmp	r3, #0
 800628e:	d005      	beq.n	800629c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006290:	4b04      	ldr	r3, [pc, #16]	; (80062a4 <HAL_PCD_SuspendCallback+0x48>)
 8006292:	691b      	ldr	r3, [r3, #16]
 8006294:	4a03      	ldr	r2, [pc, #12]	; (80062a4 <HAL_PCD_SuspendCallback+0x48>)
 8006296:	f043 0306 	orr.w	r3, r3, #6
 800629a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800629c:	bf00      	nop
 800629e:	3708      	adds	r7, #8
 80062a0:	46bd      	mov	sp, r7
 80062a2:	bd80      	pop	{r7, pc}
 80062a4:	e000ed00 	.word	0xe000ed00

080062a8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80062a8:	b580      	push	{r7, lr}
 80062aa:	b082      	sub	sp, #8
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80062b6:	4618      	mov	r0, r3
 80062b8:	f7fe fdd7 	bl	8004e6a <USBD_LL_Resume>
}
 80062bc:	bf00      	nop
 80062be:	3708      	adds	r7, #8
 80062c0:	46bd      	mov	sp, r7
 80062c2:	bd80      	pop	{r7, pc}

080062c4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80062c4:	b580      	push	{r7, lr}
 80062c6:	b082      	sub	sp, #8
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	6078      	str	r0, [r7, #4]
 80062cc:	460b      	mov	r3, r1
 80062ce:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80062d6:	78fa      	ldrb	r2, [r7, #3]
 80062d8:	4611      	mov	r1, r2
 80062da:	4618      	mov	r0, r3
 80062dc:	f7fe fe2f 	bl	8004f3e <USBD_LL_IsoOUTIncomplete>
}
 80062e0:	bf00      	nop
 80062e2:	3708      	adds	r7, #8
 80062e4:	46bd      	mov	sp, r7
 80062e6:	bd80      	pop	{r7, pc}

080062e8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80062e8:	b580      	push	{r7, lr}
 80062ea:	b082      	sub	sp, #8
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	6078      	str	r0, [r7, #4]
 80062f0:	460b      	mov	r3, r1
 80062f2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80062fa:	78fa      	ldrb	r2, [r7, #3]
 80062fc:	4611      	mov	r1, r2
 80062fe:	4618      	mov	r0, r3
 8006300:	f7fe fdeb 	bl	8004eda <USBD_LL_IsoINIncomplete>
}
 8006304:	bf00      	nop
 8006306:	3708      	adds	r7, #8
 8006308:	46bd      	mov	sp, r7
 800630a:	bd80      	pop	{r7, pc}

0800630c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800630c:	b580      	push	{r7, lr}
 800630e:	b082      	sub	sp, #8
 8006310:	af00      	add	r7, sp, #0
 8006312:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800631a:	4618      	mov	r0, r3
 800631c:	f7fe fe41 	bl	8004fa2 <USBD_LL_DevConnected>
}
 8006320:	bf00      	nop
 8006322:	3708      	adds	r7, #8
 8006324:	46bd      	mov	sp, r7
 8006326:	bd80      	pop	{r7, pc}

08006328 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006328:	b580      	push	{r7, lr}
 800632a:	b082      	sub	sp, #8
 800632c:	af00      	add	r7, sp, #0
 800632e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006336:	4618      	mov	r0, r3
 8006338:	f7fe fe3e 	bl	8004fb8 <USBD_LL_DevDisconnected>
}
 800633c:	bf00      	nop
 800633e:	3708      	adds	r7, #8
 8006340:	46bd      	mov	sp, r7
 8006342:	bd80      	pop	{r7, pc}

08006344 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8006344:	b580      	push	{r7, lr}
 8006346:	b082      	sub	sp, #8
 8006348:	af00      	add	r7, sp, #0
 800634a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	781b      	ldrb	r3, [r3, #0]
 8006350:	2b00      	cmp	r3, #0
 8006352:	d13c      	bne.n	80063ce <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8006354:	4a20      	ldr	r2, [pc, #128]	; (80063d8 <USBD_LL_Init+0x94>)
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	4a1e      	ldr	r2, [pc, #120]	; (80063d8 <USBD_LL_Init+0x94>)
 8006360:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8006364:	4b1c      	ldr	r3, [pc, #112]	; (80063d8 <USBD_LL_Init+0x94>)
 8006366:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800636a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800636c:	4b1a      	ldr	r3, [pc, #104]	; (80063d8 <USBD_LL_Init+0x94>)
 800636e:	2204      	movs	r2, #4
 8006370:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8006372:	4b19      	ldr	r3, [pc, #100]	; (80063d8 <USBD_LL_Init+0x94>)
 8006374:	2202      	movs	r2, #2
 8006376:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8006378:	4b17      	ldr	r3, [pc, #92]	; (80063d8 <USBD_LL_Init+0x94>)
 800637a:	2200      	movs	r2, #0
 800637c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800637e:	4b16      	ldr	r3, [pc, #88]	; (80063d8 <USBD_LL_Init+0x94>)
 8006380:	2202      	movs	r2, #2
 8006382:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8006384:	4b14      	ldr	r3, [pc, #80]	; (80063d8 <USBD_LL_Init+0x94>)
 8006386:	2200      	movs	r2, #0
 8006388:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800638a:	4b13      	ldr	r3, [pc, #76]	; (80063d8 <USBD_LL_Init+0x94>)
 800638c:	2200      	movs	r2, #0
 800638e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8006390:	4b11      	ldr	r3, [pc, #68]	; (80063d8 <USBD_LL_Init+0x94>)
 8006392:	2200      	movs	r2, #0
 8006394:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8006396:	4b10      	ldr	r3, [pc, #64]	; (80063d8 <USBD_LL_Init+0x94>)
 8006398:	2200      	movs	r2, #0
 800639a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800639c:	4b0e      	ldr	r3, [pc, #56]	; (80063d8 <USBD_LL_Init+0x94>)
 800639e:	2200      	movs	r2, #0
 80063a0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80063a2:	480d      	ldr	r0, [pc, #52]	; (80063d8 <USBD_LL_Init+0x94>)
 80063a4:	f7fa fd3e 	bl	8000e24 <HAL_PCD_Init>
 80063a8:	4603      	mov	r3, r0
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d001      	beq.n	80063b2 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80063ae:	f7fa f957 	bl	8000660 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80063b2:	2180      	movs	r1, #128	; 0x80
 80063b4:	4808      	ldr	r0, [pc, #32]	; (80063d8 <USBD_LL_Init+0x94>)
 80063b6:	f7fb ff7e 	bl	80022b6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80063ba:	2240      	movs	r2, #64	; 0x40
 80063bc:	2100      	movs	r1, #0
 80063be:	4806      	ldr	r0, [pc, #24]	; (80063d8 <USBD_LL_Init+0x94>)
 80063c0:	f7fb ff32 	bl	8002228 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80063c4:	2280      	movs	r2, #128	; 0x80
 80063c6:	2101      	movs	r1, #1
 80063c8:	4803      	ldr	r0, [pc, #12]	; (80063d8 <USBD_LL_Init+0x94>)
 80063ca:	f7fb ff2d 	bl	8002228 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80063ce:	2300      	movs	r3, #0
}
 80063d0:	4618      	mov	r0, r3
 80063d2:	3708      	adds	r7, #8
 80063d4:	46bd      	mov	sp, r7
 80063d6:	bd80      	pop	{r7, pc}
 80063d8:	20000624 	.word	0x20000624

080063dc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80063dc:	b580      	push	{r7, lr}
 80063de:	b084      	sub	sp, #16
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80063e4:	2300      	movs	r3, #0
 80063e6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80063e8:	2300      	movs	r3, #0
 80063ea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80063f2:	4618      	mov	r0, r3
 80063f4:	f7fa fe33 	bl	800105e <HAL_PCD_Start>
 80063f8:	4603      	mov	r3, r0
 80063fa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80063fc:	7bfb      	ldrb	r3, [r7, #15]
 80063fe:	4618      	mov	r0, r3
 8006400:	f000 f930 	bl	8006664 <USBD_Get_USB_Status>
 8006404:	4603      	mov	r3, r0
 8006406:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006408:	7bbb      	ldrb	r3, [r7, #14]
}
 800640a:	4618      	mov	r0, r3
 800640c:	3710      	adds	r7, #16
 800640e:	46bd      	mov	sp, r7
 8006410:	bd80      	pop	{r7, pc}

08006412 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8006412:	b580      	push	{r7, lr}
 8006414:	b084      	sub	sp, #16
 8006416:	af00      	add	r7, sp, #0
 8006418:	6078      	str	r0, [r7, #4]
 800641a:	4608      	mov	r0, r1
 800641c:	4611      	mov	r1, r2
 800641e:	461a      	mov	r2, r3
 8006420:	4603      	mov	r3, r0
 8006422:	70fb      	strb	r3, [r7, #3]
 8006424:	460b      	mov	r3, r1
 8006426:	70bb      	strb	r3, [r7, #2]
 8006428:	4613      	mov	r3, r2
 800642a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800642c:	2300      	movs	r3, #0
 800642e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006430:	2300      	movs	r3, #0
 8006432:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800643a:	78bb      	ldrb	r3, [r7, #2]
 800643c:	883a      	ldrh	r2, [r7, #0]
 800643e:	78f9      	ldrb	r1, [r7, #3]
 8006440:	f7fb fb04 	bl	8001a4c <HAL_PCD_EP_Open>
 8006444:	4603      	mov	r3, r0
 8006446:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006448:	7bfb      	ldrb	r3, [r7, #15]
 800644a:	4618      	mov	r0, r3
 800644c:	f000 f90a 	bl	8006664 <USBD_Get_USB_Status>
 8006450:	4603      	mov	r3, r0
 8006452:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006454:	7bbb      	ldrb	r3, [r7, #14]
}
 8006456:	4618      	mov	r0, r3
 8006458:	3710      	adds	r7, #16
 800645a:	46bd      	mov	sp, r7
 800645c:	bd80      	pop	{r7, pc}

0800645e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800645e:	b580      	push	{r7, lr}
 8006460:	b084      	sub	sp, #16
 8006462:	af00      	add	r7, sp, #0
 8006464:	6078      	str	r0, [r7, #4]
 8006466:	460b      	mov	r3, r1
 8006468:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800646a:	2300      	movs	r3, #0
 800646c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800646e:	2300      	movs	r3, #0
 8006470:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006478:	78fa      	ldrb	r2, [r7, #3]
 800647a:	4611      	mov	r1, r2
 800647c:	4618      	mov	r0, r3
 800647e:	f7fb fb4d 	bl	8001b1c <HAL_PCD_EP_Close>
 8006482:	4603      	mov	r3, r0
 8006484:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006486:	7bfb      	ldrb	r3, [r7, #15]
 8006488:	4618      	mov	r0, r3
 800648a:	f000 f8eb 	bl	8006664 <USBD_Get_USB_Status>
 800648e:	4603      	mov	r3, r0
 8006490:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006492:	7bbb      	ldrb	r3, [r7, #14]
}
 8006494:	4618      	mov	r0, r3
 8006496:	3710      	adds	r7, #16
 8006498:	46bd      	mov	sp, r7
 800649a:	bd80      	pop	{r7, pc}

0800649c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800649c:	b580      	push	{r7, lr}
 800649e:	b084      	sub	sp, #16
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	6078      	str	r0, [r7, #4]
 80064a4:	460b      	mov	r3, r1
 80064a6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80064a8:	2300      	movs	r3, #0
 80064aa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80064ac:	2300      	movs	r3, #0
 80064ae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80064b6:	78fa      	ldrb	r2, [r7, #3]
 80064b8:	4611      	mov	r1, r2
 80064ba:	4618      	mov	r0, r3
 80064bc:	f7fb fc0d 	bl	8001cda <HAL_PCD_EP_SetStall>
 80064c0:	4603      	mov	r3, r0
 80064c2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80064c4:	7bfb      	ldrb	r3, [r7, #15]
 80064c6:	4618      	mov	r0, r3
 80064c8:	f000 f8cc 	bl	8006664 <USBD_Get_USB_Status>
 80064cc:	4603      	mov	r3, r0
 80064ce:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80064d0:	7bbb      	ldrb	r3, [r7, #14]
}
 80064d2:	4618      	mov	r0, r3
 80064d4:	3710      	adds	r7, #16
 80064d6:	46bd      	mov	sp, r7
 80064d8:	bd80      	pop	{r7, pc}

080064da <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80064da:	b580      	push	{r7, lr}
 80064dc:	b084      	sub	sp, #16
 80064de:	af00      	add	r7, sp, #0
 80064e0:	6078      	str	r0, [r7, #4]
 80064e2:	460b      	mov	r3, r1
 80064e4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80064e6:	2300      	movs	r3, #0
 80064e8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80064ea:	2300      	movs	r3, #0
 80064ec:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80064f4:	78fa      	ldrb	r2, [r7, #3]
 80064f6:	4611      	mov	r1, r2
 80064f8:	4618      	mov	r0, r3
 80064fa:	f7fb fc52 	bl	8001da2 <HAL_PCD_EP_ClrStall>
 80064fe:	4603      	mov	r3, r0
 8006500:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006502:	7bfb      	ldrb	r3, [r7, #15]
 8006504:	4618      	mov	r0, r3
 8006506:	f000 f8ad 	bl	8006664 <USBD_Get_USB_Status>
 800650a:	4603      	mov	r3, r0
 800650c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800650e:	7bbb      	ldrb	r3, [r7, #14]
}
 8006510:	4618      	mov	r0, r3
 8006512:	3710      	adds	r7, #16
 8006514:	46bd      	mov	sp, r7
 8006516:	bd80      	pop	{r7, pc}

08006518 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006518:	b480      	push	{r7}
 800651a:	b085      	sub	sp, #20
 800651c:	af00      	add	r7, sp, #0
 800651e:	6078      	str	r0, [r7, #4]
 8006520:	460b      	mov	r3, r1
 8006522:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800652a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800652c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006530:	2b00      	cmp	r3, #0
 8006532:	da0b      	bge.n	800654c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8006534:	78fb      	ldrb	r3, [r7, #3]
 8006536:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800653a:	68f9      	ldr	r1, [r7, #12]
 800653c:	4613      	mov	r3, r2
 800653e:	00db      	lsls	r3, r3, #3
 8006540:	4413      	add	r3, r2
 8006542:	009b      	lsls	r3, r3, #2
 8006544:	440b      	add	r3, r1
 8006546:	333e      	adds	r3, #62	; 0x3e
 8006548:	781b      	ldrb	r3, [r3, #0]
 800654a:	e00b      	b.n	8006564 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800654c:	78fb      	ldrb	r3, [r7, #3]
 800654e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006552:	68f9      	ldr	r1, [r7, #12]
 8006554:	4613      	mov	r3, r2
 8006556:	00db      	lsls	r3, r3, #3
 8006558:	4413      	add	r3, r2
 800655a:	009b      	lsls	r3, r3, #2
 800655c:	440b      	add	r3, r1
 800655e:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8006562:	781b      	ldrb	r3, [r3, #0]
  }
}
 8006564:	4618      	mov	r0, r3
 8006566:	3714      	adds	r7, #20
 8006568:	46bd      	mov	sp, r7
 800656a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800656e:	4770      	bx	lr

08006570 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8006570:	b580      	push	{r7, lr}
 8006572:	b084      	sub	sp, #16
 8006574:	af00      	add	r7, sp, #0
 8006576:	6078      	str	r0, [r7, #4]
 8006578:	460b      	mov	r3, r1
 800657a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800657c:	2300      	movs	r3, #0
 800657e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006580:	2300      	movs	r3, #0
 8006582:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800658a:	78fa      	ldrb	r2, [r7, #3]
 800658c:	4611      	mov	r1, r2
 800658e:	4618      	mov	r0, r3
 8006590:	f7fb fa37 	bl	8001a02 <HAL_PCD_SetAddress>
 8006594:	4603      	mov	r3, r0
 8006596:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006598:	7bfb      	ldrb	r3, [r7, #15]
 800659a:	4618      	mov	r0, r3
 800659c:	f000 f862 	bl	8006664 <USBD_Get_USB_Status>
 80065a0:	4603      	mov	r3, r0
 80065a2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80065a4:	7bbb      	ldrb	r3, [r7, #14]
}
 80065a6:	4618      	mov	r0, r3
 80065a8:	3710      	adds	r7, #16
 80065aa:	46bd      	mov	sp, r7
 80065ac:	bd80      	pop	{r7, pc}

080065ae <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80065ae:	b580      	push	{r7, lr}
 80065b0:	b086      	sub	sp, #24
 80065b2:	af00      	add	r7, sp, #0
 80065b4:	60f8      	str	r0, [r7, #12]
 80065b6:	607a      	str	r2, [r7, #4]
 80065b8:	603b      	str	r3, [r7, #0]
 80065ba:	460b      	mov	r3, r1
 80065bc:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80065be:	2300      	movs	r3, #0
 80065c0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80065c2:	2300      	movs	r3, #0
 80065c4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80065cc:	7af9      	ldrb	r1, [r7, #11]
 80065ce:	683b      	ldr	r3, [r7, #0]
 80065d0:	687a      	ldr	r2, [r7, #4]
 80065d2:	f7fb fb38 	bl	8001c46 <HAL_PCD_EP_Transmit>
 80065d6:	4603      	mov	r3, r0
 80065d8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80065da:	7dfb      	ldrb	r3, [r7, #23]
 80065dc:	4618      	mov	r0, r3
 80065de:	f000 f841 	bl	8006664 <USBD_Get_USB_Status>
 80065e2:	4603      	mov	r3, r0
 80065e4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80065e6:	7dbb      	ldrb	r3, [r7, #22]
}
 80065e8:	4618      	mov	r0, r3
 80065ea:	3718      	adds	r7, #24
 80065ec:	46bd      	mov	sp, r7
 80065ee:	bd80      	pop	{r7, pc}

080065f0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80065f0:	b580      	push	{r7, lr}
 80065f2:	b086      	sub	sp, #24
 80065f4:	af00      	add	r7, sp, #0
 80065f6:	60f8      	str	r0, [r7, #12]
 80065f8:	607a      	str	r2, [r7, #4]
 80065fa:	603b      	str	r3, [r7, #0]
 80065fc:	460b      	mov	r3, r1
 80065fe:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006600:	2300      	movs	r3, #0
 8006602:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006604:	2300      	movs	r3, #0
 8006606:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800660e:	7af9      	ldrb	r1, [r7, #11]
 8006610:	683b      	ldr	r3, [r7, #0]
 8006612:	687a      	ldr	r2, [r7, #4]
 8006614:	f7fb facc 	bl	8001bb0 <HAL_PCD_EP_Receive>
 8006618:	4603      	mov	r3, r0
 800661a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800661c:	7dfb      	ldrb	r3, [r7, #23]
 800661e:	4618      	mov	r0, r3
 8006620:	f000 f820 	bl	8006664 <USBD_Get_USB_Status>
 8006624:	4603      	mov	r3, r0
 8006626:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8006628:	7dbb      	ldrb	r3, [r7, #22]
}
 800662a:	4618      	mov	r0, r3
 800662c:	3718      	adds	r7, #24
 800662e:	46bd      	mov	sp, r7
 8006630:	bd80      	pop	{r7, pc}
	...

08006634 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8006634:	b480      	push	{r7}
 8006636:	b083      	sub	sp, #12
 8006638:	af00      	add	r7, sp, #0
 800663a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800663c:	4b03      	ldr	r3, [pc, #12]	; (800664c <USBD_static_malloc+0x18>)
}
 800663e:	4618      	mov	r0, r3
 8006640:	370c      	adds	r7, #12
 8006642:	46bd      	mov	sp, r7
 8006644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006648:	4770      	bx	lr
 800664a:	bf00      	nop
 800664c:	20000b30 	.word	0x20000b30

08006650 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8006650:	b480      	push	{r7}
 8006652:	b083      	sub	sp, #12
 8006654:	af00      	add	r7, sp, #0
 8006656:	6078      	str	r0, [r7, #4]

}
 8006658:	bf00      	nop
 800665a:	370c      	adds	r7, #12
 800665c:	46bd      	mov	sp, r7
 800665e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006662:	4770      	bx	lr

08006664 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8006664:	b480      	push	{r7}
 8006666:	b085      	sub	sp, #20
 8006668:	af00      	add	r7, sp, #0
 800666a:	4603      	mov	r3, r0
 800666c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800666e:	2300      	movs	r3, #0
 8006670:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8006672:	79fb      	ldrb	r3, [r7, #7]
 8006674:	2b03      	cmp	r3, #3
 8006676:	d817      	bhi.n	80066a8 <USBD_Get_USB_Status+0x44>
 8006678:	a201      	add	r2, pc, #4	; (adr r2, 8006680 <USBD_Get_USB_Status+0x1c>)
 800667a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800667e:	bf00      	nop
 8006680:	08006691 	.word	0x08006691
 8006684:	08006697 	.word	0x08006697
 8006688:	0800669d 	.word	0x0800669d
 800668c:	080066a3 	.word	0x080066a3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8006690:	2300      	movs	r3, #0
 8006692:	73fb      	strb	r3, [r7, #15]
    break;
 8006694:	e00b      	b.n	80066ae <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8006696:	2303      	movs	r3, #3
 8006698:	73fb      	strb	r3, [r7, #15]
    break;
 800669a:	e008      	b.n	80066ae <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800669c:	2301      	movs	r3, #1
 800669e:	73fb      	strb	r3, [r7, #15]
    break;
 80066a0:	e005      	b.n	80066ae <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80066a2:	2303      	movs	r3, #3
 80066a4:	73fb      	strb	r3, [r7, #15]
    break;
 80066a6:	e002      	b.n	80066ae <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80066a8:	2303      	movs	r3, #3
 80066aa:	73fb      	strb	r3, [r7, #15]
    break;
 80066ac:	bf00      	nop
  }
  return usb_status;
 80066ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80066b0:	4618      	mov	r0, r3
 80066b2:	3714      	adds	r7, #20
 80066b4:	46bd      	mov	sp, r7
 80066b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ba:	4770      	bx	lr

080066bc <__libc_init_array>:
 80066bc:	b570      	push	{r4, r5, r6, lr}
 80066be:	4d0d      	ldr	r5, [pc, #52]	; (80066f4 <__libc_init_array+0x38>)
 80066c0:	4c0d      	ldr	r4, [pc, #52]	; (80066f8 <__libc_init_array+0x3c>)
 80066c2:	1b64      	subs	r4, r4, r5
 80066c4:	10a4      	asrs	r4, r4, #2
 80066c6:	2600      	movs	r6, #0
 80066c8:	42a6      	cmp	r6, r4
 80066ca:	d109      	bne.n	80066e0 <__libc_init_array+0x24>
 80066cc:	4d0b      	ldr	r5, [pc, #44]	; (80066fc <__libc_init_array+0x40>)
 80066ce:	4c0c      	ldr	r4, [pc, #48]	; (8006700 <__libc_init_array+0x44>)
 80066d0:	f000 f820 	bl	8006714 <_init>
 80066d4:	1b64      	subs	r4, r4, r5
 80066d6:	10a4      	asrs	r4, r4, #2
 80066d8:	2600      	movs	r6, #0
 80066da:	42a6      	cmp	r6, r4
 80066dc:	d105      	bne.n	80066ea <__libc_init_array+0x2e>
 80066de:	bd70      	pop	{r4, r5, r6, pc}
 80066e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80066e4:	4798      	blx	r3
 80066e6:	3601      	adds	r6, #1
 80066e8:	e7ee      	b.n	80066c8 <__libc_init_array+0xc>
 80066ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80066ee:	4798      	blx	r3
 80066f0:	3601      	adds	r6, #1
 80066f2:	e7f2      	b.n	80066da <__libc_init_array+0x1e>
 80066f4:	0800678c 	.word	0x0800678c
 80066f8:	0800678c 	.word	0x0800678c
 80066fc:	0800678c 	.word	0x0800678c
 8006700:	08006790 	.word	0x08006790

08006704 <memset>:
 8006704:	4402      	add	r2, r0
 8006706:	4603      	mov	r3, r0
 8006708:	4293      	cmp	r3, r2
 800670a:	d100      	bne.n	800670e <memset+0xa>
 800670c:	4770      	bx	lr
 800670e:	f803 1b01 	strb.w	r1, [r3], #1
 8006712:	e7f9      	b.n	8006708 <memset+0x4>

08006714 <_init>:
 8006714:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006716:	bf00      	nop
 8006718:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800671a:	bc08      	pop	{r3}
 800671c:	469e      	mov	lr, r3
 800671e:	4770      	bx	lr

08006720 <_fini>:
 8006720:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006722:	bf00      	nop
 8006724:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006726:	bc08      	pop	{r3}
 8006728:	469e      	mov	lr, r3
 800672a:	4770      	bx	lr
