
usb_device.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007008  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08007190  08007190  00017190  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080071e8  080071e8  00020110  2**0
                  CONTENTS
  4 .ARM          00000008  080071e8  080071e8  000171e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080071f0  080071f0  00020110  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080071f0  080071f0  000171f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080071f4  080071f4  000171f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000110  20000000  080071f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020110  2**0
                  CONTENTS
 10 .bss          00000a70  20000110  20000110  00020110  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000b80  20000b80  00020110  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020110  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012a0a  00000000  00000000  00020140  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002c51  00000000  00000000  00032b4a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001020  00000000  00000000  000357a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000ed8  00000000  00000000  000367c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023592  00000000  00000000  00037698  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013412  00000000  00000000  0005ac2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cc384  00000000  00000000  0006e03c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0013a3c0  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004348  00000000  00000000  0013a410  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000110 	.word	0x20000110
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08007178 	.word	0x08007178

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000114 	.word	0x20000114
 80001c4:	08007178 	.word	0x08007178

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b084      	sub	sp, #16
 80004d0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d2:	f000 fa99 	bl	8000a08 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d6:	f000 f897 	bl	8000608 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004da:	f000 f953 	bl	8000784 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 80004de:	f006 f9e7 	bl	80068b0 <MX_USB_DEVICE_Init>
  MX_TIM3_Init();
 80004e2:	f000 f8fb 	bl	80006dc <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Encoder_Start_IT(&htim3, TIM_CHANNEL_ALL);
 80004e6:	213c      	movs	r1, #60	; 0x3c
 80004e8:	4842      	ldr	r0, [pc, #264]	; (80005f4 <main+0x128>)
 80004ea:	f002 fd25 	bl	8002f38 <HAL_TIM_Encoder_Start_IT>
  uint32_t last_print = 0, now = 0;
 80004ee:	2300      	movs	r3, #0
 80004f0:	60bb      	str	r3, [r7, #8]
 80004f2:	2300      	movs	r3, #0
 80004f4:	607b      	str	r3, [r7, #4]
  uint32_t rot_count = 0;
 80004f6:	2300      	movs	r3, #0
 80004f8:	60fb      	str	r3, [r7, #12]
  now = HAL_GetTick();
 80004fa:	f000 faeb 	bl	8000ad4 <HAL_GetTick>
 80004fe:	6078      	str	r0, [r7, #4]
  TIM3->CNT = 30000;
 8000500:	4b3d      	ldr	r3, [pc, #244]	; (80005f8 <main+0x12c>)
 8000502:	f247 5230 	movw	r2, #30000	; 0x7530
 8000506:	625a      	str	r2, [r3, #36]	; 0x24
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  now = HAL_GetTick();
 8000508:	f000 fae4 	bl	8000ad4 <HAL_GetTick>
 800050c:	6078      	str	r0, [r7, #4]
	  //if (now - last_print >= 100) {
		  // DBG("Encoder counter = %lu", TIM3->CNT);
		  if (rot_count != TIM3->CNT) {
 800050e:	4b3a      	ldr	r3, [pc, #232]	; (80005f8 <main+0x12c>)
 8000510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000512:	68fa      	ldr	r2, [r7, #12]
 8000514:	429a      	cmp	r2, r3
 8000516:	d039      	beq.n	800058c <main+0xc0>
			  	  if (rot_count > TIM3->CNT) {
 8000518:	4b37      	ldr	r3, [pc, #220]	; (80005f8 <main+0x12c>)
 800051a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800051c:	68fa      	ldr	r2, [r7, #12]
 800051e:	429a      	cmp	r2, r3
 8000520:	d90c      	bls.n	800053c <main+0x70>
			  		  keyBoardHIDsub.KEYCODE1=0x04;  // Press A key
 8000522:	4b36      	ldr	r3, [pc, #216]	; (80005fc <main+0x130>)
 8000524:	2204      	movs	r2, #4
 8000526:	709a      	strb	r2, [r3, #2]
					  keyBoardHIDsub.KEYCODE2=0x05;  // Press B key
 8000528:	4b34      	ldr	r3, [pc, #208]	; (80005fc <main+0x130>)
 800052a:	2205      	movs	r2, #5
 800052c:	70da      	strb	r2, [r3, #3]
					  keyBoardHIDsub.KEYCODE3=0x06;  // Press C key
 800052e:	4b33      	ldr	r3, [pc, #204]	; (80005fc <main+0x130>)
 8000530:	2206      	movs	r2, #6
 8000532:	711a      	strb	r2, [r3, #4]
					  keyBoardHIDsub.KEYCODE4=0x80;	 // Volume up - only works on linux
 8000534:	4b31      	ldr	r3, [pc, #196]	; (80005fc <main+0x130>)
 8000536:	2280      	movs	r2, #128	; 0x80
 8000538:	715a      	strb	r2, [r3, #5]
 800053a:	e00b      	b.n	8000554 <main+0x88>
			  	  } else {
			  		  keyBoardHIDsub.KEYCODE1=0x07;  // Press A key
 800053c:	4b2f      	ldr	r3, [pc, #188]	; (80005fc <main+0x130>)
 800053e:	2207      	movs	r2, #7
 8000540:	709a      	strb	r2, [r3, #2]
					  keyBoardHIDsub.KEYCODE2=0x08;  // Press B key
 8000542:	4b2e      	ldr	r3, [pc, #184]	; (80005fc <main+0x130>)
 8000544:	2208      	movs	r2, #8
 8000546:	70da      	strb	r2, [r3, #3]
					  keyBoardHIDsub.KEYCODE3=0x09;  // Press C key
 8000548:	4b2c      	ldr	r3, [pc, #176]	; (80005fc <main+0x130>)
 800054a:	2209      	movs	r2, #9
 800054c:	711a      	strb	r2, [r3, #4]
					  keyBoardHIDsub.KEYCODE4=0x81;	 // Volume down - only works on linux
 800054e:	4b2b      	ldr	r3, [pc, #172]	; (80005fc <main+0x130>)
 8000550:	2281      	movs	r2, #129	; 0x81
 8000552:	715a      	strb	r2, [r3, #5]
			  	  }
			  	  USBD_HID_SendReport(&hUsbDeviceFS,&keyBoardHIDsub,sizeof(keyBoardHIDsub));
 8000554:	2208      	movs	r2, #8
 8000556:	4929      	ldr	r1, [pc, #164]	; (80005fc <main+0x130>)
 8000558:	4829      	ldr	r0, [pc, #164]	; (8000600 <main+0x134>)
 800055a:	f004 fe2f 	bl	80051bc <USBD_HID_SendReport>
			  	  HAL_Delay(20); 		       // Press all key for 50 milliseconds
 800055e:	2014      	movs	r0, #20
 8000560:	f000 fac4 	bl	8000aec <HAL_Delay>
			  	  //keyBoardHIDsub.MODIFIER=0x00;  // To release shift key
			  	  keyBoardHIDsub.KEYCODE1=0x00;  // Release A key
 8000564:	4b25      	ldr	r3, [pc, #148]	; (80005fc <main+0x130>)
 8000566:	2200      	movs	r2, #0
 8000568:	709a      	strb	r2, [r3, #2]
			  	  keyBoardHIDsub.KEYCODE2=0x00;  // Release B key
 800056a:	4b24      	ldr	r3, [pc, #144]	; (80005fc <main+0x130>)
 800056c:	2200      	movs	r2, #0
 800056e:	70da      	strb	r2, [r3, #3]
			  	  keyBoardHIDsub.KEYCODE3=0x00;  // Release C key
 8000570:	4b22      	ldr	r3, [pc, #136]	; (80005fc <main+0x130>)
 8000572:	2200      	movs	r2, #0
 8000574:	711a      	strb	r2, [r3, #4]
			  	  keyBoardHIDsub.KEYCODE4=0x00;	 // Clear buffer from volume up
 8000576:	4b21      	ldr	r3, [pc, #132]	; (80005fc <main+0x130>)
 8000578:	2200      	movs	r2, #0
 800057a:	715a      	strb	r2, [r3, #5]
			  	  USBD_HID_SendReport(&hUsbDeviceFS,&keyBoardHIDsub,sizeof(keyBoardHIDsub));
 800057c:	2208      	movs	r2, #8
 800057e:	491f      	ldr	r1, [pc, #124]	; (80005fc <main+0x130>)
 8000580:	481f      	ldr	r0, [pc, #124]	; (8000600 <main+0x134>)
 8000582:	f004 fe1b 	bl	80051bc <USBD_HID_SendReport>
			  	  rot_count = TIM3->CNT;
 8000586:	4b1c      	ldr	r3, [pc, #112]	; (80005f8 <main+0x12c>)
 8000588:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800058a:	60fb      	str	r3, [r7, #12]
		  }
		  last_print = now;
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	60bb      	str	r3, [r7, #8]
	  //}
	  if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) == 0){
 8000590:	2140      	movs	r1, #64	; 0x40
 8000592:	481c      	ldr	r0, [pc, #112]	; (8000604 <main+0x138>)
 8000594:	f000 fd7c 	bl	8001090 <HAL_GPIO_ReadPin>
 8000598:	4603      	mov	r3, r0
 800059a:	2b00      	cmp	r3, #0
 800059c:	d1b4      	bne.n	8000508 <main+0x3c>
		  	  //keyBoardHIDsub.MODIFIER=0x02;  // To press shift key
		  	  keyBoardHIDsub.KEYCODE1=0x04;  // Press A key
 800059e:	4b17      	ldr	r3, [pc, #92]	; (80005fc <main+0x130>)
 80005a0:	2204      	movs	r2, #4
 80005a2:	709a      	strb	r2, [r3, #2]
		  	  keyBoardHIDsub.KEYCODE2=0x05;  // Press B key
 80005a4:	4b15      	ldr	r3, [pc, #84]	; (80005fc <main+0x130>)
 80005a6:	2205      	movs	r2, #5
 80005a8:	70da      	strb	r2, [r3, #3]
		  	  keyBoardHIDsub.KEYCODE3=0x06;  // Press C key
 80005aa:	4b14      	ldr	r3, [pc, #80]	; (80005fc <main+0x130>)
 80005ac:	2206      	movs	r2, #6
 80005ae:	711a      	strb	r2, [r3, #4]
		  	  keyBoardHIDsub.KEYCODE4=0x80;	 // Volume up - only works on linux
 80005b0:	4b12      	ldr	r3, [pc, #72]	; (80005fc <main+0x130>)
 80005b2:	2280      	movs	r2, #128	; 0x80
 80005b4:	715a      	strb	r2, [r3, #5]
		  	  USBD_HID_SendReport(&hUsbDeviceFS,&keyBoardHIDsub,sizeof(keyBoardHIDsub));
 80005b6:	2208      	movs	r2, #8
 80005b8:	4910      	ldr	r1, [pc, #64]	; (80005fc <main+0x130>)
 80005ba:	4811      	ldr	r0, [pc, #68]	; (8000600 <main+0x134>)
 80005bc:	f004 fdfe 	bl	80051bc <USBD_HID_SendReport>
		  	  HAL_Delay(50); 		       // Press all key for 50 milliseconds
 80005c0:	2032      	movs	r0, #50	; 0x32
 80005c2:	f000 fa93 	bl	8000aec <HAL_Delay>
		  	  //keyBoardHIDsub.MODIFIER=0x00;  // To release shift key
		  	  keyBoardHIDsub.KEYCODE1=0x00;  // Release A key
 80005c6:	4b0d      	ldr	r3, [pc, #52]	; (80005fc <main+0x130>)
 80005c8:	2200      	movs	r2, #0
 80005ca:	709a      	strb	r2, [r3, #2]
		  	  keyBoardHIDsub.KEYCODE2=0x00;  // Release B key
 80005cc:	4b0b      	ldr	r3, [pc, #44]	; (80005fc <main+0x130>)
 80005ce:	2200      	movs	r2, #0
 80005d0:	70da      	strb	r2, [r3, #3]
		  	  keyBoardHIDsub.KEYCODE3=0x00;  // Release C key
 80005d2:	4b0a      	ldr	r3, [pc, #40]	; (80005fc <main+0x130>)
 80005d4:	2200      	movs	r2, #0
 80005d6:	711a      	strb	r2, [r3, #4]
		  	  keyBoardHIDsub.KEYCODE4=0x00;	 // Clear buffer from volume up
 80005d8:	4b08      	ldr	r3, [pc, #32]	; (80005fc <main+0x130>)
 80005da:	2200      	movs	r2, #0
 80005dc:	715a      	strb	r2, [r3, #5]
		  	  USBD_HID_SendReport(&hUsbDeviceFS,&keyBoardHIDsub,sizeof(keyBoardHIDsub));
 80005de:	2208      	movs	r2, #8
 80005e0:	4906      	ldr	r1, [pc, #24]	; (80005fc <main+0x130>)
 80005e2:	4807      	ldr	r0, [pc, #28]	; (8000600 <main+0x134>)
 80005e4:	f004 fdea 	bl	80051bc <USBD_HID_SendReport>
		  	  HAL_Delay(1000); 	       // Repeat this task on every 1 second
 80005e8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005ec:	f000 fa7e 	bl	8000aec <HAL_Delay>
	  now = HAL_GetTick();
 80005f0:	e78a      	b.n	8000508 <main+0x3c>
 80005f2:	bf00      	nop
 80005f4:	2000012c 	.word	0x2000012c
 80005f8:	40000400 	.word	0x40000400
 80005fc:	20000174 	.word	0x20000174
 8000600:	20000184 	.word	0x20000184
 8000604:	40020400 	.word	0x40020400

08000608 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b094      	sub	sp, #80	; 0x50
 800060c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800060e:	f107 0320 	add.w	r3, r7, #32
 8000612:	2230      	movs	r2, #48	; 0x30
 8000614:	2100      	movs	r1, #0
 8000616:	4618      	mov	r0, r3
 8000618:	f006 fda6 	bl	8007168 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800061c:	f107 030c 	add.w	r3, r7, #12
 8000620:	2200      	movs	r2, #0
 8000622:	601a      	str	r2, [r3, #0]
 8000624:	605a      	str	r2, [r3, #4]
 8000626:	609a      	str	r2, [r3, #8]
 8000628:	60da      	str	r2, [r3, #12]
 800062a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800062c:	2300      	movs	r3, #0
 800062e:	60bb      	str	r3, [r7, #8]
 8000630:	4b28      	ldr	r3, [pc, #160]	; (80006d4 <SystemClock_Config+0xcc>)
 8000632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000634:	4a27      	ldr	r2, [pc, #156]	; (80006d4 <SystemClock_Config+0xcc>)
 8000636:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800063a:	6413      	str	r3, [r2, #64]	; 0x40
 800063c:	4b25      	ldr	r3, [pc, #148]	; (80006d4 <SystemClock_Config+0xcc>)
 800063e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000640:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000644:	60bb      	str	r3, [r7, #8]
 8000646:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000648:	2300      	movs	r3, #0
 800064a:	607b      	str	r3, [r7, #4]
 800064c:	4b22      	ldr	r3, [pc, #136]	; (80006d8 <SystemClock_Config+0xd0>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	4a21      	ldr	r2, [pc, #132]	; (80006d8 <SystemClock_Config+0xd0>)
 8000652:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000656:	6013      	str	r3, [r2, #0]
 8000658:	4b1f      	ldr	r3, [pc, #124]	; (80006d8 <SystemClock_Config+0xd0>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000660:	607b      	str	r3, [r7, #4]
 8000662:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000664:	2301      	movs	r3, #1
 8000666:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000668:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800066c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800066e:	2302      	movs	r3, #2
 8000670:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000672:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000676:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000678:	2319      	movs	r3, #25
 800067a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800067c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000680:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000682:	2302      	movs	r3, #2
 8000684:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000686:	2307      	movs	r3, #7
 8000688:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800068a:	f107 0320 	add.w	r3, r7, #32
 800068e:	4618      	mov	r0, r3
 8000690:	f001 ff7c 	bl	800258c <HAL_RCC_OscConfig>
 8000694:	4603      	mov	r3, r0
 8000696:	2b00      	cmp	r3, #0
 8000698:	d001      	beq.n	800069e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800069a:	f000 f8bd 	bl	8000818 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800069e:	230f      	movs	r3, #15
 80006a0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006a2:	2302      	movs	r3, #2
 80006a4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006a6:	2300      	movs	r3, #0
 80006a8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006aa:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006ae:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006b4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006b6:	f107 030c 	add.w	r3, r7, #12
 80006ba:	2105      	movs	r1, #5
 80006bc:	4618      	mov	r0, r3
 80006be:	f002 f9dd 	bl	8002a7c <HAL_RCC_ClockConfig>
 80006c2:	4603      	mov	r3, r0
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d001      	beq.n	80006cc <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80006c8:	f000 f8a6 	bl	8000818 <Error_Handler>
  }
}
 80006cc:	bf00      	nop
 80006ce:	3750      	adds	r7, #80	; 0x50
 80006d0:	46bd      	mov	sp, r7
 80006d2:	bd80      	pop	{r7, pc}
 80006d4:	40023800 	.word	0x40023800
 80006d8:	40007000 	.word	0x40007000

080006dc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b08c      	sub	sp, #48	; 0x30
 80006e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80006e2:	f107 030c 	add.w	r3, r7, #12
 80006e6:	2224      	movs	r2, #36	; 0x24
 80006e8:	2100      	movs	r1, #0
 80006ea:	4618      	mov	r0, r3
 80006ec:	f006 fd3c 	bl	8007168 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006f0:	1d3b      	adds	r3, r7, #4
 80006f2:	2200      	movs	r2, #0
 80006f4:	601a      	str	r2, [r3, #0]
 80006f6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80006f8:	4b20      	ldr	r3, [pc, #128]	; (800077c <MX_TIM3_Init+0xa0>)
 80006fa:	4a21      	ldr	r2, [pc, #132]	; (8000780 <MX_TIM3_Init+0xa4>)
 80006fc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80006fe:	4b1f      	ldr	r3, [pc, #124]	; (800077c <MX_TIM3_Init+0xa0>)
 8000700:	2200      	movs	r2, #0
 8000702:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000704:	4b1d      	ldr	r3, [pc, #116]	; (800077c <MX_TIM3_Init+0xa0>)
 8000706:	2200      	movs	r2, #0
 8000708:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800070a:	4b1c      	ldr	r3, [pc, #112]	; (800077c <MX_TIM3_Init+0xa0>)
 800070c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000710:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000712:	4b1a      	ldr	r3, [pc, #104]	; (800077c <MX_TIM3_Init+0xa0>)
 8000714:	2200      	movs	r2, #0
 8000716:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000718:	4b18      	ldr	r3, [pc, #96]	; (800077c <MX_TIM3_Init+0xa0>)
 800071a:	2200      	movs	r2, #0
 800071c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800071e:	2301      	movs	r3, #1
 8000720:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000722:	2300      	movs	r3, #0
 8000724:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000726:	2301      	movs	r3, #1
 8000728:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800072a:	2300      	movs	r3, #0
 800072c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800072e:	2300      	movs	r3, #0
 8000730:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000732:	2300      	movs	r3, #0
 8000734:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000736:	2301      	movs	r3, #1
 8000738:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800073a:	2300      	movs	r3, #0
 800073c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800073e:	2300      	movs	r3, #0
 8000740:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8000742:	f107 030c 	add.w	r3, r7, #12
 8000746:	4619      	mov	r1, r3
 8000748:	480c      	ldr	r0, [pc, #48]	; (800077c <MX_TIM3_Init+0xa0>)
 800074a:	f002 fb4f 	bl	8002dec <HAL_TIM_Encoder_Init>
 800074e:	4603      	mov	r3, r0
 8000750:	2b00      	cmp	r3, #0
 8000752:	d001      	beq.n	8000758 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8000754:	f000 f860 	bl	8000818 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000758:	2300      	movs	r3, #0
 800075a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800075c:	2300      	movs	r3, #0
 800075e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000760:	1d3b      	adds	r3, r7, #4
 8000762:	4619      	mov	r1, r3
 8000764:	4805      	ldr	r0, [pc, #20]	; (800077c <MX_TIM3_Init+0xa0>)
 8000766:	f002 fe95 	bl	8003494 <HAL_TIMEx_MasterConfigSynchronization>
 800076a:	4603      	mov	r3, r0
 800076c:	2b00      	cmp	r3, #0
 800076e:	d001      	beq.n	8000774 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8000770:	f000 f852 	bl	8000818 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000774:	bf00      	nop
 8000776:	3730      	adds	r7, #48	; 0x30
 8000778:	46bd      	mov	sp, r7
 800077a:	bd80      	pop	{r7, pc}
 800077c:	2000012c 	.word	0x2000012c
 8000780:	40000400 	.word	0x40000400

08000784 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b088      	sub	sp, #32
 8000788:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800078a:	f107 030c 	add.w	r3, r7, #12
 800078e:	2200      	movs	r2, #0
 8000790:	601a      	str	r2, [r3, #0]
 8000792:	605a      	str	r2, [r3, #4]
 8000794:	609a      	str	r2, [r3, #8]
 8000796:	60da      	str	r2, [r3, #12]
 8000798:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800079a:	2300      	movs	r3, #0
 800079c:	60bb      	str	r3, [r7, #8]
 800079e:	4b1c      	ldr	r3, [pc, #112]	; (8000810 <MX_GPIO_Init+0x8c>)
 80007a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a2:	4a1b      	ldr	r2, [pc, #108]	; (8000810 <MX_GPIO_Init+0x8c>)
 80007a4:	f043 0302 	orr.w	r3, r3, #2
 80007a8:	6313      	str	r3, [r2, #48]	; 0x30
 80007aa:	4b19      	ldr	r3, [pc, #100]	; (8000810 <MX_GPIO_Init+0x8c>)
 80007ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ae:	f003 0302 	and.w	r3, r3, #2
 80007b2:	60bb      	str	r3, [r7, #8]
 80007b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007b6:	2300      	movs	r3, #0
 80007b8:	607b      	str	r3, [r7, #4]
 80007ba:	4b15      	ldr	r3, [pc, #84]	; (8000810 <MX_GPIO_Init+0x8c>)
 80007bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007be:	4a14      	ldr	r2, [pc, #80]	; (8000810 <MX_GPIO_Init+0x8c>)
 80007c0:	f043 0301 	orr.w	r3, r3, #1
 80007c4:	6313      	str	r3, [r2, #48]	; 0x30
 80007c6:	4b12      	ldr	r3, [pc, #72]	; (8000810 <MX_GPIO_Init+0x8c>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ca:	f003 0301 	and.w	r3, r3, #1
 80007ce:	607b      	str	r3, [r7, #4]
 80007d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007d2:	2300      	movs	r3, #0
 80007d4:	603b      	str	r3, [r7, #0]
 80007d6:	4b0e      	ldr	r3, [pc, #56]	; (8000810 <MX_GPIO_Init+0x8c>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007da:	4a0d      	ldr	r2, [pc, #52]	; (8000810 <MX_GPIO_Init+0x8c>)
 80007dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007e0:	6313      	str	r3, [r2, #48]	; 0x30
 80007e2:	4b0b      	ldr	r3, [pc, #44]	; (8000810 <MX_GPIO_Init+0x8c>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007ea:	603b      	str	r3, [r7, #0]
 80007ec:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80007ee:	2340      	movs	r3, #64	; 0x40
 80007f0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007f2:	2300      	movs	r3, #0
 80007f4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80007f6:	2302      	movs	r3, #2
 80007f8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007fa:	f107 030c 	add.w	r3, r7, #12
 80007fe:	4619      	mov	r1, r3
 8000800:	4804      	ldr	r0, [pc, #16]	; (8000814 <MX_GPIO_Init+0x90>)
 8000802:	f000 faa9 	bl	8000d58 <HAL_GPIO_Init>

}
 8000806:	bf00      	nop
 8000808:	3720      	adds	r7, #32
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}
 800080e:	bf00      	nop
 8000810:	40023800 	.word	0x40023800
 8000814:	40020400 	.word	0x40020400

08000818 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000818:	b480      	push	{r7}
 800081a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800081c:	b672      	cpsid	i
}
 800081e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000820:	e7fe      	b.n	8000820 <Error_Handler+0x8>
	...

08000824 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b082      	sub	sp, #8
 8000828:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800082a:	2300      	movs	r3, #0
 800082c:	607b      	str	r3, [r7, #4]
 800082e:	4b10      	ldr	r3, [pc, #64]	; (8000870 <HAL_MspInit+0x4c>)
 8000830:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000832:	4a0f      	ldr	r2, [pc, #60]	; (8000870 <HAL_MspInit+0x4c>)
 8000834:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000838:	6453      	str	r3, [r2, #68]	; 0x44
 800083a:	4b0d      	ldr	r3, [pc, #52]	; (8000870 <HAL_MspInit+0x4c>)
 800083c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800083e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000842:	607b      	str	r3, [r7, #4]
 8000844:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000846:	2300      	movs	r3, #0
 8000848:	603b      	str	r3, [r7, #0]
 800084a:	4b09      	ldr	r3, [pc, #36]	; (8000870 <HAL_MspInit+0x4c>)
 800084c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800084e:	4a08      	ldr	r2, [pc, #32]	; (8000870 <HAL_MspInit+0x4c>)
 8000850:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000854:	6413      	str	r3, [r2, #64]	; 0x40
 8000856:	4b06      	ldr	r3, [pc, #24]	; (8000870 <HAL_MspInit+0x4c>)
 8000858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800085a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800085e:	603b      	str	r3, [r7, #0]
 8000860:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000862:	2007      	movs	r0, #7
 8000864:	f000 fa36 	bl	8000cd4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000868:	bf00      	nop
 800086a:	3708      	adds	r7, #8
 800086c:	46bd      	mov	sp, r7
 800086e:	bd80      	pop	{r7, pc}
 8000870:	40023800 	.word	0x40023800

08000874 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b08a      	sub	sp, #40	; 0x28
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800087c:	f107 0314 	add.w	r3, r7, #20
 8000880:	2200      	movs	r2, #0
 8000882:	601a      	str	r2, [r3, #0]
 8000884:	605a      	str	r2, [r3, #4]
 8000886:	609a      	str	r2, [r3, #8]
 8000888:	60da      	str	r2, [r3, #12]
 800088a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	4a1d      	ldr	r2, [pc, #116]	; (8000908 <HAL_TIM_Encoder_MspInit+0x94>)
 8000892:	4293      	cmp	r3, r2
 8000894:	d133      	bne.n	80008fe <HAL_TIM_Encoder_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000896:	2300      	movs	r3, #0
 8000898:	613b      	str	r3, [r7, #16]
 800089a:	4b1c      	ldr	r3, [pc, #112]	; (800090c <HAL_TIM_Encoder_MspInit+0x98>)
 800089c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800089e:	4a1b      	ldr	r2, [pc, #108]	; (800090c <HAL_TIM_Encoder_MspInit+0x98>)
 80008a0:	f043 0302 	orr.w	r3, r3, #2
 80008a4:	6413      	str	r3, [r2, #64]	; 0x40
 80008a6:	4b19      	ldr	r3, [pc, #100]	; (800090c <HAL_TIM_Encoder_MspInit+0x98>)
 80008a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008aa:	f003 0302 	and.w	r3, r3, #2
 80008ae:	613b      	str	r3, [r7, #16]
 80008b0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008b2:	2300      	movs	r3, #0
 80008b4:	60fb      	str	r3, [r7, #12]
 80008b6:	4b15      	ldr	r3, [pc, #84]	; (800090c <HAL_TIM_Encoder_MspInit+0x98>)
 80008b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ba:	4a14      	ldr	r2, [pc, #80]	; (800090c <HAL_TIM_Encoder_MspInit+0x98>)
 80008bc:	f043 0302 	orr.w	r3, r3, #2
 80008c0:	6313      	str	r3, [r2, #48]	; 0x30
 80008c2:	4b12      	ldr	r3, [pc, #72]	; (800090c <HAL_TIM_Encoder_MspInit+0x98>)
 80008c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c6:	f003 0302 	and.w	r3, r3, #2
 80008ca:	60fb      	str	r3, [r7, #12]
 80008cc:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PB5     ------> TIM3_CH2
    PB4     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4;
 80008ce:	2330      	movs	r3, #48	; 0x30
 80008d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008d2:	2302      	movs	r3, #2
 80008d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d6:	2300      	movs	r3, #0
 80008d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008da:	2300      	movs	r3, #0
 80008dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80008de:	2302      	movs	r3, #2
 80008e0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008e2:	f107 0314 	add.w	r3, r7, #20
 80008e6:	4619      	mov	r1, r3
 80008e8:	4809      	ldr	r0, [pc, #36]	; (8000910 <HAL_TIM_Encoder_MspInit+0x9c>)
 80008ea:	f000 fa35 	bl	8000d58 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80008ee:	2200      	movs	r2, #0
 80008f0:	2100      	movs	r1, #0
 80008f2:	201d      	movs	r0, #29
 80008f4:	f000 f9f9 	bl	8000cea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80008f8:	201d      	movs	r0, #29
 80008fa:	f000 fa12 	bl	8000d22 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80008fe:	bf00      	nop
 8000900:	3728      	adds	r7, #40	; 0x28
 8000902:	46bd      	mov	sp, r7
 8000904:	bd80      	pop	{r7, pc}
 8000906:	bf00      	nop
 8000908:	40000400 	.word	0x40000400
 800090c:	40023800 	.word	0x40023800
 8000910:	40020400 	.word	0x40020400

08000914 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000914:	b480      	push	{r7}
 8000916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000918:	e7fe      	b.n	8000918 <NMI_Handler+0x4>

0800091a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800091a:	b480      	push	{r7}
 800091c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800091e:	e7fe      	b.n	800091e <HardFault_Handler+0x4>

08000920 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000920:	b480      	push	{r7}
 8000922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000924:	e7fe      	b.n	8000924 <MemManage_Handler+0x4>

08000926 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000926:	b480      	push	{r7}
 8000928:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800092a:	e7fe      	b.n	800092a <BusFault_Handler+0x4>

0800092c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800092c:	b480      	push	{r7}
 800092e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000930:	e7fe      	b.n	8000930 <UsageFault_Handler+0x4>

08000932 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000932:	b480      	push	{r7}
 8000934:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000936:	bf00      	nop
 8000938:	46bd      	mov	sp, r7
 800093a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093e:	4770      	bx	lr

08000940 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000940:	b480      	push	{r7}
 8000942:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000944:	bf00      	nop
 8000946:	46bd      	mov	sp, r7
 8000948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094c:	4770      	bx	lr

0800094e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800094e:	b480      	push	{r7}
 8000950:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000952:	bf00      	nop
 8000954:	46bd      	mov	sp, r7
 8000956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095a:	4770      	bx	lr

0800095c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000960:	f000 f8a4 	bl	8000aac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000964:	bf00      	nop
 8000966:	bd80      	pop	{r7, pc}

08000968 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800096c:	4802      	ldr	r0, [pc, #8]	; (8000978 <TIM3_IRQHandler+0x10>)
 800096e:	f002 fb91 	bl	8003094 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000972:	bf00      	nop
 8000974:	bd80      	pop	{r7, pc}
 8000976:	bf00      	nop
 8000978:	2000012c 	.word	0x2000012c

0800097c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000980:	4802      	ldr	r0, [pc, #8]	; (800098c <OTG_FS_IRQHandler+0x10>)
 8000982:	f000 fced 	bl	8001360 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000986:	bf00      	nop
 8000988:	bd80      	pop	{r7, pc}
 800098a:	bf00      	nop
 800098c:	20000660 	.word	0x20000660

08000990 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000990:	b480      	push	{r7}
 8000992:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000994:	4b06      	ldr	r3, [pc, #24]	; (80009b0 <SystemInit+0x20>)
 8000996:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800099a:	4a05      	ldr	r2, [pc, #20]	; (80009b0 <SystemInit+0x20>)
 800099c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009a0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009a4:	bf00      	nop
 80009a6:	46bd      	mov	sp, r7
 80009a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ac:	4770      	bx	lr
 80009ae:	bf00      	nop
 80009b0:	e000ed00 	.word	0xe000ed00

080009b4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80009b4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80009ec <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80009b8:	480d      	ldr	r0, [pc, #52]	; (80009f0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80009ba:	490e      	ldr	r1, [pc, #56]	; (80009f4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80009bc:	4a0e      	ldr	r2, [pc, #56]	; (80009f8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80009be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009c0:	e002      	b.n	80009c8 <LoopCopyDataInit>

080009c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009c6:	3304      	adds	r3, #4

080009c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009cc:	d3f9      	bcc.n	80009c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009ce:	4a0b      	ldr	r2, [pc, #44]	; (80009fc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80009d0:	4c0b      	ldr	r4, [pc, #44]	; (8000a00 <LoopFillZerobss+0x26>)
  movs r3, #0
 80009d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009d4:	e001      	b.n	80009da <LoopFillZerobss>

080009d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009d8:	3204      	adds	r2, #4

080009da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009dc:	d3fb      	bcc.n	80009d6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80009de:	f7ff ffd7 	bl	8000990 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80009e2:	f006 fb9d 	bl	8007120 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80009e6:	f7ff fd71 	bl	80004cc <main>
  bx  lr    
 80009ea:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80009ec:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80009f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009f4:	20000110 	.word	0x20000110
  ldr r2, =_sidata
 80009f8:	080071f8 	.word	0x080071f8
  ldr r2, =_sbss
 80009fc:	20000110 	.word	0x20000110
  ldr r4, =_ebss
 8000a00:	20000b80 	.word	0x20000b80

08000a04 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a04:	e7fe      	b.n	8000a04 <ADC_IRQHandler>
	...

08000a08 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a0c:	4b0e      	ldr	r3, [pc, #56]	; (8000a48 <HAL_Init+0x40>)
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	4a0d      	ldr	r2, [pc, #52]	; (8000a48 <HAL_Init+0x40>)
 8000a12:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a16:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a18:	4b0b      	ldr	r3, [pc, #44]	; (8000a48 <HAL_Init+0x40>)
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	4a0a      	ldr	r2, [pc, #40]	; (8000a48 <HAL_Init+0x40>)
 8000a1e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a22:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a24:	4b08      	ldr	r3, [pc, #32]	; (8000a48 <HAL_Init+0x40>)
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	4a07      	ldr	r2, [pc, #28]	; (8000a48 <HAL_Init+0x40>)
 8000a2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a2e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a30:	2003      	movs	r0, #3
 8000a32:	f000 f94f 	bl	8000cd4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a36:	2000      	movs	r0, #0
 8000a38:	f000 f808 	bl	8000a4c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a3c:	f7ff fef2 	bl	8000824 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a40:	2300      	movs	r3, #0
}
 8000a42:	4618      	mov	r0, r3
 8000a44:	bd80      	pop	{r7, pc}
 8000a46:	bf00      	nop
 8000a48:	40023c00 	.word	0x40023c00

08000a4c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b082      	sub	sp, #8
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a54:	4b12      	ldr	r3, [pc, #72]	; (8000aa0 <HAL_InitTick+0x54>)
 8000a56:	681a      	ldr	r2, [r3, #0]
 8000a58:	4b12      	ldr	r3, [pc, #72]	; (8000aa4 <HAL_InitTick+0x58>)
 8000a5a:	781b      	ldrb	r3, [r3, #0]
 8000a5c:	4619      	mov	r1, r3
 8000a5e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a62:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a66:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	f000 f967 	bl	8000d3e <HAL_SYSTICK_Config>
 8000a70:	4603      	mov	r3, r0
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d001      	beq.n	8000a7a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a76:	2301      	movs	r3, #1
 8000a78:	e00e      	b.n	8000a98 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	2b0f      	cmp	r3, #15
 8000a7e:	d80a      	bhi.n	8000a96 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a80:	2200      	movs	r2, #0
 8000a82:	6879      	ldr	r1, [r7, #4]
 8000a84:	f04f 30ff 	mov.w	r0, #4294967295
 8000a88:	f000 f92f 	bl	8000cea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a8c:	4a06      	ldr	r2, [pc, #24]	; (8000aa8 <HAL_InitTick+0x5c>)
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a92:	2300      	movs	r3, #0
 8000a94:	e000      	b.n	8000a98 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a96:	2301      	movs	r3, #1
}
 8000a98:	4618      	mov	r0, r3
 8000a9a:	3708      	adds	r7, #8
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	bd80      	pop	{r7, pc}
 8000aa0:	20000000 	.word	0x20000000
 8000aa4:	20000008 	.word	0x20000008
 8000aa8:	20000004 	.word	0x20000004

08000aac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ab0:	4b06      	ldr	r3, [pc, #24]	; (8000acc <HAL_IncTick+0x20>)
 8000ab2:	781b      	ldrb	r3, [r3, #0]
 8000ab4:	461a      	mov	r2, r3
 8000ab6:	4b06      	ldr	r3, [pc, #24]	; (8000ad0 <HAL_IncTick+0x24>)
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	4413      	add	r3, r2
 8000abc:	4a04      	ldr	r2, [pc, #16]	; (8000ad0 <HAL_IncTick+0x24>)
 8000abe:	6013      	str	r3, [r2, #0]
}
 8000ac0:	bf00      	nop
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac8:	4770      	bx	lr
 8000aca:	bf00      	nop
 8000acc:	20000008 	.word	0x20000008
 8000ad0:	2000017c 	.word	0x2000017c

08000ad4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ad8:	4b03      	ldr	r3, [pc, #12]	; (8000ae8 <HAL_GetTick+0x14>)
 8000ada:	681b      	ldr	r3, [r3, #0]
}
 8000adc:	4618      	mov	r0, r3
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop
 8000ae8:	2000017c 	.word	0x2000017c

08000aec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b084      	sub	sp, #16
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000af4:	f7ff ffee 	bl	8000ad4 <HAL_GetTick>
 8000af8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000afe:	68fb      	ldr	r3, [r7, #12]
 8000b00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b04:	d005      	beq.n	8000b12 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b06:	4b0a      	ldr	r3, [pc, #40]	; (8000b30 <HAL_Delay+0x44>)
 8000b08:	781b      	ldrb	r3, [r3, #0]
 8000b0a:	461a      	mov	r2, r3
 8000b0c:	68fb      	ldr	r3, [r7, #12]
 8000b0e:	4413      	add	r3, r2
 8000b10:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000b12:	bf00      	nop
 8000b14:	f7ff ffde 	bl	8000ad4 <HAL_GetTick>
 8000b18:	4602      	mov	r2, r0
 8000b1a:	68bb      	ldr	r3, [r7, #8]
 8000b1c:	1ad3      	subs	r3, r2, r3
 8000b1e:	68fa      	ldr	r2, [r7, #12]
 8000b20:	429a      	cmp	r2, r3
 8000b22:	d8f7      	bhi.n	8000b14 <HAL_Delay+0x28>
  {
  }
}
 8000b24:	bf00      	nop
 8000b26:	bf00      	nop
 8000b28:	3710      	adds	r7, #16
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	bf00      	nop
 8000b30:	20000008 	.word	0x20000008

08000b34 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b34:	b480      	push	{r7}
 8000b36:	b085      	sub	sp, #20
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	f003 0307 	and.w	r3, r3, #7
 8000b42:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b44:	4b0c      	ldr	r3, [pc, #48]	; (8000b78 <__NVIC_SetPriorityGrouping+0x44>)
 8000b46:	68db      	ldr	r3, [r3, #12]
 8000b48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b4a:	68ba      	ldr	r2, [r7, #8]
 8000b4c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b50:	4013      	ands	r3, r2
 8000b52:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b54:	68fb      	ldr	r3, [r7, #12]
 8000b56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b58:	68bb      	ldr	r3, [r7, #8]
 8000b5a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b5c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b66:	4a04      	ldr	r2, [pc, #16]	; (8000b78 <__NVIC_SetPriorityGrouping+0x44>)
 8000b68:	68bb      	ldr	r3, [r7, #8]
 8000b6a:	60d3      	str	r3, [r2, #12]
}
 8000b6c:	bf00      	nop
 8000b6e:	3714      	adds	r7, #20
 8000b70:	46bd      	mov	sp, r7
 8000b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b76:	4770      	bx	lr
 8000b78:	e000ed00 	.word	0xe000ed00

08000b7c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b80:	4b04      	ldr	r3, [pc, #16]	; (8000b94 <__NVIC_GetPriorityGrouping+0x18>)
 8000b82:	68db      	ldr	r3, [r3, #12]
 8000b84:	0a1b      	lsrs	r3, r3, #8
 8000b86:	f003 0307 	and.w	r3, r3, #7
}
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b92:	4770      	bx	lr
 8000b94:	e000ed00 	.word	0xe000ed00

08000b98 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	b083      	sub	sp, #12
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ba2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	db0b      	blt.n	8000bc2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000baa:	79fb      	ldrb	r3, [r7, #7]
 8000bac:	f003 021f 	and.w	r2, r3, #31
 8000bb0:	4907      	ldr	r1, [pc, #28]	; (8000bd0 <__NVIC_EnableIRQ+0x38>)
 8000bb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bb6:	095b      	lsrs	r3, r3, #5
 8000bb8:	2001      	movs	r0, #1
 8000bba:	fa00 f202 	lsl.w	r2, r0, r2
 8000bbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000bc2:	bf00      	nop
 8000bc4:	370c      	adds	r7, #12
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bcc:	4770      	bx	lr
 8000bce:	bf00      	nop
 8000bd0:	e000e100 	.word	0xe000e100

08000bd4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	b083      	sub	sp, #12
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	4603      	mov	r3, r0
 8000bdc:	6039      	str	r1, [r7, #0]
 8000bde:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000be0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	db0a      	blt.n	8000bfe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000be8:	683b      	ldr	r3, [r7, #0]
 8000bea:	b2da      	uxtb	r2, r3
 8000bec:	490c      	ldr	r1, [pc, #48]	; (8000c20 <__NVIC_SetPriority+0x4c>)
 8000bee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bf2:	0112      	lsls	r2, r2, #4
 8000bf4:	b2d2      	uxtb	r2, r2
 8000bf6:	440b      	add	r3, r1
 8000bf8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bfc:	e00a      	b.n	8000c14 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bfe:	683b      	ldr	r3, [r7, #0]
 8000c00:	b2da      	uxtb	r2, r3
 8000c02:	4908      	ldr	r1, [pc, #32]	; (8000c24 <__NVIC_SetPriority+0x50>)
 8000c04:	79fb      	ldrb	r3, [r7, #7]
 8000c06:	f003 030f 	and.w	r3, r3, #15
 8000c0a:	3b04      	subs	r3, #4
 8000c0c:	0112      	lsls	r2, r2, #4
 8000c0e:	b2d2      	uxtb	r2, r2
 8000c10:	440b      	add	r3, r1
 8000c12:	761a      	strb	r2, [r3, #24]
}
 8000c14:	bf00      	nop
 8000c16:	370c      	adds	r7, #12
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1e:	4770      	bx	lr
 8000c20:	e000e100 	.word	0xe000e100
 8000c24:	e000ed00 	.word	0xe000ed00

08000c28 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	b089      	sub	sp, #36	; 0x24
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	60f8      	str	r0, [r7, #12]
 8000c30:	60b9      	str	r1, [r7, #8]
 8000c32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c34:	68fb      	ldr	r3, [r7, #12]
 8000c36:	f003 0307 	and.w	r3, r3, #7
 8000c3a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c3c:	69fb      	ldr	r3, [r7, #28]
 8000c3e:	f1c3 0307 	rsb	r3, r3, #7
 8000c42:	2b04      	cmp	r3, #4
 8000c44:	bf28      	it	cs
 8000c46:	2304      	movcs	r3, #4
 8000c48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c4a:	69fb      	ldr	r3, [r7, #28]
 8000c4c:	3304      	adds	r3, #4
 8000c4e:	2b06      	cmp	r3, #6
 8000c50:	d902      	bls.n	8000c58 <NVIC_EncodePriority+0x30>
 8000c52:	69fb      	ldr	r3, [r7, #28]
 8000c54:	3b03      	subs	r3, #3
 8000c56:	e000      	b.n	8000c5a <NVIC_EncodePriority+0x32>
 8000c58:	2300      	movs	r3, #0
 8000c5a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c5c:	f04f 32ff 	mov.w	r2, #4294967295
 8000c60:	69bb      	ldr	r3, [r7, #24]
 8000c62:	fa02 f303 	lsl.w	r3, r2, r3
 8000c66:	43da      	mvns	r2, r3
 8000c68:	68bb      	ldr	r3, [r7, #8]
 8000c6a:	401a      	ands	r2, r3
 8000c6c:	697b      	ldr	r3, [r7, #20]
 8000c6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c70:	f04f 31ff 	mov.w	r1, #4294967295
 8000c74:	697b      	ldr	r3, [r7, #20]
 8000c76:	fa01 f303 	lsl.w	r3, r1, r3
 8000c7a:	43d9      	mvns	r1, r3
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c80:	4313      	orrs	r3, r2
         );
}
 8000c82:	4618      	mov	r0, r3
 8000c84:	3724      	adds	r7, #36	; 0x24
 8000c86:	46bd      	mov	sp, r7
 8000c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8c:	4770      	bx	lr
	...

08000c90 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b082      	sub	sp, #8
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	3b01      	subs	r3, #1
 8000c9c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ca0:	d301      	bcc.n	8000ca6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ca2:	2301      	movs	r3, #1
 8000ca4:	e00f      	b.n	8000cc6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ca6:	4a0a      	ldr	r2, [pc, #40]	; (8000cd0 <SysTick_Config+0x40>)
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	3b01      	subs	r3, #1
 8000cac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000cae:	210f      	movs	r1, #15
 8000cb0:	f04f 30ff 	mov.w	r0, #4294967295
 8000cb4:	f7ff ff8e 	bl	8000bd4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000cb8:	4b05      	ldr	r3, [pc, #20]	; (8000cd0 <SysTick_Config+0x40>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cbe:	4b04      	ldr	r3, [pc, #16]	; (8000cd0 <SysTick_Config+0x40>)
 8000cc0:	2207      	movs	r2, #7
 8000cc2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000cc4:	2300      	movs	r3, #0
}
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	3708      	adds	r7, #8
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	bf00      	nop
 8000cd0:	e000e010 	.word	0xe000e010

08000cd4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b082      	sub	sp, #8
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cdc:	6878      	ldr	r0, [r7, #4]
 8000cde:	f7ff ff29 	bl	8000b34 <__NVIC_SetPriorityGrouping>
}
 8000ce2:	bf00      	nop
 8000ce4:	3708      	adds	r7, #8
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}

08000cea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000cea:	b580      	push	{r7, lr}
 8000cec:	b086      	sub	sp, #24
 8000cee:	af00      	add	r7, sp, #0
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	60b9      	str	r1, [r7, #8]
 8000cf4:	607a      	str	r2, [r7, #4]
 8000cf6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000cfc:	f7ff ff3e 	bl	8000b7c <__NVIC_GetPriorityGrouping>
 8000d00:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d02:	687a      	ldr	r2, [r7, #4]
 8000d04:	68b9      	ldr	r1, [r7, #8]
 8000d06:	6978      	ldr	r0, [r7, #20]
 8000d08:	f7ff ff8e 	bl	8000c28 <NVIC_EncodePriority>
 8000d0c:	4602      	mov	r2, r0
 8000d0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d12:	4611      	mov	r1, r2
 8000d14:	4618      	mov	r0, r3
 8000d16:	f7ff ff5d 	bl	8000bd4 <__NVIC_SetPriority>
}
 8000d1a:	bf00      	nop
 8000d1c:	3718      	adds	r7, #24
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bd80      	pop	{r7, pc}

08000d22 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d22:	b580      	push	{r7, lr}
 8000d24:	b082      	sub	sp, #8
 8000d26:	af00      	add	r7, sp, #0
 8000d28:	4603      	mov	r3, r0
 8000d2a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d30:	4618      	mov	r0, r3
 8000d32:	f7ff ff31 	bl	8000b98 <__NVIC_EnableIRQ>
}
 8000d36:	bf00      	nop
 8000d38:	3708      	adds	r7, #8
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}

08000d3e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d3e:	b580      	push	{r7, lr}
 8000d40:	b082      	sub	sp, #8
 8000d42:	af00      	add	r7, sp, #0
 8000d44:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d46:	6878      	ldr	r0, [r7, #4]
 8000d48:	f7ff ffa2 	bl	8000c90 <SysTick_Config>
 8000d4c:	4603      	mov	r3, r0
}
 8000d4e:	4618      	mov	r0, r3
 8000d50:	3708      	adds	r7, #8
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}
	...

08000d58 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	b089      	sub	sp, #36	; 0x24
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
 8000d60:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000d62:	2300      	movs	r3, #0
 8000d64:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000d66:	2300      	movs	r3, #0
 8000d68:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d6e:	2300      	movs	r3, #0
 8000d70:	61fb      	str	r3, [r7, #28]
 8000d72:	e16b      	b.n	800104c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000d74:	2201      	movs	r2, #1
 8000d76:	69fb      	ldr	r3, [r7, #28]
 8000d78:	fa02 f303 	lsl.w	r3, r2, r3
 8000d7c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d7e:	683b      	ldr	r3, [r7, #0]
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	697a      	ldr	r2, [r7, #20]
 8000d84:	4013      	ands	r3, r2
 8000d86:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000d88:	693a      	ldr	r2, [r7, #16]
 8000d8a:	697b      	ldr	r3, [r7, #20]
 8000d8c:	429a      	cmp	r2, r3
 8000d8e:	f040 815a 	bne.w	8001046 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d92:	683b      	ldr	r3, [r7, #0]
 8000d94:	685b      	ldr	r3, [r3, #4]
 8000d96:	f003 0303 	and.w	r3, r3, #3
 8000d9a:	2b01      	cmp	r3, #1
 8000d9c:	d005      	beq.n	8000daa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d9e:	683b      	ldr	r3, [r7, #0]
 8000da0:	685b      	ldr	r3, [r3, #4]
 8000da2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000da6:	2b02      	cmp	r3, #2
 8000da8:	d130      	bne.n	8000e0c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	689b      	ldr	r3, [r3, #8]
 8000dae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000db0:	69fb      	ldr	r3, [r7, #28]
 8000db2:	005b      	lsls	r3, r3, #1
 8000db4:	2203      	movs	r2, #3
 8000db6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dba:	43db      	mvns	r3, r3
 8000dbc:	69ba      	ldr	r2, [r7, #24]
 8000dbe:	4013      	ands	r3, r2
 8000dc0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000dc2:	683b      	ldr	r3, [r7, #0]
 8000dc4:	68da      	ldr	r2, [r3, #12]
 8000dc6:	69fb      	ldr	r3, [r7, #28]
 8000dc8:	005b      	lsls	r3, r3, #1
 8000dca:	fa02 f303 	lsl.w	r3, r2, r3
 8000dce:	69ba      	ldr	r2, [r7, #24]
 8000dd0:	4313      	orrs	r3, r2
 8000dd2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	69ba      	ldr	r2, [r7, #24]
 8000dd8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	685b      	ldr	r3, [r3, #4]
 8000dde:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000de0:	2201      	movs	r2, #1
 8000de2:	69fb      	ldr	r3, [r7, #28]
 8000de4:	fa02 f303 	lsl.w	r3, r2, r3
 8000de8:	43db      	mvns	r3, r3
 8000dea:	69ba      	ldr	r2, [r7, #24]
 8000dec:	4013      	ands	r3, r2
 8000dee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000df0:	683b      	ldr	r3, [r7, #0]
 8000df2:	685b      	ldr	r3, [r3, #4]
 8000df4:	091b      	lsrs	r3, r3, #4
 8000df6:	f003 0201 	and.w	r2, r3, #1
 8000dfa:	69fb      	ldr	r3, [r7, #28]
 8000dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8000e00:	69ba      	ldr	r2, [r7, #24]
 8000e02:	4313      	orrs	r3, r2
 8000e04:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	69ba      	ldr	r2, [r7, #24]
 8000e0a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e0c:	683b      	ldr	r3, [r7, #0]
 8000e0e:	685b      	ldr	r3, [r3, #4]
 8000e10:	f003 0303 	and.w	r3, r3, #3
 8000e14:	2b03      	cmp	r3, #3
 8000e16:	d017      	beq.n	8000e48 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	68db      	ldr	r3, [r3, #12]
 8000e1c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000e1e:	69fb      	ldr	r3, [r7, #28]
 8000e20:	005b      	lsls	r3, r3, #1
 8000e22:	2203      	movs	r2, #3
 8000e24:	fa02 f303 	lsl.w	r3, r2, r3
 8000e28:	43db      	mvns	r3, r3
 8000e2a:	69ba      	ldr	r2, [r7, #24]
 8000e2c:	4013      	ands	r3, r2
 8000e2e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e30:	683b      	ldr	r3, [r7, #0]
 8000e32:	689a      	ldr	r2, [r3, #8]
 8000e34:	69fb      	ldr	r3, [r7, #28]
 8000e36:	005b      	lsls	r3, r3, #1
 8000e38:	fa02 f303 	lsl.w	r3, r2, r3
 8000e3c:	69ba      	ldr	r2, [r7, #24]
 8000e3e:	4313      	orrs	r3, r2
 8000e40:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	69ba      	ldr	r2, [r7, #24]
 8000e46:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e48:	683b      	ldr	r3, [r7, #0]
 8000e4a:	685b      	ldr	r3, [r3, #4]
 8000e4c:	f003 0303 	and.w	r3, r3, #3
 8000e50:	2b02      	cmp	r3, #2
 8000e52:	d123      	bne.n	8000e9c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e54:	69fb      	ldr	r3, [r7, #28]
 8000e56:	08da      	lsrs	r2, r3, #3
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	3208      	adds	r2, #8
 8000e5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e60:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000e62:	69fb      	ldr	r3, [r7, #28]
 8000e64:	f003 0307 	and.w	r3, r3, #7
 8000e68:	009b      	lsls	r3, r3, #2
 8000e6a:	220f      	movs	r2, #15
 8000e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e70:	43db      	mvns	r3, r3
 8000e72:	69ba      	ldr	r2, [r7, #24]
 8000e74:	4013      	ands	r3, r2
 8000e76:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000e78:	683b      	ldr	r3, [r7, #0]
 8000e7a:	691a      	ldr	r2, [r3, #16]
 8000e7c:	69fb      	ldr	r3, [r7, #28]
 8000e7e:	f003 0307 	and.w	r3, r3, #7
 8000e82:	009b      	lsls	r3, r3, #2
 8000e84:	fa02 f303 	lsl.w	r3, r2, r3
 8000e88:	69ba      	ldr	r2, [r7, #24]
 8000e8a:	4313      	orrs	r3, r2
 8000e8c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000e8e:	69fb      	ldr	r3, [r7, #28]
 8000e90:	08da      	lsrs	r2, r3, #3
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	3208      	adds	r2, #8
 8000e96:	69b9      	ldr	r1, [r7, #24]
 8000e98:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000ea2:	69fb      	ldr	r3, [r7, #28]
 8000ea4:	005b      	lsls	r3, r3, #1
 8000ea6:	2203      	movs	r2, #3
 8000ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8000eac:	43db      	mvns	r3, r3
 8000eae:	69ba      	ldr	r2, [r7, #24]
 8000eb0:	4013      	ands	r3, r2
 8000eb2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000eb4:	683b      	ldr	r3, [r7, #0]
 8000eb6:	685b      	ldr	r3, [r3, #4]
 8000eb8:	f003 0203 	and.w	r2, r3, #3
 8000ebc:	69fb      	ldr	r3, [r7, #28]
 8000ebe:	005b      	lsls	r3, r3, #1
 8000ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec4:	69ba      	ldr	r2, [r7, #24]
 8000ec6:	4313      	orrs	r3, r2
 8000ec8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	69ba      	ldr	r2, [r7, #24]
 8000ece:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000ed0:	683b      	ldr	r3, [r7, #0]
 8000ed2:	685b      	ldr	r3, [r3, #4]
 8000ed4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	f000 80b4 	beq.w	8001046 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ede:	2300      	movs	r3, #0
 8000ee0:	60fb      	str	r3, [r7, #12]
 8000ee2:	4b60      	ldr	r3, [pc, #384]	; (8001064 <HAL_GPIO_Init+0x30c>)
 8000ee4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ee6:	4a5f      	ldr	r2, [pc, #380]	; (8001064 <HAL_GPIO_Init+0x30c>)
 8000ee8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000eec:	6453      	str	r3, [r2, #68]	; 0x44
 8000eee:	4b5d      	ldr	r3, [pc, #372]	; (8001064 <HAL_GPIO_Init+0x30c>)
 8000ef0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ef2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ef6:	60fb      	str	r3, [r7, #12]
 8000ef8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000efa:	4a5b      	ldr	r2, [pc, #364]	; (8001068 <HAL_GPIO_Init+0x310>)
 8000efc:	69fb      	ldr	r3, [r7, #28]
 8000efe:	089b      	lsrs	r3, r3, #2
 8000f00:	3302      	adds	r3, #2
 8000f02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f06:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f08:	69fb      	ldr	r3, [r7, #28]
 8000f0a:	f003 0303 	and.w	r3, r3, #3
 8000f0e:	009b      	lsls	r3, r3, #2
 8000f10:	220f      	movs	r2, #15
 8000f12:	fa02 f303 	lsl.w	r3, r2, r3
 8000f16:	43db      	mvns	r3, r3
 8000f18:	69ba      	ldr	r2, [r7, #24]
 8000f1a:	4013      	ands	r3, r2
 8000f1c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	4a52      	ldr	r2, [pc, #328]	; (800106c <HAL_GPIO_Init+0x314>)
 8000f22:	4293      	cmp	r3, r2
 8000f24:	d02b      	beq.n	8000f7e <HAL_GPIO_Init+0x226>
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	4a51      	ldr	r2, [pc, #324]	; (8001070 <HAL_GPIO_Init+0x318>)
 8000f2a:	4293      	cmp	r3, r2
 8000f2c:	d025      	beq.n	8000f7a <HAL_GPIO_Init+0x222>
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	4a50      	ldr	r2, [pc, #320]	; (8001074 <HAL_GPIO_Init+0x31c>)
 8000f32:	4293      	cmp	r3, r2
 8000f34:	d01f      	beq.n	8000f76 <HAL_GPIO_Init+0x21e>
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	4a4f      	ldr	r2, [pc, #316]	; (8001078 <HAL_GPIO_Init+0x320>)
 8000f3a:	4293      	cmp	r3, r2
 8000f3c:	d019      	beq.n	8000f72 <HAL_GPIO_Init+0x21a>
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	4a4e      	ldr	r2, [pc, #312]	; (800107c <HAL_GPIO_Init+0x324>)
 8000f42:	4293      	cmp	r3, r2
 8000f44:	d013      	beq.n	8000f6e <HAL_GPIO_Init+0x216>
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	4a4d      	ldr	r2, [pc, #308]	; (8001080 <HAL_GPIO_Init+0x328>)
 8000f4a:	4293      	cmp	r3, r2
 8000f4c:	d00d      	beq.n	8000f6a <HAL_GPIO_Init+0x212>
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	4a4c      	ldr	r2, [pc, #304]	; (8001084 <HAL_GPIO_Init+0x32c>)
 8000f52:	4293      	cmp	r3, r2
 8000f54:	d007      	beq.n	8000f66 <HAL_GPIO_Init+0x20e>
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	4a4b      	ldr	r2, [pc, #300]	; (8001088 <HAL_GPIO_Init+0x330>)
 8000f5a:	4293      	cmp	r3, r2
 8000f5c:	d101      	bne.n	8000f62 <HAL_GPIO_Init+0x20a>
 8000f5e:	2307      	movs	r3, #7
 8000f60:	e00e      	b.n	8000f80 <HAL_GPIO_Init+0x228>
 8000f62:	2308      	movs	r3, #8
 8000f64:	e00c      	b.n	8000f80 <HAL_GPIO_Init+0x228>
 8000f66:	2306      	movs	r3, #6
 8000f68:	e00a      	b.n	8000f80 <HAL_GPIO_Init+0x228>
 8000f6a:	2305      	movs	r3, #5
 8000f6c:	e008      	b.n	8000f80 <HAL_GPIO_Init+0x228>
 8000f6e:	2304      	movs	r3, #4
 8000f70:	e006      	b.n	8000f80 <HAL_GPIO_Init+0x228>
 8000f72:	2303      	movs	r3, #3
 8000f74:	e004      	b.n	8000f80 <HAL_GPIO_Init+0x228>
 8000f76:	2302      	movs	r3, #2
 8000f78:	e002      	b.n	8000f80 <HAL_GPIO_Init+0x228>
 8000f7a:	2301      	movs	r3, #1
 8000f7c:	e000      	b.n	8000f80 <HAL_GPIO_Init+0x228>
 8000f7e:	2300      	movs	r3, #0
 8000f80:	69fa      	ldr	r2, [r7, #28]
 8000f82:	f002 0203 	and.w	r2, r2, #3
 8000f86:	0092      	lsls	r2, r2, #2
 8000f88:	4093      	lsls	r3, r2
 8000f8a:	69ba      	ldr	r2, [r7, #24]
 8000f8c:	4313      	orrs	r3, r2
 8000f8e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f90:	4935      	ldr	r1, [pc, #212]	; (8001068 <HAL_GPIO_Init+0x310>)
 8000f92:	69fb      	ldr	r3, [r7, #28]
 8000f94:	089b      	lsrs	r3, r3, #2
 8000f96:	3302      	adds	r3, #2
 8000f98:	69ba      	ldr	r2, [r7, #24]
 8000f9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f9e:	4b3b      	ldr	r3, [pc, #236]	; (800108c <HAL_GPIO_Init+0x334>)
 8000fa0:	689b      	ldr	r3, [r3, #8]
 8000fa2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fa4:	693b      	ldr	r3, [r7, #16]
 8000fa6:	43db      	mvns	r3, r3
 8000fa8:	69ba      	ldr	r2, [r7, #24]
 8000faa:	4013      	ands	r3, r2
 8000fac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000fae:	683b      	ldr	r3, [r7, #0]
 8000fb0:	685b      	ldr	r3, [r3, #4]
 8000fb2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d003      	beq.n	8000fc2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000fba:	69ba      	ldr	r2, [r7, #24]
 8000fbc:	693b      	ldr	r3, [r7, #16]
 8000fbe:	4313      	orrs	r3, r2
 8000fc0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000fc2:	4a32      	ldr	r2, [pc, #200]	; (800108c <HAL_GPIO_Init+0x334>)
 8000fc4:	69bb      	ldr	r3, [r7, #24]
 8000fc6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000fc8:	4b30      	ldr	r3, [pc, #192]	; (800108c <HAL_GPIO_Init+0x334>)
 8000fca:	68db      	ldr	r3, [r3, #12]
 8000fcc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fce:	693b      	ldr	r3, [r7, #16]
 8000fd0:	43db      	mvns	r3, r3
 8000fd2:	69ba      	ldr	r2, [r7, #24]
 8000fd4:	4013      	ands	r3, r2
 8000fd6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000fd8:	683b      	ldr	r3, [r7, #0]
 8000fda:	685b      	ldr	r3, [r3, #4]
 8000fdc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d003      	beq.n	8000fec <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000fe4:	69ba      	ldr	r2, [r7, #24]
 8000fe6:	693b      	ldr	r3, [r7, #16]
 8000fe8:	4313      	orrs	r3, r2
 8000fea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000fec:	4a27      	ldr	r2, [pc, #156]	; (800108c <HAL_GPIO_Init+0x334>)
 8000fee:	69bb      	ldr	r3, [r7, #24]
 8000ff0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000ff2:	4b26      	ldr	r3, [pc, #152]	; (800108c <HAL_GPIO_Init+0x334>)
 8000ff4:	685b      	ldr	r3, [r3, #4]
 8000ff6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ff8:	693b      	ldr	r3, [r7, #16]
 8000ffa:	43db      	mvns	r3, r3
 8000ffc:	69ba      	ldr	r2, [r7, #24]
 8000ffe:	4013      	ands	r3, r2
 8001000:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001002:	683b      	ldr	r3, [r7, #0]
 8001004:	685b      	ldr	r3, [r3, #4]
 8001006:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800100a:	2b00      	cmp	r3, #0
 800100c:	d003      	beq.n	8001016 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800100e:	69ba      	ldr	r2, [r7, #24]
 8001010:	693b      	ldr	r3, [r7, #16]
 8001012:	4313      	orrs	r3, r2
 8001014:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001016:	4a1d      	ldr	r2, [pc, #116]	; (800108c <HAL_GPIO_Init+0x334>)
 8001018:	69bb      	ldr	r3, [r7, #24]
 800101a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800101c:	4b1b      	ldr	r3, [pc, #108]	; (800108c <HAL_GPIO_Init+0x334>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001022:	693b      	ldr	r3, [r7, #16]
 8001024:	43db      	mvns	r3, r3
 8001026:	69ba      	ldr	r2, [r7, #24]
 8001028:	4013      	ands	r3, r2
 800102a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	685b      	ldr	r3, [r3, #4]
 8001030:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001034:	2b00      	cmp	r3, #0
 8001036:	d003      	beq.n	8001040 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001038:	69ba      	ldr	r2, [r7, #24]
 800103a:	693b      	ldr	r3, [r7, #16]
 800103c:	4313      	orrs	r3, r2
 800103e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001040:	4a12      	ldr	r2, [pc, #72]	; (800108c <HAL_GPIO_Init+0x334>)
 8001042:	69bb      	ldr	r3, [r7, #24]
 8001044:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001046:	69fb      	ldr	r3, [r7, #28]
 8001048:	3301      	adds	r3, #1
 800104a:	61fb      	str	r3, [r7, #28]
 800104c:	69fb      	ldr	r3, [r7, #28]
 800104e:	2b0f      	cmp	r3, #15
 8001050:	f67f ae90 	bls.w	8000d74 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001054:	bf00      	nop
 8001056:	bf00      	nop
 8001058:	3724      	adds	r7, #36	; 0x24
 800105a:	46bd      	mov	sp, r7
 800105c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001060:	4770      	bx	lr
 8001062:	bf00      	nop
 8001064:	40023800 	.word	0x40023800
 8001068:	40013800 	.word	0x40013800
 800106c:	40020000 	.word	0x40020000
 8001070:	40020400 	.word	0x40020400
 8001074:	40020800 	.word	0x40020800
 8001078:	40020c00 	.word	0x40020c00
 800107c:	40021000 	.word	0x40021000
 8001080:	40021400 	.word	0x40021400
 8001084:	40021800 	.word	0x40021800
 8001088:	40021c00 	.word	0x40021c00
 800108c:	40013c00 	.word	0x40013c00

08001090 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001090:	b480      	push	{r7}
 8001092:	b085      	sub	sp, #20
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
 8001098:	460b      	mov	r3, r1
 800109a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	691a      	ldr	r2, [r3, #16]
 80010a0:	887b      	ldrh	r3, [r7, #2]
 80010a2:	4013      	ands	r3, r2
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d002      	beq.n	80010ae <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80010a8:	2301      	movs	r3, #1
 80010aa:	73fb      	strb	r3, [r7, #15]
 80010ac:	e001      	b.n	80010b2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80010ae:	2300      	movs	r3, #0
 80010b0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80010b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80010b4:	4618      	mov	r0, r3
 80010b6:	3714      	adds	r7, #20
 80010b8:	46bd      	mov	sp, r7
 80010ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010be:	4770      	bx	lr

080010c0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80010c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80010c2:	b08f      	sub	sp, #60	; 0x3c
 80010c4:	af0a      	add	r7, sp, #40	; 0x28
 80010c6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d101      	bne.n	80010d2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80010ce:	2301      	movs	r3, #1
 80010d0:	e10f      	b.n	80012f2 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80010de:	b2db      	uxtb	r3, r3
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d106      	bne.n	80010f2 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	2200      	movs	r2, #0
 80010e8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80010ec:	6878      	ldr	r0, [r7, #4]
 80010ee:	f005 fd15 	bl	8006b1c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	2203      	movs	r2, #3
 80010f6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80010fa:	68bb      	ldr	r3, [r7, #8]
 80010fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80010fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001102:	2b00      	cmp	r3, #0
 8001104:	d102      	bne.n	800110c <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	2200      	movs	r2, #0
 800110a:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	4618      	mov	r0, r3
 8001112:	f002 fb64 	bl	80037de <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	603b      	str	r3, [r7, #0]
 800111c:	687e      	ldr	r6, [r7, #4]
 800111e:	466d      	mov	r5, sp
 8001120:	f106 0410 	add.w	r4, r6, #16
 8001124:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001126:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001128:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800112a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800112c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001130:	e885 0003 	stmia.w	r5, {r0, r1}
 8001134:	1d33      	adds	r3, r6, #4
 8001136:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001138:	6838      	ldr	r0, [r7, #0]
 800113a:	f002 fa3b 	bl	80035b4 <USB_CoreInit>
 800113e:	4603      	mov	r3, r0
 8001140:	2b00      	cmp	r3, #0
 8001142:	d005      	beq.n	8001150 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	2202      	movs	r2, #2
 8001148:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800114c:	2301      	movs	r3, #1
 800114e:	e0d0      	b.n	80012f2 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	2100      	movs	r1, #0
 8001156:	4618      	mov	r0, r3
 8001158:	f002 fb52 	bl	8003800 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800115c:	2300      	movs	r3, #0
 800115e:	73fb      	strb	r3, [r7, #15]
 8001160:	e04a      	b.n	80011f8 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001162:	7bfa      	ldrb	r2, [r7, #15]
 8001164:	6879      	ldr	r1, [r7, #4]
 8001166:	4613      	mov	r3, r2
 8001168:	00db      	lsls	r3, r3, #3
 800116a:	4413      	add	r3, r2
 800116c:	009b      	lsls	r3, r3, #2
 800116e:	440b      	add	r3, r1
 8001170:	333d      	adds	r3, #61	; 0x3d
 8001172:	2201      	movs	r2, #1
 8001174:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001176:	7bfa      	ldrb	r2, [r7, #15]
 8001178:	6879      	ldr	r1, [r7, #4]
 800117a:	4613      	mov	r3, r2
 800117c:	00db      	lsls	r3, r3, #3
 800117e:	4413      	add	r3, r2
 8001180:	009b      	lsls	r3, r3, #2
 8001182:	440b      	add	r3, r1
 8001184:	333c      	adds	r3, #60	; 0x3c
 8001186:	7bfa      	ldrb	r2, [r7, #15]
 8001188:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800118a:	7bfa      	ldrb	r2, [r7, #15]
 800118c:	7bfb      	ldrb	r3, [r7, #15]
 800118e:	b298      	uxth	r0, r3
 8001190:	6879      	ldr	r1, [r7, #4]
 8001192:	4613      	mov	r3, r2
 8001194:	00db      	lsls	r3, r3, #3
 8001196:	4413      	add	r3, r2
 8001198:	009b      	lsls	r3, r3, #2
 800119a:	440b      	add	r3, r1
 800119c:	3344      	adds	r3, #68	; 0x44
 800119e:	4602      	mov	r2, r0
 80011a0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80011a2:	7bfa      	ldrb	r2, [r7, #15]
 80011a4:	6879      	ldr	r1, [r7, #4]
 80011a6:	4613      	mov	r3, r2
 80011a8:	00db      	lsls	r3, r3, #3
 80011aa:	4413      	add	r3, r2
 80011ac:	009b      	lsls	r3, r3, #2
 80011ae:	440b      	add	r3, r1
 80011b0:	3340      	adds	r3, #64	; 0x40
 80011b2:	2200      	movs	r2, #0
 80011b4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80011b6:	7bfa      	ldrb	r2, [r7, #15]
 80011b8:	6879      	ldr	r1, [r7, #4]
 80011ba:	4613      	mov	r3, r2
 80011bc:	00db      	lsls	r3, r3, #3
 80011be:	4413      	add	r3, r2
 80011c0:	009b      	lsls	r3, r3, #2
 80011c2:	440b      	add	r3, r1
 80011c4:	3348      	adds	r3, #72	; 0x48
 80011c6:	2200      	movs	r2, #0
 80011c8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80011ca:	7bfa      	ldrb	r2, [r7, #15]
 80011cc:	6879      	ldr	r1, [r7, #4]
 80011ce:	4613      	mov	r3, r2
 80011d0:	00db      	lsls	r3, r3, #3
 80011d2:	4413      	add	r3, r2
 80011d4:	009b      	lsls	r3, r3, #2
 80011d6:	440b      	add	r3, r1
 80011d8:	334c      	adds	r3, #76	; 0x4c
 80011da:	2200      	movs	r2, #0
 80011dc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80011de:	7bfa      	ldrb	r2, [r7, #15]
 80011e0:	6879      	ldr	r1, [r7, #4]
 80011e2:	4613      	mov	r3, r2
 80011e4:	00db      	lsls	r3, r3, #3
 80011e6:	4413      	add	r3, r2
 80011e8:	009b      	lsls	r3, r3, #2
 80011ea:	440b      	add	r3, r1
 80011ec:	3354      	adds	r3, #84	; 0x54
 80011ee:	2200      	movs	r2, #0
 80011f0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80011f2:	7bfb      	ldrb	r3, [r7, #15]
 80011f4:	3301      	adds	r3, #1
 80011f6:	73fb      	strb	r3, [r7, #15]
 80011f8:	7bfa      	ldrb	r2, [r7, #15]
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	685b      	ldr	r3, [r3, #4]
 80011fe:	429a      	cmp	r2, r3
 8001200:	d3af      	bcc.n	8001162 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001202:	2300      	movs	r3, #0
 8001204:	73fb      	strb	r3, [r7, #15]
 8001206:	e044      	b.n	8001292 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001208:	7bfa      	ldrb	r2, [r7, #15]
 800120a:	6879      	ldr	r1, [r7, #4]
 800120c:	4613      	mov	r3, r2
 800120e:	00db      	lsls	r3, r3, #3
 8001210:	4413      	add	r3, r2
 8001212:	009b      	lsls	r3, r3, #2
 8001214:	440b      	add	r3, r1
 8001216:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800121a:	2200      	movs	r2, #0
 800121c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800121e:	7bfa      	ldrb	r2, [r7, #15]
 8001220:	6879      	ldr	r1, [r7, #4]
 8001222:	4613      	mov	r3, r2
 8001224:	00db      	lsls	r3, r3, #3
 8001226:	4413      	add	r3, r2
 8001228:	009b      	lsls	r3, r3, #2
 800122a:	440b      	add	r3, r1
 800122c:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8001230:	7bfa      	ldrb	r2, [r7, #15]
 8001232:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001234:	7bfa      	ldrb	r2, [r7, #15]
 8001236:	6879      	ldr	r1, [r7, #4]
 8001238:	4613      	mov	r3, r2
 800123a:	00db      	lsls	r3, r3, #3
 800123c:	4413      	add	r3, r2
 800123e:	009b      	lsls	r3, r3, #2
 8001240:	440b      	add	r3, r1
 8001242:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001246:	2200      	movs	r2, #0
 8001248:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800124a:	7bfa      	ldrb	r2, [r7, #15]
 800124c:	6879      	ldr	r1, [r7, #4]
 800124e:	4613      	mov	r3, r2
 8001250:	00db      	lsls	r3, r3, #3
 8001252:	4413      	add	r3, r2
 8001254:	009b      	lsls	r3, r3, #2
 8001256:	440b      	add	r3, r1
 8001258:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800125c:	2200      	movs	r2, #0
 800125e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001260:	7bfa      	ldrb	r2, [r7, #15]
 8001262:	6879      	ldr	r1, [r7, #4]
 8001264:	4613      	mov	r3, r2
 8001266:	00db      	lsls	r3, r3, #3
 8001268:	4413      	add	r3, r2
 800126a:	009b      	lsls	r3, r3, #2
 800126c:	440b      	add	r3, r1
 800126e:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8001272:	2200      	movs	r2, #0
 8001274:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001276:	7bfa      	ldrb	r2, [r7, #15]
 8001278:	6879      	ldr	r1, [r7, #4]
 800127a:	4613      	mov	r3, r2
 800127c:	00db      	lsls	r3, r3, #3
 800127e:	4413      	add	r3, r2
 8001280:	009b      	lsls	r3, r3, #2
 8001282:	440b      	add	r3, r1
 8001284:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8001288:	2200      	movs	r2, #0
 800128a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800128c:	7bfb      	ldrb	r3, [r7, #15]
 800128e:	3301      	adds	r3, #1
 8001290:	73fb      	strb	r3, [r7, #15]
 8001292:	7bfa      	ldrb	r2, [r7, #15]
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	685b      	ldr	r3, [r3, #4]
 8001298:	429a      	cmp	r2, r3
 800129a:	d3b5      	bcc.n	8001208 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	603b      	str	r3, [r7, #0]
 80012a2:	687e      	ldr	r6, [r7, #4]
 80012a4:	466d      	mov	r5, sp
 80012a6:	f106 0410 	add.w	r4, r6, #16
 80012aa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80012ac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80012ae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80012b0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80012b2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80012b6:	e885 0003 	stmia.w	r5, {r0, r1}
 80012ba:	1d33      	adds	r3, r6, #4
 80012bc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80012be:	6838      	ldr	r0, [r7, #0]
 80012c0:	f002 faea 	bl	8003898 <USB_DevInit>
 80012c4:	4603      	mov	r3, r0
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d005      	beq.n	80012d6 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	2202      	movs	r2, #2
 80012ce:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80012d2:	2301      	movs	r3, #1
 80012d4:	e00d      	b.n	80012f2 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	2200      	movs	r2, #0
 80012da:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	2201      	movs	r2, #1
 80012e2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	4618      	mov	r0, r3
 80012ec:	f003 fc39 	bl	8004b62 <USB_DevDisconnect>

  return HAL_OK;
 80012f0:	2300      	movs	r3, #0
}
 80012f2:	4618      	mov	r0, r3
 80012f4:	3714      	adds	r7, #20
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080012fa <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80012fa:	b580      	push	{r7, lr}
 80012fc:	b084      	sub	sp, #16
 80012fe:	af00      	add	r7, sp, #0
 8001300:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800130e:	2b01      	cmp	r3, #1
 8001310:	d101      	bne.n	8001316 <HAL_PCD_Start+0x1c>
 8001312:	2302      	movs	r3, #2
 8001314:	e020      	b.n	8001358 <HAL_PCD_Start+0x5e>
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	2201      	movs	r2, #1
 800131a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001322:	2b01      	cmp	r3, #1
 8001324:	d109      	bne.n	800133a <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800132a:	2b01      	cmp	r3, #1
 800132c:	d005      	beq.n	800133a <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001332:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	4618      	mov	r0, r3
 8001340:	f002 fa3c 	bl	80037bc <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	4618      	mov	r0, r3
 800134a:	f003 fbe9 	bl	8004b20 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	2200      	movs	r2, #0
 8001352:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001356:	2300      	movs	r3, #0
}
 8001358:	4618      	mov	r0, r3
 800135a:	3710      	adds	r7, #16
 800135c:	46bd      	mov	sp, r7
 800135e:	bd80      	pop	{r7, pc}

08001360 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001360:	b590      	push	{r4, r7, lr}
 8001362:	b08d      	sub	sp, #52	; 0x34
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800136e:	6a3b      	ldr	r3, [r7, #32]
 8001370:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	4618      	mov	r0, r3
 8001378:	f003 fca7 	bl	8004cca <USB_GetMode>
 800137c:	4603      	mov	r3, r0
 800137e:	2b00      	cmp	r3, #0
 8001380:	f040 848a 	bne.w	8001c98 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	4618      	mov	r0, r3
 800138a:	f003 fc0b 	bl	8004ba4 <USB_ReadInterrupts>
 800138e:	4603      	mov	r3, r0
 8001390:	2b00      	cmp	r3, #0
 8001392:	f000 8480 	beq.w	8001c96 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8001396:	69fb      	ldr	r3, [r7, #28]
 8001398:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800139c:	689b      	ldr	r3, [r3, #8]
 800139e:	0a1b      	lsrs	r3, r3, #8
 80013a0:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	4618      	mov	r0, r3
 80013b0:	f003 fbf8 	bl	8004ba4 <USB_ReadInterrupts>
 80013b4:	4603      	mov	r3, r0
 80013b6:	f003 0302 	and.w	r3, r3, #2
 80013ba:	2b02      	cmp	r3, #2
 80013bc:	d107      	bne.n	80013ce <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	695a      	ldr	r2, [r3, #20]
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	f002 0202 	and.w	r2, r2, #2
 80013cc:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	4618      	mov	r0, r3
 80013d4:	f003 fbe6 	bl	8004ba4 <USB_ReadInterrupts>
 80013d8:	4603      	mov	r3, r0
 80013da:	f003 0310 	and.w	r3, r3, #16
 80013de:	2b10      	cmp	r3, #16
 80013e0:	d161      	bne.n	80014a6 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	699a      	ldr	r2, [r3, #24]
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	f022 0210 	bic.w	r2, r2, #16
 80013f0:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80013f2:	6a3b      	ldr	r3, [r7, #32]
 80013f4:	6a1b      	ldr	r3, [r3, #32]
 80013f6:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80013f8:	69bb      	ldr	r3, [r7, #24]
 80013fa:	f003 020f 	and.w	r2, r3, #15
 80013fe:	4613      	mov	r3, r2
 8001400:	00db      	lsls	r3, r3, #3
 8001402:	4413      	add	r3, r2
 8001404:	009b      	lsls	r3, r3, #2
 8001406:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800140a:	687a      	ldr	r2, [r7, #4]
 800140c:	4413      	add	r3, r2
 800140e:	3304      	adds	r3, #4
 8001410:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001412:	69bb      	ldr	r3, [r7, #24]
 8001414:	0c5b      	lsrs	r3, r3, #17
 8001416:	f003 030f 	and.w	r3, r3, #15
 800141a:	2b02      	cmp	r3, #2
 800141c:	d124      	bne.n	8001468 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800141e:	69ba      	ldr	r2, [r7, #24]
 8001420:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001424:	4013      	ands	r3, r2
 8001426:	2b00      	cmp	r3, #0
 8001428:	d035      	beq.n	8001496 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800142a:	697b      	ldr	r3, [r7, #20]
 800142c:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800142e:	69bb      	ldr	r3, [r7, #24]
 8001430:	091b      	lsrs	r3, r3, #4
 8001432:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001434:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001438:	b29b      	uxth	r3, r3
 800143a:	461a      	mov	r2, r3
 800143c:	6a38      	ldr	r0, [r7, #32]
 800143e:	f003 fa1d 	bl	800487c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001442:	697b      	ldr	r3, [r7, #20]
 8001444:	691a      	ldr	r2, [r3, #16]
 8001446:	69bb      	ldr	r3, [r7, #24]
 8001448:	091b      	lsrs	r3, r3, #4
 800144a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800144e:	441a      	add	r2, r3
 8001450:	697b      	ldr	r3, [r7, #20]
 8001452:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001454:	697b      	ldr	r3, [r7, #20]
 8001456:	6a1a      	ldr	r2, [r3, #32]
 8001458:	69bb      	ldr	r3, [r7, #24]
 800145a:	091b      	lsrs	r3, r3, #4
 800145c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001460:	441a      	add	r2, r3
 8001462:	697b      	ldr	r3, [r7, #20]
 8001464:	621a      	str	r2, [r3, #32]
 8001466:	e016      	b.n	8001496 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8001468:	69bb      	ldr	r3, [r7, #24]
 800146a:	0c5b      	lsrs	r3, r3, #17
 800146c:	f003 030f 	and.w	r3, r3, #15
 8001470:	2b06      	cmp	r3, #6
 8001472:	d110      	bne.n	8001496 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800147a:	2208      	movs	r2, #8
 800147c:	4619      	mov	r1, r3
 800147e:	6a38      	ldr	r0, [r7, #32]
 8001480:	f003 f9fc 	bl	800487c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001484:	697b      	ldr	r3, [r7, #20]
 8001486:	6a1a      	ldr	r2, [r3, #32]
 8001488:	69bb      	ldr	r3, [r7, #24]
 800148a:	091b      	lsrs	r3, r3, #4
 800148c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001490:	441a      	add	r2, r3
 8001492:	697b      	ldr	r3, [r7, #20]
 8001494:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	699a      	ldr	r2, [r3, #24]
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	f042 0210 	orr.w	r2, r2, #16
 80014a4:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	4618      	mov	r0, r3
 80014ac:	f003 fb7a 	bl	8004ba4 <USB_ReadInterrupts>
 80014b0:	4603      	mov	r3, r0
 80014b2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80014b6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80014ba:	f040 80a7 	bne.w	800160c <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80014be:	2300      	movs	r3, #0
 80014c0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	4618      	mov	r0, r3
 80014c8:	f003 fb7f 	bl	8004bca <USB_ReadDevAllOutEpInterrupt>
 80014cc:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80014ce:	e099      	b.n	8001604 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80014d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014d2:	f003 0301 	and.w	r3, r3, #1
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	f000 808e 	beq.w	80015f8 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014e2:	b2d2      	uxtb	r2, r2
 80014e4:	4611      	mov	r1, r2
 80014e6:	4618      	mov	r0, r3
 80014e8:	f003 fba3 	bl	8004c32 <USB_ReadDevOutEPInterrupt>
 80014ec:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80014ee:	693b      	ldr	r3, [r7, #16]
 80014f0:	f003 0301 	and.w	r3, r3, #1
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d00c      	beq.n	8001512 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80014f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014fa:	015a      	lsls	r2, r3, #5
 80014fc:	69fb      	ldr	r3, [r7, #28]
 80014fe:	4413      	add	r3, r2
 8001500:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001504:	461a      	mov	r2, r3
 8001506:	2301      	movs	r3, #1
 8001508:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800150a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800150c:	6878      	ldr	r0, [r7, #4]
 800150e:	f000 feab 	bl	8002268 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001512:	693b      	ldr	r3, [r7, #16]
 8001514:	f003 0308 	and.w	r3, r3, #8
 8001518:	2b00      	cmp	r3, #0
 800151a:	d00c      	beq.n	8001536 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800151c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800151e:	015a      	lsls	r2, r3, #5
 8001520:	69fb      	ldr	r3, [r7, #28]
 8001522:	4413      	add	r3, r2
 8001524:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001528:	461a      	mov	r2, r3
 800152a:	2308      	movs	r3, #8
 800152c:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800152e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001530:	6878      	ldr	r0, [r7, #4]
 8001532:	f000 ff81 	bl	8002438 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001536:	693b      	ldr	r3, [r7, #16]
 8001538:	f003 0310 	and.w	r3, r3, #16
 800153c:	2b00      	cmp	r3, #0
 800153e:	d008      	beq.n	8001552 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001542:	015a      	lsls	r2, r3, #5
 8001544:	69fb      	ldr	r3, [r7, #28]
 8001546:	4413      	add	r3, r2
 8001548:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800154c:	461a      	mov	r2, r3
 800154e:	2310      	movs	r3, #16
 8001550:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8001552:	693b      	ldr	r3, [r7, #16]
 8001554:	f003 0302 	and.w	r3, r3, #2
 8001558:	2b00      	cmp	r3, #0
 800155a:	d030      	beq.n	80015be <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800155c:	6a3b      	ldr	r3, [r7, #32]
 800155e:	695b      	ldr	r3, [r3, #20]
 8001560:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001564:	2b80      	cmp	r3, #128	; 0x80
 8001566:	d109      	bne.n	800157c <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8001568:	69fb      	ldr	r3, [r7, #28]
 800156a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800156e:	685b      	ldr	r3, [r3, #4]
 8001570:	69fa      	ldr	r2, [r7, #28]
 8001572:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001576:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800157a:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800157c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800157e:	4613      	mov	r3, r2
 8001580:	00db      	lsls	r3, r3, #3
 8001582:	4413      	add	r3, r2
 8001584:	009b      	lsls	r3, r3, #2
 8001586:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800158a:	687a      	ldr	r2, [r7, #4]
 800158c:	4413      	add	r3, r2
 800158e:	3304      	adds	r3, #4
 8001590:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001592:	697b      	ldr	r3, [r7, #20]
 8001594:	78db      	ldrb	r3, [r3, #3]
 8001596:	2b01      	cmp	r3, #1
 8001598:	d108      	bne.n	80015ac <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800159a:	697b      	ldr	r3, [r7, #20]
 800159c:	2200      	movs	r2, #0
 800159e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80015a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015a2:	b2db      	uxtb	r3, r3
 80015a4:	4619      	mov	r1, r3
 80015a6:	6878      	ldr	r0, [r7, #4]
 80015a8:	f005 fbbe 	bl	8006d28 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80015ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ae:	015a      	lsls	r2, r3, #5
 80015b0:	69fb      	ldr	r3, [r7, #28]
 80015b2:	4413      	add	r3, r2
 80015b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80015b8:	461a      	mov	r2, r3
 80015ba:	2302      	movs	r3, #2
 80015bc:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80015be:	693b      	ldr	r3, [r7, #16]
 80015c0:	f003 0320 	and.w	r3, r3, #32
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d008      	beq.n	80015da <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80015c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ca:	015a      	lsls	r2, r3, #5
 80015cc:	69fb      	ldr	r3, [r7, #28]
 80015ce:	4413      	add	r3, r2
 80015d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80015d4:	461a      	mov	r2, r3
 80015d6:	2320      	movs	r3, #32
 80015d8:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80015da:	693b      	ldr	r3, [r7, #16]
 80015dc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d009      	beq.n	80015f8 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80015e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015e6:	015a      	lsls	r2, r3, #5
 80015e8:	69fb      	ldr	r3, [r7, #28]
 80015ea:	4413      	add	r3, r2
 80015ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80015f0:	461a      	mov	r2, r3
 80015f2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80015f6:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80015f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015fa:	3301      	adds	r3, #1
 80015fc:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80015fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001600:	085b      	lsrs	r3, r3, #1
 8001602:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001604:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001606:	2b00      	cmp	r3, #0
 8001608:	f47f af62 	bne.w	80014d0 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	4618      	mov	r0, r3
 8001612:	f003 fac7 	bl	8004ba4 <USB_ReadInterrupts>
 8001616:	4603      	mov	r3, r0
 8001618:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800161c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001620:	f040 80db 	bne.w	80017da <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	4618      	mov	r0, r3
 800162a:	f003 fae8 	bl	8004bfe <USB_ReadDevAllInEpInterrupt>
 800162e:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8001630:	2300      	movs	r3, #0
 8001632:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8001634:	e0cd      	b.n	80017d2 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001636:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001638:	f003 0301 	and.w	r3, r3, #1
 800163c:	2b00      	cmp	r3, #0
 800163e:	f000 80c2 	beq.w	80017c6 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001648:	b2d2      	uxtb	r2, r2
 800164a:	4611      	mov	r1, r2
 800164c:	4618      	mov	r0, r3
 800164e:	f003 fb0e 	bl	8004c6e <USB_ReadDevInEPInterrupt>
 8001652:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001654:	693b      	ldr	r3, [r7, #16]
 8001656:	f003 0301 	and.w	r3, r3, #1
 800165a:	2b00      	cmp	r3, #0
 800165c:	d057      	beq.n	800170e <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800165e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001660:	f003 030f 	and.w	r3, r3, #15
 8001664:	2201      	movs	r2, #1
 8001666:	fa02 f303 	lsl.w	r3, r2, r3
 800166a:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800166c:	69fb      	ldr	r3, [r7, #28]
 800166e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001672:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	43db      	mvns	r3, r3
 8001678:	69f9      	ldr	r1, [r7, #28]
 800167a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800167e:	4013      	ands	r3, r2
 8001680:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001684:	015a      	lsls	r2, r3, #5
 8001686:	69fb      	ldr	r3, [r7, #28]
 8001688:	4413      	add	r3, r2
 800168a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800168e:	461a      	mov	r2, r3
 8001690:	2301      	movs	r3, #1
 8001692:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	691b      	ldr	r3, [r3, #16]
 8001698:	2b01      	cmp	r3, #1
 800169a:	d132      	bne.n	8001702 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800169c:	6879      	ldr	r1, [r7, #4]
 800169e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016a0:	4613      	mov	r3, r2
 80016a2:	00db      	lsls	r3, r3, #3
 80016a4:	4413      	add	r3, r2
 80016a6:	009b      	lsls	r3, r3, #2
 80016a8:	440b      	add	r3, r1
 80016aa:	334c      	adds	r3, #76	; 0x4c
 80016ac:	6819      	ldr	r1, [r3, #0]
 80016ae:	6878      	ldr	r0, [r7, #4]
 80016b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016b2:	4613      	mov	r3, r2
 80016b4:	00db      	lsls	r3, r3, #3
 80016b6:	4413      	add	r3, r2
 80016b8:	009b      	lsls	r3, r3, #2
 80016ba:	4403      	add	r3, r0
 80016bc:	3348      	adds	r3, #72	; 0x48
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	4419      	add	r1, r3
 80016c2:	6878      	ldr	r0, [r7, #4]
 80016c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016c6:	4613      	mov	r3, r2
 80016c8:	00db      	lsls	r3, r3, #3
 80016ca:	4413      	add	r3, r2
 80016cc:	009b      	lsls	r3, r3, #2
 80016ce:	4403      	add	r3, r0
 80016d0:	334c      	adds	r3, #76	; 0x4c
 80016d2:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80016d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d113      	bne.n	8001702 <HAL_PCD_IRQHandler+0x3a2>
 80016da:	6879      	ldr	r1, [r7, #4]
 80016dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016de:	4613      	mov	r3, r2
 80016e0:	00db      	lsls	r3, r3, #3
 80016e2:	4413      	add	r3, r2
 80016e4:	009b      	lsls	r3, r3, #2
 80016e6:	440b      	add	r3, r1
 80016e8:	3354      	adds	r3, #84	; 0x54
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d108      	bne.n	8001702 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	6818      	ldr	r0, [r3, #0]
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80016fa:	461a      	mov	r2, r3
 80016fc:	2101      	movs	r1, #1
 80016fe:	f003 fb15 	bl	8004d2c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001704:	b2db      	uxtb	r3, r3
 8001706:	4619      	mov	r1, r3
 8001708:	6878      	ldr	r0, [r7, #4]
 800170a:	f005 fa88 	bl	8006c1e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800170e:	693b      	ldr	r3, [r7, #16]
 8001710:	f003 0308 	and.w	r3, r3, #8
 8001714:	2b00      	cmp	r3, #0
 8001716:	d008      	beq.n	800172a <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800171a:	015a      	lsls	r2, r3, #5
 800171c:	69fb      	ldr	r3, [r7, #28]
 800171e:	4413      	add	r3, r2
 8001720:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001724:	461a      	mov	r2, r3
 8001726:	2308      	movs	r3, #8
 8001728:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800172a:	693b      	ldr	r3, [r7, #16]
 800172c:	f003 0310 	and.w	r3, r3, #16
 8001730:	2b00      	cmp	r3, #0
 8001732:	d008      	beq.n	8001746 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001736:	015a      	lsls	r2, r3, #5
 8001738:	69fb      	ldr	r3, [r7, #28]
 800173a:	4413      	add	r3, r2
 800173c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001740:	461a      	mov	r2, r3
 8001742:	2310      	movs	r3, #16
 8001744:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001746:	693b      	ldr	r3, [r7, #16]
 8001748:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800174c:	2b00      	cmp	r3, #0
 800174e:	d008      	beq.n	8001762 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001752:	015a      	lsls	r2, r3, #5
 8001754:	69fb      	ldr	r3, [r7, #28]
 8001756:	4413      	add	r3, r2
 8001758:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800175c:	461a      	mov	r2, r3
 800175e:	2340      	movs	r3, #64	; 0x40
 8001760:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001762:	693b      	ldr	r3, [r7, #16]
 8001764:	f003 0302 	and.w	r3, r3, #2
 8001768:	2b00      	cmp	r3, #0
 800176a:	d023      	beq.n	80017b4 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800176c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800176e:	6a38      	ldr	r0, [r7, #32]
 8001770:	f002 f9f6 	bl	8003b60 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8001774:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001776:	4613      	mov	r3, r2
 8001778:	00db      	lsls	r3, r3, #3
 800177a:	4413      	add	r3, r2
 800177c:	009b      	lsls	r3, r3, #2
 800177e:	3338      	adds	r3, #56	; 0x38
 8001780:	687a      	ldr	r2, [r7, #4]
 8001782:	4413      	add	r3, r2
 8001784:	3304      	adds	r3, #4
 8001786:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001788:	697b      	ldr	r3, [r7, #20]
 800178a:	78db      	ldrb	r3, [r3, #3]
 800178c:	2b01      	cmp	r3, #1
 800178e:	d108      	bne.n	80017a2 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8001790:	697b      	ldr	r3, [r7, #20]
 8001792:	2200      	movs	r2, #0
 8001794:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001798:	b2db      	uxtb	r3, r3
 800179a:	4619      	mov	r1, r3
 800179c:	6878      	ldr	r0, [r7, #4]
 800179e:	f005 fad5 	bl	8006d4c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80017a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017a4:	015a      	lsls	r2, r3, #5
 80017a6:	69fb      	ldr	r3, [r7, #28]
 80017a8:	4413      	add	r3, r2
 80017aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80017ae:	461a      	mov	r2, r3
 80017b0:	2302      	movs	r3, #2
 80017b2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80017b4:	693b      	ldr	r3, [r7, #16]
 80017b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d003      	beq.n	80017c6 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80017be:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80017c0:	6878      	ldr	r0, [r7, #4]
 80017c2:	f000 fcc3 	bl	800214c <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80017c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017c8:	3301      	adds	r3, #1
 80017ca:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80017cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017ce:	085b      	lsrs	r3, r3, #1
 80017d0:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80017d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	f47f af2e 	bne.w	8001636 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	4618      	mov	r0, r3
 80017e0:	f003 f9e0 	bl	8004ba4 <USB_ReadInterrupts>
 80017e4:	4603      	mov	r3, r0
 80017e6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80017ea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80017ee:	d122      	bne.n	8001836 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80017f0:	69fb      	ldr	r3, [r7, #28]
 80017f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80017f6:	685b      	ldr	r3, [r3, #4]
 80017f8:	69fa      	ldr	r2, [r7, #28]
 80017fa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80017fe:	f023 0301 	bic.w	r3, r3, #1
 8001802:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800180a:	2b01      	cmp	r3, #1
 800180c:	d108      	bne.n	8001820 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	2200      	movs	r2, #0
 8001812:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001816:	2100      	movs	r1, #0
 8001818:	6878      	ldr	r0, [r7, #4]
 800181a:	f000 feab 	bl	8002574 <HAL_PCDEx_LPM_Callback>
 800181e:	e002      	b.n	8001826 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001820:	6878      	ldr	r0, [r7, #4]
 8001822:	f005 fa73 	bl	8006d0c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	695a      	ldr	r2, [r3, #20]
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8001834:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	4618      	mov	r0, r3
 800183c:	f003 f9b2 	bl	8004ba4 <USB_ReadInterrupts>
 8001840:	4603      	mov	r3, r0
 8001842:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001846:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800184a:	d112      	bne.n	8001872 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800184c:	69fb      	ldr	r3, [r7, #28]
 800184e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001852:	689b      	ldr	r3, [r3, #8]
 8001854:	f003 0301 	and.w	r3, r3, #1
 8001858:	2b01      	cmp	r3, #1
 800185a:	d102      	bne.n	8001862 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800185c:	6878      	ldr	r0, [r7, #4]
 800185e:	f005 fa2f 	bl	8006cc0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	695a      	ldr	r2, [r3, #20]
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001870:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	4618      	mov	r0, r3
 8001878:	f003 f994 	bl	8004ba4 <USB_ReadInterrupts>
 800187c:	4603      	mov	r3, r0
 800187e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001882:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001886:	f040 80b7 	bne.w	80019f8 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800188a:	69fb      	ldr	r3, [r7, #28]
 800188c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001890:	685b      	ldr	r3, [r3, #4]
 8001892:	69fa      	ldr	r2, [r7, #28]
 8001894:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001898:	f023 0301 	bic.w	r3, r3, #1
 800189c:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	2110      	movs	r1, #16
 80018a4:	4618      	mov	r0, r3
 80018a6:	f002 f95b 	bl	8003b60 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80018aa:	2300      	movs	r3, #0
 80018ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80018ae:	e046      	b.n	800193e <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80018b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018b2:	015a      	lsls	r2, r3, #5
 80018b4:	69fb      	ldr	r3, [r7, #28]
 80018b6:	4413      	add	r3, r2
 80018b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80018bc:	461a      	mov	r2, r3
 80018be:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80018c2:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80018c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018c6:	015a      	lsls	r2, r3, #5
 80018c8:	69fb      	ldr	r3, [r7, #28]
 80018ca:	4413      	add	r3, r2
 80018cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80018d4:	0151      	lsls	r1, r2, #5
 80018d6:	69fa      	ldr	r2, [r7, #28]
 80018d8:	440a      	add	r2, r1
 80018da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80018de:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80018e2:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80018e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018e6:	015a      	lsls	r2, r3, #5
 80018e8:	69fb      	ldr	r3, [r7, #28]
 80018ea:	4413      	add	r3, r2
 80018ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80018f0:	461a      	mov	r2, r3
 80018f2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80018f6:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80018f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018fa:	015a      	lsls	r2, r3, #5
 80018fc:	69fb      	ldr	r3, [r7, #28]
 80018fe:	4413      	add	r3, r2
 8001900:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001908:	0151      	lsls	r1, r2, #5
 800190a:	69fa      	ldr	r2, [r7, #28]
 800190c:	440a      	add	r2, r1
 800190e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001912:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001916:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001918:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800191a:	015a      	lsls	r2, r3, #5
 800191c:	69fb      	ldr	r3, [r7, #28]
 800191e:	4413      	add	r3, r2
 8001920:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001928:	0151      	lsls	r1, r2, #5
 800192a:	69fa      	ldr	r2, [r7, #28]
 800192c:	440a      	add	r2, r1
 800192e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001932:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001936:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001938:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800193a:	3301      	adds	r3, #1
 800193c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	685b      	ldr	r3, [r3, #4]
 8001942:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001944:	429a      	cmp	r2, r3
 8001946:	d3b3      	bcc.n	80018b0 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001948:	69fb      	ldr	r3, [r7, #28]
 800194a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800194e:	69db      	ldr	r3, [r3, #28]
 8001950:	69fa      	ldr	r2, [r7, #28]
 8001952:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001956:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800195a:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001960:	2b00      	cmp	r3, #0
 8001962:	d016      	beq.n	8001992 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001964:	69fb      	ldr	r3, [r7, #28]
 8001966:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800196a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800196e:	69fa      	ldr	r2, [r7, #28]
 8001970:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001974:	f043 030b 	orr.w	r3, r3, #11
 8001978:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800197c:	69fb      	ldr	r3, [r7, #28]
 800197e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001982:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001984:	69fa      	ldr	r2, [r7, #28]
 8001986:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800198a:	f043 030b 	orr.w	r3, r3, #11
 800198e:	6453      	str	r3, [r2, #68]	; 0x44
 8001990:	e015      	b.n	80019be <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001992:	69fb      	ldr	r3, [r7, #28]
 8001994:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001998:	695b      	ldr	r3, [r3, #20]
 800199a:	69fa      	ldr	r2, [r7, #28]
 800199c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80019a0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80019a4:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80019a8:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80019aa:	69fb      	ldr	r3, [r7, #28]
 80019ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80019b0:	691b      	ldr	r3, [r3, #16]
 80019b2:	69fa      	ldr	r2, [r7, #28]
 80019b4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80019b8:	f043 030b 	orr.w	r3, r3, #11
 80019bc:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80019be:	69fb      	ldr	r3, [r7, #28]
 80019c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	69fa      	ldr	r2, [r7, #28]
 80019c8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80019cc:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80019d0:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	6818      	ldr	r0, [r3, #0]
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	691b      	ldr	r3, [r3, #16]
 80019da:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80019e2:	461a      	mov	r2, r3
 80019e4:	f003 f9a2 	bl	8004d2c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	695a      	ldr	r2, [r3, #20]
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80019f6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4618      	mov	r0, r3
 80019fe:	f003 f8d1 	bl	8004ba4 <USB_ReadInterrupts>
 8001a02:	4603      	mov	r3, r0
 8001a04:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001a08:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001a0c:	d124      	bne.n	8001a58 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	4618      	mov	r0, r3
 8001a14:	f003 f967 	bl	8004ce6 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	f002 f91c 	bl	8003c5a <USB_GetDevSpeed>
 8001a22:	4603      	mov	r3, r0
 8001a24:	461a      	mov	r2, r3
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681c      	ldr	r4, [r3, #0]
 8001a2e:	f001 f9d1 	bl	8002dd4 <HAL_RCC_GetHCLKFreq>
 8001a32:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001a38:	b2db      	uxtb	r3, r3
 8001a3a:	461a      	mov	r2, r3
 8001a3c:	4620      	mov	r0, r4
 8001a3e:	f001 fe1b 	bl	8003678 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001a42:	6878      	ldr	r0, [r7, #4]
 8001a44:	f005 f913 	bl	8006c6e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	695a      	ldr	r2, [r3, #20]
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8001a56:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	f003 f8a1 	bl	8004ba4 <USB_ReadInterrupts>
 8001a62:	4603      	mov	r3, r0
 8001a64:	f003 0308 	and.w	r3, r3, #8
 8001a68:	2b08      	cmp	r3, #8
 8001a6a:	d10a      	bne.n	8001a82 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001a6c:	6878      	ldr	r0, [r7, #4]
 8001a6e:	f005 f8f0 	bl	8006c52 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	695a      	ldr	r2, [r3, #20]
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f002 0208 	and.w	r2, r2, #8
 8001a80:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	4618      	mov	r0, r3
 8001a88:	f003 f88c 	bl	8004ba4 <USB_ReadInterrupts>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a92:	2b80      	cmp	r3, #128	; 0x80
 8001a94:	d122      	bne.n	8001adc <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8001a96:	6a3b      	ldr	r3, [r7, #32]
 8001a98:	699b      	ldr	r3, [r3, #24]
 8001a9a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001a9e:	6a3b      	ldr	r3, [r7, #32]
 8001aa0:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	627b      	str	r3, [r7, #36]	; 0x24
 8001aa6:	e014      	b.n	8001ad2 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8001aa8:	6879      	ldr	r1, [r7, #4]
 8001aaa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001aac:	4613      	mov	r3, r2
 8001aae:	00db      	lsls	r3, r3, #3
 8001ab0:	4413      	add	r3, r2
 8001ab2:	009b      	lsls	r3, r3, #2
 8001ab4:	440b      	add	r3, r1
 8001ab6:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8001aba:	781b      	ldrb	r3, [r3, #0]
 8001abc:	2b01      	cmp	r3, #1
 8001abe:	d105      	bne.n	8001acc <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8001ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ac2:	b2db      	uxtb	r3, r3
 8001ac4:	4619      	mov	r1, r3
 8001ac6:	6878      	ldr	r0, [r7, #4]
 8001ac8:	f000 fb0f 	bl	80020ea <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ace:	3301      	adds	r3, #1
 8001ad0:	627b      	str	r3, [r7, #36]	; 0x24
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	685b      	ldr	r3, [r3, #4]
 8001ad6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ad8:	429a      	cmp	r2, r3
 8001ada:	d3e5      	bcc.n	8001aa8 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	f003 f85f 	bl	8004ba4 <USB_ReadInterrupts>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001aec:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001af0:	d13b      	bne.n	8001b6a <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001af2:	2301      	movs	r3, #1
 8001af4:	627b      	str	r3, [r7, #36]	; 0x24
 8001af6:	e02b      	b.n	8001b50 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8001af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001afa:	015a      	lsls	r2, r3, #5
 8001afc:	69fb      	ldr	r3, [r7, #28]
 8001afe:	4413      	add	r3, r2
 8001b00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001b08:	6879      	ldr	r1, [r7, #4]
 8001b0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b0c:	4613      	mov	r3, r2
 8001b0e:	00db      	lsls	r3, r3, #3
 8001b10:	4413      	add	r3, r2
 8001b12:	009b      	lsls	r3, r3, #2
 8001b14:	440b      	add	r3, r1
 8001b16:	3340      	adds	r3, #64	; 0x40
 8001b18:	781b      	ldrb	r3, [r3, #0]
 8001b1a:	2b01      	cmp	r3, #1
 8001b1c:	d115      	bne.n	8001b4a <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8001b1e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	da12      	bge.n	8001b4a <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8001b24:	6879      	ldr	r1, [r7, #4]
 8001b26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b28:	4613      	mov	r3, r2
 8001b2a:	00db      	lsls	r3, r3, #3
 8001b2c:	4413      	add	r3, r2
 8001b2e:	009b      	lsls	r3, r3, #2
 8001b30:	440b      	add	r3, r1
 8001b32:	333f      	adds	r3, #63	; 0x3f
 8001b34:	2201      	movs	r2, #1
 8001b36:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8001b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b3a:	b2db      	uxtb	r3, r3
 8001b3c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001b40:	b2db      	uxtb	r3, r3
 8001b42:	4619      	mov	r1, r3
 8001b44:	6878      	ldr	r0, [r7, #4]
 8001b46:	f000 fad0 	bl	80020ea <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b4c:	3301      	adds	r3, #1
 8001b4e:	627b      	str	r3, [r7, #36]	; 0x24
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	685b      	ldr	r3, [r3, #4]
 8001b54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b56:	429a      	cmp	r2, r3
 8001b58:	d3ce      	bcc.n	8001af8 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	695a      	ldr	r2, [r3, #20]
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8001b68:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	4618      	mov	r0, r3
 8001b70:	f003 f818 	bl	8004ba4 <USB_ReadInterrupts>
 8001b74:	4603      	mov	r3, r0
 8001b76:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b7a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001b7e:	d155      	bne.n	8001c2c <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001b80:	2301      	movs	r3, #1
 8001b82:	627b      	str	r3, [r7, #36]	; 0x24
 8001b84:	e045      	b.n	8001c12 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8001b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b88:	015a      	lsls	r2, r3, #5
 8001b8a:	69fb      	ldr	r3, [r7, #28]
 8001b8c:	4413      	add	r3, r2
 8001b8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001b96:	6879      	ldr	r1, [r7, #4]
 8001b98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b9a:	4613      	mov	r3, r2
 8001b9c:	00db      	lsls	r3, r3, #3
 8001b9e:	4413      	add	r3, r2
 8001ba0:	009b      	lsls	r3, r3, #2
 8001ba2:	440b      	add	r3, r1
 8001ba4:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001ba8:	781b      	ldrb	r3, [r3, #0]
 8001baa:	2b01      	cmp	r3, #1
 8001bac:	d12e      	bne.n	8001c0c <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001bae:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	da2b      	bge.n	8001c0c <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8001bb4:	69bb      	ldr	r3, [r7, #24]
 8001bb6:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8001bc0:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001bc4:	429a      	cmp	r2, r3
 8001bc6:	d121      	bne.n	8001c0c <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8001bc8:	6879      	ldr	r1, [r7, #4]
 8001bca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001bcc:	4613      	mov	r3, r2
 8001bce:	00db      	lsls	r3, r3, #3
 8001bd0:	4413      	add	r3, r2
 8001bd2:	009b      	lsls	r3, r3, #2
 8001bd4:	440b      	add	r3, r1
 8001bd6:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8001bda:	2201      	movs	r2, #1
 8001bdc:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8001bde:	6a3b      	ldr	r3, [r7, #32]
 8001be0:	699b      	ldr	r3, [r3, #24]
 8001be2:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001be6:	6a3b      	ldr	r3, [r7, #32]
 8001be8:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8001bea:	6a3b      	ldr	r3, [r7, #32]
 8001bec:	695b      	ldr	r3, [r3, #20]
 8001bee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d10a      	bne.n	8001c0c <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8001bf6:	69fb      	ldr	r3, [r7, #28]
 8001bf8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001bfc:	685b      	ldr	r3, [r3, #4]
 8001bfe:	69fa      	ldr	r2, [r7, #28]
 8001c00:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001c04:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c08:	6053      	str	r3, [r2, #4]
            break;
 8001c0a:	e007      	b.n	8001c1c <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c0e:	3301      	adds	r3, #1
 8001c10:	627b      	str	r3, [r7, #36]	; 0x24
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	685b      	ldr	r3, [r3, #4]
 8001c16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c18:	429a      	cmp	r2, r3
 8001c1a:	d3b4      	bcc.n	8001b86 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	695a      	ldr	r2, [r3, #20]
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8001c2a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	4618      	mov	r0, r3
 8001c32:	f002 ffb7 	bl	8004ba4 <USB_ReadInterrupts>
 8001c36:	4603      	mov	r3, r0
 8001c38:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001c3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c40:	d10a      	bne.n	8001c58 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001c42:	6878      	ldr	r0, [r7, #4]
 8001c44:	f005 f894 	bl	8006d70 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	695a      	ldr	r2, [r3, #20]
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8001c56:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	f002 ffa1 	bl	8004ba4 <USB_ReadInterrupts>
 8001c62:	4603      	mov	r3, r0
 8001c64:	f003 0304 	and.w	r3, r3, #4
 8001c68:	2b04      	cmp	r3, #4
 8001c6a:	d115      	bne.n	8001c98 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	685b      	ldr	r3, [r3, #4]
 8001c72:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001c74:	69bb      	ldr	r3, [r7, #24]
 8001c76:	f003 0304 	and.w	r3, r3, #4
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d002      	beq.n	8001c84 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001c7e:	6878      	ldr	r0, [r7, #4]
 8001c80:	f005 f884 	bl	8006d8c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	6859      	ldr	r1, [r3, #4]
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	69ba      	ldr	r2, [r7, #24]
 8001c90:	430a      	orrs	r2, r1
 8001c92:	605a      	str	r2, [r3, #4]
 8001c94:	e000      	b.n	8001c98 <HAL_PCD_IRQHandler+0x938>
      return;
 8001c96:	bf00      	nop
    }
  }
}
 8001c98:	3734      	adds	r7, #52	; 0x34
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bd90      	pop	{r4, r7, pc}

08001c9e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001c9e:	b580      	push	{r7, lr}
 8001ca0:	b082      	sub	sp, #8
 8001ca2:	af00      	add	r7, sp, #0
 8001ca4:	6078      	str	r0, [r7, #4]
 8001ca6:	460b      	mov	r3, r1
 8001ca8:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001cb0:	2b01      	cmp	r3, #1
 8001cb2:	d101      	bne.n	8001cb8 <HAL_PCD_SetAddress+0x1a>
 8001cb4:	2302      	movs	r3, #2
 8001cb6:	e013      	b.n	8001ce0 <HAL_PCD_SetAddress+0x42>
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	2201      	movs	r2, #1
 8001cbc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	78fa      	ldrb	r2, [r7, #3]
 8001cc4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	78fa      	ldrb	r2, [r7, #3]
 8001cce:	4611      	mov	r1, r2
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	f002 feff 	bl	8004ad4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	2200      	movs	r2, #0
 8001cda:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001cde:	2300      	movs	r3, #0
}
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	3708      	adds	r7, #8
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bd80      	pop	{r7, pc}

08001ce8 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b084      	sub	sp, #16
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
 8001cf0:	4608      	mov	r0, r1
 8001cf2:	4611      	mov	r1, r2
 8001cf4:	461a      	mov	r2, r3
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	70fb      	strb	r3, [r7, #3]
 8001cfa:	460b      	mov	r3, r1
 8001cfc:	803b      	strh	r3, [r7, #0]
 8001cfe:	4613      	mov	r3, r2
 8001d00:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001d02:	2300      	movs	r3, #0
 8001d04:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001d06:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	da0f      	bge.n	8001d2e <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001d0e:	78fb      	ldrb	r3, [r7, #3]
 8001d10:	f003 020f 	and.w	r2, r3, #15
 8001d14:	4613      	mov	r3, r2
 8001d16:	00db      	lsls	r3, r3, #3
 8001d18:	4413      	add	r3, r2
 8001d1a:	009b      	lsls	r3, r3, #2
 8001d1c:	3338      	adds	r3, #56	; 0x38
 8001d1e:	687a      	ldr	r2, [r7, #4]
 8001d20:	4413      	add	r3, r2
 8001d22:	3304      	adds	r3, #4
 8001d24:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	2201      	movs	r2, #1
 8001d2a:	705a      	strb	r2, [r3, #1]
 8001d2c:	e00f      	b.n	8001d4e <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001d2e:	78fb      	ldrb	r3, [r7, #3]
 8001d30:	f003 020f 	and.w	r2, r3, #15
 8001d34:	4613      	mov	r3, r2
 8001d36:	00db      	lsls	r3, r3, #3
 8001d38:	4413      	add	r3, r2
 8001d3a:	009b      	lsls	r3, r3, #2
 8001d3c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001d40:	687a      	ldr	r2, [r7, #4]
 8001d42:	4413      	add	r3, r2
 8001d44:	3304      	adds	r3, #4
 8001d46:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001d4e:	78fb      	ldrb	r3, [r7, #3]
 8001d50:	f003 030f 	and.w	r3, r3, #15
 8001d54:	b2da      	uxtb	r2, r3
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001d5a:	883a      	ldrh	r2, [r7, #0]
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	78ba      	ldrb	r2, [r7, #2]
 8001d64:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	785b      	ldrb	r3, [r3, #1]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d004      	beq.n	8001d78 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	781b      	ldrb	r3, [r3, #0]
 8001d72:	b29a      	uxth	r2, r3
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001d78:	78bb      	ldrb	r3, [r7, #2]
 8001d7a:	2b02      	cmp	r3, #2
 8001d7c:	d102      	bne.n	8001d84 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	2200      	movs	r2, #0
 8001d82:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001d8a:	2b01      	cmp	r3, #1
 8001d8c:	d101      	bne.n	8001d92 <HAL_PCD_EP_Open+0xaa>
 8001d8e:	2302      	movs	r3, #2
 8001d90:	e00e      	b.n	8001db0 <HAL_PCD_EP_Open+0xc8>
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	2201      	movs	r2, #1
 8001d96:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	68f9      	ldr	r1, [r7, #12]
 8001da0:	4618      	mov	r0, r3
 8001da2:	f001 ff7f 	bl	8003ca4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	2200      	movs	r2, #0
 8001daa:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8001dae:	7afb      	ldrb	r3, [r7, #11]
}
 8001db0:	4618      	mov	r0, r3
 8001db2:	3710      	adds	r7, #16
 8001db4:	46bd      	mov	sp, r7
 8001db6:	bd80      	pop	{r7, pc}

08001db8 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b084      	sub	sp, #16
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
 8001dc0:	460b      	mov	r3, r1
 8001dc2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001dc4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	da0f      	bge.n	8001dec <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001dcc:	78fb      	ldrb	r3, [r7, #3]
 8001dce:	f003 020f 	and.w	r2, r3, #15
 8001dd2:	4613      	mov	r3, r2
 8001dd4:	00db      	lsls	r3, r3, #3
 8001dd6:	4413      	add	r3, r2
 8001dd8:	009b      	lsls	r3, r3, #2
 8001dda:	3338      	adds	r3, #56	; 0x38
 8001ddc:	687a      	ldr	r2, [r7, #4]
 8001dde:	4413      	add	r3, r2
 8001de0:	3304      	adds	r3, #4
 8001de2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	2201      	movs	r2, #1
 8001de8:	705a      	strb	r2, [r3, #1]
 8001dea:	e00f      	b.n	8001e0c <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001dec:	78fb      	ldrb	r3, [r7, #3]
 8001dee:	f003 020f 	and.w	r2, r3, #15
 8001df2:	4613      	mov	r3, r2
 8001df4:	00db      	lsls	r3, r3, #3
 8001df6:	4413      	add	r3, r2
 8001df8:	009b      	lsls	r3, r3, #2
 8001dfa:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001dfe:	687a      	ldr	r2, [r7, #4]
 8001e00:	4413      	add	r3, r2
 8001e02:	3304      	adds	r3, #4
 8001e04:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	2200      	movs	r2, #0
 8001e0a:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001e0c:	78fb      	ldrb	r3, [r7, #3]
 8001e0e:	f003 030f 	and.w	r3, r3, #15
 8001e12:	b2da      	uxtb	r2, r3
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001e1e:	2b01      	cmp	r3, #1
 8001e20:	d101      	bne.n	8001e26 <HAL_PCD_EP_Close+0x6e>
 8001e22:	2302      	movs	r3, #2
 8001e24:	e00e      	b.n	8001e44 <HAL_PCD_EP_Close+0x8c>
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	2201      	movs	r2, #1
 8001e2a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	68f9      	ldr	r1, [r7, #12]
 8001e34:	4618      	mov	r0, r3
 8001e36:	f001 ffbd 	bl	8003db4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8001e42:	2300      	movs	r3, #0
}
 8001e44:	4618      	mov	r0, r3
 8001e46:	3710      	adds	r7, #16
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	bd80      	pop	{r7, pc}

08001e4c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b086      	sub	sp, #24
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	60f8      	str	r0, [r7, #12]
 8001e54:	607a      	str	r2, [r7, #4]
 8001e56:	603b      	str	r3, [r7, #0]
 8001e58:	460b      	mov	r3, r1
 8001e5a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001e5c:	7afb      	ldrb	r3, [r7, #11]
 8001e5e:	f003 020f 	and.w	r2, r3, #15
 8001e62:	4613      	mov	r3, r2
 8001e64:	00db      	lsls	r3, r3, #3
 8001e66:	4413      	add	r3, r2
 8001e68:	009b      	lsls	r3, r3, #2
 8001e6a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001e6e:	68fa      	ldr	r2, [r7, #12]
 8001e70:	4413      	add	r3, r2
 8001e72:	3304      	adds	r3, #4
 8001e74:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001e76:	697b      	ldr	r3, [r7, #20]
 8001e78:	687a      	ldr	r2, [r7, #4]
 8001e7a:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8001e7c:	697b      	ldr	r3, [r7, #20]
 8001e7e:	683a      	ldr	r2, [r7, #0]
 8001e80:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001e82:	697b      	ldr	r3, [r7, #20]
 8001e84:	2200      	movs	r2, #0
 8001e86:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8001e88:	697b      	ldr	r3, [r7, #20]
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001e8e:	7afb      	ldrb	r3, [r7, #11]
 8001e90:	f003 030f 	and.w	r3, r3, #15
 8001e94:	b2da      	uxtb	r2, r3
 8001e96:	697b      	ldr	r3, [r7, #20]
 8001e98:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	691b      	ldr	r3, [r3, #16]
 8001e9e:	2b01      	cmp	r3, #1
 8001ea0:	d102      	bne.n	8001ea8 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001ea2:	687a      	ldr	r2, [r7, #4]
 8001ea4:	697b      	ldr	r3, [r7, #20]
 8001ea6:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001ea8:	7afb      	ldrb	r3, [r7, #11]
 8001eaa:	f003 030f 	and.w	r3, r3, #15
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d109      	bne.n	8001ec6 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	6818      	ldr	r0, [r3, #0]
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	691b      	ldr	r3, [r3, #16]
 8001eba:	b2db      	uxtb	r3, r3
 8001ebc:	461a      	mov	r2, r3
 8001ebe:	6979      	ldr	r1, [r7, #20]
 8001ec0:	f002 fa9c 	bl	80043fc <USB_EP0StartXfer>
 8001ec4:	e008      	b.n	8001ed8 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	6818      	ldr	r0, [r3, #0]
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	691b      	ldr	r3, [r3, #16]
 8001ece:	b2db      	uxtb	r3, r3
 8001ed0:	461a      	mov	r2, r3
 8001ed2:	6979      	ldr	r1, [r7, #20]
 8001ed4:	f002 f84a 	bl	8003f6c <USB_EPStartXfer>
  }

  return HAL_OK;
 8001ed8:	2300      	movs	r3, #0
}
 8001eda:	4618      	mov	r0, r3
 8001edc:	3718      	adds	r7, #24
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bd80      	pop	{r7, pc}

08001ee2 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001ee2:	b580      	push	{r7, lr}
 8001ee4:	b086      	sub	sp, #24
 8001ee6:	af00      	add	r7, sp, #0
 8001ee8:	60f8      	str	r0, [r7, #12]
 8001eea:	607a      	str	r2, [r7, #4]
 8001eec:	603b      	str	r3, [r7, #0]
 8001eee:	460b      	mov	r3, r1
 8001ef0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ef2:	7afb      	ldrb	r3, [r7, #11]
 8001ef4:	f003 020f 	and.w	r2, r3, #15
 8001ef8:	4613      	mov	r3, r2
 8001efa:	00db      	lsls	r3, r3, #3
 8001efc:	4413      	add	r3, r2
 8001efe:	009b      	lsls	r3, r3, #2
 8001f00:	3338      	adds	r3, #56	; 0x38
 8001f02:	68fa      	ldr	r2, [r7, #12]
 8001f04:	4413      	add	r3, r2
 8001f06:	3304      	adds	r3, #4
 8001f08:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001f0a:	697b      	ldr	r3, [r7, #20]
 8001f0c:	687a      	ldr	r2, [r7, #4]
 8001f0e:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8001f10:	697b      	ldr	r3, [r7, #20]
 8001f12:	683a      	ldr	r2, [r7, #0]
 8001f14:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001f16:	697b      	ldr	r3, [r7, #20]
 8001f18:	2200      	movs	r2, #0
 8001f1a:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8001f1c:	697b      	ldr	r3, [r7, #20]
 8001f1e:	2201      	movs	r2, #1
 8001f20:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001f22:	7afb      	ldrb	r3, [r7, #11]
 8001f24:	f003 030f 	and.w	r3, r3, #15
 8001f28:	b2da      	uxtb	r2, r3
 8001f2a:	697b      	ldr	r3, [r7, #20]
 8001f2c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	691b      	ldr	r3, [r3, #16]
 8001f32:	2b01      	cmp	r3, #1
 8001f34:	d102      	bne.n	8001f3c <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001f36:	687a      	ldr	r2, [r7, #4]
 8001f38:	697b      	ldr	r3, [r7, #20]
 8001f3a:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001f3c:	7afb      	ldrb	r3, [r7, #11]
 8001f3e:	f003 030f 	and.w	r3, r3, #15
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d109      	bne.n	8001f5a <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	6818      	ldr	r0, [r3, #0]
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	691b      	ldr	r3, [r3, #16]
 8001f4e:	b2db      	uxtb	r3, r3
 8001f50:	461a      	mov	r2, r3
 8001f52:	6979      	ldr	r1, [r7, #20]
 8001f54:	f002 fa52 	bl	80043fc <USB_EP0StartXfer>
 8001f58:	e008      	b.n	8001f6c <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	6818      	ldr	r0, [r3, #0]
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	691b      	ldr	r3, [r3, #16]
 8001f62:	b2db      	uxtb	r3, r3
 8001f64:	461a      	mov	r2, r3
 8001f66:	6979      	ldr	r1, [r7, #20]
 8001f68:	f002 f800 	bl	8003f6c <USB_EPStartXfer>
  }

  return HAL_OK;
 8001f6c:	2300      	movs	r3, #0
}
 8001f6e:	4618      	mov	r0, r3
 8001f70:	3718      	adds	r7, #24
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bd80      	pop	{r7, pc}

08001f76 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001f76:	b580      	push	{r7, lr}
 8001f78:	b084      	sub	sp, #16
 8001f7a:	af00      	add	r7, sp, #0
 8001f7c:	6078      	str	r0, [r7, #4]
 8001f7e:	460b      	mov	r3, r1
 8001f80:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001f82:	78fb      	ldrb	r3, [r7, #3]
 8001f84:	f003 020f 	and.w	r2, r3, #15
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	685b      	ldr	r3, [r3, #4]
 8001f8c:	429a      	cmp	r2, r3
 8001f8e:	d901      	bls.n	8001f94 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001f90:	2301      	movs	r3, #1
 8001f92:	e050      	b.n	8002036 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001f94:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	da0f      	bge.n	8001fbc <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f9c:	78fb      	ldrb	r3, [r7, #3]
 8001f9e:	f003 020f 	and.w	r2, r3, #15
 8001fa2:	4613      	mov	r3, r2
 8001fa4:	00db      	lsls	r3, r3, #3
 8001fa6:	4413      	add	r3, r2
 8001fa8:	009b      	lsls	r3, r3, #2
 8001faa:	3338      	adds	r3, #56	; 0x38
 8001fac:	687a      	ldr	r2, [r7, #4]
 8001fae:	4413      	add	r3, r2
 8001fb0:	3304      	adds	r3, #4
 8001fb2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	2201      	movs	r2, #1
 8001fb8:	705a      	strb	r2, [r3, #1]
 8001fba:	e00d      	b.n	8001fd8 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001fbc:	78fa      	ldrb	r2, [r7, #3]
 8001fbe:	4613      	mov	r3, r2
 8001fc0:	00db      	lsls	r3, r3, #3
 8001fc2:	4413      	add	r3, r2
 8001fc4:	009b      	lsls	r3, r3, #2
 8001fc6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001fca:	687a      	ldr	r2, [r7, #4]
 8001fcc:	4413      	add	r3, r2
 8001fce:	3304      	adds	r3, #4
 8001fd0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	2201      	movs	r2, #1
 8001fdc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001fde:	78fb      	ldrb	r3, [r7, #3]
 8001fe0:	f003 030f 	and.w	r3, r3, #15
 8001fe4:	b2da      	uxtb	r2, r3
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001ff0:	2b01      	cmp	r3, #1
 8001ff2:	d101      	bne.n	8001ff8 <HAL_PCD_EP_SetStall+0x82>
 8001ff4:	2302      	movs	r3, #2
 8001ff6:	e01e      	b.n	8002036 <HAL_PCD_EP_SetStall+0xc0>
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	2201      	movs	r2, #1
 8001ffc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	68f9      	ldr	r1, [r7, #12]
 8002006:	4618      	mov	r0, r3
 8002008:	f002 fc90 	bl	800492c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800200c:	78fb      	ldrb	r3, [r7, #3]
 800200e:	f003 030f 	and.w	r3, r3, #15
 8002012:	2b00      	cmp	r3, #0
 8002014:	d10a      	bne.n	800202c <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	6818      	ldr	r0, [r3, #0]
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	691b      	ldr	r3, [r3, #16]
 800201e:	b2d9      	uxtb	r1, r3
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002026:	461a      	mov	r2, r3
 8002028:	f002 fe80 	bl	8004d2c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2200      	movs	r2, #0
 8002030:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002034:	2300      	movs	r3, #0
}
 8002036:	4618      	mov	r0, r3
 8002038:	3710      	adds	r7, #16
 800203a:	46bd      	mov	sp, r7
 800203c:	bd80      	pop	{r7, pc}

0800203e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800203e:	b580      	push	{r7, lr}
 8002040:	b084      	sub	sp, #16
 8002042:	af00      	add	r7, sp, #0
 8002044:	6078      	str	r0, [r7, #4]
 8002046:	460b      	mov	r3, r1
 8002048:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800204a:	78fb      	ldrb	r3, [r7, #3]
 800204c:	f003 020f 	and.w	r2, r3, #15
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	429a      	cmp	r2, r3
 8002056:	d901      	bls.n	800205c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002058:	2301      	movs	r3, #1
 800205a:	e042      	b.n	80020e2 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800205c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002060:	2b00      	cmp	r3, #0
 8002062:	da0f      	bge.n	8002084 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002064:	78fb      	ldrb	r3, [r7, #3]
 8002066:	f003 020f 	and.w	r2, r3, #15
 800206a:	4613      	mov	r3, r2
 800206c:	00db      	lsls	r3, r3, #3
 800206e:	4413      	add	r3, r2
 8002070:	009b      	lsls	r3, r3, #2
 8002072:	3338      	adds	r3, #56	; 0x38
 8002074:	687a      	ldr	r2, [r7, #4]
 8002076:	4413      	add	r3, r2
 8002078:	3304      	adds	r3, #4
 800207a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	2201      	movs	r2, #1
 8002080:	705a      	strb	r2, [r3, #1]
 8002082:	e00f      	b.n	80020a4 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002084:	78fb      	ldrb	r3, [r7, #3]
 8002086:	f003 020f 	and.w	r2, r3, #15
 800208a:	4613      	mov	r3, r2
 800208c:	00db      	lsls	r3, r3, #3
 800208e:	4413      	add	r3, r2
 8002090:	009b      	lsls	r3, r3, #2
 8002092:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002096:	687a      	ldr	r2, [r7, #4]
 8002098:	4413      	add	r3, r2
 800209a:	3304      	adds	r3, #4
 800209c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	2200      	movs	r2, #0
 80020a2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	2200      	movs	r2, #0
 80020a8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80020aa:	78fb      	ldrb	r3, [r7, #3]
 80020ac:	f003 030f 	and.w	r3, r3, #15
 80020b0:	b2da      	uxtb	r2, r3
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80020bc:	2b01      	cmp	r3, #1
 80020be:	d101      	bne.n	80020c4 <HAL_PCD_EP_ClrStall+0x86>
 80020c0:	2302      	movs	r3, #2
 80020c2:	e00e      	b.n	80020e2 <HAL_PCD_EP_ClrStall+0xa4>
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	2201      	movs	r2, #1
 80020c8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	68f9      	ldr	r1, [r7, #12]
 80020d2:	4618      	mov	r0, r3
 80020d4:	f002 fc98 	bl	8004a08 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2200      	movs	r2, #0
 80020dc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80020e0:	2300      	movs	r3, #0
}
 80020e2:	4618      	mov	r0, r3
 80020e4:	3710      	adds	r7, #16
 80020e6:	46bd      	mov	sp, r7
 80020e8:	bd80      	pop	{r7, pc}

080020ea <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80020ea:	b580      	push	{r7, lr}
 80020ec:	b084      	sub	sp, #16
 80020ee:	af00      	add	r7, sp, #0
 80020f0:	6078      	str	r0, [r7, #4]
 80020f2:	460b      	mov	r3, r1
 80020f4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80020f6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	da0c      	bge.n	8002118 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80020fe:	78fb      	ldrb	r3, [r7, #3]
 8002100:	f003 020f 	and.w	r2, r3, #15
 8002104:	4613      	mov	r3, r2
 8002106:	00db      	lsls	r3, r3, #3
 8002108:	4413      	add	r3, r2
 800210a:	009b      	lsls	r3, r3, #2
 800210c:	3338      	adds	r3, #56	; 0x38
 800210e:	687a      	ldr	r2, [r7, #4]
 8002110:	4413      	add	r3, r2
 8002112:	3304      	adds	r3, #4
 8002114:	60fb      	str	r3, [r7, #12]
 8002116:	e00c      	b.n	8002132 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002118:	78fb      	ldrb	r3, [r7, #3]
 800211a:	f003 020f 	and.w	r2, r3, #15
 800211e:	4613      	mov	r3, r2
 8002120:	00db      	lsls	r3, r3, #3
 8002122:	4413      	add	r3, r2
 8002124:	009b      	lsls	r3, r3, #2
 8002126:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800212a:	687a      	ldr	r2, [r7, #4]
 800212c:	4413      	add	r3, r2
 800212e:	3304      	adds	r3, #4
 8002130:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	68f9      	ldr	r1, [r7, #12]
 8002138:	4618      	mov	r0, r3
 800213a:	f002 fab7 	bl	80046ac <USB_EPStopXfer>
 800213e:	4603      	mov	r3, r0
 8002140:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002142:	7afb      	ldrb	r3, [r7, #11]
}
 8002144:	4618      	mov	r0, r3
 8002146:	3710      	adds	r7, #16
 8002148:	46bd      	mov	sp, r7
 800214a:	bd80      	pop	{r7, pc}

0800214c <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b08a      	sub	sp, #40	; 0x28
 8002150:	af02      	add	r7, sp, #8
 8002152:	6078      	str	r0, [r7, #4]
 8002154:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800215c:	697b      	ldr	r3, [r7, #20]
 800215e:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002160:	683a      	ldr	r2, [r7, #0]
 8002162:	4613      	mov	r3, r2
 8002164:	00db      	lsls	r3, r3, #3
 8002166:	4413      	add	r3, r2
 8002168:	009b      	lsls	r3, r3, #2
 800216a:	3338      	adds	r3, #56	; 0x38
 800216c:	687a      	ldr	r2, [r7, #4]
 800216e:	4413      	add	r3, r2
 8002170:	3304      	adds	r3, #4
 8002172:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	6a1a      	ldr	r2, [r3, #32]
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	699b      	ldr	r3, [r3, #24]
 800217c:	429a      	cmp	r2, r3
 800217e:	d901      	bls.n	8002184 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002180:	2301      	movs	r3, #1
 8002182:	e06c      	b.n	800225e <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	699a      	ldr	r2, [r3, #24]
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	6a1b      	ldr	r3, [r3, #32]
 800218c:	1ad3      	subs	r3, r2, r3
 800218e:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	68db      	ldr	r3, [r3, #12]
 8002194:	69fa      	ldr	r2, [r7, #28]
 8002196:	429a      	cmp	r2, r3
 8002198:	d902      	bls.n	80021a0 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	68db      	ldr	r3, [r3, #12]
 800219e:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80021a0:	69fb      	ldr	r3, [r7, #28]
 80021a2:	3303      	adds	r3, #3
 80021a4:	089b      	lsrs	r3, r3, #2
 80021a6:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80021a8:	e02b      	b.n	8002202 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	699a      	ldr	r2, [r3, #24]
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	6a1b      	ldr	r3, [r3, #32]
 80021b2:	1ad3      	subs	r3, r2, r3
 80021b4:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	68db      	ldr	r3, [r3, #12]
 80021ba:	69fa      	ldr	r2, [r7, #28]
 80021bc:	429a      	cmp	r2, r3
 80021be:	d902      	bls.n	80021c6 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	68db      	ldr	r3, [r3, #12]
 80021c4:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80021c6:	69fb      	ldr	r3, [r7, #28]
 80021c8:	3303      	adds	r3, #3
 80021ca:	089b      	lsrs	r3, r3, #2
 80021cc:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	6919      	ldr	r1, [r3, #16]
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	b2da      	uxtb	r2, r3
 80021d6:	69fb      	ldr	r3, [r7, #28]
 80021d8:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80021de:	b2db      	uxtb	r3, r3
 80021e0:	9300      	str	r3, [sp, #0]
 80021e2:	4603      	mov	r3, r0
 80021e4:	6978      	ldr	r0, [r7, #20]
 80021e6:	f002 fb0b 	bl	8004800 <USB_WritePacket>

    ep->xfer_buff  += len;
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	691a      	ldr	r2, [r3, #16]
 80021ee:	69fb      	ldr	r3, [r7, #28]
 80021f0:	441a      	add	r2, r3
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	6a1a      	ldr	r2, [r3, #32]
 80021fa:	69fb      	ldr	r3, [r7, #28]
 80021fc:	441a      	add	r2, r3
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	015a      	lsls	r2, r3, #5
 8002206:	693b      	ldr	r3, [r7, #16]
 8002208:	4413      	add	r3, r2
 800220a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800220e:	699b      	ldr	r3, [r3, #24]
 8002210:	b29b      	uxth	r3, r3
 8002212:	69ba      	ldr	r2, [r7, #24]
 8002214:	429a      	cmp	r2, r3
 8002216:	d809      	bhi.n	800222c <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	6a1a      	ldr	r2, [r3, #32]
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002220:	429a      	cmp	r2, r3
 8002222:	d203      	bcs.n	800222c <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	699b      	ldr	r3, [r3, #24]
 8002228:	2b00      	cmp	r3, #0
 800222a:	d1be      	bne.n	80021aa <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	699a      	ldr	r2, [r3, #24]
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	6a1b      	ldr	r3, [r3, #32]
 8002234:	429a      	cmp	r2, r3
 8002236:	d811      	bhi.n	800225c <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	f003 030f 	and.w	r3, r3, #15
 800223e:	2201      	movs	r2, #1
 8002240:	fa02 f303 	lsl.w	r3, r2, r3
 8002244:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002246:	693b      	ldr	r3, [r7, #16]
 8002248:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800224c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800224e:	68bb      	ldr	r3, [r7, #8]
 8002250:	43db      	mvns	r3, r3
 8002252:	6939      	ldr	r1, [r7, #16]
 8002254:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002258:	4013      	ands	r3, r2
 800225a:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800225c:	2300      	movs	r3, #0
}
 800225e:	4618      	mov	r0, r3
 8002260:	3720      	adds	r7, #32
 8002262:	46bd      	mov	sp, r7
 8002264:	bd80      	pop	{r7, pc}
	...

08002268 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b088      	sub	sp, #32
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
 8002270:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002278:	69fb      	ldr	r3, [r7, #28]
 800227a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800227c:	69fb      	ldr	r3, [r7, #28]
 800227e:	333c      	adds	r3, #60	; 0x3c
 8002280:	3304      	adds	r3, #4
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	015a      	lsls	r2, r3, #5
 800228a:	69bb      	ldr	r3, [r7, #24]
 800228c:	4413      	add	r3, r2
 800228e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002292:	689b      	ldr	r3, [r3, #8]
 8002294:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	691b      	ldr	r3, [r3, #16]
 800229a:	2b01      	cmp	r3, #1
 800229c:	d17b      	bne.n	8002396 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800229e:	693b      	ldr	r3, [r7, #16]
 80022a0:	f003 0308 	and.w	r3, r3, #8
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d015      	beq.n	80022d4 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80022a8:	697b      	ldr	r3, [r7, #20]
 80022aa:	4a61      	ldr	r2, [pc, #388]	; (8002430 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80022ac:	4293      	cmp	r3, r2
 80022ae:	f240 80b9 	bls.w	8002424 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80022b2:	693b      	ldr	r3, [r7, #16]
 80022b4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	f000 80b3 	beq.w	8002424 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	015a      	lsls	r2, r3, #5
 80022c2:	69bb      	ldr	r3, [r7, #24]
 80022c4:	4413      	add	r3, r2
 80022c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80022ca:	461a      	mov	r2, r3
 80022cc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80022d0:	6093      	str	r3, [r2, #8]
 80022d2:	e0a7      	b.n	8002424 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80022d4:	693b      	ldr	r3, [r7, #16]
 80022d6:	f003 0320 	and.w	r3, r3, #32
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d009      	beq.n	80022f2 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	015a      	lsls	r2, r3, #5
 80022e2:	69bb      	ldr	r3, [r7, #24]
 80022e4:	4413      	add	r3, r2
 80022e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80022ea:	461a      	mov	r2, r3
 80022ec:	2320      	movs	r3, #32
 80022ee:	6093      	str	r3, [r2, #8]
 80022f0:	e098      	b.n	8002424 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80022f2:	693b      	ldr	r3, [r7, #16]
 80022f4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	f040 8093 	bne.w	8002424 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80022fe:	697b      	ldr	r3, [r7, #20]
 8002300:	4a4b      	ldr	r2, [pc, #300]	; (8002430 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002302:	4293      	cmp	r3, r2
 8002304:	d90f      	bls.n	8002326 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002306:	693b      	ldr	r3, [r7, #16]
 8002308:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800230c:	2b00      	cmp	r3, #0
 800230e:	d00a      	beq.n	8002326 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	015a      	lsls	r2, r3, #5
 8002314:	69bb      	ldr	r3, [r7, #24]
 8002316:	4413      	add	r3, r2
 8002318:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800231c:	461a      	mov	r2, r3
 800231e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002322:	6093      	str	r3, [r2, #8]
 8002324:	e07e      	b.n	8002424 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8002326:	683a      	ldr	r2, [r7, #0]
 8002328:	4613      	mov	r3, r2
 800232a:	00db      	lsls	r3, r3, #3
 800232c:	4413      	add	r3, r2
 800232e:	009b      	lsls	r3, r3, #2
 8002330:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002334:	687a      	ldr	r2, [r7, #4]
 8002336:	4413      	add	r3, r2
 8002338:	3304      	adds	r3, #4
 800233a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	69da      	ldr	r2, [r3, #28]
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	0159      	lsls	r1, r3, #5
 8002344:	69bb      	ldr	r3, [r7, #24]
 8002346:	440b      	add	r3, r1
 8002348:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800234c:	691b      	ldr	r3, [r3, #16]
 800234e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002352:	1ad2      	subs	r2, r2, r3
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	2b00      	cmp	r3, #0
 800235c:	d114      	bne.n	8002388 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	699b      	ldr	r3, [r3, #24]
 8002362:	2b00      	cmp	r3, #0
 8002364:	d109      	bne.n	800237a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6818      	ldr	r0, [r3, #0]
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002370:	461a      	mov	r2, r3
 8002372:	2101      	movs	r1, #1
 8002374:	f002 fcda 	bl	8004d2c <USB_EP0_OutStart>
 8002378:	e006      	b.n	8002388 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	691a      	ldr	r2, [r3, #16]
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	6a1b      	ldr	r3, [r3, #32]
 8002382:	441a      	add	r2, r3
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	b2db      	uxtb	r3, r3
 800238c:	4619      	mov	r1, r3
 800238e:	6878      	ldr	r0, [r7, #4]
 8002390:	f004 fc2a 	bl	8006be8 <HAL_PCD_DataOutStageCallback>
 8002394:	e046      	b.n	8002424 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002396:	697b      	ldr	r3, [r7, #20]
 8002398:	4a26      	ldr	r2, [pc, #152]	; (8002434 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800239a:	4293      	cmp	r3, r2
 800239c:	d124      	bne.n	80023e8 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800239e:	693b      	ldr	r3, [r7, #16]
 80023a0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d00a      	beq.n	80023be <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	015a      	lsls	r2, r3, #5
 80023ac:	69bb      	ldr	r3, [r7, #24]
 80023ae:	4413      	add	r3, r2
 80023b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80023b4:	461a      	mov	r2, r3
 80023b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80023ba:	6093      	str	r3, [r2, #8]
 80023bc:	e032      	b.n	8002424 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80023be:	693b      	ldr	r3, [r7, #16]
 80023c0:	f003 0320 	and.w	r3, r3, #32
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d008      	beq.n	80023da <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	015a      	lsls	r2, r3, #5
 80023cc:	69bb      	ldr	r3, [r7, #24]
 80023ce:	4413      	add	r3, r2
 80023d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80023d4:	461a      	mov	r2, r3
 80023d6:	2320      	movs	r3, #32
 80023d8:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	b2db      	uxtb	r3, r3
 80023de:	4619      	mov	r1, r3
 80023e0:	6878      	ldr	r0, [r7, #4]
 80023e2:	f004 fc01 	bl	8006be8 <HAL_PCD_DataOutStageCallback>
 80023e6:	e01d      	b.n	8002424 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d114      	bne.n	8002418 <PCD_EP_OutXfrComplete_int+0x1b0>
 80023ee:	6879      	ldr	r1, [r7, #4]
 80023f0:	683a      	ldr	r2, [r7, #0]
 80023f2:	4613      	mov	r3, r2
 80023f4:	00db      	lsls	r3, r3, #3
 80023f6:	4413      	add	r3, r2
 80023f8:	009b      	lsls	r3, r3, #2
 80023fa:	440b      	add	r3, r1
 80023fc:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	2b00      	cmp	r3, #0
 8002404:	d108      	bne.n	8002418 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6818      	ldr	r0, [r3, #0]
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002410:	461a      	mov	r2, r3
 8002412:	2100      	movs	r1, #0
 8002414:	f002 fc8a 	bl	8004d2c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	b2db      	uxtb	r3, r3
 800241c:	4619      	mov	r1, r3
 800241e:	6878      	ldr	r0, [r7, #4]
 8002420:	f004 fbe2 	bl	8006be8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002424:	2300      	movs	r3, #0
}
 8002426:	4618      	mov	r0, r3
 8002428:	3720      	adds	r7, #32
 800242a:	46bd      	mov	sp, r7
 800242c:	bd80      	pop	{r7, pc}
 800242e:	bf00      	nop
 8002430:	4f54300a 	.word	0x4f54300a
 8002434:	4f54310a 	.word	0x4f54310a

08002438 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b086      	sub	sp, #24
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
 8002440:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002448:	697b      	ldr	r3, [r7, #20]
 800244a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800244c:	697b      	ldr	r3, [r7, #20]
 800244e:	333c      	adds	r3, #60	; 0x3c
 8002450:	3304      	adds	r3, #4
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	015a      	lsls	r2, r3, #5
 800245a:	693b      	ldr	r3, [r7, #16]
 800245c:	4413      	add	r3, r2
 800245e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002462:	689b      	ldr	r3, [r3, #8]
 8002464:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	4a15      	ldr	r2, [pc, #84]	; (80024c0 <PCD_EP_OutSetupPacket_int+0x88>)
 800246a:	4293      	cmp	r3, r2
 800246c:	d90e      	bls.n	800248c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800246e:	68bb      	ldr	r3, [r7, #8]
 8002470:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002474:	2b00      	cmp	r3, #0
 8002476:	d009      	beq.n	800248c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	015a      	lsls	r2, r3, #5
 800247c:	693b      	ldr	r3, [r7, #16]
 800247e:	4413      	add	r3, r2
 8002480:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002484:	461a      	mov	r2, r3
 8002486:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800248a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800248c:	6878      	ldr	r0, [r7, #4]
 800248e:	f004 fb99 	bl	8006bc4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	4a0a      	ldr	r2, [pc, #40]	; (80024c0 <PCD_EP_OutSetupPacket_int+0x88>)
 8002496:	4293      	cmp	r3, r2
 8002498:	d90c      	bls.n	80024b4 <PCD_EP_OutSetupPacket_int+0x7c>
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	691b      	ldr	r3, [r3, #16]
 800249e:	2b01      	cmp	r3, #1
 80024a0:	d108      	bne.n	80024b4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6818      	ldr	r0, [r3, #0]
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80024ac:	461a      	mov	r2, r3
 80024ae:	2101      	movs	r1, #1
 80024b0:	f002 fc3c 	bl	8004d2c <USB_EP0_OutStart>
  }

  return HAL_OK;
 80024b4:	2300      	movs	r3, #0
}
 80024b6:	4618      	mov	r0, r3
 80024b8:	3718      	adds	r7, #24
 80024ba:	46bd      	mov	sp, r7
 80024bc:	bd80      	pop	{r7, pc}
 80024be:	bf00      	nop
 80024c0:	4f54300a 	.word	0x4f54300a

080024c4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80024c4:	b480      	push	{r7}
 80024c6:	b085      	sub	sp, #20
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
 80024cc:	460b      	mov	r3, r1
 80024ce:	70fb      	strb	r3, [r7, #3]
 80024d0:	4613      	mov	r3, r2
 80024d2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024da:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80024dc:	78fb      	ldrb	r3, [r7, #3]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d107      	bne.n	80024f2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80024e2:	883b      	ldrh	r3, [r7, #0]
 80024e4:	0419      	lsls	r1, r3, #16
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	68ba      	ldr	r2, [r7, #8]
 80024ec:	430a      	orrs	r2, r1
 80024ee:	629a      	str	r2, [r3, #40]	; 0x28
 80024f0:	e028      	b.n	8002544 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024f8:	0c1b      	lsrs	r3, r3, #16
 80024fa:	68ba      	ldr	r2, [r7, #8]
 80024fc:	4413      	add	r3, r2
 80024fe:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002500:	2300      	movs	r3, #0
 8002502:	73fb      	strb	r3, [r7, #15]
 8002504:	e00d      	b.n	8002522 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681a      	ldr	r2, [r3, #0]
 800250a:	7bfb      	ldrb	r3, [r7, #15]
 800250c:	3340      	adds	r3, #64	; 0x40
 800250e:	009b      	lsls	r3, r3, #2
 8002510:	4413      	add	r3, r2
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	0c1b      	lsrs	r3, r3, #16
 8002516:	68ba      	ldr	r2, [r7, #8]
 8002518:	4413      	add	r3, r2
 800251a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800251c:	7bfb      	ldrb	r3, [r7, #15]
 800251e:	3301      	adds	r3, #1
 8002520:	73fb      	strb	r3, [r7, #15]
 8002522:	7bfa      	ldrb	r2, [r7, #15]
 8002524:	78fb      	ldrb	r3, [r7, #3]
 8002526:	3b01      	subs	r3, #1
 8002528:	429a      	cmp	r2, r3
 800252a:	d3ec      	bcc.n	8002506 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800252c:	883b      	ldrh	r3, [r7, #0]
 800252e:	0418      	lsls	r0, r3, #16
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6819      	ldr	r1, [r3, #0]
 8002534:	78fb      	ldrb	r3, [r7, #3]
 8002536:	3b01      	subs	r3, #1
 8002538:	68ba      	ldr	r2, [r7, #8]
 800253a:	4302      	orrs	r2, r0
 800253c:	3340      	adds	r3, #64	; 0x40
 800253e:	009b      	lsls	r3, r3, #2
 8002540:	440b      	add	r3, r1
 8002542:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002544:	2300      	movs	r3, #0
}
 8002546:	4618      	mov	r0, r3
 8002548:	3714      	adds	r7, #20
 800254a:	46bd      	mov	sp, r7
 800254c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002550:	4770      	bx	lr

08002552 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002552:	b480      	push	{r7}
 8002554:	b083      	sub	sp, #12
 8002556:	af00      	add	r7, sp, #0
 8002558:	6078      	str	r0, [r7, #4]
 800255a:	460b      	mov	r3, r1
 800255c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	887a      	ldrh	r2, [r7, #2]
 8002564:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002566:	2300      	movs	r3, #0
}
 8002568:	4618      	mov	r0, r3
 800256a:	370c      	adds	r7, #12
 800256c:	46bd      	mov	sp, r7
 800256e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002572:	4770      	bx	lr

08002574 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002574:	b480      	push	{r7}
 8002576:	b083      	sub	sp, #12
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
 800257c:	460b      	mov	r3, r1
 800257e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002580:	bf00      	nop
 8002582:	370c      	adds	r7, #12
 8002584:	46bd      	mov	sp, r7
 8002586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258a:	4770      	bx	lr

0800258c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b086      	sub	sp, #24
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2b00      	cmp	r3, #0
 8002598:	d101      	bne.n	800259e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800259a:	2301      	movs	r3, #1
 800259c:	e267      	b.n	8002a6e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f003 0301 	and.w	r3, r3, #1
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d075      	beq.n	8002696 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80025aa:	4b88      	ldr	r3, [pc, #544]	; (80027cc <HAL_RCC_OscConfig+0x240>)
 80025ac:	689b      	ldr	r3, [r3, #8]
 80025ae:	f003 030c 	and.w	r3, r3, #12
 80025b2:	2b04      	cmp	r3, #4
 80025b4:	d00c      	beq.n	80025d0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80025b6:	4b85      	ldr	r3, [pc, #532]	; (80027cc <HAL_RCC_OscConfig+0x240>)
 80025b8:	689b      	ldr	r3, [r3, #8]
 80025ba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80025be:	2b08      	cmp	r3, #8
 80025c0:	d112      	bne.n	80025e8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80025c2:	4b82      	ldr	r3, [pc, #520]	; (80027cc <HAL_RCC_OscConfig+0x240>)
 80025c4:	685b      	ldr	r3, [r3, #4]
 80025c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025ca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80025ce:	d10b      	bne.n	80025e8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025d0:	4b7e      	ldr	r3, [pc, #504]	; (80027cc <HAL_RCC_OscConfig+0x240>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d05b      	beq.n	8002694 <HAL_RCC_OscConfig+0x108>
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	685b      	ldr	r3, [r3, #4]
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d157      	bne.n	8002694 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80025e4:	2301      	movs	r3, #1
 80025e6:	e242      	b.n	8002a6e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	685b      	ldr	r3, [r3, #4]
 80025ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025f0:	d106      	bne.n	8002600 <HAL_RCC_OscConfig+0x74>
 80025f2:	4b76      	ldr	r3, [pc, #472]	; (80027cc <HAL_RCC_OscConfig+0x240>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	4a75      	ldr	r2, [pc, #468]	; (80027cc <HAL_RCC_OscConfig+0x240>)
 80025f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025fc:	6013      	str	r3, [r2, #0]
 80025fe:	e01d      	b.n	800263c <HAL_RCC_OscConfig+0xb0>
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002608:	d10c      	bne.n	8002624 <HAL_RCC_OscConfig+0x98>
 800260a:	4b70      	ldr	r3, [pc, #448]	; (80027cc <HAL_RCC_OscConfig+0x240>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	4a6f      	ldr	r2, [pc, #444]	; (80027cc <HAL_RCC_OscConfig+0x240>)
 8002610:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002614:	6013      	str	r3, [r2, #0]
 8002616:	4b6d      	ldr	r3, [pc, #436]	; (80027cc <HAL_RCC_OscConfig+0x240>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	4a6c      	ldr	r2, [pc, #432]	; (80027cc <HAL_RCC_OscConfig+0x240>)
 800261c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002620:	6013      	str	r3, [r2, #0]
 8002622:	e00b      	b.n	800263c <HAL_RCC_OscConfig+0xb0>
 8002624:	4b69      	ldr	r3, [pc, #420]	; (80027cc <HAL_RCC_OscConfig+0x240>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	4a68      	ldr	r2, [pc, #416]	; (80027cc <HAL_RCC_OscConfig+0x240>)
 800262a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800262e:	6013      	str	r3, [r2, #0]
 8002630:	4b66      	ldr	r3, [pc, #408]	; (80027cc <HAL_RCC_OscConfig+0x240>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	4a65      	ldr	r2, [pc, #404]	; (80027cc <HAL_RCC_OscConfig+0x240>)
 8002636:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800263a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	2b00      	cmp	r3, #0
 8002642:	d013      	beq.n	800266c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002644:	f7fe fa46 	bl	8000ad4 <HAL_GetTick>
 8002648:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800264a:	e008      	b.n	800265e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800264c:	f7fe fa42 	bl	8000ad4 <HAL_GetTick>
 8002650:	4602      	mov	r2, r0
 8002652:	693b      	ldr	r3, [r7, #16]
 8002654:	1ad3      	subs	r3, r2, r3
 8002656:	2b64      	cmp	r3, #100	; 0x64
 8002658:	d901      	bls.n	800265e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800265a:	2303      	movs	r3, #3
 800265c:	e207      	b.n	8002a6e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800265e:	4b5b      	ldr	r3, [pc, #364]	; (80027cc <HAL_RCC_OscConfig+0x240>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002666:	2b00      	cmp	r3, #0
 8002668:	d0f0      	beq.n	800264c <HAL_RCC_OscConfig+0xc0>
 800266a:	e014      	b.n	8002696 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800266c:	f7fe fa32 	bl	8000ad4 <HAL_GetTick>
 8002670:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002672:	e008      	b.n	8002686 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002674:	f7fe fa2e 	bl	8000ad4 <HAL_GetTick>
 8002678:	4602      	mov	r2, r0
 800267a:	693b      	ldr	r3, [r7, #16]
 800267c:	1ad3      	subs	r3, r2, r3
 800267e:	2b64      	cmp	r3, #100	; 0x64
 8002680:	d901      	bls.n	8002686 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002682:	2303      	movs	r3, #3
 8002684:	e1f3      	b.n	8002a6e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002686:	4b51      	ldr	r3, [pc, #324]	; (80027cc <HAL_RCC_OscConfig+0x240>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800268e:	2b00      	cmp	r3, #0
 8002690:	d1f0      	bne.n	8002674 <HAL_RCC_OscConfig+0xe8>
 8002692:	e000      	b.n	8002696 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002694:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f003 0302 	and.w	r3, r3, #2
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d063      	beq.n	800276a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80026a2:	4b4a      	ldr	r3, [pc, #296]	; (80027cc <HAL_RCC_OscConfig+0x240>)
 80026a4:	689b      	ldr	r3, [r3, #8]
 80026a6:	f003 030c 	and.w	r3, r3, #12
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d00b      	beq.n	80026c6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80026ae:	4b47      	ldr	r3, [pc, #284]	; (80027cc <HAL_RCC_OscConfig+0x240>)
 80026b0:	689b      	ldr	r3, [r3, #8]
 80026b2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80026b6:	2b08      	cmp	r3, #8
 80026b8:	d11c      	bne.n	80026f4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80026ba:	4b44      	ldr	r3, [pc, #272]	; (80027cc <HAL_RCC_OscConfig+0x240>)
 80026bc:	685b      	ldr	r3, [r3, #4]
 80026be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d116      	bne.n	80026f4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026c6:	4b41      	ldr	r3, [pc, #260]	; (80027cc <HAL_RCC_OscConfig+0x240>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f003 0302 	and.w	r3, r3, #2
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d005      	beq.n	80026de <HAL_RCC_OscConfig+0x152>
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	68db      	ldr	r3, [r3, #12]
 80026d6:	2b01      	cmp	r3, #1
 80026d8:	d001      	beq.n	80026de <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80026da:	2301      	movs	r3, #1
 80026dc:	e1c7      	b.n	8002a6e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026de:	4b3b      	ldr	r3, [pc, #236]	; (80027cc <HAL_RCC_OscConfig+0x240>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	691b      	ldr	r3, [r3, #16]
 80026ea:	00db      	lsls	r3, r3, #3
 80026ec:	4937      	ldr	r1, [pc, #220]	; (80027cc <HAL_RCC_OscConfig+0x240>)
 80026ee:	4313      	orrs	r3, r2
 80026f0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026f2:	e03a      	b.n	800276a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	68db      	ldr	r3, [r3, #12]
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d020      	beq.n	800273e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80026fc:	4b34      	ldr	r3, [pc, #208]	; (80027d0 <HAL_RCC_OscConfig+0x244>)
 80026fe:	2201      	movs	r2, #1
 8002700:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002702:	f7fe f9e7 	bl	8000ad4 <HAL_GetTick>
 8002706:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002708:	e008      	b.n	800271c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800270a:	f7fe f9e3 	bl	8000ad4 <HAL_GetTick>
 800270e:	4602      	mov	r2, r0
 8002710:	693b      	ldr	r3, [r7, #16]
 8002712:	1ad3      	subs	r3, r2, r3
 8002714:	2b02      	cmp	r3, #2
 8002716:	d901      	bls.n	800271c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002718:	2303      	movs	r3, #3
 800271a:	e1a8      	b.n	8002a6e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800271c:	4b2b      	ldr	r3, [pc, #172]	; (80027cc <HAL_RCC_OscConfig+0x240>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f003 0302 	and.w	r3, r3, #2
 8002724:	2b00      	cmp	r3, #0
 8002726:	d0f0      	beq.n	800270a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002728:	4b28      	ldr	r3, [pc, #160]	; (80027cc <HAL_RCC_OscConfig+0x240>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	691b      	ldr	r3, [r3, #16]
 8002734:	00db      	lsls	r3, r3, #3
 8002736:	4925      	ldr	r1, [pc, #148]	; (80027cc <HAL_RCC_OscConfig+0x240>)
 8002738:	4313      	orrs	r3, r2
 800273a:	600b      	str	r3, [r1, #0]
 800273c:	e015      	b.n	800276a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800273e:	4b24      	ldr	r3, [pc, #144]	; (80027d0 <HAL_RCC_OscConfig+0x244>)
 8002740:	2200      	movs	r2, #0
 8002742:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002744:	f7fe f9c6 	bl	8000ad4 <HAL_GetTick>
 8002748:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800274a:	e008      	b.n	800275e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800274c:	f7fe f9c2 	bl	8000ad4 <HAL_GetTick>
 8002750:	4602      	mov	r2, r0
 8002752:	693b      	ldr	r3, [r7, #16]
 8002754:	1ad3      	subs	r3, r2, r3
 8002756:	2b02      	cmp	r3, #2
 8002758:	d901      	bls.n	800275e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800275a:	2303      	movs	r3, #3
 800275c:	e187      	b.n	8002a6e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800275e:	4b1b      	ldr	r3, [pc, #108]	; (80027cc <HAL_RCC_OscConfig+0x240>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f003 0302 	and.w	r3, r3, #2
 8002766:	2b00      	cmp	r3, #0
 8002768:	d1f0      	bne.n	800274c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f003 0308 	and.w	r3, r3, #8
 8002772:	2b00      	cmp	r3, #0
 8002774:	d036      	beq.n	80027e4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	695b      	ldr	r3, [r3, #20]
 800277a:	2b00      	cmp	r3, #0
 800277c:	d016      	beq.n	80027ac <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800277e:	4b15      	ldr	r3, [pc, #84]	; (80027d4 <HAL_RCC_OscConfig+0x248>)
 8002780:	2201      	movs	r2, #1
 8002782:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002784:	f7fe f9a6 	bl	8000ad4 <HAL_GetTick>
 8002788:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800278a:	e008      	b.n	800279e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800278c:	f7fe f9a2 	bl	8000ad4 <HAL_GetTick>
 8002790:	4602      	mov	r2, r0
 8002792:	693b      	ldr	r3, [r7, #16]
 8002794:	1ad3      	subs	r3, r2, r3
 8002796:	2b02      	cmp	r3, #2
 8002798:	d901      	bls.n	800279e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800279a:	2303      	movs	r3, #3
 800279c:	e167      	b.n	8002a6e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800279e:	4b0b      	ldr	r3, [pc, #44]	; (80027cc <HAL_RCC_OscConfig+0x240>)
 80027a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027a2:	f003 0302 	and.w	r3, r3, #2
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d0f0      	beq.n	800278c <HAL_RCC_OscConfig+0x200>
 80027aa:	e01b      	b.n	80027e4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80027ac:	4b09      	ldr	r3, [pc, #36]	; (80027d4 <HAL_RCC_OscConfig+0x248>)
 80027ae:	2200      	movs	r2, #0
 80027b0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027b2:	f7fe f98f 	bl	8000ad4 <HAL_GetTick>
 80027b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027b8:	e00e      	b.n	80027d8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80027ba:	f7fe f98b 	bl	8000ad4 <HAL_GetTick>
 80027be:	4602      	mov	r2, r0
 80027c0:	693b      	ldr	r3, [r7, #16]
 80027c2:	1ad3      	subs	r3, r2, r3
 80027c4:	2b02      	cmp	r3, #2
 80027c6:	d907      	bls.n	80027d8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80027c8:	2303      	movs	r3, #3
 80027ca:	e150      	b.n	8002a6e <HAL_RCC_OscConfig+0x4e2>
 80027cc:	40023800 	.word	0x40023800
 80027d0:	42470000 	.word	0x42470000
 80027d4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027d8:	4b88      	ldr	r3, [pc, #544]	; (80029fc <HAL_RCC_OscConfig+0x470>)
 80027da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027dc:	f003 0302 	and.w	r3, r3, #2
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d1ea      	bne.n	80027ba <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f003 0304 	and.w	r3, r3, #4
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	f000 8097 	beq.w	8002920 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80027f2:	2300      	movs	r3, #0
 80027f4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80027f6:	4b81      	ldr	r3, [pc, #516]	; (80029fc <HAL_RCC_OscConfig+0x470>)
 80027f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d10f      	bne.n	8002822 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002802:	2300      	movs	r3, #0
 8002804:	60bb      	str	r3, [r7, #8]
 8002806:	4b7d      	ldr	r3, [pc, #500]	; (80029fc <HAL_RCC_OscConfig+0x470>)
 8002808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800280a:	4a7c      	ldr	r2, [pc, #496]	; (80029fc <HAL_RCC_OscConfig+0x470>)
 800280c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002810:	6413      	str	r3, [r2, #64]	; 0x40
 8002812:	4b7a      	ldr	r3, [pc, #488]	; (80029fc <HAL_RCC_OscConfig+0x470>)
 8002814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002816:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800281a:	60bb      	str	r3, [r7, #8]
 800281c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800281e:	2301      	movs	r3, #1
 8002820:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002822:	4b77      	ldr	r3, [pc, #476]	; (8002a00 <HAL_RCC_OscConfig+0x474>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800282a:	2b00      	cmp	r3, #0
 800282c:	d118      	bne.n	8002860 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800282e:	4b74      	ldr	r3, [pc, #464]	; (8002a00 <HAL_RCC_OscConfig+0x474>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	4a73      	ldr	r2, [pc, #460]	; (8002a00 <HAL_RCC_OscConfig+0x474>)
 8002834:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002838:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800283a:	f7fe f94b 	bl	8000ad4 <HAL_GetTick>
 800283e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002840:	e008      	b.n	8002854 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002842:	f7fe f947 	bl	8000ad4 <HAL_GetTick>
 8002846:	4602      	mov	r2, r0
 8002848:	693b      	ldr	r3, [r7, #16]
 800284a:	1ad3      	subs	r3, r2, r3
 800284c:	2b02      	cmp	r3, #2
 800284e:	d901      	bls.n	8002854 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002850:	2303      	movs	r3, #3
 8002852:	e10c      	b.n	8002a6e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002854:	4b6a      	ldr	r3, [pc, #424]	; (8002a00 <HAL_RCC_OscConfig+0x474>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800285c:	2b00      	cmp	r3, #0
 800285e:	d0f0      	beq.n	8002842 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	689b      	ldr	r3, [r3, #8]
 8002864:	2b01      	cmp	r3, #1
 8002866:	d106      	bne.n	8002876 <HAL_RCC_OscConfig+0x2ea>
 8002868:	4b64      	ldr	r3, [pc, #400]	; (80029fc <HAL_RCC_OscConfig+0x470>)
 800286a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800286c:	4a63      	ldr	r2, [pc, #396]	; (80029fc <HAL_RCC_OscConfig+0x470>)
 800286e:	f043 0301 	orr.w	r3, r3, #1
 8002872:	6713      	str	r3, [r2, #112]	; 0x70
 8002874:	e01c      	b.n	80028b0 <HAL_RCC_OscConfig+0x324>
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	689b      	ldr	r3, [r3, #8]
 800287a:	2b05      	cmp	r3, #5
 800287c:	d10c      	bne.n	8002898 <HAL_RCC_OscConfig+0x30c>
 800287e:	4b5f      	ldr	r3, [pc, #380]	; (80029fc <HAL_RCC_OscConfig+0x470>)
 8002880:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002882:	4a5e      	ldr	r2, [pc, #376]	; (80029fc <HAL_RCC_OscConfig+0x470>)
 8002884:	f043 0304 	orr.w	r3, r3, #4
 8002888:	6713      	str	r3, [r2, #112]	; 0x70
 800288a:	4b5c      	ldr	r3, [pc, #368]	; (80029fc <HAL_RCC_OscConfig+0x470>)
 800288c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800288e:	4a5b      	ldr	r2, [pc, #364]	; (80029fc <HAL_RCC_OscConfig+0x470>)
 8002890:	f043 0301 	orr.w	r3, r3, #1
 8002894:	6713      	str	r3, [r2, #112]	; 0x70
 8002896:	e00b      	b.n	80028b0 <HAL_RCC_OscConfig+0x324>
 8002898:	4b58      	ldr	r3, [pc, #352]	; (80029fc <HAL_RCC_OscConfig+0x470>)
 800289a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800289c:	4a57      	ldr	r2, [pc, #348]	; (80029fc <HAL_RCC_OscConfig+0x470>)
 800289e:	f023 0301 	bic.w	r3, r3, #1
 80028a2:	6713      	str	r3, [r2, #112]	; 0x70
 80028a4:	4b55      	ldr	r3, [pc, #340]	; (80029fc <HAL_RCC_OscConfig+0x470>)
 80028a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028a8:	4a54      	ldr	r2, [pc, #336]	; (80029fc <HAL_RCC_OscConfig+0x470>)
 80028aa:	f023 0304 	bic.w	r3, r3, #4
 80028ae:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	689b      	ldr	r3, [r3, #8]
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d015      	beq.n	80028e4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028b8:	f7fe f90c 	bl	8000ad4 <HAL_GetTick>
 80028bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028be:	e00a      	b.n	80028d6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80028c0:	f7fe f908 	bl	8000ad4 <HAL_GetTick>
 80028c4:	4602      	mov	r2, r0
 80028c6:	693b      	ldr	r3, [r7, #16]
 80028c8:	1ad3      	subs	r3, r2, r3
 80028ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d901      	bls.n	80028d6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80028d2:	2303      	movs	r3, #3
 80028d4:	e0cb      	b.n	8002a6e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028d6:	4b49      	ldr	r3, [pc, #292]	; (80029fc <HAL_RCC_OscConfig+0x470>)
 80028d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028da:	f003 0302 	and.w	r3, r3, #2
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d0ee      	beq.n	80028c0 <HAL_RCC_OscConfig+0x334>
 80028e2:	e014      	b.n	800290e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028e4:	f7fe f8f6 	bl	8000ad4 <HAL_GetTick>
 80028e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028ea:	e00a      	b.n	8002902 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80028ec:	f7fe f8f2 	bl	8000ad4 <HAL_GetTick>
 80028f0:	4602      	mov	r2, r0
 80028f2:	693b      	ldr	r3, [r7, #16]
 80028f4:	1ad3      	subs	r3, r2, r3
 80028f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d901      	bls.n	8002902 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80028fe:	2303      	movs	r3, #3
 8002900:	e0b5      	b.n	8002a6e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002902:	4b3e      	ldr	r3, [pc, #248]	; (80029fc <HAL_RCC_OscConfig+0x470>)
 8002904:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002906:	f003 0302 	and.w	r3, r3, #2
 800290a:	2b00      	cmp	r3, #0
 800290c:	d1ee      	bne.n	80028ec <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800290e:	7dfb      	ldrb	r3, [r7, #23]
 8002910:	2b01      	cmp	r3, #1
 8002912:	d105      	bne.n	8002920 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002914:	4b39      	ldr	r3, [pc, #228]	; (80029fc <HAL_RCC_OscConfig+0x470>)
 8002916:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002918:	4a38      	ldr	r2, [pc, #224]	; (80029fc <HAL_RCC_OscConfig+0x470>)
 800291a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800291e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	699b      	ldr	r3, [r3, #24]
 8002924:	2b00      	cmp	r3, #0
 8002926:	f000 80a1 	beq.w	8002a6c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800292a:	4b34      	ldr	r3, [pc, #208]	; (80029fc <HAL_RCC_OscConfig+0x470>)
 800292c:	689b      	ldr	r3, [r3, #8]
 800292e:	f003 030c 	and.w	r3, r3, #12
 8002932:	2b08      	cmp	r3, #8
 8002934:	d05c      	beq.n	80029f0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	699b      	ldr	r3, [r3, #24]
 800293a:	2b02      	cmp	r3, #2
 800293c:	d141      	bne.n	80029c2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800293e:	4b31      	ldr	r3, [pc, #196]	; (8002a04 <HAL_RCC_OscConfig+0x478>)
 8002940:	2200      	movs	r2, #0
 8002942:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002944:	f7fe f8c6 	bl	8000ad4 <HAL_GetTick>
 8002948:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800294a:	e008      	b.n	800295e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800294c:	f7fe f8c2 	bl	8000ad4 <HAL_GetTick>
 8002950:	4602      	mov	r2, r0
 8002952:	693b      	ldr	r3, [r7, #16]
 8002954:	1ad3      	subs	r3, r2, r3
 8002956:	2b02      	cmp	r3, #2
 8002958:	d901      	bls.n	800295e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800295a:	2303      	movs	r3, #3
 800295c:	e087      	b.n	8002a6e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800295e:	4b27      	ldr	r3, [pc, #156]	; (80029fc <HAL_RCC_OscConfig+0x470>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002966:	2b00      	cmp	r3, #0
 8002968:	d1f0      	bne.n	800294c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	69da      	ldr	r2, [r3, #28]
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6a1b      	ldr	r3, [r3, #32]
 8002972:	431a      	orrs	r2, r3
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002978:	019b      	lsls	r3, r3, #6
 800297a:	431a      	orrs	r2, r3
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002980:	085b      	lsrs	r3, r3, #1
 8002982:	3b01      	subs	r3, #1
 8002984:	041b      	lsls	r3, r3, #16
 8002986:	431a      	orrs	r2, r3
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800298c:	061b      	lsls	r3, r3, #24
 800298e:	491b      	ldr	r1, [pc, #108]	; (80029fc <HAL_RCC_OscConfig+0x470>)
 8002990:	4313      	orrs	r3, r2
 8002992:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002994:	4b1b      	ldr	r3, [pc, #108]	; (8002a04 <HAL_RCC_OscConfig+0x478>)
 8002996:	2201      	movs	r2, #1
 8002998:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800299a:	f7fe f89b 	bl	8000ad4 <HAL_GetTick>
 800299e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029a0:	e008      	b.n	80029b4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029a2:	f7fe f897 	bl	8000ad4 <HAL_GetTick>
 80029a6:	4602      	mov	r2, r0
 80029a8:	693b      	ldr	r3, [r7, #16]
 80029aa:	1ad3      	subs	r3, r2, r3
 80029ac:	2b02      	cmp	r3, #2
 80029ae:	d901      	bls.n	80029b4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80029b0:	2303      	movs	r3, #3
 80029b2:	e05c      	b.n	8002a6e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029b4:	4b11      	ldr	r3, [pc, #68]	; (80029fc <HAL_RCC_OscConfig+0x470>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d0f0      	beq.n	80029a2 <HAL_RCC_OscConfig+0x416>
 80029c0:	e054      	b.n	8002a6c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029c2:	4b10      	ldr	r3, [pc, #64]	; (8002a04 <HAL_RCC_OscConfig+0x478>)
 80029c4:	2200      	movs	r2, #0
 80029c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029c8:	f7fe f884 	bl	8000ad4 <HAL_GetTick>
 80029cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029ce:	e008      	b.n	80029e2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029d0:	f7fe f880 	bl	8000ad4 <HAL_GetTick>
 80029d4:	4602      	mov	r2, r0
 80029d6:	693b      	ldr	r3, [r7, #16]
 80029d8:	1ad3      	subs	r3, r2, r3
 80029da:	2b02      	cmp	r3, #2
 80029dc:	d901      	bls.n	80029e2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80029de:	2303      	movs	r3, #3
 80029e0:	e045      	b.n	8002a6e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029e2:	4b06      	ldr	r3, [pc, #24]	; (80029fc <HAL_RCC_OscConfig+0x470>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d1f0      	bne.n	80029d0 <HAL_RCC_OscConfig+0x444>
 80029ee:	e03d      	b.n	8002a6c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	699b      	ldr	r3, [r3, #24]
 80029f4:	2b01      	cmp	r3, #1
 80029f6:	d107      	bne.n	8002a08 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80029f8:	2301      	movs	r3, #1
 80029fa:	e038      	b.n	8002a6e <HAL_RCC_OscConfig+0x4e2>
 80029fc:	40023800 	.word	0x40023800
 8002a00:	40007000 	.word	0x40007000
 8002a04:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002a08:	4b1b      	ldr	r3, [pc, #108]	; (8002a78 <HAL_RCC_OscConfig+0x4ec>)
 8002a0a:	685b      	ldr	r3, [r3, #4]
 8002a0c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	699b      	ldr	r3, [r3, #24]
 8002a12:	2b01      	cmp	r3, #1
 8002a14:	d028      	beq.n	8002a68 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a20:	429a      	cmp	r2, r3
 8002a22:	d121      	bne.n	8002a68 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a2e:	429a      	cmp	r2, r3
 8002a30:	d11a      	bne.n	8002a68 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002a32:	68fa      	ldr	r2, [r7, #12]
 8002a34:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002a38:	4013      	ands	r3, r2
 8002a3a:	687a      	ldr	r2, [r7, #4]
 8002a3c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002a3e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002a40:	4293      	cmp	r3, r2
 8002a42:	d111      	bne.n	8002a68 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a4e:	085b      	lsrs	r3, r3, #1
 8002a50:	3b01      	subs	r3, #1
 8002a52:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002a54:	429a      	cmp	r2, r3
 8002a56:	d107      	bne.n	8002a68 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a62:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002a64:	429a      	cmp	r2, r3
 8002a66:	d001      	beq.n	8002a6c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002a68:	2301      	movs	r3, #1
 8002a6a:	e000      	b.n	8002a6e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002a6c:	2300      	movs	r3, #0
}
 8002a6e:	4618      	mov	r0, r3
 8002a70:	3718      	adds	r7, #24
 8002a72:	46bd      	mov	sp, r7
 8002a74:	bd80      	pop	{r7, pc}
 8002a76:	bf00      	nop
 8002a78:	40023800 	.word	0x40023800

08002a7c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b084      	sub	sp, #16
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
 8002a84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d101      	bne.n	8002a90 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a8c:	2301      	movs	r3, #1
 8002a8e:	e0cc      	b.n	8002c2a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002a90:	4b68      	ldr	r3, [pc, #416]	; (8002c34 <HAL_RCC_ClockConfig+0x1b8>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f003 0307 	and.w	r3, r3, #7
 8002a98:	683a      	ldr	r2, [r7, #0]
 8002a9a:	429a      	cmp	r2, r3
 8002a9c:	d90c      	bls.n	8002ab8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a9e:	4b65      	ldr	r3, [pc, #404]	; (8002c34 <HAL_RCC_ClockConfig+0x1b8>)
 8002aa0:	683a      	ldr	r2, [r7, #0]
 8002aa2:	b2d2      	uxtb	r2, r2
 8002aa4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002aa6:	4b63      	ldr	r3, [pc, #396]	; (8002c34 <HAL_RCC_ClockConfig+0x1b8>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f003 0307 	and.w	r3, r3, #7
 8002aae:	683a      	ldr	r2, [r7, #0]
 8002ab0:	429a      	cmp	r2, r3
 8002ab2:	d001      	beq.n	8002ab8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002ab4:	2301      	movs	r3, #1
 8002ab6:	e0b8      	b.n	8002c2a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f003 0302 	and.w	r3, r3, #2
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d020      	beq.n	8002b06 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f003 0304 	and.w	r3, r3, #4
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d005      	beq.n	8002adc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ad0:	4b59      	ldr	r3, [pc, #356]	; (8002c38 <HAL_RCC_ClockConfig+0x1bc>)
 8002ad2:	689b      	ldr	r3, [r3, #8]
 8002ad4:	4a58      	ldr	r2, [pc, #352]	; (8002c38 <HAL_RCC_ClockConfig+0x1bc>)
 8002ad6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002ada:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f003 0308 	and.w	r3, r3, #8
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d005      	beq.n	8002af4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002ae8:	4b53      	ldr	r3, [pc, #332]	; (8002c38 <HAL_RCC_ClockConfig+0x1bc>)
 8002aea:	689b      	ldr	r3, [r3, #8]
 8002aec:	4a52      	ldr	r2, [pc, #328]	; (8002c38 <HAL_RCC_ClockConfig+0x1bc>)
 8002aee:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002af2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002af4:	4b50      	ldr	r3, [pc, #320]	; (8002c38 <HAL_RCC_ClockConfig+0x1bc>)
 8002af6:	689b      	ldr	r3, [r3, #8]
 8002af8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	689b      	ldr	r3, [r3, #8]
 8002b00:	494d      	ldr	r1, [pc, #308]	; (8002c38 <HAL_RCC_ClockConfig+0x1bc>)
 8002b02:	4313      	orrs	r3, r2
 8002b04:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f003 0301 	and.w	r3, r3, #1
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d044      	beq.n	8002b9c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	685b      	ldr	r3, [r3, #4]
 8002b16:	2b01      	cmp	r3, #1
 8002b18:	d107      	bne.n	8002b2a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b1a:	4b47      	ldr	r3, [pc, #284]	; (8002c38 <HAL_RCC_ClockConfig+0x1bc>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d119      	bne.n	8002b5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b26:	2301      	movs	r3, #1
 8002b28:	e07f      	b.n	8002c2a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	685b      	ldr	r3, [r3, #4]
 8002b2e:	2b02      	cmp	r3, #2
 8002b30:	d003      	beq.n	8002b3a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b36:	2b03      	cmp	r3, #3
 8002b38:	d107      	bne.n	8002b4a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b3a:	4b3f      	ldr	r3, [pc, #252]	; (8002c38 <HAL_RCC_ClockConfig+0x1bc>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d109      	bne.n	8002b5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b46:	2301      	movs	r3, #1
 8002b48:	e06f      	b.n	8002c2a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b4a:	4b3b      	ldr	r3, [pc, #236]	; (8002c38 <HAL_RCC_ClockConfig+0x1bc>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f003 0302 	and.w	r3, r3, #2
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d101      	bne.n	8002b5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b56:	2301      	movs	r3, #1
 8002b58:	e067      	b.n	8002c2a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b5a:	4b37      	ldr	r3, [pc, #220]	; (8002c38 <HAL_RCC_ClockConfig+0x1bc>)
 8002b5c:	689b      	ldr	r3, [r3, #8]
 8002b5e:	f023 0203 	bic.w	r2, r3, #3
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	685b      	ldr	r3, [r3, #4]
 8002b66:	4934      	ldr	r1, [pc, #208]	; (8002c38 <HAL_RCC_ClockConfig+0x1bc>)
 8002b68:	4313      	orrs	r3, r2
 8002b6a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b6c:	f7fd ffb2 	bl	8000ad4 <HAL_GetTick>
 8002b70:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b72:	e00a      	b.n	8002b8a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b74:	f7fd ffae 	bl	8000ad4 <HAL_GetTick>
 8002b78:	4602      	mov	r2, r0
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	1ad3      	subs	r3, r2, r3
 8002b7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d901      	bls.n	8002b8a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002b86:	2303      	movs	r3, #3
 8002b88:	e04f      	b.n	8002c2a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b8a:	4b2b      	ldr	r3, [pc, #172]	; (8002c38 <HAL_RCC_ClockConfig+0x1bc>)
 8002b8c:	689b      	ldr	r3, [r3, #8]
 8002b8e:	f003 020c 	and.w	r2, r3, #12
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	685b      	ldr	r3, [r3, #4]
 8002b96:	009b      	lsls	r3, r3, #2
 8002b98:	429a      	cmp	r2, r3
 8002b9a:	d1eb      	bne.n	8002b74 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002b9c:	4b25      	ldr	r3, [pc, #148]	; (8002c34 <HAL_RCC_ClockConfig+0x1b8>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f003 0307 	and.w	r3, r3, #7
 8002ba4:	683a      	ldr	r2, [r7, #0]
 8002ba6:	429a      	cmp	r2, r3
 8002ba8:	d20c      	bcs.n	8002bc4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002baa:	4b22      	ldr	r3, [pc, #136]	; (8002c34 <HAL_RCC_ClockConfig+0x1b8>)
 8002bac:	683a      	ldr	r2, [r7, #0]
 8002bae:	b2d2      	uxtb	r2, r2
 8002bb0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bb2:	4b20      	ldr	r3, [pc, #128]	; (8002c34 <HAL_RCC_ClockConfig+0x1b8>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f003 0307 	and.w	r3, r3, #7
 8002bba:	683a      	ldr	r2, [r7, #0]
 8002bbc:	429a      	cmp	r2, r3
 8002bbe:	d001      	beq.n	8002bc4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002bc0:	2301      	movs	r3, #1
 8002bc2:	e032      	b.n	8002c2a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f003 0304 	and.w	r3, r3, #4
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d008      	beq.n	8002be2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002bd0:	4b19      	ldr	r3, [pc, #100]	; (8002c38 <HAL_RCC_ClockConfig+0x1bc>)
 8002bd2:	689b      	ldr	r3, [r3, #8]
 8002bd4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	68db      	ldr	r3, [r3, #12]
 8002bdc:	4916      	ldr	r1, [pc, #88]	; (8002c38 <HAL_RCC_ClockConfig+0x1bc>)
 8002bde:	4313      	orrs	r3, r2
 8002be0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f003 0308 	and.w	r3, r3, #8
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d009      	beq.n	8002c02 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002bee:	4b12      	ldr	r3, [pc, #72]	; (8002c38 <HAL_RCC_ClockConfig+0x1bc>)
 8002bf0:	689b      	ldr	r3, [r3, #8]
 8002bf2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	691b      	ldr	r3, [r3, #16]
 8002bfa:	00db      	lsls	r3, r3, #3
 8002bfc:	490e      	ldr	r1, [pc, #56]	; (8002c38 <HAL_RCC_ClockConfig+0x1bc>)
 8002bfe:	4313      	orrs	r3, r2
 8002c00:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002c02:	f000 f821 	bl	8002c48 <HAL_RCC_GetSysClockFreq>
 8002c06:	4602      	mov	r2, r0
 8002c08:	4b0b      	ldr	r3, [pc, #44]	; (8002c38 <HAL_RCC_ClockConfig+0x1bc>)
 8002c0a:	689b      	ldr	r3, [r3, #8]
 8002c0c:	091b      	lsrs	r3, r3, #4
 8002c0e:	f003 030f 	and.w	r3, r3, #15
 8002c12:	490a      	ldr	r1, [pc, #40]	; (8002c3c <HAL_RCC_ClockConfig+0x1c0>)
 8002c14:	5ccb      	ldrb	r3, [r1, r3]
 8002c16:	fa22 f303 	lsr.w	r3, r2, r3
 8002c1a:	4a09      	ldr	r2, [pc, #36]	; (8002c40 <HAL_RCC_ClockConfig+0x1c4>)
 8002c1c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002c1e:	4b09      	ldr	r3, [pc, #36]	; (8002c44 <HAL_RCC_ClockConfig+0x1c8>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	4618      	mov	r0, r3
 8002c24:	f7fd ff12 	bl	8000a4c <HAL_InitTick>

  return HAL_OK;
 8002c28:	2300      	movs	r3, #0
}
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	3710      	adds	r7, #16
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	bd80      	pop	{r7, pc}
 8002c32:	bf00      	nop
 8002c34:	40023c00 	.word	0x40023c00
 8002c38:	40023800 	.word	0x40023800
 8002c3c:	080071d8 	.word	0x080071d8
 8002c40:	20000000 	.word	0x20000000
 8002c44:	20000004 	.word	0x20000004

08002c48 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c48:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002c4c:	b090      	sub	sp, #64	; 0x40
 8002c4e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002c50:	2300      	movs	r3, #0
 8002c52:	637b      	str	r3, [r7, #52]	; 0x34
 8002c54:	2300      	movs	r3, #0
 8002c56:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002c58:	2300      	movs	r3, #0
 8002c5a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002c60:	4b59      	ldr	r3, [pc, #356]	; (8002dc8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002c62:	689b      	ldr	r3, [r3, #8]
 8002c64:	f003 030c 	and.w	r3, r3, #12
 8002c68:	2b08      	cmp	r3, #8
 8002c6a:	d00d      	beq.n	8002c88 <HAL_RCC_GetSysClockFreq+0x40>
 8002c6c:	2b08      	cmp	r3, #8
 8002c6e:	f200 80a1 	bhi.w	8002db4 <HAL_RCC_GetSysClockFreq+0x16c>
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d002      	beq.n	8002c7c <HAL_RCC_GetSysClockFreq+0x34>
 8002c76:	2b04      	cmp	r3, #4
 8002c78:	d003      	beq.n	8002c82 <HAL_RCC_GetSysClockFreq+0x3a>
 8002c7a:	e09b      	b.n	8002db4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002c7c:	4b53      	ldr	r3, [pc, #332]	; (8002dcc <HAL_RCC_GetSysClockFreq+0x184>)
 8002c7e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002c80:	e09b      	b.n	8002dba <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002c82:	4b53      	ldr	r3, [pc, #332]	; (8002dd0 <HAL_RCC_GetSysClockFreq+0x188>)
 8002c84:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002c86:	e098      	b.n	8002dba <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002c88:	4b4f      	ldr	r3, [pc, #316]	; (8002dc8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002c8a:	685b      	ldr	r3, [r3, #4]
 8002c8c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002c90:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002c92:	4b4d      	ldr	r3, [pc, #308]	; (8002dc8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002c94:	685b      	ldr	r3, [r3, #4]
 8002c96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d028      	beq.n	8002cf0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c9e:	4b4a      	ldr	r3, [pc, #296]	; (8002dc8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002ca0:	685b      	ldr	r3, [r3, #4]
 8002ca2:	099b      	lsrs	r3, r3, #6
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	623b      	str	r3, [r7, #32]
 8002ca8:	627a      	str	r2, [r7, #36]	; 0x24
 8002caa:	6a3b      	ldr	r3, [r7, #32]
 8002cac:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002cb0:	2100      	movs	r1, #0
 8002cb2:	4b47      	ldr	r3, [pc, #284]	; (8002dd0 <HAL_RCC_GetSysClockFreq+0x188>)
 8002cb4:	fb03 f201 	mul.w	r2, r3, r1
 8002cb8:	2300      	movs	r3, #0
 8002cba:	fb00 f303 	mul.w	r3, r0, r3
 8002cbe:	4413      	add	r3, r2
 8002cc0:	4a43      	ldr	r2, [pc, #268]	; (8002dd0 <HAL_RCC_GetSysClockFreq+0x188>)
 8002cc2:	fba0 1202 	umull	r1, r2, r0, r2
 8002cc6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002cc8:	460a      	mov	r2, r1
 8002cca:	62ba      	str	r2, [r7, #40]	; 0x28
 8002ccc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002cce:	4413      	add	r3, r2
 8002cd0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002cd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	61bb      	str	r3, [r7, #24]
 8002cd8:	61fa      	str	r2, [r7, #28]
 8002cda:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002cde:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002ce2:	f7fd fa71 	bl	80001c8 <__aeabi_uldivmod>
 8002ce6:	4602      	mov	r2, r0
 8002ce8:	460b      	mov	r3, r1
 8002cea:	4613      	mov	r3, r2
 8002cec:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002cee:	e053      	b.n	8002d98 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002cf0:	4b35      	ldr	r3, [pc, #212]	; (8002dc8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002cf2:	685b      	ldr	r3, [r3, #4]
 8002cf4:	099b      	lsrs	r3, r3, #6
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	613b      	str	r3, [r7, #16]
 8002cfa:	617a      	str	r2, [r7, #20]
 8002cfc:	693b      	ldr	r3, [r7, #16]
 8002cfe:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002d02:	f04f 0b00 	mov.w	fp, #0
 8002d06:	4652      	mov	r2, sl
 8002d08:	465b      	mov	r3, fp
 8002d0a:	f04f 0000 	mov.w	r0, #0
 8002d0e:	f04f 0100 	mov.w	r1, #0
 8002d12:	0159      	lsls	r1, r3, #5
 8002d14:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002d18:	0150      	lsls	r0, r2, #5
 8002d1a:	4602      	mov	r2, r0
 8002d1c:	460b      	mov	r3, r1
 8002d1e:	ebb2 080a 	subs.w	r8, r2, sl
 8002d22:	eb63 090b 	sbc.w	r9, r3, fp
 8002d26:	f04f 0200 	mov.w	r2, #0
 8002d2a:	f04f 0300 	mov.w	r3, #0
 8002d2e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002d32:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002d36:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002d3a:	ebb2 0408 	subs.w	r4, r2, r8
 8002d3e:	eb63 0509 	sbc.w	r5, r3, r9
 8002d42:	f04f 0200 	mov.w	r2, #0
 8002d46:	f04f 0300 	mov.w	r3, #0
 8002d4a:	00eb      	lsls	r3, r5, #3
 8002d4c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002d50:	00e2      	lsls	r2, r4, #3
 8002d52:	4614      	mov	r4, r2
 8002d54:	461d      	mov	r5, r3
 8002d56:	eb14 030a 	adds.w	r3, r4, sl
 8002d5a:	603b      	str	r3, [r7, #0]
 8002d5c:	eb45 030b 	adc.w	r3, r5, fp
 8002d60:	607b      	str	r3, [r7, #4]
 8002d62:	f04f 0200 	mov.w	r2, #0
 8002d66:	f04f 0300 	mov.w	r3, #0
 8002d6a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002d6e:	4629      	mov	r1, r5
 8002d70:	028b      	lsls	r3, r1, #10
 8002d72:	4621      	mov	r1, r4
 8002d74:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002d78:	4621      	mov	r1, r4
 8002d7a:	028a      	lsls	r2, r1, #10
 8002d7c:	4610      	mov	r0, r2
 8002d7e:	4619      	mov	r1, r3
 8002d80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d82:	2200      	movs	r2, #0
 8002d84:	60bb      	str	r3, [r7, #8]
 8002d86:	60fa      	str	r2, [r7, #12]
 8002d88:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002d8c:	f7fd fa1c 	bl	80001c8 <__aeabi_uldivmod>
 8002d90:	4602      	mov	r2, r0
 8002d92:	460b      	mov	r3, r1
 8002d94:	4613      	mov	r3, r2
 8002d96:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002d98:	4b0b      	ldr	r3, [pc, #44]	; (8002dc8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	0c1b      	lsrs	r3, r3, #16
 8002d9e:	f003 0303 	and.w	r3, r3, #3
 8002da2:	3301      	adds	r3, #1
 8002da4:	005b      	lsls	r3, r3, #1
 8002da6:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8002da8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002daa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dac:	fbb2 f3f3 	udiv	r3, r2, r3
 8002db0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002db2:	e002      	b.n	8002dba <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002db4:	4b05      	ldr	r3, [pc, #20]	; (8002dcc <HAL_RCC_GetSysClockFreq+0x184>)
 8002db6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002db8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002dba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	3740      	adds	r7, #64	; 0x40
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002dc6:	bf00      	nop
 8002dc8:	40023800 	.word	0x40023800
 8002dcc:	00f42400 	.word	0x00f42400
 8002dd0:	017d7840 	.word	0x017d7840

08002dd4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002dd4:	b480      	push	{r7}
 8002dd6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002dd8:	4b03      	ldr	r3, [pc, #12]	; (8002de8 <HAL_RCC_GetHCLKFreq+0x14>)
 8002dda:	681b      	ldr	r3, [r3, #0]
}
 8002ddc:	4618      	mov	r0, r3
 8002dde:	46bd      	mov	sp, r7
 8002de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de4:	4770      	bx	lr
 8002de6:	bf00      	nop
 8002de8:	20000000 	.word	0x20000000

08002dec <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b086      	sub	sp, #24
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
 8002df4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d101      	bne.n	8002e00 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8002dfc:	2301      	movs	r3, #1
 8002dfe:	e097      	b.n	8002f30 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e06:	b2db      	uxtb	r3, r3
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d106      	bne.n	8002e1a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2200      	movs	r2, #0
 8002e10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8002e14:	6878      	ldr	r0, [r7, #4]
 8002e16:	f7fd fd2d 	bl	8000874 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	2202      	movs	r2, #2
 8002e1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	689b      	ldr	r3, [r3, #8]
 8002e28:	687a      	ldr	r2, [r7, #4]
 8002e2a:	6812      	ldr	r2, [r2, #0]
 8002e2c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002e30:	f023 0307 	bic.w	r3, r3, #7
 8002e34:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681a      	ldr	r2, [r3, #0]
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	3304      	adds	r3, #4
 8002e3e:	4619      	mov	r1, r3
 8002e40:	4610      	mov	r0, r2
 8002e42:	f000 fa61 	bl	8003308 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	689b      	ldr	r3, [r3, #8]
 8002e4c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	699b      	ldr	r3, [r3, #24]
 8002e54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	6a1b      	ldr	r3, [r3, #32]
 8002e5c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	697a      	ldr	r2, [r7, #20]
 8002e64:	4313      	orrs	r3, r2
 8002e66:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8002e68:	693b      	ldr	r3, [r7, #16]
 8002e6a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e6e:	f023 0303 	bic.w	r3, r3, #3
 8002e72:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	689a      	ldr	r2, [r3, #8]
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	699b      	ldr	r3, [r3, #24]
 8002e7c:	021b      	lsls	r3, r3, #8
 8002e7e:	4313      	orrs	r3, r2
 8002e80:	693a      	ldr	r2, [r7, #16]
 8002e82:	4313      	orrs	r3, r2
 8002e84:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8002e86:	693b      	ldr	r3, [r7, #16]
 8002e88:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8002e8c:	f023 030c 	bic.w	r3, r3, #12
 8002e90:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8002e92:	693b      	ldr	r3, [r7, #16]
 8002e94:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002e98:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002e9c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	68da      	ldr	r2, [r3, #12]
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	69db      	ldr	r3, [r3, #28]
 8002ea6:	021b      	lsls	r3, r3, #8
 8002ea8:	4313      	orrs	r3, r2
 8002eaa:	693a      	ldr	r2, [r7, #16]
 8002eac:	4313      	orrs	r3, r2
 8002eae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	691b      	ldr	r3, [r3, #16]
 8002eb4:	011a      	lsls	r2, r3, #4
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	6a1b      	ldr	r3, [r3, #32]
 8002eba:	031b      	lsls	r3, r3, #12
 8002ebc:	4313      	orrs	r3, r2
 8002ebe:	693a      	ldr	r2, [r7, #16]
 8002ec0:	4313      	orrs	r3, r2
 8002ec2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8002eca:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8002ed2:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	685a      	ldr	r2, [r3, #4]
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	695b      	ldr	r3, [r3, #20]
 8002edc:	011b      	lsls	r3, r3, #4
 8002ede:	4313      	orrs	r3, r2
 8002ee0:	68fa      	ldr	r2, [r7, #12]
 8002ee2:	4313      	orrs	r3, r2
 8002ee4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	697a      	ldr	r2, [r7, #20]
 8002eec:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	693a      	ldr	r2, [r7, #16]
 8002ef4:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	68fa      	ldr	r2, [r7, #12]
 8002efc:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	2201      	movs	r2, #1
 8002f02:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	2201      	movs	r2, #1
 8002f0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	2201      	movs	r2, #1
 8002f12:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	2201      	movs	r2, #1
 8002f1a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	2201      	movs	r2, #1
 8002f22:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	2201      	movs	r2, #1
 8002f2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002f2e:	2300      	movs	r3, #0
}
 8002f30:	4618      	mov	r0, r3
 8002f32:	3718      	adds	r7, #24
 8002f34:	46bd      	mov	sp, r7
 8002f36:	bd80      	pop	{r7, pc}

08002f38 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b084      	sub	sp, #16
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
 8002f40:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002f48:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002f50:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002f58:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002f60:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d110      	bne.n	8002f8a <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002f68:	7bfb      	ldrb	r3, [r7, #15]
 8002f6a:	2b01      	cmp	r3, #1
 8002f6c:	d102      	bne.n	8002f74 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8002f6e:	7b7b      	ldrb	r3, [r7, #13]
 8002f70:	2b01      	cmp	r3, #1
 8002f72:	d001      	beq.n	8002f78 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 8002f74:	2301      	movs	r3, #1
 8002f76:	e089      	b.n	800308c <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2202      	movs	r2, #2
 8002f7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2202      	movs	r2, #2
 8002f84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002f88:	e031      	b.n	8002fee <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	2b04      	cmp	r3, #4
 8002f8e:	d110      	bne.n	8002fb2 <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8002f90:	7bbb      	ldrb	r3, [r7, #14]
 8002f92:	2b01      	cmp	r3, #1
 8002f94:	d102      	bne.n	8002f9c <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8002f96:	7b3b      	ldrb	r3, [r7, #12]
 8002f98:	2b01      	cmp	r3, #1
 8002f9a:	d001      	beq.n	8002fa0 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 8002f9c:	2301      	movs	r3, #1
 8002f9e:	e075      	b.n	800308c <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2202      	movs	r2, #2
 8002fa4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2202      	movs	r2, #2
 8002fac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002fb0:	e01d      	b.n	8002fee <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002fb2:	7bfb      	ldrb	r3, [r7, #15]
 8002fb4:	2b01      	cmp	r3, #1
 8002fb6:	d108      	bne.n	8002fca <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8002fb8:	7bbb      	ldrb	r3, [r7, #14]
 8002fba:	2b01      	cmp	r3, #1
 8002fbc:	d105      	bne.n	8002fca <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002fbe:	7b7b      	ldrb	r3, [r7, #13]
 8002fc0:	2b01      	cmp	r3, #1
 8002fc2:	d102      	bne.n	8002fca <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8002fc4:	7b3b      	ldrb	r3, [r7, #12]
 8002fc6:	2b01      	cmp	r3, #1
 8002fc8:	d001      	beq.n	8002fce <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 8002fca:	2301      	movs	r3, #1
 8002fcc:	e05e      	b.n	800308c <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2202      	movs	r2, #2
 8002fd2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	2202      	movs	r2, #2
 8002fda:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	2202      	movs	r2, #2
 8002fe2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	2202      	movs	r2, #2
 8002fea:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d003      	beq.n	8002ffc <HAL_TIM_Encoder_Start_IT+0xc4>
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	2b04      	cmp	r3, #4
 8002ff8:	d010      	beq.n	800301c <HAL_TIM_Encoder_Start_IT+0xe4>
 8002ffa:	e01f      	b.n	800303c <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	2201      	movs	r2, #1
 8003002:	2100      	movs	r1, #0
 8003004:	4618      	mov	r0, r3
 8003006:	f000 fa1f 	bl	8003448 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	68da      	ldr	r2, [r3, #12]
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f042 0202 	orr.w	r2, r2, #2
 8003018:	60da      	str	r2, [r3, #12]
      break;
 800301a:	e02e      	b.n	800307a <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	2201      	movs	r2, #1
 8003022:	2104      	movs	r1, #4
 8003024:	4618      	mov	r0, r3
 8003026:	f000 fa0f 	bl	8003448 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	68da      	ldr	r2, [r3, #12]
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f042 0204 	orr.w	r2, r2, #4
 8003038:	60da      	str	r2, [r3, #12]
      break;
 800303a:	e01e      	b.n	800307a <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	2201      	movs	r2, #1
 8003042:	2100      	movs	r1, #0
 8003044:	4618      	mov	r0, r3
 8003046:	f000 f9ff 	bl	8003448 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	2201      	movs	r2, #1
 8003050:	2104      	movs	r1, #4
 8003052:	4618      	mov	r0, r3
 8003054:	f000 f9f8 	bl	8003448 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	68da      	ldr	r2, [r3, #12]
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f042 0202 	orr.w	r2, r2, #2
 8003066:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	68da      	ldr	r2, [r3, #12]
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f042 0204 	orr.w	r2, r2, #4
 8003076:	60da      	str	r2, [r3, #12]
      break;
 8003078:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	681a      	ldr	r2, [r3, #0]
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f042 0201 	orr.w	r2, r2, #1
 8003088:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800308a:	2300      	movs	r3, #0
}
 800308c:	4618      	mov	r0, r3
 800308e:	3710      	adds	r7, #16
 8003090:	46bd      	mov	sp, r7
 8003092:	bd80      	pop	{r7, pc}

08003094 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	b082      	sub	sp, #8
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	691b      	ldr	r3, [r3, #16]
 80030a2:	f003 0302 	and.w	r3, r3, #2
 80030a6:	2b02      	cmp	r3, #2
 80030a8:	d122      	bne.n	80030f0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	68db      	ldr	r3, [r3, #12]
 80030b0:	f003 0302 	and.w	r3, r3, #2
 80030b4:	2b02      	cmp	r3, #2
 80030b6:	d11b      	bne.n	80030f0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f06f 0202 	mvn.w	r2, #2
 80030c0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2201      	movs	r2, #1
 80030c6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	699b      	ldr	r3, [r3, #24]
 80030ce:	f003 0303 	and.w	r3, r3, #3
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d003      	beq.n	80030de <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80030d6:	6878      	ldr	r0, [r7, #4]
 80030d8:	f000 f8f8 	bl	80032cc <HAL_TIM_IC_CaptureCallback>
 80030dc:	e005      	b.n	80030ea <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80030de:	6878      	ldr	r0, [r7, #4]
 80030e0:	f000 f8ea 	bl	80032b8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030e4:	6878      	ldr	r0, [r7, #4]
 80030e6:	f000 f8fb 	bl	80032e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	2200      	movs	r2, #0
 80030ee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	691b      	ldr	r3, [r3, #16]
 80030f6:	f003 0304 	and.w	r3, r3, #4
 80030fa:	2b04      	cmp	r3, #4
 80030fc:	d122      	bne.n	8003144 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	68db      	ldr	r3, [r3, #12]
 8003104:	f003 0304 	and.w	r3, r3, #4
 8003108:	2b04      	cmp	r3, #4
 800310a:	d11b      	bne.n	8003144 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f06f 0204 	mvn.w	r2, #4
 8003114:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	2202      	movs	r2, #2
 800311a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	699b      	ldr	r3, [r3, #24]
 8003122:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003126:	2b00      	cmp	r3, #0
 8003128:	d003      	beq.n	8003132 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800312a:	6878      	ldr	r0, [r7, #4]
 800312c:	f000 f8ce 	bl	80032cc <HAL_TIM_IC_CaptureCallback>
 8003130:	e005      	b.n	800313e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003132:	6878      	ldr	r0, [r7, #4]
 8003134:	f000 f8c0 	bl	80032b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003138:	6878      	ldr	r0, [r7, #4]
 800313a:	f000 f8d1 	bl	80032e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	2200      	movs	r2, #0
 8003142:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	691b      	ldr	r3, [r3, #16]
 800314a:	f003 0308 	and.w	r3, r3, #8
 800314e:	2b08      	cmp	r3, #8
 8003150:	d122      	bne.n	8003198 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	68db      	ldr	r3, [r3, #12]
 8003158:	f003 0308 	and.w	r3, r3, #8
 800315c:	2b08      	cmp	r3, #8
 800315e:	d11b      	bne.n	8003198 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f06f 0208 	mvn.w	r2, #8
 8003168:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	2204      	movs	r2, #4
 800316e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	69db      	ldr	r3, [r3, #28]
 8003176:	f003 0303 	and.w	r3, r3, #3
 800317a:	2b00      	cmp	r3, #0
 800317c:	d003      	beq.n	8003186 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800317e:	6878      	ldr	r0, [r7, #4]
 8003180:	f000 f8a4 	bl	80032cc <HAL_TIM_IC_CaptureCallback>
 8003184:	e005      	b.n	8003192 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003186:	6878      	ldr	r0, [r7, #4]
 8003188:	f000 f896 	bl	80032b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800318c:	6878      	ldr	r0, [r7, #4]
 800318e:	f000 f8a7 	bl	80032e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	2200      	movs	r2, #0
 8003196:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	691b      	ldr	r3, [r3, #16]
 800319e:	f003 0310 	and.w	r3, r3, #16
 80031a2:	2b10      	cmp	r3, #16
 80031a4:	d122      	bne.n	80031ec <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	68db      	ldr	r3, [r3, #12]
 80031ac:	f003 0310 	and.w	r3, r3, #16
 80031b0:	2b10      	cmp	r3, #16
 80031b2:	d11b      	bne.n	80031ec <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f06f 0210 	mvn.w	r2, #16
 80031bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2208      	movs	r2, #8
 80031c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	69db      	ldr	r3, [r3, #28]
 80031ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d003      	beq.n	80031da <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80031d2:	6878      	ldr	r0, [r7, #4]
 80031d4:	f000 f87a 	bl	80032cc <HAL_TIM_IC_CaptureCallback>
 80031d8:	e005      	b.n	80031e6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80031da:	6878      	ldr	r0, [r7, #4]
 80031dc:	f000 f86c 	bl	80032b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031e0:	6878      	ldr	r0, [r7, #4]
 80031e2:	f000 f87d 	bl	80032e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	2200      	movs	r2, #0
 80031ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	691b      	ldr	r3, [r3, #16]
 80031f2:	f003 0301 	and.w	r3, r3, #1
 80031f6:	2b01      	cmp	r3, #1
 80031f8:	d10e      	bne.n	8003218 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	68db      	ldr	r3, [r3, #12]
 8003200:	f003 0301 	and.w	r3, r3, #1
 8003204:	2b01      	cmp	r3, #1
 8003206:	d107      	bne.n	8003218 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f06f 0201 	mvn.w	r2, #1
 8003210:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003212:	6878      	ldr	r0, [r7, #4]
 8003214:	f000 f846 	bl	80032a4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	691b      	ldr	r3, [r3, #16]
 800321e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003222:	2b80      	cmp	r3, #128	; 0x80
 8003224:	d10e      	bne.n	8003244 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	68db      	ldr	r3, [r3, #12]
 800322c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003230:	2b80      	cmp	r3, #128	; 0x80
 8003232:	d107      	bne.n	8003244 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800323c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800323e:	6878      	ldr	r0, [r7, #4]
 8003240:	f000 f9ae 	bl	80035a0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	691b      	ldr	r3, [r3, #16]
 800324a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800324e:	2b40      	cmp	r3, #64	; 0x40
 8003250:	d10e      	bne.n	8003270 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	68db      	ldr	r3, [r3, #12]
 8003258:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800325c:	2b40      	cmp	r3, #64	; 0x40
 800325e:	d107      	bne.n	8003270 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003268:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800326a:	6878      	ldr	r0, [r7, #4]
 800326c:	f000 f842 	bl	80032f4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	691b      	ldr	r3, [r3, #16]
 8003276:	f003 0320 	and.w	r3, r3, #32
 800327a:	2b20      	cmp	r3, #32
 800327c:	d10e      	bne.n	800329c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	68db      	ldr	r3, [r3, #12]
 8003284:	f003 0320 	and.w	r3, r3, #32
 8003288:	2b20      	cmp	r3, #32
 800328a:	d107      	bne.n	800329c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f06f 0220 	mvn.w	r2, #32
 8003294:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003296:	6878      	ldr	r0, [r7, #4]
 8003298:	f000 f978 	bl	800358c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800329c:	bf00      	nop
 800329e:	3708      	adds	r7, #8
 80032a0:	46bd      	mov	sp, r7
 80032a2:	bd80      	pop	{r7, pc}

080032a4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80032a4:	b480      	push	{r7}
 80032a6:	b083      	sub	sp, #12
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80032ac:	bf00      	nop
 80032ae:	370c      	adds	r7, #12
 80032b0:	46bd      	mov	sp, r7
 80032b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b6:	4770      	bx	lr

080032b8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80032b8:	b480      	push	{r7}
 80032ba:	b083      	sub	sp, #12
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80032c0:	bf00      	nop
 80032c2:	370c      	adds	r7, #12
 80032c4:	46bd      	mov	sp, r7
 80032c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ca:	4770      	bx	lr

080032cc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80032cc:	b480      	push	{r7}
 80032ce:	b083      	sub	sp, #12
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80032d4:	bf00      	nop
 80032d6:	370c      	adds	r7, #12
 80032d8:	46bd      	mov	sp, r7
 80032da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032de:	4770      	bx	lr

080032e0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80032e0:	b480      	push	{r7}
 80032e2:	b083      	sub	sp, #12
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80032e8:	bf00      	nop
 80032ea:	370c      	adds	r7, #12
 80032ec:	46bd      	mov	sp, r7
 80032ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f2:	4770      	bx	lr

080032f4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80032f4:	b480      	push	{r7}
 80032f6:	b083      	sub	sp, #12
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80032fc:	bf00      	nop
 80032fe:	370c      	adds	r7, #12
 8003300:	46bd      	mov	sp, r7
 8003302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003306:	4770      	bx	lr

08003308 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003308:	b480      	push	{r7}
 800330a:	b085      	sub	sp, #20
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
 8003310:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	4a40      	ldr	r2, [pc, #256]	; (800341c <TIM_Base_SetConfig+0x114>)
 800331c:	4293      	cmp	r3, r2
 800331e:	d013      	beq.n	8003348 <TIM_Base_SetConfig+0x40>
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003326:	d00f      	beq.n	8003348 <TIM_Base_SetConfig+0x40>
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	4a3d      	ldr	r2, [pc, #244]	; (8003420 <TIM_Base_SetConfig+0x118>)
 800332c:	4293      	cmp	r3, r2
 800332e:	d00b      	beq.n	8003348 <TIM_Base_SetConfig+0x40>
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	4a3c      	ldr	r2, [pc, #240]	; (8003424 <TIM_Base_SetConfig+0x11c>)
 8003334:	4293      	cmp	r3, r2
 8003336:	d007      	beq.n	8003348 <TIM_Base_SetConfig+0x40>
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	4a3b      	ldr	r2, [pc, #236]	; (8003428 <TIM_Base_SetConfig+0x120>)
 800333c:	4293      	cmp	r3, r2
 800333e:	d003      	beq.n	8003348 <TIM_Base_SetConfig+0x40>
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	4a3a      	ldr	r2, [pc, #232]	; (800342c <TIM_Base_SetConfig+0x124>)
 8003344:	4293      	cmp	r3, r2
 8003346:	d108      	bne.n	800335a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800334e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	685b      	ldr	r3, [r3, #4]
 8003354:	68fa      	ldr	r2, [r7, #12]
 8003356:	4313      	orrs	r3, r2
 8003358:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	4a2f      	ldr	r2, [pc, #188]	; (800341c <TIM_Base_SetConfig+0x114>)
 800335e:	4293      	cmp	r3, r2
 8003360:	d02b      	beq.n	80033ba <TIM_Base_SetConfig+0xb2>
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003368:	d027      	beq.n	80033ba <TIM_Base_SetConfig+0xb2>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	4a2c      	ldr	r2, [pc, #176]	; (8003420 <TIM_Base_SetConfig+0x118>)
 800336e:	4293      	cmp	r3, r2
 8003370:	d023      	beq.n	80033ba <TIM_Base_SetConfig+0xb2>
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	4a2b      	ldr	r2, [pc, #172]	; (8003424 <TIM_Base_SetConfig+0x11c>)
 8003376:	4293      	cmp	r3, r2
 8003378:	d01f      	beq.n	80033ba <TIM_Base_SetConfig+0xb2>
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	4a2a      	ldr	r2, [pc, #168]	; (8003428 <TIM_Base_SetConfig+0x120>)
 800337e:	4293      	cmp	r3, r2
 8003380:	d01b      	beq.n	80033ba <TIM_Base_SetConfig+0xb2>
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	4a29      	ldr	r2, [pc, #164]	; (800342c <TIM_Base_SetConfig+0x124>)
 8003386:	4293      	cmp	r3, r2
 8003388:	d017      	beq.n	80033ba <TIM_Base_SetConfig+0xb2>
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	4a28      	ldr	r2, [pc, #160]	; (8003430 <TIM_Base_SetConfig+0x128>)
 800338e:	4293      	cmp	r3, r2
 8003390:	d013      	beq.n	80033ba <TIM_Base_SetConfig+0xb2>
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	4a27      	ldr	r2, [pc, #156]	; (8003434 <TIM_Base_SetConfig+0x12c>)
 8003396:	4293      	cmp	r3, r2
 8003398:	d00f      	beq.n	80033ba <TIM_Base_SetConfig+0xb2>
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	4a26      	ldr	r2, [pc, #152]	; (8003438 <TIM_Base_SetConfig+0x130>)
 800339e:	4293      	cmp	r3, r2
 80033a0:	d00b      	beq.n	80033ba <TIM_Base_SetConfig+0xb2>
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	4a25      	ldr	r2, [pc, #148]	; (800343c <TIM_Base_SetConfig+0x134>)
 80033a6:	4293      	cmp	r3, r2
 80033a8:	d007      	beq.n	80033ba <TIM_Base_SetConfig+0xb2>
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	4a24      	ldr	r2, [pc, #144]	; (8003440 <TIM_Base_SetConfig+0x138>)
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d003      	beq.n	80033ba <TIM_Base_SetConfig+0xb2>
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	4a23      	ldr	r2, [pc, #140]	; (8003444 <TIM_Base_SetConfig+0x13c>)
 80033b6:	4293      	cmp	r3, r2
 80033b8:	d108      	bne.n	80033cc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80033c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	68db      	ldr	r3, [r3, #12]
 80033c6:	68fa      	ldr	r2, [r7, #12]
 80033c8:	4313      	orrs	r3, r2
 80033ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	695b      	ldr	r3, [r3, #20]
 80033d6:	4313      	orrs	r3, r2
 80033d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	68fa      	ldr	r2, [r7, #12]
 80033de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	689a      	ldr	r2, [r3, #8]
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	681a      	ldr	r2, [r3, #0]
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	4a0a      	ldr	r2, [pc, #40]	; (800341c <TIM_Base_SetConfig+0x114>)
 80033f4:	4293      	cmp	r3, r2
 80033f6:	d003      	beq.n	8003400 <TIM_Base_SetConfig+0xf8>
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	4a0c      	ldr	r2, [pc, #48]	; (800342c <TIM_Base_SetConfig+0x124>)
 80033fc:	4293      	cmp	r3, r2
 80033fe:	d103      	bne.n	8003408 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	691a      	ldr	r2, [r3, #16]
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2201      	movs	r2, #1
 800340c:	615a      	str	r2, [r3, #20]
}
 800340e:	bf00      	nop
 8003410:	3714      	adds	r7, #20
 8003412:	46bd      	mov	sp, r7
 8003414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003418:	4770      	bx	lr
 800341a:	bf00      	nop
 800341c:	40010000 	.word	0x40010000
 8003420:	40000400 	.word	0x40000400
 8003424:	40000800 	.word	0x40000800
 8003428:	40000c00 	.word	0x40000c00
 800342c:	40010400 	.word	0x40010400
 8003430:	40014000 	.word	0x40014000
 8003434:	40014400 	.word	0x40014400
 8003438:	40014800 	.word	0x40014800
 800343c:	40001800 	.word	0x40001800
 8003440:	40001c00 	.word	0x40001c00
 8003444:	40002000 	.word	0x40002000

08003448 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003448:	b480      	push	{r7}
 800344a:	b087      	sub	sp, #28
 800344c:	af00      	add	r7, sp, #0
 800344e:	60f8      	str	r0, [r7, #12]
 8003450:	60b9      	str	r1, [r7, #8]
 8003452:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003454:	68bb      	ldr	r3, [r7, #8]
 8003456:	f003 031f 	and.w	r3, r3, #31
 800345a:	2201      	movs	r2, #1
 800345c:	fa02 f303 	lsl.w	r3, r2, r3
 8003460:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	6a1a      	ldr	r2, [r3, #32]
 8003466:	697b      	ldr	r3, [r7, #20]
 8003468:	43db      	mvns	r3, r3
 800346a:	401a      	ands	r2, r3
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	6a1a      	ldr	r2, [r3, #32]
 8003474:	68bb      	ldr	r3, [r7, #8]
 8003476:	f003 031f 	and.w	r3, r3, #31
 800347a:	6879      	ldr	r1, [r7, #4]
 800347c:	fa01 f303 	lsl.w	r3, r1, r3
 8003480:	431a      	orrs	r2, r3
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	621a      	str	r2, [r3, #32]
}
 8003486:	bf00      	nop
 8003488:	371c      	adds	r7, #28
 800348a:	46bd      	mov	sp, r7
 800348c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003490:	4770      	bx	lr
	...

08003494 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003494:	b480      	push	{r7}
 8003496:	b085      	sub	sp, #20
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
 800349c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80034a4:	2b01      	cmp	r3, #1
 80034a6:	d101      	bne.n	80034ac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80034a8:	2302      	movs	r3, #2
 80034aa:	e05a      	b.n	8003562 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2201      	movs	r2, #1
 80034b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2202      	movs	r2, #2
 80034b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	685b      	ldr	r3, [r3, #4]
 80034c2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	689b      	ldr	r3, [r3, #8]
 80034ca:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034d2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	68fa      	ldr	r2, [r7, #12]
 80034da:	4313      	orrs	r3, r2
 80034dc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	68fa      	ldr	r2, [r7, #12]
 80034e4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	4a21      	ldr	r2, [pc, #132]	; (8003570 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80034ec:	4293      	cmp	r3, r2
 80034ee:	d022      	beq.n	8003536 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034f8:	d01d      	beq.n	8003536 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	4a1d      	ldr	r2, [pc, #116]	; (8003574 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003500:	4293      	cmp	r3, r2
 8003502:	d018      	beq.n	8003536 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	4a1b      	ldr	r2, [pc, #108]	; (8003578 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800350a:	4293      	cmp	r3, r2
 800350c:	d013      	beq.n	8003536 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	4a1a      	ldr	r2, [pc, #104]	; (800357c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003514:	4293      	cmp	r3, r2
 8003516:	d00e      	beq.n	8003536 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	4a18      	ldr	r2, [pc, #96]	; (8003580 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800351e:	4293      	cmp	r3, r2
 8003520:	d009      	beq.n	8003536 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	4a17      	ldr	r2, [pc, #92]	; (8003584 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003528:	4293      	cmp	r3, r2
 800352a:	d004      	beq.n	8003536 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	4a15      	ldr	r2, [pc, #84]	; (8003588 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003532:	4293      	cmp	r3, r2
 8003534:	d10c      	bne.n	8003550 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003536:	68bb      	ldr	r3, [r7, #8]
 8003538:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800353c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	685b      	ldr	r3, [r3, #4]
 8003542:	68ba      	ldr	r2, [r7, #8]
 8003544:	4313      	orrs	r3, r2
 8003546:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	68ba      	ldr	r2, [r7, #8]
 800354e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2201      	movs	r2, #1
 8003554:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2200      	movs	r2, #0
 800355c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003560:	2300      	movs	r3, #0
}
 8003562:	4618      	mov	r0, r3
 8003564:	3714      	adds	r7, #20
 8003566:	46bd      	mov	sp, r7
 8003568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356c:	4770      	bx	lr
 800356e:	bf00      	nop
 8003570:	40010000 	.word	0x40010000
 8003574:	40000400 	.word	0x40000400
 8003578:	40000800 	.word	0x40000800
 800357c:	40000c00 	.word	0x40000c00
 8003580:	40010400 	.word	0x40010400
 8003584:	40014000 	.word	0x40014000
 8003588:	40001800 	.word	0x40001800

0800358c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800358c:	b480      	push	{r7}
 800358e:	b083      	sub	sp, #12
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003594:	bf00      	nop
 8003596:	370c      	adds	r7, #12
 8003598:	46bd      	mov	sp, r7
 800359a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359e:	4770      	bx	lr

080035a0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80035a0:	b480      	push	{r7}
 80035a2:	b083      	sub	sp, #12
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80035a8:	bf00      	nop
 80035aa:	370c      	adds	r7, #12
 80035ac:	46bd      	mov	sp, r7
 80035ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b2:	4770      	bx	lr

080035b4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80035b4:	b084      	sub	sp, #16
 80035b6:	b580      	push	{r7, lr}
 80035b8:	b084      	sub	sp, #16
 80035ba:	af00      	add	r7, sp, #0
 80035bc:	6078      	str	r0, [r7, #4]
 80035be:	f107 001c 	add.w	r0, r7, #28
 80035c2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80035c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035c8:	2b01      	cmp	r3, #1
 80035ca:	d122      	bne.n	8003612 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035d0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	68db      	ldr	r3, [r3, #12]
 80035dc:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80035e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80035e4:	687a      	ldr	r2, [r7, #4]
 80035e6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	68db      	ldr	r3, [r3, #12]
 80035ec:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80035f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80035f6:	2b01      	cmp	r3, #1
 80035f8:	d105      	bne.n	8003606 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	68db      	ldr	r3, [r3, #12]
 80035fe:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003606:	6878      	ldr	r0, [r7, #4]
 8003608:	f001 fbee 	bl	8004de8 <USB_CoreReset>
 800360c:	4603      	mov	r3, r0
 800360e:	73fb      	strb	r3, [r7, #15]
 8003610:	e01a      	b.n	8003648 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	68db      	ldr	r3, [r3, #12]
 8003616:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800361e:	6878      	ldr	r0, [r7, #4]
 8003620:	f001 fbe2 	bl	8004de8 <USB_CoreReset>
 8003624:	4603      	mov	r3, r0
 8003626:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003628:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800362a:	2b00      	cmp	r3, #0
 800362c:	d106      	bne.n	800363c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003632:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	639a      	str	r2, [r3, #56]	; 0x38
 800363a:	e005      	b.n	8003648 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003640:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003648:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800364a:	2b01      	cmp	r3, #1
 800364c:	d10b      	bne.n	8003666 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	689b      	ldr	r3, [r3, #8]
 8003652:	f043 0206 	orr.w	r2, r3, #6
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	689b      	ldr	r3, [r3, #8]
 800365e:	f043 0220 	orr.w	r2, r3, #32
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003666:	7bfb      	ldrb	r3, [r7, #15]
}
 8003668:	4618      	mov	r0, r3
 800366a:	3710      	adds	r7, #16
 800366c:	46bd      	mov	sp, r7
 800366e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003672:	b004      	add	sp, #16
 8003674:	4770      	bx	lr
	...

08003678 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8003678:	b480      	push	{r7}
 800367a:	b087      	sub	sp, #28
 800367c:	af00      	add	r7, sp, #0
 800367e:	60f8      	str	r0, [r7, #12]
 8003680:	60b9      	str	r1, [r7, #8]
 8003682:	4613      	mov	r3, r2
 8003684:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8003686:	79fb      	ldrb	r3, [r7, #7]
 8003688:	2b02      	cmp	r3, #2
 800368a:	d165      	bne.n	8003758 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800368c:	68bb      	ldr	r3, [r7, #8]
 800368e:	4a41      	ldr	r2, [pc, #260]	; (8003794 <USB_SetTurnaroundTime+0x11c>)
 8003690:	4293      	cmp	r3, r2
 8003692:	d906      	bls.n	80036a2 <USB_SetTurnaroundTime+0x2a>
 8003694:	68bb      	ldr	r3, [r7, #8]
 8003696:	4a40      	ldr	r2, [pc, #256]	; (8003798 <USB_SetTurnaroundTime+0x120>)
 8003698:	4293      	cmp	r3, r2
 800369a:	d202      	bcs.n	80036a2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800369c:	230f      	movs	r3, #15
 800369e:	617b      	str	r3, [r7, #20]
 80036a0:	e062      	b.n	8003768 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80036a2:	68bb      	ldr	r3, [r7, #8]
 80036a4:	4a3c      	ldr	r2, [pc, #240]	; (8003798 <USB_SetTurnaroundTime+0x120>)
 80036a6:	4293      	cmp	r3, r2
 80036a8:	d306      	bcc.n	80036b8 <USB_SetTurnaroundTime+0x40>
 80036aa:	68bb      	ldr	r3, [r7, #8]
 80036ac:	4a3b      	ldr	r2, [pc, #236]	; (800379c <USB_SetTurnaroundTime+0x124>)
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d202      	bcs.n	80036b8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80036b2:	230e      	movs	r3, #14
 80036b4:	617b      	str	r3, [r7, #20]
 80036b6:	e057      	b.n	8003768 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80036b8:	68bb      	ldr	r3, [r7, #8]
 80036ba:	4a38      	ldr	r2, [pc, #224]	; (800379c <USB_SetTurnaroundTime+0x124>)
 80036bc:	4293      	cmp	r3, r2
 80036be:	d306      	bcc.n	80036ce <USB_SetTurnaroundTime+0x56>
 80036c0:	68bb      	ldr	r3, [r7, #8]
 80036c2:	4a37      	ldr	r2, [pc, #220]	; (80037a0 <USB_SetTurnaroundTime+0x128>)
 80036c4:	4293      	cmp	r3, r2
 80036c6:	d202      	bcs.n	80036ce <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80036c8:	230d      	movs	r3, #13
 80036ca:	617b      	str	r3, [r7, #20]
 80036cc:	e04c      	b.n	8003768 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80036ce:	68bb      	ldr	r3, [r7, #8]
 80036d0:	4a33      	ldr	r2, [pc, #204]	; (80037a0 <USB_SetTurnaroundTime+0x128>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d306      	bcc.n	80036e4 <USB_SetTurnaroundTime+0x6c>
 80036d6:	68bb      	ldr	r3, [r7, #8]
 80036d8:	4a32      	ldr	r2, [pc, #200]	; (80037a4 <USB_SetTurnaroundTime+0x12c>)
 80036da:	4293      	cmp	r3, r2
 80036dc:	d802      	bhi.n	80036e4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80036de:	230c      	movs	r3, #12
 80036e0:	617b      	str	r3, [r7, #20]
 80036e2:	e041      	b.n	8003768 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80036e4:	68bb      	ldr	r3, [r7, #8]
 80036e6:	4a2f      	ldr	r2, [pc, #188]	; (80037a4 <USB_SetTurnaroundTime+0x12c>)
 80036e8:	4293      	cmp	r3, r2
 80036ea:	d906      	bls.n	80036fa <USB_SetTurnaroundTime+0x82>
 80036ec:	68bb      	ldr	r3, [r7, #8]
 80036ee:	4a2e      	ldr	r2, [pc, #184]	; (80037a8 <USB_SetTurnaroundTime+0x130>)
 80036f0:	4293      	cmp	r3, r2
 80036f2:	d802      	bhi.n	80036fa <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80036f4:	230b      	movs	r3, #11
 80036f6:	617b      	str	r3, [r7, #20]
 80036f8:	e036      	b.n	8003768 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80036fa:	68bb      	ldr	r3, [r7, #8]
 80036fc:	4a2a      	ldr	r2, [pc, #168]	; (80037a8 <USB_SetTurnaroundTime+0x130>)
 80036fe:	4293      	cmp	r3, r2
 8003700:	d906      	bls.n	8003710 <USB_SetTurnaroundTime+0x98>
 8003702:	68bb      	ldr	r3, [r7, #8]
 8003704:	4a29      	ldr	r2, [pc, #164]	; (80037ac <USB_SetTurnaroundTime+0x134>)
 8003706:	4293      	cmp	r3, r2
 8003708:	d802      	bhi.n	8003710 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800370a:	230a      	movs	r3, #10
 800370c:	617b      	str	r3, [r7, #20]
 800370e:	e02b      	b.n	8003768 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8003710:	68bb      	ldr	r3, [r7, #8]
 8003712:	4a26      	ldr	r2, [pc, #152]	; (80037ac <USB_SetTurnaroundTime+0x134>)
 8003714:	4293      	cmp	r3, r2
 8003716:	d906      	bls.n	8003726 <USB_SetTurnaroundTime+0xae>
 8003718:	68bb      	ldr	r3, [r7, #8]
 800371a:	4a25      	ldr	r2, [pc, #148]	; (80037b0 <USB_SetTurnaroundTime+0x138>)
 800371c:	4293      	cmp	r3, r2
 800371e:	d202      	bcs.n	8003726 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8003720:	2309      	movs	r3, #9
 8003722:	617b      	str	r3, [r7, #20]
 8003724:	e020      	b.n	8003768 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8003726:	68bb      	ldr	r3, [r7, #8]
 8003728:	4a21      	ldr	r2, [pc, #132]	; (80037b0 <USB_SetTurnaroundTime+0x138>)
 800372a:	4293      	cmp	r3, r2
 800372c:	d306      	bcc.n	800373c <USB_SetTurnaroundTime+0xc4>
 800372e:	68bb      	ldr	r3, [r7, #8]
 8003730:	4a20      	ldr	r2, [pc, #128]	; (80037b4 <USB_SetTurnaroundTime+0x13c>)
 8003732:	4293      	cmp	r3, r2
 8003734:	d802      	bhi.n	800373c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8003736:	2308      	movs	r3, #8
 8003738:	617b      	str	r3, [r7, #20]
 800373a:	e015      	b.n	8003768 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800373c:	68bb      	ldr	r3, [r7, #8]
 800373e:	4a1d      	ldr	r2, [pc, #116]	; (80037b4 <USB_SetTurnaroundTime+0x13c>)
 8003740:	4293      	cmp	r3, r2
 8003742:	d906      	bls.n	8003752 <USB_SetTurnaroundTime+0xda>
 8003744:	68bb      	ldr	r3, [r7, #8]
 8003746:	4a1c      	ldr	r2, [pc, #112]	; (80037b8 <USB_SetTurnaroundTime+0x140>)
 8003748:	4293      	cmp	r3, r2
 800374a:	d202      	bcs.n	8003752 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800374c:	2307      	movs	r3, #7
 800374e:	617b      	str	r3, [r7, #20]
 8003750:	e00a      	b.n	8003768 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8003752:	2306      	movs	r3, #6
 8003754:	617b      	str	r3, [r7, #20]
 8003756:	e007      	b.n	8003768 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8003758:	79fb      	ldrb	r3, [r7, #7]
 800375a:	2b00      	cmp	r3, #0
 800375c:	d102      	bne.n	8003764 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800375e:	2309      	movs	r3, #9
 8003760:	617b      	str	r3, [r7, #20]
 8003762:	e001      	b.n	8003768 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8003764:	2309      	movs	r3, #9
 8003766:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	68db      	ldr	r3, [r3, #12]
 800376c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	68da      	ldr	r2, [r3, #12]
 8003778:	697b      	ldr	r3, [r7, #20]
 800377a:	029b      	lsls	r3, r3, #10
 800377c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8003780:	431a      	orrs	r2, r3
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003786:	2300      	movs	r3, #0
}
 8003788:	4618      	mov	r0, r3
 800378a:	371c      	adds	r7, #28
 800378c:	46bd      	mov	sp, r7
 800378e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003792:	4770      	bx	lr
 8003794:	00d8acbf 	.word	0x00d8acbf
 8003798:	00e4e1c0 	.word	0x00e4e1c0
 800379c:	00f42400 	.word	0x00f42400
 80037a0:	01067380 	.word	0x01067380
 80037a4:	011a499f 	.word	0x011a499f
 80037a8:	01312cff 	.word	0x01312cff
 80037ac:	014ca43f 	.word	0x014ca43f
 80037b0:	016e3600 	.word	0x016e3600
 80037b4:	01a6ab1f 	.word	0x01a6ab1f
 80037b8:	01e84800 	.word	0x01e84800

080037bc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80037bc:	b480      	push	{r7}
 80037be:	b083      	sub	sp, #12
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	689b      	ldr	r3, [r3, #8]
 80037c8:	f043 0201 	orr.w	r2, r3, #1
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80037d0:	2300      	movs	r3, #0
}
 80037d2:	4618      	mov	r0, r3
 80037d4:	370c      	adds	r7, #12
 80037d6:	46bd      	mov	sp, r7
 80037d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037dc:	4770      	bx	lr

080037de <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80037de:	b480      	push	{r7}
 80037e0:	b083      	sub	sp, #12
 80037e2:	af00      	add	r7, sp, #0
 80037e4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	689b      	ldr	r3, [r3, #8]
 80037ea:	f023 0201 	bic.w	r2, r3, #1
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80037f2:	2300      	movs	r3, #0
}
 80037f4:	4618      	mov	r0, r3
 80037f6:	370c      	adds	r7, #12
 80037f8:	46bd      	mov	sp, r7
 80037fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fe:	4770      	bx	lr

08003800 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b084      	sub	sp, #16
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
 8003808:	460b      	mov	r3, r1
 800380a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800380c:	2300      	movs	r3, #0
 800380e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	68db      	ldr	r3, [r3, #12]
 8003814:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800381c:	78fb      	ldrb	r3, [r7, #3]
 800381e:	2b01      	cmp	r3, #1
 8003820:	d115      	bne.n	800384e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	68db      	ldr	r3, [r3, #12]
 8003826:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800382e:	2001      	movs	r0, #1
 8003830:	f7fd f95c 	bl	8000aec <HAL_Delay>
      ms++;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	3301      	adds	r3, #1
 8003838:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800383a:	6878      	ldr	r0, [r7, #4]
 800383c:	f001 fa45 	bl	8004cca <USB_GetMode>
 8003840:	4603      	mov	r3, r0
 8003842:	2b01      	cmp	r3, #1
 8003844:	d01e      	beq.n	8003884 <USB_SetCurrentMode+0x84>
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	2b31      	cmp	r3, #49	; 0x31
 800384a:	d9f0      	bls.n	800382e <USB_SetCurrentMode+0x2e>
 800384c:	e01a      	b.n	8003884 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800384e:	78fb      	ldrb	r3, [r7, #3]
 8003850:	2b00      	cmp	r3, #0
 8003852:	d115      	bne.n	8003880 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	68db      	ldr	r3, [r3, #12]
 8003858:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003860:	2001      	movs	r0, #1
 8003862:	f7fd f943 	bl	8000aec <HAL_Delay>
      ms++;
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	3301      	adds	r3, #1
 800386a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800386c:	6878      	ldr	r0, [r7, #4]
 800386e:	f001 fa2c 	bl	8004cca <USB_GetMode>
 8003872:	4603      	mov	r3, r0
 8003874:	2b00      	cmp	r3, #0
 8003876:	d005      	beq.n	8003884 <USB_SetCurrentMode+0x84>
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	2b31      	cmp	r3, #49	; 0x31
 800387c:	d9f0      	bls.n	8003860 <USB_SetCurrentMode+0x60>
 800387e:	e001      	b.n	8003884 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003880:	2301      	movs	r3, #1
 8003882:	e005      	b.n	8003890 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	2b32      	cmp	r3, #50	; 0x32
 8003888:	d101      	bne.n	800388e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800388a:	2301      	movs	r3, #1
 800388c:	e000      	b.n	8003890 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800388e:	2300      	movs	r3, #0
}
 8003890:	4618      	mov	r0, r3
 8003892:	3710      	adds	r7, #16
 8003894:	46bd      	mov	sp, r7
 8003896:	bd80      	pop	{r7, pc}

08003898 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003898:	b084      	sub	sp, #16
 800389a:	b580      	push	{r7, lr}
 800389c:	b086      	sub	sp, #24
 800389e:	af00      	add	r7, sp, #0
 80038a0:	6078      	str	r0, [r7, #4]
 80038a2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80038a6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80038aa:	2300      	movs	r3, #0
 80038ac:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80038b2:	2300      	movs	r3, #0
 80038b4:	613b      	str	r3, [r7, #16]
 80038b6:	e009      	b.n	80038cc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80038b8:	687a      	ldr	r2, [r7, #4]
 80038ba:	693b      	ldr	r3, [r7, #16]
 80038bc:	3340      	adds	r3, #64	; 0x40
 80038be:	009b      	lsls	r3, r3, #2
 80038c0:	4413      	add	r3, r2
 80038c2:	2200      	movs	r2, #0
 80038c4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80038c6:	693b      	ldr	r3, [r7, #16]
 80038c8:	3301      	adds	r3, #1
 80038ca:	613b      	str	r3, [r7, #16]
 80038cc:	693b      	ldr	r3, [r7, #16]
 80038ce:	2b0e      	cmp	r3, #14
 80038d0:	d9f2      	bls.n	80038b8 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80038d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d11c      	bne.n	8003912 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038de:	685b      	ldr	r3, [r3, #4]
 80038e0:	68fa      	ldr	r2, [r7, #12]
 80038e2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80038e6:	f043 0302 	orr.w	r3, r3, #2
 80038ea:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038f0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038fc:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003908:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	639a      	str	r2, [r3, #56]	; 0x38
 8003910:	e00b      	b.n	800392a <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003916:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003922:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003930:	461a      	mov	r2, r3
 8003932:	2300      	movs	r3, #0
 8003934:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800393c:	4619      	mov	r1, r3
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003944:	461a      	mov	r2, r3
 8003946:	680b      	ldr	r3, [r1, #0]
 8003948:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800394a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800394c:	2b01      	cmp	r3, #1
 800394e:	d10c      	bne.n	800396a <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003950:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003952:	2b00      	cmp	r3, #0
 8003954:	d104      	bne.n	8003960 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003956:	2100      	movs	r1, #0
 8003958:	6878      	ldr	r0, [r7, #4]
 800395a:	f000 f965 	bl	8003c28 <USB_SetDevSpeed>
 800395e:	e008      	b.n	8003972 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003960:	2101      	movs	r1, #1
 8003962:	6878      	ldr	r0, [r7, #4]
 8003964:	f000 f960 	bl	8003c28 <USB_SetDevSpeed>
 8003968:	e003      	b.n	8003972 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800396a:	2103      	movs	r1, #3
 800396c:	6878      	ldr	r0, [r7, #4]
 800396e:	f000 f95b 	bl	8003c28 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003972:	2110      	movs	r1, #16
 8003974:	6878      	ldr	r0, [r7, #4]
 8003976:	f000 f8f3 	bl	8003b60 <USB_FlushTxFifo>
 800397a:	4603      	mov	r3, r0
 800397c:	2b00      	cmp	r3, #0
 800397e:	d001      	beq.n	8003984 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8003980:	2301      	movs	r3, #1
 8003982:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003984:	6878      	ldr	r0, [r7, #4]
 8003986:	f000 f91f 	bl	8003bc8 <USB_FlushRxFifo>
 800398a:	4603      	mov	r3, r0
 800398c:	2b00      	cmp	r3, #0
 800398e:	d001      	beq.n	8003994 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8003990:	2301      	movs	r3, #1
 8003992:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800399a:	461a      	mov	r2, r3
 800399c:	2300      	movs	r3, #0
 800399e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039a6:	461a      	mov	r2, r3
 80039a8:	2300      	movs	r3, #0
 80039aa:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039b2:	461a      	mov	r2, r3
 80039b4:	2300      	movs	r3, #0
 80039b6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80039b8:	2300      	movs	r3, #0
 80039ba:	613b      	str	r3, [r7, #16]
 80039bc:	e043      	b.n	8003a46 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80039be:	693b      	ldr	r3, [r7, #16]
 80039c0:	015a      	lsls	r2, r3, #5
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	4413      	add	r3, r2
 80039c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80039d0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80039d4:	d118      	bne.n	8003a08 <USB_DevInit+0x170>
    {
      if (i == 0U)
 80039d6:	693b      	ldr	r3, [r7, #16]
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d10a      	bne.n	80039f2 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80039dc:	693b      	ldr	r3, [r7, #16]
 80039de:	015a      	lsls	r2, r3, #5
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	4413      	add	r3, r2
 80039e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039e8:	461a      	mov	r2, r3
 80039ea:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80039ee:	6013      	str	r3, [r2, #0]
 80039f0:	e013      	b.n	8003a1a <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80039f2:	693b      	ldr	r3, [r7, #16]
 80039f4:	015a      	lsls	r2, r3, #5
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	4413      	add	r3, r2
 80039fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039fe:	461a      	mov	r2, r3
 8003a00:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003a04:	6013      	str	r3, [r2, #0]
 8003a06:	e008      	b.n	8003a1a <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003a08:	693b      	ldr	r3, [r7, #16]
 8003a0a:	015a      	lsls	r2, r3, #5
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	4413      	add	r3, r2
 8003a10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a14:	461a      	mov	r2, r3
 8003a16:	2300      	movs	r3, #0
 8003a18:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003a1a:	693b      	ldr	r3, [r7, #16]
 8003a1c:	015a      	lsls	r2, r3, #5
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	4413      	add	r3, r2
 8003a22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a26:	461a      	mov	r2, r3
 8003a28:	2300      	movs	r3, #0
 8003a2a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003a2c:	693b      	ldr	r3, [r7, #16]
 8003a2e:	015a      	lsls	r2, r3, #5
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	4413      	add	r3, r2
 8003a34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a38:	461a      	mov	r2, r3
 8003a3a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003a3e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003a40:	693b      	ldr	r3, [r7, #16]
 8003a42:	3301      	adds	r3, #1
 8003a44:	613b      	str	r3, [r7, #16]
 8003a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a48:	693a      	ldr	r2, [r7, #16]
 8003a4a:	429a      	cmp	r2, r3
 8003a4c:	d3b7      	bcc.n	80039be <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003a4e:	2300      	movs	r3, #0
 8003a50:	613b      	str	r3, [r7, #16]
 8003a52:	e043      	b.n	8003adc <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003a54:	693b      	ldr	r3, [r7, #16]
 8003a56:	015a      	lsls	r2, r3, #5
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	4413      	add	r3, r2
 8003a5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003a66:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003a6a:	d118      	bne.n	8003a9e <USB_DevInit+0x206>
    {
      if (i == 0U)
 8003a6c:	693b      	ldr	r3, [r7, #16]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d10a      	bne.n	8003a88 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003a72:	693b      	ldr	r3, [r7, #16]
 8003a74:	015a      	lsls	r2, r3, #5
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	4413      	add	r3, r2
 8003a7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a7e:	461a      	mov	r2, r3
 8003a80:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003a84:	6013      	str	r3, [r2, #0]
 8003a86:	e013      	b.n	8003ab0 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003a88:	693b      	ldr	r3, [r7, #16]
 8003a8a:	015a      	lsls	r2, r3, #5
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	4413      	add	r3, r2
 8003a90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a94:	461a      	mov	r2, r3
 8003a96:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003a9a:	6013      	str	r3, [r2, #0]
 8003a9c:	e008      	b.n	8003ab0 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003a9e:	693b      	ldr	r3, [r7, #16]
 8003aa0:	015a      	lsls	r2, r3, #5
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	4413      	add	r3, r2
 8003aa6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003aaa:	461a      	mov	r2, r3
 8003aac:	2300      	movs	r3, #0
 8003aae:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003ab0:	693b      	ldr	r3, [r7, #16]
 8003ab2:	015a      	lsls	r2, r3, #5
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	4413      	add	r3, r2
 8003ab8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003abc:	461a      	mov	r2, r3
 8003abe:	2300      	movs	r3, #0
 8003ac0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003ac2:	693b      	ldr	r3, [r7, #16]
 8003ac4:	015a      	lsls	r2, r3, #5
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	4413      	add	r3, r2
 8003aca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ace:	461a      	mov	r2, r3
 8003ad0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003ad4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003ad6:	693b      	ldr	r3, [r7, #16]
 8003ad8:	3301      	adds	r3, #1
 8003ada:	613b      	str	r3, [r7, #16]
 8003adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ade:	693a      	ldr	r2, [r7, #16]
 8003ae0:	429a      	cmp	r2, r3
 8003ae2:	d3b7      	bcc.n	8003a54 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003aea:	691b      	ldr	r3, [r3, #16]
 8003aec:	68fa      	ldr	r2, [r7, #12]
 8003aee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003af2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003af6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2200      	movs	r2, #0
 8003afc:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003b04:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003b06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d105      	bne.n	8003b18 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	699b      	ldr	r3, [r3, #24]
 8003b10:	f043 0210 	orr.w	r2, r3, #16
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	699a      	ldr	r2, [r3, #24]
 8003b1c:	4b0f      	ldr	r3, [pc, #60]	; (8003b5c <USB_DevInit+0x2c4>)
 8003b1e:	4313      	orrs	r3, r2
 8003b20:	687a      	ldr	r2, [r7, #4]
 8003b22:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003b24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d005      	beq.n	8003b36 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	699b      	ldr	r3, [r3, #24]
 8003b2e:	f043 0208 	orr.w	r2, r3, #8
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003b36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b38:	2b01      	cmp	r3, #1
 8003b3a:	d107      	bne.n	8003b4c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	699b      	ldr	r3, [r3, #24]
 8003b40:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003b44:	f043 0304 	orr.w	r3, r3, #4
 8003b48:	687a      	ldr	r2, [r7, #4]
 8003b4a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003b4c:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b4e:	4618      	mov	r0, r3
 8003b50:	3718      	adds	r7, #24
 8003b52:	46bd      	mov	sp, r7
 8003b54:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003b58:	b004      	add	sp, #16
 8003b5a:	4770      	bx	lr
 8003b5c:	803c3800 	.word	0x803c3800

08003b60 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003b60:	b480      	push	{r7}
 8003b62:	b085      	sub	sp, #20
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
 8003b68:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	3301      	adds	r3, #1
 8003b72:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	4a13      	ldr	r2, [pc, #76]	; (8003bc4 <USB_FlushTxFifo+0x64>)
 8003b78:	4293      	cmp	r3, r2
 8003b7a:	d901      	bls.n	8003b80 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8003b7c:	2303      	movs	r3, #3
 8003b7e:	e01b      	b.n	8003bb8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	691b      	ldr	r3, [r3, #16]
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	daf2      	bge.n	8003b6e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003b88:	2300      	movs	r3, #0
 8003b8a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	019b      	lsls	r3, r3, #6
 8003b90:	f043 0220 	orr.w	r2, r3, #32
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	3301      	adds	r3, #1
 8003b9c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	4a08      	ldr	r2, [pc, #32]	; (8003bc4 <USB_FlushTxFifo+0x64>)
 8003ba2:	4293      	cmp	r3, r2
 8003ba4:	d901      	bls.n	8003baa <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8003ba6:	2303      	movs	r3, #3
 8003ba8:	e006      	b.n	8003bb8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	691b      	ldr	r3, [r3, #16]
 8003bae:	f003 0320 	and.w	r3, r3, #32
 8003bb2:	2b20      	cmp	r3, #32
 8003bb4:	d0f0      	beq.n	8003b98 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8003bb6:	2300      	movs	r3, #0
}
 8003bb8:	4618      	mov	r0, r3
 8003bba:	3714      	adds	r7, #20
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc2:	4770      	bx	lr
 8003bc4:	00030d40 	.word	0x00030d40

08003bc8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003bc8:	b480      	push	{r7}
 8003bca:	b085      	sub	sp, #20
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	3301      	adds	r3, #1
 8003bd8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	4a11      	ldr	r2, [pc, #68]	; (8003c24 <USB_FlushRxFifo+0x5c>)
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d901      	bls.n	8003be6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8003be2:	2303      	movs	r3, #3
 8003be4:	e018      	b.n	8003c18 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	691b      	ldr	r3, [r3, #16]
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	daf2      	bge.n	8003bd4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8003bee:	2300      	movs	r3, #0
 8003bf0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	2210      	movs	r2, #16
 8003bf6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	3301      	adds	r3, #1
 8003bfc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	4a08      	ldr	r2, [pc, #32]	; (8003c24 <USB_FlushRxFifo+0x5c>)
 8003c02:	4293      	cmp	r3, r2
 8003c04:	d901      	bls.n	8003c0a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8003c06:	2303      	movs	r3, #3
 8003c08:	e006      	b.n	8003c18 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	691b      	ldr	r3, [r3, #16]
 8003c0e:	f003 0310 	and.w	r3, r3, #16
 8003c12:	2b10      	cmp	r3, #16
 8003c14:	d0f0      	beq.n	8003bf8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8003c16:	2300      	movs	r3, #0
}
 8003c18:	4618      	mov	r0, r3
 8003c1a:	3714      	adds	r7, #20
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c22:	4770      	bx	lr
 8003c24:	00030d40 	.word	0x00030d40

08003c28 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003c28:	b480      	push	{r7}
 8003c2a:	b085      	sub	sp, #20
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
 8003c30:	460b      	mov	r3, r1
 8003c32:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c3e:	681a      	ldr	r2, [r3, #0]
 8003c40:	78fb      	ldrb	r3, [r7, #3]
 8003c42:	68f9      	ldr	r1, [r7, #12]
 8003c44:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003c48:	4313      	orrs	r3, r2
 8003c4a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003c4c:	2300      	movs	r3, #0
}
 8003c4e:	4618      	mov	r0, r3
 8003c50:	3714      	adds	r7, #20
 8003c52:	46bd      	mov	sp, r7
 8003c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c58:	4770      	bx	lr

08003c5a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8003c5a:	b480      	push	{r7}
 8003c5c:	b087      	sub	sp, #28
 8003c5e:	af00      	add	r7, sp, #0
 8003c60:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8003c66:	693b      	ldr	r3, [r7, #16]
 8003c68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c6c:	689b      	ldr	r3, [r3, #8]
 8003c6e:	f003 0306 	and.w	r3, r3, #6
 8003c72:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d102      	bne.n	8003c80 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	75fb      	strb	r3, [r7, #23]
 8003c7e:	e00a      	b.n	8003c96 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	2b02      	cmp	r3, #2
 8003c84:	d002      	beq.n	8003c8c <USB_GetDevSpeed+0x32>
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	2b06      	cmp	r3, #6
 8003c8a:	d102      	bne.n	8003c92 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8003c8c:	2302      	movs	r3, #2
 8003c8e:	75fb      	strb	r3, [r7, #23]
 8003c90:	e001      	b.n	8003c96 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8003c92:	230f      	movs	r3, #15
 8003c94:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8003c96:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c98:	4618      	mov	r0, r3
 8003c9a:	371c      	adds	r7, #28
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca2:	4770      	bx	lr

08003ca4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003ca4:	b480      	push	{r7}
 8003ca6:	b085      	sub	sp, #20
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
 8003cac:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	781b      	ldrb	r3, [r3, #0]
 8003cb6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	785b      	ldrb	r3, [r3, #1]
 8003cbc:	2b01      	cmp	r3, #1
 8003cbe:	d13a      	bne.n	8003d36 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003cc6:	69da      	ldr	r2, [r3, #28]
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	781b      	ldrb	r3, [r3, #0]
 8003ccc:	f003 030f 	and.w	r3, r3, #15
 8003cd0:	2101      	movs	r1, #1
 8003cd2:	fa01 f303 	lsl.w	r3, r1, r3
 8003cd6:	b29b      	uxth	r3, r3
 8003cd8:	68f9      	ldr	r1, [r7, #12]
 8003cda:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003cde:	4313      	orrs	r3, r2
 8003ce0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8003ce2:	68bb      	ldr	r3, [r7, #8]
 8003ce4:	015a      	lsls	r2, r3, #5
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	4413      	add	r3, r2
 8003cea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d155      	bne.n	8003da4 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003cf8:	68bb      	ldr	r3, [r7, #8]
 8003cfa:	015a      	lsls	r2, r3, #5
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	4413      	add	r3, r2
 8003d00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d04:	681a      	ldr	r2, [r3, #0]
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	68db      	ldr	r3, [r3, #12]
 8003d0a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	791b      	ldrb	r3, [r3, #4]
 8003d12:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003d14:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003d16:	68bb      	ldr	r3, [r7, #8]
 8003d18:	059b      	lsls	r3, r3, #22
 8003d1a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003d1c:	4313      	orrs	r3, r2
 8003d1e:	68ba      	ldr	r2, [r7, #8]
 8003d20:	0151      	lsls	r1, r2, #5
 8003d22:	68fa      	ldr	r2, [r7, #12]
 8003d24:	440a      	add	r2, r1
 8003d26:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003d2a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d2e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d32:	6013      	str	r3, [r2, #0]
 8003d34:	e036      	b.n	8003da4 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d3c:	69da      	ldr	r2, [r3, #28]
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	781b      	ldrb	r3, [r3, #0]
 8003d42:	f003 030f 	and.w	r3, r3, #15
 8003d46:	2101      	movs	r1, #1
 8003d48:	fa01 f303 	lsl.w	r3, r1, r3
 8003d4c:	041b      	lsls	r3, r3, #16
 8003d4e:	68f9      	ldr	r1, [r7, #12]
 8003d50:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003d54:	4313      	orrs	r3, r2
 8003d56:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8003d58:	68bb      	ldr	r3, [r7, #8]
 8003d5a:	015a      	lsls	r2, r3, #5
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	4413      	add	r3, r2
 8003d60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d11a      	bne.n	8003da4 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003d6e:	68bb      	ldr	r3, [r7, #8]
 8003d70:	015a      	lsls	r2, r3, #5
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	4413      	add	r3, r2
 8003d76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d7a:	681a      	ldr	r2, [r3, #0]
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	68db      	ldr	r3, [r3, #12]
 8003d80:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	791b      	ldrb	r3, [r3, #4]
 8003d88:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003d8a:	430b      	orrs	r3, r1
 8003d8c:	4313      	orrs	r3, r2
 8003d8e:	68ba      	ldr	r2, [r7, #8]
 8003d90:	0151      	lsls	r1, r2, #5
 8003d92:	68fa      	ldr	r2, [r7, #12]
 8003d94:	440a      	add	r2, r1
 8003d96:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003d9a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d9e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003da2:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8003da4:	2300      	movs	r3, #0
}
 8003da6:	4618      	mov	r0, r3
 8003da8:	3714      	adds	r7, #20
 8003daa:	46bd      	mov	sp, r7
 8003dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db0:	4770      	bx	lr
	...

08003db4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003db4:	b480      	push	{r7}
 8003db6:	b085      	sub	sp, #20
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
 8003dbc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003dc2:	683b      	ldr	r3, [r7, #0]
 8003dc4:	781b      	ldrb	r3, [r3, #0]
 8003dc6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	785b      	ldrb	r3, [r3, #1]
 8003dcc:	2b01      	cmp	r3, #1
 8003dce:	d161      	bne.n	8003e94 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003dd0:	68bb      	ldr	r3, [r7, #8]
 8003dd2:	015a      	lsls	r2, r3, #5
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	4413      	add	r3, r2
 8003dd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003de2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003de6:	d11f      	bne.n	8003e28 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003de8:	68bb      	ldr	r3, [r7, #8]
 8003dea:	015a      	lsls	r2, r3, #5
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	4413      	add	r3, r2
 8003df0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	68ba      	ldr	r2, [r7, #8]
 8003df8:	0151      	lsls	r1, r2, #5
 8003dfa:	68fa      	ldr	r2, [r7, #12]
 8003dfc:	440a      	add	r2, r1
 8003dfe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003e02:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003e06:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8003e08:	68bb      	ldr	r3, [r7, #8]
 8003e0a:	015a      	lsls	r2, r3, #5
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	4413      	add	r3, r2
 8003e10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	68ba      	ldr	r2, [r7, #8]
 8003e18:	0151      	lsls	r1, r2, #5
 8003e1a:	68fa      	ldr	r2, [r7, #12]
 8003e1c:	440a      	add	r2, r1
 8003e1e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003e22:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003e26:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e2e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	781b      	ldrb	r3, [r3, #0]
 8003e34:	f003 030f 	and.w	r3, r3, #15
 8003e38:	2101      	movs	r1, #1
 8003e3a:	fa01 f303 	lsl.w	r3, r1, r3
 8003e3e:	b29b      	uxth	r3, r3
 8003e40:	43db      	mvns	r3, r3
 8003e42:	68f9      	ldr	r1, [r7, #12]
 8003e44:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003e48:	4013      	ands	r3, r2
 8003e4a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e52:	69da      	ldr	r2, [r3, #28]
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	781b      	ldrb	r3, [r3, #0]
 8003e58:	f003 030f 	and.w	r3, r3, #15
 8003e5c:	2101      	movs	r1, #1
 8003e5e:	fa01 f303 	lsl.w	r3, r1, r3
 8003e62:	b29b      	uxth	r3, r3
 8003e64:	43db      	mvns	r3, r3
 8003e66:	68f9      	ldr	r1, [r7, #12]
 8003e68:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003e6c:	4013      	ands	r3, r2
 8003e6e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8003e70:	68bb      	ldr	r3, [r7, #8]
 8003e72:	015a      	lsls	r2, r3, #5
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	4413      	add	r3, r2
 8003e78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e7c:	681a      	ldr	r2, [r3, #0]
 8003e7e:	68bb      	ldr	r3, [r7, #8]
 8003e80:	0159      	lsls	r1, r3, #5
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	440b      	add	r3, r1
 8003e86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e8a:	4619      	mov	r1, r3
 8003e8c:	4b35      	ldr	r3, [pc, #212]	; (8003f64 <USB_DeactivateEndpoint+0x1b0>)
 8003e8e:	4013      	ands	r3, r2
 8003e90:	600b      	str	r3, [r1, #0]
 8003e92:	e060      	b.n	8003f56 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003e94:	68bb      	ldr	r3, [r7, #8]
 8003e96:	015a      	lsls	r2, r3, #5
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	4413      	add	r3, r2
 8003e9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003ea6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003eaa:	d11f      	bne.n	8003eec <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003eac:	68bb      	ldr	r3, [r7, #8]
 8003eae:	015a      	lsls	r2, r3, #5
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	4413      	add	r3, r2
 8003eb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	68ba      	ldr	r2, [r7, #8]
 8003ebc:	0151      	lsls	r1, r2, #5
 8003ebe:	68fa      	ldr	r2, [r7, #12]
 8003ec0:	440a      	add	r2, r1
 8003ec2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003ec6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003eca:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8003ecc:	68bb      	ldr	r3, [r7, #8]
 8003ece:	015a      	lsls	r2, r3, #5
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	4413      	add	r3, r2
 8003ed4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	68ba      	ldr	r2, [r7, #8]
 8003edc:	0151      	lsls	r1, r2, #5
 8003ede:	68fa      	ldr	r2, [r7, #12]
 8003ee0:	440a      	add	r2, r1
 8003ee2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003ee6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003eea:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ef2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	781b      	ldrb	r3, [r3, #0]
 8003ef8:	f003 030f 	and.w	r3, r3, #15
 8003efc:	2101      	movs	r1, #1
 8003efe:	fa01 f303 	lsl.w	r3, r1, r3
 8003f02:	041b      	lsls	r3, r3, #16
 8003f04:	43db      	mvns	r3, r3
 8003f06:	68f9      	ldr	r1, [r7, #12]
 8003f08:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003f0c:	4013      	ands	r3, r2
 8003f0e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f16:	69da      	ldr	r2, [r3, #28]
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	781b      	ldrb	r3, [r3, #0]
 8003f1c:	f003 030f 	and.w	r3, r3, #15
 8003f20:	2101      	movs	r1, #1
 8003f22:	fa01 f303 	lsl.w	r3, r1, r3
 8003f26:	041b      	lsls	r3, r3, #16
 8003f28:	43db      	mvns	r3, r3
 8003f2a:	68f9      	ldr	r1, [r7, #12]
 8003f2c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003f30:	4013      	ands	r3, r2
 8003f32:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8003f34:	68bb      	ldr	r3, [r7, #8]
 8003f36:	015a      	lsls	r2, r3, #5
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	4413      	add	r3, r2
 8003f3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f40:	681a      	ldr	r2, [r3, #0]
 8003f42:	68bb      	ldr	r3, [r7, #8]
 8003f44:	0159      	lsls	r1, r3, #5
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	440b      	add	r3, r1
 8003f4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f4e:	4619      	mov	r1, r3
 8003f50:	4b05      	ldr	r3, [pc, #20]	; (8003f68 <USB_DeactivateEndpoint+0x1b4>)
 8003f52:	4013      	ands	r3, r2
 8003f54:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8003f56:	2300      	movs	r3, #0
}
 8003f58:	4618      	mov	r0, r3
 8003f5a:	3714      	adds	r7, #20
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f62:	4770      	bx	lr
 8003f64:	ec337800 	.word	0xec337800
 8003f68:	eff37800 	.word	0xeff37800

08003f6c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b08a      	sub	sp, #40	; 0x28
 8003f70:	af02      	add	r7, sp, #8
 8003f72:	60f8      	str	r0, [r7, #12]
 8003f74:	60b9      	str	r1, [r7, #8]
 8003f76:	4613      	mov	r3, r2
 8003f78:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8003f7e:	68bb      	ldr	r3, [r7, #8]
 8003f80:	781b      	ldrb	r3, [r3, #0]
 8003f82:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003f84:	68bb      	ldr	r3, [r7, #8]
 8003f86:	785b      	ldrb	r3, [r3, #1]
 8003f88:	2b01      	cmp	r3, #1
 8003f8a:	f040 815c 	bne.w	8004246 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8003f8e:	68bb      	ldr	r3, [r7, #8]
 8003f90:	699b      	ldr	r3, [r3, #24]
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d132      	bne.n	8003ffc <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003f96:	69bb      	ldr	r3, [r7, #24]
 8003f98:	015a      	lsls	r2, r3, #5
 8003f9a:	69fb      	ldr	r3, [r7, #28]
 8003f9c:	4413      	add	r3, r2
 8003f9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fa2:	691b      	ldr	r3, [r3, #16]
 8003fa4:	69ba      	ldr	r2, [r7, #24]
 8003fa6:	0151      	lsls	r1, r2, #5
 8003fa8:	69fa      	ldr	r2, [r7, #28]
 8003faa:	440a      	add	r2, r1
 8003fac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003fb0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003fb4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003fb8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003fba:	69bb      	ldr	r3, [r7, #24]
 8003fbc:	015a      	lsls	r2, r3, #5
 8003fbe:	69fb      	ldr	r3, [r7, #28]
 8003fc0:	4413      	add	r3, r2
 8003fc2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fc6:	691b      	ldr	r3, [r3, #16]
 8003fc8:	69ba      	ldr	r2, [r7, #24]
 8003fca:	0151      	lsls	r1, r2, #5
 8003fcc:	69fa      	ldr	r2, [r7, #28]
 8003fce:	440a      	add	r2, r1
 8003fd0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003fd4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003fd8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003fda:	69bb      	ldr	r3, [r7, #24]
 8003fdc:	015a      	lsls	r2, r3, #5
 8003fde:	69fb      	ldr	r3, [r7, #28]
 8003fe0:	4413      	add	r3, r2
 8003fe2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fe6:	691b      	ldr	r3, [r3, #16]
 8003fe8:	69ba      	ldr	r2, [r7, #24]
 8003fea:	0151      	lsls	r1, r2, #5
 8003fec:	69fa      	ldr	r2, [r7, #28]
 8003fee:	440a      	add	r2, r1
 8003ff0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003ff4:	0cdb      	lsrs	r3, r3, #19
 8003ff6:	04db      	lsls	r3, r3, #19
 8003ff8:	6113      	str	r3, [r2, #16]
 8003ffa:	e074      	b.n	80040e6 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003ffc:	69bb      	ldr	r3, [r7, #24]
 8003ffe:	015a      	lsls	r2, r3, #5
 8004000:	69fb      	ldr	r3, [r7, #28]
 8004002:	4413      	add	r3, r2
 8004004:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004008:	691b      	ldr	r3, [r3, #16]
 800400a:	69ba      	ldr	r2, [r7, #24]
 800400c:	0151      	lsls	r1, r2, #5
 800400e:	69fa      	ldr	r2, [r7, #28]
 8004010:	440a      	add	r2, r1
 8004012:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004016:	0cdb      	lsrs	r3, r3, #19
 8004018:	04db      	lsls	r3, r3, #19
 800401a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800401c:	69bb      	ldr	r3, [r7, #24]
 800401e:	015a      	lsls	r2, r3, #5
 8004020:	69fb      	ldr	r3, [r7, #28]
 8004022:	4413      	add	r3, r2
 8004024:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004028:	691b      	ldr	r3, [r3, #16]
 800402a:	69ba      	ldr	r2, [r7, #24]
 800402c:	0151      	lsls	r1, r2, #5
 800402e:	69fa      	ldr	r2, [r7, #28]
 8004030:	440a      	add	r2, r1
 8004032:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004036:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800403a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800403e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004040:	69bb      	ldr	r3, [r7, #24]
 8004042:	015a      	lsls	r2, r3, #5
 8004044:	69fb      	ldr	r3, [r7, #28]
 8004046:	4413      	add	r3, r2
 8004048:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800404c:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800404e:	68bb      	ldr	r3, [r7, #8]
 8004050:	6999      	ldr	r1, [r3, #24]
 8004052:	68bb      	ldr	r3, [r7, #8]
 8004054:	68db      	ldr	r3, [r3, #12]
 8004056:	440b      	add	r3, r1
 8004058:	1e59      	subs	r1, r3, #1
 800405a:	68bb      	ldr	r3, [r7, #8]
 800405c:	68db      	ldr	r3, [r3, #12]
 800405e:	fbb1 f3f3 	udiv	r3, r1, r3
 8004062:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004064:	4b9d      	ldr	r3, [pc, #628]	; (80042dc <USB_EPStartXfer+0x370>)
 8004066:	400b      	ands	r3, r1
 8004068:	69b9      	ldr	r1, [r7, #24]
 800406a:	0148      	lsls	r0, r1, #5
 800406c:	69f9      	ldr	r1, [r7, #28]
 800406e:	4401      	add	r1, r0
 8004070:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004074:	4313      	orrs	r3, r2
 8004076:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004078:	69bb      	ldr	r3, [r7, #24]
 800407a:	015a      	lsls	r2, r3, #5
 800407c:	69fb      	ldr	r3, [r7, #28]
 800407e:	4413      	add	r3, r2
 8004080:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004084:	691a      	ldr	r2, [r3, #16]
 8004086:	68bb      	ldr	r3, [r7, #8]
 8004088:	699b      	ldr	r3, [r3, #24]
 800408a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800408e:	69b9      	ldr	r1, [r7, #24]
 8004090:	0148      	lsls	r0, r1, #5
 8004092:	69f9      	ldr	r1, [r7, #28]
 8004094:	4401      	add	r1, r0
 8004096:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800409a:	4313      	orrs	r3, r2
 800409c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800409e:	68bb      	ldr	r3, [r7, #8]
 80040a0:	791b      	ldrb	r3, [r3, #4]
 80040a2:	2b01      	cmp	r3, #1
 80040a4:	d11f      	bne.n	80040e6 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80040a6:	69bb      	ldr	r3, [r7, #24]
 80040a8:	015a      	lsls	r2, r3, #5
 80040aa:	69fb      	ldr	r3, [r7, #28]
 80040ac:	4413      	add	r3, r2
 80040ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040b2:	691b      	ldr	r3, [r3, #16]
 80040b4:	69ba      	ldr	r2, [r7, #24]
 80040b6:	0151      	lsls	r1, r2, #5
 80040b8:	69fa      	ldr	r2, [r7, #28]
 80040ba:	440a      	add	r2, r1
 80040bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80040c0:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80040c4:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80040c6:	69bb      	ldr	r3, [r7, #24]
 80040c8:	015a      	lsls	r2, r3, #5
 80040ca:	69fb      	ldr	r3, [r7, #28]
 80040cc:	4413      	add	r3, r2
 80040ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040d2:	691b      	ldr	r3, [r3, #16]
 80040d4:	69ba      	ldr	r2, [r7, #24]
 80040d6:	0151      	lsls	r1, r2, #5
 80040d8:	69fa      	ldr	r2, [r7, #28]
 80040da:	440a      	add	r2, r1
 80040dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80040e0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80040e4:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80040e6:	79fb      	ldrb	r3, [r7, #7]
 80040e8:	2b01      	cmp	r3, #1
 80040ea:	d14b      	bne.n	8004184 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80040ec:	68bb      	ldr	r3, [r7, #8]
 80040ee:	695b      	ldr	r3, [r3, #20]
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d009      	beq.n	8004108 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80040f4:	69bb      	ldr	r3, [r7, #24]
 80040f6:	015a      	lsls	r2, r3, #5
 80040f8:	69fb      	ldr	r3, [r7, #28]
 80040fa:	4413      	add	r3, r2
 80040fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004100:	461a      	mov	r2, r3
 8004102:	68bb      	ldr	r3, [r7, #8]
 8004104:	695b      	ldr	r3, [r3, #20]
 8004106:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8004108:	68bb      	ldr	r3, [r7, #8]
 800410a:	791b      	ldrb	r3, [r3, #4]
 800410c:	2b01      	cmp	r3, #1
 800410e:	d128      	bne.n	8004162 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004110:	69fb      	ldr	r3, [r7, #28]
 8004112:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004116:	689b      	ldr	r3, [r3, #8]
 8004118:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800411c:	2b00      	cmp	r3, #0
 800411e:	d110      	bne.n	8004142 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004120:	69bb      	ldr	r3, [r7, #24]
 8004122:	015a      	lsls	r2, r3, #5
 8004124:	69fb      	ldr	r3, [r7, #28]
 8004126:	4413      	add	r3, r2
 8004128:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	69ba      	ldr	r2, [r7, #24]
 8004130:	0151      	lsls	r1, r2, #5
 8004132:	69fa      	ldr	r2, [r7, #28]
 8004134:	440a      	add	r2, r1
 8004136:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800413a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800413e:	6013      	str	r3, [r2, #0]
 8004140:	e00f      	b.n	8004162 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004142:	69bb      	ldr	r3, [r7, #24]
 8004144:	015a      	lsls	r2, r3, #5
 8004146:	69fb      	ldr	r3, [r7, #28]
 8004148:	4413      	add	r3, r2
 800414a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	69ba      	ldr	r2, [r7, #24]
 8004152:	0151      	lsls	r1, r2, #5
 8004154:	69fa      	ldr	r2, [r7, #28]
 8004156:	440a      	add	r2, r1
 8004158:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800415c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004160:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004162:	69bb      	ldr	r3, [r7, #24]
 8004164:	015a      	lsls	r2, r3, #5
 8004166:	69fb      	ldr	r3, [r7, #28]
 8004168:	4413      	add	r3, r2
 800416a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	69ba      	ldr	r2, [r7, #24]
 8004172:	0151      	lsls	r1, r2, #5
 8004174:	69fa      	ldr	r2, [r7, #28]
 8004176:	440a      	add	r2, r1
 8004178:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800417c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004180:	6013      	str	r3, [r2, #0]
 8004182:	e133      	b.n	80043ec <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004184:	69bb      	ldr	r3, [r7, #24]
 8004186:	015a      	lsls	r2, r3, #5
 8004188:	69fb      	ldr	r3, [r7, #28]
 800418a:	4413      	add	r3, r2
 800418c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	69ba      	ldr	r2, [r7, #24]
 8004194:	0151      	lsls	r1, r2, #5
 8004196:	69fa      	ldr	r2, [r7, #28]
 8004198:	440a      	add	r2, r1
 800419a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800419e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80041a2:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80041a4:	68bb      	ldr	r3, [r7, #8]
 80041a6:	791b      	ldrb	r3, [r3, #4]
 80041a8:	2b01      	cmp	r3, #1
 80041aa:	d015      	beq.n	80041d8 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80041ac:	68bb      	ldr	r3, [r7, #8]
 80041ae:	699b      	ldr	r3, [r3, #24]
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	f000 811b 	beq.w	80043ec <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80041b6:	69fb      	ldr	r3, [r7, #28]
 80041b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80041be:	68bb      	ldr	r3, [r7, #8]
 80041c0:	781b      	ldrb	r3, [r3, #0]
 80041c2:	f003 030f 	and.w	r3, r3, #15
 80041c6:	2101      	movs	r1, #1
 80041c8:	fa01 f303 	lsl.w	r3, r1, r3
 80041cc:	69f9      	ldr	r1, [r7, #28]
 80041ce:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80041d2:	4313      	orrs	r3, r2
 80041d4:	634b      	str	r3, [r1, #52]	; 0x34
 80041d6:	e109      	b.n	80043ec <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80041d8:	69fb      	ldr	r3, [r7, #28]
 80041da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041de:	689b      	ldr	r3, [r3, #8]
 80041e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d110      	bne.n	800420a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80041e8:	69bb      	ldr	r3, [r7, #24]
 80041ea:	015a      	lsls	r2, r3, #5
 80041ec:	69fb      	ldr	r3, [r7, #28]
 80041ee:	4413      	add	r3, r2
 80041f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	69ba      	ldr	r2, [r7, #24]
 80041f8:	0151      	lsls	r1, r2, #5
 80041fa:	69fa      	ldr	r2, [r7, #28]
 80041fc:	440a      	add	r2, r1
 80041fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004202:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004206:	6013      	str	r3, [r2, #0]
 8004208:	e00f      	b.n	800422a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800420a:	69bb      	ldr	r3, [r7, #24]
 800420c:	015a      	lsls	r2, r3, #5
 800420e:	69fb      	ldr	r3, [r7, #28]
 8004210:	4413      	add	r3, r2
 8004212:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	69ba      	ldr	r2, [r7, #24]
 800421a:	0151      	lsls	r1, r2, #5
 800421c:	69fa      	ldr	r2, [r7, #28]
 800421e:	440a      	add	r2, r1
 8004220:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004224:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004228:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800422a:	68bb      	ldr	r3, [r7, #8]
 800422c:	6919      	ldr	r1, [r3, #16]
 800422e:	68bb      	ldr	r3, [r7, #8]
 8004230:	781a      	ldrb	r2, [r3, #0]
 8004232:	68bb      	ldr	r3, [r7, #8]
 8004234:	699b      	ldr	r3, [r3, #24]
 8004236:	b298      	uxth	r0, r3
 8004238:	79fb      	ldrb	r3, [r7, #7]
 800423a:	9300      	str	r3, [sp, #0]
 800423c:	4603      	mov	r3, r0
 800423e:	68f8      	ldr	r0, [r7, #12]
 8004240:	f000 fade 	bl	8004800 <USB_WritePacket>
 8004244:	e0d2      	b.n	80043ec <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004246:	69bb      	ldr	r3, [r7, #24]
 8004248:	015a      	lsls	r2, r3, #5
 800424a:	69fb      	ldr	r3, [r7, #28]
 800424c:	4413      	add	r3, r2
 800424e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004252:	691b      	ldr	r3, [r3, #16]
 8004254:	69ba      	ldr	r2, [r7, #24]
 8004256:	0151      	lsls	r1, r2, #5
 8004258:	69fa      	ldr	r2, [r7, #28]
 800425a:	440a      	add	r2, r1
 800425c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004260:	0cdb      	lsrs	r3, r3, #19
 8004262:	04db      	lsls	r3, r3, #19
 8004264:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004266:	69bb      	ldr	r3, [r7, #24]
 8004268:	015a      	lsls	r2, r3, #5
 800426a:	69fb      	ldr	r3, [r7, #28]
 800426c:	4413      	add	r3, r2
 800426e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004272:	691b      	ldr	r3, [r3, #16]
 8004274:	69ba      	ldr	r2, [r7, #24]
 8004276:	0151      	lsls	r1, r2, #5
 8004278:	69fa      	ldr	r2, [r7, #28]
 800427a:	440a      	add	r2, r1
 800427c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004280:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004284:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004288:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800428a:	68bb      	ldr	r3, [r7, #8]
 800428c:	699b      	ldr	r3, [r3, #24]
 800428e:	2b00      	cmp	r3, #0
 8004290:	d126      	bne.n	80042e0 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004292:	69bb      	ldr	r3, [r7, #24]
 8004294:	015a      	lsls	r2, r3, #5
 8004296:	69fb      	ldr	r3, [r7, #28]
 8004298:	4413      	add	r3, r2
 800429a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800429e:	691a      	ldr	r2, [r3, #16]
 80042a0:	68bb      	ldr	r3, [r7, #8]
 80042a2:	68db      	ldr	r3, [r3, #12]
 80042a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80042a8:	69b9      	ldr	r1, [r7, #24]
 80042aa:	0148      	lsls	r0, r1, #5
 80042ac:	69f9      	ldr	r1, [r7, #28]
 80042ae:	4401      	add	r1, r0
 80042b0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80042b4:	4313      	orrs	r3, r2
 80042b6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80042b8:	69bb      	ldr	r3, [r7, #24]
 80042ba:	015a      	lsls	r2, r3, #5
 80042bc:	69fb      	ldr	r3, [r7, #28]
 80042be:	4413      	add	r3, r2
 80042c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042c4:	691b      	ldr	r3, [r3, #16]
 80042c6:	69ba      	ldr	r2, [r7, #24]
 80042c8:	0151      	lsls	r1, r2, #5
 80042ca:	69fa      	ldr	r2, [r7, #28]
 80042cc:	440a      	add	r2, r1
 80042ce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80042d2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80042d6:	6113      	str	r3, [r2, #16]
 80042d8:	e03a      	b.n	8004350 <USB_EPStartXfer+0x3e4>
 80042da:	bf00      	nop
 80042dc:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80042e0:	68bb      	ldr	r3, [r7, #8]
 80042e2:	699a      	ldr	r2, [r3, #24]
 80042e4:	68bb      	ldr	r3, [r7, #8]
 80042e6:	68db      	ldr	r3, [r3, #12]
 80042e8:	4413      	add	r3, r2
 80042ea:	1e5a      	subs	r2, r3, #1
 80042ec:	68bb      	ldr	r3, [r7, #8]
 80042ee:	68db      	ldr	r3, [r3, #12]
 80042f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80042f4:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 80042f6:	68bb      	ldr	r3, [r7, #8]
 80042f8:	68db      	ldr	r3, [r3, #12]
 80042fa:	8afa      	ldrh	r2, [r7, #22]
 80042fc:	fb03 f202 	mul.w	r2, r3, r2
 8004300:	68bb      	ldr	r3, [r7, #8]
 8004302:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004304:	69bb      	ldr	r3, [r7, #24]
 8004306:	015a      	lsls	r2, r3, #5
 8004308:	69fb      	ldr	r3, [r7, #28]
 800430a:	4413      	add	r3, r2
 800430c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004310:	691a      	ldr	r2, [r3, #16]
 8004312:	8afb      	ldrh	r3, [r7, #22]
 8004314:	04d9      	lsls	r1, r3, #19
 8004316:	4b38      	ldr	r3, [pc, #224]	; (80043f8 <USB_EPStartXfer+0x48c>)
 8004318:	400b      	ands	r3, r1
 800431a:	69b9      	ldr	r1, [r7, #24]
 800431c:	0148      	lsls	r0, r1, #5
 800431e:	69f9      	ldr	r1, [r7, #28]
 8004320:	4401      	add	r1, r0
 8004322:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004326:	4313      	orrs	r3, r2
 8004328:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800432a:	69bb      	ldr	r3, [r7, #24]
 800432c:	015a      	lsls	r2, r3, #5
 800432e:	69fb      	ldr	r3, [r7, #28]
 8004330:	4413      	add	r3, r2
 8004332:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004336:	691a      	ldr	r2, [r3, #16]
 8004338:	68bb      	ldr	r3, [r7, #8]
 800433a:	69db      	ldr	r3, [r3, #28]
 800433c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004340:	69b9      	ldr	r1, [r7, #24]
 8004342:	0148      	lsls	r0, r1, #5
 8004344:	69f9      	ldr	r1, [r7, #28]
 8004346:	4401      	add	r1, r0
 8004348:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800434c:	4313      	orrs	r3, r2
 800434e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004350:	79fb      	ldrb	r3, [r7, #7]
 8004352:	2b01      	cmp	r3, #1
 8004354:	d10d      	bne.n	8004372 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004356:	68bb      	ldr	r3, [r7, #8]
 8004358:	691b      	ldr	r3, [r3, #16]
 800435a:	2b00      	cmp	r3, #0
 800435c:	d009      	beq.n	8004372 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800435e:	68bb      	ldr	r3, [r7, #8]
 8004360:	6919      	ldr	r1, [r3, #16]
 8004362:	69bb      	ldr	r3, [r7, #24]
 8004364:	015a      	lsls	r2, r3, #5
 8004366:	69fb      	ldr	r3, [r7, #28]
 8004368:	4413      	add	r3, r2
 800436a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800436e:	460a      	mov	r2, r1
 8004370:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8004372:	68bb      	ldr	r3, [r7, #8]
 8004374:	791b      	ldrb	r3, [r3, #4]
 8004376:	2b01      	cmp	r3, #1
 8004378:	d128      	bne.n	80043cc <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800437a:	69fb      	ldr	r3, [r7, #28]
 800437c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004380:	689b      	ldr	r3, [r3, #8]
 8004382:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004386:	2b00      	cmp	r3, #0
 8004388:	d110      	bne.n	80043ac <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800438a:	69bb      	ldr	r3, [r7, #24]
 800438c:	015a      	lsls	r2, r3, #5
 800438e:	69fb      	ldr	r3, [r7, #28]
 8004390:	4413      	add	r3, r2
 8004392:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	69ba      	ldr	r2, [r7, #24]
 800439a:	0151      	lsls	r1, r2, #5
 800439c:	69fa      	ldr	r2, [r7, #28]
 800439e:	440a      	add	r2, r1
 80043a0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80043a4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80043a8:	6013      	str	r3, [r2, #0]
 80043aa:	e00f      	b.n	80043cc <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80043ac:	69bb      	ldr	r3, [r7, #24]
 80043ae:	015a      	lsls	r2, r3, #5
 80043b0:	69fb      	ldr	r3, [r7, #28]
 80043b2:	4413      	add	r3, r2
 80043b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	69ba      	ldr	r2, [r7, #24]
 80043bc:	0151      	lsls	r1, r2, #5
 80043be:	69fa      	ldr	r2, [r7, #28]
 80043c0:	440a      	add	r2, r1
 80043c2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80043c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043ca:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80043cc:	69bb      	ldr	r3, [r7, #24]
 80043ce:	015a      	lsls	r2, r3, #5
 80043d0:	69fb      	ldr	r3, [r7, #28]
 80043d2:	4413      	add	r3, r2
 80043d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	69ba      	ldr	r2, [r7, #24]
 80043dc:	0151      	lsls	r1, r2, #5
 80043de:	69fa      	ldr	r2, [r7, #28]
 80043e0:	440a      	add	r2, r1
 80043e2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80043e6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80043ea:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80043ec:	2300      	movs	r3, #0
}
 80043ee:	4618      	mov	r0, r3
 80043f0:	3720      	adds	r7, #32
 80043f2:	46bd      	mov	sp, r7
 80043f4:	bd80      	pop	{r7, pc}
 80043f6:	bf00      	nop
 80043f8:	1ff80000 	.word	0x1ff80000

080043fc <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80043fc:	b480      	push	{r7}
 80043fe:	b087      	sub	sp, #28
 8004400:	af00      	add	r7, sp, #0
 8004402:	60f8      	str	r0, [r7, #12]
 8004404:	60b9      	str	r1, [r7, #8]
 8004406:	4613      	mov	r3, r2
 8004408:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800440e:	68bb      	ldr	r3, [r7, #8]
 8004410:	781b      	ldrb	r3, [r3, #0]
 8004412:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004414:	68bb      	ldr	r3, [r7, #8]
 8004416:	785b      	ldrb	r3, [r3, #1]
 8004418:	2b01      	cmp	r3, #1
 800441a:	f040 80ce 	bne.w	80045ba <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800441e:	68bb      	ldr	r3, [r7, #8]
 8004420:	699b      	ldr	r3, [r3, #24]
 8004422:	2b00      	cmp	r3, #0
 8004424:	d132      	bne.n	800448c <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004426:	693b      	ldr	r3, [r7, #16]
 8004428:	015a      	lsls	r2, r3, #5
 800442a:	697b      	ldr	r3, [r7, #20]
 800442c:	4413      	add	r3, r2
 800442e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004432:	691b      	ldr	r3, [r3, #16]
 8004434:	693a      	ldr	r2, [r7, #16]
 8004436:	0151      	lsls	r1, r2, #5
 8004438:	697a      	ldr	r2, [r7, #20]
 800443a:	440a      	add	r2, r1
 800443c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004440:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004444:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004448:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800444a:	693b      	ldr	r3, [r7, #16]
 800444c:	015a      	lsls	r2, r3, #5
 800444e:	697b      	ldr	r3, [r7, #20]
 8004450:	4413      	add	r3, r2
 8004452:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004456:	691b      	ldr	r3, [r3, #16]
 8004458:	693a      	ldr	r2, [r7, #16]
 800445a:	0151      	lsls	r1, r2, #5
 800445c:	697a      	ldr	r2, [r7, #20]
 800445e:	440a      	add	r2, r1
 8004460:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004464:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004468:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800446a:	693b      	ldr	r3, [r7, #16]
 800446c:	015a      	lsls	r2, r3, #5
 800446e:	697b      	ldr	r3, [r7, #20]
 8004470:	4413      	add	r3, r2
 8004472:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004476:	691b      	ldr	r3, [r3, #16]
 8004478:	693a      	ldr	r2, [r7, #16]
 800447a:	0151      	lsls	r1, r2, #5
 800447c:	697a      	ldr	r2, [r7, #20]
 800447e:	440a      	add	r2, r1
 8004480:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004484:	0cdb      	lsrs	r3, r3, #19
 8004486:	04db      	lsls	r3, r3, #19
 8004488:	6113      	str	r3, [r2, #16]
 800448a:	e04e      	b.n	800452a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800448c:	693b      	ldr	r3, [r7, #16]
 800448e:	015a      	lsls	r2, r3, #5
 8004490:	697b      	ldr	r3, [r7, #20]
 8004492:	4413      	add	r3, r2
 8004494:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004498:	691b      	ldr	r3, [r3, #16]
 800449a:	693a      	ldr	r2, [r7, #16]
 800449c:	0151      	lsls	r1, r2, #5
 800449e:	697a      	ldr	r2, [r7, #20]
 80044a0:	440a      	add	r2, r1
 80044a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80044a6:	0cdb      	lsrs	r3, r3, #19
 80044a8:	04db      	lsls	r3, r3, #19
 80044aa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80044ac:	693b      	ldr	r3, [r7, #16]
 80044ae:	015a      	lsls	r2, r3, #5
 80044b0:	697b      	ldr	r3, [r7, #20]
 80044b2:	4413      	add	r3, r2
 80044b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044b8:	691b      	ldr	r3, [r3, #16]
 80044ba:	693a      	ldr	r2, [r7, #16]
 80044bc:	0151      	lsls	r1, r2, #5
 80044be:	697a      	ldr	r2, [r7, #20]
 80044c0:	440a      	add	r2, r1
 80044c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80044c6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80044ca:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80044ce:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80044d0:	68bb      	ldr	r3, [r7, #8]
 80044d2:	699a      	ldr	r2, [r3, #24]
 80044d4:	68bb      	ldr	r3, [r7, #8]
 80044d6:	68db      	ldr	r3, [r3, #12]
 80044d8:	429a      	cmp	r2, r3
 80044da:	d903      	bls.n	80044e4 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80044dc:	68bb      	ldr	r3, [r7, #8]
 80044de:	68da      	ldr	r2, [r3, #12]
 80044e0:	68bb      	ldr	r3, [r7, #8]
 80044e2:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80044e4:	693b      	ldr	r3, [r7, #16]
 80044e6:	015a      	lsls	r2, r3, #5
 80044e8:	697b      	ldr	r3, [r7, #20]
 80044ea:	4413      	add	r3, r2
 80044ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044f0:	691b      	ldr	r3, [r3, #16]
 80044f2:	693a      	ldr	r2, [r7, #16]
 80044f4:	0151      	lsls	r1, r2, #5
 80044f6:	697a      	ldr	r2, [r7, #20]
 80044f8:	440a      	add	r2, r1
 80044fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80044fe:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004502:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004504:	693b      	ldr	r3, [r7, #16]
 8004506:	015a      	lsls	r2, r3, #5
 8004508:	697b      	ldr	r3, [r7, #20]
 800450a:	4413      	add	r3, r2
 800450c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004510:	691a      	ldr	r2, [r3, #16]
 8004512:	68bb      	ldr	r3, [r7, #8]
 8004514:	699b      	ldr	r3, [r3, #24]
 8004516:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800451a:	6939      	ldr	r1, [r7, #16]
 800451c:	0148      	lsls	r0, r1, #5
 800451e:	6979      	ldr	r1, [r7, #20]
 8004520:	4401      	add	r1, r0
 8004522:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004526:	4313      	orrs	r3, r2
 8004528:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800452a:	79fb      	ldrb	r3, [r7, #7]
 800452c:	2b01      	cmp	r3, #1
 800452e:	d11e      	bne.n	800456e <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004530:	68bb      	ldr	r3, [r7, #8]
 8004532:	695b      	ldr	r3, [r3, #20]
 8004534:	2b00      	cmp	r3, #0
 8004536:	d009      	beq.n	800454c <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004538:	693b      	ldr	r3, [r7, #16]
 800453a:	015a      	lsls	r2, r3, #5
 800453c:	697b      	ldr	r3, [r7, #20]
 800453e:	4413      	add	r3, r2
 8004540:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004544:	461a      	mov	r2, r3
 8004546:	68bb      	ldr	r3, [r7, #8]
 8004548:	695b      	ldr	r3, [r3, #20]
 800454a:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800454c:	693b      	ldr	r3, [r7, #16]
 800454e:	015a      	lsls	r2, r3, #5
 8004550:	697b      	ldr	r3, [r7, #20]
 8004552:	4413      	add	r3, r2
 8004554:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	693a      	ldr	r2, [r7, #16]
 800455c:	0151      	lsls	r1, r2, #5
 800455e:	697a      	ldr	r2, [r7, #20]
 8004560:	440a      	add	r2, r1
 8004562:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004566:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800456a:	6013      	str	r3, [r2, #0]
 800456c:	e097      	b.n	800469e <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800456e:	693b      	ldr	r3, [r7, #16]
 8004570:	015a      	lsls	r2, r3, #5
 8004572:	697b      	ldr	r3, [r7, #20]
 8004574:	4413      	add	r3, r2
 8004576:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	693a      	ldr	r2, [r7, #16]
 800457e:	0151      	lsls	r1, r2, #5
 8004580:	697a      	ldr	r2, [r7, #20]
 8004582:	440a      	add	r2, r1
 8004584:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004588:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800458c:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800458e:	68bb      	ldr	r3, [r7, #8]
 8004590:	699b      	ldr	r3, [r3, #24]
 8004592:	2b00      	cmp	r3, #0
 8004594:	f000 8083 	beq.w	800469e <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004598:	697b      	ldr	r3, [r7, #20]
 800459a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800459e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80045a0:	68bb      	ldr	r3, [r7, #8]
 80045a2:	781b      	ldrb	r3, [r3, #0]
 80045a4:	f003 030f 	and.w	r3, r3, #15
 80045a8:	2101      	movs	r1, #1
 80045aa:	fa01 f303 	lsl.w	r3, r1, r3
 80045ae:	6979      	ldr	r1, [r7, #20]
 80045b0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80045b4:	4313      	orrs	r3, r2
 80045b6:	634b      	str	r3, [r1, #52]	; 0x34
 80045b8:	e071      	b.n	800469e <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80045ba:	693b      	ldr	r3, [r7, #16]
 80045bc:	015a      	lsls	r2, r3, #5
 80045be:	697b      	ldr	r3, [r7, #20]
 80045c0:	4413      	add	r3, r2
 80045c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045c6:	691b      	ldr	r3, [r3, #16]
 80045c8:	693a      	ldr	r2, [r7, #16]
 80045ca:	0151      	lsls	r1, r2, #5
 80045cc:	697a      	ldr	r2, [r7, #20]
 80045ce:	440a      	add	r2, r1
 80045d0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80045d4:	0cdb      	lsrs	r3, r3, #19
 80045d6:	04db      	lsls	r3, r3, #19
 80045d8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80045da:	693b      	ldr	r3, [r7, #16]
 80045dc:	015a      	lsls	r2, r3, #5
 80045de:	697b      	ldr	r3, [r7, #20]
 80045e0:	4413      	add	r3, r2
 80045e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045e6:	691b      	ldr	r3, [r3, #16]
 80045e8:	693a      	ldr	r2, [r7, #16]
 80045ea:	0151      	lsls	r1, r2, #5
 80045ec:	697a      	ldr	r2, [r7, #20]
 80045ee:	440a      	add	r2, r1
 80045f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80045f4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80045f8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80045fc:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80045fe:	68bb      	ldr	r3, [r7, #8]
 8004600:	699b      	ldr	r3, [r3, #24]
 8004602:	2b00      	cmp	r3, #0
 8004604:	d003      	beq.n	800460e <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8004606:	68bb      	ldr	r3, [r7, #8]
 8004608:	68da      	ldr	r2, [r3, #12]
 800460a:	68bb      	ldr	r3, [r7, #8]
 800460c:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800460e:	68bb      	ldr	r3, [r7, #8]
 8004610:	68da      	ldr	r2, [r3, #12]
 8004612:	68bb      	ldr	r3, [r7, #8]
 8004614:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004616:	693b      	ldr	r3, [r7, #16]
 8004618:	015a      	lsls	r2, r3, #5
 800461a:	697b      	ldr	r3, [r7, #20]
 800461c:	4413      	add	r3, r2
 800461e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004622:	691b      	ldr	r3, [r3, #16]
 8004624:	693a      	ldr	r2, [r7, #16]
 8004626:	0151      	lsls	r1, r2, #5
 8004628:	697a      	ldr	r2, [r7, #20]
 800462a:	440a      	add	r2, r1
 800462c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004630:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004634:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8004636:	693b      	ldr	r3, [r7, #16]
 8004638:	015a      	lsls	r2, r3, #5
 800463a:	697b      	ldr	r3, [r7, #20]
 800463c:	4413      	add	r3, r2
 800463e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004642:	691a      	ldr	r2, [r3, #16]
 8004644:	68bb      	ldr	r3, [r7, #8]
 8004646:	69db      	ldr	r3, [r3, #28]
 8004648:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800464c:	6939      	ldr	r1, [r7, #16]
 800464e:	0148      	lsls	r0, r1, #5
 8004650:	6979      	ldr	r1, [r7, #20]
 8004652:	4401      	add	r1, r0
 8004654:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004658:	4313      	orrs	r3, r2
 800465a:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800465c:	79fb      	ldrb	r3, [r7, #7]
 800465e:	2b01      	cmp	r3, #1
 8004660:	d10d      	bne.n	800467e <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004662:	68bb      	ldr	r3, [r7, #8]
 8004664:	691b      	ldr	r3, [r3, #16]
 8004666:	2b00      	cmp	r3, #0
 8004668:	d009      	beq.n	800467e <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800466a:	68bb      	ldr	r3, [r7, #8]
 800466c:	6919      	ldr	r1, [r3, #16]
 800466e:	693b      	ldr	r3, [r7, #16]
 8004670:	015a      	lsls	r2, r3, #5
 8004672:	697b      	ldr	r3, [r7, #20]
 8004674:	4413      	add	r3, r2
 8004676:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800467a:	460a      	mov	r2, r1
 800467c:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800467e:	693b      	ldr	r3, [r7, #16]
 8004680:	015a      	lsls	r2, r3, #5
 8004682:	697b      	ldr	r3, [r7, #20]
 8004684:	4413      	add	r3, r2
 8004686:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	693a      	ldr	r2, [r7, #16]
 800468e:	0151      	lsls	r1, r2, #5
 8004690:	697a      	ldr	r2, [r7, #20]
 8004692:	440a      	add	r2, r1
 8004694:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004698:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800469c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800469e:	2300      	movs	r3, #0
}
 80046a0:	4618      	mov	r0, r3
 80046a2:	371c      	adds	r7, #28
 80046a4:	46bd      	mov	sp, r7
 80046a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046aa:	4770      	bx	lr

080046ac <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80046ac:	b480      	push	{r7}
 80046ae:	b087      	sub	sp, #28
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
 80046b4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80046b6:	2300      	movs	r3, #0
 80046b8:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80046ba:	2300      	movs	r3, #0
 80046bc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80046c2:	683b      	ldr	r3, [r7, #0]
 80046c4:	785b      	ldrb	r3, [r3, #1]
 80046c6:	2b01      	cmp	r3, #1
 80046c8:	d14a      	bne.n	8004760 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	781b      	ldrb	r3, [r3, #0]
 80046ce:	015a      	lsls	r2, r3, #5
 80046d0:	693b      	ldr	r3, [r7, #16]
 80046d2:	4413      	add	r3, r2
 80046d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80046de:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80046e2:	f040 8086 	bne.w	80047f2 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80046e6:	683b      	ldr	r3, [r7, #0]
 80046e8:	781b      	ldrb	r3, [r3, #0]
 80046ea:	015a      	lsls	r2, r3, #5
 80046ec:	693b      	ldr	r3, [r7, #16]
 80046ee:	4413      	add	r3, r2
 80046f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	683a      	ldr	r2, [r7, #0]
 80046f8:	7812      	ldrb	r2, [r2, #0]
 80046fa:	0151      	lsls	r1, r2, #5
 80046fc:	693a      	ldr	r2, [r7, #16]
 80046fe:	440a      	add	r2, r1
 8004700:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004704:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004708:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800470a:	683b      	ldr	r3, [r7, #0]
 800470c:	781b      	ldrb	r3, [r3, #0]
 800470e:	015a      	lsls	r2, r3, #5
 8004710:	693b      	ldr	r3, [r7, #16]
 8004712:	4413      	add	r3, r2
 8004714:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	683a      	ldr	r2, [r7, #0]
 800471c:	7812      	ldrb	r2, [r2, #0]
 800471e:	0151      	lsls	r1, r2, #5
 8004720:	693a      	ldr	r2, [r7, #16]
 8004722:	440a      	add	r2, r1
 8004724:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004728:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800472c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	3301      	adds	r3, #1
 8004732:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	f242 7210 	movw	r2, #10000	; 0x2710
 800473a:	4293      	cmp	r3, r2
 800473c:	d902      	bls.n	8004744 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800473e:	2301      	movs	r3, #1
 8004740:	75fb      	strb	r3, [r7, #23]
          break;
 8004742:	e056      	b.n	80047f2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	781b      	ldrb	r3, [r3, #0]
 8004748:	015a      	lsls	r2, r3, #5
 800474a:	693b      	ldr	r3, [r7, #16]
 800474c:	4413      	add	r3, r2
 800474e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004758:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800475c:	d0e7      	beq.n	800472e <USB_EPStopXfer+0x82>
 800475e:	e048      	b.n	80047f2 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004760:	683b      	ldr	r3, [r7, #0]
 8004762:	781b      	ldrb	r3, [r3, #0]
 8004764:	015a      	lsls	r2, r3, #5
 8004766:	693b      	ldr	r3, [r7, #16]
 8004768:	4413      	add	r3, r2
 800476a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004774:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004778:	d13b      	bne.n	80047f2 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800477a:	683b      	ldr	r3, [r7, #0]
 800477c:	781b      	ldrb	r3, [r3, #0]
 800477e:	015a      	lsls	r2, r3, #5
 8004780:	693b      	ldr	r3, [r7, #16]
 8004782:	4413      	add	r3, r2
 8004784:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	683a      	ldr	r2, [r7, #0]
 800478c:	7812      	ldrb	r2, [r2, #0]
 800478e:	0151      	lsls	r1, r2, #5
 8004790:	693a      	ldr	r2, [r7, #16]
 8004792:	440a      	add	r2, r1
 8004794:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004798:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800479c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800479e:	683b      	ldr	r3, [r7, #0]
 80047a0:	781b      	ldrb	r3, [r3, #0]
 80047a2:	015a      	lsls	r2, r3, #5
 80047a4:	693b      	ldr	r3, [r7, #16]
 80047a6:	4413      	add	r3, r2
 80047a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	683a      	ldr	r2, [r7, #0]
 80047b0:	7812      	ldrb	r2, [r2, #0]
 80047b2:	0151      	lsls	r1, r2, #5
 80047b4:	693a      	ldr	r2, [r7, #16]
 80047b6:	440a      	add	r2, r1
 80047b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80047bc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80047c0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	3301      	adds	r3, #1
 80047c6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	f242 7210 	movw	r2, #10000	; 0x2710
 80047ce:	4293      	cmp	r3, r2
 80047d0:	d902      	bls.n	80047d8 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80047d2:	2301      	movs	r3, #1
 80047d4:	75fb      	strb	r3, [r7, #23]
          break;
 80047d6:	e00c      	b.n	80047f2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	781b      	ldrb	r3, [r3, #0]
 80047dc:	015a      	lsls	r2, r3, #5
 80047de:	693b      	ldr	r3, [r7, #16]
 80047e0:	4413      	add	r3, r2
 80047e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80047ec:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80047f0:	d0e7      	beq.n	80047c2 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80047f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80047f4:	4618      	mov	r0, r3
 80047f6:	371c      	adds	r7, #28
 80047f8:	46bd      	mov	sp, r7
 80047fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fe:	4770      	bx	lr

08004800 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004800:	b480      	push	{r7}
 8004802:	b089      	sub	sp, #36	; 0x24
 8004804:	af00      	add	r7, sp, #0
 8004806:	60f8      	str	r0, [r7, #12]
 8004808:	60b9      	str	r1, [r7, #8]
 800480a:	4611      	mov	r1, r2
 800480c:	461a      	mov	r2, r3
 800480e:	460b      	mov	r3, r1
 8004810:	71fb      	strb	r3, [r7, #7]
 8004812:	4613      	mov	r3, r2
 8004814:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800481a:	68bb      	ldr	r3, [r7, #8]
 800481c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800481e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004822:	2b00      	cmp	r3, #0
 8004824:	d123      	bne.n	800486e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8004826:	88bb      	ldrh	r3, [r7, #4]
 8004828:	3303      	adds	r3, #3
 800482a:	089b      	lsrs	r3, r3, #2
 800482c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800482e:	2300      	movs	r3, #0
 8004830:	61bb      	str	r3, [r7, #24]
 8004832:	e018      	b.n	8004866 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004834:	79fb      	ldrb	r3, [r7, #7]
 8004836:	031a      	lsls	r2, r3, #12
 8004838:	697b      	ldr	r3, [r7, #20]
 800483a:	4413      	add	r3, r2
 800483c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004840:	461a      	mov	r2, r3
 8004842:	69fb      	ldr	r3, [r7, #28]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004848:	69fb      	ldr	r3, [r7, #28]
 800484a:	3301      	adds	r3, #1
 800484c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800484e:	69fb      	ldr	r3, [r7, #28]
 8004850:	3301      	adds	r3, #1
 8004852:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004854:	69fb      	ldr	r3, [r7, #28]
 8004856:	3301      	adds	r3, #1
 8004858:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800485a:	69fb      	ldr	r3, [r7, #28]
 800485c:	3301      	adds	r3, #1
 800485e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004860:	69bb      	ldr	r3, [r7, #24]
 8004862:	3301      	adds	r3, #1
 8004864:	61bb      	str	r3, [r7, #24]
 8004866:	69ba      	ldr	r2, [r7, #24]
 8004868:	693b      	ldr	r3, [r7, #16]
 800486a:	429a      	cmp	r2, r3
 800486c:	d3e2      	bcc.n	8004834 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800486e:	2300      	movs	r3, #0
}
 8004870:	4618      	mov	r0, r3
 8004872:	3724      	adds	r7, #36	; 0x24
 8004874:	46bd      	mov	sp, r7
 8004876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487a:	4770      	bx	lr

0800487c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800487c:	b480      	push	{r7}
 800487e:	b08b      	sub	sp, #44	; 0x2c
 8004880:	af00      	add	r7, sp, #0
 8004882:	60f8      	str	r0, [r7, #12]
 8004884:	60b9      	str	r1, [r7, #8]
 8004886:	4613      	mov	r3, r2
 8004888:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800488e:	68bb      	ldr	r3, [r7, #8]
 8004890:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8004892:	88fb      	ldrh	r3, [r7, #6]
 8004894:	089b      	lsrs	r3, r3, #2
 8004896:	b29b      	uxth	r3, r3
 8004898:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800489a:	88fb      	ldrh	r3, [r7, #6]
 800489c:	f003 0303 	and.w	r3, r3, #3
 80048a0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80048a2:	2300      	movs	r3, #0
 80048a4:	623b      	str	r3, [r7, #32]
 80048a6:	e014      	b.n	80048d2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80048a8:	69bb      	ldr	r3, [r7, #24]
 80048aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80048ae:	681a      	ldr	r2, [r3, #0]
 80048b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048b2:	601a      	str	r2, [r3, #0]
    pDest++;
 80048b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048b6:	3301      	adds	r3, #1
 80048b8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80048ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048bc:	3301      	adds	r3, #1
 80048be:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80048c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048c2:	3301      	adds	r3, #1
 80048c4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80048c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048c8:	3301      	adds	r3, #1
 80048ca:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80048cc:	6a3b      	ldr	r3, [r7, #32]
 80048ce:	3301      	adds	r3, #1
 80048d0:	623b      	str	r3, [r7, #32]
 80048d2:	6a3a      	ldr	r2, [r7, #32]
 80048d4:	697b      	ldr	r3, [r7, #20]
 80048d6:	429a      	cmp	r2, r3
 80048d8:	d3e6      	bcc.n	80048a8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80048da:	8bfb      	ldrh	r3, [r7, #30]
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d01e      	beq.n	800491e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80048e0:	2300      	movs	r3, #0
 80048e2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80048e4:	69bb      	ldr	r3, [r7, #24]
 80048e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80048ea:	461a      	mov	r2, r3
 80048ec:	f107 0310 	add.w	r3, r7, #16
 80048f0:	6812      	ldr	r2, [r2, #0]
 80048f2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80048f4:	693a      	ldr	r2, [r7, #16]
 80048f6:	6a3b      	ldr	r3, [r7, #32]
 80048f8:	b2db      	uxtb	r3, r3
 80048fa:	00db      	lsls	r3, r3, #3
 80048fc:	fa22 f303 	lsr.w	r3, r2, r3
 8004900:	b2da      	uxtb	r2, r3
 8004902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004904:	701a      	strb	r2, [r3, #0]
      i++;
 8004906:	6a3b      	ldr	r3, [r7, #32]
 8004908:	3301      	adds	r3, #1
 800490a:	623b      	str	r3, [r7, #32]
      pDest++;
 800490c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800490e:	3301      	adds	r3, #1
 8004910:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8004912:	8bfb      	ldrh	r3, [r7, #30]
 8004914:	3b01      	subs	r3, #1
 8004916:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8004918:	8bfb      	ldrh	r3, [r7, #30]
 800491a:	2b00      	cmp	r3, #0
 800491c:	d1ea      	bne.n	80048f4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800491e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004920:	4618      	mov	r0, r3
 8004922:	372c      	adds	r7, #44	; 0x2c
 8004924:	46bd      	mov	sp, r7
 8004926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492a:	4770      	bx	lr

0800492c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800492c:	b480      	push	{r7}
 800492e:	b085      	sub	sp, #20
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]
 8004934:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800493a:	683b      	ldr	r3, [r7, #0]
 800493c:	781b      	ldrb	r3, [r3, #0]
 800493e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004940:	683b      	ldr	r3, [r7, #0]
 8004942:	785b      	ldrb	r3, [r3, #1]
 8004944:	2b01      	cmp	r3, #1
 8004946:	d12c      	bne.n	80049a2 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004948:	68bb      	ldr	r3, [r7, #8]
 800494a:	015a      	lsls	r2, r3, #5
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	4413      	add	r3, r2
 8004950:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	2b00      	cmp	r3, #0
 8004958:	db12      	blt.n	8004980 <USB_EPSetStall+0x54>
 800495a:	68bb      	ldr	r3, [r7, #8]
 800495c:	2b00      	cmp	r3, #0
 800495e:	d00f      	beq.n	8004980 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8004960:	68bb      	ldr	r3, [r7, #8]
 8004962:	015a      	lsls	r2, r3, #5
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	4413      	add	r3, r2
 8004968:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	68ba      	ldr	r2, [r7, #8]
 8004970:	0151      	lsls	r1, r2, #5
 8004972:	68fa      	ldr	r2, [r7, #12]
 8004974:	440a      	add	r2, r1
 8004976:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800497a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800497e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8004980:	68bb      	ldr	r3, [r7, #8]
 8004982:	015a      	lsls	r2, r3, #5
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	4413      	add	r3, r2
 8004988:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	68ba      	ldr	r2, [r7, #8]
 8004990:	0151      	lsls	r1, r2, #5
 8004992:	68fa      	ldr	r2, [r7, #12]
 8004994:	440a      	add	r2, r1
 8004996:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800499a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800499e:	6013      	str	r3, [r2, #0]
 80049a0:	e02b      	b.n	80049fa <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80049a2:	68bb      	ldr	r3, [r7, #8]
 80049a4:	015a      	lsls	r2, r3, #5
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	4413      	add	r3, r2
 80049aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	db12      	blt.n	80049da <USB_EPSetStall+0xae>
 80049b4:	68bb      	ldr	r3, [r7, #8]
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d00f      	beq.n	80049da <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80049ba:	68bb      	ldr	r3, [r7, #8]
 80049bc:	015a      	lsls	r2, r3, #5
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	4413      	add	r3, r2
 80049c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	68ba      	ldr	r2, [r7, #8]
 80049ca:	0151      	lsls	r1, r2, #5
 80049cc:	68fa      	ldr	r2, [r7, #12]
 80049ce:	440a      	add	r2, r1
 80049d0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80049d4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80049d8:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80049da:	68bb      	ldr	r3, [r7, #8]
 80049dc:	015a      	lsls	r2, r3, #5
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	4413      	add	r3, r2
 80049e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	68ba      	ldr	r2, [r7, #8]
 80049ea:	0151      	lsls	r1, r2, #5
 80049ec:	68fa      	ldr	r2, [r7, #12]
 80049ee:	440a      	add	r2, r1
 80049f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80049f4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80049f8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80049fa:	2300      	movs	r3, #0
}
 80049fc:	4618      	mov	r0, r3
 80049fe:	3714      	adds	r7, #20
 8004a00:	46bd      	mov	sp, r7
 8004a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a06:	4770      	bx	lr

08004a08 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004a08:	b480      	push	{r7}
 8004a0a:	b085      	sub	sp, #20
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	6078      	str	r0, [r7, #4]
 8004a10:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004a16:	683b      	ldr	r3, [r7, #0]
 8004a18:	781b      	ldrb	r3, [r3, #0]
 8004a1a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	785b      	ldrb	r3, [r3, #1]
 8004a20:	2b01      	cmp	r3, #1
 8004a22:	d128      	bne.n	8004a76 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004a24:	68bb      	ldr	r3, [r7, #8]
 8004a26:	015a      	lsls	r2, r3, #5
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	4413      	add	r3, r2
 8004a2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	68ba      	ldr	r2, [r7, #8]
 8004a34:	0151      	lsls	r1, r2, #5
 8004a36:	68fa      	ldr	r2, [r7, #12]
 8004a38:	440a      	add	r2, r1
 8004a3a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a3e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004a42:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004a44:	683b      	ldr	r3, [r7, #0]
 8004a46:	791b      	ldrb	r3, [r3, #4]
 8004a48:	2b03      	cmp	r3, #3
 8004a4a:	d003      	beq.n	8004a54 <USB_EPClearStall+0x4c>
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	791b      	ldrb	r3, [r3, #4]
 8004a50:	2b02      	cmp	r3, #2
 8004a52:	d138      	bne.n	8004ac6 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004a54:	68bb      	ldr	r3, [r7, #8]
 8004a56:	015a      	lsls	r2, r3, #5
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	4413      	add	r3, r2
 8004a5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	68ba      	ldr	r2, [r7, #8]
 8004a64:	0151      	lsls	r1, r2, #5
 8004a66:	68fa      	ldr	r2, [r7, #12]
 8004a68:	440a      	add	r2, r1
 8004a6a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a6e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a72:	6013      	str	r3, [r2, #0]
 8004a74:	e027      	b.n	8004ac6 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004a76:	68bb      	ldr	r3, [r7, #8]
 8004a78:	015a      	lsls	r2, r3, #5
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	4413      	add	r3, r2
 8004a7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	68ba      	ldr	r2, [r7, #8]
 8004a86:	0151      	lsls	r1, r2, #5
 8004a88:	68fa      	ldr	r2, [r7, #12]
 8004a8a:	440a      	add	r2, r1
 8004a8c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004a90:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004a94:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004a96:	683b      	ldr	r3, [r7, #0]
 8004a98:	791b      	ldrb	r3, [r3, #4]
 8004a9a:	2b03      	cmp	r3, #3
 8004a9c:	d003      	beq.n	8004aa6 <USB_EPClearStall+0x9e>
 8004a9e:	683b      	ldr	r3, [r7, #0]
 8004aa0:	791b      	ldrb	r3, [r3, #4]
 8004aa2:	2b02      	cmp	r3, #2
 8004aa4:	d10f      	bne.n	8004ac6 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004aa6:	68bb      	ldr	r3, [r7, #8]
 8004aa8:	015a      	lsls	r2, r3, #5
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	4413      	add	r3, r2
 8004aae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	68ba      	ldr	r2, [r7, #8]
 8004ab6:	0151      	lsls	r1, r2, #5
 8004ab8:	68fa      	ldr	r2, [r7, #12]
 8004aba:	440a      	add	r2, r1
 8004abc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004ac0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ac4:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8004ac6:	2300      	movs	r3, #0
}
 8004ac8:	4618      	mov	r0, r3
 8004aca:	3714      	adds	r7, #20
 8004acc:	46bd      	mov	sp, r7
 8004ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad2:	4770      	bx	lr

08004ad4 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8004ad4:	b480      	push	{r7}
 8004ad6:	b085      	sub	sp, #20
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]
 8004adc:	460b      	mov	r3, r1
 8004ade:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	68fa      	ldr	r2, [r7, #12]
 8004aee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004af2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004af6:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004afe:	681a      	ldr	r2, [r3, #0]
 8004b00:	78fb      	ldrb	r3, [r7, #3]
 8004b02:	011b      	lsls	r3, r3, #4
 8004b04:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8004b08:	68f9      	ldr	r1, [r7, #12]
 8004b0a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004b0e:	4313      	orrs	r3, r2
 8004b10:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8004b12:	2300      	movs	r3, #0
}
 8004b14:	4618      	mov	r0, r3
 8004b16:	3714      	adds	r7, #20
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1e:	4770      	bx	lr

08004b20 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004b20:	b480      	push	{r7}
 8004b22:	b085      	sub	sp, #20
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	68fa      	ldr	r2, [r7, #12]
 8004b36:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004b3a:	f023 0303 	bic.w	r3, r3, #3
 8004b3e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b46:	685b      	ldr	r3, [r3, #4]
 8004b48:	68fa      	ldr	r2, [r7, #12]
 8004b4a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004b4e:	f023 0302 	bic.w	r3, r3, #2
 8004b52:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004b54:	2300      	movs	r3, #0
}
 8004b56:	4618      	mov	r0, r3
 8004b58:	3714      	adds	r7, #20
 8004b5a:	46bd      	mov	sp, r7
 8004b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b60:	4770      	bx	lr

08004b62 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004b62:	b480      	push	{r7}
 8004b64:	b085      	sub	sp, #20
 8004b66:	af00      	add	r7, sp, #0
 8004b68:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	68fa      	ldr	r2, [r7, #12]
 8004b78:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004b7c:	f023 0303 	bic.w	r3, r3, #3
 8004b80:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b88:	685b      	ldr	r3, [r3, #4]
 8004b8a:	68fa      	ldr	r2, [r7, #12]
 8004b8c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004b90:	f043 0302 	orr.w	r3, r3, #2
 8004b94:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004b96:	2300      	movs	r3, #0
}
 8004b98:	4618      	mov	r0, r3
 8004b9a:	3714      	adds	r7, #20
 8004b9c:	46bd      	mov	sp, r7
 8004b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba2:	4770      	bx	lr

08004ba4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8004ba4:	b480      	push	{r7}
 8004ba6:	b085      	sub	sp, #20
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	695b      	ldr	r3, [r3, #20]
 8004bb0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	699b      	ldr	r3, [r3, #24]
 8004bb6:	68fa      	ldr	r2, [r7, #12]
 8004bb8:	4013      	ands	r3, r2
 8004bba:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004bbc:	68fb      	ldr	r3, [r7, #12]
}
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	3714      	adds	r7, #20
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc8:	4770      	bx	lr

08004bca <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004bca:	b480      	push	{r7}
 8004bcc:	b085      	sub	sp, #20
 8004bce:	af00      	add	r7, sp, #0
 8004bd0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bdc:	699b      	ldr	r3, [r3, #24]
 8004bde:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004be6:	69db      	ldr	r3, [r3, #28]
 8004be8:	68ba      	ldr	r2, [r7, #8]
 8004bea:	4013      	ands	r3, r2
 8004bec:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8004bee:	68bb      	ldr	r3, [r7, #8]
 8004bf0:	0c1b      	lsrs	r3, r3, #16
}
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	3714      	adds	r7, #20
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfc:	4770      	bx	lr

08004bfe <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004bfe:	b480      	push	{r7}
 8004c00:	b085      	sub	sp, #20
 8004c02:	af00      	add	r7, sp, #0
 8004c04:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c10:	699b      	ldr	r3, [r3, #24]
 8004c12:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c1a:	69db      	ldr	r3, [r3, #28]
 8004c1c:	68ba      	ldr	r2, [r7, #8]
 8004c1e:	4013      	ands	r3, r2
 8004c20:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8004c22:	68bb      	ldr	r3, [r7, #8]
 8004c24:	b29b      	uxth	r3, r3
}
 8004c26:	4618      	mov	r0, r3
 8004c28:	3714      	adds	r7, #20
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c30:	4770      	bx	lr

08004c32 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004c32:	b480      	push	{r7}
 8004c34:	b085      	sub	sp, #20
 8004c36:	af00      	add	r7, sp, #0
 8004c38:	6078      	str	r0, [r7, #4]
 8004c3a:	460b      	mov	r3, r1
 8004c3c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8004c42:	78fb      	ldrb	r3, [r7, #3]
 8004c44:	015a      	lsls	r2, r3, #5
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	4413      	add	r3, r2
 8004c4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c4e:	689b      	ldr	r3, [r3, #8]
 8004c50:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c58:	695b      	ldr	r3, [r3, #20]
 8004c5a:	68ba      	ldr	r2, [r7, #8]
 8004c5c:	4013      	ands	r3, r2
 8004c5e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004c60:	68bb      	ldr	r3, [r7, #8]
}
 8004c62:	4618      	mov	r0, r3
 8004c64:	3714      	adds	r7, #20
 8004c66:	46bd      	mov	sp, r7
 8004c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6c:	4770      	bx	lr

08004c6e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004c6e:	b480      	push	{r7}
 8004c70:	b087      	sub	sp, #28
 8004c72:	af00      	add	r7, sp, #0
 8004c74:	6078      	str	r0, [r7, #4]
 8004c76:	460b      	mov	r3, r1
 8004c78:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8004c7e:	697b      	ldr	r3, [r7, #20]
 8004c80:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c84:	691b      	ldr	r3, [r3, #16]
 8004c86:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8004c88:	697b      	ldr	r3, [r7, #20]
 8004c8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c90:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8004c92:	78fb      	ldrb	r3, [r7, #3]
 8004c94:	f003 030f 	and.w	r3, r3, #15
 8004c98:	68fa      	ldr	r2, [r7, #12]
 8004c9a:	fa22 f303 	lsr.w	r3, r2, r3
 8004c9e:	01db      	lsls	r3, r3, #7
 8004ca0:	b2db      	uxtb	r3, r3
 8004ca2:	693a      	ldr	r2, [r7, #16]
 8004ca4:	4313      	orrs	r3, r2
 8004ca6:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8004ca8:	78fb      	ldrb	r3, [r7, #3]
 8004caa:	015a      	lsls	r2, r3, #5
 8004cac:	697b      	ldr	r3, [r7, #20]
 8004cae:	4413      	add	r3, r2
 8004cb0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cb4:	689b      	ldr	r3, [r3, #8]
 8004cb6:	693a      	ldr	r2, [r7, #16]
 8004cb8:	4013      	ands	r3, r2
 8004cba:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004cbc:	68bb      	ldr	r3, [r7, #8]
}
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	371c      	adds	r7, #28
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc8:	4770      	bx	lr

08004cca <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004cca:	b480      	push	{r7}
 8004ccc:	b083      	sub	sp, #12
 8004cce:	af00      	add	r7, sp, #0
 8004cd0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	695b      	ldr	r3, [r3, #20]
 8004cd6:	f003 0301 	and.w	r3, r3, #1
}
 8004cda:	4618      	mov	r0, r3
 8004cdc:	370c      	adds	r7, #12
 8004cde:	46bd      	mov	sp, r7
 8004ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce4:	4770      	bx	lr

08004ce6 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8004ce6:	b480      	push	{r7}
 8004ce8:	b085      	sub	sp, #20
 8004cea:	af00      	add	r7, sp, #0
 8004cec:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	68fa      	ldr	r2, [r7, #12]
 8004cfc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d00:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004d04:	f023 0307 	bic.w	r3, r3, #7
 8004d08:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d10:	685b      	ldr	r3, [r3, #4]
 8004d12:	68fa      	ldr	r2, [r7, #12]
 8004d14:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004d18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d1c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004d1e:	2300      	movs	r3, #0
}
 8004d20:	4618      	mov	r0, r3
 8004d22:	3714      	adds	r7, #20
 8004d24:	46bd      	mov	sp, r7
 8004d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2a:	4770      	bx	lr

08004d2c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8004d2c:	b480      	push	{r7}
 8004d2e:	b087      	sub	sp, #28
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	60f8      	str	r0, [r7, #12]
 8004d34:	460b      	mov	r3, r1
 8004d36:	607a      	str	r2, [r7, #4]
 8004d38:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	333c      	adds	r3, #60	; 0x3c
 8004d42:	3304      	adds	r3, #4
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8004d48:	693b      	ldr	r3, [r7, #16]
 8004d4a:	4a26      	ldr	r2, [pc, #152]	; (8004de4 <USB_EP0_OutStart+0xb8>)
 8004d4c:	4293      	cmp	r3, r2
 8004d4e:	d90a      	bls.n	8004d66 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004d50:	697b      	ldr	r3, [r7, #20]
 8004d52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004d5c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004d60:	d101      	bne.n	8004d66 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8004d62:	2300      	movs	r3, #0
 8004d64:	e037      	b.n	8004dd6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8004d66:	697b      	ldr	r3, [r7, #20]
 8004d68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d6c:	461a      	mov	r2, r3
 8004d6e:	2300      	movs	r3, #0
 8004d70:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004d72:	697b      	ldr	r3, [r7, #20]
 8004d74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d78:	691b      	ldr	r3, [r3, #16]
 8004d7a:	697a      	ldr	r2, [r7, #20]
 8004d7c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004d80:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004d84:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8004d86:	697b      	ldr	r3, [r7, #20]
 8004d88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d8c:	691b      	ldr	r3, [r3, #16]
 8004d8e:	697a      	ldr	r2, [r7, #20]
 8004d90:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004d94:	f043 0318 	orr.w	r3, r3, #24
 8004d98:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8004d9a:	697b      	ldr	r3, [r7, #20]
 8004d9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004da0:	691b      	ldr	r3, [r3, #16]
 8004da2:	697a      	ldr	r2, [r7, #20]
 8004da4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004da8:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8004dac:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8004dae:	7afb      	ldrb	r3, [r7, #11]
 8004db0:	2b01      	cmp	r3, #1
 8004db2:	d10f      	bne.n	8004dd4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8004db4:	697b      	ldr	r3, [r7, #20]
 8004db6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004dba:	461a      	mov	r2, r3
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8004dc0:	697b      	ldr	r3, [r7, #20]
 8004dc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	697a      	ldr	r2, [r7, #20]
 8004dca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004dce:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8004dd2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004dd4:	2300      	movs	r3, #0
}
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	371c      	adds	r7, #28
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de0:	4770      	bx	lr
 8004de2:	bf00      	nop
 8004de4:	4f54300a 	.word	0x4f54300a

08004de8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004de8:	b480      	push	{r7}
 8004dea:	b085      	sub	sp, #20
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004df0:	2300      	movs	r3, #0
 8004df2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	3301      	adds	r3, #1
 8004df8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	4a13      	ldr	r2, [pc, #76]	; (8004e4c <USB_CoreReset+0x64>)
 8004dfe:	4293      	cmp	r3, r2
 8004e00:	d901      	bls.n	8004e06 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004e02:	2303      	movs	r3, #3
 8004e04:	e01b      	b.n	8004e3e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	691b      	ldr	r3, [r3, #16]
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	daf2      	bge.n	8004df4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004e0e:	2300      	movs	r3, #0
 8004e10:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	691b      	ldr	r3, [r3, #16]
 8004e16:	f043 0201 	orr.w	r2, r3, #1
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	3301      	adds	r3, #1
 8004e22:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	4a09      	ldr	r2, [pc, #36]	; (8004e4c <USB_CoreReset+0x64>)
 8004e28:	4293      	cmp	r3, r2
 8004e2a:	d901      	bls.n	8004e30 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004e2c:	2303      	movs	r3, #3
 8004e2e:	e006      	b.n	8004e3e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	691b      	ldr	r3, [r3, #16]
 8004e34:	f003 0301 	and.w	r3, r3, #1
 8004e38:	2b01      	cmp	r3, #1
 8004e3a:	d0f0      	beq.n	8004e1e <USB_CoreReset+0x36>

  return HAL_OK;
 8004e3c:	2300      	movs	r3, #0
}
 8004e3e:	4618      	mov	r0, r3
 8004e40:	3714      	adds	r7, #20
 8004e42:	46bd      	mov	sp, r7
 8004e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e48:	4770      	bx	lr
 8004e4a:	bf00      	nop
 8004e4c:	00030d40 	.word	0x00030d40

08004e50 <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004e50:	b580      	push	{r7, lr}
 8004e52:	b084      	sub	sp, #16
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]
 8004e58:	460b      	mov	r3, r1
 8004e5a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_HID_HandleTypeDef *hhid;

  hhid = (USBD_HID_HandleTypeDef *)USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 8004e5c:	2010      	movs	r0, #16
 8004e5e:	f002 f91b 	bl	8007098 <USBD_static_malloc>
 8004e62:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d109      	bne.n	8004e7e <USBD_HID_Init+0x2e>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	32b0      	adds	r2, #176	; 0xb0
 8004e74:	2100      	movs	r1, #0
 8004e76:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8004e7a:	2302      	movs	r3, #2
 8004e7c:	e048      	b.n	8004f10 <USBD_HID_Init+0xc0>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hhid;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	32b0      	adds	r2, #176	; 0xb0
 8004e88:	68f9      	ldr	r1, [r7, #12]
 8004e8a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	32b0      	adds	r2, #176	; 0xb0
 8004e98:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	7c1b      	ldrb	r3, [r3, #16]
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d10d      	bne.n	8004ec6 <USBD_HID_Init+0x76>
  {
    pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = HID_HS_BINTERVAL;
 8004eaa:	4b1b      	ldr	r3, [pc, #108]	; (8004f18 <USBD_HID_Init+0xc8>)
 8004eac:	781b      	ldrb	r3, [r3, #0]
 8004eae:	f003 020f 	and.w	r2, r3, #15
 8004eb2:	6879      	ldr	r1, [r7, #4]
 8004eb4:	4613      	mov	r3, r2
 8004eb6:	009b      	lsls	r3, r3, #2
 8004eb8:	4413      	add	r3, r2
 8004eba:	009b      	lsls	r3, r3, #2
 8004ebc:	440b      	add	r3, r1
 8004ebe:	3326      	adds	r3, #38	; 0x26
 8004ec0:	2207      	movs	r2, #7
 8004ec2:	801a      	strh	r2, [r3, #0]
 8004ec4:	e00c      	b.n	8004ee0 <USBD_HID_Init+0x90>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = HID_FS_BINTERVAL;
 8004ec6:	4b14      	ldr	r3, [pc, #80]	; (8004f18 <USBD_HID_Init+0xc8>)
 8004ec8:	781b      	ldrb	r3, [r3, #0]
 8004eca:	f003 020f 	and.w	r2, r3, #15
 8004ece:	6879      	ldr	r1, [r7, #4]
 8004ed0:	4613      	mov	r3, r2
 8004ed2:	009b      	lsls	r3, r3, #2
 8004ed4:	4413      	add	r3, r2
 8004ed6:	009b      	lsls	r3, r3, #2
 8004ed8:	440b      	add	r3, r1
 8004eda:	3326      	adds	r3, #38	; 0x26
 8004edc:	220a      	movs	r2, #10
 8004ede:	801a      	strh	r2, [r3, #0]
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, HIDInEpAdd, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 8004ee0:	4b0d      	ldr	r3, [pc, #52]	; (8004f18 <USBD_HID_Init+0xc8>)
 8004ee2:	7819      	ldrb	r1, [r3, #0]
 8004ee4:	2304      	movs	r3, #4
 8004ee6:	2203      	movs	r2, #3
 8004ee8:	6878      	ldr	r0, [r7, #4]
 8004eea:	f001 ffc4 	bl	8006e76 <USBD_LL_OpenEP>
  pdev->ep_in[HIDInEpAdd & 0xFU].is_used = 1U;
 8004eee:	4b0a      	ldr	r3, [pc, #40]	; (8004f18 <USBD_HID_Init+0xc8>)
 8004ef0:	781b      	ldrb	r3, [r3, #0]
 8004ef2:	f003 020f 	and.w	r2, r3, #15
 8004ef6:	6879      	ldr	r1, [r7, #4]
 8004ef8:	4613      	mov	r3, r2
 8004efa:	009b      	lsls	r3, r3, #2
 8004efc:	4413      	add	r3, r2
 8004efe:	009b      	lsls	r3, r3, #2
 8004f00:	440b      	add	r3, r1
 8004f02:	3324      	adds	r3, #36	; 0x24
 8004f04:	2201      	movs	r2, #1
 8004f06:	801a      	strh	r2, [r3, #0]

  hhid->state = HID_IDLE;
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	2200      	movs	r2, #0
 8004f0c:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 8004f0e:	2300      	movs	r3, #0
}
 8004f10:	4618      	mov	r0, r3
 8004f12:	3710      	adds	r7, #16
 8004f14:	46bd      	mov	sp, r7
 8004f16:	bd80      	pop	{r7, pc}
 8004f18:	200000bf 	.word	0x200000bf

08004f1c <USBD_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004f1c:	b580      	push	{r7, lr}
 8004f1e:	b082      	sub	sp, #8
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	6078      	str	r0, [r7, #4]
 8004f24:	460b      	mov	r3, r1
 8004f26:	70fb      	strb	r3, [r7, #3]
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close HID EPs */
  (void)USBD_LL_CloseEP(pdev, HIDInEpAdd);
 8004f28:	4b1f      	ldr	r3, [pc, #124]	; (8004fa8 <USBD_HID_DeInit+0x8c>)
 8004f2a:	781b      	ldrb	r3, [r3, #0]
 8004f2c:	4619      	mov	r1, r3
 8004f2e:	6878      	ldr	r0, [r7, #4]
 8004f30:	f001 ffc7 	bl	8006ec2 <USBD_LL_CloseEP>
  pdev->ep_in[HIDInEpAdd & 0xFU].is_used = 0U;
 8004f34:	4b1c      	ldr	r3, [pc, #112]	; (8004fa8 <USBD_HID_DeInit+0x8c>)
 8004f36:	781b      	ldrb	r3, [r3, #0]
 8004f38:	f003 020f 	and.w	r2, r3, #15
 8004f3c:	6879      	ldr	r1, [r7, #4]
 8004f3e:	4613      	mov	r3, r2
 8004f40:	009b      	lsls	r3, r3, #2
 8004f42:	4413      	add	r3, r2
 8004f44:	009b      	lsls	r3, r3, #2
 8004f46:	440b      	add	r3, r1
 8004f48:	3324      	adds	r3, #36	; 0x24
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = 0U;
 8004f4e:	4b16      	ldr	r3, [pc, #88]	; (8004fa8 <USBD_HID_DeInit+0x8c>)
 8004f50:	781b      	ldrb	r3, [r3, #0]
 8004f52:	f003 020f 	and.w	r2, r3, #15
 8004f56:	6879      	ldr	r1, [r7, #4]
 8004f58:	4613      	mov	r3, r2
 8004f5a:	009b      	lsls	r3, r3, #2
 8004f5c:	4413      	add	r3, r2
 8004f5e:	009b      	lsls	r3, r3, #2
 8004f60:	440b      	add	r3, r1
 8004f62:	3326      	adds	r3, #38	; 0x26
 8004f64:	2200      	movs	r2, #0
 8004f66:	801a      	strh	r2, [r3, #0]

  /* Free allocated memory */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	32b0      	adds	r2, #176	; 0xb0
 8004f72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d011      	beq.n	8004f9e <USBD_HID_DeInit+0x82>
  {
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	32b0      	adds	r2, #176	; 0xb0
 8004f84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f88:	4618      	mov	r0, r3
 8004f8a:	f002 f893 	bl	80070b4 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	32b0      	adds	r2, #176	; 0xb0
 8004f98:	2100      	movs	r1, #0
 8004f9a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return (uint8_t)USBD_OK;
 8004f9e:	2300      	movs	r3, #0
}
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	3708      	adds	r7, #8
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	bd80      	pop	{r7, pc}
 8004fa8:	200000bf 	.word	0x200000bf

08004fac <USBD_HID_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_HID_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8004fac:	b580      	push	{r7, lr}
 8004fae:	b086      	sub	sp, #24
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	6078      	str	r0, [r7, #4]
 8004fb4:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	32b0      	adds	r2, #176	; 0xb0
 8004fc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004fc4:	60fb      	str	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 8004fc6:	2300      	movs	r3, #0
 8004fc8:	75fb      	strb	r3, [r7, #23]
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 8004fca:	2300      	movs	r3, #0
 8004fcc:	817b      	strh	r3, [r7, #10]

  if (hhid == NULL)
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d101      	bne.n	8004fd8 <USBD_HID_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 8004fd4:	2303      	movs	r3, #3
 8004fd6:	e0e8      	b.n	80051aa <USBD_HID_Setup+0x1fe>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004fd8:	683b      	ldr	r3, [r7, #0]
 8004fda:	781b      	ldrb	r3, [r3, #0]
 8004fdc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d046      	beq.n	8005072 <USBD_HID_Setup+0xc6>
 8004fe4:	2b20      	cmp	r3, #32
 8004fe6:	f040 80d8 	bne.w	800519a <USBD_HID_Setup+0x1ee>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 8004fea:	683b      	ldr	r3, [r7, #0]
 8004fec:	785b      	ldrb	r3, [r3, #1]
 8004fee:	3b02      	subs	r3, #2
 8004ff0:	2b09      	cmp	r3, #9
 8004ff2:	d836      	bhi.n	8005062 <USBD_HID_Setup+0xb6>
 8004ff4:	a201      	add	r2, pc, #4	; (adr r2, 8004ffc <USBD_HID_Setup+0x50>)
 8004ff6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ffa:	bf00      	nop
 8004ffc:	08005053 	.word	0x08005053
 8005000:	08005033 	.word	0x08005033
 8005004:	08005063 	.word	0x08005063
 8005008:	08005063 	.word	0x08005063
 800500c:	08005063 	.word	0x08005063
 8005010:	08005063 	.word	0x08005063
 8005014:	08005063 	.word	0x08005063
 8005018:	08005063 	.word	0x08005063
 800501c:	08005041 	.word	0x08005041
 8005020:	08005025 	.word	0x08005025
      {
        case HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8005024:	683b      	ldr	r3, [r7, #0]
 8005026:	885b      	ldrh	r3, [r3, #2]
 8005028:	b2db      	uxtb	r3, r3
 800502a:	461a      	mov	r2, r3
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	601a      	str	r2, [r3, #0]
          break;
 8005030:	e01e      	b.n	8005070 <USBD_HID_Setup+0xc4>

        case HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	2201      	movs	r2, #1
 8005036:	4619      	mov	r1, r3
 8005038:	6878      	ldr	r0, [r7, #4]
 800503a:	f001 fbd5 	bl	80067e8 <USBD_CtlSendData>
          break;
 800503e:	e017      	b.n	8005070 <USBD_HID_Setup+0xc4>

        case HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8005040:	683b      	ldr	r3, [r7, #0]
 8005042:	885b      	ldrh	r3, [r3, #2]
 8005044:	0a1b      	lsrs	r3, r3, #8
 8005046:	b29b      	uxth	r3, r3
 8005048:	b2db      	uxtb	r3, r3
 800504a:	461a      	mov	r2, r3
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	605a      	str	r2, [r3, #4]
          break;
 8005050:	e00e      	b.n	8005070 <USBD_HID_Setup+0xc4>

        case HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	3304      	adds	r3, #4
 8005056:	2201      	movs	r2, #1
 8005058:	4619      	mov	r1, r3
 800505a:	6878      	ldr	r0, [r7, #4]
 800505c:	f001 fbc4 	bl	80067e8 <USBD_CtlSendData>
          break;
 8005060:	e006      	b.n	8005070 <USBD_HID_Setup+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8005062:	6839      	ldr	r1, [r7, #0]
 8005064:	6878      	ldr	r0, [r7, #4]
 8005066:	f001 fb4e 	bl	8006706 <USBD_CtlError>
          ret = USBD_FAIL;
 800506a:	2303      	movs	r3, #3
 800506c:	75fb      	strb	r3, [r7, #23]
          break;
 800506e:	bf00      	nop
      }
      break;
 8005070:	e09a      	b.n	80051a8 <USBD_HID_Setup+0x1fc>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005072:	683b      	ldr	r3, [r7, #0]
 8005074:	785b      	ldrb	r3, [r3, #1]
 8005076:	2b0b      	cmp	r3, #11
 8005078:	f200 8086 	bhi.w	8005188 <USBD_HID_Setup+0x1dc>
 800507c:	a201      	add	r2, pc, #4	; (adr r2, 8005084 <USBD_HID_Setup+0xd8>)
 800507e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005082:	bf00      	nop
 8005084:	080050b5 	.word	0x080050b5
 8005088:	08005197 	.word	0x08005197
 800508c:	08005189 	.word	0x08005189
 8005090:	08005189 	.word	0x08005189
 8005094:	08005189 	.word	0x08005189
 8005098:	08005189 	.word	0x08005189
 800509c:	080050df 	.word	0x080050df
 80050a0:	08005189 	.word	0x08005189
 80050a4:	08005189 	.word	0x08005189
 80050a8:	08005189 	.word	0x08005189
 80050ac:	08005137 	.word	0x08005137
 80050b0:	08005161 	.word	0x08005161
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80050ba:	b2db      	uxtb	r3, r3
 80050bc:	2b03      	cmp	r3, #3
 80050be:	d107      	bne.n	80050d0 <USBD_HID_Setup+0x124>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80050c0:	f107 030a 	add.w	r3, r7, #10
 80050c4:	2202      	movs	r2, #2
 80050c6:	4619      	mov	r1, r3
 80050c8:	6878      	ldr	r0, [r7, #4]
 80050ca:	f001 fb8d 	bl	80067e8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80050ce:	e063      	b.n	8005198 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 80050d0:	6839      	ldr	r1, [r7, #0]
 80050d2:	6878      	ldr	r0, [r7, #4]
 80050d4:	f001 fb17 	bl	8006706 <USBD_CtlError>
            ret = USBD_FAIL;
 80050d8:	2303      	movs	r3, #3
 80050da:	75fb      	strb	r3, [r7, #23]
          break;
 80050dc:	e05c      	b.n	8005198 <USBD_HID_Setup+0x1ec>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == HID_REPORT_DESC)
 80050de:	683b      	ldr	r3, [r7, #0]
 80050e0:	885b      	ldrh	r3, [r3, #2]
 80050e2:	0a1b      	lsrs	r3, r3, #8
 80050e4:	b29b      	uxth	r3, r3
 80050e6:	2b22      	cmp	r3, #34	; 0x22
 80050e8:	d108      	bne.n	80050fc <USBD_HID_Setup+0x150>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 80050ea:	683b      	ldr	r3, [r7, #0]
 80050ec:	88db      	ldrh	r3, [r3, #6]
 80050ee:	2b3f      	cmp	r3, #63	; 0x3f
 80050f0:	bf28      	it	cs
 80050f2:	233f      	movcs	r3, #63	; 0x3f
 80050f4:	82bb      	strh	r3, [r7, #20]
            pbuf = HID_MOUSE_ReportDesc;
 80050f6:	4b2f      	ldr	r3, [pc, #188]	; (80051b4 <USBD_HID_Setup+0x208>)
 80050f8:	613b      	str	r3, [r7, #16]
 80050fa:	e015      	b.n	8005128 <USBD_HID_Setup+0x17c>
          }
          else if ((req->wValue >> 8) == HID_DESCRIPTOR_TYPE)
 80050fc:	683b      	ldr	r3, [r7, #0]
 80050fe:	885b      	ldrh	r3, [r3, #2]
 8005100:	0a1b      	lsrs	r3, r3, #8
 8005102:	b29b      	uxth	r3, r3
 8005104:	2b21      	cmp	r3, #33	; 0x21
 8005106:	d108      	bne.n	800511a <USBD_HID_Setup+0x16e>
          {
            pbuf = USBD_HID_Desc;
 8005108:	4b2b      	ldr	r3, [pc, #172]	; (80051b8 <USBD_HID_Setup+0x20c>)
 800510a:	613b      	str	r3, [r7, #16]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 800510c:	683b      	ldr	r3, [r7, #0]
 800510e:	88db      	ldrh	r3, [r3, #6]
 8005110:	2b09      	cmp	r3, #9
 8005112:	bf28      	it	cs
 8005114:	2309      	movcs	r3, #9
 8005116:	82bb      	strh	r3, [r7, #20]
 8005118:	e006      	b.n	8005128 <USBD_HID_Setup+0x17c>
          }
          else
          {
            USBD_CtlError(pdev, req);
 800511a:	6839      	ldr	r1, [r7, #0]
 800511c:	6878      	ldr	r0, [r7, #4]
 800511e:	f001 faf2 	bl	8006706 <USBD_CtlError>
            ret = USBD_FAIL;
 8005122:	2303      	movs	r3, #3
 8005124:	75fb      	strb	r3, [r7, #23]
            break;
 8005126:	e037      	b.n	8005198 <USBD_HID_Setup+0x1ec>
          }
          (void)USBD_CtlSendData(pdev, pbuf, len);
 8005128:	8abb      	ldrh	r3, [r7, #20]
 800512a:	461a      	mov	r2, r3
 800512c:	6939      	ldr	r1, [r7, #16]
 800512e:	6878      	ldr	r0, [r7, #4]
 8005130:	f001 fb5a 	bl	80067e8 <USBD_CtlSendData>
          break;
 8005134:	e030      	b.n	8005198 <USBD_HID_Setup+0x1ec>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800513c:	b2db      	uxtb	r3, r3
 800513e:	2b03      	cmp	r3, #3
 8005140:	d107      	bne.n	8005152 <USBD_HID_Setup+0x1a6>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	3308      	adds	r3, #8
 8005146:	2201      	movs	r2, #1
 8005148:	4619      	mov	r1, r3
 800514a:	6878      	ldr	r0, [r7, #4]
 800514c:	f001 fb4c 	bl	80067e8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005150:	e022      	b.n	8005198 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 8005152:	6839      	ldr	r1, [r7, #0]
 8005154:	6878      	ldr	r0, [r7, #4]
 8005156:	f001 fad6 	bl	8006706 <USBD_CtlError>
            ret = USBD_FAIL;
 800515a:	2303      	movs	r3, #3
 800515c:	75fb      	strb	r3, [r7, #23]
          break;
 800515e:	e01b      	b.n	8005198 <USBD_HID_Setup+0x1ec>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005166:	b2db      	uxtb	r3, r3
 8005168:	2b03      	cmp	r3, #3
 800516a:	d106      	bne.n	800517a <USBD_HID_Setup+0x1ce>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 800516c:	683b      	ldr	r3, [r7, #0]
 800516e:	885b      	ldrh	r3, [r3, #2]
 8005170:	b2db      	uxtb	r3, r3
 8005172:	461a      	mov	r2, r3
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005178:	e00e      	b.n	8005198 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 800517a:	6839      	ldr	r1, [r7, #0]
 800517c:	6878      	ldr	r0, [r7, #4]
 800517e:	f001 fac2 	bl	8006706 <USBD_CtlError>
            ret = USBD_FAIL;
 8005182:	2303      	movs	r3, #3
 8005184:	75fb      	strb	r3, [r7, #23]
          break;
 8005186:	e007      	b.n	8005198 <USBD_HID_Setup+0x1ec>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8005188:	6839      	ldr	r1, [r7, #0]
 800518a:	6878      	ldr	r0, [r7, #4]
 800518c:	f001 fabb 	bl	8006706 <USBD_CtlError>
          ret = USBD_FAIL;
 8005190:	2303      	movs	r3, #3
 8005192:	75fb      	strb	r3, [r7, #23]
          break;
 8005194:	e000      	b.n	8005198 <USBD_HID_Setup+0x1ec>
          break;
 8005196:	bf00      	nop
      }
      break;
 8005198:	e006      	b.n	80051a8 <USBD_HID_Setup+0x1fc>

    default:
      USBD_CtlError(pdev, req);
 800519a:	6839      	ldr	r1, [r7, #0]
 800519c:	6878      	ldr	r0, [r7, #4]
 800519e:	f001 fab2 	bl	8006706 <USBD_CtlError>
      ret = USBD_FAIL;
 80051a2:	2303      	movs	r3, #3
 80051a4:	75fb      	strb	r3, [r7, #23]
      break;
 80051a6:	bf00      	nop
  }

  return (uint8_t)ret;
 80051a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80051aa:	4618      	mov	r0, r3
 80051ac:	3718      	adds	r7, #24
 80051ae:	46bd      	mov	sp, r7
 80051b0:	bd80      	pop	{r7, pc}
 80051b2:	bf00      	nop
 80051b4:	20000080 	.word	0x20000080
 80051b8:	20000068 	.word	0x20000068

080051bc <USBD_HID_SendReport>:
  * @param  pdev: device instance
  * @param  buff: pointer to report
  * @retval status
  */
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef *pdev, uint8_t *report, uint16_t len)
{
 80051bc:	b580      	push	{r7, lr}
 80051be:	b086      	sub	sp, #24
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	60f8      	str	r0, [r7, #12]
 80051c4:	60b9      	str	r1, [r7, #8]
 80051c6:	4613      	mov	r3, r2
 80051c8:	80fb      	strh	r3, [r7, #6]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	32b0      	adds	r2, #176	; 0xb0
 80051d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80051d8:	617b      	str	r3, [r7, #20]

  if (hhid == NULL)
 80051da:	697b      	ldr	r3, [r7, #20]
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d101      	bne.n	80051e4 <USBD_HID_SendReport+0x28>
  {
    return (uint8_t)USBD_FAIL;
 80051e0:	2303      	movs	r3, #3
 80051e2:	e014      	b.n	800520e <USBD_HID_SendReport+0x52>
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80051ea:	b2db      	uxtb	r3, r3
 80051ec:	2b03      	cmp	r3, #3
 80051ee:	d10d      	bne.n	800520c <USBD_HID_SendReport+0x50>
  {
    if (hhid->state == HID_IDLE)
 80051f0:	697b      	ldr	r3, [r7, #20]
 80051f2:	7b1b      	ldrb	r3, [r3, #12]
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d109      	bne.n	800520c <USBD_HID_SendReport+0x50>
    {
      hhid->state = HID_BUSY;
 80051f8:	697b      	ldr	r3, [r7, #20]
 80051fa:	2201      	movs	r2, #1
 80051fc:	731a      	strb	r2, [r3, #12]
      (void)USBD_LL_Transmit(pdev, HIDInEpAdd, report, len);
 80051fe:	4b06      	ldr	r3, [pc, #24]	; (8005218 <USBD_HID_SendReport+0x5c>)
 8005200:	7819      	ldrb	r1, [r3, #0]
 8005202:	88fb      	ldrh	r3, [r7, #6]
 8005204:	68ba      	ldr	r2, [r7, #8]
 8005206:	68f8      	ldr	r0, [r7, #12]
 8005208:	f001 ff03 	bl	8007012 <USBD_LL_Transmit>
    }
  }

  return (uint8_t)USBD_OK;
 800520c:	2300      	movs	r3, #0
}
 800520e:	4618      	mov	r0, r3
 8005210:	3718      	adds	r7, #24
 8005212:	46bd      	mov	sp, r7
 8005214:	bd80      	pop	{r7, pc}
 8005216:	bf00      	nop
 8005218:	200000bf 	.word	0x200000bf

0800521c <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 800521c:	b580      	push	{r7, lr}
 800521e:	b084      	sub	sp, #16
 8005220:	af00      	add	r7, sp, #0
 8005222:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 8005224:	2181      	movs	r1, #129	; 0x81
 8005226:	4809      	ldr	r0, [pc, #36]	; (800524c <USBD_HID_GetFSCfgDesc+0x30>)
 8005228:	f000 fc35 	bl	8005a96 <USBD_GetEpDesc>
 800522c:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	2b00      	cmp	r3, #0
 8005232:	d002      	beq.n	800523a <USBD_HID_GetFSCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_FS_BINTERVAL;
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	220a      	movs	r2, #10
 8005238:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	2222      	movs	r2, #34	; 0x22
 800523e:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 8005240:	4b02      	ldr	r3, [pc, #8]	; (800524c <USBD_HID_GetFSCfgDesc+0x30>)
}
 8005242:	4618      	mov	r0, r3
 8005244:	3710      	adds	r7, #16
 8005246:	46bd      	mov	sp, r7
 8005248:	bd80      	pop	{r7, pc}
 800524a:	bf00      	nop
 800524c:	20000044 	.word	0x20000044

08005250 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 8005250:	b580      	push	{r7, lr}
 8005252:	b084      	sub	sp, #16
 8005254:	af00      	add	r7, sp, #0
 8005256:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 8005258:	2181      	movs	r1, #129	; 0x81
 800525a:	4809      	ldr	r0, [pc, #36]	; (8005280 <USBD_HID_GetHSCfgDesc+0x30>)
 800525c:	f000 fc1b 	bl	8005a96 <USBD_GetEpDesc>
 8005260:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	2b00      	cmp	r3, #0
 8005266:	d002      	beq.n	800526e <USBD_HID_GetHSCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_HS_BINTERVAL;
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	2207      	movs	r2, #7
 800526c:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	2222      	movs	r2, #34	; 0x22
 8005272:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 8005274:	4b02      	ldr	r3, [pc, #8]	; (8005280 <USBD_HID_GetHSCfgDesc+0x30>)
}
 8005276:	4618      	mov	r0, r3
 8005278:	3710      	adds	r7, #16
 800527a:	46bd      	mov	sp, r7
 800527c:	bd80      	pop	{r7, pc}
 800527e:	bf00      	nop
 8005280:	20000044 	.word	0x20000044

08005284 <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005284:	b580      	push	{r7, lr}
 8005286:	b084      	sub	sp, #16
 8005288:	af00      	add	r7, sp, #0
 800528a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 800528c:	2181      	movs	r1, #129	; 0x81
 800528e:	4809      	ldr	r0, [pc, #36]	; (80052b4 <USBD_HID_GetOtherSpeedCfgDesc+0x30>)
 8005290:	f000 fc01 	bl	8005a96 <USBD_GetEpDesc>
 8005294:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	2b00      	cmp	r3, #0
 800529a:	d002      	beq.n	80052a2 <USBD_HID_GetOtherSpeedCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_FS_BINTERVAL;
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	220a      	movs	r2, #10
 80052a0:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	2222      	movs	r2, #34	; 0x22
 80052a6:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 80052a8:	4b02      	ldr	r3, [pc, #8]	; (80052b4 <USBD_HID_GetOtherSpeedCfgDesc+0x30>)
}
 80052aa:	4618      	mov	r0, r3
 80052ac:	3710      	adds	r7, #16
 80052ae:	46bd      	mov	sp, r7
 80052b0:	bd80      	pop	{r7, pc}
 80052b2:	bf00      	nop
 80052b4:	20000044 	.word	0x20000044

080052b8 <USBD_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80052b8:	b480      	push	{r7}
 80052ba:	b083      	sub	sp, #12
 80052bc:	af00      	add	r7, sp, #0
 80052be:	6078      	str	r0, [r7, #4]
 80052c0:	460b      	mov	r3, r1
 80052c2:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId])->state = HID_IDLE;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	32b0      	adds	r2, #176	; 0xb0
 80052ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80052d2:	2200      	movs	r2, #0
 80052d4:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 80052d6:	2300      	movs	r3, #0
}
 80052d8:	4618      	mov	r0, r3
 80052da:	370c      	adds	r7, #12
 80052dc:	46bd      	mov	sp, r7
 80052de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e2:	4770      	bx	lr

080052e4 <USBD_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 80052e4:	b480      	push	{r7}
 80052e6:	b083      	sub	sp, #12
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_DeviceQualifierDesc);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	220a      	movs	r2, #10
 80052f0:	801a      	strh	r2, [r3, #0]

  return USBD_HID_DeviceQualifierDesc;
 80052f2:	4b03      	ldr	r3, [pc, #12]	; (8005300 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 80052f4:	4618      	mov	r0, r3
 80052f6:	370c      	adds	r7, #12
 80052f8:	46bd      	mov	sp, r7
 80052fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fe:	4770      	bx	lr
 8005300:	20000074 	.word	0x20000074

08005304 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005304:	b580      	push	{r7, lr}
 8005306:	b086      	sub	sp, #24
 8005308:	af00      	add	r7, sp, #0
 800530a:	60f8      	str	r0, [r7, #12]
 800530c:	60b9      	str	r1, [r7, #8]
 800530e:	4613      	mov	r3, r2
 8005310:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	2b00      	cmp	r3, #0
 8005316:	d101      	bne.n	800531c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005318:	2303      	movs	r3, #3
 800531a:	e01f      	b.n	800535c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	2200      	movs	r2, #0
 8005320:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	2200      	movs	r2, #0
 8005328:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	2200      	movs	r2, #0
 8005330:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005334:	68bb      	ldr	r3, [r7, #8]
 8005336:	2b00      	cmp	r3, #0
 8005338:	d003      	beq.n	8005342 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	68ba      	ldr	r2, [r7, #8]
 800533e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	2201      	movs	r2, #1
 8005346:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	79fa      	ldrb	r2, [r7, #7]
 800534e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8005350:	68f8      	ldr	r0, [r7, #12]
 8005352:	f001 fd29 	bl	8006da8 <USBD_LL_Init>
 8005356:	4603      	mov	r3, r0
 8005358:	75fb      	strb	r3, [r7, #23]

  return ret;
 800535a:	7dfb      	ldrb	r3, [r7, #23]
}
 800535c:	4618      	mov	r0, r3
 800535e:	3718      	adds	r7, #24
 8005360:	46bd      	mov	sp, r7
 8005362:	bd80      	pop	{r7, pc}

08005364 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005364:	b580      	push	{r7, lr}
 8005366:	b084      	sub	sp, #16
 8005368:	af00      	add	r7, sp, #0
 800536a:	6078      	str	r0, [r7, #4]
 800536c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800536e:	2300      	movs	r3, #0
 8005370:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8005372:	683b      	ldr	r3, [r7, #0]
 8005374:	2b00      	cmp	r3, #0
 8005376:	d101      	bne.n	800537c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005378:	2303      	movs	r3, #3
 800537a:	e025      	b.n	80053c8 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	683a      	ldr	r2, [r7, #0]
 8005380:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	32ae      	adds	r2, #174	; 0xae
 800538e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005392:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005394:	2b00      	cmp	r3, #0
 8005396:	d00f      	beq.n	80053b8 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	32ae      	adds	r2, #174	; 0xae
 80053a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80053a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053a8:	f107 020e 	add.w	r2, r7, #14
 80053ac:	4610      	mov	r0, r2
 80053ae:	4798      	blx	r3
 80053b0:	4602      	mov	r2, r0
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 80053be:	1c5a      	adds	r2, r3, #1
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 80053c6:	2300      	movs	r3, #0
}
 80053c8:	4618      	mov	r0, r3
 80053ca:	3710      	adds	r7, #16
 80053cc:	46bd      	mov	sp, r7
 80053ce:	bd80      	pop	{r7, pc}

080053d0 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80053d0:	b580      	push	{r7, lr}
 80053d2:	b082      	sub	sp, #8
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80053d8:	6878      	ldr	r0, [r7, #4]
 80053da:	f001 fd31 	bl	8006e40 <USBD_LL_Start>
 80053de:	4603      	mov	r3, r0
}
 80053e0:	4618      	mov	r0, r3
 80053e2:	3708      	adds	r7, #8
 80053e4:	46bd      	mov	sp, r7
 80053e6:	bd80      	pop	{r7, pc}

080053e8 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80053e8:	b480      	push	{r7}
 80053ea:	b083      	sub	sp, #12
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80053f0:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80053f2:	4618      	mov	r0, r3
 80053f4:	370c      	adds	r7, #12
 80053f6:	46bd      	mov	sp, r7
 80053f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fc:	4770      	bx	lr

080053fe <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80053fe:	b580      	push	{r7, lr}
 8005400:	b084      	sub	sp, #16
 8005402:	af00      	add	r7, sp, #0
 8005404:	6078      	str	r0, [r7, #4]
 8005406:	460b      	mov	r3, r1
 8005408:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800540a:	2300      	movs	r3, #0
 800540c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005414:	2b00      	cmp	r3, #0
 8005416:	d009      	beq.n	800542c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	78fa      	ldrb	r2, [r7, #3]
 8005422:	4611      	mov	r1, r2
 8005424:	6878      	ldr	r0, [r7, #4]
 8005426:	4798      	blx	r3
 8005428:	4603      	mov	r3, r0
 800542a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800542c:	7bfb      	ldrb	r3, [r7, #15]
}
 800542e:	4618      	mov	r0, r3
 8005430:	3710      	adds	r7, #16
 8005432:	46bd      	mov	sp, r7
 8005434:	bd80      	pop	{r7, pc}

08005436 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005436:	b580      	push	{r7, lr}
 8005438:	b084      	sub	sp, #16
 800543a:	af00      	add	r7, sp, #0
 800543c:	6078      	str	r0, [r7, #4]
 800543e:	460b      	mov	r3, r1
 8005440:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8005442:	2300      	movs	r3, #0
 8005444:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800544c:	685b      	ldr	r3, [r3, #4]
 800544e:	78fa      	ldrb	r2, [r7, #3]
 8005450:	4611      	mov	r1, r2
 8005452:	6878      	ldr	r0, [r7, #4]
 8005454:	4798      	blx	r3
 8005456:	4603      	mov	r3, r0
 8005458:	2b00      	cmp	r3, #0
 800545a:	d001      	beq.n	8005460 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800545c:	2303      	movs	r3, #3
 800545e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005460:	7bfb      	ldrb	r3, [r7, #15]
}
 8005462:	4618      	mov	r0, r3
 8005464:	3710      	adds	r7, #16
 8005466:	46bd      	mov	sp, r7
 8005468:	bd80      	pop	{r7, pc}

0800546a <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800546a:	b580      	push	{r7, lr}
 800546c:	b084      	sub	sp, #16
 800546e:	af00      	add	r7, sp, #0
 8005470:	6078      	str	r0, [r7, #4]
 8005472:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800547a:	6839      	ldr	r1, [r7, #0]
 800547c:	4618      	mov	r0, r3
 800547e:	f001 f908 	bl	8006692 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	2201      	movs	r2, #1
 8005486:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8005490:	461a      	mov	r2, r3
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800549e:	f003 031f 	and.w	r3, r3, #31
 80054a2:	2b02      	cmp	r3, #2
 80054a4:	d01a      	beq.n	80054dc <USBD_LL_SetupStage+0x72>
 80054a6:	2b02      	cmp	r3, #2
 80054a8:	d822      	bhi.n	80054f0 <USBD_LL_SetupStage+0x86>
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d002      	beq.n	80054b4 <USBD_LL_SetupStage+0x4a>
 80054ae:	2b01      	cmp	r3, #1
 80054b0:	d00a      	beq.n	80054c8 <USBD_LL_SetupStage+0x5e>
 80054b2:	e01d      	b.n	80054f0 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80054ba:	4619      	mov	r1, r3
 80054bc:	6878      	ldr	r0, [r7, #4]
 80054be:	f000 fb5f 	bl	8005b80 <USBD_StdDevReq>
 80054c2:	4603      	mov	r3, r0
 80054c4:	73fb      	strb	r3, [r7, #15]
      break;
 80054c6:	e020      	b.n	800550a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80054ce:	4619      	mov	r1, r3
 80054d0:	6878      	ldr	r0, [r7, #4]
 80054d2:	f000 fbc7 	bl	8005c64 <USBD_StdItfReq>
 80054d6:	4603      	mov	r3, r0
 80054d8:	73fb      	strb	r3, [r7, #15]
      break;
 80054da:	e016      	b.n	800550a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80054e2:	4619      	mov	r1, r3
 80054e4:	6878      	ldr	r0, [r7, #4]
 80054e6:	f000 fc29 	bl	8005d3c <USBD_StdEPReq>
 80054ea:	4603      	mov	r3, r0
 80054ec:	73fb      	strb	r3, [r7, #15]
      break;
 80054ee:	e00c      	b.n	800550a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80054f6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80054fa:	b2db      	uxtb	r3, r3
 80054fc:	4619      	mov	r1, r3
 80054fe:	6878      	ldr	r0, [r7, #4]
 8005500:	f001 fcfe 	bl	8006f00 <USBD_LL_StallEP>
 8005504:	4603      	mov	r3, r0
 8005506:	73fb      	strb	r3, [r7, #15]
      break;
 8005508:	bf00      	nop
  }

  return ret;
 800550a:	7bfb      	ldrb	r3, [r7, #15]
}
 800550c:	4618      	mov	r0, r3
 800550e:	3710      	adds	r7, #16
 8005510:	46bd      	mov	sp, r7
 8005512:	bd80      	pop	{r7, pc}

08005514 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005514:	b580      	push	{r7, lr}
 8005516:	b086      	sub	sp, #24
 8005518:	af00      	add	r7, sp, #0
 800551a:	60f8      	str	r0, [r7, #12]
 800551c:	460b      	mov	r3, r1
 800551e:	607a      	str	r2, [r7, #4]
 8005520:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8005522:	2300      	movs	r3, #0
 8005524:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8005526:	7afb      	ldrb	r3, [r7, #11]
 8005528:	2b00      	cmp	r3, #0
 800552a:	d16e      	bne.n	800560a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8005532:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800553a:	2b03      	cmp	r3, #3
 800553c:	f040 8098 	bne.w	8005670 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8005540:	693b      	ldr	r3, [r7, #16]
 8005542:	689a      	ldr	r2, [r3, #8]
 8005544:	693b      	ldr	r3, [r7, #16]
 8005546:	68db      	ldr	r3, [r3, #12]
 8005548:	429a      	cmp	r2, r3
 800554a:	d913      	bls.n	8005574 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800554c:	693b      	ldr	r3, [r7, #16]
 800554e:	689a      	ldr	r2, [r3, #8]
 8005550:	693b      	ldr	r3, [r7, #16]
 8005552:	68db      	ldr	r3, [r3, #12]
 8005554:	1ad2      	subs	r2, r2, r3
 8005556:	693b      	ldr	r3, [r7, #16]
 8005558:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800555a:	693b      	ldr	r3, [r7, #16]
 800555c:	68da      	ldr	r2, [r3, #12]
 800555e:	693b      	ldr	r3, [r7, #16]
 8005560:	689b      	ldr	r3, [r3, #8]
 8005562:	4293      	cmp	r3, r2
 8005564:	bf28      	it	cs
 8005566:	4613      	movcs	r3, r2
 8005568:	461a      	mov	r2, r3
 800556a:	6879      	ldr	r1, [r7, #4]
 800556c:	68f8      	ldr	r0, [r7, #12]
 800556e:	f001 f967 	bl	8006840 <USBD_CtlContinueRx>
 8005572:	e07d      	b.n	8005670 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800557a:	f003 031f 	and.w	r3, r3, #31
 800557e:	2b02      	cmp	r3, #2
 8005580:	d014      	beq.n	80055ac <USBD_LL_DataOutStage+0x98>
 8005582:	2b02      	cmp	r3, #2
 8005584:	d81d      	bhi.n	80055c2 <USBD_LL_DataOutStage+0xae>
 8005586:	2b00      	cmp	r3, #0
 8005588:	d002      	beq.n	8005590 <USBD_LL_DataOutStage+0x7c>
 800558a:	2b01      	cmp	r3, #1
 800558c:	d003      	beq.n	8005596 <USBD_LL_DataOutStage+0x82>
 800558e:	e018      	b.n	80055c2 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8005590:	2300      	movs	r3, #0
 8005592:	75bb      	strb	r3, [r7, #22]
            break;
 8005594:	e018      	b.n	80055c8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800559c:	b2db      	uxtb	r3, r3
 800559e:	4619      	mov	r1, r3
 80055a0:	68f8      	ldr	r0, [r7, #12]
 80055a2:	f000 fa5e 	bl	8005a62 <USBD_CoreFindIF>
 80055a6:	4603      	mov	r3, r0
 80055a8:	75bb      	strb	r3, [r7, #22]
            break;
 80055aa:	e00d      	b.n	80055c8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80055b2:	b2db      	uxtb	r3, r3
 80055b4:	4619      	mov	r1, r3
 80055b6:	68f8      	ldr	r0, [r7, #12]
 80055b8:	f000 fa60 	bl	8005a7c <USBD_CoreFindEP>
 80055bc:	4603      	mov	r3, r0
 80055be:	75bb      	strb	r3, [r7, #22]
            break;
 80055c0:	e002      	b.n	80055c8 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80055c2:	2300      	movs	r3, #0
 80055c4:	75bb      	strb	r3, [r7, #22]
            break;
 80055c6:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80055c8:	7dbb      	ldrb	r3, [r7, #22]
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d119      	bne.n	8005602 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80055d4:	b2db      	uxtb	r3, r3
 80055d6:	2b03      	cmp	r3, #3
 80055d8:	d113      	bne.n	8005602 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80055da:	7dba      	ldrb	r2, [r7, #22]
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	32ae      	adds	r2, #174	; 0xae
 80055e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80055e4:	691b      	ldr	r3, [r3, #16]
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d00b      	beq.n	8005602 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80055ea:	7dba      	ldrb	r2, [r7, #22]
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80055f2:	7dba      	ldrb	r2, [r7, #22]
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	32ae      	adds	r2, #174	; 0xae
 80055f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80055fc:	691b      	ldr	r3, [r3, #16]
 80055fe:	68f8      	ldr	r0, [r7, #12]
 8005600:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8005602:	68f8      	ldr	r0, [r7, #12]
 8005604:	f001 f92d 	bl	8006862 <USBD_CtlSendStatus>
 8005608:	e032      	b.n	8005670 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800560a:	7afb      	ldrb	r3, [r7, #11]
 800560c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005610:	b2db      	uxtb	r3, r3
 8005612:	4619      	mov	r1, r3
 8005614:	68f8      	ldr	r0, [r7, #12]
 8005616:	f000 fa31 	bl	8005a7c <USBD_CoreFindEP>
 800561a:	4603      	mov	r3, r0
 800561c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800561e:	7dbb      	ldrb	r3, [r7, #22]
 8005620:	2bff      	cmp	r3, #255	; 0xff
 8005622:	d025      	beq.n	8005670 <USBD_LL_DataOutStage+0x15c>
 8005624:	7dbb      	ldrb	r3, [r7, #22]
 8005626:	2b00      	cmp	r3, #0
 8005628:	d122      	bne.n	8005670 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005630:	b2db      	uxtb	r3, r3
 8005632:	2b03      	cmp	r3, #3
 8005634:	d117      	bne.n	8005666 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8005636:	7dba      	ldrb	r2, [r7, #22]
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	32ae      	adds	r2, #174	; 0xae
 800563c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005640:	699b      	ldr	r3, [r3, #24]
 8005642:	2b00      	cmp	r3, #0
 8005644:	d00f      	beq.n	8005666 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8005646:	7dba      	ldrb	r2, [r7, #22]
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800564e:	7dba      	ldrb	r2, [r7, #22]
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	32ae      	adds	r2, #174	; 0xae
 8005654:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005658:	699b      	ldr	r3, [r3, #24]
 800565a:	7afa      	ldrb	r2, [r7, #11]
 800565c:	4611      	mov	r1, r2
 800565e:	68f8      	ldr	r0, [r7, #12]
 8005660:	4798      	blx	r3
 8005662:	4603      	mov	r3, r0
 8005664:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8005666:	7dfb      	ldrb	r3, [r7, #23]
 8005668:	2b00      	cmp	r3, #0
 800566a:	d001      	beq.n	8005670 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800566c:	7dfb      	ldrb	r3, [r7, #23]
 800566e:	e000      	b.n	8005672 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8005670:	2300      	movs	r3, #0
}
 8005672:	4618      	mov	r0, r3
 8005674:	3718      	adds	r7, #24
 8005676:	46bd      	mov	sp, r7
 8005678:	bd80      	pop	{r7, pc}

0800567a <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800567a:	b580      	push	{r7, lr}
 800567c:	b086      	sub	sp, #24
 800567e:	af00      	add	r7, sp, #0
 8005680:	60f8      	str	r0, [r7, #12]
 8005682:	460b      	mov	r3, r1
 8005684:	607a      	str	r2, [r7, #4]
 8005686:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8005688:	7afb      	ldrb	r3, [r7, #11]
 800568a:	2b00      	cmp	r3, #0
 800568c:	d16f      	bne.n	800576e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	3314      	adds	r3, #20
 8005692:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800569a:	2b02      	cmp	r3, #2
 800569c:	d15a      	bne.n	8005754 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800569e:	693b      	ldr	r3, [r7, #16]
 80056a0:	689a      	ldr	r2, [r3, #8]
 80056a2:	693b      	ldr	r3, [r7, #16]
 80056a4:	68db      	ldr	r3, [r3, #12]
 80056a6:	429a      	cmp	r2, r3
 80056a8:	d914      	bls.n	80056d4 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80056aa:	693b      	ldr	r3, [r7, #16]
 80056ac:	689a      	ldr	r2, [r3, #8]
 80056ae:	693b      	ldr	r3, [r7, #16]
 80056b0:	68db      	ldr	r3, [r3, #12]
 80056b2:	1ad2      	subs	r2, r2, r3
 80056b4:	693b      	ldr	r3, [r7, #16]
 80056b6:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80056b8:	693b      	ldr	r3, [r7, #16]
 80056ba:	689b      	ldr	r3, [r3, #8]
 80056bc:	461a      	mov	r2, r3
 80056be:	6879      	ldr	r1, [r7, #4]
 80056c0:	68f8      	ldr	r0, [r7, #12]
 80056c2:	f001 f8ac 	bl	800681e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80056c6:	2300      	movs	r3, #0
 80056c8:	2200      	movs	r2, #0
 80056ca:	2100      	movs	r1, #0
 80056cc:	68f8      	ldr	r0, [r7, #12]
 80056ce:	f001 fcc1 	bl	8007054 <USBD_LL_PrepareReceive>
 80056d2:	e03f      	b.n	8005754 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80056d4:	693b      	ldr	r3, [r7, #16]
 80056d6:	68da      	ldr	r2, [r3, #12]
 80056d8:	693b      	ldr	r3, [r7, #16]
 80056da:	689b      	ldr	r3, [r3, #8]
 80056dc:	429a      	cmp	r2, r3
 80056de:	d11c      	bne.n	800571a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80056e0:	693b      	ldr	r3, [r7, #16]
 80056e2:	685a      	ldr	r2, [r3, #4]
 80056e4:	693b      	ldr	r3, [r7, #16]
 80056e6:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80056e8:	429a      	cmp	r2, r3
 80056ea:	d316      	bcc.n	800571a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80056ec:	693b      	ldr	r3, [r7, #16]
 80056ee:	685a      	ldr	r2, [r3, #4]
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80056f6:	429a      	cmp	r2, r3
 80056f8:	d20f      	bcs.n	800571a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80056fa:	2200      	movs	r2, #0
 80056fc:	2100      	movs	r1, #0
 80056fe:	68f8      	ldr	r0, [r7, #12]
 8005700:	f001 f88d 	bl	800681e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	2200      	movs	r2, #0
 8005708:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800570c:	2300      	movs	r3, #0
 800570e:	2200      	movs	r2, #0
 8005710:	2100      	movs	r1, #0
 8005712:	68f8      	ldr	r0, [r7, #12]
 8005714:	f001 fc9e 	bl	8007054 <USBD_LL_PrepareReceive>
 8005718:	e01c      	b.n	8005754 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005720:	b2db      	uxtb	r3, r3
 8005722:	2b03      	cmp	r3, #3
 8005724:	d10f      	bne.n	8005746 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800572c:	68db      	ldr	r3, [r3, #12]
 800572e:	2b00      	cmp	r3, #0
 8005730:	d009      	beq.n	8005746 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	2200      	movs	r2, #0
 8005736:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005740:	68db      	ldr	r3, [r3, #12]
 8005742:	68f8      	ldr	r0, [r7, #12]
 8005744:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8005746:	2180      	movs	r1, #128	; 0x80
 8005748:	68f8      	ldr	r0, [r7, #12]
 800574a:	f001 fbd9 	bl	8006f00 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800574e:	68f8      	ldr	r0, [r7, #12]
 8005750:	f001 f89a 	bl	8006888 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800575a:	2b00      	cmp	r3, #0
 800575c:	d03a      	beq.n	80057d4 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800575e:	68f8      	ldr	r0, [r7, #12]
 8005760:	f7ff fe42 	bl	80053e8 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	2200      	movs	r2, #0
 8005768:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800576c:	e032      	b.n	80057d4 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800576e:	7afb      	ldrb	r3, [r7, #11]
 8005770:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005774:	b2db      	uxtb	r3, r3
 8005776:	4619      	mov	r1, r3
 8005778:	68f8      	ldr	r0, [r7, #12]
 800577a:	f000 f97f 	bl	8005a7c <USBD_CoreFindEP>
 800577e:	4603      	mov	r3, r0
 8005780:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005782:	7dfb      	ldrb	r3, [r7, #23]
 8005784:	2bff      	cmp	r3, #255	; 0xff
 8005786:	d025      	beq.n	80057d4 <USBD_LL_DataInStage+0x15a>
 8005788:	7dfb      	ldrb	r3, [r7, #23]
 800578a:	2b00      	cmp	r3, #0
 800578c:	d122      	bne.n	80057d4 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005794:	b2db      	uxtb	r3, r3
 8005796:	2b03      	cmp	r3, #3
 8005798:	d11c      	bne.n	80057d4 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800579a:	7dfa      	ldrb	r2, [r7, #23]
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	32ae      	adds	r2, #174	; 0xae
 80057a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80057a4:	695b      	ldr	r3, [r3, #20]
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d014      	beq.n	80057d4 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80057aa:	7dfa      	ldrb	r2, [r7, #23]
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80057b2:	7dfa      	ldrb	r2, [r7, #23]
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	32ae      	adds	r2, #174	; 0xae
 80057b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80057bc:	695b      	ldr	r3, [r3, #20]
 80057be:	7afa      	ldrb	r2, [r7, #11]
 80057c0:	4611      	mov	r1, r2
 80057c2:	68f8      	ldr	r0, [r7, #12]
 80057c4:	4798      	blx	r3
 80057c6:	4603      	mov	r3, r0
 80057c8:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80057ca:	7dbb      	ldrb	r3, [r7, #22]
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d001      	beq.n	80057d4 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80057d0:	7dbb      	ldrb	r3, [r7, #22]
 80057d2:	e000      	b.n	80057d6 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80057d4:	2300      	movs	r3, #0
}
 80057d6:	4618      	mov	r0, r3
 80057d8:	3718      	adds	r7, #24
 80057da:	46bd      	mov	sp, r7
 80057dc:	bd80      	pop	{r7, pc}

080057de <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80057de:	b580      	push	{r7, lr}
 80057e0:	b084      	sub	sp, #16
 80057e2:	af00      	add	r7, sp, #0
 80057e4:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80057e6:	2300      	movs	r3, #0
 80057e8:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	2201      	movs	r2, #1
 80057ee:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	2200      	movs	r2, #0
 80057f6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	2200      	movs	r2, #0
 80057fe:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	2200      	movs	r2, #0
 8005804:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2200      	movs	r2, #0
 800580c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005816:	2b00      	cmp	r3, #0
 8005818:	d014      	beq.n	8005844 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005820:	685b      	ldr	r3, [r3, #4]
 8005822:	2b00      	cmp	r3, #0
 8005824:	d00e      	beq.n	8005844 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800582c:	685b      	ldr	r3, [r3, #4]
 800582e:	687a      	ldr	r2, [r7, #4]
 8005830:	6852      	ldr	r2, [r2, #4]
 8005832:	b2d2      	uxtb	r2, r2
 8005834:	4611      	mov	r1, r2
 8005836:	6878      	ldr	r0, [r7, #4]
 8005838:	4798      	blx	r3
 800583a:	4603      	mov	r3, r0
 800583c:	2b00      	cmp	r3, #0
 800583e:	d001      	beq.n	8005844 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8005840:	2303      	movs	r3, #3
 8005842:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005844:	2340      	movs	r3, #64	; 0x40
 8005846:	2200      	movs	r2, #0
 8005848:	2100      	movs	r1, #0
 800584a:	6878      	ldr	r0, [r7, #4]
 800584c:	f001 fb13 	bl	8006e76 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	2201      	movs	r2, #1
 8005854:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	2240      	movs	r2, #64	; 0x40
 800585c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005860:	2340      	movs	r3, #64	; 0x40
 8005862:	2200      	movs	r2, #0
 8005864:	2180      	movs	r1, #128	; 0x80
 8005866:	6878      	ldr	r0, [r7, #4]
 8005868:	f001 fb05 	bl	8006e76 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	2201      	movs	r2, #1
 8005870:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	2240      	movs	r2, #64	; 0x40
 8005876:	621a      	str	r2, [r3, #32]

  return ret;
 8005878:	7bfb      	ldrb	r3, [r7, #15]
}
 800587a:	4618      	mov	r0, r3
 800587c:	3710      	adds	r7, #16
 800587e:	46bd      	mov	sp, r7
 8005880:	bd80      	pop	{r7, pc}

08005882 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8005882:	b480      	push	{r7}
 8005884:	b083      	sub	sp, #12
 8005886:	af00      	add	r7, sp, #0
 8005888:	6078      	str	r0, [r7, #4]
 800588a:	460b      	mov	r3, r1
 800588c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	78fa      	ldrb	r2, [r7, #3]
 8005892:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8005894:	2300      	movs	r3, #0
}
 8005896:	4618      	mov	r0, r3
 8005898:	370c      	adds	r7, #12
 800589a:	46bd      	mov	sp, r7
 800589c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a0:	4770      	bx	lr

080058a2 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80058a2:	b480      	push	{r7}
 80058a4:	b083      	sub	sp, #12
 80058a6:	af00      	add	r7, sp, #0
 80058a8:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80058b0:	b2da      	uxtb	r2, r3
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	2204      	movs	r2, #4
 80058bc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80058c0:	2300      	movs	r3, #0
}
 80058c2:	4618      	mov	r0, r3
 80058c4:	370c      	adds	r7, #12
 80058c6:	46bd      	mov	sp, r7
 80058c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058cc:	4770      	bx	lr

080058ce <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80058ce:	b480      	push	{r7}
 80058d0:	b083      	sub	sp, #12
 80058d2:	af00      	add	r7, sp, #0
 80058d4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80058dc:	b2db      	uxtb	r3, r3
 80058de:	2b04      	cmp	r3, #4
 80058e0:	d106      	bne.n	80058f0 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80058e8:	b2da      	uxtb	r2, r3
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80058f0:	2300      	movs	r3, #0
}
 80058f2:	4618      	mov	r0, r3
 80058f4:	370c      	adds	r7, #12
 80058f6:	46bd      	mov	sp, r7
 80058f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058fc:	4770      	bx	lr

080058fe <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80058fe:	b580      	push	{r7, lr}
 8005900:	b082      	sub	sp, #8
 8005902:	af00      	add	r7, sp, #0
 8005904:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800590c:	b2db      	uxtb	r3, r3
 800590e:	2b03      	cmp	r3, #3
 8005910:	d110      	bne.n	8005934 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005918:	2b00      	cmp	r3, #0
 800591a:	d00b      	beq.n	8005934 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005922:	69db      	ldr	r3, [r3, #28]
 8005924:	2b00      	cmp	r3, #0
 8005926:	d005      	beq.n	8005934 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800592e:	69db      	ldr	r3, [r3, #28]
 8005930:	6878      	ldr	r0, [r7, #4]
 8005932:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8005934:	2300      	movs	r3, #0
}
 8005936:	4618      	mov	r0, r3
 8005938:	3708      	adds	r7, #8
 800593a:	46bd      	mov	sp, r7
 800593c:	bd80      	pop	{r7, pc}

0800593e <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800593e:	b580      	push	{r7, lr}
 8005940:	b082      	sub	sp, #8
 8005942:	af00      	add	r7, sp, #0
 8005944:	6078      	str	r0, [r7, #4]
 8005946:	460b      	mov	r3, r1
 8005948:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	32ae      	adds	r2, #174	; 0xae
 8005954:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005958:	2b00      	cmp	r3, #0
 800595a:	d101      	bne.n	8005960 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800595c:	2303      	movs	r3, #3
 800595e:	e01c      	b.n	800599a <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005966:	b2db      	uxtb	r3, r3
 8005968:	2b03      	cmp	r3, #3
 800596a:	d115      	bne.n	8005998 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	32ae      	adds	r2, #174	; 0xae
 8005976:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800597a:	6a1b      	ldr	r3, [r3, #32]
 800597c:	2b00      	cmp	r3, #0
 800597e:	d00b      	beq.n	8005998 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	32ae      	adds	r2, #174	; 0xae
 800598a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800598e:	6a1b      	ldr	r3, [r3, #32]
 8005990:	78fa      	ldrb	r2, [r7, #3]
 8005992:	4611      	mov	r1, r2
 8005994:	6878      	ldr	r0, [r7, #4]
 8005996:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005998:	2300      	movs	r3, #0
}
 800599a:	4618      	mov	r0, r3
 800599c:	3708      	adds	r7, #8
 800599e:	46bd      	mov	sp, r7
 80059a0:	bd80      	pop	{r7, pc}

080059a2 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80059a2:	b580      	push	{r7, lr}
 80059a4:	b082      	sub	sp, #8
 80059a6:	af00      	add	r7, sp, #0
 80059a8:	6078      	str	r0, [r7, #4]
 80059aa:	460b      	mov	r3, r1
 80059ac:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	32ae      	adds	r2, #174	; 0xae
 80059b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d101      	bne.n	80059c4 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80059c0:	2303      	movs	r3, #3
 80059c2:	e01c      	b.n	80059fe <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80059ca:	b2db      	uxtb	r3, r3
 80059cc:	2b03      	cmp	r3, #3
 80059ce:	d115      	bne.n	80059fc <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	32ae      	adds	r2, #174	; 0xae
 80059da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80059de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d00b      	beq.n	80059fc <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	32ae      	adds	r2, #174	; 0xae
 80059ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80059f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059f4:	78fa      	ldrb	r2, [r7, #3]
 80059f6:	4611      	mov	r1, r2
 80059f8:	6878      	ldr	r0, [r7, #4]
 80059fa:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80059fc:	2300      	movs	r3, #0
}
 80059fe:	4618      	mov	r0, r3
 8005a00:	3708      	adds	r7, #8
 8005a02:	46bd      	mov	sp, r7
 8005a04:	bd80      	pop	{r7, pc}

08005a06 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8005a06:	b480      	push	{r7}
 8005a08:	b083      	sub	sp, #12
 8005a0a:	af00      	add	r7, sp, #0
 8005a0c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005a0e:	2300      	movs	r3, #0
}
 8005a10:	4618      	mov	r0, r3
 8005a12:	370c      	adds	r7, #12
 8005a14:	46bd      	mov	sp, r7
 8005a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1a:	4770      	bx	lr

08005a1c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8005a1c:	b580      	push	{r7, lr}
 8005a1e:	b084      	sub	sp, #16
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8005a24:	2300      	movs	r3, #0
 8005a26:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	2201      	movs	r2, #1
 8005a2c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d00e      	beq.n	8005a58 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005a40:	685b      	ldr	r3, [r3, #4]
 8005a42:	687a      	ldr	r2, [r7, #4]
 8005a44:	6852      	ldr	r2, [r2, #4]
 8005a46:	b2d2      	uxtb	r2, r2
 8005a48:	4611      	mov	r1, r2
 8005a4a:	6878      	ldr	r0, [r7, #4]
 8005a4c:	4798      	blx	r3
 8005a4e:	4603      	mov	r3, r0
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d001      	beq.n	8005a58 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8005a54:	2303      	movs	r3, #3
 8005a56:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005a58:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a5a:	4618      	mov	r0, r3
 8005a5c:	3710      	adds	r7, #16
 8005a5e:	46bd      	mov	sp, r7
 8005a60:	bd80      	pop	{r7, pc}

08005a62 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8005a62:	b480      	push	{r7}
 8005a64:	b083      	sub	sp, #12
 8005a66:	af00      	add	r7, sp, #0
 8005a68:	6078      	str	r0, [r7, #4]
 8005a6a:	460b      	mov	r3, r1
 8005a6c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8005a6e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8005a70:	4618      	mov	r0, r3
 8005a72:	370c      	adds	r7, #12
 8005a74:	46bd      	mov	sp, r7
 8005a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7a:	4770      	bx	lr

08005a7c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8005a7c:	b480      	push	{r7}
 8005a7e:	b083      	sub	sp, #12
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	6078      	str	r0, [r7, #4]
 8005a84:	460b      	mov	r3, r1
 8005a86:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8005a88:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8005a8a:	4618      	mov	r0, r3
 8005a8c:	370c      	adds	r7, #12
 8005a8e:	46bd      	mov	sp, r7
 8005a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a94:	4770      	bx	lr

08005a96 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8005a96:	b580      	push	{r7, lr}
 8005a98:	b086      	sub	sp, #24
 8005a9a:	af00      	add	r7, sp, #0
 8005a9c:	6078      	str	r0, [r7, #4]
 8005a9e:	460b      	mov	r3, r1
 8005aa0:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8005aaa:	2300      	movs	r3, #0
 8005aac:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	885b      	ldrh	r3, [r3, #2]
 8005ab2:	b29a      	uxth	r2, r3
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	781b      	ldrb	r3, [r3, #0]
 8005ab8:	b29b      	uxth	r3, r3
 8005aba:	429a      	cmp	r2, r3
 8005abc:	d920      	bls.n	8005b00 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	781b      	ldrb	r3, [r3, #0]
 8005ac2:	b29b      	uxth	r3, r3
 8005ac4:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8005ac6:	e013      	b.n	8005af0 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8005ac8:	f107 030a 	add.w	r3, r7, #10
 8005acc:	4619      	mov	r1, r3
 8005ace:	6978      	ldr	r0, [r7, #20]
 8005ad0:	f000 f81b 	bl	8005b0a <USBD_GetNextDesc>
 8005ad4:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8005ad6:	697b      	ldr	r3, [r7, #20]
 8005ad8:	785b      	ldrb	r3, [r3, #1]
 8005ada:	2b05      	cmp	r3, #5
 8005adc:	d108      	bne.n	8005af0 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8005ade:	697b      	ldr	r3, [r7, #20]
 8005ae0:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8005ae2:	693b      	ldr	r3, [r7, #16]
 8005ae4:	789b      	ldrb	r3, [r3, #2]
 8005ae6:	78fa      	ldrb	r2, [r7, #3]
 8005ae8:	429a      	cmp	r2, r3
 8005aea:	d008      	beq.n	8005afe <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8005aec:	2300      	movs	r3, #0
 8005aee:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	885b      	ldrh	r3, [r3, #2]
 8005af4:	b29a      	uxth	r2, r3
 8005af6:	897b      	ldrh	r3, [r7, #10]
 8005af8:	429a      	cmp	r2, r3
 8005afa:	d8e5      	bhi.n	8005ac8 <USBD_GetEpDesc+0x32>
 8005afc:	e000      	b.n	8005b00 <USBD_GetEpDesc+0x6a>
          break;
 8005afe:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8005b00:	693b      	ldr	r3, [r7, #16]
}
 8005b02:	4618      	mov	r0, r3
 8005b04:	3718      	adds	r7, #24
 8005b06:	46bd      	mov	sp, r7
 8005b08:	bd80      	pop	{r7, pc}

08005b0a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8005b0a:	b480      	push	{r7}
 8005b0c:	b085      	sub	sp, #20
 8005b0e:	af00      	add	r7, sp, #0
 8005b10:	6078      	str	r0, [r7, #4]
 8005b12:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8005b18:	683b      	ldr	r3, [r7, #0]
 8005b1a:	881a      	ldrh	r2, [r3, #0]
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	781b      	ldrb	r3, [r3, #0]
 8005b20:	b29b      	uxth	r3, r3
 8005b22:	4413      	add	r3, r2
 8005b24:	b29a      	uxth	r2, r3
 8005b26:	683b      	ldr	r3, [r7, #0]
 8005b28:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	781b      	ldrb	r3, [r3, #0]
 8005b2e:	461a      	mov	r2, r3
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	4413      	add	r3, r2
 8005b34:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8005b36:	68fb      	ldr	r3, [r7, #12]
}
 8005b38:	4618      	mov	r0, r3
 8005b3a:	3714      	adds	r7, #20
 8005b3c:	46bd      	mov	sp, r7
 8005b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b42:	4770      	bx	lr

08005b44 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8005b44:	b480      	push	{r7}
 8005b46:	b087      	sub	sp, #28
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8005b50:	697b      	ldr	r3, [r7, #20]
 8005b52:	781b      	ldrb	r3, [r3, #0]
 8005b54:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8005b56:	697b      	ldr	r3, [r7, #20]
 8005b58:	3301      	adds	r3, #1
 8005b5a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8005b5c:	697b      	ldr	r3, [r7, #20]
 8005b5e:	781b      	ldrb	r3, [r3, #0]
 8005b60:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8005b62:	8a3b      	ldrh	r3, [r7, #16]
 8005b64:	021b      	lsls	r3, r3, #8
 8005b66:	b21a      	sxth	r2, r3
 8005b68:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005b6c:	4313      	orrs	r3, r2
 8005b6e:	b21b      	sxth	r3, r3
 8005b70:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8005b72:	89fb      	ldrh	r3, [r7, #14]
}
 8005b74:	4618      	mov	r0, r3
 8005b76:	371c      	adds	r7, #28
 8005b78:	46bd      	mov	sp, r7
 8005b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7e:	4770      	bx	lr

08005b80 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005b80:	b580      	push	{r7, lr}
 8005b82:	b084      	sub	sp, #16
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	6078      	str	r0, [r7, #4]
 8005b88:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005b8a:	2300      	movs	r3, #0
 8005b8c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005b8e:	683b      	ldr	r3, [r7, #0]
 8005b90:	781b      	ldrb	r3, [r3, #0]
 8005b92:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005b96:	2b40      	cmp	r3, #64	; 0x40
 8005b98:	d005      	beq.n	8005ba6 <USBD_StdDevReq+0x26>
 8005b9a:	2b40      	cmp	r3, #64	; 0x40
 8005b9c:	d857      	bhi.n	8005c4e <USBD_StdDevReq+0xce>
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d00f      	beq.n	8005bc2 <USBD_StdDevReq+0x42>
 8005ba2:	2b20      	cmp	r3, #32
 8005ba4:	d153      	bne.n	8005c4e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	32ae      	adds	r2, #174	; 0xae
 8005bb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005bb4:	689b      	ldr	r3, [r3, #8]
 8005bb6:	6839      	ldr	r1, [r7, #0]
 8005bb8:	6878      	ldr	r0, [r7, #4]
 8005bba:	4798      	blx	r3
 8005bbc:	4603      	mov	r3, r0
 8005bbe:	73fb      	strb	r3, [r7, #15]
      break;
 8005bc0:	e04a      	b.n	8005c58 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005bc2:	683b      	ldr	r3, [r7, #0]
 8005bc4:	785b      	ldrb	r3, [r3, #1]
 8005bc6:	2b09      	cmp	r3, #9
 8005bc8:	d83b      	bhi.n	8005c42 <USBD_StdDevReq+0xc2>
 8005bca:	a201      	add	r2, pc, #4	; (adr r2, 8005bd0 <USBD_StdDevReq+0x50>)
 8005bcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bd0:	08005c25 	.word	0x08005c25
 8005bd4:	08005c39 	.word	0x08005c39
 8005bd8:	08005c43 	.word	0x08005c43
 8005bdc:	08005c2f 	.word	0x08005c2f
 8005be0:	08005c43 	.word	0x08005c43
 8005be4:	08005c03 	.word	0x08005c03
 8005be8:	08005bf9 	.word	0x08005bf9
 8005bec:	08005c43 	.word	0x08005c43
 8005bf0:	08005c1b 	.word	0x08005c1b
 8005bf4:	08005c0d 	.word	0x08005c0d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8005bf8:	6839      	ldr	r1, [r7, #0]
 8005bfa:	6878      	ldr	r0, [r7, #4]
 8005bfc:	f000 fa3c 	bl	8006078 <USBD_GetDescriptor>
          break;
 8005c00:	e024      	b.n	8005c4c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8005c02:	6839      	ldr	r1, [r7, #0]
 8005c04:	6878      	ldr	r0, [r7, #4]
 8005c06:	f000 fba1 	bl	800634c <USBD_SetAddress>
          break;
 8005c0a:	e01f      	b.n	8005c4c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8005c0c:	6839      	ldr	r1, [r7, #0]
 8005c0e:	6878      	ldr	r0, [r7, #4]
 8005c10:	f000 fbe0 	bl	80063d4 <USBD_SetConfig>
 8005c14:	4603      	mov	r3, r0
 8005c16:	73fb      	strb	r3, [r7, #15]
          break;
 8005c18:	e018      	b.n	8005c4c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8005c1a:	6839      	ldr	r1, [r7, #0]
 8005c1c:	6878      	ldr	r0, [r7, #4]
 8005c1e:	f000 fc83 	bl	8006528 <USBD_GetConfig>
          break;
 8005c22:	e013      	b.n	8005c4c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8005c24:	6839      	ldr	r1, [r7, #0]
 8005c26:	6878      	ldr	r0, [r7, #4]
 8005c28:	f000 fcb4 	bl	8006594 <USBD_GetStatus>
          break;
 8005c2c:	e00e      	b.n	8005c4c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8005c2e:	6839      	ldr	r1, [r7, #0]
 8005c30:	6878      	ldr	r0, [r7, #4]
 8005c32:	f000 fce3 	bl	80065fc <USBD_SetFeature>
          break;
 8005c36:	e009      	b.n	8005c4c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8005c38:	6839      	ldr	r1, [r7, #0]
 8005c3a:	6878      	ldr	r0, [r7, #4]
 8005c3c:	f000 fd07 	bl	800664e <USBD_ClrFeature>
          break;
 8005c40:	e004      	b.n	8005c4c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8005c42:	6839      	ldr	r1, [r7, #0]
 8005c44:	6878      	ldr	r0, [r7, #4]
 8005c46:	f000 fd5e 	bl	8006706 <USBD_CtlError>
          break;
 8005c4a:	bf00      	nop
      }
      break;
 8005c4c:	e004      	b.n	8005c58 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8005c4e:	6839      	ldr	r1, [r7, #0]
 8005c50:	6878      	ldr	r0, [r7, #4]
 8005c52:	f000 fd58 	bl	8006706 <USBD_CtlError>
      break;
 8005c56:	bf00      	nop
  }

  return ret;
 8005c58:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c5a:	4618      	mov	r0, r3
 8005c5c:	3710      	adds	r7, #16
 8005c5e:	46bd      	mov	sp, r7
 8005c60:	bd80      	pop	{r7, pc}
 8005c62:	bf00      	nop

08005c64 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005c64:	b580      	push	{r7, lr}
 8005c66:	b084      	sub	sp, #16
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	6078      	str	r0, [r7, #4]
 8005c6c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005c6e:	2300      	movs	r3, #0
 8005c70:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005c72:	683b      	ldr	r3, [r7, #0]
 8005c74:	781b      	ldrb	r3, [r3, #0]
 8005c76:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005c7a:	2b40      	cmp	r3, #64	; 0x40
 8005c7c:	d005      	beq.n	8005c8a <USBD_StdItfReq+0x26>
 8005c7e:	2b40      	cmp	r3, #64	; 0x40
 8005c80:	d852      	bhi.n	8005d28 <USBD_StdItfReq+0xc4>
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d001      	beq.n	8005c8a <USBD_StdItfReq+0x26>
 8005c86:	2b20      	cmp	r3, #32
 8005c88:	d14e      	bne.n	8005d28 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005c90:	b2db      	uxtb	r3, r3
 8005c92:	3b01      	subs	r3, #1
 8005c94:	2b02      	cmp	r3, #2
 8005c96:	d840      	bhi.n	8005d1a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8005c98:	683b      	ldr	r3, [r7, #0]
 8005c9a:	889b      	ldrh	r3, [r3, #4]
 8005c9c:	b2db      	uxtb	r3, r3
 8005c9e:	2b01      	cmp	r3, #1
 8005ca0:	d836      	bhi.n	8005d10 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8005ca2:	683b      	ldr	r3, [r7, #0]
 8005ca4:	889b      	ldrh	r3, [r3, #4]
 8005ca6:	b2db      	uxtb	r3, r3
 8005ca8:	4619      	mov	r1, r3
 8005caa:	6878      	ldr	r0, [r7, #4]
 8005cac:	f7ff fed9 	bl	8005a62 <USBD_CoreFindIF>
 8005cb0:	4603      	mov	r3, r0
 8005cb2:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005cb4:	7bbb      	ldrb	r3, [r7, #14]
 8005cb6:	2bff      	cmp	r3, #255	; 0xff
 8005cb8:	d01d      	beq.n	8005cf6 <USBD_StdItfReq+0x92>
 8005cba:	7bbb      	ldrb	r3, [r7, #14]
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d11a      	bne.n	8005cf6 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8005cc0:	7bba      	ldrb	r2, [r7, #14]
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	32ae      	adds	r2, #174	; 0xae
 8005cc6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005cca:	689b      	ldr	r3, [r3, #8]
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d00f      	beq.n	8005cf0 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8005cd0:	7bba      	ldrb	r2, [r7, #14]
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8005cd8:	7bba      	ldrb	r2, [r7, #14]
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	32ae      	adds	r2, #174	; 0xae
 8005cde:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ce2:	689b      	ldr	r3, [r3, #8]
 8005ce4:	6839      	ldr	r1, [r7, #0]
 8005ce6:	6878      	ldr	r0, [r7, #4]
 8005ce8:	4798      	blx	r3
 8005cea:	4603      	mov	r3, r0
 8005cec:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8005cee:	e004      	b.n	8005cfa <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8005cf0:	2303      	movs	r3, #3
 8005cf2:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8005cf4:	e001      	b.n	8005cfa <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8005cf6:	2303      	movs	r3, #3
 8005cf8:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8005cfa:	683b      	ldr	r3, [r7, #0]
 8005cfc:	88db      	ldrh	r3, [r3, #6]
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d110      	bne.n	8005d24 <USBD_StdItfReq+0xc0>
 8005d02:	7bfb      	ldrb	r3, [r7, #15]
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d10d      	bne.n	8005d24 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8005d08:	6878      	ldr	r0, [r7, #4]
 8005d0a:	f000 fdaa 	bl	8006862 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8005d0e:	e009      	b.n	8005d24 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8005d10:	6839      	ldr	r1, [r7, #0]
 8005d12:	6878      	ldr	r0, [r7, #4]
 8005d14:	f000 fcf7 	bl	8006706 <USBD_CtlError>
          break;
 8005d18:	e004      	b.n	8005d24 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8005d1a:	6839      	ldr	r1, [r7, #0]
 8005d1c:	6878      	ldr	r0, [r7, #4]
 8005d1e:	f000 fcf2 	bl	8006706 <USBD_CtlError>
          break;
 8005d22:	e000      	b.n	8005d26 <USBD_StdItfReq+0xc2>
          break;
 8005d24:	bf00      	nop
      }
      break;
 8005d26:	e004      	b.n	8005d32 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8005d28:	6839      	ldr	r1, [r7, #0]
 8005d2a:	6878      	ldr	r0, [r7, #4]
 8005d2c:	f000 fceb 	bl	8006706 <USBD_CtlError>
      break;
 8005d30:	bf00      	nop
  }

  return ret;
 8005d32:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d34:	4618      	mov	r0, r3
 8005d36:	3710      	adds	r7, #16
 8005d38:	46bd      	mov	sp, r7
 8005d3a:	bd80      	pop	{r7, pc}

08005d3c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005d3c:	b580      	push	{r7, lr}
 8005d3e:	b084      	sub	sp, #16
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	6078      	str	r0, [r7, #4]
 8005d44:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8005d46:	2300      	movs	r3, #0
 8005d48:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8005d4a:	683b      	ldr	r3, [r7, #0]
 8005d4c:	889b      	ldrh	r3, [r3, #4]
 8005d4e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005d50:	683b      	ldr	r3, [r7, #0]
 8005d52:	781b      	ldrb	r3, [r3, #0]
 8005d54:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005d58:	2b40      	cmp	r3, #64	; 0x40
 8005d5a:	d007      	beq.n	8005d6c <USBD_StdEPReq+0x30>
 8005d5c:	2b40      	cmp	r3, #64	; 0x40
 8005d5e:	f200 817f 	bhi.w	8006060 <USBD_StdEPReq+0x324>
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d02a      	beq.n	8005dbc <USBD_StdEPReq+0x80>
 8005d66:	2b20      	cmp	r3, #32
 8005d68:	f040 817a 	bne.w	8006060 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8005d6c:	7bbb      	ldrb	r3, [r7, #14]
 8005d6e:	4619      	mov	r1, r3
 8005d70:	6878      	ldr	r0, [r7, #4]
 8005d72:	f7ff fe83 	bl	8005a7c <USBD_CoreFindEP>
 8005d76:	4603      	mov	r3, r0
 8005d78:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005d7a:	7b7b      	ldrb	r3, [r7, #13]
 8005d7c:	2bff      	cmp	r3, #255	; 0xff
 8005d7e:	f000 8174 	beq.w	800606a <USBD_StdEPReq+0x32e>
 8005d82:	7b7b      	ldrb	r3, [r7, #13]
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	f040 8170 	bne.w	800606a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8005d8a:	7b7a      	ldrb	r2, [r7, #13]
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8005d92:	7b7a      	ldrb	r2, [r7, #13]
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	32ae      	adds	r2, #174	; 0xae
 8005d98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d9c:	689b      	ldr	r3, [r3, #8]
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	f000 8163 	beq.w	800606a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8005da4:	7b7a      	ldrb	r2, [r7, #13]
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	32ae      	adds	r2, #174	; 0xae
 8005daa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005dae:	689b      	ldr	r3, [r3, #8]
 8005db0:	6839      	ldr	r1, [r7, #0]
 8005db2:	6878      	ldr	r0, [r7, #4]
 8005db4:	4798      	blx	r3
 8005db6:	4603      	mov	r3, r0
 8005db8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005dba:	e156      	b.n	800606a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005dbc:	683b      	ldr	r3, [r7, #0]
 8005dbe:	785b      	ldrb	r3, [r3, #1]
 8005dc0:	2b03      	cmp	r3, #3
 8005dc2:	d008      	beq.n	8005dd6 <USBD_StdEPReq+0x9a>
 8005dc4:	2b03      	cmp	r3, #3
 8005dc6:	f300 8145 	bgt.w	8006054 <USBD_StdEPReq+0x318>
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	f000 809b 	beq.w	8005f06 <USBD_StdEPReq+0x1ca>
 8005dd0:	2b01      	cmp	r3, #1
 8005dd2:	d03c      	beq.n	8005e4e <USBD_StdEPReq+0x112>
 8005dd4:	e13e      	b.n	8006054 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005ddc:	b2db      	uxtb	r3, r3
 8005dde:	2b02      	cmp	r3, #2
 8005de0:	d002      	beq.n	8005de8 <USBD_StdEPReq+0xac>
 8005de2:	2b03      	cmp	r3, #3
 8005de4:	d016      	beq.n	8005e14 <USBD_StdEPReq+0xd8>
 8005de6:	e02c      	b.n	8005e42 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005de8:	7bbb      	ldrb	r3, [r7, #14]
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d00d      	beq.n	8005e0a <USBD_StdEPReq+0xce>
 8005dee:	7bbb      	ldrb	r3, [r7, #14]
 8005df0:	2b80      	cmp	r3, #128	; 0x80
 8005df2:	d00a      	beq.n	8005e0a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8005df4:	7bbb      	ldrb	r3, [r7, #14]
 8005df6:	4619      	mov	r1, r3
 8005df8:	6878      	ldr	r0, [r7, #4]
 8005dfa:	f001 f881 	bl	8006f00 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8005dfe:	2180      	movs	r1, #128	; 0x80
 8005e00:	6878      	ldr	r0, [r7, #4]
 8005e02:	f001 f87d 	bl	8006f00 <USBD_LL_StallEP>
 8005e06:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005e08:	e020      	b.n	8005e4c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8005e0a:	6839      	ldr	r1, [r7, #0]
 8005e0c:	6878      	ldr	r0, [r7, #4]
 8005e0e:	f000 fc7a 	bl	8006706 <USBD_CtlError>
              break;
 8005e12:	e01b      	b.n	8005e4c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005e14:	683b      	ldr	r3, [r7, #0]
 8005e16:	885b      	ldrh	r3, [r3, #2]
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d10e      	bne.n	8005e3a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8005e1c:	7bbb      	ldrb	r3, [r7, #14]
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d00b      	beq.n	8005e3a <USBD_StdEPReq+0xfe>
 8005e22:	7bbb      	ldrb	r3, [r7, #14]
 8005e24:	2b80      	cmp	r3, #128	; 0x80
 8005e26:	d008      	beq.n	8005e3a <USBD_StdEPReq+0xfe>
 8005e28:	683b      	ldr	r3, [r7, #0]
 8005e2a:	88db      	ldrh	r3, [r3, #6]
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d104      	bne.n	8005e3a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8005e30:	7bbb      	ldrb	r3, [r7, #14]
 8005e32:	4619      	mov	r1, r3
 8005e34:	6878      	ldr	r0, [r7, #4]
 8005e36:	f001 f863 	bl	8006f00 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8005e3a:	6878      	ldr	r0, [r7, #4]
 8005e3c:	f000 fd11 	bl	8006862 <USBD_CtlSendStatus>

              break;
 8005e40:	e004      	b.n	8005e4c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8005e42:	6839      	ldr	r1, [r7, #0]
 8005e44:	6878      	ldr	r0, [r7, #4]
 8005e46:	f000 fc5e 	bl	8006706 <USBD_CtlError>
              break;
 8005e4a:	bf00      	nop
          }
          break;
 8005e4c:	e107      	b.n	800605e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005e54:	b2db      	uxtb	r3, r3
 8005e56:	2b02      	cmp	r3, #2
 8005e58:	d002      	beq.n	8005e60 <USBD_StdEPReq+0x124>
 8005e5a:	2b03      	cmp	r3, #3
 8005e5c:	d016      	beq.n	8005e8c <USBD_StdEPReq+0x150>
 8005e5e:	e04b      	b.n	8005ef8 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005e60:	7bbb      	ldrb	r3, [r7, #14]
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d00d      	beq.n	8005e82 <USBD_StdEPReq+0x146>
 8005e66:	7bbb      	ldrb	r3, [r7, #14]
 8005e68:	2b80      	cmp	r3, #128	; 0x80
 8005e6a:	d00a      	beq.n	8005e82 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8005e6c:	7bbb      	ldrb	r3, [r7, #14]
 8005e6e:	4619      	mov	r1, r3
 8005e70:	6878      	ldr	r0, [r7, #4]
 8005e72:	f001 f845 	bl	8006f00 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8005e76:	2180      	movs	r1, #128	; 0x80
 8005e78:	6878      	ldr	r0, [r7, #4]
 8005e7a:	f001 f841 	bl	8006f00 <USBD_LL_StallEP>
 8005e7e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005e80:	e040      	b.n	8005f04 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8005e82:	6839      	ldr	r1, [r7, #0]
 8005e84:	6878      	ldr	r0, [r7, #4]
 8005e86:	f000 fc3e 	bl	8006706 <USBD_CtlError>
              break;
 8005e8a:	e03b      	b.n	8005f04 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005e8c:	683b      	ldr	r3, [r7, #0]
 8005e8e:	885b      	ldrh	r3, [r3, #2]
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d136      	bne.n	8005f02 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8005e94:	7bbb      	ldrb	r3, [r7, #14]
 8005e96:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d004      	beq.n	8005ea8 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8005e9e:	7bbb      	ldrb	r3, [r7, #14]
 8005ea0:	4619      	mov	r1, r3
 8005ea2:	6878      	ldr	r0, [r7, #4]
 8005ea4:	f001 f84b 	bl	8006f3e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8005ea8:	6878      	ldr	r0, [r7, #4]
 8005eaa:	f000 fcda 	bl	8006862 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8005eae:	7bbb      	ldrb	r3, [r7, #14]
 8005eb0:	4619      	mov	r1, r3
 8005eb2:	6878      	ldr	r0, [r7, #4]
 8005eb4:	f7ff fde2 	bl	8005a7c <USBD_CoreFindEP>
 8005eb8:	4603      	mov	r3, r0
 8005eba:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005ebc:	7b7b      	ldrb	r3, [r7, #13]
 8005ebe:	2bff      	cmp	r3, #255	; 0xff
 8005ec0:	d01f      	beq.n	8005f02 <USBD_StdEPReq+0x1c6>
 8005ec2:	7b7b      	ldrb	r3, [r7, #13]
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d11c      	bne.n	8005f02 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8005ec8:	7b7a      	ldrb	r2, [r7, #13]
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8005ed0:	7b7a      	ldrb	r2, [r7, #13]
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	32ae      	adds	r2, #174	; 0xae
 8005ed6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005eda:	689b      	ldr	r3, [r3, #8]
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d010      	beq.n	8005f02 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8005ee0:	7b7a      	ldrb	r2, [r7, #13]
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	32ae      	adds	r2, #174	; 0xae
 8005ee6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005eea:	689b      	ldr	r3, [r3, #8]
 8005eec:	6839      	ldr	r1, [r7, #0]
 8005eee:	6878      	ldr	r0, [r7, #4]
 8005ef0:	4798      	blx	r3
 8005ef2:	4603      	mov	r3, r0
 8005ef4:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8005ef6:	e004      	b.n	8005f02 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8005ef8:	6839      	ldr	r1, [r7, #0]
 8005efa:	6878      	ldr	r0, [r7, #4]
 8005efc:	f000 fc03 	bl	8006706 <USBD_CtlError>
              break;
 8005f00:	e000      	b.n	8005f04 <USBD_StdEPReq+0x1c8>
              break;
 8005f02:	bf00      	nop
          }
          break;
 8005f04:	e0ab      	b.n	800605e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005f0c:	b2db      	uxtb	r3, r3
 8005f0e:	2b02      	cmp	r3, #2
 8005f10:	d002      	beq.n	8005f18 <USBD_StdEPReq+0x1dc>
 8005f12:	2b03      	cmp	r3, #3
 8005f14:	d032      	beq.n	8005f7c <USBD_StdEPReq+0x240>
 8005f16:	e097      	b.n	8006048 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005f18:	7bbb      	ldrb	r3, [r7, #14]
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d007      	beq.n	8005f2e <USBD_StdEPReq+0x1f2>
 8005f1e:	7bbb      	ldrb	r3, [r7, #14]
 8005f20:	2b80      	cmp	r3, #128	; 0x80
 8005f22:	d004      	beq.n	8005f2e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8005f24:	6839      	ldr	r1, [r7, #0]
 8005f26:	6878      	ldr	r0, [r7, #4]
 8005f28:	f000 fbed 	bl	8006706 <USBD_CtlError>
                break;
 8005f2c:	e091      	b.n	8006052 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005f2e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	da0b      	bge.n	8005f4e <USBD_StdEPReq+0x212>
 8005f36:	7bbb      	ldrb	r3, [r7, #14]
 8005f38:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005f3c:	4613      	mov	r3, r2
 8005f3e:	009b      	lsls	r3, r3, #2
 8005f40:	4413      	add	r3, r2
 8005f42:	009b      	lsls	r3, r3, #2
 8005f44:	3310      	adds	r3, #16
 8005f46:	687a      	ldr	r2, [r7, #4]
 8005f48:	4413      	add	r3, r2
 8005f4a:	3304      	adds	r3, #4
 8005f4c:	e00b      	b.n	8005f66 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005f4e:	7bbb      	ldrb	r3, [r7, #14]
 8005f50:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005f54:	4613      	mov	r3, r2
 8005f56:	009b      	lsls	r3, r3, #2
 8005f58:	4413      	add	r3, r2
 8005f5a:	009b      	lsls	r3, r3, #2
 8005f5c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005f60:	687a      	ldr	r2, [r7, #4]
 8005f62:	4413      	add	r3, r2
 8005f64:	3304      	adds	r3, #4
 8005f66:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8005f68:	68bb      	ldr	r3, [r7, #8]
 8005f6a:	2200      	movs	r2, #0
 8005f6c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8005f6e:	68bb      	ldr	r3, [r7, #8]
 8005f70:	2202      	movs	r2, #2
 8005f72:	4619      	mov	r1, r3
 8005f74:	6878      	ldr	r0, [r7, #4]
 8005f76:	f000 fc37 	bl	80067e8 <USBD_CtlSendData>
              break;
 8005f7a:	e06a      	b.n	8006052 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8005f7c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	da11      	bge.n	8005fa8 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8005f84:	7bbb      	ldrb	r3, [r7, #14]
 8005f86:	f003 020f 	and.w	r2, r3, #15
 8005f8a:	6879      	ldr	r1, [r7, #4]
 8005f8c:	4613      	mov	r3, r2
 8005f8e:	009b      	lsls	r3, r3, #2
 8005f90:	4413      	add	r3, r2
 8005f92:	009b      	lsls	r3, r3, #2
 8005f94:	440b      	add	r3, r1
 8005f96:	3324      	adds	r3, #36	; 0x24
 8005f98:	881b      	ldrh	r3, [r3, #0]
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d117      	bne.n	8005fce <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8005f9e:	6839      	ldr	r1, [r7, #0]
 8005fa0:	6878      	ldr	r0, [r7, #4]
 8005fa2:	f000 fbb0 	bl	8006706 <USBD_CtlError>
                  break;
 8005fa6:	e054      	b.n	8006052 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8005fa8:	7bbb      	ldrb	r3, [r7, #14]
 8005faa:	f003 020f 	and.w	r2, r3, #15
 8005fae:	6879      	ldr	r1, [r7, #4]
 8005fb0:	4613      	mov	r3, r2
 8005fb2:	009b      	lsls	r3, r3, #2
 8005fb4:	4413      	add	r3, r2
 8005fb6:	009b      	lsls	r3, r3, #2
 8005fb8:	440b      	add	r3, r1
 8005fba:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005fbe:	881b      	ldrh	r3, [r3, #0]
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d104      	bne.n	8005fce <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8005fc4:	6839      	ldr	r1, [r7, #0]
 8005fc6:	6878      	ldr	r0, [r7, #4]
 8005fc8:	f000 fb9d 	bl	8006706 <USBD_CtlError>
                  break;
 8005fcc:	e041      	b.n	8006052 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005fce:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	da0b      	bge.n	8005fee <USBD_StdEPReq+0x2b2>
 8005fd6:	7bbb      	ldrb	r3, [r7, #14]
 8005fd8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005fdc:	4613      	mov	r3, r2
 8005fde:	009b      	lsls	r3, r3, #2
 8005fe0:	4413      	add	r3, r2
 8005fe2:	009b      	lsls	r3, r3, #2
 8005fe4:	3310      	adds	r3, #16
 8005fe6:	687a      	ldr	r2, [r7, #4]
 8005fe8:	4413      	add	r3, r2
 8005fea:	3304      	adds	r3, #4
 8005fec:	e00b      	b.n	8006006 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005fee:	7bbb      	ldrb	r3, [r7, #14]
 8005ff0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005ff4:	4613      	mov	r3, r2
 8005ff6:	009b      	lsls	r3, r3, #2
 8005ff8:	4413      	add	r3, r2
 8005ffa:	009b      	lsls	r3, r3, #2
 8005ffc:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006000:	687a      	ldr	r2, [r7, #4]
 8006002:	4413      	add	r3, r2
 8006004:	3304      	adds	r3, #4
 8006006:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006008:	7bbb      	ldrb	r3, [r7, #14]
 800600a:	2b00      	cmp	r3, #0
 800600c:	d002      	beq.n	8006014 <USBD_StdEPReq+0x2d8>
 800600e:	7bbb      	ldrb	r3, [r7, #14]
 8006010:	2b80      	cmp	r3, #128	; 0x80
 8006012:	d103      	bne.n	800601c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8006014:	68bb      	ldr	r3, [r7, #8]
 8006016:	2200      	movs	r2, #0
 8006018:	601a      	str	r2, [r3, #0]
 800601a:	e00e      	b.n	800603a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800601c:	7bbb      	ldrb	r3, [r7, #14]
 800601e:	4619      	mov	r1, r3
 8006020:	6878      	ldr	r0, [r7, #4]
 8006022:	f000 ffab 	bl	8006f7c <USBD_LL_IsStallEP>
 8006026:	4603      	mov	r3, r0
 8006028:	2b00      	cmp	r3, #0
 800602a:	d003      	beq.n	8006034 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800602c:	68bb      	ldr	r3, [r7, #8]
 800602e:	2201      	movs	r2, #1
 8006030:	601a      	str	r2, [r3, #0]
 8006032:	e002      	b.n	800603a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8006034:	68bb      	ldr	r3, [r7, #8]
 8006036:	2200      	movs	r2, #0
 8006038:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800603a:	68bb      	ldr	r3, [r7, #8]
 800603c:	2202      	movs	r2, #2
 800603e:	4619      	mov	r1, r3
 8006040:	6878      	ldr	r0, [r7, #4]
 8006042:	f000 fbd1 	bl	80067e8 <USBD_CtlSendData>
              break;
 8006046:	e004      	b.n	8006052 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8006048:	6839      	ldr	r1, [r7, #0]
 800604a:	6878      	ldr	r0, [r7, #4]
 800604c:	f000 fb5b 	bl	8006706 <USBD_CtlError>
              break;
 8006050:	bf00      	nop
          }
          break;
 8006052:	e004      	b.n	800605e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8006054:	6839      	ldr	r1, [r7, #0]
 8006056:	6878      	ldr	r0, [r7, #4]
 8006058:	f000 fb55 	bl	8006706 <USBD_CtlError>
          break;
 800605c:	bf00      	nop
      }
      break;
 800605e:	e005      	b.n	800606c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8006060:	6839      	ldr	r1, [r7, #0]
 8006062:	6878      	ldr	r0, [r7, #4]
 8006064:	f000 fb4f 	bl	8006706 <USBD_CtlError>
      break;
 8006068:	e000      	b.n	800606c <USBD_StdEPReq+0x330>
      break;
 800606a:	bf00      	nop
  }

  return ret;
 800606c:	7bfb      	ldrb	r3, [r7, #15]
}
 800606e:	4618      	mov	r0, r3
 8006070:	3710      	adds	r7, #16
 8006072:	46bd      	mov	sp, r7
 8006074:	bd80      	pop	{r7, pc}
	...

08006078 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006078:	b580      	push	{r7, lr}
 800607a:	b084      	sub	sp, #16
 800607c:	af00      	add	r7, sp, #0
 800607e:	6078      	str	r0, [r7, #4]
 8006080:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006082:	2300      	movs	r3, #0
 8006084:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006086:	2300      	movs	r3, #0
 8006088:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800608a:	2300      	movs	r3, #0
 800608c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800608e:	683b      	ldr	r3, [r7, #0]
 8006090:	885b      	ldrh	r3, [r3, #2]
 8006092:	0a1b      	lsrs	r3, r3, #8
 8006094:	b29b      	uxth	r3, r3
 8006096:	3b01      	subs	r3, #1
 8006098:	2b06      	cmp	r3, #6
 800609a:	f200 8128 	bhi.w	80062ee <USBD_GetDescriptor+0x276>
 800609e:	a201      	add	r2, pc, #4	; (adr r2, 80060a4 <USBD_GetDescriptor+0x2c>)
 80060a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060a4:	080060c1 	.word	0x080060c1
 80060a8:	080060d9 	.word	0x080060d9
 80060ac:	08006119 	.word	0x08006119
 80060b0:	080062ef 	.word	0x080062ef
 80060b4:	080062ef 	.word	0x080062ef
 80060b8:	0800628f 	.word	0x0800628f
 80060bc:	080062bb 	.word	0x080062bb
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	687a      	ldr	r2, [r7, #4]
 80060ca:	7c12      	ldrb	r2, [r2, #16]
 80060cc:	f107 0108 	add.w	r1, r7, #8
 80060d0:	4610      	mov	r0, r2
 80060d2:	4798      	blx	r3
 80060d4:	60f8      	str	r0, [r7, #12]
      break;
 80060d6:	e112      	b.n	80062fe <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	7c1b      	ldrb	r3, [r3, #16]
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d10d      	bne.n	80060fc <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80060e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060e8:	f107 0208 	add.w	r2, r7, #8
 80060ec:	4610      	mov	r0, r2
 80060ee:	4798      	blx	r3
 80060f0:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	3301      	adds	r3, #1
 80060f6:	2202      	movs	r2, #2
 80060f8:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80060fa:	e100      	b.n	80062fe <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006102:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006104:	f107 0208 	add.w	r2, r7, #8
 8006108:	4610      	mov	r0, r2
 800610a:	4798      	blx	r3
 800610c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	3301      	adds	r3, #1
 8006112:	2202      	movs	r2, #2
 8006114:	701a      	strb	r2, [r3, #0]
      break;
 8006116:	e0f2      	b.n	80062fe <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006118:	683b      	ldr	r3, [r7, #0]
 800611a:	885b      	ldrh	r3, [r3, #2]
 800611c:	b2db      	uxtb	r3, r3
 800611e:	2b05      	cmp	r3, #5
 8006120:	f200 80ac 	bhi.w	800627c <USBD_GetDescriptor+0x204>
 8006124:	a201      	add	r2, pc, #4	; (adr r2, 800612c <USBD_GetDescriptor+0xb4>)
 8006126:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800612a:	bf00      	nop
 800612c:	08006145 	.word	0x08006145
 8006130:	08006179 	.word	0x08006179
 8006134:	080061ad 	.word	0x080061ad
 8006138:	080061e1 	.word	0x080061e1
 800613c:	08006215 	.word	0x08006215
 8006140:	08006249 	.word	0x08006249
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800614a:	685b      	ldr	r3, [r3, #4]
 800614c:	2b00      	cmp	r3, #0
 800614e:	d00b      	beq.n	8006168 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006156:	685b      	ldr	r3, [r3, #4]
 8006158:	687a      	ldr	r2, [r7, #4]
 800615a:	7c12      	ldrb	r2, [r2, #16]
 800615c:	f107 0108 	add.w	r1, r7, #8
 8006160:	4610      	mov	r0, r2
 8006162:	4798      	blx	r3
 8006164:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006166:	e091      	b.n	800628c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006168:	6839      	ldr	r1, [r7, #0]
 800616a:	6878      	ldr	r0, [r7, #4]
 800616c:	f000 facb 	bl	8006706 <USBD_CtlError>
            err++;
 8006170:	7afb      	ldrb	r3, [r7, #11]
 8006172:	3301      	adds	r3, #1
 8006174:	72fb      	strb	r3, [r7, #11]
          break;
 8006176:	e089      	b.n	800628c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800617e:	689b      	ldr	r3, [r3, #8]
 8006180:	2b00      	cmp	r3, #0
 8006182:	d00b      	beq.n	800619c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800618a:	689b      	ldr	r3, [r3, #8]
 800618c:	687a      	ldr	r2, [r7, #4]
 800618e:	7c12      	ldrb	r2, [r2, #16]
 8006190:	f107 0108 	add.w	r1, r7, #8
 8006194:	4610      	mov	r0, r2
 8006196:	4798      	blx	r3
 8006198:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800619a:	e077      	b.n	800628c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800619c:	6839      	ldr	r1, [r7, #0]
 800619e:	6878      	ldr	r0, [r7, #4]
 80061a0:	f000 fab1 	bl	8006706 <USBD_CtlError>
            err++;
 80061a4:	7afb      	ldrb	r3, [r7, #11]
 80061a6:	3301      	adds	r3, #1
 80061a8:	72fb      	strb	r3, [r7, #11]
          break;
 80061aa:	e06f      	b.n	800628c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80061b2:	68db      	ldr	r3, [r3, #12]
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d00b      	beq.n	80061d0 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80061be:	68db      	ldr	r3, [r3, #12]
 80061c0:	687a      	ldr	r2, [r7, #4]
 80061c2:	7c12      	ldrb	r2, [r2, #16]
 80061c4:	f107 0108 	add.w	r1, r7, #8
 80061c8:	4610      	mov	r0, r2
 80061ca:	4798      	blx	r3
 80061cc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80061ce:	e05d      	b.n	800628c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80061d0:	6839      	ldr	r1, [r7, #0]
 80061d2:	6878      	ldr	r0, [r7, #4]
 80061d4:	f000 fa97 	bl	8006706 <USBD_CtlError>
            err++;
 80061d8:	7afb      	ldrb	r3, [r7, #11]
 80061da:	3301      	adds	r3, #1
 80061dc:	72fb      	strb	r3, [r7, #11]
          break;
 80061de:	e055      	b.n	800628c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80061e6:	691b      	ldr	r3, [r3, #16]
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d00b      	beq.n	8006204 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80061f2:	691b      	ldr	r3, [r3, #16]
 80061f4:	687a      	ldr	r2, [r7, #4]
 80061f6:	7c12      	ldrb	r2, [r2, #16]
 80061f8:	f107 0108 	add.w	r1, r7, #8
 80061fc:	4610      	mov	r0, r2
 80061fe:	4798      	blx	r3
 8006200:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006202:	e043      	b.n	800628c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006204:	6839      	ldr	r1, [r7, #0]
 8006206:	6878      	ldr	r0, [r7, #4]
 8006208:	f000 fa7d 	bl	8006706 <USBD_CtlError>
            err++;
 800620c:	7afb      	ldrb	r3, [r7, #11]
 800620e:	3301      	adds	r3, #1
 8006210:	72fb      	strb	r3, [r7, #11]
          break;
 8006212:	e03b      	b.n	800628c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800621a:	695b      	ldr	r3, [r3, #20]
 800621c:	2b00      	cmp	r3, #0
 800621e:	d00b      	beq.n	8006238 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006226:	695b      	ldr	r3, [r3, #20]
 8006228:	687a      	ldr	r2, [r7, #4]
 800622a:	7c12      	ldrb	r2, [r2, #16]
 800622c:	f107 0108 	add.w	r1, r7, #8
 8006230:	4610      	mov	r0, r2
 8006232:	4798      	blx	r3
 8006234:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006236:	e029      	b.n	800628c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006238:	6839      	ldr	r1, [r7, #0]
 800623a:	6878      	ldr	r0, [r7, #4]
 800623c:	f000 fa63 	bl	8006706 <USBD_CtlError>
            err++;
 8006240:	7afb      	ldrb	r3, [r7, #11]
 8006242:	3301      	adds	r3, #1
 8006244:	72fb      	strb	r3, [r7, #11]
          break;
 8006246:	e021      	b.n	800628c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800624e:	699b      	ldr	r3, [r3, #24]
 8006250:	2b00      	cmp	r3, #0
 8006252:	d00b      	beq.n	800626c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800625a:	699b      	ldr	r3, [r3, #24]
 800625c:	687a      	ldr	r2, [r7, #4]
 800625e:	7c12      	ldrb	r2, [r2, #16]
 8006260:	f107 0108 	add.w	r1, r7, #8
 8006264:	4610      	mov	r0, r2
 8006266:	4798      	blx	r3
 8006268:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800626a:	e00f      	b.n	800628c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800626c:	6839      	ldr	r1, [r7, #0]
 800626e:	6878      	ldr	r0, [r7, #4]
 8006270:	f000 fa49 	bl	8006706 <USBD_CtlError>
            err++;
 8006274:	7afb      	ldrb	r3, [r7, #11]
 8006276:	3301      	adds	r3, #1
 8006278:	72fb      	strb	r3, [r7, #11]
          break;
 800627a:	e007      	b.n	800628c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800627c:	6839      	ldr	r1, [r7, #0]
 800627e:	6878      	ldr	r0, [r7, #4]
 8006280:	f000 fa41 	bl	8006706 <USBD_CtlError>
          err++;
 8006284:	7afb      	ldrb	r3, [r7, #11]
 8006286:	3301      	adds	r3, #1
 8006288:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800628a:	bf00      	nop
      }
      break;
 800628c:	e037      	b.n	80062fe <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	7c1b      	ldrb	r3, [r3, #16]
 8006292:	2b00      	cmp	r3, #0
 8006294:	d109      	bne.n	80062aa <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800629c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800629e:	f107 0208 	add.w	r2, r7, #8
 80062a2:	4610      	mov	r0, r2
 80062a4:	4798      	blx	r3
 80062a6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80062a8:	e029      	b.n	80062fe <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80062aa:	6839      	ldr	r1, [r7, #0]
 80062ac:	6878      	ldr	r0, [r7, #4]
 80062ae:	f000 fa2a 	bl	8006706 <USBD_CtlError>
        err++;
 80062b2:	7afb      	ldrb	r3, [r7, #11]
 80062b4:	3301      	adds	r3, #1
 80062b6:	72fb      	strb	r3, [r7, #11]
      break;
 80062b8:	e021      	b.n	80062fe <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	7c1b      	ldrb	r3, [r3, #16]
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d10d      	bne.n	80062de <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80062c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062ca:	f107 0208 	add.w	r2, r7, #8
 80062ce:	4610      	mov	r0, r2
 80062d0:	4798      	blx	r3
 80062d2:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	3301      	adds	r3, #1
 80062d8:	2207      	movs	r2, #7
 80062da:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80062dc:	e00f      	b.n	80062fe <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80062de:	6839      	ldr	r1, [r7, #0]
 80062e0:	6878      	ldr	r0, [r7, #4]
 80062e2:	f000 fa10 	bl	8006706 <USBD_CtlError>
        err++;
 80062e6:	7afb      	ldrb	r3, [r7, #11]
 80062e8:	3301      	adds	r3, #1
 80062ea:	72fb      	strb	r3, [r7, #11]
      break;
 80062ec:	e007      	b.n	80062fe <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80062ee:	6839      	ldr	r1, [r7, #0]
 80062f0:	6878      	ldr	r0, [r7, #4]
 80062f2:	f000 fa08 	bl	8006706 <USBD_CtlError>
      err++;
 80062f6:	7afb      	ldrb	r3, [r7, #11]
 80062f8:	3301      	adds	r3, #1
 80062fa:	72fb      	strb	r3, [r7, #11]
      break;
 80062fc:	bf00      	nop
  }

  if (err != 0U)
 80062fe:	7afb      	ldrb	r3, [r7, #11]
 8006300:	2b00      	cmp	r3, #0
 8006302:	d11e      	bne.n	8006342 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8006304:	683b      	ldr	r3, [r7, #0]
 8006306:	88db      	ldrh	r3, [r3, #6]
 8006308:	2b00      	cmp	r3, #0
 800630a:	d016      	beq.n	800633a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800630c:	893b      	ldrh	r3, [r7, #8]
 800630e:	2b00      	cmp	r3, #0
 8006310:	d00e      	beq.n	8006330 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8006312:	683b      	ldr	r3, [r7, #0]
 8006314:	88da      	ldrh	r2, [r3, #6]
 8006316:	893b      	ldrh	r3, [r7, #8]
 8006318:	4293      	cmp	r3, r2
 800631a:	bf28      	it	cs
 800631c:	4613      	movcs	r3, r2
 800631e:	b29b      	uxth	r3, r3
 8006320:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006322:	893b      	ldrh	r3, [r7, #8]
 8006324:	461a      	mov	r2, r3
 8006326:	68f9      	ldr	r1, [r7, #12]
 8006328:	6878      	ldr	r0, [r7, #4]
 800632a:	f000 fa5d 	bl	80067e8 <USBD_CtlSendData>
 800632e:	e009      	b.n	8006344 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8006330:	6839      	ldr	r1, [r7, #0]
 8006332:	6878      	ldr	r0, [r7, #4]
 8006334:	f000 f9e7 	bl	8006706 <USBD_CtlError>
 8006338:	e004      	b.n	8006344 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800633a:	6878      	ldr	r0, [r7, #4]
 800633c:	f000 fa91 	bl	8006862 <USBD_CtlSendStatus>
 8006340:	e000      	b.n	8006344 <USBD_GetDescriptor+0x2cc>
    return;
 8006342:	bf00      	nop
  }
}
 8006344:	3710      	adds	r7, #16
 8006346:	46bd      	mov	sp, r7
 8006348:	bd80      	pop	{r7, pc}
 800634a:	bf00      	nop

0800634c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800634c:	b580      	push	{r7, lr}
 800634e:	b084      	sub	sp, #16
 8006350:	af00      	add	r7, sp, #0
 8006352:	6078      	str	r0, [r7, #4]
 8006354:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006356:	683b      	ldr	r3, [r7, #0]
 8006358:	889b      	ldrh	r3, [r3, #4]
 800635a:	2b00      	cmp	r3, #0
 800635c:	d131      	bne.n	80063c2 <USBD_SetAddress+0x76>
 800635e:	683b      	ldr	r3, [r7, #0]
 8006360:	88db      	ldrh	r3, [r3, #6]
 8006362:	2b00      	cmp	r3, #0
 8006364:	d12d      	bne.n	80063c2 <USBD_SetAddress+0x76>
 8006366:	683b      	ldr	r3, [r7, #0]
 8006368:	885b      	ldrh	r3, [r3, #2]
 800636a:	2b7f      	cmp	r3, #127	; 0x7f
 800636c:	d829      	bhi.n	80063c2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800636e:	683b      	ldr	r3, [r7, #0]
 8006370:	885b      	ldrh	r3, [r3, #2]
 8006372:	b2db      	uxtb	r3, r3
 8006374:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006378:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006380:	b2db      	uxtb	r3, r3
 8006382:	2b03      	cmp	r3, #3
 8006384:	d104      	bne.n	8006390 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8006386:	6839      	ldr	r1, [r7, #0]
 8006388:	6878      	ldr	r0, [r7, #4]
 800638a:	f000 f9bc 	bl	8006706 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800638e:	e01d      	b.n	80063cc <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	7bfa      	ldrb	r2, [r7, #15]
 8006394:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006398:	7bfb      	ldrb	r3, [r7, #15]
 800639a:	4619      	mov	r1, r3
 800639c:	6878      	ldr	r0, [r7, #4]
 800639e:	f000 fe19 	bl	8006fd4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80063a2:	6878      	ldr	r0, [r7, #4]
 80063a4:	f000 fa5d 	bl	8006862 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80063a8:	7bfb      	ldrb	r3, [r7, #15]
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d004      	beq.n	80063b8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	2202      	movs	r2, #2
 80063b2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80063b6:	e009      	b.n	80063cc <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	2201      	movs	r2, #1
 80063bc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80063c0:	e004      	b.n	80063cc <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80063c2:	6839      	ldr	r1, [r7, #0]
 80063c4:	6878      	ldr	r0, [r7, #4]
 80063c6:	f000 f99e 	bl	8006706 <USBD_CtlError>
  }
}
 80063ca:	bf00      	nop
 80063cc:	bf00      	nop
 80063ce:	3710      	adds	r7, #16
 80063d0:	46bd      	mov	sp, r7
 80063d2:	bd80      	pop	{r7, pc}

080063d4 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80063d4:	b580      	push	{r7, lr}
 80063d6:	b084      	sub	sp, #16
 80063d8:	af00      	add	r7, sp, #0
 80063da:	6078      	str	r0, [r7, #4]
 80063dc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80063de:	2300      	movs	r3, #0
 80063e0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80063e2:	683b      	ldr	r3, [r7, #0]
 80063e4:	885b      	ldrh	r3, [r3, #2]
 80063e6:	b2da      	uxtb	r2, r3
 80063e8:	4b4e      	ldr	r3, [pc, #312]	; (8006524 <USBD_SetConfig+0x150>)
 80063ea:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80063ec:	4b4d      	ldr	r3, [pc, #308]	; (8006524 <USBD_SetConfig+0x150>)
 80063ee:	781b      	ldrb	r3, [r3, #0]
 80063f0:	2b01      	cmp	r3, #1
 80063f2:	d905      	bls.n	8006400 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80063f4:	6839      	ldr	r1, [r7, #0]
 80063f6:	6878      	ldr	r0, [r7, #4]
 80063f8:	f000 f985 	bl	8006706 <USBD_CtlError>
    return USBD_FAIL;
 80063fc:	2303      	movs	r3, #3
 80063fe:	e08c      	b.n	800651a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006406:	b2db      	uxtb	r3, r3
 8006408:	2b02      	cmp	r3, #2
 800640a:	d002      	beq.n	8006412 <USBD_SetConfig+0x3e>
 800640c:	2b03      	cmp	r3, #3
 800640e:	d029      	beq.n	8006464 <USBD_SetConfig+0x90>
 8006410:	e075      	b.n	80064fe <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8006412:	4b44      	ldr	r3, [pc, #272]	; (8006524 <USBD_SetConfig+0x150>)
 8006414:	781b      	ldrb	r3, [r3, #0]
 8006416:	2b00      	cmp	r3, #0
 8006418:	d020      	beq.n	800645c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800641a:	4b42      	ldr	r3, [pc, #264]	; (8006524 <USBD_SetConfig+0x150>)
 800641c:	781b      	ldrb	r3, [r3, #0]
 800641e:	461a      	mov	r2, r3
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006424:	4b3f      	ldr	r3, [pc, #252]	; (8006524 <USBD_SetConfig+0x150>)
 8006426:	781b      	ldrb	r3, [r3, #0]
 8006428:	4619      	mov	r1, r3
 800642a:	6878      	ldr	r0, [r7, #4]
 800642c:	f7fe ffe7 	bl	80053fe <USBD_SetClassConfig>
 8006430:	4603      	mov	r3, r0
 8006432:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8006434:	7bfb      	ldrb	r3, [r7, #15]
 8006436:	2b00      	cmp	r3, #0
 8006438:	d008      	beq.n	800644c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800643a:	6839      	ldr	r1, [r7, #0]
 800643c:	6878      	ldr	r0, [r7, #4]
 800643e:	f000 f962 	bl	8006706 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	2202      	movs	r2, #2
 8006446:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800644a:	e065      	b.n	8006518 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800644c:	6878      	ldr	r0, [r7, #4]
 800644e:	f000 fa08 	bl	8006862 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	2203      	movs	r2, #3
 8006456:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800645a:	e05d      	b.n	8006518 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800645c:	6878      	ldr	r0, [r7, #4]
 800645e:	f000 fa00 	bl	8006862 <USBD_CtlSendStatus>
      break;
 8006462:	e059      	b.n	8006518 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8006464:	4b2f      	ldr	r3, [pc, #188]	; (8006524 <USBD_SetConfig+0x150>)
 8006466:	781b      	ldrb	r3, [r3, #0]
 8006468:	2b00      	cmp	r3, #0
 800646a:	d112      	bne.n	8006492 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	2202      	movs	r2, #2
 8006470:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8006474:	4b2b      	ldr	r3, [pc, #172]	; (8006524 <USBD_SetConfig+0x150>)
 8006476:	781b      	ldrb	r3, [r3, #0]
 8006478:	461a      	mov	r2, r3
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800647e:	4b29      	ldr	r3, [pc, #164]	; (8006524 <USBD_SetConfig+0x150>)
 8006480:	781b      	ldrb	r3, [r3, #0]
 8006482:	4619      	mov	r1, r3
 8006484:	6878      	ldr	r0, [r7, #4]
 8006486:	f7fe ffd6 	bl	8005436 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800648a:	6878      	ldr	r0, [r7, #4]
 800648c:	f000 f9e9 	bl	8006862 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006490:	e042      	b.n	8006518 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8006492:	4b24      	ldr	r3, [pc, #144]	; (8006524 <USBD_SetConfig+0x150>)
 8006494:	781b      	ldrb	r3, [r3, #0]
 8006496:	461a      	mov	r2, r3
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	685b      	ldr	r3, [r3, #4]
 800649c:	429a      	cmp	r2, r3
 800649e:	d02a      	beq.n	80064f6 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	685b      	ldr	r3, [r3, #4]
 80064a4:	b2db      	uxtb	r3, r3
 80064a6:	4619      	mov	r1, r3
 80064a8:	6878      	ldr	r0, [r7, #4]
 80064aa:	f7fe ffc4 	bl	8005436 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80064ae:	4b1d      	ldr	r3, [pc, #116]	; (8006524 <USBD_SetConfig+0x150>)
 80064b0:	781b      	ldrb	r3, [r3, #0]
 80064b2:	461a      	mov	r2, r3
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80064b8:	4b1a      	ldr	r3, [pc, #104]	; (8006524 <USBD_SetConfig+0x150>)
 80064ba:	781b      	ldrb	r3, [r3, #0]
 80064bc:	4619      	mov	r1, r3
 80064be:	6878      	ldr	r0, [r7, #4]
 80064c0:	f7fe ff9d 	bl	80053fe <USBD_SetClassConfig>
 80064c4:	4603      	mov	r3, r0
 80064c6:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80064c8:	7bfb      	ldrb	r3, [r7, #15]
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d00f      	beq.n	80064ee <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80064ce:	6839      	ldr	r1, [r7, #0]
 80064d0:	6878      	ldr	r0, [r7, #4]
 80064d2:	f000 f918 	bl	8006706 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	685b      	ldr	r3, [r3, #4]
 80064da:	b2db      	uxtb	r3, r3
 80064dc:	4619      	mov	r1, r3
 80064de:	6878      	ldr	r0, [r7, #4]
 80064e0:	f7fe ffa9 	bl	8005436 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	2202      	movs	r2, #2
 80064e8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80064ec:	e014      	b.n	8006518 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80064ee:	6878      	ldr	r0, [r7, #4]
 80064f0:	f000 f9b7 	bl	8006862 <USBD_CtlSendStatus>
      break;
 80064f4:	e010      	b.n	8006518 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80064f6:	6878      	ldr	r0, [r7, #4]
 80064f8:	f000 f9b3 	bl	8006862 <USBD_CtlSendStatus>
      break;
 80064fc:	e00c      	b.n	8006518 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80064fe:	6839      	ldr	r1, [r7, #0]
 8006500:	6878      	ldr	r0, [r7, #4]
 8006502:	f000 f900 	bl	8006706 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006506:	4b07      	ldr	r3, [pc, #28]	; (8006524 <USBD_SetConfig+0x150>)
 8006508:	781b      	ldrb	r3, [r3, #0]
 800650a:	4619      	mov	r1, r3
 800650c:	6878      	ldr	r0, [r7, #4]
 800650e:	f7fe ff92 	bl	8005436 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8006512:	2303      	movs	r3, #3
 8006514:	73fb      	strb	r3, [r7, #15]
      break;
 8006516:	bf00      	nop
  }

  return ret;
 8006518:	7bfb      	ldrb	r3, [r7, #15]
}
 800651a:	4618      	mov	r0, r3
 800651c:	3710      	adds	r7, #16
 800651e:	46bd      	mov	sp, r7
 8006520:	bd80      	pop	{r7, pc}
 8006522:	bf00      	nop
 8006524:	20000180 	.word	0x20000180

08006528 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006528:	b580      	push	{r7, lr}
 800652a:	b082      	sub	sp, #8
 800652c:	af00      	add	r7, sp, #0
 800652e:	6078      	str	r0, [r7, #4]
 8006530:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006532:	683b      	ldr	r3, [r7, #0]
 8006534:	88db      	ldrh	r3, [r3, #6]
 8006536:	2b01      	cmp	r3, #1
 8006538:	d004      	beq.n	8006544 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800653a:	6839      	ldr	r1, [r7, #0]
 800653c:	6878      	ldr	r0, [r7, #4]
 800653e:	f000 f8e2 	bl	8006706 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8006542:	e023      	b.n	800658c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800654a:	b2db      	uxtb	r3, r3
 800654c:	2b02      	cmp	r3, #2
 800654e:	dc02      	bgt.n	8006556 <USBD_GetConfig+0x2e>
 8006550:	2b00      	cmp	r3, #0
 8006552:	dc03      	bgt.n	800655c <USBD_GetConfig+0x34>
 8006554:	e015      	b.n	8006582 <USBD_GetConfig+0x5a>
 8006556:	2b03      	cmp	r3, #3
 8006558:	d00b      	beq.n	8006572 <USBD_GetConfig+0x4a>
 800655a:	e012      	b.n	8006582 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	2200      	movs	r2, #0
 8006560:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	3308      	adds	r3, #8
 8006566:	2201      	movs	r2, #1
 8006568:	4619      	mov	r1, r3
 800656a:	6878      	ldr	r0, [r7, #4]
 800656c:	f000 f93c 	bl	80067e8 <USBD_CtlSendData>
        break;
 8006570:	e00c      	b.n	800658c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	3304      	adds	r3, #4
 8006576:	2201      	movs	r2, #1
 8006578:	4619      	mov	r1, r3
 800657a:	6878      	ldr	r0, [r7, #4]
 800657c:	f000 f934 	bl	80067e8 <USBD_CtlSendData>
        break;
 8006580:	e004      	b.n	800658c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8006582:	6839      	ldr	r1, [r7, #0]
 8006584:	6878      	ldr	r0, [r7, #4]
 8006586:	f000 f8be 	bl	8006706 <USBD_CtlError>
        break;
 800658a:	bf00      	nop
}
 800658c:	bf00      	nop
 800658e:	3708      	adds	r7, #8
 8006590:	46bd      	mov	sp, r7
 8006592:	bd80      	pop	{r7, pc}

08006594 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006594:	b580      	push	{r7, lr}
 8006596:	b082      	sub	sp, #8
 8006598:	af00      	add	r7, sp, #0
 800659a:	6078      	str	r0, [r7, #4]
 800659c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80065a4:	b2db      	uxtb	r3, r3
 80065a6:	3b01      	subs	r3, #1
 80065a8:	2b02      	cmp	r3, #2
 80065aa:	d81e      	bhi.n	80065ea <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80065ac:	683b      	ldr	r3, [r7, #0]
 80065ae:	88db      	ldrh	r3, [r3, #6]
 80065b0:	2b02      	cmp	r3, #2
 80065b2:	d004      	beq.n	80065be <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80065b4:	6839      	ldr	r1, [r7, #0]
 80065b6:	6878      	ldr	r0, [r7, #4]
 80065b8:	f000 f8a5 	bl	8006706 <USBD_CtlError>
        break;
 80065bc:	e01a      	b.n	80065f4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	2201      	movs	r2, #1
 80065c2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d005      	beq.n	80065da <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	68db      	ldr	r3, [r3, #12]
 80065d2:	f043 0202 	orr.w	r2, r3, #2
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	330c      	adds	r3, #12
 80065de:	2202      	movs	r2, #2
 80065e0:	4619      	mov	r1, r3
 80065e2:	6878      	ldr	r0, [r7, #4]
 80065e4:	f000 f900 	bl	80067e8 <USBD_CtlSendData>
      break;
 80065e8:	e004      	b.n	80065f4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80065ea:	6839      	ldr	r1, [r7, #0]
 80065ec:	6878      	ldr	r0, [r7, #4]
 80065ee:	f000 f88a 	bl	8006706 <USBD_CtlError>
      break;
 80065f2:	bf00      	nop
  }
}
 80065f4:	bf00      	nop
 80065f6:	3708      	adds	r7, #8
 80065f8:	46bd      	mov	sp, r7
 80065fa:	bd80      	pop	{r7, pc}

080065fc <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80065fc:	b580      	push	{r7, lr}
 80065fe:	b082      	sub	sp, #8
 8006600:	af00      	add	r7, sp, #0
 8006602:	6078      	str	r0, [r7, #4]
 8006604:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006606:	683b      	ldr	r3, [r7, #0]
 8006608:	885b      	ldrh	r3, [r3, #2]
 800660a:	2b01      	cmp	r3, #1
 800660c:	d107      	bne.n	800661e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	2201      	movs	r2, #1
 8006612:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8006616:	6878      	ldr	r0, [r7, #4]
 8006618:	f000 f923 	bl	8006862 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800661c:	e013      	b.n	8006646 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800661e:	683b      	ldr	r3, [r7, #0]
 8006620:	885b      	ldrh	r3, [r3, #2]
 8006622:	2b02      	cmp	r3, #2
 8006624:	d10b      	bne.n	800663e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8006626:	683b      	ldr	r3, [r7, #0]
 8006628:	889b      	ldrh	r3, [r3, #4]
 800662a:	0a1b      	lsrs	r3, r3, #8
 800662c:	b29b      	uxth	r3, r3
 800662e:	b2da      	uxtb	r2, r3
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8006636:	6878      	ldr	r0, [r7, #4]
 8006638:	f000 f913 	bl	8006862 <USBD_CtlSendStatus>
}
 800663c:	e003      	b.n	8006646 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800663e:	6839      	ldr	r1, [r7, #0]
 8006640:	6878      	ldr	r0, [r7, #4]
 8006642:	f000 f860 	bl	8006706 <USBD_CtlError>
}
 8006646:	bf00      	nop
 8006648:	3708      	adds	r7, #8
 800664a:	46bd      	mov	sp, r7
 800664c:	bd80      	pop	{r7, pc}

0800664e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800664e:	b580      	push	{r7, lr}
 8006650:	b082      	sub	sp, #8
 8006652:	af00      	add	r7, sp, #0
 8006654:	6078      	str	r0, [r7, #4]
 8006656:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800665e:	b2db      	uxtb	r3, r3
 8006660:	3b01      	subs	r3, #1
 8006662:	2b02      	cmp	r3, #2
 8006664:	d80b      	bhi.n	800667e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006666:	683b      	ldr	r3, [r7, #0]
 8006668:	885b      	ldrh	r3, [r3, #2]
 800666a:	2b01      	cmp	r3, #1
 800666c:	d10c      	bne.n	8006688 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	2200      	movs	r2, #0
 8006672:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8006676:	6878      	ldr	r0, [r7, #4]
 8006678:	f000 f8f3 	bl	8006862 <USBD_CtlSendStatus>
      }
      break;
 800667c:	e004      	b.n	8006688 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800667e:	6839      	ldr	r1, [r7, #0]
 8006680:	6878      	ldr	r0, [r7, #4]
 8006682:	f000 f840 	bl	8006706 <USBD_CtlError>
      break;
 8006686:	e000      	b.n	800668a <USBD_ClrFeature+0x3c>
      break;
 8006688:	bf00      	nop
  }
}
 800668a:	bf00      	nop
 800668c:	3708      	adds	r7, #8
 800668e:	46bd      	mov	sp, r7
 8006690:	bd80      	pop	{r7, pc}

08006692 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006692:	b580      	push	{r7, lr}
 8006694:	b084      	sub	sp, #16
 8006696:	af00      	add	r7, sp, #0
 8006698:	6078      	str	r0, [r7, #4]
 800669a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800669c:	683b      	ldr	r3, [r7, #0]
 800669e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	781a      	ldrb	r2, [r3, #0]
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	3301      	adds	r3, #1
 80066ac:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	781a      	ldrb	r2, [r3, #0]
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	3301      	adds	r3, #1
 80066ba:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80066bc:	68f8      	ldr	r0, [r7, #12]
 80066be:	f7ff fa41 	bl	8005b44 <SWAPBYTE>
 80066c2:	4603      	mov	r3, r0
 80066c4:	461a      	mov	r2, r3
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	3301      	adds	r3, #1
 80066ce:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	3301      	adds	r3, #1
 80066d4:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80066d6:	68f8      	ldr	r0, [r7, #12]
 80066d8:	f7ff fa34 	bl	8005b44 <SWAPBYTE>
 80066dc:	4603      	mov	r3, r0
 80066de:	461a      	mov	r2, r3
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	3301      	adds	r3, #1
 80066e8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	3301      	adds	r3, #1
 80066ee:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80066f0:	68f8      	ldr	r0, [r7, #12]
 80066f2:	f7ff fa27 	bl	8005b44 <SWAPBYTE>
 80066f6:	4603      	mov	r3, r0
 80066f8:	461a      	mov	r2, r3
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	80da      	strh	r2, [r3, #6]
}
 80066fe:	bf00      	nop
 8006700:	3710      	adds	r7, #16
 8006702:	46bd      	mov	sp, r7
 8006704:	bd80      	pop	{r7, pc}

08006706 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006706:	b580      	push	{r7, lr}
 8006708:	b082      	sub	sp, #8
 800670a:	af00      	add	r7, sp, #0
 800670c:	6078      	str	r0, [r7, #4]
 800670e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8006710:	2180      	movs	r1, #128	; 0x80
 8006712:	6878      	ldr	r0, [r7, #4]
 8006714:	f000 fbf4 	bl	8006f00 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8006718:	2100      	movs	r1, #0
 800671a:	6878      	ldr	r0, [r7, #4]
 800671c:	f000 fbf0 	bl	8006f00 <USBD_LL_StallEP>
}
 8006720:	bf00      	nop
 8006722:	3708      	adds	r7, #8
 8006724:	46bd      	mov	sp, r7
 8006726:	bd80      	pop	{r7, pc}

08006728 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006728:	b580      	push	{r7, lr}
 800672a:	b086      	sub	sp, #24
 800672c:	af00      	add	r7, sp, #0
 800672e:	60f8      	str	r0, [r7, #12]
 8006730:	60b9      	str	r1, [r7, #8]
 8006732:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006734:	2300      	movs	r3, #0
 8006736:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	2b00      	cmp	r3, #0
 800673c:	d036      	beq.n	80067ac <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8006742:	6938      	ldr	r0, [r7, #16]
 8006744:	f000 f836 	bl	80067b4 <USBD_GetLen>
 8006748:	4603      	mov	r3, r0
 800674a:	3301      	adds	r3, #1
 800674c:	b29b      	uxth	r3, r3
 800674e:	005b      	lsls	r3, r3, #1
 8006750:	b29a      	uxth	r2, r3
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8006756:	7dfb      	ldrb	r3, [r7, #23]
 8006758:	68ba      	ldr	r2, [r7, #8]
 800675a:	4413      	add	r3, r2
 800675c:	687a      	ldr	r2, [r7, #4]
 800675e:	7812      	ldrb	r2, [r2, #0]
 8006760:	701a      	strb	r2, [r3, #0]
  idx++;
 8006762:	7dfb      	ldrb	r3, [r7, #23]
 8006764:	3301      	adds	r3, #1
 8006766:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8006768:	7dfb      	ldrb	r3, [r7, #23]
 800676a:	68ba      	ldr	r2, [r7, #8]
 800676c:	4413      	add	r3, r2
 800676e:	2203      	movs	r2, #3
 8006770:	701a      	strb	r2, [r3, #0]
  idx++;
 8006772:	7dfb      	ldrb	r3, [r7, #23]
 8006774:	3301      	adds	r3, #1
 8006776:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8006778:	e013      	b.n	80067a2 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800677a:	7dfb      	ldrb	r3, [r7, #23]
 800677c:	68ba      	ldr	r2, [r7, #8]
 800677e:	4413      	add	r3, r2
 8006780:	693a      	ldr	r2, [r7, #16]
 8006782:	7812      	ldrb	r2, [r2, #0]
 8006784:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8006786:	693b      	ldr	r3, [r7, #16]
 8006788:	3301      	adds	r3, #1
 800678a:	613b      	str	r3, [r7, #16]
    idx++;
 800678c:	7dfb      	ldrb	r3, [r7, #23]
 800678e:	3301      	adds	r3, #1
 8006790:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8006792:	7dfb      	ldrb	r3, [r7, #23]
 8006794:	68ba      	ldr	r2, [r7, #8]
 8006796:	4413      	add	r3, r2
 8006798:	2200      	movs	r2, #0
 800679a:	701a      	strb	r2, [r3, #0]
    idx++;
 800679c:	7dfb      	ldrb	r3, [r7, #23]
 800679e:	3301      	adds	r3, #1
 80067a0:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80067a2:	693b      	ldr	r3, [r7, #16]
 80067a4:	781b      	ldrb	r3, [r3, #0]
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d1e7      	bne.n	800677a <USBD_GetString+0x52>
 80067aa:	e000      	b.n	80067ae <USBD_GetString+0x86>
    return;
 80067ac:	bf00      	nop
  }
}
 80067ae:	3718      	adds	r7, #24
 80067b0:	46bd      	mov	sp, r7
 80067b2:	bd80      	pop	{r7, pc}

080067b4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80067b4:	b480      	push	{r7}
 80067b6:	b085      	sub	sp, #20
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80067bc:	2300      	movs	r3, #0
 80067be:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80067c4:	e005      	b.n	80067d2 <USBD_GetLen+0x1e>
  {
    len++;
 80067c6:	7bfb      	ldrb	r3, [r7, #15]
 80067c8:	3301      	adds	r3, #1
 80067ca:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80067cc:	68bb      	ldr	r3, [r7, #8]
 80067ce:	3301      	adds	r3, #1
 80067d0:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80067d2:	68bb      	ldr	r3, [r7, #8]
 80067d4:	781b      	ldrb	r3, [r3, #0]
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d1f5      	bne.n	80067c6 <USBD_GetLen+0x12>
  }

  return len;
 80067da:	7bfb      	ldrb	r3, [r7, #15]
}
 80067dc:	4618      	mov	r0, r3
 80067de:	3714      	adds	r7, #20
 80067e0:	46bd      	mov	sp, r7
 80067e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e6:	4770      	bx	lr

080067e8 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80067e8:	b580      	push	{r7, lr}
 80067ea:	b084      	sub	sp, #16
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	60f8      	str	r0, [r7, #12]
 80067f0:	60b9      	str	r1, [r7, #8]
 80067f2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	2202      	movs	r2, #2
 80067f8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	687a      	ldr	r2, [r7, #4]
 8006800:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	687a      	ldr	r2, [r7, #4]
 8006806:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	68ba      	ldr	r2, [r7, #8]
 800680c:	2100      	movs	r1, #0
 800680e:	68f8      	ldr	r0, [r7, #12]
 8006810:	f000 fbff 	bl	8007012 <USBD_LL_Transmit>

  return USBD_OK;
 8006814:	2300      	movs	r3, #0
}
 8006816:	4618      	mov	r0, r3
 8006818:	3710      	adds	r7, #16
 800681a:	46bd      	mov	sp, r7
 800681c:	bd80      	pop	{r7, pc}

0800681e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800681e:	b580      	push	{r7, lr}
 8006820:	b084      	sub	sp, #16
 8006822:	af00      	add	r7, sp, #0
 8006824:	60f8      	str	r0, [r7, #12]
 8006826:	60b9      	str	r1, [r7, #8]
 8006828:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	68ba      	ldr	r2, [r7, #8]
 800682e:	2100      	movs	r1, #0
 8006830:	68f8      	ldr	r0, [r7, #12]
 8006832:	f000 fbee 	bl	8007012 <USBD_LL_Transmit>

  return USBD_OK;
 8006836:	2300      	movs	r3, #0
}
 8006838:	4618      	mov	r0, r3
 800683a:	3710      	adds	r7, #16
 800683c:	46bd      	mov	sp, r7
 800683e:	bd80      	pop	{r7, pc}

08006840 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8006840:	b580      	push	{r7, lr}
 8006842:	b084      	sub	sp, #16
 8006844:	af00      	add	r7, sp, #0
 8006846:	60f8      	str	r0, [r7, #12]
 8006848:	60b9      	str	r1, [r7, #8]
 800684a:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	68ba      	ldr	r2, [r7, #8]
 8006850:	2100      	movs	r1, #0
 8006852:	68f8      	ldr	r0, [r7, #12]
 8006854:	f000 fbfe 	bl	8007054 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006858:	2300      	movs	r3, #0
}
 800685a:	4618      	mov	r0, r3
 800685c:	3710      	adds	r7, #16
 800685e:	46bd      	mov	sp, r7
 8006860:	bd80      	pop	{r7, pc}

08006862 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006862:	b580      	push	{r7, lr}
 8006864:	b082      	sub	sp, #8
 8006866:	af00      	add	r7, sp, #0
 8006868:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	2204      	movs	r2, #4
 800686e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006872:	2300      	movs	r3, #0
 8006874:	2200      	movs	r2, #0
 8006876:	2100      	movs	r1, #0
 8006878:	6878      	ldr	r0, [r7, #4]
 800687a:	f000 fbca 	bl	8007012 <USBD_LL_Transmit>

  return USBD_OK;
 800687e:	2300      	movs	r3, #0
}
 8006880:	4618      	mov	r0, r3
 8006882:	3708      	adds	r7, #8
 8006884:	46bd      	mov	sp, r7
 8006886:	bd80      	pop	{r7, pc}

08006888 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8006888:	b580      	push	{r7, lr}
 800688a:	b082      	sub	sp, #8
 800688c:	af00      	add	r7, sp, #0
 800688e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	2205      	movs	r2, #5
 8006894:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006898:	2300      	movs	r3, #0
 800689a:	2200      	movs	r2, #0
 800689c:	2100      	movs	r1, #0
 800689e:	6878      	ldr	r0, [r7, #4]
 80068a0:	f000 fbd8 	bl	8007054 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80068a4:	2300      	movs	r3, #0
}
 80068a6:	4618      	mov	r0, r3
 80068a8:	3708      	adds	r7, #8
 80068aa:	46bd      	mov	sp, r7
 80068ac:	bd80      	pop	{r7, pc}
	...

080068b0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80068b0:	b580      	push	{r7, lr}
 80068b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80068b4:	2200      	movs	r2, #0
 80068b6:	490e      	ldr	r1, [pc, #56]	; (80068f0 <MX_USB_DEVICE_Init+0x40>)
 80068b8:	480e      	ldr	r0, [pc, #56]	; (80068f4 <MX_USB_DEVICE_Init+0x44>)
 80068ba:	f7fe fd23 	bl	8005304 <USBD_Init>
 80068be:	4603      	mov	r3, r0
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d001      	beq.n	80068c8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80068c4:	f7f9 ffa8 	bl	8000818 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 80068c8:	490b      	ldr	r1, [pc, #44]	; (80068f8 <MX_USB_DEVICE_Init+0x48>)
 80068ca:	480a      	ldr	r0, [pc, #40]	; (80068f4 <MX_USB_DEVICE_Init+0x44>)
 80068cc:	f7fe fd4a 	bl	8005364 <USBD_RegisterClass>
 80068d0:	4603      	mov	r3, r0
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d001      	beq.n	80068da <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80068d6:	f7f9 ff9f 	bl	8000818 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80068da:	4806      	ldr	r0, [pc, #24]	; (80068f4 <MX_USB_DEVICE_Init+0x44>)
 80068dc:	f7fe fd78 	bl	80053d0 <USBD_Start>
 80068e0:	4603      	mov	r3, r0
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d001      	beq.n	80068ea <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 80068e6:	f7f9 ff97 	bl	8000818 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80068ea:	bf00      	nop
 80068ec:	bd80      	pop	{r7, pc}
 80068ee:	bf00      	nop
 80068f0:	200000c0 	.word	0x200000c0
 80068f4:	20000184 	.word	0x20000184
 80068f8:	2000000c 	.word	0x2000000c

080068fc <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80068fc:	b480      	push	{r7}
 80068fe:	b083      	sub	sp, #12
 8006900:	af00      	add	r7, sp, #0
 8006902:	4603      	mov	r3, r0
 8006904:	6039      	str	r1, [r7, #0]
 8006906:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8006908:	683b      	ldr	r3, [r7, #0]
 800690a:	2212      	movs	r2, #18
 800690c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800690e:	4b03      	ldr	r3, [pc, #12]	; (800691c <USBD_FS_DeviceDescriptor+0x20>)
}
 8006910:	4618      	mov	r0, r3
 8006912:	370c      	adds	r7, #12
 8006914:	46bd      	mov	sp, r7
 8006916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800691a:	4770      	bx	lr
 800691c:	200000dc 	.word	0x200000dc

08006920 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006920:	b480      	push	{r7}
 8006922:	b083      	sub	sp, #12
 8006924:	af00      	add	r7, sp, #0
 8006926:	4603      	mov	r3, r0
 8006928:	6039      	str	r1, [r7, #0]
 800692a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800692c:	683b      	ldr	r3, [r7, #0]
 800692e:	2204      	movs	r2, #4
 8006930:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8006932:	4b03      	ldr	r3, [pc, #12]	; (8006940 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8006934:	4618      	mov	r0, r3
 8006936:	370c      	adds	r7, #12
 8006938:	46bd      	mov	sp, r7
 800693a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800693e:	4770      	bx	lr
 8006940:	200000f0 	.word	0x200000f0

08006944 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006944:	b580      	push	{r7, lr}
 8006946:	b082      	sub	sp, #8
 8006948:	af00      	add	r7, sp, #0
 800694a:	4603      	mov	r3, r0
 800694c:	6039      	str	r1, [r7, #0]
 800694e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006950:	79fb      	ldrb	r3, [r7, #7]
 8006952:	2b00      	cmp	r3, #0
 8006954:	d105      	bne.n	8006962 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006956:	683a      	ldr	r2, [r7, #0]
 8006958:	4907      	ldr	r1, [pc, #28]	; (8006978 <USBD_FS_ProductStrDescriptor+0x34>)
 800695a:	4808      	ldr	r0, [pc, #32]	; (800697c <USBD_FS_ProductStrDescriptor+0x38>)
 800695c:	f7ff fee4 	bl	8006728 <USBD_GetString>
 8006960:	e004      	b.n	800696c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006962:	683a      	ldr	r2, [r7, #0]
 8006964:	4904      	ldr	r1, [pc, #16]	; (8006978 <USBD_FS_ProductStrDescriptor+0x34>)
 8006966:	4805      	ldr	r0, [pc, #20]	; (800697c <USBD_FS_ProductStrDescriptor+0x38>)
 8006968:	f7ff fede 	bl	8006728 <USBD_GetString>
  }
  return USBD_StrDesc;
 800696c:	4b02      	ldr	r3, [pc, #8]	; (8006978 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800696e:	4618      	mov	r0, r3
 8006970:	3708      	adds	r7, #8
 8006972:	46bd      	mov	sp, r7
 8006974:	bd80      	pop	{r7, pc}
 8006976:	bf00      	nop
 8006978:	20000460 	.word	0x20000460
 800697c:	08007190 	.word	0x08007190

08006980 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006980:	b580      	push	{r7, lr}
 8006982:	b082      	sub	sp, #8
 8006984:	af00      	add	r7, sp, #0
 8006986:	4603      	mov	r3, r0
 8006988:	6039      	str	r1, [r7, #0]
 800698a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800698c:	683a      	ldr	r2, [r7, #0]
 800698e:	4904      	ldr	r1, [pc, #16]	; (80069a0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8006990:	4804      	ldr	r0, [pc, #16]	; (80069a4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8006992:	f7ff fec9 	bl	8006728 <USBD_GetString>
  return USBD_StrDesc;
 8006996:	4b02      	ldr	r3, [pc, #8]	; (80069a0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8006998:	4618      	mov	r0, r3
 800699a:	3708      	adds	r7, #8
 800699c:	46bd      	mov	sp, r7
 800699e:	bd80      	pop	{r7, pc}
 80069a0:	20000460 	.word	0x20000460
 80069a4:	080071a8 	.word	0x080071a8

080069a8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80069a8:	b580      	push	{r7, lr}
 80069aa:	b082      	sub	sp, #8
 80069ac:	af00      	add	r7, sp, #0
 80069ae:	4603      	mov	r3, r0
 80069b0:	6039      	str	r1, [r7, #0]
 80069b2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80069b4:	683b      	ldr	r3, [r7, #0]
 80069b6:	221a      	movs	r2, #26
 80069b8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80069ba:	f000 f843 	bl	8006a44 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80069be:	4b02      	ldr	r3, [pc, #8]	; (80069c8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80069c0:	4618      	mov	r0, r3
 80069c2:	3708      	adds	r7, #8
 80069c4:	46bd      	mov	sp, r7
 80069c6:	bd80      	pop	{r7, pc}
 80069c8:	200000f4 	.word	0x200000f4

080069cc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80069cc:	b580      	push	{r7, lr}
 80069ce:	b082      	sub	sp, #8
 80069d0:	af00      	add	r7, sp, #0
 80069d2:	4603      	mov	r3, r0
 80069d4:	6039      	str	r1, [r7, #0]
 80069d6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80069d8:	79fb      	ldrb	r3, [r7, #7]
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d105      	bne.n	80069ea <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80069de:	683a      	ldr	r2, [r7, #0]
 80069e0:	4907      	ldr	r1, [pc, #28]	; (8006a00 <USBD_FS_ConfigStrDescriptor+0x34>)
 80069e2:	4808      	ldr	r0, [pc, #32]	; (8006a04 <USBD_FS_ConfigStrDescriptor+0x38>)
 80069e4:	f7ff fea0 	bl	8006728 <USBD_GetString>
 80069e8:	e004      	b.n	80069f4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80069ea:	683a      	ldr	r2, [r7, #0]
 80069ec:	4904      	ldr	r1, [pc, #16]	; (8006a00 <USBD_FS_ConfigStrDescriptor+0x34>)
 80069ee:	4805      	ldr	r0, [pc, #20]	; (8006a04 <USBD_FS_ConfigStrDescriptor+0x38>)
 80069f0:	f7ff fe9a 	bl	8006728 <USBD_GetString>
  }
  return USBD_StrDesc;
 80069f4:	4b02      	ldr	r3, [pc, #8]	; (8006a00 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80069f6:	4618      	mov	r0, r3
 80069f8:	3708      	adds	r7, #8
 80069fa:	46bd      	mov	sp, r7
 80069fc:	bd80      	pop	{r7, pc}
 80069fe:	bf00      	nop
 8006a00:	20000460 	.word	0x20000460
 8006a04:	080071bc 	.word	0x080071bc

08006a08 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006a08:	b580      	push	{r7, lr}
 8006a0a:	b082      	sub	sp, #8
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	4603      	mov	r3, r0
 8006a10:	6039      	str	r1, [r7, #0]
 8006a12:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006a14:	79fb      	ldrb	r3, [r7, #7]
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d105      	bne.n	8006a26 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006a1a:	683a      	ldr	r2, [r7, #0]
 8006a1c:	4907      	ldr	r1, [pc, #28]	; (8006a3c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006a1e:	4808      	ldr	r0, [pc, #32]	; (8006a40 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006a20:	f7ff fe82 	bl	8006728 <USBD_GetString>
 8006a24:	e004      	b.n	8006a30 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006a26:	683a      	ldr	r2, [r7, #0]
 8006a28:	4904      	ldr	r1, [pc, #16]	; (8006a3c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006a2a:	4805      	ldr	r0, [pc, #20]	; (8006a40 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006a2c:	f7ff fe7c 	bl	8006728 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006a30:	4b02      	ldr	r3, [pc, #8]	; (8006a3c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8006a32:	4618      	mov	r0, r3
 8006a34:	3708      	adds	r7, #8
 8006a36:	46bd      	mov	sp, r7
 8006a38:	bd80      	pop	{r7, pc}
 8006a3a:	bf00      	nop
 8006a3c:	20000460 	.word	0x20000460
 8006a40:	080071c8 	.word	0x080071c8

08006a44 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8006a44:	b580      	push	{r7, lr}
 8006a46:	b084      	sub	sp, #16
 8006a48:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8006a4a:	4b0f      	ldr	r3, [pc, #60]	; (8006a88 <Get_SerialNum+0x44>)
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8006a50:	4b0e      	ldr	r3, [pc, #56]	; (8006a8c <Get_SerialNum+0x48>)
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8006a56:	4b0e      	ldr	r3, [pc, #56]	; (8006a90 <Get_SerialNum+0x4c>)
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8006a5c:	68fa      	ldr	r2, [r7, #12]
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	4413      	add	r3, r2
 8006a62:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d009      	beq.n	8006a7e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8006a6a:	2208      	movs	r2, #8
 8006a6c:	4909      	ldr	r1, [pc, #36]	; (8006a94 <Get_SerialNum+0x50>)
 8006a6e:	68f8      	ldr	r0, [r7, #12]
 8006a70:	f000 f814 	bl	8006a9c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8006a74:	2204      	movs	r2, #4
 8006a76:	4908      	ldr	r1, [pc, #32]	; (8006a98 <Get_SerialNum+0x54>)
 8006a78:	68b8      	ldr	r0, [r7, #8]
 8006a7a:	f000 f80f 	bl	8006a9c <IntToUnicode>
  }
}
 8006a7e:	bf00      	nop
 8006a80:	3710      	adds	r7, #16
 8006a82:	46bd      	mov	sp, r7
 8006a84:	bd80      	pop	{r7, pc}
 8006a86:	bf00      	nop
 8006a88:	1fff7a10 	.word	0x1fff7a10
 8006a8c:	1fff7a14 	.word	0x1fff7a14
 8006a90:	1fff7a18 	.word	0x1fff7a18
 8006a94:	200000f6 	.word	0x200000f6
 8006a98:	20000106 	.word	0x20000106

08006a9c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8006a9c:	b480      	push	{r7}
 8006a9e:	b087      	sub	sp, #28
 8006aa0:	af00      	add	r7, sp, #0
 8006aa2:	60f8      	str	r0, [r7, #12]
 8006aa4:	60b9      	str	r1, [r7, #8]
 8006aa6:	4613      	mov	r3, r2
 8006aa8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8006aaa:	2300      	movs	r3, #0
 8006aac:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8006aae:	2300      	movs	r3, #0
 8006ab0:	75fb      	strb	r3, [r7, #23]
 8006ab2:	e027      	b.n	8006b04 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	0f1b      	lsrs	r3, r3, #28
 8006ab8:	2b09      	cmp	r3, #9
 8006aba:	d80b      	bhi.n	8006ad4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	0f1b      	lsrs	r3, r3, #28
 8006ac0:	b2da      	uxtb	r2, r3
 8006ac2:	7dfb      	ldrb	r3, [r7, #23]
 8006ac4:	005b      	lsls	r3, r3, #1
 8006ac6:	4619      	mov	r1, r3
 8006ac8:	68bb      	ldr	r3, [r7, #8]
 8006aca:	440b      	add	r3, r1
 8006acc:	3230      	adds	r2, #48	; 0x30
 8006ace:	b2d2      	uxtb	r2, r2
 8006ad0:	701a      	strb	r2, [r3, #0]
 8006ad2:	e00a      	b.n	8006aea <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	0f1b      	lsrs	r3, r3, #28
 8006ad8:	b2da      	uxtb	r2, r3
 8006ada:	7dfb      	ldrb	r3, [r7, #23]
 8006adc:	005b      	lsls	r3, r3, #1
 8006ade:	4619      	mov	r1, r3
 8006ae0:	68bb      	ldr	r3, [r7, #8]
 8006ae2:	440b      	add	r3, r1
 8006ae4:	3237      	adds	r2, #55	; 0x37
 8006ae6:	b2d2      	uxtb	r2, r2
 8006ae8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	011b      	lsls	r3, r3, #4
 8006aee:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8006af0:	7dfb      	ldrb	r3, [r7, #23]
 8006af2:	005b      	lsls	r3, r3, #1
 8006af4:	3301      	adds	r3, #1
 8006af6:	68ba      	ldr	r2, [r7, #8]
 8006af8:	4413      	add	r3, r2
 8006afa:	2200      	movs	r2, #0
 8006afc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8006afe:	7dfb      	ldrb	r3, [r7, #23]
 8006b00:	3301      	adds	r3, #1
 8006b02:	75fb      	strb	r3, [r7, #23]
 8006b04:	7dfa      	ldrb	r2, [r7, #23]
 8006b06:	79fb      	ldrb	r3, [r7, #7]
 8006b08:	429a      	cmp	r2, r3
 8006b0a:	d3d3      	bcc.n	8006ab4 <IntToUnicode+0x18>
  }
}
 8006b0c:	bf00      	nop
 8006b0e:	bf00      	nop
 8006b10:	371c      	adds	r7, #28
 8006b12:	46bd      	mov	sp, r7
 8006b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b18:	4770      	bx	lr
	...

08006b1c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8006b1c:	b580      	push	{r7, lr}
 8006b1e:	b08a      	sub	sp, #40	; 0x28
 8006b20:	af00      	add	r7, sp, #0
 8006b22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006b24:	f107 0314 	add.w	r3, r7, #20
 8006b28:	2200      	movs	r2, #0
 8006b2a:	601a      	str	r2, [r3, #0]
 8006b2c:	605a      	str	r2, [r3, #4]
 8006b2e:	609a      	str	r2, [r3, #8]
 8006b30:	60da      	str	r2, [r3, #12]
 8006b32:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006b3c:	d13a      	bne.n	8006bb4 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006b3e:	2300      	movs	r3, #0
 8006b40:	613b      	str	r3, [r7, #16]
 8006b42:	4b1e      	ldr	r3, [pc, #120]	; (8006bbc <HAL_PCD_MspInit+0xa0>)
 8006b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b46:	4a1d      	ldr	r2, [pc, #116]	; (8006bbc <HAL_PCD_MspInit+0xa0>)
 8006b48:	f043 0301 	orr.w	r3, r3, #1
 8006b4c:	6313      	str	r3, [r2, #48]	; 0x30
 8006b4e:	4b1b      	ldr	r3, [pc, #108]	; (8006bbc <HAL_PCD_MspInit+0xa0>)
 8006b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b52:	f003 0301 	and.w	r3, r3, #1
 8006b56:	613b      	str	r3, [r7, #16]
 8006b58:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11;
 8006b5a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8006b5e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006b60:	2302      	movs	r3, #2
 8006b62:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006b64:	2300      	movs	r3, #0
 8006b66:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006b68:	2303      	movs	r3, #3
 8006b6a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8006b6c:	230a      	movs	r3, #10
 8006b6e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006b70:	f107 0314 	add.w	r3, r7, #20
 8006b74:	4619      	mov	r1, r3
 8006b76:	4812      	ldr	r0, [pc, #72]	; (8006bc0 <HAL_PCD_MspInit+0xa4>)
 8006b78:	f7fa f8ee 	bl	8000d58 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8006b7c:	4b0f      	ldr	r3, [pc, #60]	; (8006bbc <HAL_PCD_MspInit+0xa0>)
 8006b7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b80:	4a0e      	ldr	r2, [pc, #56]	; (8006bbc <HAL_PCD_MspInit+0xa0>)
 8006b82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b86:	6353      	str	r3, [r2, #52]	; 0x34
 8006b88:	2300      	movs	r3, #0
 8006b8a:	60fb      	str	r3, [r7, #12]
 8006b8c:	4b0b      	ldr	r3, [pc, #44]	; (8006bbc <HAL_PCD_MspInit+0xa0>)
 8006b8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b90:	4a0a      	ldr	r2, [pc, #40]	; (8006bbc <HAL_PCD_MspInit+0xa0>)
 8006b92:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006b96:	6453      	str	r3, [r2, #68]	; 0x44
 8006b98:	4b08      	ldr	r3, [pc, #32]	; (8006bbc <HAL_PCD_MspInit+0xa0>)
 8006b9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b9c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006ba0:	60fb      	str	r3, [r7, #12]
 8006ba2:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8006ba4:	2200      	movs	r2, #0
 8006ba6:	2100      	movs	r1, #0
 8006ba8:	2043      	movs	r0, #67	; 0x43
 8006baa:	f7fa f89e 	bl	8000cea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8006bae:	2043      	movs	r0, #67	; 0x43
 8006bb0:	f7fa f8b7 	bl	8000d22 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8006bb4:	bf00      	nop
 8006bb6:	3728      	adds	r7, #40	; 0x28
 8006bb8:	46bd      	mov	sp, r7
 8006bba:	bd80      	pop	{r7, pc}
 8006bbc:	40023800 	.word	0x40023800
 8006bc0:	40020000 	.word	0x40020000

08006bc4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006bc4:	b580      	push	{r7, lr}
 8006bc6:	b082      	sub	sp, #8
 8006bc8:	af00      	add	r7, sp, #0
 8006bca:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8006bd8:	4619      	mov	r1, r3
 8006bda:	4610      	mov	r0, r2
 8006bdc:	f7fe fc45 	bl	800546a <USBD_LL_SetupStage>
}
 8006be0:	bf00      	nop
 8006be2:	3708      	adds	r7, #8
 8006be4:	46bd      	mov	sp, r7
 8006be6:	bd80      	pop	{r7, pc}

08006be8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006be8:	b580      	push	{r7, lr}
 8006bea:	b082      	sub	sp, #8
 8006bec:	af00      	add	r7, sp, #0
 8006bee:	6078      	str	r0, [r7, #4]
 8006bf0:	460b      	mov	r3, r1
 8006bf2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8006bfa:	78fa      	ldrb	r2, [r7, #3]
 8006bfc:	6879      	ldr	r1, [r7, #4]
 8006bfe:	4613      	mov	r3, r2
 8006c00:	00db      	lsls	r3, r3, #3
 8006c02:	4413      	add	r3, r2
 8006c04:	009b      	lsls	r3, r3, #2
 8006c06:	440b      	add	r3, r1
 8006c08:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8006c0c:	681a      	ldr	r2, [r3, #0]
 8006c0e:	78fb      	ldrb	r3, [r7, #3]
 8006c10:	4619      	mov	r1, r3
 8006c12:	f7fe fc7f 	bl	8005514 <USBD_LL_DataOutStage>
}
 8006c16:	bf00      	nop
 8006c18:	3708      	adds	r7, #8
 8006c1a:	46bd      	mov	sp, r7
 8006c1c:	bd80      	pop	{r7, pc}

08006c1e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006c1e:	b580      	push	{r7, lr}
 8006c20:	b082      	sub	sp, #8
 8006c22:	af00      	add	r7, sp, #0
 8006c24:	6078      	str	r0, [r7, #4]
 8006c26:	460b      	mov	r3, r1
 8006c28:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8006c30:	78fa      	ldrb	r2, [r7, #3]
 8006c32:	6879      	ldr	r1, [r7, #4]
 8006c34:	4613      	mov	r3, r2
 8006c36:	00db      	lsls	r3, r3, #3
 8006c38:	4413      	add	r3, r2
 8006c3a:	009b      	lsls	r3, r3, #2
 8006c3c:	440b      	add	r3, r1
 8006c3e:	334c      	adds	r3, #76	; 0x4c
 8006c40:	681a      	ldr	r2, [r3, #0]
 8006c42:	78fb      	ldrb	r3, [r7, #3]
 8006c44:	4619      	mov	r1, r3
 8006c46:	f7fe fd18 	bl	800567a <USBD_LL_DataInStage>
}
 8006c4a:	bf00      	nop
 8006c4c:	3708      	adds	r7, #8
 8006c4e:	46bd      	mov	sp, r7
 8006c50:	bd80      	pop	{r7, pc}

08006c52 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006c52:	b580      	push	{r7, lr}
 8006c54:	b082      	sub	sp, #8
 8006c56:	af00      	add	r7, sp, #0
 8006c58:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006c60:	4618      	mov	r0, r3
 8006c62:	f7fe fe4c 	bl	80058fe <USBD_LL_SOF>
}
 8006c66:	bf00      	nop
 8006c68:	3708      	adds	r7, #8
 8006c6a:	46bd      	mov	sp, r7
 8006c6c:	bd80      	pop	{r7, pc}

08006c6e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006c6e:	b580      	push	{r7, lr}
 8006c70:	b084      	sub	sp, #16
 8006c72:	af00      	add	r7, sp, #0
 8006c74:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8006c76:	2301      	movs	r3, #1
 8006c78:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	68db      	ldr	r3, [r3, #12]
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d102      	bne.n	8006c88 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8006c82:	2300      	movs	r3, #0
 8006c84:	73fb      	strb	r3, [r7, #15]
 8006c86:	e008      	b.n	8006c9a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	68db      	ldr	r3, [r3, #12]
 8006c8c:	2b02      	cmp	r3, #2
 8006c8e:	d102      	bne.n	8006c96 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8006c90:	2301      	movs	r3, #1
 8006c92:	73fb      	strb	r3, [r7, #15]
 8006c94:	e001      	b.n	8006c9a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8006c96:	f7f9 fdbf 	bl	8000818 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006ca0:	7bfa      	ldrb	r2, [r7, #15]
 8006ca2:	4611      	mov	r1, r2
 8006ca4:	4618      	mov	r0, r3
 8006ca6:	f7fe fdec 	bl	8005882 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006cb0:	4618      	mov	r0, r3
 8006cb2:	f7fe fd94 	bl	80057de <USBD_LL_Reset>
}
 8006cb6:	bf00      	nop
 8006cb8:	3710      	adds	r7, #16
 8006cba:	46bd      	mov	sp, r7
 8006cbc:	bd80      	pop	{r7, pc}
	...

08006cc0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006cc0:	b580      	push	{r7, lr}
 8006cc2:	b082      	sub	sp, #8
 8006cc4:	af00      	add	r7, sp, #0
 8006cc6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006cce:	4618      	mov	r0, r3
 8006cd0:	f7fe fde7 	bl	80058a2 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	687a      	ldr	r2, [r7, #4]
 8006ce0:	6812      	ldr	r2, [r2, #0]
 8006ce2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006ce6:	f043 0301 	orr.w	r3, r3, #1
 8006cea:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	6a1b      	ldr	r3, [r3, #32]
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d005      	beq.n	8006d00 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006cf4:	4b04      	ldr	r3, [pc, #16]	; (8006d08 <HAL_PCD_SuspendCallback+0x48>)
 8006cf6:	691b      	ldr	r3, [r3, #16]
 8006cf8:	4a03      	ldr	r2, [pc, #12]	; (8006d08 <HAL_PCD_SuspendCallback+0x48>)
 8006cfa:	f043 0306 	orr.w	r3, r3, #6
 8006cfe:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8006d00:	bf00      	nop
 8006d02:	3708      	adds	r7, #8
 8006d04:	46bd      	mov	sp, r7
 8006d06:	bd80      	pop	{r7, pc}
 8006d08:	e000ed00 	.word	0xe000ed00

08006d0c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006d0c:	b580      	push	{r7, lr}
 8006d0e:	b082      	sub	sp, #8
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006d1a:	4618      	mov	r0, r3
 8006d1c:	f7fe fdd7 	bl	80058ce <USBD_LL_Resume>
}
 8006d20:	bf00      	nop
 8006d22:	3708      	adds	r7, #8
 8006d24:	46bd      	mov	sp, r7
 8006d26:	bd80      	pop	{r7, pc}

08006d28 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006d28:	b580      	push	{r7, lr}
 8006d2a:	b082      	sub	sp, #8
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	6078      	str	r0, [r7, #4]
 8006d30:	460b      	mov	r3, r1
 8006d32:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006d3a:	78fa      	ldrb	r2, [r7, #3]
 8006d3c:	4611      	mov	r1, r2
 8006d3e:	4618      	mov	r0, r3
 8006d40:	f7fe fe2f 	bl	80059a2 <USBD_LL_IsoOUTIncomplete>
}
 8006d44:	bf00      	nop
 8006d46:	3708      	adds	r7, #8
 8006d48:	46bd      	mov	sp, r7
 8006d4a:	bd80      	pop	{r7, pc}

08006d4c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006d4c:	b580      	push	{r7, lr}
 8006d4e:	b082      	sub	sp, #8
 8006d50:	af00      	add	r7, sp, #0
 8006d52:	6078      	str	r0, [r7, #4]
 8006d54:	460b      	mov	r3, r1
 8006d56:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006d5e:	78fa      	ldrb	r2, [r7, #3]
 8006d60:	4611      	mov	r1, r2
 8006d62:	4618      	mov	r0, r3
 8006d64:	f7fe fdeb 	bl	800593e <USBD_LL_IsoINIncomplete>
}
 8006d68:	bf00      	nop
 8006d6a:	3708      	adds	r7, #8
 8006d6c:	46bd      	mov	sp, r7
 8006d6e:	bd80      	pop	{r7, pc}

08006d70 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006d70:	b580      	push	{r7, lr}
 8006d72:	b082      	sub	sp, #8
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006d7e:	4618      	mov	r0, r3
 8006d80:	f7fe fe41 	bl	8005a06 <USBD_LL_DevConnected>
}
 8006d84:	bf00      	nop
 8006d86:	3708      	adds	r7, #8
 8006d88:	46bd      	mov	sp, r7
 8006d8a:	bd80      	pop	{r7, pc}

08006d8c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006d8c:	b580      	push	{r7, lr}
 8006d8e:	b082      	sub	sp, #8
 8006d90:	af00      	add	r7, sp, #0
 8006d92:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006d9a:	4618      	mov	r0, r3
 8006d9c:	f7fe fe3e 	bl	8005a1c <USBD_LL_DevDisconnected>
}
 8006da0:	bf00      	nop
 8006da2:	3708      	adds	r7, #8
 8006da4:	46bd      	mov	sp, r7
 8006da6:	bd80      	pop	{r7, pc}

08006da8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8006da8:	b580      	push	{r7, lr}
 8006daa:	b082      	sub	sp, #8
 8006dac:	af00      	add	r7, sp, #0
 8006dae:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	781b      	ldrb	r3, [r3, #0]
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d13c      	bne.n	8006e32 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8006db8:	4a20      	ldr	r2, [pc, #128]	; (8006e3c <USBD_LL_Init+0x94>)
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	4a1e      	ldr	r2, [pc, #120]	; (8006e3c <USBD_LL_Init+0x94>)
 8006dc4:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8006dc8:	4b1c      	ldr	r3, [pc, #112]	; (8006e3c <USBD_LL_Init+0x94>)
 8006dca:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8006dce:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8006dd0:	4b1a      	ldr	r3, [pc, #104]	; (8006e3c <USBD_LL_Init+0x94>)
 8006dd2:	2204      	movs	r2, #4
 8006dd4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8006dd6:	4b19      	ldr	r3, [pc, #100]	; (8006e3c <USBD_LL_Init+0x94>)
 8006dd8:	2202      	movs	r2, #2
 8006dda:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8006ddc:	4b17      	ldr	r3, [pc, #92]	; (8006e3c <USBD_LL_Init+0x94>)
 8006dde:	2200      	movs	r2, #0
 8006de0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8006de2:	4b16      	ldr	r3, [pc, #88]	; (8006e3c <USBD_LL_Init+0x94>)
 8006de4:	2202      	movs	r2, #2
 8006de6:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8006de8:	4b14      	ldr	r3, [pc, #80]	; (8006e3c <USBD_LL_Init+0x94>)
 8006dea:	2200      	movs	r2, #0
 8006dec:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8006dee:	4b13      	ldr	r3, [pc, #76]	; (8006e3c <USBD_LL_Init+0x94>)
 8006df0:	2200      	movs	r2, #0
 8006df2:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8006df4:	4b11      	ldr	r3, [pc, #68]	; (8006e3c <USBD_LL_Init+0x94>)
 8006df6:	2200      	movs	r2, #0
 8006df8:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8006dfa:	4b10      	ldr	r3, [pc, #64]	; (8006e3c <USBD_LL_Init+0x94>)
 8006dfc:	2200      	movs	r2, #0
 8006dfe:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8006e00:	4b0e      	ldr	r3, [pc, #56]	; (8006e3c <USBD_LL_Init+0x94>)
 8006e02:	2200      	movs	r2, #0
 8006e04:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8006e06:	480d      	ldr	r0, [pc, #52]	; (8006e3c <USBD_LL_Init+0x94>)
 8006e08:	f7fa f95a 	bl	80010c0 <HAL_PCD_Init>
 8006e0c:	4603      	mov	r3, r0
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d001      	beq.n	8006e16 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8006e12:	f7f9 fd01 	bl	8000818 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8006e16:	2180      	movs	r1, #128	; 0x80
 8006e18:	4808      	ldr	r0, [pc, #32]	; (8006e3c <USBD_LL_Init+0x94>)
 8006e1a:	f7fb fb9a 	bl	8002552 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8006e1e:	2240      	movs	r2, #64	; 0x40
 8006e20:	2100      	movs	r1, #0
 8006e22:	4806      	ldr	r0, [pc, #24]	; (8006e3c <USBD_LL_Init+0x94>)
 8006e24:	f7fb fb4e 	bl	80024c4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8006e28:	2280      	movs	r2, #128	; 0x80
 8006e2a:	2101      	movs	r1, #1
 8006e2c:	4803      	ldr	r0, [pc, #12]	; (8006e3c <USBD_LL_Init+0x94>)
 8006e2e:	f7fb fb49 	bl	80024c4 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8006e32:	2300      	movs	r3, #0
}
 8006e34:	4618      	mov	r0, r3
 8006e36:	3708      	adds	r7, #8
 8006e38:	46bd      	mov	sp, r7
 8006e3a:	bd80      	pop	{r7, pc}
 8006e3c:	20000660 	.word	0x20000660

08006e40 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8006e40:	b580      	push	{r7, lr}
 8006e42:	b084      	sub	sp, #16
 8006e44:	af00      	add	r7, sp, #0
 8006e46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006e48:	2300      	movs	r3, #0
 8006e4a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006e4c:	2300      	movs	r3, #0
 8006e4e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006e56:	4618      	mov	r0, r3
 8006e58:	f7fa fa4f 	bl	80012fa <HAL_PCD_Start>
 8006e5c:	4603      	mov	r3, r0
 8006e5e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006e60:	7bfb      	ldrb	r3, [r7, #15]
 8006e62:	4618      	mov	r0, r3
 8006e64:	f000 f930 	bl	80070c8 <USBD_Get_USB_Status>
 8006e68:	4603      	mov	r3, r0
 8006e6a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006e6c:	7bbb      	ldrb	r3, [r7, #14]
}
 8006e6e:	4618      	mov	r0, r3
 8006e70:	3710      	adds	r7, #16
 8006e72:	46bd      	mov	sp, r7
 8006e74:	bd80      	pop	{r7, pc}

08006e76 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8006e76:	b580      	push	{r7, lr}
 8006e78:	b084      	sub	sp, #16
 8006e7a:	af00      	add	r7, sp, #0
 8006e7c:	6078      	str	r0, [r7, #4]
 8006e7e:	4608      	mov	r0, r1
 8006e80:	4611      	mov	r1, r2
 8006e82:	461a      	mov	r2, r3
 8006e84:	4603      	mov	r3, r0
 8006e86:	70fb      	strb	r3, [r7, #3]
 8006e88:	460b      	mov	r3, r1
 8006e8a:	70bb      	strb	r3, [r7, #2]
 8006e8c:	4613      	mov	r3, r2
 8006e8e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006e90:	2300      	movs	r3, #0
 8006e92:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006e94:	2300      	movs	r3, #0
 8006e96:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8006e9e:	78bb      	ldrb	r3, [r7, #2]
 8006ea0:	883a      	ldrh	r2, [r7, #0]
 8006ea2:	78f9      	ldrb	r1, [r7, #3]
 8006ea4:	f7fa ff20 	bl	8001ce8 <HAL_PCD_EP_Open>
 8006ea8:	4603      	mov	r3, r0
 8006eaa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006eac:	7bfb      	ldrb	r3, [r7, #15]
 8006eae:	4618      	mov	r0, r3
 8006eb0:	f000 f90a 	bl	80070c8 <USBD_Get_USB_Status>
 8006eb4:	4603      	mov	r3, r0
 8006eb6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006eb8:	7bbb      	ldrb	r3, [r7, #14]
}
 8006eba:	4618      	mov	r0, r3
 8006ebc:	3710      	adds	r7, #16
 8006ebe:	46bd      	mov	sp, r7
 8006ec0:	bd80      	pop	{r7, pc}

08006ec2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006ec2:	b580      	push	{r7, lr}
 8006ec4:	b084      	sub	sp, #16
 8006ec6:	af00      	add	r7, sp, #0
 8006ec8:	6078      	str	r0, [r7, #4]
 8006eca:	460b      	mov	r3, r1
 8006ecc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006ece:	2300      	movs	r3, #0
 8006ed0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006ed2:	2300      	movs	r3, #0
 8006ed4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006edc:	78fa      	ldrb	r2, [r7, #3]
 8006ede:	4611      	mov	r1, r2
 8006ee0:	4618      	mov	r0, r3
 8006ee2:	f7fa ff69 	bl	8001db8 <HAL_PCD_EP_Close>
 8006ee6:	4603      	mov	r3, r0
 8006ee8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006eea:	7bfb      	ldrb	r3, [r7, #15]
 8006eec:	4618      	mov	r0, r3
 8006eee:	f000 f8eb 	bl	80070c8 <USBD_Get_USB_Status>
 8006ef2:	4603      	mov	r3, r0
 8006ef4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006ef6:	7bbb      	ldrb	r3, [r7, #14]
}
 8006ef8:	4618      	mov	r0, r3
 8006efa:	3710      	adds	r7, #16
 8006efc:	46bd      	mov	sp, r7
 8006efe:	bd80      	pop	{r7, pc}

08006f00 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006f00:	b580      	push	{r7, lr}
 8006f02:	b084      	sub	sp, #16
 8006f04:	af00      	add	r7, sp, #0
 8006f06:	6078      	str	r0, [r7, #4]
 8006f08:	460b      	mov	r3, r1
 8006f0a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006f0c:	2300      	movs	r3, #0
 8006f0e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006f10:	2300      	movs	r3, #0
 8006f12:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006f1a:	78fa      	ldrb	r2, [r7, #3]
 8006f1c:	4611      	mov	r1, r2
 8006f1e:	4618      	mov	r0, r3
 8006f20:	f7fb f829 	bl	8001f76 <HAL_PCD_EP_SetStall>
 8006f24:	4603      	mov	r3, r0
 8006f26:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006f28:	7bfb      	ldrb	r3, [r7, #15]
 8006f2a:	4618      	mov	r0, r3
 8006f2c:	f000 f8cc 	bl	80070c8 <USBD_Get_USB_Status>
 8006f30:	4603      	mov	r3, r0
 8006f32:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006f34:	7bbb      	ldrb	r3, [r7, #14]
}
 8006f36:	4618      	mov	r0, r3
 8006f38:	3710      	adds	r7, #16
 8006f3a:	46bd      	mov	sp, r7
 8006f3c:	bd80      	pop	{r7, pc}

08006f3e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006f3e:	b580      	push	{r7, lr}
 8006f40:	b084      	sub	sp, #16
 8006f42:	af00      	add	r7, sp, #0
 8006f44:	6078      	str	r0, [r7, #4]
 8006f46:	460b      	mov	r3, r1
 8006f48:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006f4a:	2300      	movs	r3, #0
 8006f4c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006f4e:	2300      	movs	r3, #0
 8006f50:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006f58:	78fa      	ldrb	r2, [r7, #3]
 8006f5a:	4611      	mov	r1, r2
 8006f5c:	4618      	mov	r0, r3
 8006f5e:	f7fb f86e 	bl	800203e <HAL_PCD_EP_ClrStall>
 8006f62:	4603      	mov	r3, r0
 8006f64:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006f66:	7bfb      	ldrb	r3, [r7, #15]
 8006f68:	4618      	mov	r0, r3
 8006f6a:	f000 f8ad 	bl	80070c8 <USBD_Get_USB_Status>
 8006f6e:	4603      	mov	r3, r0
 8006f70:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006f72:	7bbb      	ldrb	r3, [r7, #14]
}
 8006f74:	4618      	mov	r0, r3
 8006f76:	3710      	adds	r7, #16
 8006f78:	46bd      	mov	sp, r7
 8006f7a:	bd80      	pop	{r7, pc}

08006f7c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006f7c:	b480      	push	{r7}
 8006f7e:	b085      	sub	sp, #20
 8006f80:	af00      	add	r7, sp, #0
 8006f82:	6078      	str	r0, [r7, #4]
 8006f84:	460b      	mov	r3, r1
 8006f86:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006f8e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8006f90:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	da0b      	bge.n	8006fb0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8006f98:	78fb      	ldrb	r3, [r7, #3]
 8006f9a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006f9e:	68f9      	ldr	r1, [r7, #12]
 8006fa0:	4613      	mov	r3, r2
 8006fa2:	00db      	lsls	r3, r3, #3
 8006fa4:	4413      	add	r3, r2
 8006fa6:	009b      	lsls	r3, r3, #2
 8006fa8:	440b      	add	r3, r1
 8006faa:	333e      	adds	r3, #62	; 0x3e
 8006fac:	781b      	ldrb	r3, [r3, #0]
 8006fae:	e00b      	b.n	8006fc8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8006fb0:	78fb      	ldrb	r3, [r7, #3]
 8006fb2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006fb6:	68f9      	ldr	r1, [r7, #12]
 8006fb8:	4613      	mov	r3, r2
 8006fba:	00db      	lsls	r3, r3, #3
 8006fbc:	4413      	add	r3, r2
 8006fbe:	009b      	lsls	r3, r3, #2
 8006fc0:	440b      	add	r3, r1
 8006fc2:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8006fc6:	781b      	ldrb	r3, [r3, #0]
  }
}
 8006fc8:	4618      	mov	r0, r3
 8006fca:	3714      	adds	r7, #20
 8006fcc:	46bd      	mov	sp, r7
 8006fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd2:	4770      	bx	lr

08006fd4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8006fd4:	b580      	push	{r7, lr}
 8006fd6:	b084      	sub	sp, #16
 8006fd8:	af00      	add	r7, sp, #0
 8006fda:	6078      	str	r0, [r7, #4]
 8006fdc:	460b      	mov	r3, r1
 8006fde:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006fe0:	2300      	movs	r3, #0
 8006fe2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006fe4:	2300      	movs	r3, #0
 8006fe6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006fee:	78fa      	ldrb	r2, [r7, #3]
 8006ff0:	4611      	mov	r1, r2
 8006ff2:	4618      	mov	r0, r3
 8006ff4:	f7fa fe53 	bl	8001c9e <HAL_PCD_SetAddress>
 8006ff8:	4603      	mov	r3, r0
 8006ffa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006ffc:	7bfb      	ldrb	r3, [r7, #15]
 8006ffe:	4618      	mov	r0, r3
 8007000:	f000 f862 	bl	80070c8 <USBD_Get_USB_Status>
 8007004:	4603      	mov	r3, r0
 8007006:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007008:	7bbb      	ldrb	r3, [r7, #14]
}
 800700a:	4618      	mov	r0, r3
 800700c:	3710      	adds	r7, #16
 800700e:	46bd      	mov	sp, r7
 8007010:	bd80      	pop	{r7, pc}

08007012 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007012:	b580      	push	{r7, lr}
 8007014:	b086      	sub	sp, #24
 8007016:	af00      	add	r7, sp, #0
 8007018:	60f8      	str	r0, [r7, #12]
 800701a:	607a      	str	r2, [r7, #4]
 800701c:	603b      	str	r3, [r7, #0]
 800701e:	460b      	mov	r3, r1
 8007020:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007022:	2300      	movs	r3, #0
 8007024:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007026:	2300      	movs	r3, #0
 8007028:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8007030:	7af9      	ldrb	r1, [r7, #11]
 8007032:	683b      	ldr	r3, [r7, #0]
 8007034:	687a      	ldr	r2, [r7, #4]
 8007036:	f7fa ff54 	bl	8001ee2 <HAL_PCD_EP_Transmit>
 800703a:	4603      	mov	r3, r0
 800703c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800703e:	7dfb      	ldrb	r3, [r7, #23]
 8007040:	4618      	mov	r0, r3
 8007042:	f000 f841 	bl	80070c8 <USBD_Get_USB_Status>
 8007046:	4603      	mov	r3, r0
 8007048:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800704a:	7dbb      	ldrb	r3, [r7, #22]
}
 800704c:	4618      	mov	r0, r3
 800704e:	3718      	adds	r7, #24
 8007050:	46bd      	mov	sp, r7
 8007052:	bd80      	pop	{r7, pc}

08007054 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007054:	b580      	push	{r7, lr}
 8007056:	b086      	sub	sp, #24
 8007058:	af00      	add	r7, sp, #0
 800705a:	60f8      	str	r0, [r7, #12]
 800705c:	607a      	str	r2, [r7, #4]
 800705e:	603b      	str	r3, [r7, #0]
 8007060:	460b      	mov	r3, r1
 8007062:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007064:	2300      	movs	r3, #0
 8007066:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007068:	2300      	movs	r3, #0
 800706a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8007072:	7af9      	ldrb	r1, [r7, #11]
 8007074:	683b      	ldr	r3, [r7, #0]
 8007076:	687a      	ldr	r2, [r7, #4]
 8007078:	f7fa fee8 	bl	8001e4c <HAL_PCD_EP_Receive>
 800707c:	4603      	mov	r3, r0
 800707e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007080:	7dfb      	ldrb	r3, [r7, #23]
 8007082:	4618      	mov	r0, r3
 8007084:	f000 f820 	bl	80070c8 <USBD_Get_USB_Status>
 8007088:	4603      	mov	r3, r0
 800708a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800708c:	7dbb      	ldrb	r3, [r7, #22]
}
 800708e:	4618      	mov	r0, r3
 8007090:	3718      	adds	r7, #24
 8007092:	46bd      	mov	sp, r7
 8007094:	bd80      	pop	{r7, pc}
	...

08007098 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8007098:	b480      	push	{r7}
 800709a:	b083      	sub	sp, #12
 800709c:	af00      	add	r7, sp, #0
 800709e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80070a0:	4b03      	ldr	r3, [pc, #12]	; (80070b0 <USBD_static_malloc+0x18>)
}
 80070a2:	4618      	mov	r0, r3
 80070a4:	370c      	adds	r7, #12
 80070a6:	46bd      	mov	sp, r7
 80070a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ac:	4770      	bx	lr
 80070ae:	bf00      	nop
 80070b0:	20000b6c 	.word	0x20000b6c

080070b4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80070b4:	b480      	push	{r7}
 80070b6:	b083      	sub	sp, #12
 80070b8:	af00      	add	r7, sp, #0
 80070ba:	6078      	str	r0, [r7, #4]

}
 80070bc:	bf00      	nop
 80070be:	370c      	adds	r7, #12
 80070c0:	46bd      	mov	sp, r7
 80070c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c6:	4770      	bx	lr

080070c8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80070c8:	b480      	push	{r7}
 80070ca:	b085      	sub	sp, #20
 80070cc:	af00      	add	r7, sp, #0
 80070ce:	4603      	mov	r3, r0
 80070d0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80070d2:	2300      	movs	r3, #0
 80070d4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80070d6:	79fb      	ldrb	r3, [r7, #7]
 80070d8:	2b03      	cmp	r3, #3
 80070da:	d817      	bhi.n	800710c <USBD_Get_USB_Status+0x44>
 80070dc:	a201      	add	r2, pc, #4	; (adr r2, 80070e4 <USBD_Get_USB_Status+0x1c>)
 80070de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070e2:	bf00      	nop
 80070e4:	080070f5 	.word	0x080070f5
 80070e8:	080070fb 	.word	0x080070fb
 80070ec:	08007101 	.word	0x08007101
 80070f0:	08007107 	.word	0x08007107
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80070f4:	2300      	movs	r3, #0
 80070f6:	73fb      	strb	r3, [r7, #15]
    break;
 80070f8:	e00b      	b.n	8007112 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80070fa:	2303      	movs	r3, #3
 80070fc:	73fb      	strb	r3, [r7, #15]
    break;
 80070fe:	e008      	b.n	8007112 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007100:	2301      	movs	r3, #1
 8007102:	73fb      	strb	r3, [r7, #15]
    break;
 8007104:	e005      	b.n	8007112 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007106:	2303      	movs	r3, #3
 8007108:	73fb      	strb	r3, [r7, #15]
    break;
 800710a:	e002      	b.n	8007112 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800710c:	2303      	movs	r3, #3
 800710e:	73fb      	strb	r3, [r7, #15]
    break;
 8007110:	bf00      	nop
  }
  return usb_status;
 8007112:	7bfb      	ldrb	r3, [r7, #15]
}
 8007114:	4618      	mov	r0, r3
 8007116:	3714      	adds	r7, #20
 8007118:	46bd      	mov	sp, r7
 800711a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800711e:	4770      	bx	lr

08007120 <__libc_init_array>:
 8007120:	b570      	push	{r4, r5, r6, lr}
 8007122:	4d0d      	ldr	r5, [pc, #52]	; (8007158 <__libc_init_array+0x38>)
 8007124:	4c0d      	ldr	r4, [pc, #52]	; (800715c <__libc_init_array+0x3c>)
 8007126:	1b64      	subs	r4, r4, r5
 8007128:	10a4      	asrs	r4, r4, #2
 800712a:	2600      	movs	r6, #0
 800712c:	42a6      	cmp	r6, r4
 800712e:	d109      	bne.n	8007144 <__libc_init_array+0x24>
 8007130:	4d0b      	ldr	r5, [pc, #44]	; (8007160 <__libc_init_array+0x40>)
 8007132:	4c0c      	ldr	r4, [pc, #48]	; (8007164 <__libc_init_array+0x44>)
 8007134:	f000 f820 	bl	8007178 <_init>
 8007138:	1b64      	subs	r4, r4, r5
 800713a:	10a4      	asrs	r4, r4, #2
 800713c:	2600      	movs	r6, #0
 800713e:	42a6      	cmp	r6, r4
 8007140:	d105      	bne.n	800714e <__libc_init_array+0x2e>
 8007142:	bd70      	pop	{r4, r5, r6, pc}
 8007144:	f855 3b04 	ldr.w	r3, [r5], #4
 8007148:	4798      	blx	r3
 800714a:	3601      	adds	r6, #1
 800714c:	e7ee      	b.n	800712c <__libc_init_array+0xc>
 800714e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007152:	4798      	blx	r3
 8007154:	3601      	adds	r6, #1
 8007156:	e7f2      	b.n	800713e <__libc_init_array+0x1e>
 8007158:	080071f0 	.word	0x080071f0
 800715c:	080071f0 	.word	0x080071f0
 8007160:	080071f0 	.word	0x080071f0
 8007164:	080071f4 	.word	0x080071f4

08007168 <memset>:
 8007168:	4402      	add	r2, r0
 800716a:	4603      	mov	r3, r0
 800716c:	4293      	cmp	r3, r2
 800716e:	d100      	bne.n	8007172 <memset+0xa>
 8007170:	4770      	bx	lr
 8007172:	f803 1b01 	strb.w	r1, [r3], #1
 8007176:	e7f9      	b.n	800716c <memset+0x4>

08007178 <_init>:
 8007178:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800717a:	bf00      	nop
 800717c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800717e:	bc08      	pop	{r3}
 8007180:	469e      	mov	lr, r3
 8007182:	4770      	bx	lr

08007184 <_fini>:
 8007184:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007186:	bf00      	nop
 8007188:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800718a:	bc08      	pop	{r3}
 800718c:	469e      	mov	lr, r3
 800718e:	4770      	bx	lr
