
whaat.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009ef4  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001b54  0800a07c  0800a07c  0001a07c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bbd0  0800bbd0  0002016c  2**0
                  CONTENTS
  4 .ARM          00000008  0800bbd0  0800bbd0  0001bbd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bbd8  0800bbd8  0002016c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bbd8  0800bbd8  0001bbd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bbdc  0800bbdc  0001bbdc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000016c  20000000  0800bbe0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002016c  2**0
                  CONTENTS
 10 .bss          00000f30  2000016c  2000016c  0002016c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000109c  2000109c  0002016c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002016c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00021ed8  00000000  00000000  0002019c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000044ce  00000000  00000000  00042074  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001c88  00000000  00000000  00046548  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001ad8  00000000  00000000  000481d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000296a1  00000000  00000000  00049ca8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00025731  00000000  00000000  00073349  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e9942  00000000  00000000  00098a7a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001823bc  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007968  00000000  00000000  0018240c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000016c 	.word	0x2000016c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800a064 	.word	0x0800a064

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000170 	.word	0x20000170
 80001c4:	0800a064 	.word	0x0800a064

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b084      	sub	sp, #16
 80004d0:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80004d2:	f002 f91d 	bl	8002710 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80004d6:	f000 f90b 	bl	80006f0 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80004da:	f000 fac9 	bl	8000a70 <MX_GPIO_Init>
	MX_ADC3_Init();
 80004de:	f000 f977 	bl	80007d0 <MX_ADC3_Init>
	MX_DAC_Init();
 80004e2:	f000 f9c7 	bl	8000874 <MX_DAC_Init>
	MX_DCMI_Init();
 80004e6:	f000 f9ef 	bl	80008c8 <MX_DCMI_Init>
	MX_FSMC_Init();
 80004ea:	f000 fd2f 	bl	8000f4c <MX_FSMC_Init>
	MX_USART3_UART_Init();
 80004ee:	f000 fa95 	bl	8000a1c <MX_USART3_UART_Init>
	MX_TIM3_Init();
 80004f2:	f000 fa3f 	bl	8000974 <MX_TIM3_Init>
	MX_USB_DEVICE_Init();
 80004f6:	f009 f943 	bl	8009780 <MX_USB_DEVICE_Init>
	MX_I2C1_Init();
 80004fa:	f000 fa0d 	bl	8000918 <MX_I2C1_Init>
	/* USER CODE BEGIN 2 */
	BSP_LCD_Init();
 80004fe:	f001 feb1 	bl	8002264 <BSP_LCD_Init>
	BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 8000502:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000506:	f001 ff07 	bl	8002318 <BSP_LCD_SetBackColor>
	BSP_LCD_Clear(LCD_COLOR_WHITE);
 800050a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800050e:	f001 ff23 	bl	8002358 <BSP_LCD_Clear>
	BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8000512:	2000      	movs	r0, #0
 8000514:	f001 fef0 	bl	80022f8 <BSP_LCD_SetTextColor>
	BSP_LCD_SetFont(&Font24);
 8000518:	486c      	ldr	r0, [pc, #432]	; (80006cc <main+0x200>)
 800051a:	f001 ff0d 	bl	8002338 <BSP_LCD_SetFont>
	BSP_LCD_DisplayStringAt(0, 0, (uint8_t *)"LCD", CENTER_MODE);
 800051e:	2301      	movs	r3, #1
 8000520:	4a6b      	ldr	r2, [pc, #428]	; (80006d0 <main+0x204>)
 8000522:	2100      	movs	r1, #0
 8000524:	2000      	movs	r0, #0
 8000526:	f001 ff75 	bl	8002414 <BSP_LCD_DisplayStringAt>

	BSP_PB_Init(BUTTON_KEY, BUTTON_MODE_GPIO);
 800052a:	2100      	movs	r1, #0
 800052c:	2002      	movs	r0, #2
 800052e:	f001 fcaf 	bl	8001e90 <BSP_PB_Init>
	BSP_LED_Init(LED1);
 8000532:	2000      	movs	r0, #0
 8000534:	f001 fc0c 	bl	8001d50 <BSP_LED_Init>


	HAL_TIM_Encoder_Start_IT(&htim3, TIM_CHANNEL_ALL);
 8000538:	213c      	movs	r1, #60	; 0x3c
 800053a:	4866      	ldr	r0, [pc, #408]	; (80006d4 <main+0x208>)
 800053c:	f005 fa02 	bl	8005944 <HAL_TIM_Encoder_Start_IT>
	uint32_t last_print = 0, now = 0;
 8000540:	2300      	movs	r3, #0
 8000542:	607b      	str	r3, [r7, #4]
 8000544:	2300      	movs	r3, #0
 8000546:	603b      	str	r3, [r7, #0]
	uint32_t rot_count = 0;
 8000548:	2300      	movs	r3, #0
 800054a:	60fb      	str	r3, [r7, #12]
	now = HAL_GetTick();
 800054c:	f002 f946 	bl	80027dc <HAL_GetTick>
 8000550:	6038      	str	r0, [r7, #0]
	TIM3->CNT = 30000;
 8000552:	4b61      	ldr	r3, [pc, #388]	; (80006d8 <main+0x20c>)
 8000554:	f247 5230 	movw	r2, #30000	; 0x7530
 8000558:	625a      	str	r2, [r3, #36]	; 0x24

	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	uint8_t usage_switch = 0;
 800055a:	2300      	movs	r3, #0
 800055c:	72fb      	strb	r3, [r7, #11]
	while (1)
	{
		if(BSP_PB_GetState(BUTTON_KEY) == RESET){
 800055e:	2002      	movs	r0, #2
 8000560:	f001 fd2a 	bl	8001fb8 <BSP_PB_GetState>
 8000564:	4603      	mov	r3, r0
 8000566:	2b00      	cmp	r3, #0
 8000568:	d103      	bne.n	8000572 <main+0xa6>
			BSP_LED_On(LED1);
 800056a:	2000      	movs	r0, #0
 800056c:	f001 fc5c 	bl	8001e28 <BSP_LED_On>
 8000570:	e002      	b.n	8000578 <main+0xac>
		} else {
			BSP_LED_Off(LED1);
 8000572:	2000      	movs	r0, #0
 8000574:	f001 fc72 	bl	8001e5c <BSP_LED_Off>
		}
		if(BSP_PB_GetState(BUTTON_KEY) == RESET){
 8000578:	2002      	movs	r0, #2
 800057a:	f001 fd1d 	bl	8001fb8 <BSP_PB_GetState>
 800057e:	4603      	mov	r3, r0
 8000580:	2b00      	cmp	r3, #0
 8000582:	d10e      	bne.n	80005a2 <main+0xd6>
			while(BSP_PB_GetState(BUTTON_KEY) == RESET) continue;
 8000584:	e000      	b.n	8000588 <main+0xbc>
 8000586:	bf00      	nop
 8000588:	2002      	movs	r0, #2
 800058a:	f001 fd15 	bl	8001fb8 <BSP_PB_GetState>
 800058e:	4603      	mov	r3, r0
 8000590:	2b00      	cmp	r3, #0
 8000592:	d0f8      	beq.n	8000586 <main+0xba>
			usage_switch = !usage_switch;
 8000594:	7afb      	ldrb	r3, [r7, #11]
 8000596:	2b00      	cmp	r3, #0
 8000598:	bf0c      	ite	eq
 800059a:	2301      	moveq	r3, #1
 800059c:	2300      	movne	r3, #0
 800059e:	b2db      	uxtb	r3, r3
 80005a0:	72fb      	strb	r3, [r7, #11]
		}
		now = HAL_GetTick();
 80005a2:	f002 f91b 	bl	80027dc <HAL_GetTick>
 80005a6:	6038      	str	r0, [r7, #0]
		/// VOLUME USAGE
		if(usage_switch == 0) {
 80005a8:	7afb      	ldrb	r3, [r7, #11]
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d17c      	bne.n	80006a8 <main+0x1dc>
			if (rot_count != TIM3->CNT) {
 80005ae:	4b4a      	ldr	r3, [pc, #296]	; (80006d8 <main+0x20c>)
 80005b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80005b2:	68fa      	ldr	r2, [r7, #12]
 80005b4:	429a      	cmp	r2, r3
 80005b6:	d039      	beq.n	800062c <main+0x160>
				if (rot_count > TIM3->CNT) {
 80005b8:	4b47      	ldr	r3, [pc, #284]	; (80006d8 <main+0x20c>)
 80005ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80005bc:	68fa      	ldr	r2, [r7, #12]
 80005be:	429a      	cmp	r2, r3
 80005c0:	d90c      	bls.n	80005dc <main+0x110>
					keyBoardHIDsub.KEYCODE1=0x04;  // Press A key
 80005c2:	4b46      	ldr	r3, [pc, #280]	; (80006dc <main+0x210>)
 80005c4:	2204      	movs	r2, #4
 80005c6:	709a      	strb	r2, [r3, #2]
					keyBoardHIDsub.KEYCODE2=0x05;  // Press B key
 80005c8:	4b44      	ldr	r3, [pc, #272]	; (80006dc <main+0x210>)
 80005ca:	2205      	movs	r2, #5
 80005cc:	70da      	strb	r2, [r3, #3]
					keyBoardHIDsub.KEYCODE3=0x06;  // Press C key
 80005ce:	4b43      	ldr	r3, [pc, #268]	; (80006dc <main+0x210>)
 80005d0:	2206      	movs	r2, #6
 80005d2:	711a      	strb	r2, [r3, #4]
					keyBoardHIDsub.KEYCODE4=0x80;	 // Volume up - only works on linux
 80005d4:	4b41      	ldr	r3, [pc, #260]	; (80006dc <main+0x210>)
 80005d6:	2280      	movs	r2, #128	; 0x80
 80005d8:	715a      	strb	r2, [r3, #5]
 80005da:	e00b      	b.n	80005f4 <main+0x128>
				} else {
					keyBoardHIDsub.KEYCODE1=0x07;  // Press A key
 80005dc:	4b3f      	ldr	r3, [pc, #252]	; (80006dc <main+0x210>)
 80005de:	2207      	movs	r2, #7
 80005e0:	709a      	strb	r2, [r3, #2]
					keyBoardHIDsub.KEYCODE2=0x08;  // Press B key
 80005e2:	4b3e      	ldr	r3, [pc, #248]	; (80006dc <main+0x210>)
 80005e4:	2208      	movs	r2, #8
 80005e6:	70da      	strb	r2, [r3, #3]
					keyBoardHIDsub.KEYCODE3=0x09;  // Press C key
 80005e8:	4b3c      	ldr	r3, [pc, #240]	; (80006dc <main+0x210>)
 80005ea:	2209      	movs	r2, #9
 80005ec:	711a      	strb	r2, [r3, #4]
					keyBoardHIDsub.KEYCODE4=0x81;	 // Volume down - only works on linux
 80005ee:	4b3b      	ldr	r3, [pc, #236]	; (80006dc <main+0x210>)
 80005f0:	2281      	movs	r2, #129	; 0x81
 80005f2:	715a      	strb	r2, [r3, #5]
				}
				USBD_HID_SendReport(&hUsbDeviceFS,&keyBoardHIDsub,sizeof(keyBoardHIDsub));
 80005f4:	2208      	movs	r2, #8
 80005f6:	4939      	ldr	r1, [pc, #228]	; (80006dc <main+0x210>)
 80005f8:	4839      	ldr	r0, [pc, #228]	; (80006e0 <main+0x214>)
 80005fa:	f007 fd47 	bl	800808c <USBD_HID_SendReport>
				HAL_Delay(20); 		       // Press all key for 50 milliseconds
 80005fe:	2014      	movs	r0, #20
 8000600:	f002 f8f8 	bl	80027f4 <HAL_Delay>
				//keyBoardHIDsub.MODIFIER=0x00;  // To release shift key
				keyBoardHIDsub.KEYCODE1=0x00;  // Release A key
 8000604:	4b35      	ldr	r3, [pc, #212]	; (80006dc <main+0x210>)
 8000606:	2200      	movs	r2, #0
 8000608:	709a      	strb	r2, [r3, #2]
				keyBoardHIDsub.KEYCODE2=0x00;  // Release B key
 800060a:	4b34      	ldr	r3, [pc, #208]	; (80006dc <main+0x210>)
 800060c:	2200      	movs	r2, #0
 800060e:	70da      	strb	r2, [r3, #3]
				keyBoardHIDsub.KEYCODE3=0x00;  // Release C key
 8000610:	4b32      	ldr	r3, [pc, #200]	; (80006dc <main+0x210>)
 8000612:	2200      	movs	r2, #0
 8000614:	711a      	strb	r2, [r3, #4]
				keyBoardHIDsub.KEYCODE4=0x00;	 // Clear buffer from volume up
 8000616:	4b31      	ldr	r3, [pc, #196]	; (80006dc <main+0x210>)
 8000618:	2200      	movs	r2, #0
 800061a:	715a      	strb	r2, [r3, #5]
				USBD_HID_SendReport(&hUsbDeviceFS,&keyBoardHIDsub,sizeof(keyBoardHIDsub));
 800061c:	2208      	movs	r2, #8
 800061e:	492f      	ldr	r1, [pc, #188]	; (80006dc <main+0x210>)
 8000620:	482f      	ldr	r0, [pc, #188]	; (80006e0 <main+0x214>)
 8000622:	f007 fd33 	bl	800808c <USBD_HID_SendReport>
				rot_count = TIM3->CNT;
 8000626:	4b2c      	ldr	r3, [pc, #176]	; (80006d8 <main+0x20c>)
 8000628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800062a:	60fb      	str	r3, [r7, #12]
			}
			last_print = now;
 800062c:	683b      	ldr	r3, [r7, #0]
 800062e:	607b      	str	r3, [r7, #4]
			//}
			if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) == 0){
 8000630:	2140      	movs	r1, #64	; 0x40
 8000632:	482c      	ldr	r0, [pc, #176]	; (80006e4 <main+0x218>)
 8000634:	f002 fef0 	bl	8003418 <HAL_GPIO_ReadPin>
 8000638:	4603      	mov	r3, r0
 800063a:	2b00      	cmp	r3, #0
 800063c:	d128      	bne.n	8000690 <main+0x1c4>
				//keyBoardHIDsub.MODIFIER=0x02;  // To press shift key
				keyBoardHIDsub.KEYCODE1=0x04;  // Press A key
 800063e:	4b27      	ldr	r3, [pc, #156]	; (80006dc <main+0x210>)
 8000640:	2204      	movs	r2, #4
 8000642:	709a      	strb	r2, [r3, #2]
				keyBoardHIDsub.KEYCODE2=0x05;  // Press B key
 8000644:	4b25      	ldr	r3, [pc, #148]	; (80006dc <main+0x210>)
 8000646:	2205      	movs	r2, #5
 8000648:	70da      	strb	r2, [r3, #3]
				keyBoardHIDsub.KEYCODE3=0x06;  // Press C key
 800064a:	4b24      	ldr	r3, [pc, #144]	; (80006dc <main+0x210>)
 800064c:	2206      	movs	r2, #6
 800064e:	711a      	strb	r2, [r3, #4]
				keyBoardHIDsub.KEYCODE4=0x80;	 // Volume up - only works on linux
 8000650:	4b22      	ldr	r3, [pc, #136]	; (80006dc <main+0x210>)
 8000652:	2280      	movs	r2, #128	; 0x80
 8000654:	715a      	strb	r2, [r3, #5]
				USBD_HID_SendReport(&hUsbDeviceFS,&keyBoardHIDsub,sizeof(keyBoardHIDsub));
 8000656:	2208      	movs	r2, #8
 8000658:	4920      	ldr	r1, [pc, #128]	; (80006dc <main+0x210>)
 800065a:	4821      	ldr	r0, [pc, #132]	; (80006e0 <main+0x214>)
 800065c:	f007 fd16 	bl	800808c <USBD_HID_SendReport>
				HAL_Delay(50); 		       // Press all key for 50 milliseconds
 8000660:	2032      	movs	r0, #50	; 0x32
 8000662:	f002 f8c7 	bl	80027f4 <HAL_Delay>
				//keyBoardHIDsub.MODIFIER=0x00;  // To release shift key
				keyBoardHIDsub.KEYCODE1=0x00;  // Release A key
 8000666:	4b1d      	ldr	r3, [pc, #116]	; (80006dc <main+0x210>)
 8000668:	2200      	movs	r2, #0
 800066a:	709a      	strb	r2, [r3, #2]
				keyBoardHIDsub.KEYCODE2=0x00;  // Release B key
 800066c:	4b1b      	ldr	r3, [pc, #108]	; (80006dc <main+0x210>)
 800066e:	2200      	movs	r2, #0
 8000670:	70da      	strb	r2, [r3, #3]
				keyBoardHIDsub.KEYCODE3=0x00;  // Release C key
 8000672:	4b1a      	ldr	r3, [pc, #104]	; (80006dc <main+0x210>)
 8000674:	2200      	movs	r2, #0
 8000676:	711a      	strb	r2, [r3, #4]
				keyBoardHIDsub.KEYCODE4=0x00;	 // Clear buffer from volume up
 8000678:	4b18      	ldr	r3, [pc, #96]	; (80006dc <main+0x210>)
 800067a:	2200      	movs	r2, #0
 800067c:	715a      	strb	r2, [r3, #5]
				USBD_HID_SendReport(&hUsbDeviceFS,&keyBoardHIDsub,sizeof(keyBoardHIDsub));
 800067e:	2208      	movs	r2, #8
 8000680:	4916      	ldr	r1, [pc, #88]	; (80006dc <main+0x210>)
 8000682:	4817      	ldr	r0, [pc, #92]	; (80006e0 <main+0x214>)
 8000684:	f007 fd02 	bl	800808c <USBD_HID_SendReport>
				HAL_Delay(1000); 	       // Repeat this task on every 1 second
 8000688:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800068c:	f002 f8b2 	bl	80027f4 <HAL_Delay>
			}
			// BSP_LCD_Clear(LCD_COLOR_BLUE);
			BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8000690:	2000      	movs	r0, #0
 8000692:	f001 fe31 	bl	80022f8 <BSP_LCD_SetTextColor>
			BSP_LCD_SetFont(&Font24);
 8000696:	480d      	ldr	r0, [pc, #52]	; (80006cc <main+0x200>)
 8000698:	f001 fe4e 	bl	8002338 <BSP_LCD_SetFont>
			BSP_LCD_DisplayStringAt(0, 30, (uint8_t *)"Volume control", CENTER_MODE);
 800069c:	2301      	movs	r3, #1
 800069e:	4a12      	ldr	r2, [pc, #72]	; (80006e8 <main+0x21c>)
 80006a0:	211e      	movs	r1, #30
 80006a2:	2000      	movs	r0, #0
 80006a4:	f001 feb6 	bl	8002414 <BSP_LCD_DisplayStringAt>
		}
		if(usage_switch == 1){
 80006a8:	7afb      	ldrb	r3, [r7, #11]
 80006aa:	2b01      	cmp	r3, #1
 80006ac:	f47f af57 	bne.w	800055e <main+0x92>
			// BSP_LCD_Clear(LCD_COLOR_RED);
			BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 80006b0:	2000      	movs	r0, #0
 80006b2:	f001 fe21 	bl	80022f8 <BSP_LCD_SetTextColor>
			BSP_LCD_SetFont(&Font24);
 80006b6:	4805      	ldr	r0, [pc, #20]	; (80006cc <main+0x200>)
 80006b8:	f001 fe3e 	bl	8002338 <BSP_LCD_SetFont>
			BSP_LCD_DisplayStringAt(0, 30, (uint8_t *)"Scroll control", CENTER_MODE);
 80006bc:	2301      	movs	r3, #1
 80006be:	4a0b      	ldr	r2, [pc, #44]	; (80006ec <main+0x220>)
 80006c0:	211e      	movs	r1, #30
 80006c2:	2000      	movs	r0, #0
 80006c4:	f001 fea6 	bl	8002414 <BSP_LCD_DisplayStringAt>
		if(BSP_PB_GetState(BUTTON_KEY) == RESET){
 80006c8:	e749      	b.n	800055e <main+0x92>
 80006ca:	bf00      	nop
 80006cc:	20000058 	.word	0x20000058
 80006d0:	0800a07c 	.word	0x0800a07c
 80006d4:	20000278 	.word	0x20000278
 80006d8:	40000400 	.word	0x40000400
 80006dc:	200003f4 	.word	0x200003f4
 80006e0:	200006a0 	.word	0x200006a0
 80006e4:	40020400 	.word	0x40020400
 80006e8:	0800a080 	.word	0x0800a080
 80006ec:	0800a090 	.word	0x0800a090

080006f0 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b094      	sub	sp, #80	; 0x50
 80006f4:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006f6:	f107 0320 	add.w	r3, r7, #32
 80006fa:	2230      	movs	r2, #48	; 0x30
 80006fc:	2100      	movs	r1, #0
 80006fe:	4618      	mov	r0, r3
 8000700:	f009 fca8 	bl	800a054 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000704:	f107 030c 	add.w	r3, r7, #12
 8000708:	2200      	movs	r2, #0
 800070a:	601a      	str	r2, [r3, #0]
 800070c:	605a      	str	r2, [r3, #4]
 800070e:	609a      	str	r2, [r3, #8]
 8000710:	60da      	str	r2, [r3, #12]
 8000712:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000714:	2300      	movs	r3, #0
 8000716:	60bb      	str	r3, [r7, #8]
 8000718:	4b2b      	ldr	r3, [pc, #172]	; (80007c8 <SystemClock_Config+0xd8>)
 800071a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800071c:	4a2a      	ldr	r2, [pc, #168]	; (80007c8 <SystemClock_Config+0xd8>)
 800071e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000722:	6413      	str	r3, [r2, #64]	; 0x40
 8000724:	4b28      	ldr	r3, [pc, #160]	; (80007c8 <SystemClock_Config+0xd8>)
 8000726:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000728:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800072c:	60bb      	str	r3, [r7, #8]
 800072e:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000730:	2300      	movs	r3, #0
 8000732:	607b      	str	r3, [r7, #4]
 8000734:	4b25      	ldr	r3, [pc, #148]	; (80007cc <SystemClock_Config+0xdc>)
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	4a24      	ldr	r2, [pc, #144]	; (80007cc <SystemClock_Config+0xdc>)
 800073a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800073e:	6013      	str	r3, [r2, #0]
 8000740:	4b22      	ldr	r3, [pc, #136]	; (80007cc <SystemClock_Config+0xdc>)
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000748:	607b      	str	r3, [r7, #4]
 800074a:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800074c:	2301      	movs	r3, #1
 800074e:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000750:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000754:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000756:	2302      	movs	r3, #2
 8000758:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800075a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800075e:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 25;
 8000760:	2319      	movs	r3, #25
 8000762:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 336;
 8000764:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000768:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800076a:	2302      	movs	r3, #2
 800076c:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 7;
 800076e:	2307      	movs	r3, #7
 8000770:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000772:	f107 0320 	add.w	r3, r7, #32
 8000776:	4618      	mov	r0, r3
 8000778:	f004 fb36 	bl	8004de8 <HAL_RCC_OscConfig>
 800077c:	4603      	mov	r3, r0
 800077e:	2b00      	cmp	r3, #0
 8000780:	d001      	beq.n	8000786 <SystemClock_Config+0x96>
	{
		Error_Handler();
 8000782:	f000 fcd9 	bl	8001138 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000786:	230f      	movs	r3, #15
 8000788:	60fb      	str	r3, [r7, #12]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800078a:	2302      	movs	r3, #2
 800078c:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800078e:	2300      	movs	r3, #0
 8000790:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000792:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000796:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000798:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800079c:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800079e:	f107 030c 	add.w	r3, r7, #12
 80007a2:	2105      	movs	r1, #5
 80007a4:	4618      	mov	r0, r3
 80007a6:	f004 fd97 	bl	80052d8 <HAL_RCC_ClockConfig>
 80007aa:	4603      	mov	r3, r0
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d001      	beq.n	80007b4 <SystemClock_Config+0xc4>
	{
		Error_Handler();
 80007b0:	f000 fcc2 	bl	8001138 <Error_Handler>
	}
	HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSE, RCC_MCODIV_1);
 80007b4:	2200      	movs	r2, #0
 80007b6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80007ba:	2000      	movs	r0, #0
 80007bc:	f004 fe72 	bl	80054a4 <HAL_RCC_MCOConfig>
}
 80007c0:	bf00      	nop
 80007c2:	3750      	adds	r7, #80	; 0x50
 80007c4:	46bd      	mov	sp, r7
 80007c6:	bd80      	pop	{r7, pc}
 80007c8:	40023800 	.word	0x40023800
 80007cc:	40007000 	.word	0x40007000

080007d0 <MX_ADC3_Init>:
 * @brief ADC3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC3_Init(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b084      	sub	sp, #16
 80007d4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC3_Init 0 */

	/* USER CODE END ADC3_Init 0 */

	ADC_ChannelConfTypeDef sConfig = {0};
 80007d6:	463b      	mov	r3, r7
 80007d8:	2200      	movs	r2, #0
 80007da:	601a      	str	r2, [r3, #0]
 80007dc:	605a      	str	r2, [r3, #4]
 80007de:	609a      	str	r2, [r3, #8]
 80007e0:	60da      	str	r2, [r3, #12]

	/* USER CODE END ADC3_Init 1 */

	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc3.Instance = ADC3;
 80007e2:	4b21      	ldr	r3, [pc, #132]	; (8000868 <MX_ADC3_Init+0x98>)
 80007e4:	4a21      	ldr	r2, [pc, #132]	; (800086c <MX_ADC3_Init+0x9c>)
 80007e6:	601a      	str	r2, [r3, #0]
	hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80007e8:	4b1f      	ldr	r3, [pc, #124]	; (8000868 <MX_ADC3_Init+0x98>)
 80007ea:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80007ee:	605a      	str	r2, [r3, #4]
	hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80007f0:	4b1d      	ldr	r3, [pc, #116]	; (8000868 <MX_ADC3_Init+0x98>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	609a      	str	r2, [r3, #8]
	hadc3.Init.ScanConvMode = DISABLE;
 80007f6:	4b1c      	ldr	r3, [pc, #112]	; (8000868 <MX_ADC3_Init+0x98>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	611a      	str	r2, [r3, #16]
	hadc3.Init.ContinuousConvMode = DISABLE;
 80007fc:	4b1a      	ldr	r3, [pc, #104]	; (8000868 <MX_ADC3_Init+0x98>)
 80007fe:	2200      	movs	r2, #0
 8000800:	761a      	strb	r2, [r3, #24]
	hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000802:	4b19      	ldr	r3, [pc, #100]	; (8000868 <MX_ADC3_Init+0x98>)
 8000804:	2200      	movs	r2, #0
 8000806:	f883 2020 	strb.w	r2, [r3, #32]
	hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800080a:	4b17      	ldr	r3, [pc, #92]	; (8000868 <MX_ADC3_Init+0x98>)
 800080c:	2200      	movs	r2, #0
 800080e:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000810:	4b15      	ldr	r3, [pc, #84]	; (8000868 <MX_ADC3_Init+0x98>)
 8000812:	4a17      	ldr	r2, [pc, #92]	; (8000870 <MX_ADC3_Init+0xa0>)
 8000814:	629a      	str	r2, [r3, #40]	; 0x28
	hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000816:	4b14      	ldr	r3, [pc, #80]	; (8000868 <MX_ADC3_Init+0x98>)
 8000818:	2200      	movs	r2, #0
 800081a:	60da      	str	r2, [r3, #12]
	hadc3.Init.NbrOfConversion = 1;
 800081c:	4b12      	ldr	r3, [pc, #72]	; (8000868 <MX_ADC3_Init+0x98>)
 800081e:	2201      	movs	r2, #1
 8000820:	61da      	str	r2, [r3, #28]
	hadc3.Init.DMAContinuousRequests = DISABLE;
 8000822:	4b11      	ldr	r3, [pc, #68]	; (8000868 <MX_ADC3_Init+0x98>)
 8000824:	2200      	movs	r2, #0
 8000826:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800082a:	4b0f      	ldr	r3, [pc, #60]	; (8000868 <MX_ADC3_Init+0x98>)
 800082c:	2201      	movs	r2, #1
 800082e:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000830:	480d      	ldr	r0, [pc, #52]	; (8000868 <MX_ADC3_Init+0x98>)
 8000832:	f002 f803 	bl	800283c <HAL_ADC_Init>
 8000836:	4603      	mov	r3, r0
 8000838:	2b00      	cmp	r3, #0
 800083a:	d001      	beq.n	8000840 <MX_ADC3_Init+0x70>
	{
		Error_Handler();
 800083c:	f000 fc7c 	bl	8001138 <Error_Handler>
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_7;
 8000840:	2307      	movs	r3, #7
 8000842:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 8000844:	2301      	movs	r3, #1
 8000846:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000848:	2300      	movs	r3, #0
 800084a:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800084c:	463b      	mov	r3, r7
 800084e:	4619      	mov	r1, r3
 8000850:	4805      	ldr	r0, [pc, #20]	; (8000868 <MX_ADC3_Init+0x98>)
 8000852:	f002 f837 	bl	80028c4 <HAL_ADC_ConfigChannel>
 8000856:	4603      	mov	r3, r0
 8000858:	2b00      	cmp	r3, #0
 800085a:	d001      	beq.n	8000860 <MX_ADC3_Init+0x90>
	{
		Error_Handler();
 800085c:	f000 fc6c 	bl	8001138 <Error_Handler>
	}
	/* USER CODE BEGIN ADC3_Init 2 */

	/* USER CODE END ADC3_Init 2 */

}
 8000860:	bf00      	nop
 8000862:	3710      	adds	r7, #16
 8000864:	46bd      	mov	sp, r7
 8000866:	bd80      	pop	{r7, pc}
 8000868:	20000188 	.word	0x20000188
 800086c:	40012200 	.word	0x40012200
 8000870:	0f000001 	.word	0x0f000001

08000874 <MX_DAC_Init>:
 * @brief DAC Initialization Function
 * @param None
 * @retval None
 */
static void MX_DAC_Init(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b082      	sub	sp, #8
 8000878:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN DAC_Init 0 */

	/* USER CODE END DAC_Init 0 */

	DAC_ChannelConfTypeDef sConfig = {0};
 800087a:	463b      	mov	r3, r7
 800087c:	2200      	movs	r2, #0
 800087e:	601a      	str	r2, [r3, #0]
 8000880:	605a      	str	r2, [r3, #4]

	/* USER CODE END DAC_Init 1 */

	/** DAC Initialization
	 */
	hdac.Instance = DAC;
 8000882:	4b0f      	ldr	r3, [pc, #60]	; (80008c0 <MX_DAC_Init+0x4c>)
 8000884:	4a0f      	ldr	r2, [pc, #60]	; (80008c4 <MX_DAC_Init+0x50>)
 8000886:	601a      	str	r2, [r3, #0]
	if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000888:	480d      	ldr	r0, [pc, #52]	; (80008c0 <MX_DAC_Init+0x4c>)
 800088a:	f002 fb4a 	bl	8002f22 <HAL_DAC_Init>
 800088e:	4603      	mov	r3, r0
 8000890:	2b00      	cmp	r3, #0
 8000892:	d001      	beq.n	8000898 <MX_DAC_Init+0x24>
	{
		Error_Handler();
 8000894:	f000 fc50 	bl	8001138 <Error_Handler>
	}

	/** DAC channel OUT1 config
	 */
	sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000898:	2300      	movs	r3, #0
 800089a:	603b      	str	r3, [r7, #0]
	sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800089c:	2300      	movs	r3, #0
 800089e:	607b      	str	r3, [r7, #4]
	if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80008a0:	463b      	mov	r3, r7
 80008a2:	2200      	movs	r2, #0
 80008a4:	4619      	mov	r1, r3
 80008a6:	4806      	ldr	r0, [pc, #24]	; (80008c0 <MX_DAC_Init+0x4c>)
 80008a8:	f002 fb5d 	bl	8002f66 <HAL_DAC_ConfigChannel>
 80008ac:	4603      	mov	r3, r0
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d001      	beq.n	80008b6 <MX_DAC_Init+0x42>
	{
		Error_Handler();
 80008b2:	f000 fc41 	bl	8001138 <Error_Handler>
	}
	/* USER CODE BEGIN DAC_Init 2 */

	/* USER CODE END DAC_Init 2 */

}
 80008b6:	bf00      	nop
 80008b8:	3708      	adds	r7, #8
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	bf00      	nop
 80008c0:	200001d0 	.word	0x200001d0
 80008c4:	40007400 	.word	0x40007400

080008c8 <MX_DCMI_Init>:
 * @brief DCMI Initialization Function
 * @param None
 * @retval None
 */
static void MX_DCMI_Init(void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	af00      	add	r7, sp, #0
	/* USER CODE END DCMI_Init 0 */

	/* USER CODE BEGIN DCMI_Init 1 */

	/* USER CODE END DCMI_Init 1 */
	hdcmi.Instance = DCMI;
 80008cc:	4b10      	ldr	r3, [pc, #64]	; (8000910 <MX_DCMI_Init+0x48>)
 80008ce:	4a11      	ldr	r2, [pc, #68]	; (8000914 <MX_DCMI_Init+0x4c>)
 80008d0:	601a      	str	r2, [r3, #0]
	hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 80008d2:	4b0f      	ldr	r3, [pc, #60]	; (8000910 <MX_DCMI_Init+0x48>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	605a      	str	r2, [r3, #4]
	hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_FALLING;
 80008d8:	4b0d      	ldr	r3, [pc, #52]	; (8000910 <MX_DCMI_Init+0x48>)
 80008da:	2200      	movs	r2, #0
 80008dc:	609a      	str	r2, [r3, #8]
	hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_LOW;
 80008de:	4b0c      	ldr	r3, [pc, #48]	; (8000910 <MX_DCMI_Init+0x48>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	60da      	str	r2, [r3, #12]
	hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 80008e4:	4b0a      	ldr	r3, [pc, #40]	; (8000910 <MX_DCMI_Init+0x48>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	611a      	str	r2, [r3, #16]
	hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 80008ea:	4b09      	ldr	r3, [pc, #36]	; (8000910 <MX_DCMI_Init+0x48>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	615a      	str	r2, [r3, #20]
	hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 80008f0:	4b07      	ldr	r3, [pc, #28]	; (8000910 <MX_DCMI_Init+0x48>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	619a      	str	r2, [r3, #24]
	hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 80008f6:	4b06      	ldr	r3, [pc, #24]	; (8000910 <MX_DCMI_Init+0x48>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	621a      	str	r2, [r3, #32]
	if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 80008fc:	4804      	ldr	r0, [pc, #16]	; (8000910 <MX_DCMI_Init+0x48>)
 80008fe:	f002 fb81 	bl	8003004 <HAL_DCMI_Init>
 8000902:	4603      	mov	r3, r0
 8000904:	2b00      	cmp	r3, #0
 8000906:	d001      	beq.n	800090c <MX_DCMI_Init+0x44>
	{
		Error_Handler();
 8000908:	f000 fc16 	bl	8001138 <Error_Handler>
	}
	/* USER CODE BEGIN DCMI_Init 2 */

	/* USER CODE END DCMI_Init 2 */

}
 800090c:	bf00      	nop
 800090e:	bd80      	pop	{r7, pc}
 8000910:	200001e4 	.word	0x200001e4
 8000914:	50050000 	.word	0x50050000

08000918 <MX_I2C1_Init>:
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 800091c:	4b12      	ldr	r3, [pc, #72]	; (8000968 <MX_I2C1_Init+0x50>)
 800091e:	4a13      	ldr	r2, [pc, #76]	; (800096c <MX_I2C1_Init+0x54>)
 8000920:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 8000922:	4b11      	ldr	r3, [pc, #68]	; (8000968 <MX_I2C1_Init+0x50>)
 8000924:	4a12      	ldr	r2, [pc, #72]	; (8000970 <MX_I2C1_Init+0x58>)
 8000926:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000928:	4b0f      	ldr	r3, [pc, #60]	; (8000968 <MX_I2C1_Init+0x50>)
 800092a:	2200      	movs	r2, #0
 800092c:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 800092e:	4b0e      	ldr	r3, [pc, #56]	; (8000968 <MX_I2C1_Init+0x50>)
 8000930:	2200      	movs	r2, #0
 8000932:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000934:	4b0c      	ldr	r3, [pc, #48]	; (8000968 <MX_I2C1_Init+0x50>)
 8000936:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800093a:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800093c:	4b0a      	ldr	r3, [pc, #40]	; (8000968 <MX_I2C1_Init+0x50>)
 800093e:	2200      	movs	r2, #0
 8000940:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 8000942:	4b09      	ldr	r3, [pc, #36]	; (8000968 <MX_I2C1_Init+0x50>)
 8000944:	2200      	movs	r2, #0
 8000946:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000948:	4b07      	ldr	r3, [pc, #28]	; (8000968 <MX_I2C1_Init+0x50>)
 800094a:	2200      	movs	r2, #0
 800094c:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800094e:	4b06      	ldr	r3, [pc, #24]	; (8000968 <MX_I2C1_Init+0x50>)
 8000950:	2200      	movs	r2, #0
 8000952:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000954:	4804      	ldr	r0, [pc, #16]	; (8000968 <MX_I2C1_Init+0x50>)
 8000956:	f002 fd91 	bl	800347c <HAL_I2C_Init>
 800095a:	4603      	mov	r3, r0
 800095c:	2b00      	cmp	r3, #0
 800095e:	d001      	beq.n	8000964 <MX_I2C1_Init+0x4c>
	{
		Error_Handler();
 8000960:	f000 fbea 	bl	8001138 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8000964:	bf00      	nop
 8000966:	bd80      	pop	{r7, pc}
 8000968:	20000224 	.word	0x20000224
 800096c:	40005400 	.word	0x40005400
 8000970:	000186a0 	.word	0x000186a0

08000974 <MX_TIM3_Init>:
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b08c      	sub	sp, #48	; 0x30
 8000978:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = {0};
 800097a:	f107 030c 	add.w	r3, r7, #12
 800097e:	2224      	movs	r2, #36	; 0x24
 8000980:	2100      	movs	r1, #0
 8000982:	4618      	mov	r0, r3
 8000984:	f009 fb66 	bl	800a054 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000988:	1d3b      	adds	r3, r7, #4
 800098a:	2200      	movs	r2, #0
 800098c:	601a      	str	r2, [r3, #0]
 800098e:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 8000990:	4b20      	ldr	r3, [pc, #128]	; (8000a14 <MX_TIM3_Init+0xa0>)
 8000992:	4a21      	ldr	r2, [pc, #132]	; (8000a18 <MX_TIM3_Init+0xa4>)
 8000994:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 0;
 8000996:	4b1f      	ldr	r3, [pc, #124]	; (8000a14 <MX_TIM3_Init+0xa0>)
 8000998:	2200      	movs	r2, #0
 800099a:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800099c:	4b1d      	ldr	r3, [pc, #116]	; (8000a14 <MX_TIM3_Init+0xa0>)
 800099e:	2200      	movs	r2, #0
 80009a0:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 65535;
 80009a2:	4b1c      	ldr	r3, [pc, #112]	; (8000a14 <MX_TIM3_Init+0xa0>)
 80009a4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80009a8:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009aa:	4b1a      	ldr	r3, [pc, #104]	; (8000a14 <MX_TIM3_Init+0xa0>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009b0:	4b18      	ldr	r3, [pc, #96]	; (8000a14 <MX_TIM3_Init+0xa0>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80009b6:	2301      	movs	r3, #1
 80009b8:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80009ba:	2300      	movs	r3, #0
 80009bc:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80009be:	2301      	movs	r3, #1
 80009c0:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80009c2:	2300      	movs	r3, #0
 80009c4:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 0;
 80009c6:	2300      	movs	r3, #0
 80009c8:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80009ca:	2300      	movs	r3, #0
 80009cc:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80009ce:	2301      	movs	r3, #1
 80009d0:	627b      	str	r3, [r7, #36]	; 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80009d2:	2300      	movs	r3, #0
 80009d4:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfig.IC2Filter = 0;
 80009d6:	2300      	movs	r3, #0
 80009d8:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80009da:	f107 030c 	add.w	r3, r7, #12
 80009de:	4619      	mov	r1, r3
 80009e0:	480c      	ldr	r0, [pc, #48]	; (8000a14 <MX_TIM3_Init+0xa0>)
 80009e2:	f004 ff09 	bl	80057f8 <HAL_TIM_Encoder_Init>
 80009e6:	4603      	mov	r3, r0
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d001      	beq.n	80009f0 <MX_TIM3_Init+0x7c>
	{
		Error_Handler();
 80009ec:	f000 fba4 	bl	8001138 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009f0:	2300      	movs	r3, #0
 80009f2:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009f4:	2300      	movs	r3, #0
 80009f6:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80009f8:	1d3b      	adds	r3, r7, #4
 80009fa:	4619      	mov	r1, r3
 80009fc:	4805      	ldr	r0, [pc, #20]	; (8000a14 <MX_TIM3_Init+0xa0>)
 80009fe:	f005 f915 	bl	8005c2c <HAL_TIMEx_MasterConfigSynchronization>
 8000a02:	4603      	mov	r3, r0
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d001      	beq.n	8000a0c <MX_TIM3_Init+0x98>
	{
		Error_Handler();
 8000a08:	f000 fb96 	bl	8001138 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */

}
 8000a0c:	bf00      	nop
 8000a0e:	3730      	adds	r7, #48	; 0x30
 8000a10:	46bd      	mov	sp, r7
 8000a12:	bd80      	pop	{r7, pc}
 8000a14:	20000278 	.word	0x20000278
 8000a18:	40000400 	.word	0x40000400

08000a1c <MX_USART3_UART_Init>:
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 8000a20:	4b11      	ldr	r3, [pc, #68]	; (8000a68 <MX_USART3_UART_Init+0x4c>)
 8000a22:	4a12      	ldr	r2, [pc, #72]	; (8000a6c <MX_USART3_UART_Init+0x50>)
 8000a24:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 115200;
 8000a26:	4b10      	ldr	r3, [pc, #64]	; (8000a68 <MX_USART3_UART_Init+0x4c>)
 8000a28:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a2c:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000a2e:	4b0e      	ldr	r3, [pc, #56]	; (8000a68 <MX_USART3_UART_Init+0x4c>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 8000a34:	4b0c      	ldr	r3, [pc, #48]	; (8000a68 <MX_USART3_UART_Init+0x4c>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 8000a3a:	4b0b      	ldr	r3, [pc, #44]	; (8000a68 <MX_USART3_UART_Init+0x4c>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 8000a40:	4b09      	ldr	r3, [pc, #36]	; (8000a68 <MX_USART3_UART_Init+0x4c>)
 8000a42:	220c      	movs	r2, #12
 8000a44:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a46:	4b08      	ldr	r3, [pc, #32]	; (8000a68 <MX_USART3_UART_Init+0x4c>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a4c:	4b06      	ldr	r3, [pc, #24]	; (8000a68 <MX_USART3_UART_Init+0x4c>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart3) != HAL_OK)
 8000a52:	4805      	ldr	r0, [pc, #20]	; (8000a68 <MX_USART3_UART_Init+0x4c>)
 8000a54:	f005 f966 	bl	8005d24 <HAL_UART_Init>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d001      	beq.n	8000a62 <MX_USART3_UART_Init+0x46>
	{
		Error_Handler();
 8000a5e:	f000 fb6b 	bl	8001138 <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}
 8000a62:	bf00      	nop
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	bf00      	nop
 8000a68:	200002c0 	.word	0x200002c0
 8000a6c:	40004800 	.word	0x40004800

08000a70 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b08e      	sub	sp, #56	; 0x38
 8000a74:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a76:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	601a      	str	r2, [r3, #0]
 8000a7e:	605a      	str	r2, [r3, #4]
 8000a80:	609a      	str	r2, [r3, #8]
 8000a82:	60da      	str	r2, [r3, #12]
 8000a84:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8000a86:	2300      	movs	r3, #0
 8000a88:	623b      	str	r3, [r7, #32]
 8000a8a:	4bb1      	ldr	r3, [pc, #708]	; (8000d50 <MX_GPIO_Init+0x2e0>)
 8000a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8e:	4ab0      	ldr	r2, [pc, #704]	; (8000d50 <MX_GPIO_Init+0x2e0>)
 8000a90:	f043 0310 	orr.w	r3, r3, #16
 8000a94:	6313      	str	r3, [r2, #48]	; 0x30
 8000a96:	4bae      	ldr	r3, [pc, #696]	; (8000d50 <MX_GPIO_Init+0x2e0>)
 8000a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9a:	f003 0310 	and.w	r3, r3, #16
 8000a9e:	623b      	str	r3, [r7, #32]
 8000aa0:	6a3b      	ldr	r3, [r7, #32]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	61fb      	str	r3, [r7, #28]
 8000aa6:	4baa      	ldr	r3, [pc, #680]	; (8000d50 <MX_GPIO_Init+0x2e0>)
 8000aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aaa:	4aa9      	ldr	r2, [pc, #676]	; (8000d50 <MX_GPIO_Init+0x2e0>)
 8000aac:	f043 0302 	orr.w	r3, r3, #2
 8000ab0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ab2:	4ba7      	ldr	r3, [pc, #668]	; (8000d50 <MX_GPIO_Init+0x2e0>)
 8000ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab6:	f003 0302 	and.w	r3, r3, #2
 8000aba:	61fb      	str	r3, [r7, #28]
 8000abc:	69fb      	ldr	r3, [r7, #28]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 8000abe:	2300      	movs	r3, #0
 8000ac0:	61bb      	str	r3, [r7, #24]
 8000ac2:	4ba3      	ldr	r3, [pc, #652]	; (8000d50 <MX_GPIO_Init+0x2e0>)
 8000ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac6:	4aa2      	ldr	r2, [pc, #648]	; (8000d50 <MX_GPIO_Init+0x2e0>)
 8000ac8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000acc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ace:	4ba0      	ldr	r3, [pc, #640]	; (8000d50 <MX_GPIO_Init+0x2e0>)
 8000ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ad6:	61bb      	str	r3, [r7, #24]
 8000ad8:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000ada:	2300      	movs	r3, #0
 8000adc:	617b      	str	r3, [r7, #20]
 8000ade:	4b9c      	ldr	r3, [pc, #624]	; (8000d50 <MX_GPIO_Init+0x2e0>)
 8000ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae2:	4a9b      	ldr	r2, [pc, #620]	; (8000d50 <MX_GPIO_Init+0x2e0>)
 8000ae4:	f043 0308 	orr.w	r3, r3, #8
 8000ae8:	6313      	str	r3, [r2, #48]	; 0x30
 8000aea:	4b99      	ldr	r3, [pc, #612]	; (8000d50 <MX_GPIO_Init+0x2e0>)
 8000aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aee:	f003 0308 	and.w	r3, r3, #8
 8000af2:	617b      	str	r3, [r7, #20]
 8000af4:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000af6:	2300      	movs	r3, #0
 8000af8:	613b      	str	r3, [r7, #16]
 8000afa:	4b95      	ldr	r3, [pc, #596]	; (8000d50 <MX_GPIO_Init+0x2e0>)
 8000afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000afe:	4a94      	ldr	r2, [pc, #592]	; (8000d50 <MX_GPIO_Init+0x2e0>)
 8000b00:	f043 0304 	orr.w	r3, r3, #4
 8000b04:	6313      	str	r3, [r2, #48]	; 0x30
 8000b06:	4b92      	ldr	r3, [pc, #584]	; (8000d50 <MX_GPIO_Init+0x2e0>)
 8000b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b0a:	f003 0304 	and.w	r3, r3, #4
 8000b0e:	613b      	str	r3, [r7, #16]
 8000b10:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000b12:	2300      	movs	r3, #0
 8000b14:	60fb      	str	r3, [r7, #12]
 8000b16:	4b8e      	ldr	r3, [pc, #568]	; (8000d50 <MX_GPIO_Init+0x2e0>)
 8000b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b1a:	4a8d      	ldr	r2, [pc, #564]	; (8000d50 <MX_GPIO_Init+0x2e0>)
 8000b1c:	f043 0301 	orr.w	r3, r3, #1
 8000b20:	6313      	str	r3, [r2, #48]	; 0x30
 8000b22:	4b8b      	ldr	r3, [pc, #556]	; (8000d50 <MX_GPIO_Init+0x2e0>)
 8000b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b26:	f003 0301 	and.w	r3, r3, #1
 8000b2a:	60fb      	str	r3, [r7, #12]
 8000b2c:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOI_CLK_ENABLE();
 8000b2e:	2300      	movs	r3, #0
 8000b30:	60bb      	str	r3, [r7, #8]
 8000b32:	4b87      	ldr	r3, [pc, #540]	; (8000d50 <MX_GPIO_Init+0x2e0>)
 8000b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b36:	4a86      	ldr	r2, [pc, #536]	; (8000d50 <MX_GPIO_Init+0x2e0>)
 8000b38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b3e:	4b84      	ldr	r3, [pc, #528]	; (8000d50 <MX_GPIO_Init+0x2e0>)
 8000b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000b46:	60bb      	str	r3, [r7, #8]
 8000b48:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	607b      	str	r3, [r7, #4]
 8000b4e:	4b80      	ldr	r3, [pc, #512]	; (8000d50 <MX_GPIO_Init+0x2e0>)
 8000b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b52:	4a7f      	ldr	r2, [pc, #508]	; (8000d50 <MX_GPIO_Init+0x2e0>)
 8000b54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b58:	6313      	str	r3, [r2, #48]	; 0x30
 8000b5a:	4b7d      	ldr	r3, [pc, #500]	; (8000d50 <MX_GPIO_Init+0x2e0>)
 8000b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b62:	607b      	str	r3, [r7, #4]
 8000b64:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 8000b66:	2300      	movs	r3, #0
 8000b68:	603b      	str	r3, [r7, #0]
 8000b6a:	4b79      	ldr	r3, [pc, #484]	; (8000d50 <MX_GPIO_Init+0x2e0>)
 8000b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6e:	4a78      	ldr	r2, [pc, #480]	; (8000d50 <MX_GPIO_Init+0x2e0>)
 8000b70:	f043 0320 	orr.w	r3, r3, #32
 8000b74:	6313      	str	r3, [r2, #48]	; 0x30
 8000b76:	4b76      	ldr	r3, [pc, #472]	; (8000d50 <MX_GPIO_Init+0x2e0>)
 8000b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b7a:	f003 0320 	and.w	r3, r3, #32
 8000b7e:	603b      	str	r3, [r7, #0]
 8000b80:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOG, SmartCard_CMDVCC_Pin|LED2_Pin|LED1_Pin, GPIO_PIN_RESET);
 8000b82:	2200      	movs	r2, #0
 8000b84:	f44f 518a 	mov.w	r1, #4416	; 0x1140
 8000b88:	4872      	ldr	r0, [pc, #456]	; (8000d54 <MX_GPIO_Init+0x2e4>)
 8000b8a:	f002 fc5d 	bl	8003448 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
 8000b8e:	2200      	movs	r2, #0
 8000b90:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b94:	4870      	ldr	r0, [pc, #448]	; (8000d58 <MX_GPIO_Init+0x2e8>)
 8000b96:	f002 fc57 	bl	8003448 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOH, SmartCard_3_5V_Pin|OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	f248 0120 	movw	r1, #32800	; 0x8020
 8000ba0:	486e      	ldr	r0, [pc, #440]	; (8000d5c <MX_GPIO_Init+0x2ec>)
 8000ba2:	f002 fc51 	bl	8003448 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, GPIO_PIN_RESET);
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	2180      	movs	r1, #128	; 0x80
 8000baa:	486d      	ldr	r0, [pc, #436]	; (8000d60 <MX_GPIO_Init+0x2f0>)
 8000bac:	f002 fc4c 	bl	8003448 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(SmartCard_RST_GPIO_Port, SmartCard_RST_Pin, GPIO_PIN_RESET);
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	2180      	movs	r1, #128	; 0x80
 8000bb4:	486b      	ldr	r0, [pc, #428]	; (8000d64 <MX_GPIO_Init+0x2f4>)
 8000bb6:	f002 fc47 	bl	8003448 <HAL_GPIO_WritePin>

	/*Configure GPIO pins : MII_TXD1_Pin MII_TXD0_Pin MII_TX_EN_Pin */
	GPIO_InitStruct.Pin = MII_TXD1_Pin|MII_TXD0_Pin|MII_TX_EN_Pin;
 8000bba:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 8000bbe:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bc0:	2302      	movs	r3, #2
 8000bc2:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000bcc:	230b      	movs	r3, #11
 8000bce:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000bd0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bd4:	4619      	mov	r1, r3
 8000bd6:	485f      	ldr	r0, [pc, #380]	; (8000d54 <MX_GPIO_Init+0x2e4>)
 8000bd8:	f002 fa82 	bl	80030e0 <HAL_GPIO_Init>

	/*Configure GPIO pins : MicroSDCard_CLK_Pin MicroSDCard_D1_Pin MicroSDCard_D0_Pin */
	GPIO_InitStruct.Pin = MicroSDCard_CLK_Pin|MicroSDCard_D1_Pin|MicroSDCard_D0_Pin;
 8000bdc:	f44f 5398 	mov.w	r3, #4864	; 0x1300
 8000be0:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000be2:	2302      	movs	r3, #2
 8000be4:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be6:	2300      	movs	r3, #0
 8000be8:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bea:	2303      	movs	r3, #3
 8000bec:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000bee:	230c      	movs	r3, #12
 8000bf0:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bf2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bf6:	4619      	mov	r1, r3
 8000bf8:	4859      	ldr	r0, [pc, #356]	; (8000d60 <MX_GPIO_Init+0x2f0>)
 8000bfa:	f002 fa71 	bl	80030e0 <HAL_GPIO_Init>

	/*Configure GPIO pin : PB6 */
	GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000bfe:	2340      	movs	r3, #64	; 0x40
 8000c00:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c02:	2300      	movs	r3, #0
 8000c04:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000c06:	2302      	movs	r3, #2
 8000c08:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c0a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c0e:	4619      	mov	r1, r3
 8000c10:	4855      	ldr	r0, [pc, #340]	; (8000d68 <MX_GPIO_Init+0x2f8>)
 8000c12:	f002 fa65 	bl	80030e0 <HAL_GPIO_Init>

	/*Configure GPIO pin : User_Button_Pin */
	GPIO_InitStruct.Pin = User_Button_Pin;
 8000c16:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000c1a:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000c1c:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000c20:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c22:	2300      	movs	r3, #0
 8000c24:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(User_Button_GPIO_Port, &GPIO_InitStruct);
 8000c26:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c2a:	4619      	mov	r1, r3
 8000c2c:	4849      	ldr	r0, [pc, #292]	; (8000d54 <MX_GPIO_Init+0x2e4>)
 8000c2e:	f002 fa57 	bl	80030e0 <HAL_GPIO_Init>

	/*Configure GPIO pins : SmartCard_CMDVCC_Pin LED2_Pin LED1_Pin */
	GPIO_InitStruct.Pin = SmartCard_CMDVCC_Pin|LED2_Pin|LED1_Pin;
 8000c32:	f44f 538a 	mov.w	r3, #4416	; 0x1140
 8000c36:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c38:	2301      	movs	r3, #1
 8000c3a:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c40:	2300      	movs	r3, #0
 8000c42:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c44:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c48:	4619      	mov	r1, r3
 8000c4a:	4842      	ldr	r0, [pc, #264]	; (8000d54 <MX_GPIO_Init+0x2e4>)
 8000c4c:	f002 fa48 	bl	80030e0 <HAL_GPIO_Init>

	/*Configure GPIO pins : I2S_SD_Pin I2S_WS_Pin */
	GPIO_InitStruct.Pin = I2S_SD_Pin|I2S_WS_Pin;
 8000c50:	2309      	movs	r3, #9
 8000c52:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c54:	2302      	movs	r3, #2
 8000c56:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000c60:	2305      	movs	r3, #5
 8000c62:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000c64:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c68:	4619      	mov	r1, r3
 8000c6a:	483b      	ldr	r0, [pc, #236]	; (8000d58 <MX_GPIO_Init+0x2e8>)
 8000c6c:	f002 fa38 	bl	80030e0 <HAL_GPIO_Init>

	/*Configure GPIO pin : IO_Expander_INT_Pin */
	GPIO_InitStruct.Pin = IO_Expander_INT_Pin;
 8000c70:	2304      	movs	r3, #4
 8000c72:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000c74:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000c78:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(IO_Expander_INT_GPIO_Port, &GPIO_InitStruct);
 8000c7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c82:	4619      	mov	r1, r3
 8000c84:	4834      	ldr	r0, [pc, #208]	; (8000d58 <MX_GPIO_Init+0x2e8>)
 8000c86:	f002 fa2b 	bl	80030e0 <HAL_GPIO_Init>

	/*Configure GPIO pin : LED3_Pin */
	GPIO_InitStruct.Pin = LED3_Pin;
 8000c8a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000c8e:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c90:	2301      	movs	r3, #1
 8000c92:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c94:	2300      	movs	r3, #0
 8000c96:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_GPIO_Init(LED3_GPIO_Port, &GPIO_InitStruct);
 8000c9c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ca0:	4619      	mov	r1, r3
 8000ca2:	482d      	ldr	r0, [pc, #180]	; (8000d58 <MX_GPIO_Init+0x2e8>)
 8000ca4:	f002 fa1c 	bl	80030e0 <HAL_GPIO_Init>

	/*Configure GPIO pin : MicroSDCard_CMD_Pin */
	GPIO_InitStruct.Pin = MicroSDCard_CMD_Pin;
 8000ca8:	2304      	movs	r3, #4
 8000caa:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cac:	2302      	movs	r3, #2
 8000cae:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cb4:	2303      	movs	r3, #3
 8000cb6:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000cb8:	230c      	movs	r3, #12
 8000cba:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(MicroSDCard_CMD_GPIO_Port, &GPIO_InitStruct);
 8000cbc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cc0:	4619      	mov	r1, r3
 8000cc2:	482a      	ldr	r0, [pc, #168]	; (8000d6c <MX_GPIO_Init+0x2fc>)
 8000cc4:	f002 fa0c 	bl	80030e0 <HAL_GPIO_Init>

	/*Configure GPIO pins : SmartCard_3_5V_Pin OTG_FS_PowerSwitchOn_Pin */
	GPIO_InitStruct.Pin = SmartCard_3_5V_Pin|OTG_FS_PowerSwitchOn_Pin;
 8000cc8:	f248 0320 	movw	r3, #32800	; 0x8020
 8000ccc:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cce:	2301      	movs	r3, #1
 8000cd0:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000cda:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cde:	4619      	mov	r1, r3
 8000ce0:	481e      	ldr	r0, [pc, #120]	; (8000d5c <MX_GPIO_Init+0x2ec>)
 8000ce2:	f002 f9fd 	bl	80030e0 <HAL_GPIO_Init>

	/*Configure GPIO pin : MII_RX_ER_Pin */
	GPIO_InitStruct.Pin = MII_RX_ER_Pin;
 8000ce6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000cea:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cec:	2302      	movs	r3, #2
 8000cee:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000cf8:	230b      	movs	r3, #11
 8000cfa:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(MII_RX_ER_GPIO_Port, &GPIO_InitStruct);
 8000cfc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d00:	4619      	mov	r1, r3
 8000d02:	4815      	ldr	r0, [pc, #84]	; (8000d58 <MX_GPIO_Init+0x2e8>)
 8000d04:	f002 f9ec 	bl	80030e0 <HAL_GPIO_Init>

	/*Configure GPIO pin : ULPI_DIR_Pin */
	GPIO_InitStruct.Pin = ULPI_DIR_Pin;
 8000d08:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000d0c:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d0e:	2302      	movs	r3, #2
 8000d10:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d12:	2300      	movs	r3, #0
 8000d14:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d16:	2303      	movs	r3, #3
 8000d18:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000d1a:	230a      	movs	r3, #10
 8000d1c:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(ULPI_DIR_GPIO_Port, &GPIO_InitStruct);
 8000d1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d22:	4619      	mov	r1, r3
 8000d24:	480c      	ldr	r0, [pc, #48]	; (8000d58 <MX_GPIO_Init+0x2e8>)
 8000d26:	f002 f9db 	bl	80030e0 <HAL_GPIO_Init>

	/*Configure GPIO pin : MicroSDCard_Detect_Pin */
	GPIO_InitStruct.Pin = MicroSDCard_Detect_Pin;
 8000d2a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d2e:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d30:	2300      	movs	r3, #0
 8000d32:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d34:	2301      	movs	r3, #1
 8000d36:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(MicroSDCard_Detect_GPIO_Port, &GPIO_InitStruct);
 8000d38:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d3c:	4619      	mov	r1, r3
 8000d3e:	4807      	ldr	r0, [pc, #28]	; (8000d5c <MX_GPIO_Init+0x2ec>)
 8000d40:	f002 f9ce 	bl	80030e0 <HAL_GPIO_Init>

	/*Configure GPIO pins : MII_CRS_Pin MII_COL_Pin MII_RXD2_Pin MII_RXD3_Pin */
	GPIO_InitStruct.Pin = MII_CRS_Pin|MII_COL_Pin|MII_RXD2_Pin|MII_RXD3_Pin;
 8000d44:	23cc      	movs	r3, #204	; 0xcc
 8000d46:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d48:	2302      	movs	r3, #2
 8000d4a:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	e00f      	b.n	8000d70 <MX_GPIO_Init+0x300>
 8000d50:	40023800 	.word	0x40023800
 8000d54:	40021800 	.word	0x40021800
 8000d58:	40022000 	.word	0x40022000
 8000d5c:	40021c00 	.word	0x40021c00
 8000d60:	40020800 	.word	0x40020800
 8000d64:	40021400 	.word	0x40021400
 8000d68:	40020400 	.word	0x40020400
 8000d6c:	40020c00 	.word	0x40020c00
 8000d70:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d72:	2300      	movs	r3, #0
 8000d74:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d76:	230b      	movs	r3, #11
 8000d78:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000d7a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d7e:	4619      	mov	r1, r3
 8000d80:	486c      	ldr	r0, [pc, #432]	; (8000f34 <MX_GPIO_Init+0x4c4>)
 8000d82:	f002 f9ad 	bl	80030e0 <HAL_GPIO_Init>

	/*Configure GPIO pin : MCO_Pin */
	GPIO_InitStruct.Pin = MCO_Pin;
 8000d86:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d8a:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d8c:	2302      	movs	r3, #2
 8000d8e:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d90:	2300      	movs	r3, #0
 8000d92:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d94:	2300      	movs	r3, #0
 8000d96:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(MCO_GPIO_Port, &GPIO_InitStruct);
 8000d9c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000da0:	4619      	mov	r1, r3
 8000da2:	4865      	ldr	r0, [pc, #404]	; (8000f38 <MX_GPIO_Init+0x4c8>)
 8000da4:	f002 f99c 	bl	80030e0 <HAL_GPIO_Init>

	/*Configure GPIO pin : LED4_Pin */
	GPIO_InitStruct.Pin = LED4_Pin;
 8000da8:	2380      	movs	r3, #128	; 0x80
 8000daa:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dac:	2301      	movs	r3, #1
 8000dae:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db0:	2300      	movs	r3, #0
 8000db2:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000db4:	2300      	movs	r3, #0
 8000db6:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_GPIO_Init(LED4_GPIO_Port, &GPIO_InitStruct);
 8000db8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dbc:	4619      	mov	r1, r3
 8000dbe:	485f      	ldr	r0, [pc, #380]	; (8000f3c <MX_GPIO_Init+0x4cc>)
 8000dc0:	f002 f98e 	bl	80030e0 <HAL_GPIO_Init>

	/*Configure GPIO pin : ULPI_NXT_Pin */
	GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8000dc4:	2310      	movs	r3, #16
 8000dc6:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dc8:	2302      	movs	r3, #2
 8000dca:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dd0:	2303      	movs	r3, #3
 8000dd2:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000dd4:	230a      	movs	r3, #10
 8000dd6:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8000dd8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ddc:	4619      	mov	r1, r3
 8000dde:	4855      	ldr	r0, [pc, #340]	; (8000f34 <MX_GPIO_Init+0x4c4>)
 8000de0:	f002 f97e 	bl	80030e0 <HAL_GPIO_Init>

	/*Configure GPIO pin : SmartCard_CLK_Pin */
	GPIO_InitStruct.Pin = SmartCard_CLK_Pin;
 8000de4:	2380      	movs	r3, #128	; 0x80
 8000de6:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000de8:	2302      	movs	r3, #2
 8000dea:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dec:	2300      	movs	r3, #0
 8000dee:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000df0:	2300      	movs	r3, #0
 8000df2:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8000df4:	2308      	movs	r3, #8
 8000df6:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(SmartCard_CLK_GPIO_Port, &GPIO_InitStruct);
 8000df8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dfc:	4619      	mov	r1, r3
 8000dfe:	4850      	ldr	r0, [pc, #320]	; (8000f40 <MX_GPIO_Init+0x4d0>)
 8000e00:	f002 f96e 	bl	80030e0 <HAL_GPIO_Init>

	/*Configure GPIO pin : SmartCard_RST_Pin */
	GPIO_InitStruct.Pin = SmartCard_RST_Pin;
 8000e04:	2380      	movs	r3, #128	; 0x80
 8000e06:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e08:	2301      	movs	r3, #1
 8000e0a:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e10:	2300      	movs	r3, #0
 8000e12:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_GPIO_Init(SmartCard_RST_GPIO_Port, &GPIO_InitStruct);
 8000e14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e18:	4619      	mov	r1, r3
 8000e1a:	484a      	ldr	r0, [pc, #296]	; (8000f44 <MX_GPIO_Init+0x4d4>)
 8000e1c:	f002 f960 	bl	80030e0 <HAL_GPIO_Init>

	/*Configure GPIO pin : SmartCard_OFF_Pin */
	GPIO_InitStruct.Pin = SmartCard_OFF_Pin;
 8000e20:	2340      	movs	r3, #64	; 0x40
 8000e22:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e24:	2300      	movs	r3, #0
 8000e26:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(SmartCard_OFF_GPIO_Port, &GPIO_InitStruct);
 8000e2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e30:	4619      	mov	r1, r3
 8000e32:	4844      	ldr	r0, [pc, #272]	; (8000f44 <MX_GPIO_Init+0x4d4>)
 8000e34:	f002 f954 	bl	80030e0 <HAL_GPIO_Init>

	/*Configure GPIO pin : ULPI_STP_Pin */
	GPIO_InitStruct.Pin = ULPI_STP_Pin;
 8000e38:	2301      	movs	r3, #1
 8000e3a:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e3c:	2302      	movs	r3, #2
 8000e3e:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e40:	2300      	movs	r3, #0
 8000e42:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e44:	2303      	movs	r3, #3
 8000e46:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000e48:	230a      	movs	r3, #10
 8000e4a:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(ULPI_STP_GPIO_Port, &GPIO_InitStruct);
 8000e4c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e50:	4619      	mov	r1, r3
 8000e52:	483a      	ldr	r0, [pc, #232]	; (8000f3c <MX_GPIO_Init+0x4cc>)
 8000e54:	f002 f944 	bl	80030e0 <HAL_GPIO_Init>

	/*Configure GPIO pins : MII_MDC_Pin MII_TXD2_Pin MII_TX_CLK_Pin MII_RXD0_Pin
                           MII_RXD1_Pin */
	GPIO_InitStruct.Pin = MII_MDC_Pin|MII_TXD2_Pin|MII_TX_CLK_Pin|MII_RXD0_Pin
 8000e58:	233e      	movs	r3, #62	; 0x3e
 8000e5a:	627b      	str	r3, [r7, #36]	; 0x24
			|MII_RXD1_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e5c:	2302      	movs	r3, #2
 8000e5e:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e60:	2300      	movs	r3, #0
 8000e62:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e64:	2300      	movs	r3, #0
 8000e66:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e68:	230b      	movs	r3, #11
 8000e6a:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e6c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e70:	4619      	mov	r1, r3
 8000e72:	4832      	ldr	r0, [pc, #200]	; (8000f3c <MX_GPIO_Init+0x4cc>)
 8000e74:	f002 f934 	bl	80030e0 <HAL_GPIO_Init>

	/*Configure GPIO pin : SW1_Pin */
	GPIO_InitStruct.Pin = SW1_Pin;
 8000e78:	2304      	movs	r3, #4
 8000e7a:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e80:	2300      	movs	r3, #0
 8000e82:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(SW1_GPIO_Port, &GPIO_InitStruct);
 8000e84:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e88:	4619      	mov	r1, r3
 8000e8a:	482f      	ldr	r0, [pc, #188]	; (8000f48 <MX_GPIO_Init+0x4d8>)
 8000e8c:	f002 f928 	bl	80030e0 <HAL_GPIO_Init>

	/*Configure GPIO pins : MII_RX_CLK_RMII_REF_CLK_Pin MII_MDIO_Pin MII_RX_DV_RMII_CRSDV_Pin */
	GPIO_InitStruct.Pin = MII_RX_CLK_RMII_REF_CLK_Pin|MII_MDIO_Pin|MII_RX_DV_RMII_CRSDV_Pin;
 8000e90:	2386      	movs	r3, #134	; 0x86
 8000e92:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e94:	2302      	movs	r3, #2
 8000e96:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ea0:	230b      	movs	r3, #11
 8000ea2:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ea4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ea8:	4619      	mov	r1, r3
 8000eaa:	4823      	ldr	r0, [pc, #140]	; (8000f38 <MX_GPIO_Init+0x4c8>)
 8000eac:	f002 f918 	bl	80030e0 <HAL_GPIO_Init>

	/*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
	GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 8000eb0:	2328      	movs	r3, #40	; 0x28
 8000eb2:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eb4:	2302      	movs	r3, #2
 8000eb6:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ebc:	2303      	movs	r3, #3
 8000ebe:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000ec0:	230a      	movs	r3, #10
 8000ec2:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ec4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ec8:	4619      	mov	r1, r3
 8000eca:	481b      	ldr	r0, [pc, #108]	; (8000f38 <MX_GPIO_Init+0x4c8>)
 8000ecc:	f002 f908 	bl	80030e0 <HAL_GPIO_Init>

	/*Configure GPIO pins : ULPI_D5_Pin ULPI_D6_Pin ULPI_D2_Pin ULPI_D1_Pin
                           ULPI_D3_Pin ULPI_D4_Pin */
	GPIO_InitStruct.Pin = ULPI_D5_Pin|ULPI_D6_Pin|ULPI_D2_Pin|ULPI_D1_Pin
 8000ed0:	f643 4303 	movw	r3, #15363	; 0x3c03
 8000ed4:	627b      	str	r3, [r7, #36]	; 0x24
			|ULPI_D3_Pin|ULPI_D4_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ed6:	2302      	movs	r3, #2
 8000ed8:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eda:	2300      	movs	r3, #0
 8000edc:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ede:	2303      	movs	r3, #3
 8000ee0:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000ee2:	230a      	movs	r3, #10
 8000ee4:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ee6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000eea:	4619      	mov	r1, r3
 8000eec:	4816      	ldr	r0, [pc, #88]	; (8000f48 <MX_GPIO_Init+0x4d8>)
 8000eee:	f002 f8f7 	bl	80030e0 <HAL_GPIO_Init>

	/*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
	GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000ef2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000ef6:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000ef8:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000efc:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000efe:	2300      	movs	r3, #0
 8000f00:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000f02:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f06:	4619      	mov	r1, r3
 8000f08:	480e      	ldr	r0, [pc, #56]	; (8000f44 <MX_GPIO_Init+0x4d4>)
 8000f0a:	f002 f8e9 	bl	80030e0 <HAL_GPIO_Init>

	/*Configure GPIO pin : MII_INT_Pin */
	GPIO_InitStruct.Pin = MII_INT_Pin;
 8000f0e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000f12:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000f14:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000f18:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(MII_INT_GPIO_Port, &GPIO_InitStruct);
 8000f1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f22:	4619      	mov	r1, r3
 8000f24:	4808      	ldr	r0, [pc, #32]	; (8000f48 <MX_GPIO_Init+0x4d8>)
 8000f26:	f002 f8db 	bl	80030e0 <HAL_GPIO_Init>

}
 8000f2a:	bf00      	nop
 8000f2c:	3738      	adds	r7, #56	; 0x38
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	bf00      	nop
 8000f34:	40021c00 	.word	0x40021c00
 8000f38:	40020000 	.word	0x40020000
 8000f3c:	40020800 	.word	0x40020800
 8000f40:	40021800 	.word	0x40021800
 8000f44:	40021400 	.word	0x40021400
 8000f48:	40020400 	.word	0x40020400

08000f4c <MX_FSMC_Init>:

/* FSMC initialization function */
static void MX_FSMC_Init(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b088      	sub	sp, #32
 8000f50:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN FSMC_Init 0 */

	/* USER CODE END FSMC_Init 0 */

	FSMC_NORSRAM_TimingTypeDef Timing = {0};
 8000f52:	1d3b      	adds	r3, r7, #4
 8000f54:	2200      	movs	r2, #0
 8000f56:	601a      	str	r2, [r3, #0]
 8000f58:	605a      	str	r2, [r3, #4]
 8000f5a:	609a      	str	r2, [r3, #8]
 8000f5c:	60da      	str	r2, [r3, #12]
 8000f5e:	611a      	str	r2, [r3, #16]
 8000f60:	615a      	str	r2, [r3, #20]
 8000f62:	619a      	str	r2, [r3, #24]

	/* USER CODE END FSMC_Init 1 */

	/** Perform the NOR1 memory initialization sequence
	 */
	hnor1.Instance = FSMC_NORSRAM_DEVICE;
 8000f64:	4b70      	ldr	r3, [pc, #448]	; (8001128 <MX_FSMC_Init+0x1dc>)
 8000f66:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8000f6a:	601a      	str	r2, [r3, #0]
	hnor1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8000f6c:	4b6e      	ldr	r3, [pc, #440]	; (8001128 <MX_FSMC_Init+0x1dc>)
 8000f6e:	4a6f      	ldr	r2, [pc, #444]	; (800112c <MX_FSMC_Init+0x1e0>)
 8000f70:	605a      	str	r2, [r3, #4]
	/* hnor1.Init */
	hnor1.Init.NSBank = FSMC_NORSRAM_BANK1;
 8000f72:	4b6d      	ldr	r3, [pc, #436]	; (8001128 <MX_FSMC_Init+0x1dc>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	609a      	str	r2, [r3, #8]
	hnor1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8000f78:	4b6b      	ldr	r3, [pc, #428]	; (8001128 <MX_FSMC_Init+0x1dc>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	60da      	str	r2, [r3, #12]
	hnor1.Init.MemoryType = FSMC_MEMORY_TYPE_NOR;
 8000f7e:	4b6a      	ldr	r3, [pc, #424]	; (8001128 <MX_FSMC_Init+0x1dc>)
 8000f80:	2208      	movs	r2, #8
 8000f82:	611a      	str	r2, [r3, #16]
	hnor1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8000f84:	4b68      	ldr	r3, [pc, #416]	; (8001128 <MX_FSMC_Init+0x1dc>)
 8000f86:	2210      	movs	r2, #16
 8000f88:	615a      	str	r2, [r3, #20]
	hnor1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8000f8a:	4b67      	ldr	r3, [pc, #412]	; (8001128 <MX_FSMC_Init+0x1dc>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	619a      	str	r2, [r3, #24]
	hnor1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8000f90:	4b65      	ldr	r3, [pc, #404]	; (8001128 <MX_FSMC_Init+0x1dc>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	61da      	str	r2, [r3, #28]
	hnor1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 8000f96:	4b64      	ldr	r3, [pc, #400]	; (8001128 <MX_FSMC_Init+0x1dc>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	621a      	str	r2, [r3, #32]
	hnor1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8000f9c:	4b62      	ldr	r3, [pc, #392]	; (8001128 <MX_FSMC_Init+0x1dc>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	625a      	str	r2, [r3, #36]	; 0x24
	hnor1.Init.WriteOperation = FSMC_WRITE_OPERATION_DISABLE;
 8000fa2:	4b61      	ldr	r3, [pc, #388]	; (8001128 <MX_FSMC_Init+0x1dc>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	629a      	str	r2, [r3, #40]	; 0x28
	hnor1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8000fa8:	4b5f      	ldr	r3, [pc, #380]	; (8001128 <MX_FSMC_Init+0x1dc>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	62da      	str	r2, [r3, #44]	; 0x2c
	hnor1.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 8000fae:	4b5e      	ldr	r3, [pc, #376]	; (8001128 <MX_FSMC_Init+0x1dc>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	631a      	str	r2, [r3, #48]	; 0x30
	hnor1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8000fb4:	4b5c      	ldr	r3, [pc, #368]	; (8001128 <MX_FSMC_Init+0x1dc>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	635a      	str	r2, [r3, #52]	; 0x34
	hnor1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8000fba:	4b5b      	ldr	r3, [pc, #364]	; (8001128 <MX_FSMC_Init+0x1dc>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	639a      	str	r2, [r3, #56]	; 0x38
	hnor1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 8000fc0:	4b59      	ldr	r3, [pc, #356]	; (8001128 <MX_FSMC_Init+0x1dc>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	645a      	str	r2, [r3, #68]	; 0x44
	/* Timing */
	Timing.AddressSetupTime = 15;
 8000fc6:	230f      	movs	r3, #15
 8000fc8:	607b      	str	r3, [r7, #4]
	Timing.AddressHoldTime = 15;
 8000fca:	230f      	movs	r3, #15
 8000fcc:	60bb      	str	r3, [r7, #8]
	Timing.DataSetupTime = 255;
 8000fce:	23ff      	movs	r3, #255	; 0xff
 8000fd0:	60fb      	str	r3, [r7, #12]
	Timing.BusTurnAroundDuration = 15;
 8000fd2:	230f      	movs	r3, #15
 8000fd4:	613b      	str	r3, [r7, #16]
	Timing.CLKDivision = 16;
 8000fd6:	2310      	movs	r3, #16
 8000fd8:	617b      	str	r3, [r7, #20]
	Timing.DataLatency = 17;
 8000fda:	2311      	movs	r3, #17
 8000fdc:	61bb      	str	r3, [r7, #24]
	Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	61fb      	str	r3, [r7, #28]
	/* ExtTiming */

	if (HAL_NOR_Init(&hnor1, &Timing, NULL) != HAL_OK)
 8000fe2:	1d3b      	adds	r3, r7, #4
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	4619      	mov	r1, r3
 8000fe8:	484f      	ldr	r0, [pc, #316]	; (8001128 <MX_FSMC_Init+0x1dc>)
 8000fea:	f002 fb8b 	bl	8003704 <HAL_NOR_Init>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d001      	beq.n	8000ff8 <MX_FSMC_Init+0xac>
	{
		Error_Handler( );
 8000ff4:	f000 f8a0 	bl	8001138 <Error_Handler>
	}

	/** Perform the SRAM2 memory initialization sequence
	 */
	hsram2.Instance = FSMC_NORSRAM_DEVICE;
 8000ff8:	4b4d      	ldr	r3, [pc, #308]	; (8001130 <MX_FSMC_Init+0x1e4>)
 8000ffa:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8000ffe:	601a      	str	r2, [r3, #0]
	hsram2.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8001000:	4b4b      	ldr	r3, [pc, #300]	; (8001130 <MX_FSMC_Init+0x1e4>)
 8001002:	4a4a      	ldr	r2, [pc, #296]	; (800112c <MX_FSMC_Init+0x1e0>)
 8001004:	605a      	str	r2, [r3, #4]
	/* hsram2.Init */
	hsram2.Init.NSBank = FSMC_NORSRAM_BANK2;
 8001006:	4b4a      	ldr	r3, [pc, #296]	; (8001130 <MX_FSMC_Init+0x1e4>)
 8001008:	2202      	movs	r2, #2
 800100a:	609a      	str	r2, [r3, #8]
	hsram2.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 800100c:	4b48      	ldr	r3, [pc, #288]	; (8001130 <MX_FSMC_Init+0x1e4>)
 800100e:	2200      	movs	r2, #0
 8001010:	60da      	str	r2, [r3, #12]
	hsram2.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8001012:	4b47      	ldr	r3, [pc, #284]	; (8001130 <MX_FSMC_Init+0x1e4>)
 8001014:	2200      	movs	r2, #0
 8001016:	611a      	str	r2, [r3, #16]
	hsram2.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8001018:	4b45      	ldr	r3, [pc, #276]	; (8001130 <MX_FSMC_Init+0x1e4>)
 800101a:	2210      	movs	r2, #16
 800101c:	615a      	str	r2, [r3, #20]
	hsram2.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 800101e:	4b44      	ldr	r3, [pc, #272]	; (8001130 <MX_FSMC_Init+0x1e4>)
 8001020:	2200      	movs	r2, #0
 8001022:	619a      	str	r2, [r3, #24]
	hsram2.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8001024:	4b42      	ldr	r3, [pc, #264]	; (8001130 <MX_FSMC_Init+0x1e4>)
 8001026:	2200      	movs	r2, #0
 8001028:	61da      	str	r2, [r3, #28]
	hsram2.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 800102a:	4b41      	ldr	r3, [pc, #260]	; (8001130 <MX_FSMC_Init+0x1e4>)
 800102c:	2200      	movs	r2, #0
 800102e:	621a      	str	r2, [r3, #32]
	hsram2.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8001030:	4b3f      	ldr	r3, [pc, #252]	; (8001130 <MX_FSMC_Init+0x1e4>)
 8001032:	2200      	movs	r2, #0
 8001034:	625a      	str	r2, [r3, #36]	; 0x24
	hsram2.Init.WriteOperation = FSMC_WRITE_OPERATION_DISABLE;
 8001036:	4b3e      	ldr	r3, [pc, #248]	; (8001130 <MX_FSMC_Init+0x1e4>)
 8001038:	2200      	movs	r2, #0
 800103a:	629a      	str	r2, [r3, #40]	; 0x28
	hsram2.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 800103c:	4b3c      	ldr	r3, [pc, #240]	; (8001130 <MX_FSMC_Init+0x1e4>)
 800103e:	2200      	movs	r2, #0
 8001040:	62da      	str	r2, [r3, #44]	; 0x2c
	hsram2.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 8001042:	4b3b      	ldr	r3, [pc, #236]	; (8001130 <MX_FSMC_Init+0x1e4>)
 8001044:	2200      	movs	r2, #0
 8001046:	631a      	str	r2, [r3, #48]	; 0x30
	hsram2.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8001048:	4b39      	ldr	r3, [pc, #228]	; (8001130 <MX_FSMC_Init+0x1e4>)
 800104a:	2200      	movs	r2, #0
 800104c:	635a      	str	r2, [r3, #52]	; 0x34
	hsram2.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 800104e:	4b38      	ldr	r3, [pc, #224]	; (8001130 <MX_FSMC_Init+0x1e4>)
 8001050:	2200      	movs	r2, #0
 8001052:	639a      	str	r2, [r3, #56]	; 0x38
	hsram2.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 8001054:	4b36      	ldr	r3, [pc, #216]	; (8001130 <MX_FSMC_Init+0x1e4>)
 8001056:	2200      	movs	r2, #0
 8001058:	645a      	str	r2, [r3, #68]	; 0x44
	/* Timing */
	Timing.AddressSetupTime = 15;
 800105a:	230f      	movs	r3, #15
 800105c:	607b      	str	r3, [r7, #4]
	Timing.AddressHoldTime = 15;
 800105e:	230f      	movs	r3, #15
 8001060:	60bb      	str	r3, [r7, #8]
	Timing.DataSetupTime = 255;
 8001062:	23ff      	movs	r3, #255	; 0xff
 8001064:	60fb      	str	r3, [r7, #12]
	Timing.BusTurnAroundDuration = 15;
 8001066:	230f      	movs	r3, #15
 8001068:	613b      	str	r3, [r7, #16]
	Timing.CLKDivision = 16;
 800106a:	2310      	movs	r3, #16
 800106c:	617b      	str	r3, [r7, #20]
	Timing.DataLatency = 17;
 800106e:	2311      	movs	r3, #17
 8001070:	61bb      	str	r3, [r7, #24]
	Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8001072:	2300      	movs	r3, #0
 8001074:	61fb      	str	r3, [r7, #28]
	/* ExtTiming */

	if (HAL_SRAM_Init(&hsram2, &Timing, NULL) != HAL_OK)
 8001076:	1d3b      	adds	r3, r7, #4
 8001078:	2200      	movs	r2, #0
 800107a:	4619      	mov	r1, r3
 800107c:	482c      	ldr	r0, [pc, #176]	; (8001130 <MX_FSMC_Init+0x1e4>)
 800107e:	f004 fb73 	bl	8005768 <HAL_SRAM_Init>
 8001082:	4603      	mov	r3, r0
 8001084:	2b00      	cmp	r3, #0
 8001086:	d001      	beq.n	800108c <MX_FSMC_Init+0x140>
	{
		Error_Handler( );
 8001088:	f000 f856 	bl	8001138 <Error_Handler>
	}

	/** Perform the SRAM3 memory initialization sequence
	 */
	hsram3.Instance = FSMC_NORSRAM_DEVICE;
 800108c:	4b29      	ldr	r3, [pc, #164]	; (8001134 <MX_FSMC_Init+0x1e8>)
 800108e:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8001092:	601a      	str	r2, [r3, #0]
	hsram3.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8001094:	4b27      	ldr	r3, [pc, #156]	; (8001134 <MX_FSMC_Init+0x1e8>)
 8001096:	4a25      	ldr	r2, [pc, #148]	; (800112c <MX_FSMC_Init+0x1e0>)
 8001098:	605a      	str	r2, [r3, #4]
	/* hsram3.Init */
	hsram3.Init.NSBank = FSMC_NORSRAM_BANK3;
 800109a:	4b26      	ldr	r3, [pc, #152]	; (8001134 <MX_FSMC_Init+0x1e8>)
 800109c:	2204      	movs	r2, #4
 800109e:	609a      	str	r2, [r3, #8]
	hsram3.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 80010a0:	4b24      	ldr	r3, [pc, #144]	; (8001134 <MX_FSMC_Init+0x1e8>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	60da      	str	r2, [r3, #12]
	hsram3.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 80010a6:	4b23      	ldr	r3, [pc, #140]	; (8001134 <MX_FSMC_Init+0x1e8>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	611a      	str	r2, [r3, #16]
	hsram3.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 80010ac:	4b21      	ldr	r3, [pc, #132]	; (8001134 <MX_FSMC_Init+0x1e8>)
 80010ae:	2210      	movs	r2, #16
 80010b0:	615a      	str	r2, [r3, #20]
	hsram3.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 80010b2:	4b20      	ldr	r3, [pc, #128]	; (8001134 <MX_FSMC_Init+0x1e8>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	619a      	str	r2, [r3, #24]
	hsram3.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 80010b8:	4b1e      	ldr	r3, [pc, #120]	; (8001134 <MX_FSMC_Init+0x1e8>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	61da      	str	r2, [r3, #28]
	hsram3.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 80010be:	4b1d      	ldr	r3, [pc, #116]	; (8001134 <MX_FSMC_Init+0x1e8>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	621a      	str	r2, [r3, #32]
	hsram3.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 80010c4:	4b1b      	ldr	r3, [pc, #108]	; (8001134 <MX_FSMC_Init+0x1e8>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	625a      	str	r2, [r3, #36]	; 0x24
	hsram3.Init.WriteOperation = FSMC_WRITE_OPERATION_DISABLE;
 80010ca:	4b1a      	ldr	r3, [pc, #104]	; (8001134 <MX_FSMC_Init+0x1e8>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	629a      	str	r2, [r3, #40]	; 0x28
	hsram3.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 80010d0:	4b18      	ldr	r3, [pc, #96]	; (8001134 <MX_FSMC_Init+0x1e8>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	62da      	str	r2, [r3, #44]	; 0x2c
	hsram3.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 80010d6:	4b17      	ldr	r3, [pc, #92]	; (8001134 <MX_FSMC_Init+0x1e8>)
 80010d8:	2200      	movs	r2, #0
 80010da:	631a      	str	r2, [r3, #48]	; 0x30
	hsram3.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 80010dc:	4b15      	ldr	r3, [pc, #84]	; (8001134 <MX_FSMC_Init+0x1e8>)
 80010de:	2200      	movs	r2, #0
 80010e0:	635a      	str	r2, [r3, #52]	; 0x34
	hsram3.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 80010e2:	4b14      	ldr	r3, [pc, #80]	; (8001134 <MX_FSMC_Init+0x1e8>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	639a      	str	r2, [r3, #56]	; 0x38
	hsram3.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 80010e8:	4b12      	ldr	r3, [pc, #72]	; (8001134 <MX_FSMC_Init+0x1e8>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	645a      	str	r2, [r3, #68]	; 0x44
	/* Timing */
	Timing.AddressSetupTime = 15;
 80010ee:	230f      	movs	r3, #15
 80010f0:	607b      	str	r3, [r7, #4]
	Timing.AddressHoldTime = 15;
 80010f2:	230f      	movs	r3, #15
 80010f4:	60bb      	str	r3, [r7, #8]
	Timing.DataSetupTime = 255;
 80010f6:	23ff      	movs	r3, #255	; 0xff
 80010f8:	60fb      	str	r3, [r7, #12]
	Timing.BusTurnAroundDuration = 15;
 80010fa:	230f      	movs	r3, #15
 80010fc:	613b      	str	r3, [r7, #16]
	Timing.CLKDivision = 16;
 80010fe:	2310      	movs	r3, #16
 8001100:	617b      	str	r3, [r7, #20]
	Timing.DataLatency = 17;
 8001102:	2311      	movs	r3, #17
 8001104:	61bb      	str	r3, [r7, #24]
	Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8001106:	2300      	movs	r3, #0
 8001108:	61fb      	str	r3, [r7, #28]
	/* ExtTiming */

	if (HAL_SRAM_Init(&hsram3, &Timing, NULL) != HAL_OK)
 800110a:	1d3b      	adds	r3, r7, #4
 800110c:	2200      	movs	r2, #0
 800110e:	4619      	mov	r1, r3
 8001110:	4808      	ldr	r0, [pc, #32]	; (8001134 <MX_FSMC_Init+0x1e8>)
 8001112:	f004 fb29 	bl	8005768 <HAL_SRAM_Init>
 8001116:	4603      	mov	r3, r0
 8001118:	2b00      	cmp	r3, #0
 800111a:	d001      	beq.n	8001120 <MX_FSMC_Init+0x1d4>
	{
		Error_Handler( );
 800111c:	f000 f80c 	bl	8001138 <Error_Handler>
	}

	/* USER CODE BEGIN FSMC_Init 2 */

	/* USER CODE END FSMC_Init 2 */
}
 8001120:	bf00      	nop
 8001122:	3720      	adds	r7, #32
 8001124:	46bd      	mov	sp, r7
 8001126:	bd80      	pop	{r7, pc}
 8001128:	20000304 	.word	0x20000304
 800112c:	a0000104 	.word	0xa0000104
 8001130:	20000354 	.word	0x20000354
 8001134:	200003a4 	.word	0x200003a4

08001138 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001138:	b480      	push	{r7}
 800113a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800113c:	b672      	cpsid	i
}
 800113e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001140:	e7fe      	b.n	8001140 <Error_Handler+0x8>
	...

08001144 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b082      	sub	sp, #8
 8001148:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800114a:	2300      	movs	r3, #0
 800114c:	607b      	str	r3, [r7, #4]
 800114e:	4b10      	ldr	r3, [pc, #64]	; (8001190 <HAL_MspInit+0x4c>)
 8001150:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001152:	4a0f      	ldr	r2, [pc, #60]	; (8001190 <HAL_MspInit+0x4c>)
 8001154:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001158:	6453      	str	r3, [r2, #68]	; 0x44
 800115a:	4b0d      	ldr	r3, [pc, #52]	; (8001190 <HAL_MspInit+0x4c>)
 800115c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800115e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001162:	607b      	str	r3, [r7, #4]
 8001164:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001166:	2300      	movs	r3, #0
 8001168:	603b      	str	r3, [r7, #0]
 800116a:	4b09      	ldr	r3, [pc, #36]	; (8001190 <HAL_MspInit+0x4c>)
 800116c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800116e:	4a08      	ldr	r2, [pc, #32]	; (8001190 <HAL_MspInit+0x4c>)
 8001170:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001174:	6413      	str	r3, [r2, #64]	; 0x40
 8001176:	4b06      	ldr	r3, [pc, #24]	; (8001190 <HAL_MspInit+0x4c>)
 8001178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800117a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800117e:	603b      	str	r3, [r7, #0]
 8001180:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001182:	2007      	movs	r0, #7
 8001184:	f001 fe8c 	bl	8002ea0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001188:	bf00      	nop
 800118a:	3708      	adds	r7, #8
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}
 8001190:	40023800 	.word	0x40023800

08001194 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b08a      	sub	sp, #40	; 0x28
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800119c:	f107 0314 	add.w	r3, r7, #20
 80011a0:	2200      	movs	r2, #0
 80011a2:	601a      	str	r2, [r3, #0]
 80011a4:	605a      	str	r2, [r3, #4]
 80011a6:	609a      	str	r2, [r3, #8]
 80011a8:	60da      	str	r2, [r3, #12]
 80011aa:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC3)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	4a17      	ldr	r2, [pc, #92]	; (8001210 <HAL_ADC_MspInit+0x7c>)
 80011b2:	4293      	cmp	r3, r2
 80011b4:	d128      	bne.n	8001208 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 80011b6:	2300      	movs	r3, #0
 80011b8:	613b      	str	r3, [r7, #16]
 80011ba:	4b16      	ldr	r3, [pc, #88]	; (8001214 <HAL_ADC_MspInit+0x80>)
 80011bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011be:	4a15      	ldr	r2, [pc, #84]	; (8001214 <HAL_ADC_MspInit+0x80>)
 80011c0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80011c4:	6453      	str	r3, [r2, #68]	; 0x44
 80011c6:	4b13      	ldr	r3, [pc, #76]	; (8001214 <HAL_ADC_MspInit+0x80>)
 80011c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80011ce:	613b      	str	r3, [r7, #16]
 80011d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80011d2:	2300      	movs	r3, #0
 80011d4:	60fb      	str	r3, [r7, #12]
 80011d6:	4b0f      	ldr	r3, [pc, #60]	; (8001214 <HAL_ADC_MspInit+0x80>)
 80011d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011da:	4a0e      	ldr	r2, [pc, #56]	; (8001214 <HAL_ADC_MspInit+0x80>)
 80011dc:	f043 0320 	orr.w	r3, r3, #32
 80011e0:	6313      	str	r3, [r2, #48]	; 0x30
 80011e2:	4b0c      	ldr	r3, [pc, #48]	; (8001214 <HAL_ADC_MspInit+0x80>)
 80011e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011e6:	f003 0320 	and.w	r3, r3, #32
 80011ea:	60fb      	str	r3, [r7, #12]
 80011ec:	68fb      	ldr	r3, [r7, #12]
    /**ADC3 GPIO Configuration
    PF10     ------> ADC3_IN8
    PF9     ------> ADC3_IN7
    */
    GPIO_InitStruct.Pin = Audio_IN_Pin|Potentiometer_Pin;
 80011ee:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80011f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011f4:	2303      	movs	r3, #3
 80011f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f8:	2300      	movs	r3, #0
 80011fa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80011fc:	f107 0314 	add.w	r3, r7, #20
 8001200:	4619      	mov	r1, r3
 8001202:	4805      	ldr	r0, [pc, #20]	; (8001218 <HAL_ADC_MspInit+0x84>)
 8001204:	f001 ff6c 	bl	80030e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8001208:	bf00      	nop
 800120a:	3728      	adds	r7, #40	; 0x28
 800120c:	46bd      	mov	sp, r7
 800120e:	bd80      	pop	{r7, pc}
 8001210:	40012200 	.word	0x40012200
 8001214:	40023800 	.word	0x40023800
 8001218:	40021400 	.word	0x40021400

0800121c <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b08a      	sub	sp, #40	; 0x28
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001224:	f107 0314 	add.w	r3, r7, #20
 8001228:	2200      	movs	r2, #0
 800122a:	601a      	str	r2, [r3, #0]
 800122c:	605a      	str	r2, [r3, #4]
 800122e:	609a      	str	r2, [r3, #8]
 8001230:	60da      	str	r2, [r3, #12]
 8001232:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	4a17      	ldr	r2, [pc, #92]	; (8001298 <HAL_DAC_MspInit+0x7c>)
 800123a:	4293      	cmp	r3, r2
 800123c:	d127      	bne.n	800128e <HAL_DAC_MspInit+0x72>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 800123e:	2300      	movs	r3, #0
 8001240:	613b      	str	r3, [r7, #16]
 8001242:	4b16      	ldr	r3, [pc, #88]	; (800129c <HAL_DAC_MspInit+0x80>)
 8001244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001246:	4a15      	ldr	r2, [pc, #84]	; (800129c <HAL_DAC_MspInit+0x80>)
 8001248:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800124c:	6413      	str	r3, [r2, #64]	; 0x40
 800124e:	4b13      	ldr	r3, [pc, #76]	; (800129c <HAL_DAC_MspInit+0x80>)
 8001250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001252:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001256:	613b      	str	r3, [r7, #16]
 8001258:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800125a:	2300      	movs	r3, #0
 800125c:	60fb      	str	r3, [r7, #12]
 800125e:	4b0f      	ldr	r3, [pc, #60]	; (800129c <HAL_DAC_MspInit+0x80>)
 8001260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001262:	4a0e      	ldr	r2, [pc, #56]	; (800129c <HAL_DAC_MspInit+0x80>)
 8001264:	f043 0301 	orr.w	r3, r3, #1
 8001268:	6313      	str	r3, [r2, #48]	; 0x30
 800126a:	4b0c      	ldr	r3, [pc, #48]	; (800129c <HAL_DAC_MspInit+0x80>)
 800126c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800126e:	f003 0301 	and.w	r3, r3, #1
 8001272:	60fb      	str	r3, [r7, #12]
 8001274:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = Audio_DAC_OUT_Pin;
 8001276:	2310      	movs	r3, #16
 8001278:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800127a:	2303      	movs	r3, #3
 800127c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800127e:	2300      	movs	r3, #0
 8001280:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Audio_DAC_OUT_GPIO_Port, &GPIO_InitStruct);
 8001282:	f107 0314 	add.w	r3, r7, #20
 8001286:	4619      	mov	r1, r3
 8001288:	4805      	ldr	r0, [pc, #20]	; (80012a0 <HAL_DAC_MspInit+0x84>)
 800128a:	f001 ff29 	bl	80030e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 800128e:	bf00      	nop
 8001290:	3728      	adds	r7, #40	; 0x28
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}
 8001296:	bf00      	nop
 8001298:	40007400 	.word	0x40007400
 800129c:	40023800 	.word	0x40023800
 80012a0:	40020000 	.word	0x40020000

080012a4 <HAL_DCMI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdcmi: DCMI handle pointer
* @retval None
*/
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b08c      	sub	sp, #48	; 0x30
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012ac:	f107 031c 	add.w	r3, r7, #28
 80012b0:	2200      	movs	r2, #0
 80012b2:	601a      	str	r2, [r3, #0]
 80012b4:	605a      	str	r2, [r3, #4]
 80012b6:	609a      	str	r2, [r3, #8]
 80012b8:	60da      	str	r2, [r3, #12]
 80012ba:	611a      	str	r2, [r3, #16]
  if(hdcmi->Instance==DCMI)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	4a37      	ldr	r2, [pc, #220]	; (80013a0 <HAL_DCMI_MspInit+0xfc>)
 80012c2:	4293      	cmp	r3, r2
 80012c4:	d168      	bne.n	8001398 <HAL_DCMI_MspInit+0xf4>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 80012c6:	2300      	movs	r3, #0
 80012c8:	61bb      	str	r3, [r7, #24]
 80012ca:	4b36      	ldr	r3, [pc, #216]	; (80013a4 <HAL_DCMI_MspInit+0x100>)
 80012cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012ce:	4a35      	ldr	r2, [pc, #212]	; (80013a4 <HAL_DCMI_MspInit+0x100>)
 80012d0:	f043 0301 	orr.w	r3, r3, #1
 80012d4:	6353      	str	r3, [r2, #52]	; 0x34
 80012d6:	4b33      	ldr	r3, [pc, #204]	; (80013a4 <HAL_DCMI_MspInit+0x100>)
 80012d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012da:	f003 0301 	and.w	r3, r3, #1
 80012de:	61bb      	str	r3, [r7, #24]
 80012e0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOI_CLK_ENABLE();
 80012e2:	2300      	movs	r3, #0
 80012e4:	617b      	str	r3, [r7, #20]
 80012e6:	4b2f      	ldr	r3, [pc, #188]	; (80013a4 <HAL_DCMI_MspInit+0x100>)
 80012e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ea:	4a2e      	ldr	r2, [pc, #184]	; (80013a4 <HAL_DCMI_MspInit+0x100>)
 80012ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012f0:	6313      	str	r3, [r2, #48]	; 0x30
 80012f2:	4b2c      	ldr	r3, [pc, #176]	; (80013a4 <HAL_DCMI_MspInit+0x100>)
 80012f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012fa:	617b      	str	r3, [r7, #20]
 80012fc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80012fe:	2300      	movs	r3, #0
 8001300:	613b      	str	r3, [r7, #16]
 8001302:	4b28      	ldr	r3, [pc, #160]	; (80013a4 <HAL_DCMI_MspInit+0x100>)
 8001304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001306:	4a27      	ldr	r2, [pc, #156]	; (80013a4 <HAL_DCMI_MspInit+0x100>)
 8001308:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800130c:	6313      	str	r3, [r2, #48]	; 0x30
 800130e:	4b25      	ldr	r3, [pc, #148]	; (80013a4 <HAL_DCMI_MspInit+0x100>)
 8001310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001312:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001316:	613b      	str	r3, [r7, #16]
 8001318:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800131a:	2300      	movs	r3, #0
 800131c:	60fb      	str	r3, [r7, #12]
 800131e:	4b21      	ldr	r3, [pc, #132]	; (80013a4 <HAL_DCMI_MspInit+0x100>)
 8001320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001322:	4a20      	ldr	r2, [pc, #128]	; (80013a4 <HAL_DCMI_MspInit+0x100>)
 8001324:	f043 0301 	orr.w	r3, r3, #1
 8001328:	6313      	str	r3, [r2, #48]	; 0x30
 800132a:	4b1e      	ldr	r3, [pc, #120]	; (80013a4 <HAL_DCMI_MspInit+0x100>)
 800132c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800132e:	f003 0301 	and.w	r3, r3, #1
 8001332:	60fb      	str	r3, [r7, #12]
 8001334:	68fb      	ldr	r3, [r7, #12]
    PH10     ------> DCMI_D1
    PH8     ------> DCMI_HSYNC
    PH9     ------> DCMI_D0
    PA6     ------> DCMI_PIXCLK
    */
    GPIO_InitStruct.Pin = DCMI_D7_Pin|DCMI_D6_Pin|DCMI_VSYNC_Pin|DCMI_D5_Pin;
 8001336:	23f0      	movs	r3, #240	; 0xf0
 8001338:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800133a:	2302      	movs	r3, #2
 800133c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800133e:	2300      	movs	r3, #0
 8001340:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001342:	2300      	movs	r3, #0
 8001344:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001346:	230d      	movs	r3, #13
 8001348:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800134a:	f107 031c 	add.w	r3, r7, #28
 800134e:	4619      	mov	r1, r3
 8001350:	4815      	ldr	r0, [pc, #84]	; (80013a8 <HAL_DCMI_MspInit+0x104>)
 8001352:	f001 fec5 	bl	80030e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D2_Pin|DCMI_D1_Pin
 8001356:	f44f 43be 	mov.w	r3, #24320	; 0x5f00
 800135a:	61fb      	str	r3, [r7, #28]
                          |DCMI_HSYNC_Pin|DCMI_D0_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800135c:	2302      	movs	r3, #2
 800135e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001360:	2300      	movs	r3, #0
 8001362:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001364:	2300      	movs	r3, #0
 8001366:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001368:	230d      	movs	r3, #13
 800136a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800136c:	f107 031c 	add.w	r3, r7, #28
 8001370:	4619      	mov	r1, r3
 8001372:	480e      	ldr	r0, [pc, #56]	; (80013ac <HAL_DCMI_MspInit+0x108>)
 8001374:	f001 feb4 	bl	80030e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_PIXCK_Pin;
 8001378:	2340      	movs	r3, #64	; 0x40
 800137a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800137c:	2302      	movs	r3, #2
 800137e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001380:	2300      	movs	r3, #0
 8001382:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001384:	2300      	movs	r3, #0
 8001386:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001388:	230d      	movs	r3, #13
 800138a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DCMI_PIXCK_GPIO_Port, &GPIO_InitStruct);
 800138c:	f107 031c 	add.w	r3, r7, #28
 8001390:	4619      	mov	r1, r3
 8001392:	4807      	ldr	r0, [pc, #28]	; (80013b0 <HAL_DCMI_MspInit+0x10c>)
 8001394:	f001 fea4 	bl	80030e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }

}
 8001398:	bf00      	nop
 800139a:	3730      	adds	r7, #48	; 0x30
 800139c:	46bd      	mov	sp, r7
 800139e:	bd80      	pop	{r7, pc}
 80013a0:	50050000 	.word	0x50050000
 80013a4:	40023800 	.word	0x40023800
 80013a8:	40022000 	.word	0x40022000
 80013ac:	40021c00 	.word	0x40021c00
 80013b0:	40020000 	.word	0x40020000

080013b4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b08a      	sub	sp, #40	; 0x28
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013bc:	f107 0314 	add.w	r3, r7, #20
 80013c0:	2200      	movs	r2, #0
 80013c2:	601a      	str	r2, [r3, #0]
 80013c4:	605a      	str	r2, [r3, #4]
 80013c6:	609a      	str	r2, [r3, #8]
 80013c8:	60da      	str	r2, [r3, #12]
 80013ca:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	4a19      	ldr	r2, [pc, #100]	; (8001438 <HAL_I2C_MspInit+0x84>)
 80013d2:	4293      	cmp	r3, r2
 80013d4:	d12c      	bne.n	8001430 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013d6:	2300      	movs	r3, #0
 80013d8:	613b      	str	r3, [r7, #16]
 80013da:	4b18      	ldr	r3, [pc, #96]	; (800143c <HAL_I2C_MspInit+0x88>)
 80013dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013de:	4a17      	ldr	r2, [pc, #92]	; (800143c <HAL_I2C_MspInit+0x88>)
 80013e0:	f043 0302 	orr.w	r3, r3, #2
 80013e4:	6313      	str	r3, [r2, #48]	; 0x30
 80013e6:	4b15      	ldr	r3, [pc, #84]	; (800143c <HAL_I2C_MspInit+0x88>)
 80013e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ea:	f003 0302 	and.w	r3, r3, #2
 80013ee:	613b      	str	r3, [r7, #16]
 80013f0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80013f2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80013f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80013f8:	2312      	movs	r3, #18
 80013fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013fc:	2300      	movs	r3, #0
 80013fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001400:	2303      	movs	r3, #3
 8001402:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001404:	2304      	movs	r3, #4
 8001406:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001408:	f107 0314 	add.w	r3, r7, #20
 800140c:	4619      	mov	r1, r3
 800140e:	480c      	ldr	r0, [pc, #48]	; (8001440 <HAL_I2C_MspInit+0x8c>)
 8001410:	f001 fe66 	bl	80030e0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001414:	2300      	movs	r3, #0
 8001416:	60fb      	str	r3, [r7, #12]
 8001418:	4b08      	ldr	r3, [pc, #32]	; (800143c <HAL_I2C_MspInit+0x88>)
 800141a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800141c:	4a07      	ldr	r2, [pc, #28]	; (800143c <HAL_I2C_MspInit+0x88>)
 800141e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001422:	6413      	str	r3, [r2, #64]	; 0x40
 8001424:	4b05      	ldr	r3, [pc, #20]	; (800143c <HAL_I2C_MspInit+0x88>)
 8001426:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001428:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800142c:	60fb      	str	r3, [r7, #12]
 800142e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001430:	bf00      	nop
 8001432:	3728      	adds	r7, #40	; 0x28
 8001434:	46bd      	mov	sp, r7
 8001436:	bd80      	pop	{r7, pc}
 8001438:	40005400 	.word	0x40005400
 800143c:	40023800 	.word	0x40023800
 8001440:	40020400 	.word	0x40020400

08001444 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b08a      	sub	sp, #40	; 0x28
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800144c:	f107 0314 	add.w	r3, r7, #20
 8001450:	2200      	movs	r2, #0
 8001452:	601a      	str	r2, [r3, #0]
 8001454:	605a      	str	r2, [r3, #4]
 8001456:	609a      	str	r2, [r3, #8]
 8001458:	60da      	str	r2, [r3, #12]
 800145a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	4a19      	ldr	r2, [pc, #100]	; (80014c8 <HAL_TIM_Encoder_MspInit+0x84>)
 8001462:	4293      	cmp	r3, r2
 8001464:	d12b      	bne.n	80014be <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001466:	2300      	movs	r3, #0
 8001468:	613b      	str	r3, [r7, #16]
 800146a:	4b18      	ldr	r3, [pc, #96]	; (80014cc <HAL_TIM_Encoder_MspInit+0x88>)
 800146c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800146e:	4a17      	ldr	r2, [pc, #92]	; (80014cc <HAL_TIM_Encoder_MspInit+0x88>)
 8001470:	f043 0302 	orr.w	r3, r3, #2
 8001474:	6413      	str	r3, [r2, #64]	; 0x40
 8001476:	4b15      	ldr	r3, [pc, #84]	; (80014cc <HAL_TIM_Encoder_MspInit+0x88>)
 8001478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800147a:	f003 0302 	and.w	r3, r3, #2
 800147e:	613b      	str	r3, [r7, #16]
 8001480:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001482:	2300      	movs	r3, #0
 8001484:	60fb      	str	r3, [r7, #12]
 8001486:	4b11      	ldr	r3, [pc, #68]	; (80014cc <HAL_TIM_Encoder_MspInit+0x88>)
 8001488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800148a:	4a10      	ldr	r2, [pc, #64]	; (80014cc <HAL_TIM_Encoder_MspInit+0x88>)
 800148c:	f043 0302 	orr.w	r3, r3, #2
 8001490:	6313      	str	r3, [r2, #48]	; 0x30
 8001492:	4b0e      	ldr	r3, [pc, #56]	; (80014cc <HAL_TIM_Encoder_MspInit+0x88>)
 8001494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001496:	f003 0302 	and.w	r3, r3, #2
 800149a:	60fb      	str	r3, [r7, #12]
 800149c:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PB5     ------> TIM3_CH2
    PB4     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4;
 800149e:	2330      	movs	r3, #48	; 0x30
 80014a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014a2:	2302      	movs	r3, #2
 80014a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a6:	2300      	movs	r3, #0
 80014a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014aa:	2300      	movs	r3, #0
 80014ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80014ae:	2302      	movs	r3, #2
 80014b0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014b2:	f107 0314 	add.w	r3, r7, #20
 80014b6:	4619      	mov	r1, r3
 80014b8:	4805      	ldr	r0, [pc, #20]	; (80014d0 <HAL_TIM_Encoder_MspInit+0x8c>)
 80014ba:	f001 fe11 	bl	80030e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80014be:	bf00      	nop
 80014c0:	3728      	adds	r7, #40	; 0x28
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	bf00      	nop
 80014c8:	40000400 	.word	0x40000400
 80014cc:	40023800 	.word	0x40023800
 80014d0:	40020400 	.word	0x40020400

080014d4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b08a      	sub	sp, #40	; 0x28
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014dc:	f107 0314 	add.w	r3, r7, #20
 80014e0:	2200      	movs	r2, #0
 80014e2:	601a      	str	r2, [r3, #0]
 80014e4:	605a      	str	r2, [r3, #4]
 80014e6:	609a      	str	r2, [r3, #8]
 80014e8:	60da      	str	r2, [r3, #12]
 80014ea:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	4a19      	ldr	r2, [pc, #100]	; (8001558 <HAL_UART_MspInit+0x84>)
 80014f2:	4293      	cmp	r3, r2
 80014f4:	d12c      	bne.n	8001550 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80014f6:	2300      	movs	r3, #0
 80014f8:	613b      	str	r3, [r7, #16]
 80014fa:	4b18      	ldr	r3, [pc, #96]	; (800155c <HAL_UART_MspInit+0x88>)
 80014fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014fe:	4a17      	ldr	r2, [pc, #92]	; (800155c <HAL_UART_MspInit+0x88>)
 8001500:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001504:	6413      	str	r3, [r2, #64]	; 0x40
 8001506:	4b15      	ldr	r3, [pc, #84]	; (800155c <HAL_UART_MspInit+0x88>)
 8001508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800150a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800150e:	613b      	str	r3, [r7, #16]
 8001510:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001512:	2300      	movs	r3, #0
 8001514:	60fb      	str	r3, [r7, #12]
 8001516:	4b11      	ldr	r3, [pc, #68]	; (800155c <HAL_UART_MspInit+0x88>)
 8001518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800151a:	4a10      	ldr	r2, [pc, #64]	; (800155c <HAL_UART_MspInit+0x88>)
 800151c:	f043 0304 	orr.w	r3, r3, #4
 8001520:	6313      	str	r3, [r2, #48]	; 0x30
 8001522:	4b0e      	ldr	r3, [pc, #56]	; (800155c <HAL_UART_MspInit+0x88>)
 8001524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001526:	f003 0304 	and.w	r3, r3, #4
 800152a:	60fb      	str	r3, [r7, #12]
 800152c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PC11     ------> USART3_RX
    PC10     ------> USART3_TX
    */
    GPIO_InitStruct.Pin = MicroSDCard_D3_Pin|MicroSDCard_D2_Pin;
 800152e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001532:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001534:	2302      	movs	r3, #2
 8001536:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001538:	2300      	movs	r3, #0
 800153a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800153c:	2300      	movs	r3, #0
 800153e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001540:	2307      	movs	r3, #7
 8001542:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001544:	f107 0314 	add.w	r3, r7, #20
 8001548:	4619      	mov	r1, r3
 800154a:	4805      	ldr	r0, [pc, #20]	; (8001560 <HAL_UART_MspInit+0x8c>)
 800154c:	f001 fdc8 	bl	80030e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001550:	bf00      	nop
 8001552:	3728      	adds	r7, #40	; 0x28
 8001554:	46bd      	mov	sp, r7
 8001556:	bd80      	pop	{r7, pc}
 8001558:	40004800 	.word	0x40004800
 800155c:	40023800 	.word	0x40023800
 8001560:	40020800 	.word	0x40020800

08001564 <HAL_FSMC_MspInit>:

}

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8001564:	b580      	push	{r7, lr}
 8001566:	b086      	sub	sp, #24
 8001568:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 800156a:	1d3b      	adds	r3, r7, #4
 800156c:	2200      	movs	r2, #0
 800156e:	601a      	str	r2, [r3, #0]
 8001570:	605a      	str	r2, [r3, #4]
 8001572:	609a      	str	r2, [r3, #8]
 8001574:	60da      	str	r2, [r3, #12]
 8001576:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 8001578:	4b34      	ldr	r3, [pc, #208]	; (800164c <HAL_FSMC_MspInit+0xe8>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	2b00      	cmp	r3, #0
 800157e:	d160      	bne.n	8001642 <HAL_FSMC_MspInit+0xde>
    return;
  }
  FSMC_Initialized = 1;
 8001580:	4b32      	ldr	r3, [pc, #200]	; (800164c <HAL_FSMC_MspInit+0xe8>)
 8001582:	2201      	movs	r2, #1
 8001584:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 8001586:	2300      	movs	r3, #0
 8001588:	603b      	str	r3, [r7, #0]
 800158a:	4b31      	ldr	r3, [pc, #196]	; (8001650 <HAL_FSMC_MspInit+0xec>)
 800158c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800158e:	4a30      	ldr	r2, [pc, #192]	; (8001650 <HAL_FSMC_MspInit+0xec>)
 8001590:	f043 0301 	orr.w	r3, r3, #1
 8001594:	6393      	str	r3, [r2, #56]	; 0x38
 8001596:	4b2e      	ldr	r3, [pc, #184]	; (8001650 <HAL_FSMC_MspInit+0xec>)
 8001598:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800159a:	f003 0301 	and.w	r3, r3, #1
 800159e:	603b      	str	r3, [r7, #0]
 80015a0:	683b      	ldr	r3, [r7, #0]
  PE7   ------> FSMC_D4
  PE10   ------> FSMC_D7
  PE12   ------> FSMC_D9
  PE15   ------> FSMC_D12
  */
  GPIO_InitStruct.Pin = A19_Pin|FSMC_NBL1_Pin|FSMC_NBL0_Pin|A20_Pin
 80015a2:	f64f 739b 	movw	r3, #65435	; 0xff9b
 80015a6:	607b      	str	r3, [r7, #4]
                          |D10_Pin|D5_Pin|D6_Pin|D8_Pin
                          |D11_Pin|D4_Pin|D7_Pin|D9_Pin
                          |D12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015a8:	2302      	movs	r3, #2
 80015aa:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ac:	2300      	movs	r3, #0
 80015ae:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015b0:	2303      	movs	r3, #3
 80015b2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 80015b4:	230c      	movs	r3, #12
 80015b6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80015b8:	1d3b      	adds	r3, r7, #4
 80015ba:	4619      	mov	r1, r3
 80015bc:	4825      	ldr	r0, [pc, #148]	; (8001654 <HAL_FSMC_MspInit+0xf0>)
 80015be:	f001 fd8f 	bl	80030e0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FSMC_NE1_Pin|FSMC_NWAIT_Pin|D2_Pin|FSMC_NWE_Pin
 80015c2:	f64f 73fb 	movw	r3, #65531	; 0xfffb
 80015c6:	607b      	str	r3, [r7, #4]
                          |D3_Pin|FSMC_NOE_Pin|FSMC_CLK_Pin|D1_Pin
                          |D0_Pin|A18_Pin|A17_Pin|A16_Pin
                          |D15_Pin|D14_Pin|D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015c8:	2302      	movs	r3, #2
 80015ca:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015cc:	2300      	movs	r3, #0
 80015ce:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015d0:	2303      	movs	r3, #3
 80015d2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 80015d4:	230c      	movs	r3, #12
 80015d6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015d8:	1d3b      	adds	r3, r7, #4
 80015da:	4619      	mov	r1, r3
 80015dc:	481e      	ldr	r0, [pc, #120]	; (8001658 <HAL_FSMC_MspInit+0xf4>)
 80015de:	f001 fd7f 	bl	80030e0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FSMC_NL_Pin;
 80015e2:	2380      	movs	r3, #128	; 0x80
 80015e4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015e6:	2302      	movs	r3, #2
 80015e8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ea:	2300      	movs	r3, #0
 80015ec:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015ee:	2303      	movs	r3, #3
 80015f0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 80015f2:	230c      	movs	r3, #12
 80015f4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(FSMC_NL_GPIO_Port, &GPIO_InitStruct);
 80015f6:	1d3b      	adds	r3, r7, #4
 80015f8:	4619      	mov	r1, r3
 80015fa:	4818      	ldr	r0, [pc, #96]	; (800165c <HAL_FSMC_MspInit+0xf8>)
 80015fc:	f001 fd70 	bl	80030e0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FSMC_NE3_Pin|FSMC_NE2_Pin|A15_Pin|A14_Pin
 8001600:	f240 633f 	movw	r3, #1599	; 0x63f
 8001604:	607b      	str	r3, [r7, #4]
                          |A13_Pin|A12_Pin|A11_Pin|A10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001606:	2302      	movs	r3, #2
 8001608:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800160a:	2300      	movs	r3, #0
 800160c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800160e:	2303      	movs	r3, #3
 8001610:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8001612:	230c      	movs	r3, #12
 8001614:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001616:	1d3b      	adds	r3, r7, #4
 8001618:	4619      	mov	r1, r3
 800161a:	4811      	ldr	r0, [pc, #68]	; (8001660 <HAL_FSMC_MspInit+0xfc>)
 800161c:	f001 fd60 	bl	80030e0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = A0_Pin|A2_Pin|A1_Pin|A3_Pin
 8001620:	f24f 033f 	movw	r3, #61503	; 0xf03f
 8001624:	607b      	str	r3, [r7, #4]
                          |A4_Pin|A5_Pin|A7_Pin|A6_Pin
                          |A9_Pin|A8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001626:	2302      	movs	r3, #2
 8001628:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800162a:	2300      	movs	r3, #0
 800162c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800162e:	2303      	movs	r3, #3
 8001630:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8001632:	230c      	movs	r3, #12
 8001634:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001636:	1d3b      	adds	r3, r7, #4
 8001638:	4619      	mov	r1, r3
 800163a:	480a      	ldr	r0, [pc, #40]	; (8001664 <HAL_FSMC_MspInit+0x100>)
 800163c:	f001 fd50 	bl	80030e0 <HAL_GPIO_Init>
 8001640:	e000      	b.n	8001644 <HAL_FSMC_MspInit+0xe0>
    return;
 8001642:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8001644:	3718      	adds	r7, #24
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}
 800164a:	bf00      	nop
 800164c:	200003fc 	.word	0x200003fc
 8001650:	40023800 	.word	0x40023800
 8001654:	40021000 	.word	0x40021000
 8001658:	40020c00 	.word	0x40020c00
 800165c:	40020400 	.word	0x40020400
 8001660:	40021800 	.word	0x40021800
 8001664:	40021400 	.word	0x40021400

08001668 <HAL_NOR_MspInit>:

void HAL_NOR_MspInit(NOR_HandleTypeDef* hnor){
 8001668:	b580      	push	{r7, lr}
 800166a:	b082      	sub	sp, #8
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN NOR_MspInit 0 */

  /* USER CODE END NOR_MspInit 0 */
  HAL_FSMC_MspInit();
 8001670:	f7ff ff78 	bl	8001564 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN NOR_MspInit 1 */

  /* USER CODE END NOR_MspInit 1 */
}
 8001674:	bf00      	nop
 8001676:	3708      	adds	r7, #8
 8001678:	46bd      	mov	sp, r7
 800167a:	bd80      	pop	{r7, pc}

0800167c <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 800167c:	b580      	push	{r7, lr}
 800167e:	b082      	sub	sp, #8
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8001684:	f7ff ff6e 	bl	8001564 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8001688:	bf00      	nop
 800168a:	3708      	adds	r7, #8
 800168c:	46bd      	mov	sp, r7
 800168e:	bd80      	pop	{r7, pc}

08001690 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001690:	b480      	push	{r7}
 8001692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001694:	e7fe      	b.n	8001694 <NMI_Handler+0x4>

08001696 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001696:	b480      	push	{r7}
 8001698:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800169a:	e7fe      	b.n	800169a <HardFault_Handler+0x4>

0800169c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800169c:	b480      	push	{r7}
 800169e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016a0:	e7fe      	b.n	80016a0 <MemManage_Handler+0x4>

080016a2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016a2:	b480      	push	{r7}
 80016a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016a6:	e7fe      	b.n	80016a6 <BusFault_Handler+0x4>

080016a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016a8:	b480      	push	{r7}
 80016aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016ac:	e7fe      	b.n	80016ac <UsageFault_Handler+0x4>

080016ae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016ae:	b480      	push	{r7}
 80016b0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016b2:	bf00      	nop
 80016b4:	46bd      	mov	sp, r7
 80016b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ba:	4770      	bx	lr

080016bc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016bc:	b480      	push	{r7}
 80016be:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016c0:	bf00      	nop
 80016c2:	46bd      	mov	sp, r7
 80016c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c8:	4770      	bx	lr

080016ca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016ca:	b480      	push	{r7}
 80016cc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016ce:	bf00      	nop
 80016d0:	46bd      	mov	sp, r7
 80016d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d6:	4770      	bx	lr

080016d8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016dc:	f001 f86a 	bl	80027b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016e0:	bf00      	nop
 80016e2:	bd80      	pop	{r7, pc}

080016e4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80016e8:	4802      	ldr	r0, [pc, #8]	; (80016f4 <OTG_FS_IRQHandler+0x10>)
 80016ea:	f002 fa67 	bl	8003bbc <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80016ee:	bf00      	nop
 80016f0:	bd80      	pop	{r7, pc}
 80016f2:	bf00      	nop
 80016f4:	20000b7c 	.word	0x20000b7c

080016f8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80016f8:	b480      	push	{r7}
 80016fa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80016fc:	4b06      	ldr	r3, [pc, #24]	; (8001718 <SystemInit+0x20>)
 80016fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001702:	4a05      	ldr	r2, [pc, #20]	; (8001718 <SystemInit+0x20>)
 8001704:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001708:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800170c:	bf00      	nop
 800170e:	46bd      	mov	sp, r7
 8001710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001714:	4770      	bx	lr
 8001716:	bf00      	nop
 8001718:	e000ed00 	.word	0xe000ed00

0800171c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800171c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001754 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001720:	480d      	ldr	r0, [pc, #52]	; (8001758 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001722:	490e      	ldr	r1, [pc, #56]	; (800175c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001724:	4a0e      	ldr	r2, [pc, #56]	; (8001760 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001726:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001728:	e002      	b.n	8001730 <LoopCopyDataInit>

0800172a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800172a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800172c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800172e:	3304      	adds	r3, #4

08001730 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001730:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001732:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001734:	d3f9      	bcc.n	800172a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001736:	4a0b      	ldr	r2, [pc, #44]	; (8001764 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001738:	4c0b      	ldr	r4, [pc, #44]	; (8001768 <LoopFillZerobss+0x26>)
  movs r3, #0
 800173a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800173c:	e001      	b.n	8001742 <LoopFillZerobss>

0800173e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800173e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001740:	3204      	adds	r2, #4

08001742 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001742:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001744:	d3fb      	bcc.n	800173e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001746:	f7ff ffd7 	bl	80016f8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800174a:	f008 fc5f 	bl	800a00c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800174e:	f7fe febd 	bl	80004cc <main>
  bx  lr    
 8001752:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001754:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001758:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800175c:	2000016c 	.word	0x2000016c
  ldr r2, =_sidata
 8001760:	0800bbe0 	.word	0x0800bbe0
  ldr r2, =_sbss
 8001764:	2000016c 	.word	0x2000016c
  ldr r4, =_ebss
 8001768:	2000109c 	.word	0x2000109c

0800176c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800176c:	e7fe      	b.n	800176c <ADC_IRQHandler>

0800176e <ili9325_Init>:
  * @brief  Initialize the ILI9325 LCD Component.
  * @param  None
  * @retval None
  */
void ili9325_Init(void)
{  
 800176e:	b580      	push	{r7, lr}
 8001770:	af00      	add	r7, sp, #0
  /* Initialize ILI9325 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 8001772:	f000 fd2b 	bl	80021cc <LCD_IO_Init>
  
  /* Start Initial Sequence --------------------------------------------------*/
  ili9325_WriteReg(LCD_REG_0, 0x0001); /* Start internal OSC. */
 8001776:	2101      	movs	r1, #1
 8001778:	2000      	movs	r0, #0
 800177a:	f000 f9a1 	bl	8001ac0 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_1, 0x0100); /* Set SS and SM bit */
 800177e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001782:	2001      	movs	r0, #1
 8001784:	f000 f99c 	bl	8001ac0 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_2, 0x0700); /* Set 1 line inversion */
 8001788:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 800178c:	2002      	movs	r0, #2
 800178e:	f000 f997 	bl	8001ac0 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_3, 0x1018); /* Set GRAM write direction and BGR=1. */
 8001792:	f241 0118 	movw	r1, #4120	; 0x1018
 8001796:	2003      	movs	r0, #3
 8001798:	f000 f992 	bl	8001ac0 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_4, 0x0000); /* Resize register */
 800179c:	2100      	movs	r1, #0
 800179e:	2004      	movs	r0, #4
 80017a0:	f000 f98e 	bl	8001ac0 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_8, 0x0202); /* Set the back porch and front porch */
 80017a4:	f240 2102 	movw	r1, #514	; 0x202
 80017a8:	2008      	movs	r0, #8
 80017aa:	f000 f989 	bl	8001ac0 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_9, 0x0000); /* Set non-display area refresh cycle ISC[3:0] */
 80017ae:	2100      	movs	r1, #0
 80017b0:	2009      	movs	r0, #9
 80017b2:	f000 f985 	bl	8001ac0 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_10, 0x0000); /* FMARK function */
 80017b6:	2100      	movs	r1, #0
 80017b8:	200a      	movs	r0, #10
 80017ba:	f000 f981 	bl	8001ac0 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_12, 0x0000); /* RGB interface setting */
 80017be:	2100      	movs	r1, #0
 80017c0:	200c      	movs	r0, #12
 80017c2:	f000 f97d 	bl	8001ac0 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_13, 0x0000); /* Frame marker Position */
 80017c6:	2100      	movs	r1, #0
 80017c8:	200d      	movs	r0, #13
 80017ca:	f000 f979 	bl	8001ac0 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_15, 0x0000); /* RGB interface polarity */
 80017ce:	2100      	movs	r1, #0
 80017d0:	200f      	movs	r0, #15
 80017d2:	f000 f975 	bl	8001ac0 <ili9325_WriteReg>
  
  /* Power On sequence -------------------------------------------------------*/
  ili9325_WriteReg(LCD_REG_16, 0x0000); /* SAP, BT[3:0], AP, DSTB, SLP, STB */
 80017d6:	2100      	movs	r1, #0
 80017d8:	2010      	movs	r0, #16
 80017da:	f000 f971 	bl	8001ac0 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_17, 0x0000); /* DC1[2:0], DC0[2:0], VC[2:0] */
 80017de:	2100      	movs	r1, #0
 80017e0:	2011      	movs	r0, #17
 80017e2:	f000 f96d 	bl	8001ac0 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_18, 0x0000); /* VREG1OUT voltage */
 80017e6:	2100      	movs	r1, #0
 80017e8:	2012      	movs	r0, #18
 80017ea:	f000 f969 	bl	8001ac0 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_19, 0x0000); /* VDV[4:0] for VCOM amplitude */
 80017ee:	2100      	movs	r1, #0
 80017f0:	2013      	movs	r0, #19
 80017f2:	f000 f965 	bl	8001ac0 <ili9325_WriteReg>
  
  ili9325_WriteReg(LCD_REG_16, 0x17B0); /* SAP, BT[3:0], AP, DSTB, SLP, STB */
 80017f6:	f241 71b0 	movw	r1, #6064	; 0x17b0
 80017fa:	2010      	movs	r0, #16
 80017fc:	f000 f960 	bl	8001ac0 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_17, 0x0137); /* DC1[2:0], DC0[2:0], VC[2:0] */
 8001800:	f240 1137 	movw	r1, #311	; 0x137
 8001804:	2011      	movs	r0, #17
 8001806:	f000 f95b 	bl	8001ac0 <ili9325_WriteReg>
  
  ili9325_WriteReg(LCD_REG_18, 0x0139); /* VREG1OUT voltage */
 800180a:	f240 1139 	movw	r1, #313	; 0x139
 800180e:	2012      	movs	r0, #18
 8001810:	f000 f956 	bl	8001ac0 <ili9325_WriteReg>
  
  ili9325_WriteReg(LCD_REG_19, 0x1d00); /* VDV[4:0] for VCOM amplitude */
 8001814:	f44f 51e8 	mov.w	r1, #7424	; 0x1d00
 8001818:	2013      	movs	r0, #19
 800181a:	f000 f951 	bl	8001ac0 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_41, 0x0013); /* VCM[4:0] for VCOMH */
 800181e:	2113      	movs	r1, #19
 8001820:	2029      	movs	r0, #41	; 0x29
 8001822:	f000 f94d 	bl	8001ac0 <ili9325_WriteReg>
  
  ili9325_WriteReg(LCD_REG_32, 0x0000); /* GRAM horizontal Address */
 8001826:	2100      	movs	r1, #0
 8001828:	2020      	movs	r0, #32
 800182a:	f000 f949 	bl	8001ac0 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_33, 0x0000); /* GRAM Vertical Address */
 800182e:	2100      	movs	r1, #0
 8001830:	2021      	movs	r0, #33	; 0x21
 8001832:	f000 f945 	bl	8001ac0 <ili9325_WriteReg>
  
  /* Adjust the Gamma Curve (ILI9325) ----------------------------------------*/
  ili9325_WriteReg(LCD_REG_48, 0x0007);
 8001836:	2107      	movs	r1, #7
 8001838:	2030      	movs	r0, #48	; 0x30
 800183a:	f000 f941 	bl	8001ac0 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_49, 0x0302);
 800183e:	f240 3102 	movw	r1, #770	; 0x302
 8001842:	2031      	movs	r0, #49	; 0x31
 8001844:	f000 f93c 	bl	8001ac0 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_50, 0x0105);
 8001848:	f240 1105 	movw	r1, #261	; 0x105
 800184c:	2032      	movs	r0, #50	; 0x32
 800184e:	f000 f937 	bl	8001ac0 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_53, 0x0206);
 8001852:	f240 2106 	movw	r1, #518	; 0x206
 8001856:	2035      	movs	r0, #53	; 0x35
 8001858:	f000 f932 	bl	8001ac0 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_54, 0x0808);
 800185c:	f640 0108 	movw	r1, #2056	; 0x808
 8001860:	2036      	movs	r0, #54	; 0x36
 8001862:	f000 f92d 	bl	8001ac0 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_55, 0x0206);
 8001866:	f240 2106 	movw	r1, #518	; 0x206
 800186a:	2037      	movs	r0, #55	; 0x37
 800186c:	f000 f928 	bl	8001ac0 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_56, 0x0504);
 8001870:	f240 5104 	movw	r1, #1284	; 0x504
 8001874:	2038      	movs	r0, #56	; 0x38
 8001876:	f000 f923 	bl	8001ac0 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_57, 0x0007);
 800187a:	2107      	movs	r1, #7
 800187c:	2039      	movs	r0, #57	; 0x39
 800187e:	f000 f91f 	bl	8001ac0 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_60, 0x0105);
 8001882:	f240 1105 	movw	r1, #261	; 0x105
 8001886:	203c      	movs	r0, #60	; 0x3c
 8001888:	f000 f91a 	bl	8001ac0 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_61, 0x0808);
 800188c:	f640 0108 	movw	r1, #2056	; 0x808
 8001890:	203d      	movs	r0, #61	; 0x3d
 8001892:	f000 f915 	bl	8001ac0 <ili9325_WriteReg>
  
  /* Set GRAM area -----------------------------------------------------------*/
  ili9325_WriteReg(LCD_REG_80, 0x0000); /* Horizontal GRAM Start Address */
 8001896:	2100      	movs	r1, #0
 8001898:	2050      	movs	r0, #80	; 0x50
 800189a:	f000 f911 	bl	8001ac0 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_81, 0x00EF); /* Horizontal GRAM End Address */
 800189e:	21ef      	movs	r1, #239	; 0xef
 80018a0:	2051      	movs	r0, #81	; 0x51
 80018a2:	f000 f90d 	bl	8001ac0 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_82, 0x0000); /* Vertical GRAM Start Address */
 80018a6:	2100      	movs	r1, #0
 80018a8:	2052      	movs	r0, #82	; 0x52
 80018aa:	f000 f909 	bl	8001ac0 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_83, 0x013F); /* Vertical GRAM End Address */
 80018ae:	f240 113f 	movw	r1, #319	; 0x13f
 80018b2:	2053      	movs	r0, #83	; 0x53
 80018b4:	f000 f904 	bl	8001ac0 <ili9325_WriteReg>
  
  ili9325_WriteReg(LCD_REG_96,  0xA700); /* Gate Scan Line(GS=1, scan direction is G320~G1) */
 80018b8:	f44f 4127 	mov.w	r1, #42752	; 0xa700
 80018bc:	2060      	movs	r0, #96	; 0x60
 80018be:	f000 f8ff 	bl	8001ac0 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_97,  0x0001); /* NDL,VLE, REV */
 80018c2:	2101      	movs	r1, #1
 80018c4:	2061      	movs	r0, #97	; 0x61
 80018c6:	f000 f8fb 	bl	8001ac0 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_106, 0x0000); /* set scrolling line */
 80018ca:	2100      	movs	r1, #0
 80018cc:	206a      	movs	r0, #106	; 0x6a
 80018ce:	f000 f8f7 	bl	8001ac0 <ili9325_WriteReg>
  
  /* Partial Display Control -------------------------------------------------*/
  ili9325_WriteReg(LCD_REG_128, 0x0000);
 80018d2:	2100      	movs	r1, #0
 80018d4:	2080      	movs	r0, #128	; 0x80
 80018d6:	f000 f8f3 	bl	8001ac0 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_129, 0x0000);
 80018da:	2100      	movs	r1, #0
 80018dc:	2081      	movs	r0, #129	; 0x81
 80018de:	f000 f8ef 	bl	8001ac0 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_130, 0x0000);
 80018e2:	2100      	movs	r1, #0
 80018e4:	2082      	movs	r0, #130	; 0x82
 80018e6:	f000 f8eb 	bl	8001ac0 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_131, 0x0000);
 80018ea:	2100      	movs	r1, #0
 80018ec:	2083      	movs	r0, #131	; 0x83
 80018ee:	f000 f8e7 	bl	8001ac0 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_132, 0x0000);
 80018f2:	2100      	movs	r1, #0
 80018f4:	2084      	movs	r0, #132	; 0x84
 80018f6:	f000 f8e3 	bl	8001ac0 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_133, 0x0000);
 80018fa:	2100      	movs	r1, #0
 80018fc:	2085      	movs	r0, #133	; 0x85
 80018fe:	f000 f8df 	bl	8001ac0 <ili9325_WriteReg>
  
  /* Panel Control -----------------------------------------------------------*/
  ili9325_WriteReg(LCD_REG_144, 0x0010);
 8001902:	2110      	movs	r1, #16
 8001904:	2090      	movs	r0, #144	; 0x90
 8001906:	f000 f8db 	bl	8001ac0 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_146, 0x0000);
 800190a:	2100      	movs	r1, #0
 800190c:	2092      	movs	r0, #146	; 0x92
 800190e:	f000 f8d7 	bl	8001ac0 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_147, 0x0003);
 8001912:	2103      	movs	r1, #3
 8001914:	2093      	movs	r0, #147	; 0x93
 8001916:	f000 f8d3 	bl	8001ac0 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_149, 0x0110);
 800191a:	f44f 7188 	mov.w	r1, #272	; 0x110
 800191e:	2095      	movs	r0, #149	; 0x95
 8001920:	f000 f8ce 	bl	8001ac0 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_151, 0x0000);
 8001924:	2100      	movs	r1, #0
 8001926:	2097      	movs	r0, #151	; 0x97
 8001928:	f000 f8ca 	bl	8001ac0 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_152, 0x0000);
 800192c:	2100      	movs	r1, #0
 800192e:	2098      	movs	r0, #152	; 0x98
 8001930:	f000 f8c6 	bl	8001ac0 <ili9325_WriteReg>
  
  /* set GRAM write direction and BGR = 1 */
  /* I/D=00 (Horizontal : increment, Vertical : decrement) */
  /* AM=1 (address is updated in vertical writing direction) */
  ili9325_WriteReg(LCD_REG_3, 0x1018);
 8001934:	f241 0118 	movw	r1, #4120	; 0x1018
 8001938:	2003      	movs	r0, #3
 800193a:	f000 f8c1 	bl	8001ac0 <ili9325_WriteReg>
  
  /* 262K color and display ON */ 
  ili9325_WriteReg(LCD_REG_7, 0x0173);    
 800193e:	f240 1173 	movw	r1, #371	; 0x173
 8001942:	2007      	movs	r0, #7
 8001944:	f000 f8bc 	bl	8001ac0 <ili9325_WriteReg>
  
  /* Set the Cursor */ 
  ili9325_SetCursor(0, 0);
 8001948:	2100      	movs	r1, #0
 800194a:	2000      	movs	r0, #0
 800194c:	f000 f86d 	bl	8001a2a <ili9325_SetCursor>
  
  /* Prepare to write GRAM */
  LCD_IO_WriteReg(LCD_REG_34);
 8001950:	2022      	movs	r0, #34	; 0x22
 8001952:	f000 fc69 	bl	8002228 <LCD_IO_WriteReg>
}
 8001956:	bf00      	nop
 8001958:	bd80      	pop	{r7, pc}

0800195a <ili9325_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ili9325_DisplayOn(void)
{
 800195a:	b580      	push	{r7, lr}
 800195c:	af00      	add	r7, sp, #0
  /* Power On sequence -------------------------------------------------------*/
  ili9325_WriteReg(LCD_REG_16, 0x0000); /* SAP, BT[3:0], AP, DSTB, SLP, STB */
 800195e:	2100      	movs	r1, #0
 8001960:	2010      	movs	r0, #16
 8001962:	f000 f8ad 	bl	8001ac0 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_17, 0x0000); /* DC1[2:0], DC0[2:0], VC[2:0] */
 8001966:	2100      	movs	r1, #0
 8001968:	2011      	movs	r0, #17
 800196a:	f000 f8a9 	bl	8001ac0 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_18, 0x0000); /* VREG1OUT voltage */
 800196e:	2100      	movs	r1, #0
 8001970:	2012      	movs	r0, #18
 8001972:	f000 f8a5 	bl	8001ac0 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_19, 0x0000); /* VDV[4:0] for VCOM amplitude*/
 8001976:	2100      	movs	r1, #0
 8001978:	2013      	movs	r0, #19
 800197a:	f000 f8a1 	bl	8001ac0 <ili9325_WriteReg>

  ili9325_WriteReg(LCD_REG_16, 0x17B0); /* SAP, BT[3:0], AP, DSTB, SLP, STB */
 800197e:	f241 71b0 	movw	r1, #6064	; 0x17b0
 8001982:	2010      	movs	r0, #16
 8001984:	f000 f89c 	bl	8001ac0 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_17, 0x0137); /* DC1[2:0], DC0[2:0], VC[2:0] */
 8001988:	f240 1137 	movw	r1, #311	; 0x137
 800198c:	2011      	movs	r0, #17
 800198e:	f000 f897 	bl	8001ac0 <ili9325_WriteReg>

  ili9325_WriteReg(LCD_REG_18, 0x0139); /* VREG1OUT voltage */
 8001992:	f240 1139 	movw	r1, #313	; 0x139
 8001996:	2012      	movs	r0, #18
 8001998:	f000 f892 	bl	8001ac0 <ili9325_WriteReg>

  ili9325_WriteReg(LCD_REG_19, 0x1d00); /* VDV[4:0] for VCOM amplitude */
 800199c:	f44f 51e8 	mov.w	r1, #7424	; 0x1d00
 80019a0:	2013      	movs	r0, #19
 80019a2:	f000 f88d 	bl	8001ac0 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_41, 0x0013); /* VCM[4:0] for VCOMH */
 80019a6:	2113      	movs	r1, #19
 80019a8:	2029      	movs	r0, #41	; 0x29
 80019aa:	f000 f889 	bl	8001ac0 <ili9325_WriteReg>
 
  /* Display On */
  ili9325_WriteReg(LCD_REG_7, 0x0173); /* 262K color and display ON */
 80019ae:	f240 1173 	movw	r1, #371	; 0x173
 80019b2:	2007      	movs	r0, #7
 80019b4:	f000 f884 	bl	8001ac0 <ili9325_WriteReg>
}
 80019b8:	bf00      	nop
 80019ba:	bd80      	pop	{r7, pc}

080019bc <ili9325_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void ili9325_DisplayOff(void)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	af00      	add	r7, sp, #0
  /* Power Off sequence ------------------------------------------------------*/
  ili9325_WriteReg(LCD_REG_16, 0x0000); /* SAP, BT[3:0], AP, DSTB, SLP, STB */
 80019c0:	2100      	movs	r1, #0
 80019c2:	2010      	movs	r0, #16
 80019c4:	f000 f87c 	bl	8001ac0 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_17, 0x0000); /* DC1[2:0], DC0[2:0], VC[2:0] */
 80019c8:	2100      	movs	r1, #0
 80019ca:	2011      	movs	r0, #17
 80019cc:	f000 f878 	bl	8001ac0 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_18, 0x0000); /* VREG1OUT voltage */
 80019d0:	2100      	movs	r1, #0
 80019d2:	2012      	movs	r0, #18
 80019d4:	f000 f874 	bl	8001ac0 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_19, 0x0000); /* VDV[4:0] for VCOM amplitude*/
 80019d8:	2100      	movs	r1, #0
 80019da:	2013      	movs	r0, #19
 80019dc:	f000 f870 	bl	8001ac0 <ili9325_WriteReg>
  
  ili9325_WriteReg(LCD_REG_41, 0x0000); /* VCM[4:0] for VCOMH */
 80019e0:	2100      	movs	r1, #0
 80019e2:	2029      	movs	r0, #41	; 0x29
 80019e4:	f000 f86c 	bl	8001ac0 <ili9325_WriteReg>
  
  /* Display Off */
  ili9325_WriteReg(LCD_REG_7, 0x0); 
 80019e8:	2100      	movs	r1, #0
 80019ea:	2007      	movs	r0, #7
 80019ec:	f000 f868 	bl	8001ac0 <ili9325_WriteReg>
}
 80019f0:	bf00      	nop
 80019f2:	bd80      	pop	{r7, pc}

080019f4 <ili9325_GetLcdPixelWidth>:
  * @brief  Get the LCD pixel Width.
  * @param  None
  * @retval The Lcd Pixel Width
  */
uint16_t ili9325_GetLcdPixelWidth(void)
{
 80019f4:	b480      	push	{r7}
 80019f6:	af00      	add	r7, sp, #0
 return (uint16_t)320;
 80019f8:	f44f 73a0 	mov.w	r3, #320	; 0x140
}
 80019fc:	4618      	mov	r0, r3
 80019fe:	46bd      	mov	sp, r7
 8001a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a04:	4770      	bx	lr

08001a06 <ili9325_GetLcdPixelHeight>:
  * @brief  Get the LCD pixel Height.
  * @param  None
  * @retval The Lcd Pixel Height
  */
uint16_t ili9325_GetLcdPixelHeight(void)
{
 8001a06:	b480      	push	{r7}
 8001a08:	af00      	add	r7, sp, #0
 return (uint16_t)240;
 8001a0a:	23f0      	movs	r3, #240	; 0xf0
}
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a14:	4770      	bx	lr

08001a16 <ili9325_ReadID>:
  * @brief  Get the ILI9325 ID.
  * @param  None
  * @retval The ILI9325 ID 
  */
uint16_t ili9325_ReadID(void)
{
 8001a16:	b580      	push	{r7, lr}
 8001a18:	af00      	add	r7, sp, #0
  LCD_IO_Init(); 
 8001a1a:	f000 fbd7 	bl	80021cc <LCD_IO_Init>
  return (ili9325_ReadReg(0x00));
 8001a1e:	2000      	movs	r0, #0
 8001a20:	f000 f863 	bl	8001aea <ili9325_ReadReg>
 8001a24:	4603      	mov	r3, r0
}
 8001a26:	4618      	mov	r0, r3
 8001a28:	bd80      	pop	{r7, pc}

08001a2a <ili9325_SetCursor>:
  * @param  Xpos: specifies the X position.
  * @param  Ypos: specifies the Y position.
  * @retval None
  */
void ili9325_SetCursor(uint16_t Xpos, uint16_t Ypos)
{
 8001a2a:	b580      	push	{r7, lr}
 8001a2c:	b082      	sub	sp, #8
 8001a2e:	af00      	add	r7, sp, #0
 8001a30:	4603      	mov	r3, r0
 8001a32:	460a      	mov	r2, r1
 8001a34:	80fb      	strh	r3, [r7, #6]
 8001a36:	4613      	mov	r3, r2
 8001a38:	80bb      	strh	r3, [r7, #4]
  ili9325_WriteReg(LCD_REG_32, Ypos);
 8001a3a:	88bb      	ldrh	r3, [r7, #4]
 8001a3c:	4619      	mov	r1, r3
 8001a3e:	2020      	movs	r0, #32
 8001a40:	f000 f83e 	bl	8001ac0 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_33, (ILI9325_LCD_PIXEL_WIDTH - 1 - Xpos));      
 8001a44:	88fb      	ldrh	r3, [r7, #6]
 8001a46:	f5c3 739f 	rsb	r3, r3, #318	; 0x13e
 8001a4a:	3301      	adds	r3, #1
 8001a4c:	b29b      	uxth	r3, r3
 8001a4e:	4619      	mov	r1, r3
 8001a50:	2021      	movs	r0, #33	; 0x21
 8001a52:	f000 f835 	bl	8001ac0 <ili9325_WriteReg>
}
 8001a56:	bf00      	nop
 8001a58:	3708      	adds	r7, #8
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}

08001a5e <ili9325_WritePixel>:
  * @param  Ypos: specifies the Y position.
  * @param  RGBCode: the RGB pixel color
  * @retval None
  */
void ili9325_WritePixel(uint16_t Xpos, uint16_t Ypos, uint16_t RGBCode)
{
 8001a5e:	b580      	push	{r7, lr}
 8001a60:	b082      	sub	sp, #8
 8001a62:	af00      	add	r7, sp, #0
 8001a64:	4603      	mov	r3, r0
 8001a66:	80fb      	strh	r3, [r7, #6]
 8001a68:	460b      	mov	r3, r1
 8001a6a:	80bb      	strh	r3, [r7, #4]
 8001a6c:	4613      	mov	r3, r2
 8001a6e:	807b      	strh	r3, [r7, #2]
  /* Set Cursor */
  ili9325_SetCursor(Xpos, Ypos);
 8001a70:	88ba      	ldrh	r2, [r7, #4]
 8001a72:	88fb      	ldrh	r3, [r7, #6]
 8001a74:	4611      	mov	r1, r2
 8001a76:	4618      	mov	r0, r3
 8001a78:	f7ff ffd7 	bl	8001a2a <ili9325_SetCursor>
  
  /* Prepare to write GRAM */
  LCD_IO_WriteReg(LCD_REG_34);
 8001a7c:	2022      	movs	r0, #34	; 0x22
 8001a7e:	f000 fbd3 	bl	8002228 <LCD_IO_WriteReg>

  /* Write 16-bit GRAM Reg */
  LCD_IO_WriteMultipleData((uint8_t*)&RGBCode, 2);
 8001a82:	1cbb      	adds	r3, r7, #2
 8001a84:	2102      	movs	r1, #2
 8001a86:	4618      	mov	r0, r3
 8001a88:	f000 fbb0 	bl	80021ec <LCD_IO_WriteMultipleData>
}
 8001a8c:	bf00      	nop
 8001a8e:	3708      	adds	r7, #8
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bd80      	pop	{r7, pc}

08001a94 <ili9325_ReadPixel>:
  * @brief  Read pixel.
  * @param  None
  * @retval The RGB pixel color
  */
uint16_t ili9325_ReadPixel(uint16_t Xpos, uint16_t Ypos)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b082      	sub	sp, #8
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	460a      	mov	r2, r1
 8001a9e:	80fb      	strh	r3, [r7, #6]
 8001aa0:	4613      	mov	r3, r2
 8001aa2:	80bb      	strh	r3, [r7, #4]
  /* Set Cursor */
  ili9325_SetCursor(Xpos, Ypos);
 8001aa4:	88ba      	ldrh	r2, [r7, #4]
 8001aa6:	88fb      	ldrh	r3, [r7, #6]
 8001aa8:	4611      	mov	r1, r2
 8001aaa:	4618      	mov	r0, r3
 8001aac:	f7ff ffbd 	bl	8001a2a <ili9325_SetCursor>
  
  /* Read 16-bit Reg */
  return (LCD_IO_ReadData(LCD_REG_34));
 8001ab0:	2022      	movs	r0, #34	; 0x22
 8001ab2:	f000 fbc6 	bl	8002242 <LCD_IO_ReadData>
 8001ab6:	4603      	mov	r3, r0
}
 8001ab8:	4618      	mov	r0, r3
 8001aba:	3708      	adds	r7, #8
 8001abc:	46bd      	mov	sp, r7
 8001abe:	bd80      	pop	{r7, pc}

08001ac0 <ili9325_WriteReg>:
  * @param  LCDReg: Address of the selected register.
  * @param  LCDRegValue: Value to write to the selected register.
  * @retval None
  */
void ili9325_WriteReg(uint8_t LCDReg, uint16_t LCDRegValue)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b082      	sub	sp, #8
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	460a      	mov	r2, r1
 8001aca:	71fb      	strb	r3, [r7, #7]
 8001acc:	4613      	mov	r3, r2
 8001ace:	80bb      	strh	r3, [r7, #4]
  LCD_IO_WriteReg(LCDReg);
 8001ad0:	79fb      	ldrb	r3, [r7, #7]
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	f000 fba8 	bl	8002228 <LCD_IO_WriteReg>
  
  /* Write 16-bit GRAM Reg */
  LCD_IO_WriteMultipleData((uint8_t*)&LCDRegValue, 2);
 8001ad8:	1d3b      	adds	r3, r7, #4
 8001ada:	2102      	movs	r1, #2
 8001adc:	4618      	mov	r0, r3
 8001ade:	f000 fb85 	bl	80021ec <LCD_IO_WriteMultipleData>
}
 8001ae2:	bf00      	nop
 8001ae4:	3708      	adds	r7, #8
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}

08001aea <ili9325_ReadReg>:
  * @brief  Reads the selected LCD Register.
  * @param  LCDReg: address of the selected register.
  * @retval LCD Register Value.
  */
uint16_t ili9325_ReadReg(uint8_t LCDReg)
{ 
 8001aea:	b580      	push	{r7, lr}
 8001aec:	b082      	sub	sp, #8
 8001aee:	af00      	add	r7, sp, #0
 8001af0:	4603      	mov	r3, r0
 8001af2:	71fb      	strb	r3, [r7, #7]
  /* Read 16-bit Reg */
  return (LCD_IO_ReadData(LCDReg));
 8001af4:	79fb      	ldrb	r3, [r7, #7]
 8001af6:	b29b      	uxth	r3, r3
 8001af8:	4618      	mov	r0, r3
 8001afa:	f000 fba2 	bl	8002242 <LCD_IO_ReadData>
 8001afe:	4603      	mov	r3, r0
}
 8001b00:	4618      	mov	r0, r3
 8001b02:	3708      	adds	r7, #8
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bd80      	pop	{r7, pc}

08001b08 <ili9325_SetDisplayWindow>:
  * @param  Height: display window height.
  * @param  Width:  display window width.
  * @retval None
  */
void ili9325_SetDisplayWindow(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8001b08:	b590      	push	{r4, r7, lr}
 8001b0a:	b083      	sub	sp, #12
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	4604      	mov	r4, r0
 8001b10:	4608      	mov	r0, r1
 8001b12:	4611      	mov	r1, r2
 8001b14:	461a      	mov	r2, r3
 8001b16:	4623      	mov	r3, r4
 8001b18:	80fb      	strh	r3, [r7, #6]
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	80bb      	strh	r3, [r7, #4]
 8001b1e:	460b      	mov	r3, r1
 8001b20:	807b      	strh	r3, [r7, #2]
 8001b22:	4613      	mov	r3, r2
 8001b24:	803b      	strh	r3, [r7, #0]
  /* Horizontal GRAM Start Address */
  ili9325_WriteReg(LCD_REG_80, (Ypos));
 8001b26:	88bb      	ldrh	r3, [r7, #4]
 8001b28:	4619      	mov	r1, r3
 8001b2a:	2050      	movs	r0, #80	; 0x50
 8001b2c:	f7ff ffc8 	bl	8001ac0 <ili9325_WriteReg>
  /* Horizontal GRAM End Address */
  ili9325_WriteReg(LCD_REG_81, (Ypos + Height - 1));
 8001b30:	88ba      	ldrh	r2, [r7, #4]
 8001b32:	883b      	ldrh	r3, [r7, #0]
 8001b34:	4413      	add	r3, r2
 8001b36:	b29b      	uxth	r3, r3
 8001b38:	3b01      	subs	r3, #1
 8001b3a:	b29b      	uxth	r3, r3
 8001b3c:	4619      	mov	r1, r3
 8001b3e:	2051      	movs	r0, #81	; 0x51
 8001b40:	f7ff ffbe 	bl	8001ac0 <ili9325_WriteReg>
  
  /* Vertical GRAM Start Address */
  ili9325_WriteReg(LCD_REG_82, ILI9325_LCD_PIXEL_WIDTH - Xpos - Width);
 8001b44:	88fa      	ldrh	r2, [r7, #6]
 8001b46:	887b      	ldrh	r3, [r7, #2]
 8001b48:	4413      	add	r3, r2
 8001b4a:	b29b      	uxth	r3, r3
 8001b4c:	f5c3 73a0 	rsb	r3, r3, #320	; 0x140
 8001b50:	b29b      	uxth	r3, r3
 8001b52:	4619      	mov	r1, r3
 8001b54:	2052      	movs	r0, #82	; 0x52
 8001b56:	f7ff ffb3 	bl	8001ac0 <ili9325_WriteReg>
  /* Vertical GRAM End Address */
  ili9325_WriteReg(LCD_REG_83, ILI9325_LCD_PIXEL_WIDTH - Xpos - 1);  
 8001b5a:	88fb      	ldrh	r3, [r7, #6]
 8001b5c:	f5c3 739f 	rsb	r3, r3, #318	; 0x13e
 8001b60:	3301      	adds	r3, #1
 8001b62:	b29b      	uxth	r3, r3
 8001b64:	4619      	mov	r1, r3
 8001b66:	2053      	movs	r0, #83	; 0x53
 8001b68:	f7ff ffaa 	bl	8001ac0 <ili9325_WriteReg>
}
 8001b6c:	bf00      	nop
 8001b6e:	370c      	adds	r7, #12
 8001b70:	46bd      	mov	sp, r7
 8001b72:	bd90      	pop	{r4, r7, pc}

08001b74 <ili9325_DrawHLine>:
  * @param  Ypos:     specifies the Y position.
  * @param  Length:   specifies the Line length.  
  * @retval None
  */
void ili9325_DrawHLine(uint16_t RGBCode, uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8001b74:	b590      	push	{r4, r7, lr}
 8001b76:	b085      	sub	sp, #20
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	4604      	mov	r4, r0
 8001b7c:	4608      	mov	r0, r1
 8001b7e:	4611      	mov	r1, r2
 8001b80:	461a      	mov	r2, r3
 8001b82:	4623      	mov	r3, r4
 8001b84:	80fb      	strh	r3, [r7, #6]
 8001b86:	4603      	mov	r3, r0
 8001b88:	80bb      	strh	r3, [r7, #4]
 8001b8a:	460b      	mov	r3, r1
 8001b8c:	807b      	strh	r3, [r7, #2]
 8001b8e:	4613      	mov	r3, r2
 8001b90:	803b      	strh	r3, [r7, #0]
  uint16_t counter = 0;
 8001b92:	2300      	movs	r3, #0
 8001b94:	81fb      	strh	r3, [r7, #14]
  
  /* Set Cursor */
  ili9325_SetCursor(Xpos, Ypos); 
 8001b96:	887a      	ldrh	r2, [r7, #2]
 8001b98:	88bb      	ldrh	r3, [r7, #4]
 8001b9a:	4611      	mov	r1, r2
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	f7ff ff44 	bl	8001a2a <ili9325_SetCursor>
  
  /* Prepare to write GRAM */
  LCD_IO_WriteReg(LCD_REG_34);
 8001ba2:	2022      	movs	r0, #34	; 0x22
 8001ba4:	f000 fb40 	bl	8002228 <LCD_IO_WriteReg>

  /* Sent a complete line */
  for(counter = 0; counter < Length; counter++)
 8001ba8:	2300      	movs	r3, #0
 8001baa:	81fb      	strh	r3, [r7, #14]
 8001bac:	e007      	b.n	8001bbe <ili9325_DrawHLine+0x4a>
  {
    ArrayRGB[counter] = RGBCode;
 8001bae:	89fb      	ldrh	r3, [r7, #14]
 8001bb0:	490a      	ldr	r1, [pc, #40]	; (8001bdc <ili9325_DrawHLine+0x68>)
 8001bb2:	88fa      	ldrh	r2, [r7, #6]
 8001bb4:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
  for(counter = 0; counter < Length; counter++)
 8001bb8:	89fb      	ldrh	r3, [r7, #14]
 8001bba:	3301      	adds	r3, #1
 8001bbc:	81fb      	strh	r3, [r7, #14]
 8001bbe:	89fa      	ldrh	r2, [r7, #14]
 8001bc0:	883b      	ldrh	r3, [r7, #0]
 8001bc2:	429a      	cmp	r2, r3
 8001bc4:	d3f3      	bcc.n	8001bae <ili9325_DrawHLine+0x3a>
  }  

  LCD_IO_WriteMultipleData((uint8_t*)&ArrayRGB[0], Length * 2);
 8001bc6:	883b      	ldrh	r3, [r7, #0]
 8001bc8:	005b      	lsls	r3, r3, #1
 8001bca:	4619      	mov	r1, r3
 8001bcc:	4803      	ldr	r0, [pc, #12]	; (8001bdc <ili9325_DrawHLine+0x68>)
 8001bce:	f000 fb0d 	bl	80021ec <LCD_IO_WriteMultipleData>
}
 8001bd2:	bf00      	nop
 8001bd4:	3714      	adds	r7, #20
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bd90      	pop	{r4, r7, pc}
 8001bda:	bf00      	nop
 8001bdc:	20000400 	.word	0x20000400

08001be0 <ili9325_DrawVLine>:
  * @param  Ypos:     specifies the Y position.
  * @param  Length:   specifies the Line length.  
  * @retval None
  */
void ili9325_DrawVLine(uint16_t RGBCode, uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8001be0:	b590      	push	{r4, r7, lr}
 8001be2:	b085      	sub	sp, #20
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	4604      	mov	r4, r0
 8001be8:	4608      	mov	r0, r1
 8001bea:	4611      	mov	r1, r2
 8001bec:	461a      	mov	r2, r3
 8001bee:	4623      	mov	r3, r4
 8001bf0:	80fb      	strh	r3, [r7, #6]
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	80bb      	strh	r3, [r7, #4]
 8001bf6:	460b      	mov	r3, r1
 8001bf8:	807b      	strh	r3, [r7, #2]
 8001bfa:	4613      	mov	r3, r2
 8001bfc:	803b      	strh	r3, [r7, #0]
  uint16_t counter = 0;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	81fb      	strh	r3, [r7, #14]

  /* set GRAM write direction and BGR = 1 */
  /* I/D=00 (Horizontal : increment, Vertical : decrement) */
  /* AM=1 (address is updated in vertical writing direction) */
  ili9325_WriteReg(LCD_REG_3, 0x1010);
 8001c02:	f241 0110 	movw	r1, #4112	; 0x1010
 8001c06:	2003      	movs	r0, #3
 8001c08:	f7ff ff5a 	bl	8001ac0 <ili9325_WriteReg>
  
  /* Set Cursor */
  ili9325_SetCursor(Xpos, Ypos);
 8001c0c:	887a      	ldrh	r2, [r7, #2]
 8001c0e:	88bb      	ldrh	r3, [r7, #4]
 8001c10:	4611      	mov	r1, r2
 8001c12:	4618      	mov	r0, r3
 8001c14:	f7ff ff09 	bl	8001a2a <ili9325_SetCursor>
  
  /* Prepare to write GRAM */
  LCD_IO_WriteReg(LCD_REG_34);
 8001c18:	2022      	movs	r0, #34	; 0x22
 8001c1a:	f000 fb05 	bl	8002228 <LCD_IO_WriteReg>

  /* Fill a complete vertical line */
  for(counter = 0; counter < Length; counter++)
 8001c1e:	2300      	movs	r3, #0
 8001c20:	81fb      	strh	r3, [r7, #14]
 8001c22:	e007      	b.n	8001c34 <ili9325_DrawVLine+0x54>
  {
    ArrayRGB[counter] = RGBCode;
 8001c24:	89fb      	ldrh	r3, [r7, #14]
 8001c26:	490d      	ldr	r1, [pc, #52]	; (8001c5c <ili9325_DrawVLine+0x7c>)
 8001c28:	88fa      	ldrh	r2, [r7, #6]
 8001c2a:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
  for(counter = 0; counter < Length; counter++)
 8001c2e:	89fb      	ldrh	r3, [r7, #14]
 8001c30:	3301      	adds	r3, #1
 8001c32:	81fb      	strh	r3, [r7, #14]
 8001c34:	89fa      	ldrh	r2, [r7, #14]
 8001c36:	883b      	ldrh	r3, [r7, #0]
 8001c38:	429a      	cmp	r2, r3
 8001c3a:	d3f3      	bcc.n	8001c24 <ili9325_DrawVLine+0x44>
  }
  
  /* Write 16-bit GRAM Reg */
  LCD_IO_WriteMultipleData((uint8_t*)&ArrayRGB[0], Length * 2);
 8001c3c:	883b      	ldrh	r3, [r7, #0]
 8001c3e:	005b      	lsls	r3, r3, #1
 8001c40:	4619      	mov	r1, r3
 8001c42:	4806      	ldr	r0, [pc, #24]	; (8001c5c <ili9325_DrawVLine+0x7c>)
 8001c44:	f000 fad2 	bl	80021ec <LCD_IO_WriteMultipleData>
  
  /* set GRAM write direction and BGR = 1 */
  /* I/D=00 (Horizontal : increment, Vertical : decrement) */
  /* AM=1 (address is updated in vertical writing direction) */
  ili9325_WriteReg(LCD_REG_3, 0x1018);  
 8001c48:	f241 0118 	movw	r1, #4120	; 0x1018
 8001c4c:	2003      	movs	r0, #3
 8001c4e:	f7ff ff37 	bl	8001ac0 <ili9325_WriteReg>
}
 8001c52:	bf00      	nop
 8001c54:	3714      	adds	r7, #20
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd90      	pop	{r4, r7, pc}
 8001c5a:	bf00      	nop
 8001c5c:	20000400 	.word	0x20000400

08001c60 <ili9325_DrawBitmap>:
  * @param  Xpos: Bmp X position in the LCD
  * @param  Ypos: Bmp Y position in the LCD    
  * @retval None
  */
void ili9325_DrawBitmap(uint16_t Xpos, uint16_t Ypos, uint8_t *pbmp)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b084      	sub	sp, #16
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	4603      	mov	r3, r0
 8001c68:	603a      	str	r2, [r7, #0]
 8001c6a:	80fb      	strh	r3, [r7, #6]
 8001c6c:	460b      	mov	r3, r1
 8001c6e:	80bb      	strh	r3, [r7, #4]
  uint32_t index = 0, size = 0;
 8001c70:	2300      	movs	r3, #0
 8001c72:	60fb      	str	r3, [r7, #12]
 8001c74:	2300      	movs	r3, #0
 8001c76:	60bb      	str	r3, [r7, #8]
  /* Read bitmap size */
  size = *(volatile uint16_t *) (pbmp + 2);
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	3302      	adds	r3, #2
 8001c7c:	881b      	ldrh	r3, [r3, #0]
 8001c7e:	b29b      	uxth	r3, r3
 8001c80:	60bb      	str	r3, [r7, #8]
  size |= (*(volatile uint16_t *) (pbmp + 4)) << 16;
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	3304      	adds	r3, #4
 8001c86:	881b      	ldrh	r3, [r3, #0]
 8001c88:	b29b      	uxth	r3, r3
 8001c8a:	041b      	lsls	r3, r3, #16
 8001c8c:	461a      	mov	r2, r3
 8001c8e:	68bb      	ldr	r3, [r7, #8]
 8001c90:	4313      	orrs	r3, r2
 8001c92:	60bb      	str	r3, [r7, #8]
  /* Get bitmap data address offset */
  index = *(volatile uint16_t *) (pbmp + 10);
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	330a      	adds	r3, #10
 8001c98:	881b      	ldrh	r3, [r3, #0]
 8001c9a:	b29b      	uxth	r3, r3
 8001c9c:	60fb      	str	r3, [r7, #12]
  index |= (*(volatile uint16_t *) (pbmp + 12)) << 16;
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	330c      	adds	r3, #12
 8001ca2:	881b      	ldrh	r3, [r3, #0]
 8001ca4:	b29b      	uxth	r3, r3
 8001ca6:	041b      	lsls	r3, r3, #16
 8001ca8:	461a      	mov	r2, r3
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	4313      	orrs	r3, r2
 8001cae:	60fb      	str	r3, [r7, #12]
  size = (size - index)/2;
 8001cb0:	68ba      	ldr	r2, [r7, #8]
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	1ad3      	subs	r3, r2, r3
 8001cb6:	085b      	lsrs	r3, r3, #1
 8001cb8:	60bb      	str	r3, [r7, #8]
  pbmp += index;
 8001cba:	683a      	ldr	r2, [r7, #0]
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	4413      	add	r3, r2
 8001cc0:	603b      	str	r3, [r7, #0]
  /* Set GRAM write direction and BGR = 1 */
  /* I/D=00 (Horizontal : decrement, Vertical : decrement) */
  /* AM=1 (address is updated in vertical writing direction) */
  ili9325_WriteReg(LCD_REG_3, 0x1008);
 8001cc2:	f241 0108 	movw	r1, #4104	; 0x1008
 8001cc6:	2003      	movs	r0, #3
 8001cc8:	f7ff fefa 	bl	8001ac0 <ili9325_WriteReg>

  /* Set Cursor */
  ili9325_SetCursor(Xpos, Ypos);  
 8001ccc:	88ba      	ldrh	r2, [r7, #4]
 8001cce:	88fb      	ldrh	r3, [r7, #6]
 8001cd0:	4611      	mov	r1, r2
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	f7ff fea9 	bl	8001a2a <ili9325_SetCursor>
  
  /* Prepare to write GRAM */
  LCD_IO_WriteReg(LCD_REG_34);
 8001cd8:	2022      	movs	r0, #34	; 0x22
 8001cda:	f000 faa5 	bl	8002228 <LCD_IO_WriteReg>
 
  LCD_IO_WriteMultipleData((uint8_t*)pbmp, size*2);
 8001cde:	68bb      	ldr	r3, [r7, #8]
 8001ce0:	005b      	lsls	r3, r3, #1
 8001ce2:	4619      	mov	r1, r3
 8001ce4:	6838      	ldr	r0, [r7, #0]
 8001ce6:	f000 fa81 	bl	80021ec <LCD_IO_WriteMultipleData>
 
  /* Set GRAM write direction and BGR = 1 */
  /* I/D = 01 (Horizontal : increment, Vertical : decrement) */
  /* AM = 1 (address is updated in vertical writing direction) */
  ili9325_WriteReg(LCD_REG_3, 0x1018);
 8001cea:	f241 0118 	movw	r1, #4120	; 0x1018
 8001cee:	2003      	movs	r0, #3
 8001cf0:	f7ff fee6 	bl	8001ac0 <ili9325_WriteReg>
}
 8001cf4:	bf00      	nop
 8001cf6:	3710      	adds	r7, #16
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bd80      	pop	{r7, pc}

08001cfc <ili9325_DrawRGBImage>:
  * @param  Xsize: Image X size in the LCD
  * @param  Ysize: Image Y size in the LCD
  * @retval None
  */
void ili9325_DrawRGBImage(uint16_t Xpos, uint16_t Ypos, uint16_t Xsize, uint16_t Ysize, uint8_t *pdata)
{
 8001cfc:	b590      	push	{r4, r7, lr}
 8001cfe:	b085      	sub	sp, #20
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	4604      	mov	r4, r0
 8001d04:	4608      	mov	r0, r1
 8001d06:	4611      	mov	r1, r2
 8001d08:	461a      	mov	r2, r3
 8001d0a:	4623      	mov	r3, r4
 8001d0c:	80fb      	strh	r3, [r7, #6]
 8001d0e:	4603      	mov	r3, r0
 8001d10:	80bb      	strh	r3, [r7, #4]
 8001d12:	460b      	mov	r3, r1
 8001d14:	807b      	strh	r3, [r7, #2]
 8001d16:	4613      	mov	r3, r2
 8001d18:	803b      	strh	r3, [r7, #0]
  uint32_t size = 0;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	60fb      	str	r3, [r7, #12]

  size = (Xsize * Ysize);
 8001d1e:	887b      	ldrh	r3, [r7, #2]
 8001d20:	883a      	ldrh	r2, [r7, #0]
 8001d22:	fb02 f303 	mul.w	r3, r2, r3
 8001d26:	60fb      	str	r3, [r7, #12]

  /* Set Cursor */
  ili9325_SetCursor(Xpos, Ypos);  
 8001d28:	88ba      	ldrh	r2, [r7, #4]
 8001d2a:	88fb      	ldrh	r3, [r7, #6]
 8001d2c:	4611      	mov	r1, r2
 8001d2e:	4618      	mov	r0, r3
 8001d30:	f7ff fe7b 	bl	8001a2a <ili9325_SetCursor>
  
  /* Prepare to write GRAM */
  LCD_IO_WriteReg(LCD_REG_34);
 8001d34:	2022      	movs	r0, #34	; 0x22
 8001d36:	f000 fa77 	bl	8002228 <LCD_IO_WriteReg>
 
  LCD_IO_WriteMultipleData((uint8_t*)pdata, size*2);
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	005b      	lsls	r3, r3, #1
 8001d3e:	4619      	mov	r1, r3
 8001d40:	6a38      	ldr	r0, [r7, #32]
 8001d42:	f000 fa53 	bl	80021ec <LCD_IO_WriteMultipleData>
}
 8001d46:	bf00      	nop
 8001d48:	3714      	adds	r7, #20
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd90      	pop	{r4, r7, pc}
	...

08001d50 <BSP_LED_Init>:
  *            @arg  LED2
  *            @arg  LED3
  *            @arg  LED4
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b08c      	sub	sp, #48	; 0x30
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	4603      	mov	r3, r0
 8001d58:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable the GPIO_LED clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 8001d5a:	79fb      	ldrb	r3, [r7, #7]
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d10e      	bne.n	8001d7e <BSP_LED_Init+0x2e>
 8001d60:	2300      	movs	r3, #0
 8001d62:	61bb      	str	r3, [r7, #24]
 8001d64:	4b2d      	ldr	r3, [pc, #180]	; (8001e1c <BSP_LED_Init+0xcc>)
 8001d66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d68:	4a2c      	ldr	r2, [pc, #176]	; (8001e1c <BSP_LED_Init+0xcc>)
 8001d6a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001d6e:	6313      	str	r3, [r2, #48]	; 0x30
 8001d70:	4b2a      	ldr	r3, [pc, #168]	; (8001e1c <BSP_LED_Init+0xcc>)
 8001d72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d78:	61bb      	str	r3, [r7, #24]
 8001d7a:	69bb      	ldr	r3, [r7, #24]
 8001d7c:	e034      	b.n	8001de8 <BSP_LED_Init+0x98>
 8001d7e:	79fb      	ldrb	r3, [r7, #7]
 8001d80:	2b01      	cmp	r3, #1
 8001d82:	d10e      	bne.n	8001da2 <BSP_LED_Init+0x52>
 8001d84:	2300      	movs	r3, #0
 8001d86:	617b      	str	r3, [r7, #20]
 8001d88:	4b24      	ldr	r3, [pc, #144]	; (8001e1c <BSP_LED_Init+0xcc>)
 8001d8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d8c:	4a23      	ldr	r2, [pc, #140]	; (8001e1c <BSP_LED_Init+0xcc>)
 8001d8e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001d92:	6313      	str	r3, [r2, #48]	; 0x30
 8001d94:	4b21      	ldr	r3, [pc, #132]	; (8001e1c <BSP_LED_Init+0xcc>)
 8001d96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d9c:	617b      	str	r3, [r7, #20]
 8001d9e:	697b      	ldr	r3, [r7, #20]
 8001da0:	e022      	b.n	8001de8 <BSP_LED_Init+0x98>
 8001da2:	79fb      	ldrb	r3, [r7, #7]
 8001da4:	2b02      	cmp	r3, #2
 8001da6:	d10e      	bne.n	8001dc6 <BSP_LED_Init+0x76>
 8001da8:	2300      	movs	r3, #0
 8001daa:	613b      	str	r3, [r7, #16]
 8001dac:	4b1b      	ldr	r3, [pc, #108]	; (8001e1c <BSP_LED_Init+0xcc>)
 8001dae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001db0:	4a1a      	ldr	r2, [pc, #104]	; (8001e1c <BSP_LED_Init+0xcc>)
 8001db2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001db6:	6313      	str	r3, [r2, #48]	; 0x30
 8001db8:	4b18      	ldr	r3, [pc, #96]	; (8001e1c <BSP_LED_Init+0xcc>)
 8001dba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dc0:	613b      	str	r3, [r7, #16]
 8001dc2:	693b      	ldr	r3, [r7, #16]
 8001dc4:	e010      	b.n	8001de8 <BSP_LED_Init+0x98>
 8001dc6:	79fb      	ldrb	r3, [r7, #7]
 8001dc8:	2b03      	cmp	r3, #3
 8001dca:	d10d      	bne.n	8001de8 <BSP_LED_Init+0x98>
 8001dcc:	2300      	movs	r3, #0
 8001dce:	60fb      	str	r3, [r7, #12]
 8001dd0:	4b12      	ldr	r3, [pc, #72]	; (8001e1c <BSP_LED_Init+0xcc>)
 8001dd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dd4:	4a11      	ldr	r2, [pc, #68]	; (8001e1c <BSP_LED_Init+0xcc>)
 8001dd6:	f043 0304 	orr.w	r3, r3, #4
 8001dda:	6313      	str	r3, [r2, #48]	; 0x30
 8001ddc:	4b0f      	ldr	r3, [pc, #60]	; (8001e1c <BSP_LED_Init+0xcc>)
 8001dde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001de0:	f003 0304 	and.w	r3, r3, #4
 8001de4:	60fb      	str	r3, [r7, #12]
 8001de6:	68fb      	ldr	r3, [r7, #12]

  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 8001de8:	79fb      	ldrb	r3, [r7, #7]
 8001dea:	4a0d      	ldr	r2, [pc, #52]	; (8001e20 <BSP_LED_Init+0xd0>)
 8001dec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001df0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001df2:	2301      	movs	r3, #1
 8001df4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001df6:	2301      	movs	r3, #1
 8001df8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8001dfa:	2302      	movs	r3, #2
 8001dfc:	62bb      	str	r3, [r7, #40]	; 0x28
  
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 8001dfe:	79fb      	ldrb	r3, [r7, #7]
 8001e00:	4a08      	ldr	r2, [pc, #32]	; (8001e24 <BSP_LED_Init+0xd4>)
 8001e02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e06:	f107 021c 	add.w	r2, r7, #28
 8001e0a:	4611      	mov	r1, r2
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	f001 f967 	bl	80030e0 <HAL_GPIO_Init>
}
 8001e12:	bf00      	nop
 8001e14:	3730      	adds	r7, #48	; 0x30
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bd80      	pop	{r7, pc}
 8001e1a:	bf00      	nop
 8001e1c:	40023800 	.word	0x40023800
 8001e20:	0800a100 	.word	0x0800a100
 8001e24:	2000003c 	.word	0x2000003c

08001e28 <BSP_LED_On>:
  *            @arg  LED2
  *            @arg  LED3
  *            @arg  LED4
  */
void BSP_LED_On(Led_TypeDef Led)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b082      	sub	sp, #8
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	4603      	mov	r3, r0
 8001e30:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET); 
 8001e32:	79fb      	ldrb	r3, [r7, #7]
 8001e34:	4a07      	ldr	r2, [pc, #28]	; (8001e54 <BSP_LED_On+0x2c>)
 8001e36:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001e3a:	79fb      	ldrb	r3, [r7, #7]
 8001e3c:	4a06      	ldr	r2, [pc, #24]	; (8001e58 <BSP_LED_On+0x30>)
 8001e3e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001e42:	2201      	movs	r2, #1
 8001e44:	4619      	mov	r1, r3
 8001e46:	f001 faff 	bl	8003448 <HAL_GPIO_WritePin>
}
 8001e4a:	bf00      	nop
 8001e4c:	3708      	adds	r7, #8
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bd80      	pop	{r7, pc}
 8001e52:	bf00      	nop
 8001e54:	2000003c 	.word	0x2000003c
 8001e58:	0800a100 	.word	0x0800a100

08001e5c <BSP_LED_Off>:
  *            @arg  LED2
  *            @arg  LED3
  *            @arg  LED4
  */
void BSP_LED_Off(Led_TypeDef Led)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b082      	sub	sp, #8
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	4603      	mov	r3, r0
 8001e64:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 8001e66:	79fb      	ldrb	r3, [r7, #7]
 8001e68:	4a07      	ldr	r2, [pc, #28]	; (8001e88 <BSP_LED_Off+0x2c>)
 8001e6a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001e6e:	79fb      	ldrb	r3, [r7, #7]
 8001e70:	4a06      	ldr	r2, [pc, #24]	; (8001e8c <BSP_LED_Off+0x30>)
 8001e72:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001e76:	2200      	movs	r2, #0
 8001e78:	4619      	mov	r1, r3
 8001e7a:	f001 fae5 	bl	8003448 <HAL_GPIO_WritePin>
}
 8001e7e:	bf00      	nop
 8001e80:	3708      	adds	r7, #8
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bd80      	pop	{r7, pc}
 8001e86:	bf00      	nop
 8001e88:	2000003c 	.word	0x2000003c
 8001e8c:	0800a100 	.word	0x0800a100

08001e90 <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_GPIO: Button will be used as simple IO
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line 
  *                                    with interrupt generation capability  
  */
void BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef Button_Mode)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b08a      	sub	sp, #40	; 0x28
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	4603      	mov	r3, r0
 8001e98:	460a      	mov	r2, r1
 8001e9a:	71fb      	strb	r3, [r7, #7]
 8001e9c:	4613      	mov	r3, r2
 8001e9e:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef GPIO_InitStruct;
  
  /* Enable the BUTTON clock */
  BUTTONx_GPIO_CLK_ENABLE(Button);
 8001ea0:	79fb      	ldrb	r3, [r7, #7]
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d10e      	bne.n	8001ec4 <BSP_PB_Init+0x34>
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	613b      	str	r3, [r7, #16]
 8001eaa:	4b3f      	ldr	r3, [pc, #252]	; (8001fa8 <BSP_PB_Init+0x118>)
 8001eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eae:	4a3e      	ldr	r2, [pc, #248]	; (8001fa8 <BSP_PB_Init+0x118>)
 8001eb0:	f043 0301 	orr.w	r3, r3, #1
 8001eb4:	6313      	str	r3, [r2, #48]	; 0x30
 8001eb6:	4b3c      	ldr	r3, [pc, #240]	; (8001fa8 <BSP_PB_Init+0x118>)
 8001eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eba:	f003 0301 	and.w	r3, r3, #1
 8001ebe:	613b      	str	r3, [r7, #16]
 8001ec0:	693b      	ldr	r3, [r7, #16]
 8001ec2:	e022      	b.n	8001f0a <BSP_PB_Init+0x7a>
 8001ec4:	79fb      	ldrb	r3, [r7, #7]
 8001ec6:	2b01      	cmp	r3, #1
 8001ec8:	d10e      	bne.n	8001ee8 <BSP_PB_Init+0x58>
 8001eca:	2300      	movs	r3, #0
 8001ecc:	60fb      	str	r3, [r7, #12]
 8001ece:	4b36      	ldr	r3, [pc, #216]	; (8001fa8 <BSP_PB_Init+0x118>)
 8001ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ed2:	4a35      	ldr	r2, [pc, #212]	; (8001fa8 <BSP_PB_Init+0x118>)
 8001ed4:	f043 0304 	orr.w	r3, r3, #4
 8001ed8:	6313      	str	r3, [r2, #48]	; 0x30
 8001eda:	4b33      	ldr	r3, [pc, #204]	; (8001fa8 <BSP_PB_Init+0x118>)
 8001edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ede:	f003 0304 	and.w	r3, r3, #4
 8001ee2:	60fb      	str	r3, [r7, #12]
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	e010      	b.n	8001f0a <BSP_PB_Init+0x7a>
 8001ee8:	79fb      	ldrb	r3, [r7, #7]
 8001eea:	2b02      	cmp	r3, #2
 8001eec:	d10d      	bne.n	8001f0a <BSP_PB_Init+0x7a>
 8001eee:	2300      	movs	r3, #0
 8001ef0:	60bb      	str	r3, [r7, #8]
 8001ef2:	4b2d      	ldr	r3, [pc, #180]	; (8001fa8 <BSP_PB_Init+0x118>)
 8001ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ef6:	4a2c      	ldr	r2, [pc, #176]	; (8001fa8 <BSP_PB_Init+0x118>)
 8001ef8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001efc:	6313      	str	r3, [r2, #48]	; 0x30
 8001efe:	4b2a      	ldr	r3, [pc, #168]	; (8001fa8 <BSP_PB_Init+0x118>)
 8001f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f06:	60bb      	str	r3, [r7, #8]
 8001f08:	68bb      	ldr	r3, [r7, #8]
  
  if(Button_Mode == BUTTON_MODE_GPIO)
 8001f0a:	79bb      	ldrb	r3, [r7, #6]
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d114      	bne.n	8001f3a <BSP_PB_Init+0xaa>
  {
    /* Configure Button pin as input */
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 8001f10:	79fb      	ldrb	r3, [r7, #7]
 8001f12:	4a26      	ldr	r2, [pc, #152]	; (8001fac <BSP_PB_Init+0x11c>)
 8001f14:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001f18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8001f22:	2302      	movs	r3, #2
 8001f24:	623b      	str	r3, [r7, #32]
    
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 8001f26:	79fb      	ldrb	r3, [r7, #7]
 8001f28:	4a21      	ldr	r2, [pc, #132]	; (8001fb0 <BSP_PB_Init+0x120>)
 8001f2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f2e:	f107 0214 	add.w	r2, r7, #20
 8001f32:	4611      	mov	r1, r2
 8001f34:	4618      	mov	r0, r3
 8001f36:	f001 f8d3 	bl	80030e0 <HAL_GPIO_Init>
  }
  
  if(Button_Mode == BUTTON_MODE_EXTI)
 8001f3a:	79bb      	ldrb	r3, [r7, #6]
 8001f3c:	2b01      	cmp	r3, #1
 8001f3e:	d12e      	bne.n	8001f9e <BSP_PB_Init+0x10e>
  {
    /* Configure Button pin as input with External interrupt */
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 8001f40:	79fb      	ldrb	r3, [r7, #7]
 8001f42:	4a1a      	ldr	r2, [pc, #104]	; (8001fac <BSP_PB_Init+0x11c>)
 8001f44:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001f48:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8001f4e:	2302      	movs	r3, #2
 8001f50:	623b      	str	r3, [r7, #32]
    
    if(Button != BUTTON_WAKEUP)
 8001f52:	79fb      	ldrb	r3, [r7, #7]
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d003      	beq.n	8001f60 <BSP_PB_Init+0xd0>
    {
      GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING; 
 8001f58:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001f5c:	61bb      	str	r3, [r7, #24]
 8001f5e:	e002      	b.n	8001f66 <BSP_PB_Init+0xd6>
    }
    else
    {
      GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001f60:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001f64:	61bb      	str	r3, [r7, #24]
    }
    
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 8001f66:	79fb      	ldrb	r3, [r7, #7]
 8001f68:	4a11      	ldr	r2, [pc, #68]	; (8001fb0 <BSP_PB_Init+0x120>)
 8001f6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f6e:	f107 0214 	add.w	r2, r7, #20
 8001f72:	4611      	mov	r1, r2
 8001f74:	4618      	mov	r0, r3
 8001f76:	f001 f8b3 	bl	80030e0 <HAL_GPIO_Init>
    
    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x0);
 8001f7a:	79fb      	ldrb	r3, [r7, #7]
 8001f7c:	4a0d      	ldr	r2, [pc, #52]	; (8001fb4 <BSP_PB_Init+0x124>)
 8001f7e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001f82:	b25b      	sxtb	r3, r3
 8001f84:	2200      	movs	r2, #0
 8001f86:	210f      	movs	r1, #15
 8001f88:	4618      	mov	r0, r3
 8001f8a:	f000 ff94 	bl	8002eb6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 8001f8e:	79fb      	ldrb	r3, [r7, #7]
 8001f90:	4a08      	ldr	r2, [pc, #32]	; (8001fb4 <BSP_PB_Init+0x124>)
 8001f92:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001f96:	b25b      	sxtb	r3, r3
 8001f98:	4618      	mov	r0, r3
 8001f9a:	f000 ffa8 	bl	8002eee <HAL_NVIC_EnableIRQ>
  }
}
 8001f9e:	bf00      	nop
 8001fa0:	3728      	adds	r7, #40	; 0x28
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bd80      	pop	{r7, pc}
 8001fa6:	bf00      	nop
 8001fa8:	40023800 	.word	0x40023800
 8001fac:	0800a108 	.word	0x0800a108
 8001fb0:	2000004c 	.word	0x2000004c
 8001fb4:	0800a110 	.word	0x0800a110

08001fb8 <BSP_PB_GetState>:
  *            @arg BUTTON_DOWN: Joystick Down Push Button
  *            @arg BUTTON_SEL: Joystick Sel Push Button  
  * @retval The Button GPIO pin value
  */
uint32_t BSP_PB_GetState(Button_TypeDef Button)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b082      	sub	sp, #8
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	71fb      	strb	r3, [r7, #7]
  return HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]);
 8001fc2:	79fb      	ldrb	r3, [r7, #7]
 8001fc4:	4a07      	ldr	r2, [pc, #28]	; (8001fe4 <BSP_PB_GetState+0x2c>)
 8001fc6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001fca:	79fb      	ldrb	r3, [r7, #7]
 8001fcc:	4906      	ldr	r1, [pc, #24]	; (8001fe8 <BSP_PB_GetState+0x30>)
 8001fce:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001fd2:	4619      	mov	r1, r3
 8001fd4:	4610      	mov	r0, r2
 8001fd6:	f001 fa1f 	bl	8003418 <HAL_GPIO_ReadPin>
 8001fda:	4603      	mov	r3, r0
}
 8001fdc:	4618      	mov	r0, r3
 8001fde:	3708      	adds	r7, #8
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	bd80      	pop	{r7, pc}
 8001fe4:	2000004c 	.word	0x2000004c
 8001fe8:	0800a108 	.word	0x0800a108

08001fec <FSMC_BANK3_MspInit>:
/*************************** FSMC Routines ************************************/
/**
  * @brief  Initializes FSMC_BANK3 MSP.
  */
static void FSMC_BANK3_MspInit(void)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b08a      	sub	sp, #40	; 0x28
 8001ff0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_Init_Structure;
    
  /* Enable FSMC clock */
  __FSMC_CLK_ENABLE();
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	613b      	str	r3, [r7, #16]
 8001ff6:	4b3a      	ldr	r3, [pc, #232]	; (80020e0 <FSMC_BANK3_MspInit+0xf4>)
 8001ff8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ffa:	4a39      	ldr	r2, [pc, #228]	; (80020e0 <FSMC_BANK3_MspInit+0xf4>)
 8001ffc:	f043 0301 	orr.w	r3, r3, #1
 8002000:	6393      	str	r3, [r2, #56]	; 0x38
 8002002:	4b37      	ldr	r3, [pc, #220]	; (80020e0 <FSMC_BANK3_MspInit+0xf4>)
 8002004:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002006:	f003 0301 	and.w	r3, r3, #1
 800200a:	613b      	str	r3, [r7, #16]
 800200c:	693b      	ldr	r3, [r7, #16]

  /* Enable GPIOs clock */
  __GPIOD_CLK_ENABLE();
 800200e:	2300      	movs	r3, #0
 8002010:	60fb      	str	r3, [r7, #12]
 8002012:	4b33      	ldr	r3, [pc, #204]	; (80020e0 <FSMC_BANK3_MspInit+0xf4>)
 8002014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002016:	4a32      	ldr	r2, [pc, #200]	; (80020e0 <FSMC_BANK3_MspInit+0xf4>)
 8002018:	f043 0308 	orr.w	r3, r3, #8
 800201c:	6313      	str	r3, [r2, #48]	; 0x30
 800201e:	4b30      	ldr	r3, [pc, #192]	; (80020e0 <FSMC_BANK3_MspInit+0xf4>)
 8002020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002022:	f003 0308 	and.w	r3, r3, #8
 8002026:	60fb      	str	r3, [r7, #12]
 8002028:	68fb      	ldr	r3, [r7, #12]
  __GPIOE_CLK_ENABLE();
 800202a:	2300      	movs	r3, #0
 800202c:	60bb      	str	r3, [r7, #8]
 800202e:	4b2c      	ldr	r3, [pc, #176]	; (80020e0 <FSMC_BANK3_MspInit+0xf4>)
 8002030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002032:	4a2b      	ldr	r2, [pc, #172]	; (80020e0 <FSMC_BANK3_MspInit+0xf4>)
 8002034:	f043 0310 	orr.w	r3, r3, #16
 8002038:	6313      	str	r3, [r2, #48]	; 0x30
 800203a:	4b29      	ldr	r3, [pc, #164]	; (80020e0 <FSMC_BANK3_MspInit+0xf4>)
 800203c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800203e:	f003 0310 	and.w	r3, r3, #16
 8002042:	60bb      	str	r3, [r7, #8]
 8002044:	68bb      	ldr	r3, [r7, #8]
  __GPIOF_CLK_ENABLE();
 8002046:	2300      	movs	r3, #0
 8002048:	607b      	str	r3, [r7, #4]
 800204a:	4b25      	ldr	r3, [pc, #148]	; (80020e0 <FSMC_BANK3_MspInit+0xf4>)
 800204c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800204e:	4a24      	ldr	r2, [pc, #144]	; (80020e0 <FSMC_BANK3_MspInit+0xf4>)
 8002050:	f043 0320 	orr.w	r3, r3, #32
 8002054:	6313      	str	r3, [r2, #48]	; 0x30
 8002056:	4b22      	ldr	r3, [pc, #136]	; (80020e0 <FSMC_BANK3_MspInit+0xf4>)
 8002058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800205a:	f003 0320 	and.w	r3, r3, #32
 800205e:	607b      	str	r3, [r7, #4]
 8002060:	687b      	ldr	r3, [r7, #4]
  __GPIOG_CLK_ENABLE();
 8002062:	2300      	movs	r3, #0
 8002064:	603b      	str	r3, [r7, #0]
 8002066:	4b1e      	ldr	r3, [pc, #120]	; (80020e0 <FSMC_BANK3_MspInit+0xf4>)
 8002068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800206a:	4a1d      	ldr	r2, [pc, #116]	; (80020e0 <FSMC_BANK3_MspInit+0xf4>)
 800206c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002070:	6313      	str	r3, [r2, #48]	; 0x30
 8002072:	4b1b      	ldr	r3, [pc, #108]	; (80020e0 <FSMC_BANK3_MspInit+0xf4>)
 8002074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002076:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800207a:	603b      	str	r3, [r7, #0]
 800207c:	683b      	ldr	r3, [r7, #0]
  
  /* Common GPIO configuration */
  GPIO_Init_Structure.Mode      = GPIO_MODE_AF_PP;
 800207e:	2302      	movs	r3, #2
 8002080:	61bb      	str	r3, [r7, #24]
  GPIO_Init_Structure.Pull      = GPIO_PULLUP;
 8002082:	2301      	movs	r3, #1
 8002084:	61fb      	str	r3, [r7, #28]
  GPIO_Init_Structure.Speed     = GPIO_SPEED_HIGH;
 8002086:	2303      	movs	r3, #3
 8002088:	623b      	str	r3, [r7, #32]
  GPIO_Init_Structure.Alternate = GPIO_AF12_FSMC;
 800208a:	230c      	movs	r3, #12
 800208c:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* GPIOD configuration */
  GPIO_Init_Structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_8     |\
 800208e:	f64f 7333 	movw	r3, #65331	; 0xff33
 8002092:	617b      	str	r3, [r7, #20]
                              GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |\
                              GPIO_PIN_14 | GPIO_PIN_15;
   
  HAL_GPIO_Init(GPIOD, &GPIO_Init_Structure);
 8002094:	f107 0314 	add.w	r3, r7, #20
 8002098:	4619      	mov	r1, r3
 800209a:	4812      	ldr	r0, [pc, #72]	; (80020e4 <FSMC_BANK3_MspInit+0xf8>)
 800209c:	f001 f820 	bl	80030e0 <HAL_GPIO_Init>

  /* GPIOE configuration */  
  GPIO_Init_Structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_3| GPIO_PIN_4 | GPIO_PIN_7     |\
 80020a0:	f64f 739b 	movw	r3, #65435	; 0xff9b
 80020a4:	617b      	str	r3, [r7, #20]
                              GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 |\
                              GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &GPIO_Init_Structure);
 80020a6:	f107 0314 	add.w	r3, r7, #20
 80020aa:	4619      	mov	r1, r3
 80020ac:	480e      	ldr	r0, [pc, #56]	; (80020e8 <FSMC_BANK3_MspInit+0xfc>)
 80020ae:	f001 f817 	bl	80030e0 <HAL_GPIO_Init>
  
  /* GPIOF configuration */  
  GPIO_Init_Structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4     |\
 80020b2:	f24f 033f 	movw	r3, #61503	; 0xf03f
 80020b6:	617b      	str	r3, [r7, #20]
                              GPIO_PIN_5 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &GPIO_Init_Structure);
 80020b8:	f107 0314 	add.w	r3, r7, #20
 80020bc:	4619      	mov	r1, r3
 80020be:	480b      	ldr	r0, [pc, #44]	; (80020ec <FSMC_BANK3_MspInit+0x100>)
 80020c0:	f001 f80e 	bl	80030e0 <HAL_GPIO_Init>
  
  /* GPIOG configuration */  
  GPIO_Init_Structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4     |\
 80020c4:	f240 433f 	movw	r3, #1087	; 0x43f
 80020c8:	617b      	str	r3, [r7, #20]
                              GPIO_PIN_5 | GPIO_PIN_10;
  
  HAL_GPIO_Init(GPIOG, &GPIO_Init_Structure);  
 80020ca:	f107 0314 	add.w	r3, r7, #20
 80020ce:	4619      	mov	r1, r3
 80020d0:	4807      	ldr	r0, [pc, #28]	; (80020f0 <FSMC_BANK3_MspInit+0x104>)
 80020d2:	f001 f805 	bl	80030e0 <HAL_GPIO_Init>
}
 80020d6:	bf00      	nop
 80020d8:	3728      	adds	r7, #40	; 0x28
 80020da:	46bd      	mov	sp, r7
 80020dc:	bd80      	pop	{r7, pc}
 80020de:	bf00      	nop
 80020e0:	40023800 	.word	0x40023800
 80020e4:	40020c00 	.word	0x40020c00
 80020e8:	40021000 	.word	0x40021000
 80020ec:	40021400 	.word	0x40021400
 80020f0:	40021800 	.word	0x40021800

080020f4 <FSMC_BANK3_Init>:

/**
  * @brief  Initializes LCD IO.
  */
static void FSMC_BANK3_Init(void) 
{  
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b09c      	sub	sp, #112	; 0x70
 80020f8:	af00      	add	r7, sp, #0
  SRAM_HandleTypeDef hsram;
  FSMC_NORSRAM_TimingTypeDef SRAM_Timing;
  
  /*** Configure the SRAM Bank 3 ***/  
  /* Configure IPs */
  hsram.Instance  = FMC_NORSRAM_DEVICE;
 80020fa:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 80020fe:	623b      	str	r3, [r7, #32]
  hsram.Extended  = FMC_NORSRAM_EXTENDED_DEVICE;
 8002100:	4b1c      	ldr	r3, [pc, #112]	; (8002174 <FSMC_BANK3_Init+0x80>)
 8002102:	627b      	str	r3, [r7, #36]	; 0x24

  SRAM_Timing.AddressSetupTime      = 5;
 8002104:	2305      	movs	r3, #5
 8002106:	607b      	str	r3, [r7, #4]
  SRAM_Timing.AddressHoldTime       = 1;
 8002108:	2301      	movs	r3, #1
 800210a:	60bb      	str	r3, [r7, #8]
  SRAM_Timing.DataSetupTime         = 9;
 800210c:	2309      	movs	r3, #9
 800210e:	60fb      	str	r3, [r7, #12]
  SRAM_Timing.BusTurnAroundDuration = 0;
 8002110:	2300      	movs	r3, #0
 8002112:	613b      	str	r3, [r7, #16]
  SRAM_Timing.CLKDivision           = 2;
 8002114:	2302      	movs	r3, #2
 8002116:	617b      	str	r3, [r7, #20]
  SRAM_Timing.DataLatency           = 2;
 8002118:	2302      	movs	r3, #2
 800211a:	61bb      	str	r3, [r7, #24]
  SRAM_Timing.AccessMode            = FSMC_ACCESS_MODE_A;
 800211c:	2300      	movs	r3, #0
 800211e:	61fb      	str	r3, [r7, #28]
  
  hsram.Init.NSBank             = FSMC_NORSRAM_BANK3;
 8002120:	2304      	movs	r3, #4
 8002122:	62bb      	str	r3, [r7, #40]	; 0x28
  hsram.Init.DataAddressMux     = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8002124:	2300      	movs	r3, #0
 8002126:	62fb      	str	r3, [r7, #44]	; 0x2c
  hsram.Init.MemoryType         = FSMC_MEMORY_TYPE_SRAM;
 8002128:	2300      	movs	r3, #0
 800212a:	633b      	str	r3, [r7, #48]	; 0x30
  hsram.Init.MemoryDataWidth    = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 800212c:	2310      	movs	r3, #16
 800212e:	637b      	str	r3, [r7, #52]	; 0x34
  hsram.Init.BurstAccessMode    = FSMC_BURST_ACCESS_MODE_DISABLE;
 8002130:	2300      	movs	r3, #0
 8002132:	63bb      	str	r3, [r7, #56]	; 0x38
  hsram.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8002134:	2300      	movs	r3, #0
 8002136:	63fb      	str	r3, [r7, #60]	; 0x3c
  hsram.Init.WrapMode           = FSMC_WRAP_MODE_DISABLE;
 8002138:	2300      	movs	r3, #0
 800213a:	643b      	str	r3, [r7, #64]	; 0x40
  hsram.Init.WaitSignalActive   = FSMC_WAIT_TIMING_BEFORE_WS;
 800213c:	2300      	movs	r3, #0
 800213e:	647b      	str	r3, [r7, #68]	; 0x44
  hsram.Init.WriteOperation     = FSMC_WRITE_OPERATION_ENABLE;
 8002140:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002144:	64bb      	str	r3, [r7, #72]	; 0x48
  hsram.Init.WaitSignal         = FSMC_WAIT_SIGNAL_DISABLE;
 8002146:	2300      	movs	r3, #0
 8002148:	64fb      	str	r3, [r7, #76]	; 0x4c
  hsram.Init.ExtendedMode       = FSMC_EXTENDED_MODE_DISABLE;
 800214a:	2300      	movs	r3, #0
 800214c:	653b      	str	r3, [r7, #80]	; 0x50
  hsram.Init.AsynchronousWait   = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 800214e:	2300      	movs	r3, #0
 8002150:	657b      	str	r3, [r7, #84]	; 0x54
  hsram.Init.WriteBurst         = FSMC_WRITE_BURST_DISABLE;
 8002152:	2300      	movs	r3, #0
 8002154:	65bb      	str	r3, [r7, #88]	; 0x58
  hsram.Init.PageSize           = FSMC_PAGE_SIZE_NONE;
 8002156:	2300      	movs	r3, #0
 8002158:	667b      	str	r3, [r7, #100]	; 0x64

  /* Initialize the SRAM controller */
  FSMC_BANK3_MspInit();
 800215a:	f7ff ff47 	bl	8001fec <FSMC_BANK3_MspInit>
  HAL_SRAM_Init(&hsram, &SRAM_Timing, &SRAM_Timing);   
 800215e:	1d3a      	adds	r2, r7, #4
 8002160:	1d39      	adds	r1, r7, #4
 8002162:	f107 0320 	add.w	r3, r7, #32
 8002166:	4618      	mov	r0, r3
 8002168:	f003 fafe 	bl	8005768 <HAL_SRAM_Init>
}
 800216c:	bf00      	nop
 800216e:	3770      	adds	r7, #112	; 0x70
 8002170:	46bd      	mov	sp, r7
 8002172:	bd80      	pop	{r7, pc}
 8002174:	a0000104 	.word	0xa0000104

08002178 <FSMC_BANK3_WriteData>:
/**
  * @brief  Writes register value.
  * @param  Data: Data to be written 
  */
static void FSMC_BANK3_WriteData(uint16_t Data) 
{
 8002178:	b480      	push	{r7}
 800217a:	b083      	sub	sp, #12
 800217c:	af00      	add	r7, sp, #0
 800217e:	4603      	mov	r3, r0
 8002180:	80fb      	strh	r3, [r7, #6]
  /* Write 16-bit Reg */
  FMC_BANK3->RAM = Data;
 8002182:	f04f 42d0 	mov.w	r2, #1744830464	; 0x68000000
 8002186:	88fb      	ldrh	r3, [r7, #6]
 8002188:	8053      	strh	r3, [r2, #2]
}
 800218a:	bf00      	nop
 800218c:	370c      	adds	r7, #12
 800218e:	46bd      	mov	sp, r7
 8002190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002194:	4770      	bx	lr

08002196 <FSMC_BANK3_WriteReg>:
/**
  * @brief  Writes register address.
  * @param  Reg: Register to be written
  */
static void FSMC_BANK3_WriteReg(uint8_t Reg) 
{
 8002196:	b480      	push	{r7}
 8002198:	b083      	sub	sp, #12
 800219a:	af00      	add	r7, sp, #0
 800219c:	4603      	mov	r3, r0
 800219e:	71fb      	strb	r3, [r7, #7]
  /* Write 16-bit Index, then write register */
  FMC_BANK3->REG = Reg;
 80021a0:	f04f 43d0 	mov.w	r3, #1744830464	; 0x68000000
 80021a4:	79fa      	ldrb	r2, [r7, #7]
 80021a6:	b292      	uxth	r2, r2
 80021a8:	801a      	strh	r2, [r3, #0]
}
 80021aa:	bf00      	nop
 80021ac:	370c      	adds	r7, #12
 80021ae:	46bd      	mov	sp, r7
 80021b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b4:	4770      	bx	lr

080021b6 <FSMC_BANK3_ReadData>:
/**
  * @brief  Reads register value.
  * @retval Read value
  */
static uint16_t FSMC_BANK3_ReadData(void) 
{
 80021b6:	b480      	push	{r7}
 80021b8:	af00      	add	r7, sp, #0
  return FMC_BANK3->RAM;
 80021ba:	f04f 43d0 	mov.w	r3, #1744830464	; 0x68000000
 80021be:	885b      	ldrh	r3, [r3, #2]
 80021c0:	b29b      	uxth	r3, r3
}
 80021c2:	4618      	mov	r0, r3
 80021c4:	46bd      	mov	sp, r7
 80021c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ca:	4770      	bx	lr

080021cc <LCD_IO_Init>:

/**
  * @brief  Initializes LCD low level.
  */
void LCD_IO_Init(void) 
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	af00      	add	r7, sp, #0
  if(Is_LCD_IO_Initialized == 0)
 80021d0:	4b05      	ldr	r3, [pc, #20]	; (80021e8 <LCD_IO_Init+0x1c>)
 80021d2:	781b      	ldrb	r3, [r3, #0]
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d104      	bne.n	80021e2 <LCD_IO_Init+0x16>
  {
    Is_LCD_IO_Initialized = 1; 
 80021d8:	4b03      	ldr	r3, [pc, #12]	; (80021e8 <LCD_IO_Init+0x1c>)
 80021da:	2201      	movs	r2, #1
 80021dc:	701a      	strb	r2, [r3, #0]
    FSMC_BANK3_Init();
 80021de:	f7ff ff89 	bl	80020f4 <FSMC_BANK3_Init>
  }
}
 80021e2:	bf00      	nop
 80021e4:	bd80      	pop	{r7, pc}
 80021e6:	bf00      	nop
 80021e8:	20000680 	.word	0x20000680

080021ec <LCD_IO_WriteMultipleData>:
  * @brief  Write register value.
  * @param  pData Pointer on the register value
  * @param  Size Size of byte to transmit to the register
  */
void LCD_IO_WriteMultipleData(uint8_t *pData, uint32_t Size)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b084      	sub	sp, #16
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
 80021f4:	6039      	str	r1, [r7, #0]
  uint32_t counter;
  uint16_t *ptr = (uint16_t *) pData;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	60bb      	str	r3, [r7, #8]
  
  for (counter = 0; counter < Size; counter+=2)
 80021fa:	2300      	movs	r3, #0
 80021fc:	60fb      	str	r3, [r7, #12]
 80021fe:	e00a      	b.n	8002216 <LCD_IO_WriteMultipleData+0x2a>
  {  
    /* Write 16-bit Reg */
    FSMC_BANK3_WriteData(*ptr);
 8002200:	68bb      	ldr	r3, [r7, #8]
 8002202:	881b      	ldrh	r3, [r3, #0]
 8002204:	4618      	mov	r0, r3
 8002206:	f7ff ffb7 	bl	8002178 <FSMC_BANK3_WriteData>
    ptr++;
 800220a:	68bb      	ldr	r3, [r7, #8]
 800220c:	3302      	adds	r3, #2
 800220e:	60bb      	str	r3, [r7, #8]
  for (counter = 0; counter < Size; counter+=2)
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	3302      	adds	r3, #2
 8002214:	60fb      	str	r3, [r7, #12]
 8002216:	68fa      	ldr	r2, [r7, #12]
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	429a      	cmp	r2, r3
 800221c:	d3f0      	bcc.n	8002200 <LCD_IO_WriteMultipleData+0x14>
  }
}
 800221e:	bf00      	nop
 8002220:	bf00      	nop
 8002222:	3710      	adds	r7, #16
 8002224:	46bd      	mov	sp, r7
 8002226:	bd80      	pop	{r7, pc}

08002228 <LCD_IO_WriteReg>:
/**
  * @brief  Writes register on LCD register.
  * @param  Reg: Register to be written
  */
void LCD_IO_WriteReg(uint8_t Reg) 
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b082      	sub	sp, #8
 800222c:	af00      	add	r7, sp, #0
 800222e:	4603      	mov	r3, r0
 8002230:	71fb      	strb	r3, [r7, #7]
  /* Write 16-bit Index, then Write Reg */
  FSMC_BANK3_WriteReg(Reg);
 8002232:	79fb      	ldrb	r3, [r7, #7]
 8002234:	4618      	mov	r0, r3
 8002236:	f7ff ffae 	bl	8002196 <FSMC_BANK3_WriteReg>
}
 800223a:	bf00      	nop
 800223c:	3708      	adds	r7, #8
 800223e:	46bd      	mov	sp, r7
 8002240:	bd80      	pop	{r7, pc}

08002242 <LCD_IO_ReadData>:
  * @brief  Reads data from LCD data register.
  * @param  Reg: Register to be read
  * @retval Read data.
  */
uint16_t LCD_IO_ReadData(uint16_t Reg)
{
 8002242:	b580      	push	{r7, lr}
 8002244:	b082      	sub	sp, #8
 8002246:	af00      	add	r7, sp, #0
 8002248:	4603      	mov	r3, r0
 800224a:	80fb      	strh	r3, [r7, #6]
  FSMC_BANK3_WriteReg(Reg);
 800224c:	88fb      	ldrh	r3, [r7, #6]
 800224e:	b2db      	uxtb	r3, r3
 8002250:	4618      	mov	r0, r3
 8002252:	f7ff ffa0 	bl	8002196 <FSMC_BANK3_WriteReg>
  
  /* Read 16-bit Reg */  
  return FSMC_BANK3_ReadData();
 8002256:	f7ff ffae 	bl	80021b6 <FSMC_BANK3_ReadData>
 800225a:	4603      	mov	r3, r0
}
 800225c:	4618      	mov	r0, r3
 800225e:	3708      	adds	r7, #8
 8002260:	46bd      	mov	sp, r7
 8002262:	bd80      	pop	{r7, pc}

08002264 <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{ 
 8002264:	b580      	push	{r7, lr}
 8002266:	b082      	sub	sp, #8
 8002268:	af00      	add	r7, sp, #0
  uint8_t ret = LCD_ERROR;
 800226a:	2301      	movs	r3, #1
 800226c:	71fb      	strb	r3, [r7, #7]
  
  /* Default value for draw propriety */
  DrawProp.BackColor = 0xFFFF;
 800226e:	4b12      	ldr	r3, [pc, #72]	; (80022b8 <BSP_LCD_Init+0x54>)
 8002270:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002274:	605a      	str	r2, [r3, #4]
  DrawProp.pFont     = &Font24;
 8002276:	4b10      	ldr	r3, [pc, #64]	; (80022b8 <BSP_LCD_Init+0x54>)
 8002278:	4a10      	ldr	r2, [pc, #64]	; (80022bc <BSP_LCD_Init+0x58>)
 800227a:	609a      	str	r2, [r3, #8]
  DrawProp.TextColor = 0x0000;
 800227c:	4b0e      	ldr	r3, [pc, #56]	; (80022b8 <BSP_LCD_Init+0x54>)
 800227e:	2200      	movs	r2, #0
 8002280:	601a      	str	r2, [r3, #0]
  
  if(ili9325_drv.ReadID() == ILI9325_ID)
 8002282:	4b0f      	ldr	r3, [pc, #60]	; (80022c0 <BSP_LCD_Init+0x5c>)
 8002284:	685b      	ldr	r3, [r3, #4]
 8002286:	4798      	blx	r3
 8002288:	4603      	mov	r3, r0
 800228a:	461a      	mov	r2, r3
 800228c:	f249 3325 	movw	r3, #37669	; 0x9325
 8002290:	429a      	cmp	r2, r3
 8002292:	d10b      	bne.n	80022ac <BSP_LCD_Init+0x48>
  {
    lcd_drv = &ili9325_drv;
 8002294:	4b0b      	ldr	r3, [pc, #44]	; (80022c4 <BSP_LCD_Init+0x60>)
 8002296:	4a0a      	ldr	r2, [pc, #40]	; (80022c0 <BSP_LCD_Init+0x5c>)
 8002298:	601a      	str	r2, [r3, #0]

    /* LCD Init */   
    lcd_drv->Init();
 800229a:	4b0a      	ldr	r3, [pc, #40]	; (80022c4 <BSP_LCD_Init+0x60>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	4798      	blx	r3
    
    /* Initialize the font */
    BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 80022a2:	4806      	ldr	r0, [pc, #24]	; (80022bc <BSP_LCD_Init+0x58>)
 80022a4:	f000 f848 	bl	8002338 <BSP_LCD_SetFont>

    ret = LCD_OK;
 80022a8:	2300      	movs	r3, #0
 80022aa:	71fb      	strb	r3, [r7, #7]
  }
  
  return ret;
 80022ac:	79fb      	ldrb	r3, [r7, #7]
}
 80022ae:	4618      	mov	r0, r3
 80022b0:	3708      	adds	r7, #8
 80022b2:	46bd      	mov	sp, r7
 80022b4:	bd80      	pop	{r7, pc}
 80022b6:	bf00      	nop
 80022b8:	20000684 	.word	0x20000684
 80022bc:	20000058 	.word	0x20000058
 80022c0:	20000004 	.word	0x20000004
 80022c4:	20000690 	.word	0x20000690

080022c8 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size. 
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	af00      	add	r7, sp, #0
  return(lcd_drv->GetLcdPixelWidth());
 80022cc:	4b03      	ldr	r3, [pc, #12]	; (80022dc <BSP_LCD_GetXSize+0x14>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022d2:	4798      	blx	r3
 80022d4:	4603      	mov	r3, r0
}
 80022d6:	4618      	mov	r0, r3
 80022d8:	bd80      	pop	{r7, pc}
 80022da:	bf00      	nop
 80022dc:	20000690 	.word	0x20000690

080022e0 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.  
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	af00      	add	r7, sp, #0
  return(lcd_drv->GetLcdPixelHeight());
 80022e4:	4b03      	ldr	r3, [pc, #12]	; (80022f4 <BSP_LCD_GetYSize+0x14>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022ea:	4798      	blx	r3
 80022ec:	4603      	mov	r3, r0
}
 80022ee:	4618      	mov	r0, r3
 80022f0:	bd80      	pop	{r7, pc}
 80022f2:	bf00      	nop
 80022f4:	20000690 	.word	0x20000690

080022f8 <BSP_LCD_SetTextColor>:
/**
  * @brief  Sets the LCD text color.
  * @param  Color: Text color code RGB(5-6-5)
  */
void BSP_LCD_SetTextColor(uint16_t Color)
{
 80022f8:	b480      	push	{r7}
 80022fa:	b083      	sub	sp, #12
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	4603      	mov	r3, r0
 8002300:	80fb      	strh	r3, [r7, #6]
  DrawProp.TextColor = Color;
 8002302:	88fb      	ldrh	r3, [r7, #6]
 8002304:	4a03      	ldr	r2, [pc, #12]	; (8002314 <BSP_LCD_SetTextColor+0x1c>)
 8002306:	6013      	str	r3, [r2, #0]
}
 8002308:	bf00      	nop
 800230a:	370c      	adds	r7, #12
 800230c:	46bd      	mov	sp, r7
 800230e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002312:	4770      	bx	lr
 8002314:	20000684 	.word	0x20000684

08002318 <BSP_LCD_SetBackColor>:
/**
  * @brief  Sets the LCD background color.
  * @param  Color: Background color code RGB(5-6-5)
  */
void BSP_LCD_SetBackColor(uint16_t Color)
{
 8002318:	b480      	push	{r7}
 800231a:	b083      	sub	sp, #12
 800231c:	af00      	add	r7, sp, #0
 800231e:	4603      	mov	r3, r0
 8002320:	80fb      	strh	r3, [r7, #6]
  DrawProp.BackColor = Color;
 8002322:	88fb      	ldrh	r3, [r7, #6]
 8002324:	4a03      	ldr	r2, [pc, #12]	; (8002334 <BSP_LCD_SetBackColor+0x1c>)
 8002326:	6053      	str	r3, [r2, #4]
}
 8002328:	bf00      	nop
 800232a:	370c      	adds	r7, #12
 800232c:	46bd      	mov	sp, r7
 800232e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002332:	4770      	bx	lr
 8002334:	20000684 	.word	0x20000684

08002338 <BSP_LCD_SetFont>:
/**
  * @brief  Sets the LCD text font.
  * @param  fonts: Font to be used
  */
void BSP_LCD_SetFont(sFONT *fonts)
{
 8002338:	b480      	push	{r7}
 800233a:	b083      	sub	sp, #12
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
  DrawProp.pFont = fonts;
 8002340:	4a04      	ldr	r2, [pc, #16]	; (8002354 <BSP_LCD_SetFont+0x1c>)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6093      	str	r3, [r2, #8]
}
 8002346:	bf00      	nop
 8002348:	370c      	adds	r7, #12
 800234a:	46bd      	mov	sp, r7
 800234c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002350:	4770      	bx	lr
 8002352:	bf00      	nop
 8002354:	20000684 	.word	0x20000684

08002358 <BSP_LCD_Clear>:
/**
  * @brief  Clears the hole LCD.
  * @param  Color: Color of the background
  */
void BSP_LCD_Clear(uint16_t Color)
{ 
 8002358:	b590      	push	{r4, r7, lr}
 800235a:	b085      	sub	sp, #20
 800235c:	af00      	add	r7, sp, #0
 800235e:	4603      	mov	r3, r0
 8002360:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8002362:	2300      	movs	r3, #0
 8002364:	60fb      	str	r3, [r7, #12]
  uint32_t color_backup = DrawProp.TextColor; 
 8002366:	4b15      	ldr	r3, [pc, #84]	; (80023bc <BSP_LCD_Clear+0x64>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	60bb      	str	r3, [r7, #8]
  DrawProp.TextColor = Color;
 800236c:	88fb      	ldrh	r3, [r7, #6]
 800236e:	4a13      	ldr	r2, [pc, #76]	; (80023bc <BSP_LCD_Clear+0x64>)
 8002370:	6013      	str	r3, [r2, #0]
  
  for(counter = 0; counter < BSP_LCD_GetYSize(); counter++)
 8002372:	2300      	movs	r3, #0
 8002374:	60fb      	str	r3, [r7, #12]
 8002376:	e00d      	b.n	8002394 <BSP_LCD_Clear+0x3c>
  {
    BSP_LCD_DrawHLine(0, counter, BSP_LCD_GetXSize());
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	b29c      	uxth	r4, r3
 800237c:	f7ff ffa4 	bl	80022c8 <BSP_LCD_GetXSize>
 8002380:	4603      	mov	r3, r0
 8002382:	b29b      	uxth	r3, r3
 8002384:	461a      	mov	r2, r3
 8002386:	4621      	mov	r1, r4
 8002388:	2000      	movs	r0, #0
 800238a:	f000 f8ed 	bl	8002568 <BSP_LCD_DrawHLine>
  for(counter = 0; counter < BSP_LCD_GetYSize(); counter++)
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	3301      	adds	r3, #1
 8002392:	60fb      	str	r3, [r7, #12]
 8002394:	f7ff ffa4 	bl	80022e0 <BSP_LCD_GetYSize>
 8002398:	4602      	mov	r2, r0
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	4293      	cmp	r3, r2
 800239e:	d3eb      	bcc.n	8002378 <BSP_LCD_Clear+0x20>
  }
  DrawProp.TextColor = color_backup; 
 80023a0:	4a06      	ldr	r2, [pc, #24]	; (80023bc <BSP_LCD_Clear+0x64>)
 80023a2:	68bb      	ldr	r3, [r7, #8]
 80023a4:	6013      	str	r3, [r2, #0]
  BSP_LCD_SetTextColor(DrawProp.TextColor);
 80023a6:	4b05      	ldr	r3, [pc, #20]	; (80023bc <BSP_LCD_Clear+0x64>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	b29b      	uxth	r3, r3
 80023ac:	4618      	mov	r0, r3
 80023ae:	f7ff ffa3 	bl	80022f8 <BSP_LCD_SetTextColor>
}
 80023b2:	bf00      	nop
 80023b4:	3714      	adds	r7, #20
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bd90      	pop	{r4, r7, pc}
 80023ba:	bf00      	nop
 80023bc:	20000684 	.word	0x20000684

080023c0 <BSP_LCD_DisplayChar>:
  * @param  Ypos: Line where to display the character shape.
  * @param  Ascii: Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E 
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b082      	sub	sp, #8
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	4603      	mov	r3, r0
 80023c8:	80fb      	strh	r3, [r7, #6]
 80023ca:	460b      	mov	r3, r1
 80023cc:	80bb      	strh	r3, [r7, #4]
 80023ce:	4613      	mov	r3, r2
 80023d0:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp.pFont->table[(Ascii-' ') *\
 80023d2:	4b0f      	ldr	r3, [pc, #60]	; (8002410 <BSP_LCD_DisplayChar+0x50>)
 80023d4:	689b      	ldr	r3, [r3, #8]
 80023d6:	681a      	ldr	r2, [r3, #0]
 80023d8:	78fb      	ldrb	r3, [r7, #3]
 80023da:	3b20      	subs	r3, #32
    DrawProp.pFont->Height * ((DrawProp.pFont->Width + 7) / 8)]);
 80023dc:	490c      	ldr	r1, [pc, #48]	; (8002410 <BSP_LCD_DisplayChar+0x50>)
 80023de:	6889      	ldr	r1, [r1, #8]
 80023e0:	88c9      	ldrh	r1, [r1, #6]
  DrawChar(Xpos, Ypos, &DrawProp.pFont->table[(Ascii-' ') *\
 80023e2:	fb03 f101 	mul.w	r1, r3, r1
    DrawProp.pFont->Height * ((DrawProp.pFont->Width + 7) / 8)]);
 80023e6:	4b0a      	ldr	r3, [pc, #40]	; (8002410 <BSP_LCD_DisplayChar+0x50>)
 80023e8:	689b      	ldr	r3, [r3, #8]
 80023ea:	889b      	ldrh	r3, [r3, #4]
 80023ec:	3307      	adds	r3, #7
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	da00      	bge.n	80023f4 <BSP_LCD_DisplayChar+0x34>
 80023f2:	3307      	adds	r3, #7
 80023f4:	10db      	asrs	r3, r3, #3
 80023f6:	fb01 f303 	mul.w	r3, r1, r3
  DrawChar(Xpos, Ypos, &DrawProp.pFont->table[(Ascii-' ') *\
 80023fa:	441a      	add	r2, r3
 80023fc:	88b9      	ldrh	r1, [r7, #4]
 80023fe:	88fb      	ldrh	r3, [r7, #6]
 8002400:	4618      	mov	r0, r3
 8002402:	f000 f8eb 	bl	80025dc <DrawChar>
}
 8002406:	bf00      	nop
 8002408:	3708      	adds	r7, #8
 800240a:	46bd      	mov	sp, r7
 800240c:	bd80      	pop	{r7, pc}
 800240e:	bf00      	nop
 8002410:	20000684 	.word	0x20000684

08002414 <BSP_LCD_DisplayStringAt>:
  *            @arg  CENTER_MODE
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE   
  */
void BSP_LCD_DisplayStringAt(uint16_t Xpos, uint16_t Ypos, uint8_t *Text, Line_ModeTypdef Mode)
{
 8002414:	b590      	push	{r4, r7, lr}
 8002416:	b089      	sub	sp, #36	; 0x24
 8002418:	af00      	add	r7, sp, #0
 800241a:	60ba      	str	r2, [r7, #8]
 800241c:	461a      	mov	r2, r3
 800241e:	4603      	mov	r3, r0
 8002420:	81fb      	strh	r3, [r7, #14]
 8002422:	460b      	mov	r3, r1
 8002424:	81bb      	strh	r3, [r7, #12]
 8002426:	4613      	mov	r3, r2
 8002428:	71fb      	strb	r3, [r7, #7]
  uint16_t refcolumn = 1, i = 0;
 800242a:	2301      	movs	r3, #1
 800242c:	83fb      	strh	r3, [r7, #30]
 800242e:	2300      	movs	r3, #0
 8002430:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 8002432:	2300      	movs	r3, #0
 8002434:	61bb      	str	r3, [r7, #24]
 8002436:	2300      	movs	r3, #0
 8002438:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = Text;
 800243a:	68bb      	ldr	r3, [r7, #8]
 800243c:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 800243e:	e002      	b.n	8002446 <BSP_LCD_DisplayStringAt+0x32>
 8002440:	69bb      	ldr	r3, [r7, #24]
 8002442:	3301      	adds	r3, #1
 8002444:	61bb      	str	r3, [r7, #24]
 8002446:	697b      	ldr	r3, [r7, #20]
 8002448:	1c5a      	adds	r2, r3, #1
 800244a:	617a      	str	r2, [r7, #20]
 800244c:	781b      	ldrb	r3, [r3, #0]
 800244e:	2b00      	cmp	r3, #0
 8002450:	d1f6      	bne.n	8002440 <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp.pFont->Width);
 8002452:	f7ff ff39 	bl	80022c8 <BSP_LCD_GetXSize>
 8002456:	4602      	mov	r2, r0
 8002458:	4b34      	ldr	r3, [pc, #208]	; (800252c <BSP_LCD_DisplayStringAt+0x118>)
 800245a:	689b      	ldr	r3, [r3, #8]
 800245c:	889b      	ldrh	r3, [r3, #4]
 800245e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002462:	613b      	str	r3, [r7, #16]
  
  switch (Mode)
 8002464:	79fb      	ldrb	r3, [r7, #7]
 8002466:	2b03      	cmp	r3, #3
 8002468:	d014      	beq.n	8002494 <BSP_LCD_DisplayStringAt+0x80>
 800246a:	2b03      	cmp	r3, #3
 800246c:	dc23      	bgt.n	80024b6 <BSP_LCD_DisplayStringAt+0xa2>
 800246e:	2b01      	cmp	r3, #1
 8002470:	d002      	beq.n	8002478 <BSP_LCD_DisplayStringAt+0x64>
 8002472:	2b02      	cmp	r3, #2
 8002474:	d011      	beq.n	800249a <BSP_LCD_DisplayStringAt+0x86>
 8002476:	e01e      	b.n	80024b6 <BSP_LCD_DisplayStringAt+0xa2>
  {
  case CENTER_MODE:
    {
      refcolumn = Xpos + ((xsize - size)* DrawProp.pFont->Width) / 2;
 8002478:	693a      	ldr	r2, [r7, #16]
 800247a:	69bb      	ldr	r3, [r7, #24]
 800247c:	1ad3      	subs	r3, r2, r3
 800247e:	4a2b      	ldr	r2, [pc, #172]	; (800252c <BSP_LCD_DisplayStringAt+0x118>)
 8002480:	6892      	ldr	r2, [r2, #8]
 8002482:	8892      	ldrh	r2, [r2, #4]
 8002484:	fb02 f303 	mul.w	r3, r2, r3
 8002488:	085b      	lsrs	r3, r3, #1
 800248a:	b29a      	uxth	r2, r3
 800248c:	89fb      	ldrh	r3, [r7, #14]
 800248e:	4413      	add	r3, r2
 8002490:	83fb      	strh	r3, [r7, #30]
      break;
 8002492:	e013      	b.n	80024bc <BSP_LCD_DisplayStringAt+0xa8>
    }
  case LEFT_MODE:
    {
      refcolumn = Xpos;
 8002494:	89fb      	ldrh	r3, [r7, #14]
 8002496:	83fb      	strh	r3, [r7, #30]
      break;
 8002498:	e010      	b.n	80024bc <BSP_LCD_DisplayStringAt+0xa8>
    }
  case RIGHT_MODE:
    {
      refcolumn =  - Xpos + ((xsize - size)*DrawProp.pFont->Width);
 800249a:	693a      	ldr	r2, [r7, #16]
 800249c:	69bb      	ldr	r3, [r7, #24]
 800249e:	1ad3      	subs	r3, r2, r3
 80024a0:	b29a      	uxth	r2, r3
 80024a2:	4b22      	ldr	r3, [pc, #136]	; (800252c <BSP_LCD_DisplayStringAt+0x118>)
 80024a4:	689b      	ldr	r3, [r3, #8]
 80024a6:	889b      	ldrh	r3, [r3, #4]
 80024a8:	fb12 f303 	smulbb	r3, r2, r3
 80024ac:	b29a      	uxth	r2, r3
 80024ae:	89fb      	ldrh	r3, [r7, #14]
 80024b0:	1ad3      	subs	r3, r2, r3
 80024b2:	83fb      	strh	r3, [r7, #30]
      break;
 80024b4:	e002      	b.n	80024bc <BSP_LCD_DisplayStringAt+0xa8>
    }    
  default:
    {
      refcolumn = Xpos;
 80024b6:	89fb      	ldrh	r3, [r7, #14]
 80024b8:	83fb      	strh	r3, [r7, #30]
      break;
 80024ba:	bf00      	nop
    }
  }
  
  /* Send the string character by character on lCD */
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp.pFont->Width)) & 0xFFFF) >= DrawProp.pFont->Width))
 80024bc:	e012      	b.n	80024e4 <BSP_LCD_DisplayStringAt+0xd0>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(refcolumn, Ypos, *Text);
 80024be:	68bb      	ldr	r3, [r7, #8]
 80024c0:	781a      	ldrb	r2, [r3, #0]
 80024c2:	89b9      	ldrh	r1, [r7, #12]
 80024c4:	8bfb      	ldrh	r3, [r7, #30]
 80024c6:	4618      	mov	r0, r3
 80024c8:	f7ff ff7a 	bl	80023c0 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp.pFont->Width;
 80024cc:	4b17      	ldr	r3, [pc, #92]	; (800252c <BSP_LCD_DisplayStringAt+0x118>)
 80024ce:	689b      	ldr	r3, [r3, #8]
 80024d0:	889a      	ldrh	r2, [r3, #4]
 80024d2:	8bfb      	ldrh	r3, [r7, #30]
 80024d4:	4413      	add	r3, r2
 80024d6:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    Text++;
 80024d8:	68bb      	ldr	r3, [r7, #8]
 80024da:	3301      	adds	r3, #1
 80024dc:	60bb      	str	r3, [r7, #8]
    i++;
 80024de:	8bbb      	ldrh	r3, [r7, #28]
 80024e0:	3301      	adds	r3, #1
 80024e2:	83bb      	strh	r3, [r7, #28]
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp.pFont->Width)) & 0xFFFF) >= DrawProp.pFont->Width))
 80024e4:	68bb      	ldr	r3, [r7, #8]
 80024e6:	781b      	ldrb	r3, [r3, #0]
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	bf14      	ite	ne
 80024ec:	2301      	movne	r3, #1
 80024ee:	2300      	moveq	r3, #0
 80024f0:	b2dc      	uxtb	r4, r3
 80024f2:	f7ff fee9 	bl	80022c8 <BSP_LCD_GetXSize>
 80024f6:	4601      	mov	r1, r0
 80024f8:	8bbb      	ldrh	r3, [r7, #28]
 80024fa:	4a0c      	ldr	r2, [pc, #48]	; (800252c <BSP_LCD_DisplayStringAt+0x118>)
 80024fc:	6892      	ldr	r2, [r2, #8]
 80024fe:	8892      	ldrh	r2, [r2, #4]
 8002500:	fb02 f303 	mul.w	r3, r2, r3
 8002504:	1acb      	subs	r3, r1, r3
 8002506:	b29b      	uxth	r3, r3
 8002508:	4a08      	ldr	r2, [pc, #32]	; (800252c <BSP_LCD_DisplayStringAt+0x118>)
 800250a:	6892      	ldr	r2, [r2, #8]
 800250c:	8892      	ldrh	r2, [r2, #4]
 800250e:	4293      	cmp	r3, r2
 8002510:	bf2c      	ite	cs
 8002512:	2301      	movcs	r3, #1
 8002514:	2300      	movcc	r3, #0
 8002516:	b2db      	uxtb	r3, r3
 8002518:	4023      	ands	r3, r4
 800251a:	b2db      	uxtb	r3, r3
 800251c:	2b00      	cmp	r3, #0
 800251e:	d1ce      	bne.n	80024be <BSP_LCD_DisplayStringAt+0xaa>
  }
}
 8002520:	bf00      	nop
 8002522:	bf00      	nop
 8002524:	3724      	adds	r7, #36	; 0x24
 8002526:	46bd      	mov	sp, r7
 8002528:	bd90      	pop	{r4, r7, pc}
 800252a:	bf00      	nop
 800252c:	20000684 	.word	0x20000684

08002530 <BSP_LCD_DrawPixel>:
  * @param  Xpos: X position 
  * @param  Ypos: Y position
  * @param  RGB_Code: Pixel color in RGB mode (5-6-5)  
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint16_t RGB_Code)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b082      	sub	sp, #8
 8002534:	af00      	add	r7, sp, #0
 8002536:	4603      	mov	r3, r0
 8002538:	80fb      	strh	r3, [r7, #6]
 800253a:	460b      	mov	r3, r1
 800253c:	80bb      	strh	r3, [r7, #4]
 800253e:	4613      	mov	r3, r2
 8002540:	807b      	strh	r3, [r7, #2]
  if(lcd_drv->WritePixel != NULL)
 8002542:	4b08      	ldr	r3, [pc, #32]	; (8002564 <BSP_LCD_DrawPixel+0x34>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	695b      	ldr	r3, [r3, #20]
 8002548:	2b00      	cmp	r3, #0
 800254a:	d006      	beq.n	800255a <BSP_LCD_DrawPixel+0x2a>
  {
    lcd_drv->WritePixel(Xpos, Ypos, RGB_Code);
 800254c:	4b05      	ldr	r3, [pc, #20]	; (8002564 <BSP_LCD_DrawPixel+0x34>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	695b      	ldr	r3, [r3, #20]
 8002552:	887a      	ldrh	r2, [r7, #2]
 8002554:	88b9      	ldrh	r1, [r7, #4]
 8002556:	88f8      	ldrh	r0, [r7, #6]
 8002558:	4798      	blx	r3
  }
}
 800255a:	bf00      	nop
 800255c:	3708      	adds	r7, #8
 800255e:	46bd      	mov	sp, r7
 8002560:	bd80      	pop	{r7, pc}
 8002562:	bf00      	nop
 8002564:	20000690 	.word	0x20000690

08002568 <BSP_LCD_DrawHLine>:
  * @param  Xpos: X position
  * @param  Ypos: Y position
  * @param  Length: Line length
  */
void BSP_LCD_DrawHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8002568:	b590      	push	{r4, r7, lr}
 800256a:	b085      	sub	sp, #20
 800256c:	af00      	add	r7, sp, #0
 800256e:	4603      	mov	r3, r0
 8002570:	80fb      	strh	r3, [r7, #6]
 8002572:	460b      	mov	r3, r1
 8002574:	80bb      	strh	r3, [r7, #4]
 8002576:	4613      	mov	r3, r2
 8002578:	807b      	strh	r3, [r7, #2]
  uint32_t index = 0;
 800257a:	2300      	movs	r3, #0
 800257c:	60fb      	str	r3, [r7, #12]
  
  if(lcd_drv->DrawHLine != NULL)
 800257e:	4b15      	ldr	r3, [pc, #84]	; (80025d4 <BSP_LCD_DrawHLine+0x6c>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	6a1b      	ldr	r3, [r3, #32]
 8002584:	2b00      	cmp	r3, #0
 8002586:	d00a      	beq.n	800259e <BSP_LCD_DrawHLine+0x36>
  {
    lcd_drv->DrawHLine(DrawProp.TextColor, Xpos, Ypos, Length);
 8002588:	4b12      	ldr	r3, [pc, #72]	; (80025d4 <BSP_LCD_DrawHLine+0x6c>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	6a1c      	ldr	r4, [r3, #32]
 800258e:	4b12      	ldr	r3, [pc, #72]	; (80025d8 <BSP_LCD_DrawHLine+0x70>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	b298      	uxth	r0, r3
 8002594:	887b      	ldrh	r3, [r7, #2]
 8002596:	88ba      	ldrh	r2, [r7, #4]
 8002598:	88f9      	ldrh	r1, [r7, #6]
 800259a:	47a0      	blx	r4
    for(index = 0; index < Length; index++)
    {
      BSP_LCD_DrawPixel((Xpos + index), Ypos, DrawProp.TextColor);
    }
  }
}
 800259c:	e015      	b.n	80025ca <BSP_LCD_DrawHLine+0x62>
    for(index = 0; index < Length; index++)
 800259e:	2300      	movs	r3, #0
 80025a0:	60fb      	str	r3, [r7, #12]
 80025a2:	e00e      	b.n	80025c2 <BSP_LCD_DrawHLine+0x5a>
      BSP_LCD_DrawPixel((Xpos + index), Ypos, DrawProp.TextColor);
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	b29a      	uxth	r2, r3
 80025a8:	88fb      	ldrh	r3, [r7, #6]
 80025aa:	4413      	add	r3, r2
 80025ac:	b29b      	uxth	r3, r3
 80025ae:	4a0a      	ldr	r2, [pc, #40]	; (80025d8 <BSP_LCD_DrawHLine+0x70>)
 80025b0:	6812      	ldr	r2, [r2, #0]
 80025b2:	b292      	uxth	r2, r2
 80025b4:	88b9      	ldrh	r1, [r7, #4]
 80025b6:	4618      	mov	r0, r3
 80025b8:	f7ff ffba 	bl	8002530 <BSP_LCD_DrawPixel>
    for(index = 0; index < Length; index++)
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	3301      	adds	r3, #1
 80025c0:	60fb      	str	r3, [r7, #12]
 80025c2:	887b      	ldrh	r3, [r7, #2]
 80025c4:	68fa      	ldr	r2, [r7, #12]
 80025c6:	429a      	cmp	r2, r3
 80025c8:	d3ec      	bcc.n	80025a4 <BSP_LCD_DrawHLine+0x3c>
}
 80025ca:	bf00      	nop
 80025cc:	3714      	adds	r7, #20
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bd90      	pop	{r4, r7, pc}
 80025d2:	bf00      	nop
 80025d4:	20000690 	.word	0x20000690
 80025d8:	20000684 	.word	0x20000684

080025dc <DrawChar>:
  * @param  Xpos: Line where to display the character shape
  * @param  Ypos: Start column address
  * @param  c: Pointer to the character data
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b088      	sub	sp, #32
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	4603      	mov	r3, r0
 80025e4:	603a      	str	r2, [r7, #0]
 80025e6:	80fb      	strh	r3, [r7, #6]
 80025e8:	460b      	mov	r3, r1
 80025ea:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 80025ec:	2300      	movs	r3, #0
 80025ee:	61fb      	str	r3, [r7, #28]
 80025f0:	2300      	movs	r3, #0
 80025f2:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t offset;
  uint8_t *pchar;
  uint32_t line;
  
  height = DrawProp.pFont->Height;
 80025f4:	4b45      	ldr	r3, [pc, #276]	; (800270c <DrawChar+0x130>)
 80025f6:	689b      	ldr	r3, [r3, #8]
 80025f8:	88db      	ldrh	r3, [r3, #6]
 80025fa:	827b      	strh	r3, [r7, #18]
  width  = DrawProp.pFont->Width;
 80025fc:	4b43      	ldr	r3, [pc, #268]	; (800270c <DrawChar+0x130>)
 80025fe:	689b      	ldr	r3, [r3, #8]
 8002600:	889b      	ldrh	r3, [r3, #4]
 8002602:	823b      	strh	r3, [r7, #16]
  
  offset =  8 *((width + 7)/8) -  width ;
 8002604:	8a3b      	ldrh	r3, [r7, #16]
 8002606:	3307      	adds	r3, #7
 8002608:	2b00      	cmp	r3, #0
 800260a:	da00      	bge.n	800260e <DrawChar+0x32>
 800260c:	3307      	adds	r3, #7
 800260e:	10db      	asrs	r3, r3, #3
 8002610:	b2db      	uxtb	r3, r3
 8002612:	00db      	lsls	r3, r3, #3
 8002614:	b2da      	uxtb	r2, r3
 8002616:	8a3b      	ldrh	r3, [r7, #16]
 8002618:	b2db      	uxtb	r3, r3
 800261a:	1ad3      	subs	r3, r2, r3
 800261c:	73fb      	strb	r3, [r7, #15]
  
  for(i = 0; i < height; i++)
 800261e:	2300      	movs	r3, #0
 8002620:	61fb      	str	r3, [r7, #28]
 8002622:	e069      	b.n	80026f8 <DrawChar+0x11c>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 8002624:	8a3b      	ldrh	r3, [r7, #16]
 8002626:	3307      	adds	r3, #7
 8002628:	2b00      	cmp	r3, #0
 800262a:	da00      	bge.n	800262e <DrawChar+0x52>
 800262c:	3307      	adds	r3, #7
 800262e:	10db      	asrs	r3, r3, #3
 8002630:	461a      	mov	r2, r3
 8002632:	69fb      	ldr	r3, [r7, #28]
 8002634:	fb02 f303 	mul.w	r3, r2, r3
 8002638:	683a      	ldr	r2, [r7, #0]
 800263a:	4413      	add	r3, r2
 800263c:	60bb      	str	r3, [r7, #8]
    
    switch(((width + 7)/8))
 800263e:	8a3b      	ldrh	r3, [r7, #16]
 8002640:	3307      	adds	r3, #7
 8002642:	2b00      	cmp	r3, #0
 8002644:	da00      	bge.n	8002648 <DrawChar+0x6c>
 8002646:	3307      	adds	r3, #7
 8002648:	10db      	asrs	r3, r3, #3
 800264a:	2b01      	cmp	r3, #1
 800264c:	d002      	beq.n	8002654 <DrawChar+0x78>
 800264e:	2b02      	cmp	r3, #2
 8002650:	d004      	beq.n	800265c <DrawChar+0x80>
 8002652:	e00c      	b.n	800266e <DrawChar+0x92>
    {
    case 1:
      line =  pchar[0];
 8002654:	68bb      	ldr	r3, [r7, #8]
 8002656:	781b      	ldrb	r3, [r3, #0]
 8002658:	617b      	str	r3, [r7, #20]
      break;    
 800265a:	e016      	b.n	800268a <DrawChar+0xae>

    case 2:
      line =  (pchar[0]<< 8) | pchar[1];
 800265c:	68bb      	ldr	r3, [r7, #8]
 800265e:	781b      	ldrb	r3, [r3, #0]
 8002660:	021b      	lsls	r3, r3, #8
 8002662:	68ba      	ldr	r2, [r7, #8]
 8002664:	3201      	adds	r2, #1
 8002666:	7812      	ldrb	r2, [r2, #0]
 8002668:	4313      	orrs	r3, r2
 800266a:	617b      	str	r3, [r7, #20]
      break;
 800266c:	e00d      	b.n	800268a <DrawChar+0xae>
      
    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];
 800266e:	68bb      	ldr	r3, [r7, #8]
 8002670:	781b      	ldrb	r3, [r3, #0]
 8002672:	041a      	lsls	r2, r3, #16
 8002674:	68bb      	ldr	r3, [r7, #8]
 8002676:	3301      	adds	r3, #1
 8002678:	781b      	ldrb	r3, [r3, #0]
 800267a:	021b      	lsls	r3, r3, #8
 800267c:	4313      	orrs	r3, r2
 800267e:	68ba      	ldr	r2, [r7, #8]
 8002680:	3202      	adds	r2, #2
 8002682:	7812      	ldrb	r2, [r2, #0]
 8002684:	4313      	orrs	r3, r2
 8002686:	617b      	str	r3, [r7, #20]
      break;
 8002688:	bf00      	nop
    }  
    
    for (j = 0; j < width; j++)
 800268a:	2300      	movs	r3, #0
 800268c:	61bb      	str	r3, [r7, #24]
 800268e:	e029      	b.n	80026e4 <DrawChar+0x108>
    {
      if(line & (1 << (width- j + offset- 1))) 
 8002690:	8a3a      	ldrh	r2, [r7, #16]
 8002692:	69bb      	ldr	r3, [r7, #24]
 8002694:	1ad2      	subs	r2, r2, r3
 8002696:	7bfb      	ldrb	r3, [r7, #15]
 8002698:	4413      	add	r3, r2
 800269a:	3b01      	subs	r3, #1
 800269c:	2201      	movs	r2, #1
 800269e:	fa02 f303 	lsl.w	r3, r2, r3
 80026a2:	461a      	mov	r2, r3
 80026a4:	697b      	ldr	r3, [r7, #20]
 80026a6:	4013      	ands	r3, r2
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d00c      	beq.n	80026c6 <DrawChar+0xea>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp.TextColor);
 80026ac:	69bb      	ldr	r3, [r7, #24]
 80026ae:	b29a      	uxth	r2, r3
 80026b0:	88fb      	ldrh	r3, [r7, #6]
 80026b2:	4413      	add	r3, r2
 80026b4:	b29b      	uxth	r3, r3
 80026b6:	4a15      	ldr	r2, [pc, #84]	; (800270c <DrawChar+0x130>)
 80026b8:	6812      	ldr	r2, [r2, #0]
 80026ba:	b292      	uxth	r2, r2
 80026bc:	88b9      	ldrh	r1, [r7, #4]
 80026be:	4618      	mov	r0, r3
 80026c0:	f7ff ff36 	bl	8002530 <BSP_LCD_DrawPixel>
 80026c4:	e00b      	b.n	80026de <DrawChar+0x102>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp.BackColor);
 80026c6:	69bb      	ldr	r3, [r7, #24]
 80026c8:	b29a      	uxth	r2, r3
 80026ca:	88fb      	ldrh	r3, [r7, #6]
 80026cc:	4413      	add	r3, r2
 80026ce:	b29b      	uxth	r3, r3
 80026d0:	4a0e      	ldr	r2, [pc, #56]	; (800270c <DrawChar+0x130>)
 80026d2:	6852      	ldr	r2, [r2, #4]
 80026d4:	b292      	uxth	r2, r2
 80026d6:	88b9      	ldrh	r1, [r7, #4]
 80026d8:	4618      	mov	r0, r3
 80026da:	f7ff ff29 	bl	8002530 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 80026de:	69bb      	ldr	r3, [r7, #24]
 80026e0:	3301      	adds	r3, #1
 80026e2:	61bb      	str	r3, [r7, #24]
 80026e4:	8a3b      	ldrh	r3, [r7, #16]
 80026e6:	69ba      	ldr	r2, [r7, #24]
 80026e8:	429a      	cmp	r2, r3
 80026ea:	d3d1      	bcc.n	8002690 <DrawChar+0xb4>
      } 
    }
    Ypos++;
 80026ec:	88bb      	ldrh	r3, [r7, #4]
 80026ee:	3301      	adds	r3, #1
 80026f0:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 80026f2:	69fb      	ldr	r3, [r7, #28]
 80026f4:	3301      	adds	r3, #1
 80026f6:	61fb      	str	r3, [r7, #28]
 80026f8:	8a7b      	ldrh	r3, [r7, #18]
 80026fa:	69fa      	ldr	r2, [r7, #28]
 80026fc:	429a      	cmp	r2, r3
 80026fe:	d391      	bcc.n	8002624 <DrawChar+0x48>
  }
}
 8002700:	bf00      	nop
 8002702:	bf00      	nop
 8002704:	3720      	adds	r7, #32
 8002706:	46bd      	mov	sp, r7
 8002708:	bd80      	pop	{r7, pc}
 800270a:	bf00      	nop
 800270c:	20000684 	.word	0x20000684

08002710 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002714:	4b0e      	ldr	r3, [pc, #56]	; (8002750 <HAL_Init+0x40>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	4a0d      	ldr	r2, [pc, #52]	; (8002750 <HAL_Init+0x40>)
 800271a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800271e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002720:	4b0b      	ldr	r3, [pc, #44]	; (8002750 <HAL_Init+0x40>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	4a0a      	ldr	r2, [pc, #40]	; (8002750 <HAL_Init+0x40>)
 8002726:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800272a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800272c:	4b08      	ldr	r3, [pc, #32]	; (8002750 <HAL_Init+0x40>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	4a07      	ldr	r2, [pc, #28]	; (8002750 <HAL_Init+0x40>)
 8002732:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002736:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002738:	2003      	movs	r0, #3
 800273a:	f000 fbb1 	bl	8002ea0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800273e:	2000      	movs	r0, #0
 8002740:	f000 f808 	bl	8002754 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002744:	f7fe fcfe 	bl	8001144 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002748:	2300      	movs	r3, #0
}
 800274a:	4618      	mov	r0, r3
 800274c:	bd80      	pop	{r7, pc}
 800274e:	bf00      	nop
 8002750:	40023c00 	.word	0x40023c00

08002754 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b082      	sub	sp, #8
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800275c:	4b12      	ldr	r3, [pc, #72]	; (80027a8 <HAL_InitTick+0x54>)
 800275e:	681a      	ldr	r2, [r3, #0]
 8002760:	4b12      	ldr	r3, [pc, #72]	; (80027ac <HAL_InitTick+0x58>)
 8002762:	781b      	ldrb	r3, [r3, #0]
 8002764:	4619      	mov	r1, r3
 8002766:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800276a:	fbb3 f3f1 	udiv	r3, r3, r1
 800276e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002772:	4618      	mov	r0, r3
 8002774:	f000 fbc9 	bl	8002f0a <HAL_SYSTICK_Config>
 8002778:	4603      	mov	r3, r0
 800277a:	2b00      	cmp	r3, #0
 800277c:	d001      	beq.n	8002782 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800277e:	2301      	movs	r3, #1
 8002780:	e00e      	b.n	80027a0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	2b0f      	cmp	r3, #15
 8002786:	d80a      	bhi.n	800279e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002788:	2200      	movs	r2, #0
 800278a:	6879      	ldr	r1, [r7, #4]
 800278c:	f04f 30ff 	mov.w	r0, #4294967295
 8002790:	f000 fb91 	bl	8002eb6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002794:	4a06      	ldr	r2, [pc, #24]	; (80027b0 <HAL_InitTick+0x5c>)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800279a:	2300      	movs	r3, #0
 800279c:	e000      	b.n	80027a0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800279e:	2301      	movs	r3, #1
}
 80027a0:	4618      	mov	r0, r3
 80027a2:	3708      	adds	r7, #8
 80027a4:	46bd      	mov	sp, r7
 80027a6:	bd80      	pop	{r7, pc}
 80027a8:	20000000 	.word	0x20000000
 80027ac:	20000064 	.word	0x20000064
 80027b0:	20000060 	.word	0x20000060

080027b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80027b4:	b480      	push	{r7}
 80027b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80027b8:	4b06      	ldr	r3, [pc, #24]	; (80027d4 <HAL_IncTick+0x20>)
 80027ba:	781b      	ldrb	r3, [r3, #0]
 80027bc:	461a      	mov	r2, r3
 80027be:	4b06      	ldr	r3, [pc, #24]	; (80027d8 <HAL_IncTick+0x24>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	4413      	add	r3, r2
 80027c4:	4a04      	ldr	r2, [pc, #16]	; (80027d8 <HAL_IncTick+0x24>)
 80027c6:	6013      	str	r3, [r2, #0]
}
 80027c8:	bf00      	nop
 80027ca:	46bd      	mov	sp, r7
 80027cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d0:	4770      	bx	lr
 80027d2:	bf00      	nop
 80027d4:	20000064 	.word	0x20000064
 80027d8:	20000694 	.word	0x20000694

080027dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80027dc:	b480      	push	{r7}
 80027de:	af00      	add	r7, sp, #0
  return uwTick;
 80027e0:	4b03      	ldr	r3, [pc, #12]	; (80027f0 <HAL_GetTick+0x14>)
 80027e2:	681b      	ldr	r3, [r3, #0]
}
 80027e4:	4618      	mov	r0, r3
 80027e6:	46bd      	mov	sp, r7
 80027e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ec:	4770      	bx	lr
 80027ee:	bf00      	nop
 80027f0:	20000694 	.word	0x20000694

080027f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b084      	sub	sp, #16
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80027fc:	f7ff ffee 	bl	80027dc <HAL_GetTick>
 8002800:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	f1b3 3fff 	cmp.w	r3, #4294967295
 800280c:	d005      	beq.n	800281a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800280e:	4b0a      	ldr	r3, [pc, #40]	; (8002838 <HAL_Delay+0x44>)
 8002810:	781b      	ldrb	r3, [r3, #0]
 8002812:	461a      	mov	r2, r3
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	4413      	add	r3, r2
 8002818:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800281a:	bf00      	nop
 800281c:	f7ff ffde 	bl	80027dc <HAL_GetTick>
 8002820:	4602      	mov	r2, r0
 8002822:	68bb      	ldr	r3, [r7, #8]
 8002824:	1ad3      	subs	r3, r2, r3
 8002826:	68fa      	ldr	r2, [r7, #12]
 8002828:	429a      	cmp	r2, r3
 800282a:	d8f7      	bhi.n	800281c <HAL_Delay+0x28>
  {
  }
}
 800282c:	bf00      	nop
 800282e:	bf00      	nop
 8002830:	3710      	adds	r7, #16
 8002832:	46bd      	mov	sp, r7
 8002834:	bd80      	pop	{r7, pc}
 8002836:	bf00      	nop
 8002838:	20000064 	.word	0x20000064

0800283c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b084      	sub	sp, #16
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002844:	2300      	movs	r3, #0
 8002846:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2b00      	cmp	r3, #0
 800284c:	d101      	bne.n	8002852 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800284e:	2301      	movs	r3, #1
 8002850:	e033      	b.n	80028ba <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002856:	2b00      	cmp	r3, #0
 8002858:	d109      	bne.n	800286e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800285a:	6878      	ldr	r0, [r7, #4]
 800285c:	f7fe fc9a 	bl	8001194 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2200      	movs	r2, #0
 8002864:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	2200      	movs	r2, #0
 800286a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002872:	f003 0310 	and.w	r3, r3, #16
 8002876:	2b00      	cmp	r3, #0
 8002878:	d118      	bne.n	80028ac <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800287e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002882:	f023 0302 	bic.w	r3, r3, #2
 8002886:	f043 0202 	orr.w	r2, r3, #2
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800288e:	6878      	ldr	r0, [r7, #4]
 8002890:	f000 f93a 	bl	8002b08 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2200      	movs	r2, #0
 8002898:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800289e:	f023 0303 	bic.w	r3, r3, #3
 80028a2:	f043 0201 	orr.w	r2, r3, #1
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	641a      	str	r2, [r3, #64]	; 0x40
 80028aa:	e001      	b.n	80028b0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80028ac:	2301      	movs	r3, #1
 80028ae:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2200      	movs	r2, #0
 80028b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80028b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80028ba:	4618      	mov	r0, r3
 80028bc:	3710      	adds	r7, #16
 80028be:	46bd      	mov	sp, r7
 80028c0:	bd80      	pop	{r7, pc}
	...

080028c4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80028c4:	b480      	push	{r7}
 80028c6:	b085      	sub	sp, #20
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
 80028cc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80028ce:	2300      	movs	r3, #0
 80028d0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80028d8:	2b01      	cmp	r3, #1
 80028da:	d101      	bne.n	80028e0 <HAL_ADC_ConfigChannel+0x1c>
 80028dc:	2302      	movs	r3, #2
 80028de:	e105      	b.n	8002aec <HAL_ADC_ConfigChannel+0x228>
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2201      	movs	r2, #1
 80028e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	2b09      	cmp	r3, #9
 80028ee:	d925      	bls.n	800293c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	68d9      	ldr	r1, [r3, #12]
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	b29b      	uxth	r3, r3
 80028fc:	461a      	mov	r2, r3
 80028fe:	4613      	mov	r3, r2
 8002900:	005b      	lsls	r3, r3, #1
 8002902:	4413      	add	r3, r2
 8002904:	3b1e      	subs	r3, #30
 8002906:	2207      	movs	r2, #7
 8002908:	fa02 f303 	lsl.w	r3, r2, r3
 800290c:	43da      	mvns	r2, r3
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	400a      	ands	r2, r1
 8002914:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	68d9      	ldr	r1, [r3, #12]
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	689a      	ldr	r2, [r3, #8]
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	b29b      	uxth	r3, r3
 8002926:	4618      	mov	r0, r3
 8002928:	4603      	mov	r3, r0
 800292a:	005b      	lsls	r3, r3, #1
 800292c:	4403      	add	r3, r0
 800292e:	3b1e      	subs	r3, #30
 8002930:	409a      	lsls	r2, r3
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	430a      	orrs	r2, r1
 8002938:	60da      	str	r2, [r3, #12]
 800293a:	e022      	b.n	8002982 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	6919      	ldr	r1, [r3, #16]
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	b29b      	uxth	r3, r3
 8002948:	461a      	mov	r2, r3
 800294a:	4613      	mov	r3, r2
 800294c:	005b      	lsls	r3, r3, #1
 800294e:	4413      	add	r3, r2
 8002950:	2207      	movs	r2, #7
 8002952:	fa02 f303 	lsl.w	r3, r2, r3
 8002956:	43da      	mvns	r2, r3
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	400a      	ands	r2, r1
 800295e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	6919      	ldr	r1, [r3, #16]
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	689a      	ldr	r2, [r3, #8]
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	b29b      	uxth	r3, r3
 8002970:	4618      	mov	r0, r3
 8002972:	4603      	mov	r3, r0
 8002974:	005b      	lsls	r3, r3, #1
 8002976:	4403      	add	r3, r0
 8002978:	409a      	lsls	r2, r3
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	430a      	orrs	r2, r1
 8002980:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	685b      	ldr	r3, [r3, #4]
 8002986:	2b06      	cmp	r3, #6
 8002988:	d824      	bhi.n	80029d4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	685a      	ldr	r2, [r3, #4]
 8002994:	4613      	mov	r3, r2
 8002996:	009b      	lsls	r3, r3, #2
 8002998:	4413      	add	r3, r2
 800299a:	3b05      	subs	r3, #5
 800299c:	221f      	movs	r2, #31
 800299e:	fa02 f303 	lsl.w	r3, r2, r3
 80029a2:	43da      	mvns	r2, r3
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	400a      	ands	r2, r1
 80029aa:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	b29b      	uxth	r3, r3
 80029b8:	4618      	mov	r0, r3
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	685a      	ldr	r2, [r3, #4]
 80029be:	4613      	mov	r3, r2
 80029c0:	009b      	lsls	r3, r3, #2
 80029c2:	4413      	add	r3, r2
 80029c4:	3b05      	subs	r3, #5
 80029c6:	fa00 f203 	lsl.w	r2, r0, r3
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	430a      	orrs	r2, r1
 80029d0:	635a      	str	r2, [r3, #52]	; 0x34
 80029d2:	e04c      	b.n	8002a6e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	685b      	ldr	r3, [r3, #4]
 80029d8:	2b0c      	cmp	r3, #12
 80029da:	d824      	bhi.n	8002a26 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	685a      	ldr	r2, [r3, #4]
 80029e6:	4613      	mov	r3, r2
 80029e8:	009b      	lsls	r3, r3, #2
 80029ea:	4413      	add	r3, r2
 80029ec:	3b23      	subs	r3, #35	; 0x23
 80029ee:	221f      	movs	r2, #31
 80029f0:	fa02 f303 	lsl.w	r3, r2, r3
 80029f4:	43da      	mvns	r2, r3
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	400a      	ands	r2, r1
 80029fc:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	b29b      	uxth	r3, r3
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	685a      	ldr	r2, [r3, #4]
 8002a10:	4613      	mov	r3, r2
 8002a12:	009b      	lsls	r3, r3, #2
 8002a14:	4413      	add	r3, r2
 8002a16:	3b23      	subs	r3, #35	; 0x23
 8002a18:	fa00 f203 	lsl.w	r2, r0, r3
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	430a      	orrs	r2, r1
 8002a22:	631a      	str	r2, [r3, #48]	; 0x30
 8002a24:	e023      	b.n	8002a6e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	685a      	ldr	r2, [r3, #4]
 8002a30:	4613      	mov	r3, r2
 8002a32:	009b      	lsls	r3, r3, #2
 8002a34:	4413      	add	r3, r2
 8002a36:	3b41      	subs	r3, #65	; 0x41
 8002a38:	221f      	movs	r2, #31
 8002a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a3e:	43da      	mvns	r2, r3
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	400a      	ands	r2, r1
 8002a46:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	b29b      	uxth	r3, r3
 8002a54:	4618      	mov	r0, r3
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	685a      	ldr	r2, [r3, #4]
 8002a5a:	4613      	mov	r3, r2
 8002a5c:	009b      	lsls	r3, r3, #2
 8002a5e:	4413      	add	r3, r2
 8002a60:	3b41      	subs	r3, #65	; 0x41
 8002a62:	fa00 f203 	lsl.w	r2, r0, r3
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	430a      	orrs	r2, r1
 8002a6c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002a6e:	4b22      	ldr	r3, [pc, #136]	; (8002af8 <HAL_ADC_ConfigChannel+0x234>)
 8002a70:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	4a21      	ldr	r2, [pc, #132]	; (8002afc <HAL_ADC_ConfigChannel+0x238>)
 8002a78:	4293      	cmp	r3, r2
 8002a7a:	d109      	bne.n	8002a90 <HAL_ADC_ConfigChannel+0x1cc>
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	2b12      	cmp	r3, #18
 8002a82:	d105      	bne.n	8002a90 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	685b      	ldr	r3, [r3, #4]
 8002a88:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4a19      	ldr	r2, [pc, #100]	; (8002afc <HAL_ADC_ConfigChannel+0x238>)
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d123      	bne.n	8002ae2 <HAL_ADC_ConfigChannel+0x21e>
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	2b10      	cmp	r3, #16
 8002aa0:	d003      	beq.n	8002aaa <HAL_ADC_ConfigChannel+0x1e6>
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	2b11      	cmp	r3, #17
 8002aa8:	d11b      	bne.n	8002ae2 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	685b      	ldr	r3, [r3, #4]
 8002aae:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	2b10      	cmp	r3, #16
 8002abc:	d111      	bne.n	8002ae2 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002abe:	4b10      	ldr	r3, [pc, #64]	; (8002b00 <HAL_ADC_ConfigChannel+0x23c>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	4a10      	ldr	r2, [pc, #64]	; (8002b04 <HAL_ADC_ConfigChannel+0x240>)
 8002ac4:	fba2 2303 	umull	r2, r3, r2, r3
 8002ac8:	0c9a      	lsrs	r2, r3, #18
 8002aca:	4613      	mov	r3, r2
 8002acc:	009b      	lsls	r3, r3, #2
 8002ace:	4413      	add	r3, r2
 8002ad0:	005b      	lsls	r3, r3, #1
 8002ad2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002ad4:	e002      	b.n	8002adc <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002ad6:	68bb      	ldr	r3, [r7, #8]
 8002ad8:	3b01      	subs	r3, #1
 8002ada:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002adc:	68bb      	ldr	r3, [r7, #8]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d1f9      	bne.n	8002ad6 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002aea:	2300      	movs	r3, #0
}
 8002aec:	4618      	mov	r0, r3
 8002aee:	3714      	adds	r7, #20
 8002af0:	46bd      	mov	sp, r7
 8002af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af6:	4770      	bx	lr
 8002af8:	40012300 	.word	0x40012300
 8002afc:	40012000 	.word	0x40012000
 8002b00:	20000000 	.word	0x20000000
 8002b04:	431bde83 	.word	0x431bde83

08002b08 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	b085      	sub	sp, #20
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002b10:	4b79      	ldr	r3, [pc, #484]	; (8002cf8 <ADC_Init+0x1f0>)
 8002b12:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	685b      	ldr	r3, [r3, #4]
 8002b18:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	685a      	ldr	r2, [r3, #4]
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	685b      	ldr	r3, [r3, #4]
 8002b28:	431a      	orrs	r2, r3
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	685a      	ldr	r2, [r3, #4]
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002b3c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	6859      	ldr	r1, [r3, #4]
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	691b      	ldr	r3, [r3, #16]
 8002b48:	021a      	lsls	r2, r3, #8
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	430a      	orrs	r2, r1
 8002b50:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	685a      	ldr	r2, [r3, #4]
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002b60:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	6859      	ldr	r1, [r3, #4]
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	689a      	ldr	r2, [r3, #8]
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	430a      	orrs	r2, r1
 8002b72:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	689a      	ldr	r2, [r3, #8]
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002b82:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	6899      	ldr	r1, [r3, #8]
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	68da      	ldr	r2, [r3, #12]
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	430a      	orrs	r2, r1
 8002b94:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b9a:	4a58      	ldr	r2, [pc, #352]	; (8002cfc <ADC_Init+0x1f4>)
 8002b9c:	4293      	cmp	r3, r2
 8002b9e:	d022      	beq.n	8002be6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	689a      	ldr	r2, [r3, #8]
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002bae:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	6899      	ldr	r1, [r3, #8]
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	430a      	orrs	r2, r1
 8002bc0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	689a      	ldr	r2, [r3, #8]
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002bd0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	6899      	ldr	r1, [r3, #8]
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	430a      	orrs	r2, r1
 8002be2:	609a      	str	r2, [r3, #8]
 8002be4:	e00f      	b.n	8002c06 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	689a      	ldr	r2, [r3, #8]
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002bf4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	689a      	ldr	r2, [r3, #8]
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002c04:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	689a      	ldr	r2, [r3, #8]
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f022 0202 	bic.w	r2, r2, #2
 8002c14:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	6899      	ldr	r1, [r3, #8]
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	7e1b      	ldrb	r3, [r3, #24]
 8002c20:	005a      	lsls	r2, r3, #1
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	430a      	orrs	r2, r1
 8002c28:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d01b      	beq.n	8002c6c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	685a      	ldr	r2, [r3, #4]
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002c42:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	685a      	ldr	r2, [r3, #4]
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002c52:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	6859      	ldr	r1, [r3, #4]
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c5e:	3b01      	subs	r3, #1
 8002c60:	035a      	lsls	r2, r3, #13
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	430a      	orrs	r2, r1
 8002c68:	605a      	str	r2, [r3, #4]
 8002c6a:	e007      	b.n	8002c7c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	685a      	ldr	r2, [r3, #4]
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002c7a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002c8a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	69db      	ldr	r3, [r3, #28]
 8002c96:	3b01      	subs	r3, #1
 8002c98:	051a      	lsls	r2, r3, #20
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	430a      	orrs	r2, r1
 8002ca0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	689a      	ldr	r2, [r3, #8]
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002cb0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	6899      	ldr	r1, [r3, #8]
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002cbe:	025a      	lsls	r2, r3, #9
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	430a      	orrs	r2, r1
 8002cc6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	689a      	ldr	r2, [r3, #8]
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002cd6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	6899      	ldr	r1, [r3, #8]
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	695b      	ldr	r3, [r3, #20]
 8002ce2:	029a      	lsls	r2, r3, #10
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	430a      	orrs	r2, r1
 8002cea:	609a      	str	r2, [r3, #8]
}
 8002cec:	bf00      	nop
 8002cee:	3714      	adds	r7, #20
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf6:	4770      	bx	lr
 8002cf8:	40012300 	.word	0x40012300
 8002cfc:	0f000001 	.word	0x0f000001

08002d00 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d00:	b480      	push	{r7}
 8002d02:	b085      	sub	sp, #20
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	f003 0307 	and.w	r3, r3, #7
 8002d0e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d10:	4b0c      	ldr	r3, [pc, #48]	; (8002d44 <__NVIC_SetPriorityGrouping+0x44>)
 8002d12:	68db      	ldr	r3, [r3, #12]
 8002d14:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d16:	68ba      	ldr	r2, [r7, #8]
 8002d18:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002d1c:	4013      	ands	r3, r2
 8002d1e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d24:	68bb      	ldr	r3, [r7, #8]
 8002d26:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002d28:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002d2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d30:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d32:	4a04      	ldr	r2, [pc, #16]	; (8002d44 <__NVIC_SetPriorityGrouping+0x44>)
 8002d34:	68bb      	ldr	r3, [r7, #8]
 8002d36:	60d3      	str	r3, [r2, #12]
}
 8002d38:	bf00      	nop
 8002d3a:	3714      	adds	r7, #20
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d42:	4770      	bx	lr
 8002d44:	e000ed00 	.word	0xe000ed00

08002d48 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002d48:	b480      	push	{r7}
 8002d4a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d4c:	4b04      	ldr	r3, [pc, #16]	; (8002d60 <__NVIC_GetPriorityGrouping+0x18>)
 8002d4e:	68db      	ldr	r3, [r3, #12]
 8002d50:	0a1b      	lsrs	r3, r3, #8
 8002d52:	f003 0307 	and.w	r3, r3, #7
}
 8002d56:	4618      	mov	r0, r3
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5e:	4770      	bx	lr
 8002d60:	e000ed00 	.word	0xe000ed00

08002d64 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d64:	b480      	push	{r7}
 8002d66:	b083      	sub	sp, #12
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	db0b      	blt.n	8002d8e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d76:	79fb      	ldrb	r3, [r7, #7]
 8002d78:	f003 021f 	and.w	r2, r3, #31
 8002d7c:	4907      	ldr	r1, [pc, #28]	; (8002d9c <__NVIC_EnableIRQ+0x38>)
 8002d7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d82:	095b      	lsrs	r3, r3, #5
 8002d84:	2001      	movs	r0, #1
 8002d86:	fa00 f202 	lsl.w	r2, r0, r2
 8002d8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002d8e:	bf00      	nop
 8002d90:	370c      	adds	r7, #12
 8002d92:	46bd      	mov	sp, r7
 8002d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d98:	4770      	bx	lr
 8002d9a:	bf00      	nop
 8002d9c:	e000e100 	.word	0xe000e100

08002da0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002da0:	b480      	push	{r7}
 8002da2:	b083      	sub	sp, #12
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	4603      	mov	r3, r0
 8002da8:	6039      	str	r1, [r7, #0]
 8002daa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002dac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	db0a      	blt.n	8002dca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	b2da      	uxtb	r2, r3
 8002db8:	490c      	ldr	r1, [pc, #48]	; (8002dec <__NVIC_SetPriority+0x4c>)
 8002dba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dbe:	0112      	lsls	r2, r2, #4
 8002dc0:	b2d2      	uxtb	r2, r2
 8002dc2:	440b      	add	r3, r1
 8002dc4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002dc8:	e00a      	b.n	8002de0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	b2da      	uxtb	r2, r3
 8002dce:	4908      	ldr	r1, [pc, #32]	; (8002df0 <__NVIC_SetPriority+0x50>)
 8002dd0:	79fb      	ldrb	r3, [r7, #7]
 8002dd2:	f003 030f 	and.w	r3, r3, #15
 8002dd6:	3b04      	subs	r3, #4
 8002dd8:	0112      	lsls	r2, r2, #4
 8002dda:	b2d2      	uxtb	r2, r2
 8002ddc:	440b      	add	r3, r1
 8002dde:	761a      	strb	r2, [r3, #24]
}
 8002de0:	bf00      	nop
 8002de2:	370c      	adds	r7, #12
 8002de4:	46bd      	mov	sp, r7
 8002de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dea:	4770      	bx	lr
 8002dec:	e000e100 	.word	0xe000e100
 8002df0:	e000ed00 	.word	0xe000ed00

08002df4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002df4:	b480      	push	{r7}
 8002df6:	b089      	sub	sp, #36	; 0x24
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	60f8      	str	r0, [r7, #12]
 8002dfc:	60b9      	str	r1, [r7, #8]
 8002dfe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	f003 0307 	and.w	r3, r3, #7
 8002e06:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e08:	69fb      	ldr	r3, [r7, #28]
 8002e0a:	f1c3 0307 	rsb	r3, r3, #7
 8002e0e:	2b04      	cmp	r3, #4
 8002e10:	bf28      	it	cs
 8002e12:	2304      	movcs	r3, #4
 8002e14:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e16:	69fb      	ldr	r3, [r7, #28]
 8002e18:	3304      	adds	r3, #4
 8002e1a:	2b06      	cmp	r3, #6
 8002e1c:	d902      	bls.n	8002e24 <NVIC_EncodePriority+0x30>
 8002e1e:	69fb      	ldr	r3, [r7, #28]
 8002e20:	3b03      	subs	r3, #3
 8002e22:	e000      	b.n	8002e26 <NVIC_EncodePriority+0x32>
 8002e24:	2300      	movs	r3, #0
 8002e26:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e28:	f04f 32ff 	mov.w	r2, #4294967295
 8002e2c:	69bb      	ldr	r3, [r7, #24]
 8002e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e32:	43da      	mvns	r2, r3
 8002e34:	68bb      	ldr	r3, [r7, #8]
 8002e36:	401a      	ands	r2, r3
 8002e38:	697b      	ldr	r3, [r7, #20]
 8002e3a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e3c:	f04f 31ff 	mov.w	r1, #4294967295
 8002e40:	697b      	ldr	r3, [r7, #20]
 8002e42:	fa01 f303 	lsl.w	r3, r1, r3
 8002e46:	43d9      	mvns	r1, r3
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e4c:	4313      	orrs	r3, r2
         );
}
 8002e4e:	4618      	mov	r0, r3
 8002e50:	3724      	adds	r7, #36	; 0x24
 8002e52:	46bd      	mov	sp, r7
 8002e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e58:	4770      	bx	lr
	...

08002e5c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b082      	sub	sp, #8
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	3b01      	subs	r3, #1
 8002e68:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002e6c:	d301      	bcc.n	8002e72 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002e6e:	2301      	movs	r3, #1
 8002e70:	e00f      	b.n	8002e92 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002e72:	4a0a      	ldr	r2, [pc, #40]	; (8002e9c <SysTick_Config+0x40>)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	3b01      	subs	r3, #1
 8002e78:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002e7a:	210f      	movs	r1, #15
 8002e7c:	f04f 30ff 	mov.w	r0, #4294967295
 8002e80:	f7ff ff8e 	bl	8002da0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002e84:	4b05      	ldr	r3, [pc, #20]	; (8002e9c <SysTick_Config+0x40>)
 8002e86:	2200      	movs	r2, #0
 8002e88:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002e8a:	4b04      	ldr	r3, [pc, #16]	; (8002e9c <SysTick_Config+0x40>)
 8002e8c:	2207      	movs	r2, #7
 8002e8e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002e90:	2300      	movs	r3, #0
}
 8002e92:	4618      	mov	r0, r3
 8002e94:	3708      	adds	r7, #8
 8002e96:	46bd      	mov	sp, r7
 8002e98:	bd80      	pop	{r7, pc}
 8002e9a:	bf00      	nop
 8002e9c:	e000e010 	.word	0xe000e010

08002ea0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b082      	sub	sp, #8
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ea8:	6878      	ldr	r0, [r7, #4]
 8002eaa:	f7ff ff29 	bl	8002d00 <__NVIC_SetPriorityGrouping>
}
 8002eae:	bf00      	nop
 8002eb0:	3708      	adds	r7, #8
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	bd80      	pop	{r7, pc}

08002eb6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002eb6:	b580      	push	{r7, lr}
 8002eb8:	b086      	sub	sp, #24
 8002eba:	af00      	add	r7, sp, #0
 8002ebc:	4603      	mov	r3, r0
 8002ebe:	60b9      	str	r1, [r7, #8]
 8002ec0:	607a      	str	r2, [r7, #4]
 8002ec2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002ec8:	f7ff ff3e 	bl	8002d48 <__NVIC_GetPriorityGrouping>
 8002ecc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002ece:	687a      	ldr	r2, [r7, #4]
 8002ed0:	68b9      	ldr	r1, [r7, #8]
 8002ed2:	6978      	ldr	r0, [r7, #20]
 8002ed4:	f7ff ff8e 	bl	8002df4 <NVIC_EncodePriority>
 8002ed8:	4602      	mov	r2, r0
 8002eda:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ede:	4611      	mov	r1, r2
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	f7ff ff5d 	bl	8002da0 <__NVIC_SetPriority>
}
 8002ee6:	bf00      	nop
 8002ee8:	3718      	adds	r7, #24
 8002eea:	46bd      	mov	sp, r7
 8002eec:	bd80      	pop	{r7, pc}

08002eee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002eee:	b580      	push	{r7, lr}
 8002ef0:	b082      	sub	sp, #8
 8002ef2:	af00      	add	r7, sp, #0
 8002ef4:	4603      	mov	r3, r0
 8002ef6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ef8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002efc:	4618      	mov	r0, r3
 8002efe:	f7ff ff31 	bl	8002d64 <__NVIC_EnableIRQ>
}
 8002f02:	bf00      	nop
 8002f04:	3708      	adds	r7, #8
 8002f06:	46bd      	mov	sp, r7
 8002f08:	bd80      	pop	{r7, pc}

08002f0a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002f0a:	b580      	push	{r7, lr}
 8002f0c:	b082      	sub	sp, #8
 8002f0e:	af00      	add	r7, sp, #0
 8002f10:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002f12:	6878      	ldr	r0, [r7, #4]
 8002f14:	f7ff ffa2 	bl	8002e5c <SysTick_Config>
 8002f18:	4603      	mov	r3, r0
}
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	3708      	adds	r7, #8
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	bd80      	pop	{r7, pc}

08002f22 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8002f22:	b580      	push	{r7, lr}
 8002f24:	b082      	sub	sp, #8
 8002f26:	af00      	add	r7, sp, #0
 8002f28:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d101      	bne.n	8002f34 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8002f30:	2301      	movs	r3, #1
 8002f32:	e014      	b.n	8002f5e <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	791b      	ldrb	r3, [r3, #4]
 8002f38:	b2db      	uxtb	r3, r3
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d105      	bne.n	8002f4a <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	2200      	movs	r2, #0
 8002f42:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002f44:	6878      	ldr	r0, [r7, #4]
 8002f46:	f7fe f969 	bl	800121c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	2202      	movs	r2, #2
 8002f4e:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2200      	movs	r2, #0
 8002f54:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2201      	movs	r2, #1
 8002f5a:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002f5c:	2300      	movs	r3, #0
}
 8002f5e:	4618      	mov	r0, r3
 8002f60:	3708      	adds	r7, #8
 8002f62:	46bd      	mov	sp, r7
 8002f64:	bd80      	pop	{r7, pc}

08002f66 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8002f66:	b480      	push	{r7}
 8002f68:	b087      	sub	sp, #28
 8002f6a:	af00      	add	r7, sp, #0
 8002f6c:	60f8      	str	r0, [r7, #12]
 8002f6e:	60b9      	str	r1, [r7, #8]
 8002f70:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	795b      	ldrb	r3, [r3, #5]
 8002f76:	2b01      	cmp	r3, #1
 8002f78:	d101      	bne.n	8002f7e <HAL_DAC_ConfigChannel+0x18>
 8002f7a:	2302      	movs	r3, #2
 8002f7c:	e03c      	b.n	8002ff8 <HAL_DAC_ConfigChannel+0x92>
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	2201      	movs	r2, #1
 8002f82:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	2202      	movs	r2, #2
 8002f88:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	f003 0310 	and.w	r3, r3, #16
 8002f98:	f640 72fe 	movw	r2, #4094	; 0xffe
 8002f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002fa0:	43db      	mvns	r3, r3
 8002fa2:	697a      	ldr	r2, [r7, #20]
 8002fa4:	4013      	ands	r3, r2
 8002fa6:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8002fa8:	68bb      	ldr	r3, [r7, #8]
 8002faa:	681a      	ldr	r2, [r3, #0]
 8002fac:	68bb      	ldr	r3, [r7, #8]
 8002fae:	685b      	ldr	r3, [r3, #4]
 8002fb0:	4313      	orrs	r3, r2
 8002fb2:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	f003 0310 	and.w	r3, r3, #16
 8002fba:	693a      	ldr	r2, [r7, #16]
 8002fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8002fc0:	697a      	ldr	r2, [r7, #20]
 8002fc2:	4313      	orrs	r3, r2
 8002fc4:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	697a      	ldr	r2, [r7, #20]
 8002fcc:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	6819      	ldr	r1, [r3, #0]
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	f003 0310 	and.w	r3, r3, #16
 8002fda:	22c0      	movs	r2, #192	; 0xc0
 8002fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8002fe0:	43da      	mvns	r2, r3
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	400a      	ands	r2, r1
 8002fe8:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	2201      	movs	r2, #1
 8002fee:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002ff6:	2300      	movs	r3, #0
}
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	371c      	adds	r7, #28
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003002:	4770      	bx	lr

08003004 <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	b082      	sub	sp, #8
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if(hdcmi == NULL)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2b00      	cmp	r3, #0
 8003010:	d101      	bne.n	8003016 <HAL_DCMI_Init+0x12>
  {
     return HAL_ERROR;
 8003012:	2301      	movs	r3, #1
 8003014:	e05f      	b.n	80030d6 <HAL_DCMI_Init+0xd2>
  assert_param(IS_DCMI_BYTE_SELECT_MODE(hdcmi->Init.ByteSelectMode));
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));
#endif /* STM32F446xx || STM32F469xx || STM32F479xx */
  if(hdcmi->State == HAL_DCMI_STATE_RESET)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800301c:	b2db      	uxtb	r3, r3
 800301e:	2b00      	cmp	r3, #0
 8003020:	d109      	bne.n	8003036 <HAL_DCMI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hdcmi->Lock = HAL_UNLOCKED;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	2200      	movs	r2, #0
 8003026:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 800302a:	6878      	ldr	r0, [r7, #4]
 800302c:	f7fe f93a 	bl	80012a4 <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
    HAL_DCMI_MspInit(hdcmi);
 8003030:	6878      	ldr	r0, [r7, #4]
 8003032:	f7fe f937 	bl	80012a4 <HAL_DCMI_MspInit>
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	2202      	movs	r2, #2
 800303a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
                          /* Configures the HS, VS, DE and PC polarity */
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 |\
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	687a      	ldr	r2, [r7, #4]
 8003046:	6812      	ldr	r2, [r2, #0]
 8003048:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800304c:	f023 0308 	bic.w	r3, r3, #8
 8003050:	6013      	str	r3, [r2, #0]
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx)
                           | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS |\
                           DCMI_CR_LSM | DCMI_CR_OELS
#endif /* STM32F446xx || STM32F469xx || STM32F479xx */
                           );
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	6819      	ldr	r1, [r3, #0]
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	685a      	ldr	r2, [r3, #4]
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	695b      	ldr	r3, [r3, #20]
 8003060:	431a      	orrs	r2, r3
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 8003066:	431a      	orrs	r2, r3
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	691b      	ldr	r3, [r3, #16]
 800306c:	431a      	orrs	r2, r3
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	689b      	ldr	r3, [r3, #8]
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 8003072:	431a      	orrs	r2, r3
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	699b      	ldr	r3, [r3, #24]
 8003078:	431a      	orrs	r2, r3
                                     hdcmi->Init.JPEGMode
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6a1b      	ldr	r3, [r3, #32]
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 800307e:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	430a      	orrs	r2, r1
 8003086:	601a      	str	r2, [r3, #0]
                                     | hdcmi->Init.ByteSelectMode |\
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
                                     hdcmi->Init.LineSelectStart
#endif /* STM32F446xx || STM32F469xx || STM32F479xx */
                                     );
  if(hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	685b      	ldr	r3, [r3, #4]
 800308c:	2b10      	cmp	r3, #16
 800308e:	d112      	bne.n	80030b6 <HAL_DCMI_Init+0xb2>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	7f1b      	ldrb	r3, [r3, #28]
 8003094:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_POSITION_ESCR_LSC)|
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	7f5b      	ldrb	r3, [r3, #29]
 800309a:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |
 800309c:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_POSITION_ESCR_LEC) |
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	7f9b      	ldrb	r3, [r3, #30]
 80030a2:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_POSITION_ESCR_LSC)|
 80030a4:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_POSITION_ESCR_FEC));
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	7fdb      	ldrb	r3, [r3, #31]
 80030ac:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_POSITION_ESCR_LEC) |
 80030b2:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |
 80030b4:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	68da      	ldr	r2, [r3, #12]
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f042 021e 	orr.w	r2, r2, #30
 80030c4:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	2200      	movs	r2, #0
 80030ca:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2201      	movs	r2, #1
 80030d0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  return HAL_OK;
 80030d4:	2300      	movs	r3, #0
}
 80030d6:	4618      	mov	r0, r3
 80030d8:	3708      	adds	r7, #8
 80030da:	46bd      	mov	sp, r7
 80030dc:	bd80      	pop	{r7, pc}
	...

080030e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80030e0:	b480      	push	{r7}
 80030e2:	b089      	sub	sp, #36	; 0x24
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
 80030e8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80030ea:	2300      	movs	r3, #0
 80030ec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80030ee:	2300      	movs	r3, #0
 80030f0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80030f2:	2300      	movs	r3, #0
 80030f4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80030f6:	2300      	movs	r3, #0
 80030f8:	61fb      	str	r3, [r7, #28]
 80030fa:	e16b      	b.n	80033d4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80030fc:	2201      	movs	r2, #1
 80030fe:	69fb      	ldr	r3, [r7, #28]
 8003100:	fa02 f303 	lsl.w	r3, r2, r3
 8003104:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	697a      	ldr	r2, [r7, #20]
 800310c:	4013      	ands	r3, r2
 800310e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003110:	693a      	ldr	r2, [r7, #16]
 8003112:	697b      	ldr	r3, [r7, #20]
 8003114:	429a      	cmp	r2, r3
 8003116:	f040 815a 	bne.w	80033ce <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	685b      	ldr	r3, [r3, #4]
 800311e:	f003 0303 	and.w	r3, r3, #3
 8003122:	2b01      	cmp	r3, #1
 8003124:	d005      	beq.n	8003132 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	685b      	ldr	r3, [r3, #4]
 800312a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800312e:	2b02      	cmp	r3, #2
 8003130:	d130      	bne.n	8003194 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	689b      	ldr	r3, [r3, #8]
 8003136:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003138:	69fb      	ldr	r3, [r7, #28]
 800313a:	005b      	lsls	r3, r3, #1
 800313c:	2203      	movs	r2, #3
 800313e:	fa02 f303 	lsl.w	r3, r2, r3
 8003142:	43db      	mvns	r3, r3
 8003144:	69ba      	ldr	r2, [r7, #24]
 8003146:	4013      	ands	r3, r2
 8003148:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	68da      	ldr	r2, [r3, #12]
 800314e:	69fb      	ldr	r3, [r7, #28]
 8003150:	005b      	lsls	r3, r3, #1
 8003152:	fa02 f303 	lsl.w	r3, r2, r3
 8003156:	69ba      	ldr	r2, [r7, #24]
 8003158:	4313      	orrs	r3, r2
 800315a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	69ba      	ldr	r2, [r7, #24]
 8003160:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	685b      	ldr	r3, [r3, #4]
 8003166:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003168:	2201      	movs	r2, #1
 800316a:	69fb      	ldr	r3, [r7, #28]
 800316c:	fa02 f303 	lsl.w	r3, r2, r3
 8003170:	43db      	mvns	r3, r3
 8003172:	69ba      	ldr	r2, [r7, #24]
 8003174:	4013      	ands	r3, r2
 8003176:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	685b      	ldr	r3, [r3, #4]
 800317c:	091b      	lsrs	r3, r3, #4
 800317e:	f003 0201 	and.w	r2, r3, #1
 8003182:	69fb      	ldr	r3, [r7, #28]
 8003184:	fa02 f303 	lsl.w	r3, r2, r3
 8003188:	69ba      	ldr	r2, [r7, #24]
 800318a:	4313      	orrs	r3, r2
 800318c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	69ba      	ldr	r2, [r7, #24]
 8003192:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	685b      	ldr	r3, [r3, #4]
 8003198:	f003 0303 	and.w	r3, r3, #3
 800319c:	2b03      	cmp	r3, #3
 800319e:	d017      	beq.n	80031d0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	68db      	ldr	r3, [r3, #12]
 80031a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80031a6:	69fb      	ldr	r3, [r7, #28]
 80031a8:	005b      	lsls	r3, r3, #1
 80031aa:	2203      	movs	r2, #3
 80031ac:	fa02 f303 	lsl.w	r3, r2, r3
 80031b0:	43db      	mvns	r3, r3
 80031b2:	69ba      	ldr	r2, [r7, #24]
 80031b4:	4013      	ands	r3, r2
 80031b6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	689a      	ldr	r2, [r3, #8]
 80031bc:	69fb      	ldr	r3, [r7, #28]
 80031be:	005b      	lsls	r3, r3, #1
 80031c0:	fa02 f303 	lsl.w	r3, r2, r3
 80031c4:	69ba      	ldr	r2, [r7, #24]
 80031c6:	4313      	orrs	r3, r2
 80031c8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	69ba      	ldr	r2, [r7, #24]
 80031ce:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	685b      	ldr	r3, [r3, #4]
 80031d4:	f003 0303 	and.w	r3, r3, #3
 80031d8:	2b02      	cmp	r3, #2
 80031da:	d123      	bne.n	8003224 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80031dc:	69fb      	ldr	r3, [r7, #28]
 80031de:	08da      	lsrs	r2, r3, #3
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	3208      	adds	r2, #8
 80031e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80031e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80031ea:	69fb      	ldr	r3, [r7, #28]
 80031ec:	f003 0307 	and.w	r3, r3, #7
 80031f0:	009b      	lsls	r3, r3, #2
 80031f2:	220f      	movs	r2, #15
 80031f4:	fa02 f303 	lsl.w	r3, r2, r3
 80031f8:	43db      	mvns	r3, r3
 80031fa:	69ba      	ldr	r2, [r7, #24]
 80031fc:	4013      	ands	r3, r2
 80031fe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	691a      	ldr	r2, [r3, #16]
 8003204:	69fb      	ldr	r3, [r7, #28]
 8003206:	f003 0307 	and.w	r3, r3, #7
 800320a:	009b      	lsls	r3, r3, #2
 800320c:	fa02 f303 	lsl.w	r3, r2, r3
 8003210:	69ba      	ldr	r2, [r7, #24]
 8003212:	4313      	orrs	r3, r2
 8003214:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003216:	69fb      	ldr	r3, [r7, #28]
 8003218:	08da      	lsrs	r2, r3, #3
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	3208      	adds	r2, #8
 800321e:	69b9      	ldr	r1, [r7, #24]
 8003220:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800322a:	69fb      	ldr	r3, [r7, #28]
 800322c:	005b      	lsls	r3, r3, #1
 800322e:	2203      	movs	r2, #3
 8003230:	fa02 f303 	lsl.w	r3, r2, r3
 8003234:	43db      	mvns	r3, r3
 8003236:	69ba      	ldr	r2, [r7, #24]
 8003238:	4013      	ands	r3, r2
 800323a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	685b      	ldr	r3, [r3, #4]
 8003240:	f003 0203 	and.w	r2, r3, #3
 8003244:	69fb      	ldr	r3, [r7, #28]
 8003246:	005b      	lsls	r3, r3, #1
 8003248:	fa02 f303 	lsl.w	r3, r2, r3
 800324c:	69ba      	ldr	r2, [r7, #24]
 800324e:	4313      	orrs	r3, r2
 8003250:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	69ba      	ldr	r2, [r7, #24]
 8003256:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	685b      	ldr	r3, [r3, #4]
 800325c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003260:	2b00      	cmp	r3, #0
 8003262:	f000 80b4 	beq.w	80033ce <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003266:	2300      	movs	r3, #0
 8003268:	60fb      	str	r3, [r7, #12]
 800326a:	4b60      	ldr	r3, [pc, #384]	; (80033ec <HAL_GPIO_Init+0x30c>)
 800326c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800326e:	4a5f      	ldr	r2, [pc, #380]	; (80033ec <HAL_GPIO_Init+0x30c>)
 8003270:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003274:	6453      	str	r3, [r2, #68]	; 0x44
 8003276:	4b5d      	ldr	r3, [pc, #372]	; (80033ec <HAL_GPIO_Init+0x30c>)
 8003278:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800327a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800327e:	60fb      	str	r3, [r7, #12]
 8003280:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003282:	4a5b      	ldr	r2, [pc, #364]	; (80033f0 <HAL_GPIO_Init+0x310>)
 8003284:	69fb      	ldr	r3, [r7, #28]
 8003286:	089b      	lsrs	r3, r3, #2
 8003288:	3302      	adds	r3, #2
 800328a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800328e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003290:	69fb      	ldr	r3, [r7, #28]
 8003292:	f003 0303 	and.w	r3, r3, #3
 8003296:	009b      	lsls	r3, r3, #2
 8003298:	220f      	movs	r2, #15
 800329a:	fa02 f303 	lsl.w	r3, r2, r3
 800329e:	43db      	mvns	r3, r3
 80032a0:	69ba      	ldr	r2, [r7, #24]
 80032a2:	4013      	ands	r3, r2
 80032a4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	4a52      	ldr	r2, [pc, #328]	; (80033f4 <HAL_GPIO_Init+0x314>)
 80032aa:	4293      	cmp	r3, r2
 80032ac:	d02b      	beq.n	8003306 <HAL_GPIO_Init+0x226>
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	4a51      	ldr	r2, [pc, #324]	; (80033f8 <HAL_GPIO_Init+0x318>)
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d025      	beq.n	8003302 <HAL_GPIO_Init+0x222>
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	4a50      	ldr	r2, [pc, #320]	; (80033fc <HAL_GPIO_Init+0x31c>)
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d01f      	beq.n	80032fe <HAL_GPIO_Init+0x21e>
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	4a4f      	ldr	r2, [pc, #316]	; (8003400 <HAL_GPIO_Init+0x320>)
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d019      	beq.n	80032fa <HAL_GPIO_Init+0x21a>
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	4a4e      	ldr	r2, [pc, #312]	; (8003404 <HAL_GPIO_Init+0x324>)
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d013      	beq.n	80032f6 <HAL_GPIO_Init+0x216>
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	4a4d      	ldr	r2, [pc, #308]	; (8003408 <HAL_GPIO_Init+0x328>)
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d00d      	beq.n	80032f2 <HAL_GPIO_Init+0x212>
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	4a4c      	ldr	r2, [pc, #304]	; (800340c <HAL_GPIO_Init+0x32c>)
 80032da:	4293      	cmp	r3, r2
 80032dc:	d007      	beq.n	80032ee <HAL_GPIO_Init+0x20e>
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	4a4b      	ldr	r2, [pc, #300]	; (8003410 <HAL_GPIO_Init+0x330>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d101      	bne.n	80032ea <HAL_GPIO_Init+0x20a>
 80032e6:	2307      	movs	r3, #7
 80032e8:	e00e      	b.n	8003308 <HAL_GPIO_Init+0x228>
 80032ea:	2308      	movs	r3, #8
 80032ec:	e00c      	b.n	8003308 <HAL_GPIO_Init+0x228>
 80032ee:	2306      	movs	r3, #6
 80032f0:	e00a      	b.n	8003308 <HAL_GPIO_Init+0x228>
 80032f2:	2305      	movs	r3, #5
 80032f4:	e008      	b.n	8003308 <HAL_GPIO_Init+0x228>
 80032f6:	2304      	movs	r3, #4
 80032f8:	e006      	b.n	8003308 <HAL_GPIO_Init+0x228>
 80032fa:	2303      	movs	r3, #3
 80032fc:	e004      	b.n	8003308 <HAL_GPIO_Init+0x228>
 80032fe:	2302      	movs	r3, #2
 8003300:	e002      	b.n	8003308 <HAL_GPIO_Init+0x228>
 8003302:	2301      	movs	r3, #1
 8003304:	e000      	b.n	8003308 <HAL_GPIO_Init+0x228>
 8003306:	2300      	movs	r3, #0
 8003308:	69fa      	ldr	r2, [r7, #28]
 800330a:	f002 0203 	and.w	r2, r2, #3
 800330e:	0092      	lsls	r2, r2, #2
 8003310:	4093      	lsls	r3, r2
 8003312:	69ba      	ldr	r2, [r7, #24]
 8003314:	4313      	orrs	r3, r2
 8003316:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003318:	4935      	ldr	r1, [pc, #212]	; (80033f0 <HAL_GPIO_Init+0x310>)
 800331a:	69fb      	ldr	r3, [r7, #28]
 800331c:	089b      	lsrs	r3, r3, #2
 800331e:	3302      	adds	r3, #2
 8003320:	69ba      	ldr	r2, [r7, #24]
 8003322:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003326:	4b3b      	ldr	r3, [pc, #236]	; (8003414 <HAL_GPIO_Init+0x334>)
 8003328:	689b      	ldr	r3, [r3, #8]
 800332a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800332c:	693b      	ldr	r3, [r7, #16]
 800332e:	43db      	mvns	r3, r3
 8003330:	69ba      	ldr	r2, [r7, #24]
 8003332:	4013      	ands	r3, r2
 8003334:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	685b      	ldr	r3, [r3, #4]
 800333a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800333e:	2b00      	cmp	r3, #0
 8003340:	d003      	beq.n	800334a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003342:	69ba      	ldr	r2, [r7, #24]
 8003344:	693b      	ldr	r3, [r7, #16]
 8003346:	4313      	orrs	r3, r2
 8003348:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800334a:	4a32      	ldr	r2, [pc, #200]	; (8003414 <HAL_GPIO_Init+0x334>)
 800334c:	69bb      	ldr	r3, [r7, #24]
 800334e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003350:	4b30      	ldr	r3, [pc, #192]	; (8003414 <HAL_GPIO_Init+0x334>)
 8003352:	68db      	ldr	r3, [r3, #12]
 8003354:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003356:	693b      	ldr	r3, [r7, #16]
 8003358:	43db      	mvns	r3, r3
 800335a:	69ba      	ldr	r2, [r7, #24]
 800335c:	4013      	ands	r3, r2
 800335e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	685b      	ldr	r3, [r3, #4]
 8003364:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003368:	2b00      	cmp	r3, #0
 800336a:	d003      	beq.n	8003374 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800336c:	69ba      	ldr	r2, [r7, #24]
 800336e:	693b      	ldr	r3, [r7, #16]
 8003370:	4313      	orrs	r3, r2
 8003372:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003374:	4a27      	ldr	r2, [pc, #156]	; (8003414 <HAL_GPIO_Init+0x334>)
 8003376:	69bb      	ldr	r3, [r7, #24]
 8003378:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800337a:	4b26      	ldr	r3, [pc, #152]	; (8003414 <HAL_GPIO_Init+0x334>)
 800337c:	685b      	ldr	r3, [r3, #4]
 800337e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003380:	693b      	ldr	r3, [r7, #16]
 8003382:	43db      	mvns	r3, r3
 8003384:	69ba      	ldr	r2, [r7, #24]
 8003386:	4013      	ands	r3, r2
 8003388:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	685b      	ldr	r3, [r3, #4]
 800338e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003392:	2b00      	cmp	r3, #0
 8003394:	d003      	beq.n	800339e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003396:	69ba      	ldr	r2, [r7, #24]
 8003398:	693b      	ldr	r3, [r7, #16]
 800339a:	4313      	orrs	r3, r2
 800339c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800339e:	4a1d      	ldr	r2, [pc, #116]	; (8003414 <HAL_GPIO_Init+0x334>)
 80033a0:	69bb      	ldr	r3, [r7, #24]
 80033a2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80033a4:	4b1b      	ldr	r3, [pc, #108]	; (8003414 <HAL_GPIO_Init+0x334>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033aa:	693b      	ldr	r3, [r7, #16]
 80033ac:	43db      	mvns	r3, r3
 80033ae:	69ba      	ldr	r2, [r7, #24]
 80033b0:	4013      	ands	r3, r2
 80033b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	685b      	ldr	r3, [r3, #4]
 80033b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d003      	beq.n	80033c8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80033c0:	69ba      	ldr	r2, [r7, #24]
 80033c2:	693b      	ldr	r3, [r7, #16]
 80033c4:	4313      	orrs	r3, r2
 80033c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80033c8:	4a12      	ldr	r2, [pc, #72]	; (8003414 <HAL_GPIO_Init+0x334>)
 80033ca:	69bb      	ldr	r3, [r7, #24]
 80033cc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80033ce:	69fb      	ldr	r3, [r7, #28]
 80033d0:	3301      	adds	r3, #1
 80033d2:	61fb      	str	r3, [r7, #28]
 80033d4:	69fb      	ldr	r3, [r7, #28]
 80033d6:	2b0f      	cmp	r3, #15
 80033d8:	f67f ae90 	bls.w	80030fc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80033dc:	bf00      	nop
 80033de:	bf00      	nop
 80033e0:	3724      	adds	r7, #36	; 0x24
 80033e2:	46bd      	mov	sp, r7
 80033e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e8:	4770      	bx	lr
 80033ea:	bf00      	nop
 80033ec:	40023800 	.word	0x40023800
 80033f0:	40013800 	.word	0x40013800
 80033f4:	40020000 	.word	0x40020000
 80033f8:	40020400 	.word	0x40020400
 80033fc:	40020800 	.word	0x40020800
 8003400:	40020c00 	.word	0x40020c00
 8003404:	40021000 	.word	0x40021000
 8003408:	40021400 	.word	0x40021400
 800340c:	40021800 	.word	0x40021800
 8003410:	40021c00 	.word	0x40021c00
 8003414:	40013c00 	.word	0x40013c00

08003418 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003418:	b480      	push	{r7}
 800341a:	b085      	sub	sp, #20
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
 8003420:	460b      	mov	r3, r1
 8003422:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	691a      	ldr	r2, [r3, #16]
 8003428:	887b      	ldrh	r3, [r7, #2]
 800342a:	4013      	ands	r3, r2
 800342c:	2b00      	cmp	r3, #0
 800342e:	d002      	beq.n	8003436 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003430:	2301      	movs	r3, #1
 8003432:	73fb      	strb	r3, [r7, #15]
 8003434:	e001      	b.n	800343a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003436:	2300      	movs	r3, #0
 8003438:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800343a:	7bfb      	ldrb	r3, [r7, #15]
}
 800343c:	4618      	mov	r0, r3
 800343e:	3714      	adds	r7, #20
 8003440:	46bd      	mov	sp, r7
 8003442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003446:	4770      	bx	lr

08003448 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003448:	b480      	push	{r7}
 800344a:	b083      	sub	sp, #12
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
 8003450:	460b      	mov	r3, r1
 8003452:	807b      	strh	r3, [r7, #2]
 8003454:	4613      	mov	r3, r2
 8003456:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003458:	787b      	ldrb	r3, [r7, #1]
 800345a:	2b00      	cmp	r3, #0
 800345c:	d003      	beq.n	8003466 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800345e:	887a      	ldrh	r2, [r7, #2]
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003464:	e003      	b.n	800346e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003466:	887b      	ldrh	r3, [r7, #2]
 8003468:	041a      	lsls	r2, r3, #16
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	619a      	str	r2, [r3, #24]
}
 800346e:	bf00      	nop
 8003470:	370c      	adds	r7, #12
 8003472:	46bd      	mov	sp, r7
 8003474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003478:	4770      	bx	lr
	...

0800347c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b084      	sub	sp, #16
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2b00      	cmp	r3, #0
 8003488:	d101      	bne.n	800348e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800348a:	2301      	movs	r3, #1
 800348c:	e12b      	b.n	80036e6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003494:	b2db      	uxtb	r3, r3
 8003496:	2b00      	cmp	r3, #0
 8003498:	d106      	bne.n	80034a8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2200      	movs	r2, #0
 800349e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80034a2:	6878      	ldr	r0, [r7, #4]
 80034a4:	f7fd ff86 	bl	80013b4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2224      	movs	r2, #36	; 0x24
 80034ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	681a      	ldr	r2, [r3, #0]
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f022 0201 	bic.w	r2, r2, #1
 80034be:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	681a      	ldr	r2, [r3, #0]
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80034ce:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	681a      	ldr	r2, [r3, #0]
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80034de:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80034e0:	f002 f91a 	bl	8005718 <HAL_RCC_GetPCLK1Freq>
 80034e4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	685b      	ldr	r3, [r3, #4]
 80034ea:	4a81      	ldr	r2, [pc, #516]	; (80036f0 <HAL_I2C_Init+0x274>)
 80034ec:	4293      	cmp	r3, r2
 80034ee:	d807      	bhi.n	8003500 <HAL_I2C_Init+0x84>
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	4a80      	ldr	r2, [pc, #512]	; (80036f4 <HAL_I2C_Init+0x278>)
 80034f4:	4293      	cmp	r3, r2
 80034f6:	bf94      	ite	ls
 80034f8:	2301      	movls	r3, #1
 80034fa:	2300      	movhi	r3, #0
 80034fc:	b2db      	uxtb	r3, r3
 80034fe:	e006      	b.n	800350e <HAL_I2C_Init+0x92>
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	4a7d      	ldr	r2, [pc, #500]	; (80036f8 <HAL_I2C_Init+0x27c>)
 8003504:	4293      	cmp	r3, r2
 8003506:	bf94      	ite	ls
 8003508:	2301      	movls	r3, #1
 800350a:	2300      	movhi	r3, #0
 800350c:	b2db      	uxtb	r3, r3
 800350e:	2b00      	cmp	r3, #0
 8003510:	d001      	beq.n	8003516 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003512:	2301      	movs	r3, #1
 8003514:	e0e7      	b.n	80036e6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	4a78      	ldr	r2, [pc, #480]	; (80036fc <HAL_I2C_Init+0x280>)
 800351a:	fba2 2303 	umull	r2, r3, r2, r3
 800351e:	0c9b      	lsrs	r3, r3, #18
 8003520:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	685b      	ldr	r3, [r3, #4]
 8003528:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	68ba      	ldr	r2, [r7, #8]
 8003532:	430a      	orrs	r2, r1
 8003534:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	6a1b      	ldr	r3, [r3, #32]
 800353c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	685b      	ldr	r3, [r3, #4]
 8003544:	4a6a      	ldr	r2, [pc, #424]	; (80036f0 <HAL_I2C_Init+0x274>)
 8003546:	4293      	cmp	r3, r2
 8003548:	d802      	bhi.n	8003550 <HAL_I2C_Init+0xd4>
 800354a:	68bb      	ldr	r3, [r7, #8]
 800354c:	3301      	adds	r3, #1
 800354e:	e009      	b.n	8003564 <HAL_I2C_Init+0xe8>
 8003550:	68bb      	ldr	r3, [r7, #8]
 8003552:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003556:	fb02 f303 	mul.w	r3, r2, r3
 800355a:	4a69      	ldr	r2, [pc, #420]	; (8003700 <HAL_I2C_Init+0x284>)
 800355c:	fba2 2303 	umull	r2, r3, r2, r3
 8003560:	099b      	lsrs	r3, r3, #6
 8003562:	3301      	adds	r3, #1
 8003564:	687a      	ldr	r2, [r7, #4]
 8003566:	6812      	ldr	r2, [r2, #0]
 8003568:	430b      	orrs	r3, r1
 800356a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	69db      	ldr	r3, [r3, #28]
 8003572:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003576:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	685b      	ldr	r3, [r3, #4]
 800357e:	495c      	ldr	r1, [pc, #368]	; (80036f0 <HAL_I2C_Init+0x274>)
 8003580:	428b      	cmp	r3, r1
 8003582:	d819      	bhi.n	80035b8 <HAL_I2C_Init+0x13c>
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	1e59      	subs	r1, r3, #1
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	685b      	ldr	r3, [r3, #4]
 800358c:	005b      	lsls	r3, r3, #1
 800358e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003592:	1c59      	adds	r1, r3, #1
 8003594:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003598:	400b      	ands	r3, r1
 800359a:	2b00      	cmp	r3, #0
 800359c:	d00a      	beq.n	80035b4 <HAL_I2C_Init+0x138>
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	1e59      	subs	r1, r3, #1
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	685b      	ldr	r3, [r3, #4]
 80035a6:	005b      	lsls	r3, r3, #1
 80035a8:	fbb1 f3f3 	udiv	r3, r1, r3
 80035ac:	3301      	adds	r3, #1
 80035ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035b2:	e051      	b.n	8003658 <HAL_I2C_Init+0x1dc>
 80035b4:	2304      	movs	r3, #4
 80035b6:	e04f      	b.n	8003658 <HAL_I2C_Init+0x1dc>
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	689b      	ldr	r3, [r3, #8]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d111      	bne.n	80035e4 <HAL_I2C_Init+0x168>
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	1e58      	subs	r0, r3, #1
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6859      	ldr	r1, [r3, #4]
 80035c8:	460b      	mov	r3, r1
 80035ca:	005b      	lsls	r3, r3, #1
 80035cc:	440b      	add	r3, r1
 80035ce:	fbb0 f3f3 	udiv	r3, r0, r3
 80035d2:	3301      	adds	r3, #1
 80035d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035d8:	2b00      	cmp	r3, #0
 80035da:	bf0c      	ite	eq
 80035dc:	2301      	moveq	r3, #1
 80035de:	2300      	movne	r3, #0
 80035e0:	b2db      	uxtb	r3, r3
 80035e2:	e012      	b.n	800360a <HAL_I2C_Init+0x18e>
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	1e58      	subs	r0, r3, #1
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6859      	ldr	r1, [r3, #4]
 80035ec:	460b      	mov	r3, r1
 80035ee:	009b      	lsls	r3, r3, #2
 80035f0:	440b      	add	r3, r1
 80035f2:	0099      	lsls	r1, r3, #2
 80035f4:	440b      	add	r3, r1
 80035f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80035fa:	3301      	adds	r3, #1
 80035fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003600:	2b00      	cmp	r3, #0
 8003602:	bf0c      	ite	eq
 8003604:	2301      	moveq	r3, #1
 8003606:	2300      	movne	r3, #0
 8003608:	b2db      	uxtb	r3, r3
 800360a:	2b00      	cmp	r3, #0
 800360c:	d001      	beq.n	8003612 <HAL_I2C_Init+0x196>
 800360e:	2301      	movs	r3, #1
 8003610:	e022      	b.n	8003658 <HAL_I2C_Init+0x1dc>
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	689b      	ldr	r3, [r3, #8]
 8003616:	2b00      	cmp	r3, #0
 8003618:	d10e      	bne.n	8003638 <HAL_I2C_Init+0x1bc>
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	1e58      	subs	r0, r3, #1
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6859      	ldr	r1, [r3, #4]
 8003622:	460b      	mov	r3, r1
 8003624:	005b      	lsls	r3, r3, #1
 8003626:	440b      	add	r3, r1
 8003628:	fbb0 f3f3 	udiv	r3, r0, r3
 800362c:	3301      	adds	r3, #1
 800362e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003632:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003636:	e00f      	b.n	8003658 <HAL_I2C_Init+0x1dc>
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	1e58      	subs	r0, r3, #1
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6859      	ldr	r1, [r3, #4]
 8003640:	460b      	mov	r3, r1
 8003642:	009b      	lsls	r3, r3, #2
 8003644:	440b      	add	r3, r1
 8003646:	0099      	lsls	r1, r3, #2
 8003648:	440b      	add	r3, r1
 800364a:	fbb0 f3f3 	udiv	r3, r0, r3
 800364e:	3301      	adds	r3, #1
 8003650:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003654:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003658:	6879      	ldr	r1, [r7, #4]
 800365a:	6809      	ldr	r1, [r1, #0]
 800365c:	4313      	orrs	r3, r2
 800365e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	69da      	ldr	r2, [r3, #28]
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6a1b      	ldr	r3, [r3, #32]
 8003672:	431a      	orrs	r2, r3
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	430a      	orrs	r2, r1
 800367a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	689b      	ldr	r3, [r3, #8]
 8003682:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003686:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800368a:	687a      	ldr	r2, [r7, #4]
 800368c:	6911      	ldr	r1, [r2, #16]
 800368e:	687a      	ldr	r2, [r7, #4]
 8003690:	68d2      	ldr	r2, [r2, #12]
 8003692:	4311      	orrs	r1, r2
 8003694:	687a      	ldr	r2, [r7, #4]
 8003696:	6812      	ldr	r2, [r2, #0]
 8003698:	430b      	orrs	r3, r1
 800369a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	68db      	ldr	r3, [r3, #12]
 80036a2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	695a      	ldr	r2, [r3, #20]
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	699b      	ldr	r3, [r3, #24]
 80036ae:	431a      	orrs	r2, r3
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	430a      	orrs	r2, r1
 80036b6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	681a      	ldr	r2, [r3, #0]
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f042 0201 	orr.w	r2, r2, #1
 80036c6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2200      	movs	r2, #0
 80036cc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	2220      	movs	r2, #32
 80036d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2200      	movs	r2, #0
 80036da:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2200      	movs	r2, #0
 80036e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80036e4:	2300      	movs	r3, #0
}
 80036e6:	4618      	mov	r0, r3
 80036e8:	3710      	adds	r7, #16
 80036ea:	46bd      	mov	sp, r7
 80036ec:	bd80      	pop	{r7, pc}
 80036ee:	bf00      	nop
 80036f0:	000186a0 	.word	0x000186a0
 80036f4:	001e847f 	.word	0x001e847f
 80036f8:	003d08ff 	.word	0x003d08ff
 80036fc:	431bde83 	.word	0x431bde83
 8003700:	10624dd3 	.word	0x10624dd3

08003704 <HAL_NOR_Init>:
  * @param  ExtTiming pointer to NOR extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_NOR_Init(NOR_HandleTypeDef *hnor, FMC_NORSRAM_TimingTypeDef *Timing,
                               FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	b086      	sub	sp, #24
 8003708:	af00      	add	r7, sp, #0
 800370a:	60f8      	str	r0, [r7, #12]
 800370c:	60b9      	str	r1, [r7, #8]
 800370e:	607a      	str	r2, [r7, #4]
  uint32_t deviceaddress;
  HAL_StatusTypeDef status = HAL_OK;
 8003710:	2300      	movs	r3, #0
 8003712:	74fb      	strb	r3, [r7, #19]

  /* Check the NOR handle parameter */
  if (hnor == NULL)
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	2b00      	cmp	r3, #0
 8003718:	d101      	bne.n	800371e <HAL_NOR_Init+0x1a>
  {
    return HAL_ERROR;
 800371a:	2301      	movs	r3, #1
 800371c:	e090      	b.n	8003840 <HAL_NOR_Init+0x13c>
  }

  if (hnor->State == HAL_NOR_STATE_RESET)
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8003724:	b2db      	uxtb	r3, r3
 8003726:	2b00      	cmp	r3, #0
 8003728:	d106      	bne.n	8003738 <HAL_NOR_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hnor->Lock = HAL_UNLOCKED;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	2200      	movs	r2, #0
 800372e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hnor->MspInitCallback(hnor);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_NOR_MspInit(hnor);
 8003732:	68f8      	ldr	r0, [r7, #12]
 8003734:	f7fd ff98 	bl	8001668 <HAL_NOR_MspInit>
#endif /* (USE_HAL_NOR_REGISTER_CALLBACKS) */
  }

  /* Initialize NOR control Interface */
  (void)FMC_NORSRAM_Init(hnor->Instance, &(hnor->Init));
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	681a      	ldr	r2, [r3, #0]
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	3308      	adds	r3, #8
 8003740:	4619      	mov	r1, r3
 8003742:	4610      	mov	r0, r2
 8003744:	f002 fdb0 	bl	80062a8 <FSMC_NORSRAM_Init>

  /* Initialize NOR timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hnor->Instance, Timing, hnor->Init.NSBank);
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	6818      	ldr	r0, [r3, #0]
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	689b      	ldr	r3, [r3, #8]
 8003750:	461a      	mov	r2, r3
 8003752:	68b9      	ldr	r1, [r7, #8]
 8003754:	f002 fe12 	bl	800637c <FSMC_NORSRAM_Timing_Init>

  /* Initialize NOR extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hnor->Extended, ExtTiming, hnor->Init.NSBank, hnor->Init.ExtendedMode);
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	6858      	ldr	r0, [r3, #4]
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	689a      	ldr	r2, [r3, #8]
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003764:	6879      	ldr	r1, [r7, #4]
 8003766:	f002 fe3f 	bl	80063e8 <FSMC_NORSRAM_Extended_Timing_Init>

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hnor->Instance, hnor->Init.NSBank);
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	68fa      	ldr	r2, [r7, #12]
 8003770:	6892      	ldr	r2, [r2, #8]
 8003772:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	68fa      	ldr	r2, [r7, #12]
 800377c:	6892      	ldr	r2, [r2, #8]
 800377e:	f041 0101 	orr.w	r1, r1, #1
 8003782:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize NOR Memory Data Width*/
  if (hnor->Init.MemoryDataWidth == FMC_NORSRAM_MEM_BUS_WIDTH_8)
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	695b      	ldr	r3, [r3, #20]
 800378a:	2b00      	cmp	r3, #0
 800378c:	d103      	bne.n	8003796 <HAL_NOR_Init+0x92>
  {
    uwNORMemoryDataWidth = NOR_MEMORY_8B;
 800378e:	4b2e      	ldr	r3, [pc, #184]	; (8003848 <HAL_NOR_Init+0x144>)
 8003790:	2200      	movs	r2, #0
 8003792:	601a      	str	r2, [r3, #0]
 8003794:	e002      	b.n	800379c <HAL_NOR_Init+0x98>
  }
  else
  {
    uwNORMemoryDataWidth = NOR_MEMORY_16B;
 8003796:	4b2c      	ldr	r3, [pc, #176]	; (8003848 <HAL_NOR_Init+0x144>)
 8003798:	2201      	movs	r2, #1
 800379a:	601a      	str	r2, [r3, #0]
  }

  /* Initialize the NOR controller state */
  hnor->State = HAL_NOR_STATE_READY;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	2201      	movs	r2, #1
 80037a0:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

  /* Select the NOR device address */
  if (hnor->Init.NSBank == FMC_NORSRAM_BANK1)
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	689b      	ldr	r3, [r3, #8]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d103      	bne.n	80037b4 <HAL_NOR_Init+0xb0>
  {
    deviceaddress = NOR_MEMORY_ADRESS1;
 80037ac:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 80037b0:	617b      	str	r3, [r7, #20]
 80037b2:	e012      	b.n	80037da <HAL_NOR_Init+0xd6>
  }
  else if (hnor->Init.NSBank == FMC_NORSRAM_BANK2)
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	689b      	ldr	r3, [r3, #8]
 80037b8:	2b02      	cmp	r3, #2
 80037ba:	d103      	bne.n	80037c4 <HAL_NOR_Init+0xc0>
  {
    deviceaddress = NOR_MEMORY_ADRESS2;
 80037bc:	f04f 43c8 	mov.w	r3, #1677721600	; 0x64000000
 80037c0:	617b      	str	r3, [r7, #20]
 80037c2:	e00a      	b.n	80037da <HAL_NOR_Init+0xd6>
  }
  else if (hnor->Init.NSBank == FMC_NORSRAM_BANK3)
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	689b      	ldr	r3, [r3, #8]
 80037c8:	2b04      	cmp	r3, #4
 80037ca:	d103      	bne.n	80037d4 <HAL_NOR_Init+0xd0>
  {
    deviceaddress = NOR_MEMORY_ADRESS3;
 80037cc:	f04f 43d0 	mov.w	r3, #1744830464	; 0x68000000
 80037d0:	617b      	str	r3, [r7, #20]
 80037d2:	e002      	b.n	80037da <HAL_NOR_Init+0xd6>
  }
  else /* FMC_NORSRAM_BANK4 */
  {
    deviceaddress = NOR_MEMORY_ADRESS4;
 80037d4:	f04f 43d8 	mov.w	r3, #1811939328	; 0x6c000000
 80037d8:	617b      	str	r3, [r7, #20]
  }

  if (hnor->Init.WriteOperation == FMC_WRITE_OPERATION_DISABLE)
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d10c      	bne.n	80037fc <HAL_NOR_Init+0xf8>
  {
    (void)FMC_NORSRAM_WriteOperation_Disable(hnor->Instance, hnor->Init.NSBank);
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	681a      	ldr	r2, [r3, #0]
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	689b      	ldr	r3, [r3, #8]
 80037ea:	4619      	mov	r1, r3
 80037ec:	4610      	mov	r0, r2
 80037ee:	f002 fe33 	bl	8006458 <FSMC_NORSRAM_WriteOperation_Disable>

    /* Update the NOR controller state */
    hnor->State = HAL_NOR_STATE_PROTECTED;
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	2204      	movs	r2, #4
 80037f6:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
 80037fa:	e020      	b.n	800383e <HAL_NOR_Init+0x13a>
  }
  else
  {
    /* Get the value of the command set */
    NOR_WRITE(NOR_ADDR_SHIFT(deviceaddress, uwNORMemoryDataWidth, NOR_CMD_ADDRESS_FIRST_CFI), NOR_CMD_DATA_CFI);
 80037fc:	4b12      	ldr	r3, [pc, #72]	; (8003848 <HAL_NOR_Init+0x144>)
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	2b01      	cmp	r3, #1
 8003802:	d102      	bne.n	800380a <HAL_NOR_Init+0x106>
 8003804:	697b      	ldr	r3, [r7, #20]
 8003806:	33aa      	adds	r3, #170	; 0xaa
 8003808:	e001      	b.n	800380e <HAL_NOR_Init+0x10a>
 800380a:	697b      	ldr	r3, [r7, #20]
 800380c:	3355      	adds	r3, #85	; 0x55
 800380e:	2298      	movs	r2, #152	; 0x98
 8003810:	801a      	strh	r2, [r3, #0]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003812:	f3bf 8f4f 	dsb	sy
}
 8003816:	bf00      	nop
    hnor->CommandSet = *(__IO uint16_t *) NOR_ADDR_SHIFT(deviceaddress, uwNORMemoryDataWidth, NOR_ADDRESS_COMMAND_SET);
 8003818:	4b0b      	ldr	r3, [pc, #44]	; (8003848 <HAL_NOR_Init+0x144>)
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	2b01      	cmp	r3, #1
 800381e:	d102      	bne.n	8003826 <HAL_NOR_Init+0x122>
 8003820:	697b      	ldr	r3, [r7, #20]
 8003822:	3326      	adds	r3, #38	; 0x26
 8003824:	e001      	b.n	800382a <HAL_NOR_Init+0x126>
 8003826:	697b      	ldr	r3, [r7, #20]
 8003828:	3313      	adds	r3, #19
 800382a:	881b      	ldrh	r3, [r3, #0]
 800382c:	b29b      	uxth	r3, r3
 800382e:	461a      	mov	r2, r3
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	64da      	str	r2, [r3, #76]	; 0x4c

    status = HAL_NOR_ReturnToReadMode(hnor);
 8003834:	68f8      	ldr	r0, [r7, #12]
 8003836:	f000 f809 	bl	800384c <HAL_NOR_ReturnToReadMode>
 800383a:	4603      	mov	r3, r0
 800383c:	74fb      	strb	r3, [r7, #19]
  }

  return status;
 800383e:	7cfb      	ldrb	r3, [r7, #19]
}
 8003840:	4618      	mov	r0, r3
 8003842:	3718      	adds	r7, #24
 8003844:	46bd      	mov	sp, r7
 8003846:	bd80      	pop	{r7, pc}
 8003848:	20000698 	.word	0x20000698

0800384c <HAL_NOR_ReturnToReadMode>:
  * @param  hnor pointer to a NOR_HandleTypeDef structure that contains
  *                the configuration information for NOR module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_NOR_ReturnToReadMode(NOR_HandleTypeDef *hnor)
{
 800384c:	b480      	push	{r7}
 800384e:	b085      	sub	sp, #20
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
  uint32_t deviceaddress;
  HAL_NOR_StateTypeDef state;
  HAL_StatusTypeDef status = HAL_OK;
 8003854:	2300      	movs	r3, #0
 8003856:	72fb      	strb	r3, [r7, #11]

  /* Check the NOR controller state */
  state = hnor->State;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 800385e:	72bb      	strb	r3, [r7, #10]
  if (state == HAL_NOR_STATE_BUSY)
 8003860:	7abb      	ldrb	r3, [r7, #10]
 8003862:	2b02      	cmp	r3, #2
 8003864:	d101      	bne.n	800386a <HAL_NOR_ReturnToReadMode+0x1e>
  {
    return HAL_BUSY;
 8003866:	2302      	movs	r3, #2
 8003868:	e052      	b.n	8003910 <HAL_NOR_ReturnToReadMode+0xc4>
  }
  else if (state == HAL_NOR_STATE_PROTECTED)
 800386a:	7abb      	ldrb	r3, [r7, #10]
 800386c:	2b04      	cmp	r3, #4
 800386e:	d101      	bne.n	8003874 <HAL_NOR_ReturnToReadMode+0x28>
  {
    return HAL_ERROR;
 8003870:	2301      	movs	r3, #1
 8003872:	e04d      	b.n	8003910 <HAL_NOR_ReturnToReadMode+0xc4>
  }
  else if (state == HAL_NOR_STATE_READY)
 8003874:	7abb      	ldrb	r3, [r7, #10]
 8003876:	2b01      	cmp	r3, #1
 8003878:	d149      	bne.n	800390e <HAL_NOR_ReturnToReadMode+0xc2>
  {
    /* Process Locked */
    __HAL_LOCK(hnor);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8003880:	2b01      	cmp	r3, #1
 8003882:	d101      	bne.n	8003888 <HAL_NOR_ReturnToReadMode+0x3c>
 8003884:	2302      	movs	r3, #2
 8003886:	e043      	b.n	8003910 <HAL_NOR_ReturnToReadMode+0xc4>
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2201      	movs	r2, #1
 800388c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Update the NOR controller state */
    hnor->State = HAL_NOR_STATE_BUSY;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2202      	movs	r2, #2
 8003894:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

    /* Select the NOR device address */
    if (hnor->Init.NSBank == FMC_NORSRAM_BANK1)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	689b      	ldr	r3, [r3, #8]
 800389c:	2b00      	cmp	r3, #0
 800389e:	d103      	bne.n	80038a8 <HAL_NOR_ReturnToReadMode+0x5c>
    {
      deviceaddress = NOR_MEMORY_ADRESS1;
 80038a0:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 80038a4:	60fb      	str	r3, [r7, #12]
 80038a6:	e012      	b.n	80038ce <HAL_NOR_ReturnToReadMode+0x82>
    }
    else if (hnor->Init.NSBank == FMC_NORSRAM_BANK2)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	689b      	ldr	r3, [r3, #8]
 80038ac:	2b02      	cmp	r3, #2
 80038ae:	d103      	bne.n	80038b8 <HAL_NOR_ReturnToReadMode+0x6c>
    {
      deviceaddress = NOR_MEMORY_ADRESS2;
 80038b0:	f04f 43c8 	mov.w	r3, #1677721600	; 0x64000000
 80038b4:	60fb      	str	r3, [r7, #12]
 80038b6:	e00a      	b.n	80038ce <HAL_NOR_ReturnToReadMode+0x82>
    }
    else if (hnor->Init.NSBank == FMC_NORSRAM_BANK3)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	689b      	ldr	r3, [r3, #8]
 80038bc:	2b04      	cmp	r3, #4
 80038be:	d103      	bne.n	80038c8 <HAL_NOR_ReturnToReadMode+0x7c>
    {
      deviceaddress = NOR_MEMORY_ADRESS3;
 80038c0:	f04f 43d0 	mov.w	r3, #1744830464	; 0x68000000
 80038c4:	60fb      	str	r3, [r7, #12]
 80038c6:	e002      	b.n	80038ce <HAL_NOR_ReturnToReadMode+0x82>
    }
    else /* FMC_NORSRAM_BANK4 */
    {
      deviceaddress = NOR_MEMORY_ADRESS4;
 80038c8:	f04f 43d8 	mov.w	r3, #1811939328	; 0x6c000000
 80038cc:	60fb      	str	r3, [r7, #12]
    }

    if (hnor->CommandSet == NOR_AMD_FUJITSU_COMMAND_SET)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038d2:	2b02      	cmp	r3, #2
 80038d4:	d105      	bne.n	80038e2 <HAL_NOR_ReturnToReadMode+0x96>
    {
      NOR_WRITE(deviceaddress, NOR_CMD_DATA_READ_RESET);
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	22f0      	movs	r2, #240	; 0xf0
 80038da:	801a      	strh	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80038dc:	f3bf 8f4f 	dsb	sy
}
 80038e0:	e00b      	b.n	80038fa <HAL_NOR_ReturnToReadMode+0xae>
    }
    else if (hnor->CommandSet == NOR_INTEL_SHARP_EXT_COMMAND_SET)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038e6:	2b01      	cmp	r3, #1
 80038e8:	d105      	bne.n	80038f6 <HAL_NOR_ReturnToReadMode+0xaa>
    {
      NOR_WRITE(deviceaddress, NOR_CMD_READ_ARRAY);
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	22ff      	movs	r2, #255	; 0xff
 80038ee:	801a      	strh	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80038f0:	f3bf 8f4f 	dsb	sy
}
 80038f4:	e001      	b.n	80038fa <HAL_NOR_ReturnToReadMode+0xae>
    }
    else
    {
      /* Primary command set not supported by the driver */
      status = HAL_ERROR;
 80038f6:	2301      	movs	r3, #1
 80038f8:	72fb      	strb	r3, [r7, #11]
    }

    /* Check the NOR controller state */
    hnor->State = state;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	7aba      	ldrb	r2, [r7, #10]
 80038fe:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

    /* Process unlocked */
    __HAL_UNLOCK(hnor);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2200      	movs	r2, #0
 8003906:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  else
  {
    return HAL_ERROR;
  }

  return status;
 800390a:	7afb      	ldrb	r3, [r7, #11]
 800390c:	e000      	b.n	8003910 <HAL_NOR_ReturnToReadMode+0xc4>
    return HAL_ERROR;
 800390e:	2301      	movs	r3, #1
}
 8003910:	4618      	mov	r0, r3
 8003912:	3714      	adds	r7, #20
 8003914:	46bd      	mov	sp, r7
 8003916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391a:	4770      	bx	lr

0800391c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800391c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800391e:	b08f      	sub	sp, #60	; 0x3c
 8003920:	af0a      	add	r7, sp, #40	; 0x28
 8003922:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2b00      	cmp	r3, #0
 8003928:	d101      	bne.n	800392e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800392a:	2301      	movs	r3, #1
 800392c:	e10f      	b.n	8003b4e <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800393a:	b2db      	uxtb	r3, r3
 800393c:	2b00      	cmp	r3, #0
 800393e:	d106      	bne.n	800394e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2200      	movs	r2, #0
 8003944:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003948:	6878      	ldr	r0, [r7, #4]
 800394a:	f006 f84f 	bl	80099ec <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	2203      	movs	r2, #3
 8003952:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003956:	68bb      	ldr	r3, [r7, #8]
 8003958:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800395a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800395e:	2b00      	cmp	r3, #0
 8003960:	d102      	bne.n	8003968 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	2200      	movs	r2, #0
 8003966:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4618      	mov	r0, r3
 800396e:	f002 fe9e 	bl	80066ae <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	603b      	str	r3, [r7, #0]
 8003978:	687e      	ldr	r6, [r7, #4]
 800397a:	466d      	mov	r5, sp
 800397c:	f106 0410 	add.w	r4, r6, #16
 8003980:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003982:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003984:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003986:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003988:	e894 0003 	ldmia.w	r4, {r0, r1}
 800398c:	e885 0003 	stmia.w	r5, {r0, r1}
 8003990:	1d33      	adds	r3, r6, #4
 8003992:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003994:	6838      	ldr	r0, [r7, #0]
 8003996:	f002 fd75 	bl	8006484 <USB_CoreInit>
 800399a:	4603      	mov	r3, r0
 800399c:	2b00      	cmp	r3, #0
 800399e:	d005      	beq.n	80039ac <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2202      	movs	r2, #2
 80039a4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80039a8:	2301      	movs	r3, #1
 80039aa:	e0d0      	b.n	8003b4e <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	2100      	movs	r1, #0
 80039b2:	4618      	mov	r0, r3
 80039b4:	f002 fe8c 	bl	80066d0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80039b8:	2300      	movs	r3, #0
 80039ba:	73fb      	strb	r3, [r7, #15]
 80039bc:	e04a      	b.n	8003a54 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80039be:	7bfa      	ldrb	r2, [r7, #15]
 80039c0:	6879      	ldr	r1, [r7, #4]
 80039c2:	4613      	mov	r3, r2
 80039c4:	00db      	lsls	r3, r3, #3
 80039c6:	4413      	add	r3, r2
 80039c8:	009b      	lsls	r3, r3, #2
 80039ca:	440b      	add	r3, r1
 80039cc:	333d      	adds	r3, #61	; 0x3d
 80039ce:	2201      	movs	r2, #1
 80039d0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80039d2:	7bfa      	ldrb	r2, [r7, #15]
 80039d4:	6879      	ldr	r1, [r7, #4]
 80039d6:	4613      	mov	r3, r2
 80039d8:	00db      	lsls	r3, r3, #3
 80039da:	4413      	add	r3, r2
 80039dc:	009b      	lsls	r3, r3, #2
 80039de:	440b      	add	r3, r1
 80039e0:	333c      	adds	r3, #60	; 0x3c
 80039e2:	7bfa      	ldrb	r2, [r7, #15]
 80039e4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80039e6:	7bfa      	ldrb	r2, [r7, #15]
 80039e8:	7bfb      	ldrb	r3, [r7, #15]
 80039ea:	b298      	uxth	r0, r3
 80039ec:	6879      	ldr	r1, [r7, #4]
 80039ee:	4613      	mov	r3, r2
 80039f0:	00db      	lsls	r3, r3, #3
 80039f2:	4413      	add	r3, r2
 80039f4:	009b      	lsls	r3, r3, #2
 80039f6:	440b      	add	r3, r1
 80039f8:	3344      	adds	r3, #68	; 0x44
 80039fa:	4602      	mov	r2, r0
 80039fc:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80039fe:	7bfa      	ldrb	r2, [r7, #15]
 8003a00:	6879      	ldr	r1, [r7, #4]
 8003a02:	4613      	mov	r3, r2
 8003a04:	00db      	lsls	r3, r3, #3
 8003a06:	4413      	add	r3, r2
 8003a08:	009b      	lsls	r3, r3, #2
 8003a0a:	440b      	add	r3, r1
 8003a0c:	3340      	adds	r3, #64	; 0x40
 8003a0e:	2200      	movs	r2, #0
 8003a10:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003a12:	7bfa      	ldrb	r2, [r7, #15]
 8003a14:	6879      	ldr	r1, [r7, #4]
 8003a16:	4613      	mov	r3, r2
 8003a18:	00db      	lsls	r3, r3, #3
 8003a1a:	4413      	add	r3, r2
 8003a1c:	009b      	lsls	r3, r3, #2
 8003a1e:	440b      	add	r3, r1
 8003a20:	3348      	adds	r3, #72	; 0x48
 8003a22:	2200      	movs	r2, #0
 8003a24:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003a26:	7bfa      	ldrb	r2, [r7, #15]
 8003a28:	6879      	ldr	r1, [r7, #4]
 8003a2a:	4613      	mov	r3, r2
 8003a2c:	00db      	lsls	r3, r3, #3
 8003a2e:	4413      	add	r3, r2
 8003a30:	009b      	lsls	r3, r3, #2
 8003a32:	440b      	add	r3, r1
 8003a34:	334c      	adds	r3, #76	; 0x4c
 8003a36:	2200      	movs	r2, #0
 8003a38:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003a3a:	7bfa      	ldrb	r2, [r7, #15]
 8003a3c:	6879      	ldr	r1, [r7, #4]
 8003a3e:	4613      	mov	r3, r2
 8003a40:	00db      	lsls	r3, r3, #3
 8003a42:	4413      	add	r3, r2
 8003a44:	009b      	lsls	r3, r3, #2
 8003a46:	440b      	add	r3, r1
 8003a48:	3354      	adds	r3, #84	; 0x54
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003a4e:	7bfb      	ldrb	r3, [r7, #15]
 8003a50:	3301      	adds	r3, #1
 8003a52:	73fb      	strb	r3, [r7, #15]
 8003a54:	7bfa      	ldrb	r2, [r7, #15]
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	685b      	ldr	r3, [r3, #4]
 8003a5a:	429a      	cmp	r2, r3
 8003a5c:	d3af      	bcc.n	80039be <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003a5e:	2300      	movs	r3, #0
 8003a60:	73fb      	strb	r3, [r7, #15]
 8003a62:	e044      	b.n	8003aee <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003a64:	7bfa      	ldrb	r2, [r7, #15]
 8003a66:	6879      	ldr	r1, [r7, #4]
 8003a68:	4613      	mov	r3, r2
 8003a6a:	00db      	lsls	r3, r3, #3
 8003a6c:	4413      	add	r3, r2
 8003a6e:	009b      	lsls	r3, r3, #2
 8003a70:	440b      	add	r3, r1
 8003a72:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8003a76:	2200      	movs	r2, #0
 8003a78:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003a7a:	7bfa      	ldrb	r2, [r7, #15]
 8003a7c:	6879      	ldr	r1, [r7, #4]
 8003a7e:	4613      	mov	r3, r2
 8003a80:	00db      	lsls	r3, r3, #3
 8003a82:	4413      	add	r3, r2
 8003a84:	009b      	lsls	r3, r3, #2
 8003a86:	440b      	add	r3, r1
 8003a88:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8003a8c:	7bfa      	ldrb	r2, [r7, #15]
 8003a8e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003a90:	7bfa      	ldrb	r2, [r7, #15]
 8003a92:	6879      	ldr	r1, [r7, #4]
 8003a94:	4613      	mov	r3, r2
 8003a96:	00db      	lsls	r3, r3, #3
 8003a98:	4413      	add	r3, r2
 8003a9a:	009b      	lsls	r3, r3, #2
 8003a9c:	440b      	add	r3, r1
 8003a9e:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003aa6:	7bfa      	ldrb	r2, [r7, #15]
 8003aa8:	6879      	ldr	r1, [r7, #4]
 8003aaa:	4613      	mov	r3, r2
 8003aac:	00db      	lsls	r3, r3, #3
 8003aae:	4413      	add	r3, r2
 8003ab0:	009b      	lsls	r3, r3, #2
 8003ab2:	440b      	add	r3, r1
 8003ab4:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8003ab8:	2200      	movs	r2, #0
 8003aba:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003abc:	7bfa      	ldrb	r2, [r7, #15]
 8003abe:	6879      	ldr	r1, [r7, #4]
 8003ac0:	4613      	mov	r3, r2
 8003ac2:	00db      	lsls	r3, r3, #3
 8003ac4:	4413      	add	r3, r2
 8003ac6:	009b      	lsls	r3, r3, #2
 8003ac8:	440b      	add	r3, r1
 8003aca:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8003ace:	2200      	movs	r2, #0
 8003ad0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003ad2:	7bfa      	ldrb	r2, [r7, #15]
 8003ad4:	6879      	ldr	r1, [r7, #4]
 8003ad6:	4613      	mov	r3, r2
 8003ad8:	00db      	lsls	r3, r3, #3
 8003ada:	4413      	add	r3, r2
 8003adc:	009b      	lsls	r3, r3, #2
 8003ade:	440b      	add	r3, r1
 8003ae0:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003ae8:	7bfb      	ldrb	r3, [r7, #15]
 8003aea:	3301      	adds	r3, #1
 8003aec:	73fb      	strb	r3, [r7, #15]
 8003aee:	7bfa      	ldrb	r2, [r7, #15]
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	685b      	ldr	r3, [r3, #4]
 8003af4:	429a      	cmp	r2, r3
 8003af6:	d3b5      	bcc.n	8003a64 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	603b      	str	r3, [r7, #0]
 8003afe:	687e      	ldr	r6, [r7, #4]
 8003b00:	466d      	mov	r5, sp
 8003b02:	f106 0410 	add.w	r4, r6, #16
 8003b06:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003b08:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003b0a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003b0c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003b0e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003b12:	e885 0003 	stmia.w	r5, {r0, r1}
 8003b16:	1d33      	adds	r3, r6, #4
 8003b18:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003b1a:	6838      	ldr	r0, [r7, #0]
 8003b1c:	f002 fe24 	bl	8006768 <USB_DevInit>
 8003b20:	4603      	mov	r3, r0
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d005      	beq.n	8003b32 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	2202      	movs	r2, #2
 8003b2a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003b2e:	2301      	movs	r3, #1
 8003b30:	e00d      	b.n	8003b4e <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	2200      	movs	r2, #0
 8003b36:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	2201      	movs	r2, #1
 8003b3e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	4618      	mov	r0, r3
 8003b48:	f003 ff73 	bl	8007a32 <USB_DevDisconnect>

  return HAL_OK;
 8003b4c:	2300      	movs	r3, #0
}
 8003b4e:	4618      	mov	r0, r3
 8003b50:	3714      	adds	r7, #20
 8003b52:	46bd      	mov	sp, r7
 8003b54:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003b56 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003b56:	b580      	push	{r7, lr}
 8003b58:	b084      	sub	sp, #16
 8003b5a:	af00      	add	r7, sp, #0
 8003b5c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003b6a:	2b01      	cmp	r3, #1
 8003b6c:	d101      	bne.n	8003b72 <HAL_PCD_Start+0x1c>
 8003b6e:	2302      	movs	r3, #2
 8003b70:	e020      	b.n	8003bb4 <HAL_PCD_Start+0x5e>
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	2201      	movs	r2, #1
 8003b76:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b7e:	2b01      	cmp	r3, #1
 8003b80:	d109      	bne.n	8003b96 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003b86:	2b01      	cmp	r3, #1
 8003b88:	d005      	beq.n	8003b96 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b8e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	f002 fd76 	bl	800668c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	f003 ff23 	bl	80079f0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	2200      	movs	r2, #0
 8003bae:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003bb2:	2300      	movs	r3, #0
}
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	3710      	adds	r7, #16
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	bd80      	pop	{r7, pc}

08003bbc <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003bbc:	b590      	push	{r4, r7, lr}
 8003bbe:	b08d      	sub	sp, #52	; 0x34
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003bca:	6a3b      	ldr	r3, [r7, #32]
 8003bcc:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	f003 ffe1 	bl	8007b9a <USB_GetMode>
 8003bd8:	4603      	mov	r3, r0
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	f040 848a 	bne.w	80044f4 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	4618      	mov	r0, r3
 8003be6:	f003 ff45 	bl	8007a74 <USB_ReadInterrupts>
 8003bea:	4603      	mov	r3, r0
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	f000 8480 	beq.w	80044f2 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8003bf2:	69fb      	ldr	r3, [r7, #28]
 8003bf4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003bf8:	689b      	ldr	r3, [r3, #8]
 8003bfa:	0a1b      	lsrs	r3, r3, #8
 8003bfc:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	f003 ff32 	bl	8007a74 <USB_ReadInterrupts>
 8003c10:	4603      	mov	r3, r0
 8003c12:	f003 0302 	and.w	r3, r3, #2
 8003c16:	2b02      	cmp	r3, #2
 8003c18:	d107      	bne.n	8003c2a <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	695a      	ldr	r2, [r3, #20]
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f002 0202 	and.w	r2, r2, #2
 8003c28:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	4618      	mov	r0, r3
 8003c30:	f003 ff20 	bl	8007a74 <USB_ReadInterrupts>
 8003c34:	4603      	mov	r3, r0
 8003c36:	f003 0310 	and.w	r3, r3, #16
 8003c3a:	2b10      	cmp	r3, #16
 8003c3c:	d161      	bne.n	8003d02 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	699a      	ldr	r2, [r3, #24]
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f022 0210 	bic.w	r2, r2, #16
 8003c4c:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8003c4e:	6a3b      	ldr	r3, [r7, #32]
 8003c50:	6a1b      	ldr	r3, [r3, #32]
 8003c52:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8003c54:	69bb      	ldr	r3, [r7, #24]
 8003c56:	f003 020f 	and.w	r2, r3, #15
 8003c5a:	4613      	mov	r3, r2
 8003c5c:	00db      	lsls	r3, r3, #3
 8003c5e:	4413      	add	r3, r2
 8003c60:	009b      	lsls	r3, r3, #2
 8003c62:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003c66:	687a      	ldr	r2, [r7, #4]
 8003c68:	4413      	add	r3, r2
 8003c6a:	3304      	adds	r3, #4
 8003c6c:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003c6e:	69bb      	ldr	r3, [r7, #24]
 8003c70:	0c5b      	lsrs	r3, r3, #17
 8003c72:	f003 030f 	and.w	r3, r3, #15
 8003c76:	2b02      	cmp	r3, #2
 8003c78:	d124      	bne.n	8003cc4 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003c7a:	69ba      	ldr	r2, [r7, #24]
 8003c7c:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8003c80:	4013      	ands	r3, r2
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d035      	beq.n	8003cf2 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003c86:	697b      	ldr	r3, [r7, #20]
 8003c88:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003c8a:	69bb      	ldr	r3, [r7, #24]
 8003c8c:	091b      	lsrs	r3, r3, #4
 8003c8e:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003c90:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003c94:	b29b      	uxth	r3, r3
 8003c96:	461a      	mov	r2, r3
 8003c98:	6a38      	ldr	r0, [r7, #32]
 8003c9a:	f003 fd57 	bl	800774c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003c9e:	697b      	ldr	r3, [r7, #20]
 8003ca0:	691a      	ldr	r2, [r3, #16]
 8003ca2:	69bb      	ldr	r3, [r7, #24]
 8003ca4:	091b      	lsrs	r3, r3, #4
 8003ca6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003caa:	441a      	add	r2, r3
 8003cac:	697b      	ldr	r3, [r7, #20]
 8003cae:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003cb0:	697b      	ldr	r3, [r7, #20]
 8003cb2:	6a1a      	ldr	r2, [r3, #32]
 8003cb4:	69bb      	ldr	r3, [r7, #24]
 8003cb6:	091b      	lsrs	r3, r3, #4
 8003cb8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003cbc:	441a      	add	r2, r3
 8003cbe:	697b      	ldr	r3, [r7, #20]
 8003cc0:	621a      	str	r2, [r3, #32]
 8003cc2:	e016      	b.n	8003cf2 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8003cc4:	69bb      	ldr	r3, [r7, #24]
 8003cc6:	0c5b      	lsrs	r3, r3, #17
 8003cc8:	f003 030f 	and.w	r3, r3, #15
 8003ccc:	2b06      	cmp	r3, #6
 8003cce:	d110      	bne.n	8003cf2 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003cd6:	2208      	movs	r2, #8
 8003cd8:	4619      	mov	r1, r3
 8003cda:	6a38      	ldr	r0, [r7, #32]
 8003cdc:	f003 fd36 	bl	800774c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003ce0:	697b      	ldr	r3, [r7, #20]
 8003ce2:	6a1a      	ldr	r2, [r3, #32]
 8003ce4:	69bb      	ldr	r3, [r7, #24]
 8003ce6:	091b      	lsrs	r3, r3, #4
 8003ce8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003cec:	441a      	add	r2, r3
 8003cee:	697b      	ldr	r3, [r7, #20]
 8003cf0:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	699a      	ldr	r2, [r3, #24]
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f042 0210 	orr.w	r2, r2, #16
 8003d00:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	4618      	mov	r0, r3
 8003d08:	f003 feb4 	bl	8007a74 <USB_ReadInterrupts>
 8003d0c:	4603      	mov	r3, r0
 8003d0e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003d12:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003d16:	f040 80a7 	bne.w	8003e68 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	4618      	mov	r0, r3
 8003d24:	f003 feb9 	bl	8007a9a <USB_ReadDevAllOutEpInterrupt>
 8003d28:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8003d2a:	e099      	b.n	8003e60 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003d2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d2e:	f003 0301 	and.w	r3, r3, #1
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	f000 808e 	beq.w	8003e54 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d3e:	b2d2      	uxtb	r2, r2
 8003d40:	4611      	mov	r1, r2
 8003d42:	4618      	mov	r0, r3
 8003d44:	f003 fedd 	bl	8007b02 <USB_ReadDevOutEPInterrupt>
 8003d48:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003d4a:	693b      	ldr	r3, [r7, #16]
 8003d4c:	f003 0301 	and.w	r3, r3, #1
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d00c      	beq.n	8003d6e <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d56:	015a      	lsls	r2, r3, #5
 8003d58:	69fb      	ldr	r3, [r7, #28]
 8003d5a:	4413      	add	r3, r2
 8003d5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d60:	461a      	mov	r2, r3
 8003d62:	2301      	movs	r3, #1
 8003d64:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003d66:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003d68:	6878      	ldr	r0, [r7, #4]
 8003d6a:	f000 feab 	bl	8004ac4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003d6e:	693b      	ldr	r3, [r7, #16]
 8003d70:	f003 0308 	and.w	r3, r3, #8
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d00c      	beq.n	8003d92 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d7a:	015a      	lsls	r2, r3, #5
 8003d7c:	69fb      	ldr	r3, [r7, #28]
 8003d7e:	4413      	add	r3, r2
 8003d80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d84:	461a      	mov	r2, r3
 8003d86:	2308      	movs	r3, #8
 8003d88:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003d8a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003d8c:	6878      	ldr	r0, [r7, #4]
 8003d8e:	f000 ff81 	bl	8004c94 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003d92:	693b      	ldr	r3, [r7, #16]
 8003d94:	f003 0310 	and.w	r3, r3, #16
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d008      	beq.n	8003dae <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d9e:	015a      	lsls	r2, r3, #5
 8003da0:	69fb      	ldr	r3, [r7, #28]
 8003da2:	4413      	add	r3, r2
 8003da4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003da8:	461a      	mov	r2, r3
 8003daa:	2310      	movs	r3, #16
 8003dac:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8003dae:	693b      	ldr	r3, [r7, #16]
 8003db0:	f003 0302 	and.w	r3, r3, #2
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d030      	beq.n	8003e1a <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8003db8:	6a3b      	ldr	r3, [r7, #32]
 8003dba:	695b      	ldr	r3, [r3, #20]
 8003dbc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dc0:	2b80      	cmp	r3, #128	; 0x80
 8003dc2:	d109      	bne.n	8003dd8 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8003dc4:	69fb      	ldr	r3, [r7, #28]
 8003dc6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003dca:	685b      	ldr	r3, [r3, #4]
 8003dcc:	69fa      	ldr	r2, [r7, #28]
 8003dce:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003dd2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003dd6:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8003dd8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003dda:	4613      	mov	r3, r2
 8003ddc:	00db      	lsls	r3, r3, #3
 8003dde:	4413      	add	r3, r2
 8003de0:	009b      	lsls	r3, r3, #2
 8003de2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003de6:	687a      	ldr	r2, [r7, #4]
 8003de8:	4413      	add	r3, r2
 8003dea:	3304      	adds	r3, #4
 8003dec:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003dee:	697b      	ldr	r3, [r7, #20]
 8003df0:	78db      	ldrb	r3, [r3, #3]
 8003df2:	2b01      	cmp	r3, #1
 8003df4:	d108      	bne.n	8003e08 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8003df6:	697b      	ldr	r3, [r7, #20]
 8003df8:	2200      	movs	r2, #0
 8003dfa:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dfe:	b2db      	uxtb	r3, r3
 8003e00:	4619      	mov	r1, r3
 8003e02:	6878      	ldr	r0, [r7, #4]
 8003e04:	f005 ff06 	bl	8009c14 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8003e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e0a:	015a      	lsls	r2, r3, #5
 8003e0c:	69fb      	ldr	r3, [r7, #28]
 8003e0e:	4413      	add	r3, r2
 8003e10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e14:	461a      	mov	r2, r3
 8003e16:	2302      	movs	r3, #2
 8003e18:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003e1a:	693b      	ldr	r3, [r7, #16]
 8003e1c:	f003 0320 	and.w	r3, r3, #32
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d008      	beq.n	8003e36 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e26:	015a      	lsls	r2, r3, #5
 8003e28:	69fb      	ldr	r3, [r7, #28]
 8003e2a:	4413      	add	r3, r2
 8003e2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e30:	461a      	mov	r2, r3
 8003e32:	2320      	movs	r3, #32
 8003e34:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003e36:	693b      	ldr	r3, [r7, #16]
 8003e38:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d009      	beq.n	8003e54 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e42:	015a      	lsls	r2, r3, #5
 8003e44:	69fb      	ldr	r3, [r7, #28]
 8003e46:	4413      	add	r3, r2
 8003e48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e4c:	461a      	mov	r2, r3
 8003e4e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003e52:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e56:	3301      	adds	r3, #1
 8003e58:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003e5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e5c:	085b      	lsrs	r3, r3, #1
 8003e5e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003e60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	f47f af62 	bne.w	8003d2c <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	f003 fe01 	bl	8007a74 <USB_ReadInterrupts>
 8003e72:	4603      	mov	r3, r0
 8003e74:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003e78:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003e7c:	f040 80db 	bne.w	8004036 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	4618      	mov	r0, r3
 8003e86:	f003 fe22 	bl	8007ace <USB_ReadDevAllInEpInterrupt>
 8003e8a:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8003e8c:	2300      	movs	r3, #0
 8003e8e:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8003e90:	e0cd      	b.n	800402e <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003e92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e94:	f003 0301 	and.w	r3, r3, #1
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	f000 80c2 	beq.w	8004022 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ea4:	b2d2      	uxtb	r2, r2
 8003ea6:	4611      	mov	r1, r2
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	f003 fe48 	bl	8007b3e <USB_ReadDevInEPInterrupt>
 8003eae:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003eb0:	693b      	ldr	r3, [r7, #16]
 8003eb2:	f003 0301 	and.w	r3, r3, #1
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d057      	beq.n	8003f6a <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ebc:	f003 030f 	and.w	r3, r3, #15
 8003ec0:	2201      	movs	r2, #1
 8003ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ec6:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003ec8:	69fb      	ldr	r3, [r7, #28]
 8003eca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ece:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	43db      	mvns	r3, r3
 8003ed4:	69f9      	ldr	r1, [r7, #28]
 8003ed6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003eda:	4013      	ands	r3, r2
 8003edc:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ee0:	015a      	lsls	r2, r3, #5
 8003ee2:	69fb      	ldr	r3, [r7, #28]
 8003ee4:	4413      	add	r3, r2
 8003ee6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003eea:	461a      	mov	r2, r3
 8003eec:	2301      	movs	r3, #1
 8003eee:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	691b      	ldr	r3, [r3, #16]
 8003ef4:	2b01      	cmp	r3, #1
 8003ef6:	d132      	bne.n	8003f5e <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003ef8:	6879      	ldr	r1, [r7, #4]
 8003efa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003efc:	4613      	mov	r3, r2
 8003efe:	00db      	lsls	r3, r3, #3
 8003f00:	4413      	add	r3, r2
 8003f02:	009b      	lsls	r3, r3, #2
 8003f04:	440b      	add	r3, r1
 8003f06:	334c      	adds	r3, #76	; 0x4c
 8003f08:	6819      	ldr	r1, [r3, #0]
 8003f0a:	6878      	ldr	r0, [r7, #4]
 8003f0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f0e:	4613      	mov	r3, r2
 8003f10:	00db      	lsls	r3, r3, #3
 8003f12:	4413      	add	r3, r2
 8003f14:	009b      	lsls	r3, r3, #2
 8003f16:	4403      	add	r3, r0
 8003f18:	3348      	adds	r3, #72	; 0x48
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	4419      	add	r1, r3
 8003f1e:	6878      	ldr	r0, [r7, #4]
 8003f20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f22:	4613      	mov	r3, r2
 8003f24:	00db      	lsls	r3, r3, #3
 8003f26:	4413      	add	r3, r2
 8003f28:	009b      	lsls	r3, r3, #2
 8003f2a:	4403      	add	r3, r0
 8003f2c:	334c      	adds	r3, #76	; 0x4c
 8003f2e:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d113      	bne.n	8003f5e <HAL_PCD_IRQHandler+0x3a2>
 8003f36:	6879      	ldr	r1, [r7, #4]
 8003f38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f3a:	4613      	mov	r3, r2
 8003f3c:	00db      	lsls	r3, r3, #3
 8003f3e:	4413      	add	r3, r2
 8003f40:	009b      	lsls	r3, r3, #2
 8003f42:	440b      	add	r3, r1
 8003f44:	3354      	adds	r3, #84	; 0x54
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d108      	bne.n	8003f5e <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6818      	ldr	r0, [r3, #0]
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003f56:	461a      	mov	r2, r3
 8003f58:	2101      	movs	r1, #1
 8003f5a:	f003 fe4f 	bl	8007bfc <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f60:	b2db      	uxtb	r3, r3
 8003f62:	4619      	mov	r1, r3
 8003f64:	6878      	ldr	r0, [r7, #4]
 8003f66:	f005 fdd0 	bl	8009b0a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003f6a:	693b      	ldr	r3, [r7, #16]
 8003f6c:	f003 0308 	and.w	r3, r3, #8
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d008      	beq.n	8003f86 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f76:	015a      	lsls	r2, r3, #5
 8003f78:	69fb      	ldr	r3, [r7, #28]
 8003f7a:	4413      	add	r3, r2
 8003f7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f80:	461a      	mov	r2, r3
 8003f82:	2308      	movs	r3, #8
 8003f84:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003f86:	693b      	ldr	r3, [r7, #16]
 8003f88:	f003 0310 	and.w	r3, r3, #16
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d008      	beq.n	8003fa2 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f92:	015a      	lsls	r2, r3, #5
 8003f94:	69fb      	ldr	r3, [r7, #28]
 8003f96:	4413      	add	r3, r2
 8003f98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f9c:	461a      	mov	r2, r3
 8003f9e:	2310      	movs	r3, #16
 8003fa0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003fa2:	693b      	ldr	r3, [r7, #16]
 8003fa4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d008      	beq.n	8003fbe <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fae:	015a      	lsls	r2, r3, #5
 8003fb0:	69fb      	ldr	r3, [r7, #28]
 8003fb2:	4413      	add	r3, r2
 8003fb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fb8:	461a      	mov	r2, r3
 8003fba:	2340      	movs	r3, #64	; 0x40
 8003fbc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003fbe:	693b      	ldr	r3, [r7, #16]
 8003fc0:	f003 0302 	and.w	r3, r3, #2
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d023      	beq.n	8004010 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8003fc8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003fca:	6a38      	ldr	r0, [r7, #32]
 8003fcc:	f002 fd30 	bl	8006a30 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8003fd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fd2:	4613      	mov	r3, r2
 8003fd4:	00db      	lsls	r3, r3, #3
 8003fd6:	4413      	add	r3, r2
 8003fd8:	009b      	lsls	r3, r3, #2
 8003fda:	3338      	adds	r3, #56	; 0x38
 8003fdc:	687a      	ldr	r2, [r7, #4]
 8003fde:	4413      	add	r3, r2
 8003fe0:	3304      	adds	r3, #4
 8003fe2:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003fe4:	697b      	ldr	r3, [r7, #20]
 8003fe6:	78db      	ldrb	r3, [r3, #3]
 8003fe8:	2b01      	cmp	r3, #1
 8003fea:	d108      	bne.n	8003ffe <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8003fec:	697b      	ldr	r3, [r7, #20]
 8003fee:	2200      	movs	r2, #0
 8003ff0:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ff4:	b2db      	uxtb	r3, r3
 8003ff6:	4619      	mov	r1, r3
 8003ff8:	6878      	ldr	r0, [r7, #4]
 8003ffa:	f005 fe1d 	bl	8009c38 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004000:	015a      	lsls	r2, r3, #5
 8004002:	69fb      	ldr	r3, [r7, #28]
 8004004:	4413      	add	r3, r2
 8004006:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800400a:	461a      	mov	r2, r3
 800400c:	2302      	movs	r3, #2
 800400e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8004010:	693b      	ldr	r3, [r7, #16]
 8004012:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004016:	2b00      	cmp	r3, #0
 8004018:	d003      	beq.n	8004022 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800401a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800401c:	6878      	ldr	r0, [r7, #4]
 800401e:	f000 fcc3 	bl	80049a8 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8004022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004024:	3301      	adds	r3, #1
 8004026:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8004028:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800402a:	085b      	lsrs	r3, r3, #1
 800402c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800402e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004030:	2b00      	cmp	r3, #0
 8004032:	f47f af2e 	bne.w	8003e92 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	4618      	mov	r0, r3
 800403c:	f003 fd1a 	bl	8007a74 <USB_ReadInterrupts>
 8004040:	4603      	mov	r3, r0
 8004042:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004046:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800404a:	d122      	bne.n	8004092 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800404c:	69fb      	ldr	r3, [r7, #28]
 800404e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004052:	685b      	ldr	r3, [r3, #4]
 8004054:	69fa      	ldr	r2, [r7, #28]
 8004056:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800405a:	f023 0301 	bic.w	r3, r3, #1
 800405e:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8004066:	2b01      	cmp	r3, #1
 8004068:	d108      	bne.n	800407c <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	2200      	movs	r2, #0
 800406e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8004072:	2100      	movs	r1, #0
 8004074:	6878      	ldr	r0, [r7, #4]
 8004076:	f000 feab 	bl	8004dd0 <HAL_PCDEx_LPM_Callback>
 800407a:	e002      	b.n	8004082 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800407c:	6878      	ldr	r0, [r7, #4]
 800407e:	f005 fdbb 	bl	8009bf8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	695a      	ldr	r2, [r3, #20]
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8004090:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	4618      	mov	r0, r3
 8004098:	f003 fcec 	bl	8007a74 <USB_ReadInterrupts>
 800409c:	4603      	mov	r3, r0
 800409e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80040a2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80040a6:	d112      	bne.n	80040ce <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80040a8:	69fb      	ldr	r3, [r7, #28]
 80040aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040ae:	689b      	ldr	r3, [r3, #8]
 80040b0:	f003 0301 	and.w	r3, r3, #1
 80040b4:	2b01      	cmp	r3, #1
 80040b6:	d102      	bne.n	80040be <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80040b8:	6878      	ldr	r0, [r7, #4]
 80040ba:	f005 fd77 	bl	8009bac <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	695a      	ldr	r2, [r3, #20]
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80040cc:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	4618      	mov	r0, r3
 80040d4:	f003 fcce 	bl	8007a74 <USB_ReadInterrupts>
 80040d8:	4603      	mov	r3, r0
 80040da:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80040de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040e2:	f040 80b7 	bne.w	8004254 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80040e6:	69fb      	ldr	r3, [r7, #28]
 80040e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040ec:	685b      	ldr	r3, [r3, #4]
 80040ee:	69fa      	ldr	r2, [r7, #28]
 80040f0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80040f4:	f023 0301 	bic.w	r3, r3, #1
 80040f8:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	2110      	movs	r1, #16
 8004100:	4618      	mov	r0, r3
 8004102:	f002 fc95 	bl	8006a30 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004106:	2300      	movs	r3, #0
 8004108:	62fb      	str	r3, [r7, #44]	; 0x2c
 800410a:	e046      	b.n	800419a <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800410c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800410e:	015a      	lsls	r2, r3, #5
 8004110:	69fb      	ldr	r3, [r7, #28]
 8004112:	4413      	add	r3, r2
 8004114:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004118:	461a      	mov	r2, r3
 800411a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800411e:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004120:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004122:	015a      	lsls	r2, r3, #5
 8004124:	69fb      	ldr	r3, [r7, #28]
 8004126:	4413      	add	r3, r2
 8004128:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004130:	0151      	lsls	r1, r2, #5
 8004132:	69fa      	ldr	r2, [r7, #28]
 8004134:	440a      	add	r2, r1
 8004136:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800413a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800413e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8004140:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004142:	015a      	lsls	r2, r3, #5
 8004144:	69fb      	ldr	r3, [r7, #28]
 8004146:	4413      	add	r3, r2
 8004148:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800414c:	461a      	mov	r2, r3
 800414e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004152:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004154:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004156:	015a      	lsls	r2, r3, #5
 8004158:	69fb      	ldr	r3, [r7, #28]
 800415a:	4413      	add	r3, r2
 800415c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004164:	0151      	lsls	r1, r2, #5
 8004166:	69fa      	ldr	r2, [r7, #28]
 8004168:	440a      	add	r2, r1
 800416a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800416e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004172:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004174:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004176:	015a      	lsls	r2, r3, #5
 8004178:	69fb      	ldr	r3, [r7, #28]
 800417a:	4413      	add	r3, r2
 800417c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004184:	0151      	lsls	r1, r2, #5
 8004186:	69fa      	ldr	r2, [r7, #28]
 8004188:	440a      	add	r2, r1
 800418a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800418e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004192:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004194:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004196:	3301      	adds	r3, #1
 8004198:	62fb      	str	r3, [r7, #44]	; 0x2c
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	685b      	ldr	r3, [r3, #4]
 800419e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80041a0:	429a      	cmp	r2, r3
 80041a2:	d3b3      	bcc.n	800410c <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80041a4:	69fb      	ldr	r3, [r7, #28]
 80041a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041aa:	69db      	ldr	r3, [r3, #28]
 80041ac:	69fa      	ldr	r2, [r7, #28]
 80041ae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80041b2:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80041b6:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d016      	beq.n	80041ee <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80041c0:	69fb      	ldr	r3, [r7, #28]
 80041c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80041ca:	69fa      	ldr	r2, [r7, #28]
 80041cc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80041d0:	f043 030b 	orr.w	r3, r3, #11
 80041d4:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80041d8:	69fb      	ldr	r3, [r7, #28]
 80041da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041e0:	69fa      	ldr	r2, [r7, #28]
 80041e2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80041e6:	f043 030b 	orr.w	r3, r3, #11
 80041ea:	6453      	str	r3, [r2, #68]	; 0x44
 80041ec:	e015      	b.n	800421a <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80041ee:	69fb      	ldr	r3, [r7, #28]
 80041f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041f4:	695b      	ldr	r3, [r3, #20]
 80041f6:	69fa      	ldr	r2, [r7, #28]
 80041f8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80041fc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004200:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8004204:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8004206:	69fb      	ldr	r3, [r7, #28]
 8004208:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800420c:	691b      	ldr	r3, [r3, #16]
 800420e:	69fa      	ldr	r2, [r7, #28]
 8004210:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004214:	f043 030b 	orr.w	r3, r3, #11
 8004218:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800421a:	69fb      	ldr	r3, [r7, #28]
 800421c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	69fa      	ldr	r2, [r7, #28]
 8004224:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004228:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800422c:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6818      	ldr	r0, [r3, #0]
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	691b      	ldr	r3, [r3, #16]
 8004236:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800423e:	461a      	mov	r2, r3
 8004240:	f003 fcdc 	bl	8007bfc <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	695a      	ldr	r2, [r3, #20]
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8004252:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	4618      	mov	r0, r3
 800425a:	f003 fc0b 	bl	8007a74 <USB_ReadInterrupts>
 800425e:	4603      	mov	r3, r0
 8004260:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004264:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004268:	d124      	bne.n	80042b4 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	4618      	mov	r0, r3
 8004270:	f003 fca1 	bl	8007bb6 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	4618      	mov	r0, r3
 800427a:	f002 fc56 	bl	8006b2a <USB_GetDevSpeed>
 800427e:	4603      	mov	r3, r0
 8004280:	461a      	mov	r2, r3
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681c      	ldr	r4, [r3, #0]
 800428a:	f001 fa39 	bl	8005700 <HAL_RCC_GetHCLKFreq>
 800428e:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004294:	b2db      	uxtb	r3, r3
 8004296:	461a      	mov	r2, r3
 8004298:	4620      	mov	r0, r4
 800429a:	f002 f955 	bl	8006548 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800429e:	6878      	ldr	r0, [r7, #4]
 80042a0:	f005 fc5b 	bl	8009b5a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	695a      	ldr	r2, [r3, #20]
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80042b2:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	4618      	mov	r0, r3
 80042ba:	f003 fbdb 	bl	8007a74 <USB_ReadInterrupts>
 80042be:	4603      	mov	r3, r0
 80042c0:	f003 0308 	and.w	r3, r3, #8
 80042c4:	2b08      	cmp	r3, #8
 80042c6:	d10a      	bne.n	80042de <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80042c8:	6878      	ldr	r0, [r7, #4]
 80042ca:	f005 fc38 	bl	8009b3e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	695a      	ldr	r2, [r3, #20]
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f002 0208 	and.w	r2, r2, #8
 80042dc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	4618      	mov	r0, r3
 80042e4:	f003 fbc6 	bl	8007a74 <USB_ReadInterrupts>
 80042e8:	4603      	mov	r3, r0
 80042ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042ee:	2b80      	cmp	r3, #128	; 0x80
 80042f0:	d122      	bne.n	8004338 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80042f2:	6a3b      	ldr	r3, [r7, #32]
 80042f4:	699b      	ldr	r3, [r3, #24]
 80042f6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80042fa:	6a3b      	ldr	r3, [r7, #32]
 80042fc:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80042fe:	2301      	movs	r3, #1
 8004300:	627b      	str	r3, [r7, #36]	; 0x24
 8004302:	e014      	b.n	800432e <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8004304:	6879      	ldr	r1, [r7, #4]
 8004306:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004308:	4613      	mov	r3, r2
 800430a:	00db      	lsls	r3, r3, #3
 800430c:	4413      	add	r3, r2
 800430e:	009b      	lsls	r3, r3, #2
 8004310:	440b      	add	r3, r1
 8004312:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8004316:	781b      	ldrb	r3, [r3, #0]
 8004318:	2b01      	cmp	r3, #1
 800431a:	d105      	bne.n	8004328 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800431c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800431e:	b2db      	uxtb	r3, r3
 8004320:	4619      	mov	r1, r3
 8004322:	6878      	ldr	r0, [r7, #4]
 8004324:	f000 fb0f 	bl	8004946 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800432a:	3301      	adds	r3, #1
 800432c:	627b      	str	r3, [r7, #36]	; 0x24
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	685b      	ldr	r3, [r3, #4]
 8004332:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004334:	429a      	cmp	r2, r3
 8004336:	d3e5      	bcc.n	8004304 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	4618      	mov	r0, r3
 800433e:	f003 fb99 	bl	8007a74 <USB_ReadInterrupts>
 8004342:	4603      	mov	r3, r0
 8004344:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004348:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800434c:	d13b      	bne.n	80043c6 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800434e:	2301      	movs	r3, #1
 8004350:	627b      	str	r3, [r7, #36]	; 0x24
 8004352:	e02b      	b.n	80043ac <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8004354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004356:	015a      	lsls	r2, r3, #5
 8004358:	69fb      	ldr	r3, [r7, #28]
 800435a:	4413      	add	r3, r2
 800435c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004364:	6879      	ldr	r1, [r7, #4]
 8004366:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004368:	4613      	mov	r3, r2
 800436a:	00db      	lsls	r3, r3, #3
 800436c:	4413      	add	r3, r2
 800436e:	009b      	lsls	r3, r3, #2
 8004370:	440b      	add	r3, r1
 8004372:	3340      	adds	r3, #64	; 0x40
 8004374:	781b      	ldrb	r3, [r3, #0]
 8004376:	2b01      	cmp	r3, #1
 8004378:	d115      	bne.n	80043a6 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800437a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800437c:	2b00      	cmp	r3, #0
 800437e:	da12      	bge.n	80043a6 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8004380:	6879      	ldr	r1, [r7, #4]
 8004382:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004384:	4613      	mov	r3, r2
 8004386:	00db      	lsls	r3, r3, #3
 8004388:	4413      	add	r3, r2
 800438a:	009b      	lsls	r3, r3, #2
 800438c:	440b      	add	r3, r1
 800438e:	333f      	adds	r3, #63	; 0x3f
 8004390:	2201      	movs	r2, #1
 8004392:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8004394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004396:	b2db      	uxtb	r3, r3
 8004398:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800439c:	b2db      	uxtb	r3, r3
 800439e:	4619      	mov	r1, r3
 80043a0:	6878      	ldr	r0, [r7, #4]
 80043a2:	f000 fad0 	bl	8004946 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80043a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043a8:	3301      	adds	r3, #1
 80043aa:	627b      	str	r3, [r7, #36]	; 0x24
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	685b      	ldr	r3, [r3, #4]
 80043b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043b2:	429a      	cmp	r2, r3
 80043b4:	d3ce      	bcc.n	8004354 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	695a      	ldr	r2, [r3, #20]
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80043c4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	4618      	mov	r0, r3
 80043cc:	f003 fb52 	bl	8007a74 <USB_ReadInterrupts>
 80043d0:	4603      	mov	r3, r0
 80043d2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80043d6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80043da:	d155      	bne.n	8004488 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80043dc:	2301      	movs	r3, #1
 80043de:	627b      	str	r3, [r7, #36]	; 0x24
 80043e0:	e045      	b.n	800446e <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80043e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043e4:	015a      	lsls	r2, r3, #5
 80043e6:	69fb      	ldr	r3, [r7, #28]
 80043e8:	4413      	add	r3, r2
 80043ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80043f2:	6879      	ldr	r1, [r7, #4]
 80043f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043f6:	4613      	mov	r3, r2
 80043f8:	00db      	lsls	r3, r3, #3
 80043fa:	4413      	add	r3, r2
 80043fc:	009b      	lsls	r3, r3, #2
 80043fe:	440b      	add	r3, r1
 8004400:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8004404:	781b      	ldrb	r3, [r3, #0]
 8004406:	2b01      	cmp	r3, #1
 8004408:	d12e      	bne.n	8004468 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800440a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800440c:	2b00      	cmp	r3, #0
 800440e:	da2b      	bge.n	8004468 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8004410:	69bb      	ldr	r3, [r7, #24]
 8004412:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 800441c:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004420:	429a      	cmp	r2, r3
 8004422:	d121      	bne.n	8004468 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8004424:	6879      	ldr	r1, [r7, #4]
 8004426:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004428:	4613      	mov	r3, r2
 800442a:	00db      	lsls	r3, r3, #3
 800442c:	4413      	add	r3, r2
 800442e:	009b      	lsls	r3, r3, #2
 8004430:	440b      	add	r3, r1
 8004432:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8004436:	2201      	movs	r2, #1
 8004438:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800443a:	6a3b      	ldr	r3, [r7, #32]
 800443c:	699b      	ldr	r3, [r3, #24]
 800443e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004442:	6a3b      	ldr	r3, [r7, #32]
 8004444:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8004446:	6a3b      	ldr	r3, [r7, #32]
 8004448:	695b      	ldr	r3, [r3, #20]
 800444a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800444e:	2b00      	cmp	r3, #0
 8004450:	d10a      	bne.n	8004468 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8004452:	69fb      	ldr	r3, [r7, #28]
 8004454:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004458:	685b      	ldr	r3, [r3, #4]
 800445a:	69fa      	ldr	r2, [r7, #28]
 800445c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004460:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004464:	6053      	str	r3, [r2, #4]
            break;
 8004466:	e007      	b.n	8004478 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800446a:	3301      	adds	r3, #1
 800446c:	627b      	str	r3, [r7, #36]	; 0x24
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	685b      	ldr	r3, [r3, #4]
 8004472:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004474:	429a      	cmp	r2, r3
 8004476:	d3b4      	bcc.n	80043e2 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	695a      	ldr	r2, [r3, #20]
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8004486:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	4618      	mov	r0, r3
 800448e:	f003 faf1 	bl	8007a74 <USB_ReadInterrupts>
 8004492:	4603      	mov	r3, r0
 8004494:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004498:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800449c:	d10a      	bne.n	80044b4 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800449e:	6878      	ldr	r0, [r7, #4]
 80044a0:	f005 fbdc 	bl	8009c5c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	695a      	ldr	r2, [r3, #20]
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80044b2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	4618      	mov	r0, r3
 80044ba:	f003 fadb 	bl	8007a74 <USB_ReadInterrupts>
 80044be:	4603      	mov	r3, r0
 80044c0:	f003 0304 	and.w	r3, r3, #4
 80044c4:	2b04      	cmp	r3, #4
 80044c6:	d115      	bne.n	80044f4 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	685b      	ldr	r3, [r3, #4]
 80044ce:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80044d0:	69bb      	ldr	r3, [r7, #24]
 80044d2:	f003 0304 	and.w	r3, r3, #4
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d002      	beq.n	80044e0 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80044da:	6878      	ldr	r0, [r7, #4]
 80044dc:	f005 fbcc 	bl	8009c78 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	6859      	ldr	r1, [r3, #4]
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	69ba      	ldr	r2, [r7, #24]
 80044ec:	430a      	orrs	r2, r1
 80044ee:	605a      	str	r2, [r3, #4]
 80044f0:	e000      	b.n	80044f4 <HAL_PCD_IRQHandler+0x938>
      return;
 80044f2:	bf00      	nop
    }
  }
}
 80044f4:	3734      	adds	r7, #52	; 0x34
 80044f6:	46bd      	mov	sp, r7
 80044f8:	bd90      	pop	{r4, r7, pc}

080044fa <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80044fa:	b580      	push	{r7, lr}
 80044fc:	b082      	sub	sp, #8
 80044fe:	af00      	add	r7, sp, #0
 8004500:	6078      	str	r0, [r7, #4]
 8004502:	460b      	mov	r3, r1
 8004504:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800450c:	2b01      	cmp	r3, #1
 800450e:	d101      	bne.n	8004514 <HAL_PCD_SetAddress+0x1a>
 8004510:	2302      	movs	r3, #2
 8004512:	e013      	b.n	800453c <HAL_PCD_SetAddress+0x42>
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2201      	movs	r2, #1
 8004518:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	78fa      	ldrb	r2, [r7, #3]
 8004520:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	78fa      	ldrb	r2, [r7, #3]
 800452a:	4611      	mov	r1, r2
 800452c:	4618      	mov	r0, r3
 800452e:	f003 fa39 	bl	80079a4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	2200      	movs	r2, #0
 8004536:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800453a:	2300      	movs	r3, #0
}
 800453c:	4618      	mov	r0, r3
 800453e:	3708      	adds	r7, #8
 8004540:	46bd      	mov	sp, r7
 8004542:	bd80      	pop	{r7, pc}

08004544 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004544:	b580      	push	{r7, lr}
 8004546:	b084      	sub	sp, #16
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]
 800454c:	4608      	mov	r0, r1
 800454e:	4611      	mov	r1, r2
 8004550:	461a      	mov	r2, r3
 8004552:	4603      	mov	r3, r0
 8004554:	70fb      	strb	r3, [r7, #3]
 8004556:	460b      	mov	r3, r1
 8004558:	803b      	strh	r3, [r7, #0]
 800455a:	4613      	mov	r3, r2
 800455c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800455e:	2300      	movs	r3, #0
 8004560:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004562:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004566:	2b00      	cmp	r3, #0
 8004568:	da0f      	bge.n	800458a <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800456a:	78fb      	ldrb	r3, [r7, #3]
 800456c:	f003 020f 	and.w	r2, r3, #15
 8004570:	4613      	mov	r3, r2
 8004572:	00db      	lsls	r3, r3, #3
 8004574:	4413      	add	r3, r2
 8004576:	009b      	lsls	r3, r3, #2
 8004578:	3338      	adds	r3, #56	; 0x38
 800457a:	687a      	ldr	r2, [r7, #4]
 800457c:	4413      	add	r3, r2
 800457e:	3304      	adds	r3, #4
 8004580:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	2201      	movs	r2, #1
 8004586:	705a      	strb	r2, [r3, #1]
 8004588:	e00f      	b.n	80045aa <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800458a:	78fb      	ldrb	r3, [r7, #3]
 800458c:	f003 020f 	and.w	r2, r3, #15
 8004590:	4613      	mov	r3, r2
 8004592:	00db      	lsls	r3, r3, #3
 8004594:	4413      	add	r3, r2
 8004596:	009b      	lsls	r3, r3, #2
 8004598:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800459c:	687a      	ldr	r2, [r7, #4]
 800459e:	4413      	add	r3, r2
 80045a0:	3304      	adds	r3, #4
 80045a2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	2200      	movs	r2, #0
 80045a8:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80045aa:	78fb      	ldrb	r3, [r7, #3]
 80045ac:	f003 030f 	and.w	r3, r3, #15
 80045b0:	b2da      	uxtb	r2, r3
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80045b6:	883a      	ldrh	r2, [r7, #0]
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	78ba      	ldrb	r2, [r7, #2]
 80045c0:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	785b      	ldrb	r3, [r3, #1]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d004      	beq.n	80045d4 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	781b      	ldrb	r3, [r3, #0]
 80045ce:	b29a      	uxth	r2, r3
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80045d4:	78bb      	ldrb	r3, [r7, #2]
 80045d6:	2b02      	cmp	r3, #2
 80045d8:	d102      	bne.n	80045e0 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	2200      	movs	r2, #0
 80045de:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80045e6:	2b01      	cmp	r3, #1
 80045e8:	d101      	bne.n	80045ee <HAL_PCD_EP_Open+0xaa>
 80045ea:	2302      	movs	r3, #2
 80045ec:	e00e      	b.n	800460c <HAL_PCD_EP_Open+0xc8>
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	2201      	movs	r2, #1
 80045f2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	68f9      	ldr	r1, [r7, #12]
 80045fc:	4618      	mov	r0, r3
 80045fe:	f002 fab9 	bl	8006b74 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	2200      	movs	r2, #0
 8004606:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 800460a:	7afb      	ldrb	r3, [r7, #11]
}
 800460c:	4618      	mov	r0, r3
 800460e:	3710      	adds	r7, #16
 8004610:	46bd      	mov	sp, r7
 8004612:	bd80      	pop	{r7, pc}

08004614 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004614:	b580      	push	{r7, lr}
 8004616:	b084      	sub	sp, #16
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]
 800461c:	460b      	mov	r3, r1
 800461e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004620:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004624:	2b00      	cmp	r3, #0
 8004626:	da0f      	bge.n	8004648 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004628:	78fb      	ldrb	r3, [r7, #3]
 800462a:	f003 020f 	and.w	r2, r3, #15
 800462e:	4613      	mov	r3, r2
 8004630:	00db      	lsls	r3, r3, #3
 8004632:	4413      	add	r3, r2
 8004634:	009b      	lsls	r3, r3, #2
 8004636:	3338      	adds	r3, #56	; 0x38
 8004638:	687a      	ldr	r2, [r7, #4]
 800463a:	4413      	add	r3, r2
 800463c:	3304      	adds	r3, #4
 800463e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	2201      	movs	r2, #1
 8004644:	705a      	strb	r2, [r3, #1]
 8004646:	e00f      	b.n	8004668 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004648:	78fb      	ldrb	r3, [r7, #3]
 800464a:	f003 020f 	and.w	r2, r3, #15
 800464e:	4613      	mov	r3, r2
 8004650:	00db      	lsls	r3, r3, #3
 8004652:	4413      	add	r3, r2
 8004654:	009b      	lsls	r3, r3, #2
 8004656:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800465a:	687a      	ldr	r2, [r7, #4]
 800465c:	4413      	add	r3, r2
 800465e:	3304      	adds	r3, #4
 8004660:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	2200      	movs	r2, #0
 8004666:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8004668:	78fb      	ldrb	r3, [r7, #3]
 800466a:	f003 030f 	and.w	r3, r3, #15
 800466e:	b2da      	uxtb	r2, r3
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800467a:	2b01      	cmp	r3, #1
 800467c:	d101      	bne.n	8004682 <HAL_PCD_EP_Close+0x6e>
 800467e:	2302      	movs	r3, #2
 8004680:	e00e      	b.n	80046a0 <HAL_PCD_EP_Close+0x8c>
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	2201      	movs	r2, #1
 8004686:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	68f9      	ldr	r1, [r7, #12]
 8004690:	4618      	mov	r0, r3
 8004692:	f002 faf7 	bl	8006c84 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	2200      	movs	r2, #0
 800469a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 800469e:	2300      	movs	r3, #0
}
 80046a0:	4618      	mov	r0, r3
 80046a2:	3710      	adds	r7, #16
 80046a4:	46bd      	mov	sp, r7
 80046a6:	bd80      	pop	{r7, pc}

080046a8 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80046a8:	b580      	push	{r7, lr}
 80046aa:	b086      	sub	sp, #24
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	60f8      	str	r0, [r7, #12]
 80046b0:	607a      	str	r2, [r7, #4]
 80046b2:	603b      	str	r3, [r7, #0]
 80046b4:	460b      	mov	r3, r1
 80046b6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80046b8:	7afb      	ldrb	r3, [r7, #11]
 80046ba:	f003 020f 	and.w	r2, r3, #15
 80046be:	4613      	mov	r3, r2
 80046c0:	00db      	lsls	r3, r3, #3
 80046c2:	4413      	add	r3, r2
 80046c4:	009b      	lsls	r3, r3, #2
 80046c6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80046ca:	68fa      	ldr	r2, [r7, #12]
 80046cc:	4413      	add	r3, r2
 80046ce:	3304      	adds	r3, #4
 80046d0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80046d2:	697b      	ldr	r3, [r7, #20]
 80046d4:	687a      	ldr	r2, [r7, #4]
 80046d6:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80046d8:	697b      	ldr	r3, [r7, #20]
 80046da:	683a      	ldr	r2, [r7, #0]
 80046dc:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80046de:	697b      	ldr	r3, [r7, #20]
 80046e0:	2200      	movs	r2, #0
 80046e2:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 80046e4:	697b      	ldr	r3, [r7, #20]
 80046e6:	2200      	movs	r2, #0
 80046e8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80046ea:	7afb      	ldrb	r3, [r7, #11]
 80046ec:	f003 030f 	and.w	r3, r3, #15
 80046f0:	b2da      	uxtb	r2, r3
 80046f2:	697b      	ldr	r3, [r7, #20]
 80046f4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	691b      	ldr	r3, [r3, #16]
 80046fa:	2b01      	cmp	r3, #1
 80046fc:	d102      	bne.n	8004704 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80046fe:	687a      	ldr	r2, [r7, #4]
 8004700:	697b      	ldr	r3, [r7, #20]
 8004702:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004704:	7afb      	ldrb	r3, [r7, #11]
 8004706:	f003 030f 	and.w	r3, r3, #15
 800470a:	2b00      	cmp	r3, #0
 800470c:	d109      	bne.n	8004722 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	6818      	ldr	r0, [r3, #0]
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	691b      	ldr	r3, [r3, #16]
 8004716:	b2db      	uxtb	r3, r3
 8004718:	461a      	mov	r2, r3
 800471a:	6979      	ldr	r1, [r7, #20]
 800471c:	f002 fdd6 	bl	80072cc <USB_EP0StartXfer>
 8004720:	e008      	b.n	8004734 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	6818      	ldr	r0, [r3, #0]
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	691b      	ldr	r3, [r3, #16]
 800472a:	b2db      	uxtb	r3, r3
 800472c:	461a      	mov	r2, r3
 800472e:	6979      	ldr	r1, [r7, #20]
 8004730:	f002 fb84 	bl	8006e3c <USB_EPStartXfer>
  }

  return HAL_OK;
 8004734:	2300      	movs	r3, #0
}
 8004736:	4618      	mov	r0, r3
 8004738:	3718      	adds	r7, #24
 800473a:	46bd      	mov	sp, r7
 800473c:	bd80      	pop	{r7, pc}

0800473e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800473e:	b580      	push	{r7, lr}
 8004740:	b086      	sub	sp, #24
 8004742:	af00      	add	r7, sp, #0
 8004744:	60f8      	str	r0, [r7, #12]
 8004746:	607a      	str	r2, [r7, #4]
 8004748:	603b      	str	r3, [r7, #0]
 800474a:	460b      	mov	r3, r1
 800474c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800474e:	7afb      	ldrb	r3, [r7, #11]
 8004750:	f003 020f 	and.w	r2, r3, #15
 8004754:	4613      	mov	r3, r2
 8004756:	00db      	lsls	r3, r3, #3
 8004758:	4413      	add	r3, r2
 800475a:	009b      	lsls	r3, r3, #2
 800475c:	3338      	adds	r3, #56	; 0x38
 800475e:	68fa      	ldr	r2, [r7, #12]
 8004760:	4413      	add	r3, r2
 8004762:	3304      	adds	r3, #4
 8004764:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004766:	697b      	ldr	r3, [r7, #20]
 8004768:	687a      	ldr	r2, [r7, #4]
 800476a:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800476c:	697b      	ldr	r3, [r7, #20]
 800476e:	683a      	ldr	r2, [r7, #0]
 8004770:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004772:	697b      	ldr	r3, [r7, #20]
 8004774:	2200      	movs	r2, #0
 8004776:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8004778:	697b      	ldr	r3, [r7, #20]
 800477a:	2201      	movs	r2, #1
 800477c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800477e:	7afb      	ldrb	r3, [r7, #11]
 8004780:	f003 030f 	and.w	r3, r3, #15
 8004784:	b2da      	uxtb	r2, r3
 8004786:	697b      	ldr	r3, [r7, #20]
 8004788:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	691b      	ldr	r3, [r3, #16]
 800478e:	2b01      	cmp	r3, #1
 8004790:	d102      	bne.n	8004798 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004792:	687a      	ldr	r2, [r7, #4]
 8004794:	697b      	ldr	r3, [r7, #20]
 8004796:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004798:	7afb      	ldrb	r3, [r7, #11]
 800479a:	f003 030f 	and.w	r3, r3, #15
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d109      	bne.n	80047b6 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	6818      	ldr	r0, [r3, #0]
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	691b      	ldr	r3, [r3, #16]
 80047aa:	b2db      	uxtb	r3, r3
 80047ac:	461a      	mov	r2, r3
 80047ae:	6979      	ldr	r1, [r7, #20]
 80047b0:	f002 fd8c 	bl	80072cc <USB_EP0StartXfer>
 80047b4:	e008      	b.n	80047c8 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	6818      	ldr	r0, [r3, #0]
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	691b      	ldr	r3, [r3, #16]
 80047be:	b2db      	uxtb	r3, r3
 80047c0:	461a      	mov	r2, r3
 80047c2:	6979      	ldr	r1, [r7, #20]
 80047c4:	f002 fb3a 	bl	8006e3c <USB_EPStartXfer>
  }

  return HAL_OK;
 80047c8:	2300      	movs	r3, #0
}
 80047ca:	4618      	mov	r0, r3
 80047cc:	3718      	adds	r7, #24
 80047ce:	46bd      	mov	sp, r7
 80047d0:	bd80      	pop	{r7, pc}

080047d2 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80047d2:	b580      	push	{r7, lr}
 80047d4:	b084      	sub	sp, #16
 80047d6:	af00      	add	r7, sp, #0
 80047d8:	6078      	str	r0, [r7, #4]
 80047da:	460b      	mov	r3, r1
 80047dc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80047de:	78fb      	ldrb	r3, [r7, #3]
 80047e0:	f003 020f 	and.w	r2, r3, #15
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	685b      	ldr	r3, [r3, #4]
 80047e8:	429a      	cmp	r2, r3
 80047ea:	d901      	bls.n	80047f0 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80047ec:	2301      	movs	r3, #1
 80047ee:	e050      	b.n	8004892 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80047f0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	da0f      	bge.n	8004818 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80047f8:	78fb      	ldrb	r3, [r7, #3]
 80047fa:	f003 020f 	and.w	r2, r3, #15
 80047fe:	4613      	mov	r3, r2
 8004800:	00db      	lsls	r3, r3, #3
 8004802:	4413      	add	r3, r2
 8004804:	009b      	lsls	r3, r3, #2
 8004806:	3338      	adds	r3, #56	; 0x38
 8004808:	687a      	ldr	r2, [r7, #4]
 800480a:	4413      	add	r3, r2
 800480c:	3304      	adds	r3, #4
 800480e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	2201      	movs	r2, #1
 8004814:	705a      	strb	r2, [r3, #1]
 8004816:	e00d      	b.n	8004834 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004818:	78fa      	ldrb	r2, [r7, #3]
 800481a:	4613      	mov	r3, r2
 800481c:	00db      	lsls	r3, r3, #3
 800481e:	4413      	add	r3, r2
 8004820:	009b      	lsls	r3, r3, #2
 8004822:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004826:	687a      	ldr	r2, [r7, #4]
 8004828:	4413      	add	r3, r2
 800482a:	3304      	adds	r3, #4
 800482c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	2200      	movs	r2, #0
 8004832:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	2201      	movs	r2, #1
 8004838:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800483a:	78fb      	ldrb	r3, [r7, #3]
 800483c:	f003 030f 	and.w	r3, r3, #15
 8004840:	b2da      	uxtb	r2, r3
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800484c:	2b01      	cmp	r3, #1
 800484e:	d101      	bne.n	8004854 <HAL_PCD_EP_SetStall+0x82>
 8004850:	2302      	movs	r3, #2
 8004852:	e01e      	b.n	8004892 <HAL_PCD_EP_SetStall+0xc0>
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2201      	movs	r2, #1
 8004858:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	68f9      	ldr	r1, [r7, #12]
 8004862:	4618      	mov	r0, r3
 8004864:	f002 ffca 	bl	80077fc <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004868:	78fb      	ldrb	r3, [r7, #3]
 800486a:	f003 030f 	and.w	r3, r3, #15
 800486e:	2b00      	cmp	r3, #0
 8004870:	d10a      	bne.n	8004888 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6818      	ldr	r0, [r3, #0]
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	691b      	ldr	r3, [r3, #16]
 800487a:	b2d9      	uxtb	r1, r3
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004882:	461a      	mov	r2, r3
 8004884:	f003 f9ba 	bl	8007bfc <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2200      	movs	r2, #0
 800488c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004890:	2300      	movs	r3, #0
}
 8004892:	4618      	mov	r0, r3
 8004894:	3710      	adds	r7, #16
 8004896:	46bd      	mov	sp, r7
 8004898:	bd80      	pop	{r7, pc}

0800489a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800489a:	b580      	push	{r7, lr}
 800489c:	b084      	sub	sp, #16
 800489e:	af00      	add	r7, sp, #0
 80048a0:	6078      	str	r0, [r7, #4]
 80048a2:	460b      	mov	r3, r1
 80048a4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80048a6:	78fb      	ldrb	r3, [r7, #3]
 80048a8:	f003 020f 	and.w	r2, r3, #15
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	685b      	ldr	r3, [r3, #4]
 80048b0:	429a      	cmp	r2, r3
 80048b2:	d901      	bls.n	80048b8 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80048b4:	2301      	movs	r3, #1
 80048b6:	e042      	b.n	800493e <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80048b8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80048bc:	2b00      	cmp	r3, #0
 80048be:	da0f      	bge.n	80048e0 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80048c0:	78fb      	ldrb	r3, [r7, #3]
 80048c2:	f003 020f 	and.w	r2, r3, #15
 80048c6:	4613      	mov	r3, r2
 80048c8:	00db      	lsls	r3, r3, #3
 80048ca:	4413      	add	r3, r2
 80048cc:	009b      	lsls	r3, r3, #2
 80048ce:	3338      	adds	r3, #56	; 0x38
 80048d0:	687a      	ldr	r2, [r7, #4]
 80048d2:	4413      	add	r3, r2
 80048d4:	3304      	adds	r3, #4
 80048d6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	2201      	movs	r2, #1
 80048dc:	705a      	strb	r2, [r3, #1]
 80048de:	e00f      	b.n	8004900 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80048e0:	78fb      	ldrb	r3, [r7, #3]
 80048e2:	f003 020f 	and.w	r2, r3, #15
 80048e6:	4613      	mov	r3, r2
 80048e8:	00db      	lsls	r3, r3, #3
 80048ea:	4413      	add	r3, r2
 80048ec:	009b      	lsls	r3, r3, #2
 80048ee:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80048f2:	687a      	ldr	r2, [r7, #4]
 80048f4:	4413      	add	r3, r2
 80048f6:	3304      	adds	r3, #4
 80048f8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	2200      	movs	r2, #0
 80048fe:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	2200      	movs	r2, #0
 8004904:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004906:	78fb      	ldrb	r3, [r7, #3]
 8004908:	f003 030f 	and.w	r3, r3, #15
 800490c:	b2da      	uxtb	r2, r3
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004918:	2b01      	cmp	r3, #1
 800491a:	d101      	bne.n	8004920 <HAL_PCD_EP_ClrStall+0x86>
 800491c:	2302      	movs	r3, #2
 800491e:	e00e      	b.n	800493e <HAL_PCD_EP_ClrStall+0xa4>
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2201      	movs	r2, #1
 8004924:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	68f9      	ldr	r1, [r7, #12]
 800492e:	4618      	mov	r0, r3
 8004930:	f002 ffd2 	bl	80078d8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2200      	movs	r2, #0
 8004938:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800493c:	2300      	movs	r3, #0
}
 800493e:	4618      	mov	r0, r3
 8004940:	3710      	adds	r7, #16
 8004942:	46bd      	mov	sp, r7
 8004944:	bd80      	pop	{r7, pc}

08004946 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004946:	b580      	push	{r7, lr}
 8004948:	b084      	sub	sp, #16
 800494a:	af00      	add	r7, sp, #0
 800494c:	6078      	str	r0, [r7, #4]
 800494e:	460b      	mov	r3, r1
 8004950:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8004952:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004956:	2b00      	cmp	r3, #0
 8004958:	da0c      	bge.n	8004974 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800495a:	78fb      	ldrb	r3, [r7, #3]
 800495c:	f003 020f 	and.w	r2, r3, #15
 8004960:	4613      	mov	r3, r2
 8004962:	00db      	lsls	r3, r3, #3
 8004964:	4413      	add	r3, r2
 8004966:	009b      	lsls	r3, r3, #2
 8004968:	3338      	adds	r3, #56	; 0x38
 800496a:	687a      	ldr	r2, [r7, #4]
 800496c:	4413      	add	r3, r2
 800496e:	3304      	adds	r3, #4
 8004970:	60fb      	str	r3, [r7, #12]
 8004972:	e00c      	b.n	800498e <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004974:	78fb      	ldrb	r3, [r7, #3]
 8004976:	f003 020f 	and.w	r2, r3, #15
 800497a:	4613      	mov	r3, r2
 800497c:	00db      	lsls	r3, r3, #3
 800497e:	4413      	add	r3, r2
 8004980:	009b      	lsls	r3, r3, #2
 8004982:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004986:	687a      	ldr	r2, [r7, #4]
 8004988:	4413      	add	r3, r2
 800498a:	3304      	adds	r3, #4
 800498c:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	68f9      	ldr	r1, [r7, #12]
 8004994:	4618      	mov	r0, r3
 8004996:	f002 fdf1 	bl	800757c <USB_EPStopXfer>
 800499a:	4603      	mov	r3, r0
 800499c:	72fb      	strb	r3, [r7, #11]

  return ret;
 800499e:	7afb      	ldrb	r3, [r7, #11]
}
 80049a0:	4618      	mov	r0, r3
 80049a2:	3710      	adds	r7, #16
 80049a4:	46bd      	mov	sp, r7
 80049a6:	bd80      	pop	{r7, pc}

080049a8 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80049a8:	b580      	push	{r7, lr}
 80049aa:	b08a      	sub	sp, #40	; 0x28
 80049ac:	af02      	add	r7, sp, #8
 80049ae:	6078      	str	r0, [r7, #4]
 80049b0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049b8:	697b      	ldr	r3, [r7, #20]
 80049ba:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80049bc:	683a      	ldr	r2, [r7, #0]
 80049be:	4613      	mov	r3, r2
 80049c0:	00db      	lsls	r3, r3, #3
 80049c2:	4413      	add	r3, r2
 80049c4:	009b      	lsls	r3, r3, #2
 80049c6:	3338      	adds	r3, #56	; 0x38
 80049c8:	687a      	ldr	r2, [r7, #4]
 80049ca:	4413      	add	r3, r2
 80049cc:	3304      	adds	r3, #4
 80049ce:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	6a1a      	ldr	r2, [r3, #32]
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	699b      	ldr	r3, [r3, #24]
 80049d8:	429a      	cmp	r2, r3
 80049da:	d901      	bls.n	80049e0 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80049dc:	2301      	movs	r3, #1
 80049de:	e06c      	b.n	8004aba <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	699a      	ldr	r2, [r3, #24]
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	6a1b      	ldr	r3, [r3, #32]
 80049e8:	1ad3      	subs	r3, r2, r3
 80049ea:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	68db      	ldr	r3, [r3, #12]
 80049f0:	69fa      	ldr	r2, [r7, #28]
 80049f2:	429a      	cmp	r2, r3
 80049f4:	d902      	bls.n	80049fc <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	68db      	ldr	r3, [r3, #12]
 80049fa:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80049fc:	69fb      	ldr	r3, [r7, #28]
 80049fe:	3303      	adds	r3, #3
 8004a00:	089b      	lsrs	r3, r3, #2
 8004a02:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004a04:	e02b      	b.n	8004a5e <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	699a      	ldr	r2, [r3, #24]
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	6a1b      	ldr	r3, [r3, #32]
 8004a0e:	1ad3      	subs	r3, r2, r3
 8004a10:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	68db      	ldr	r3, [r3, #12]
 8004a16:	69fa      	ldr	r2, [r7, #28]
 8004a18:	429a      	cmp	r2, r3
 8004a1a:	d902      	bls.n	8004a22 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	68db      	ldr	r3, [r3, #12]
 8004a20:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8004a22:	69fb      	ldr	r3, [r7, #28]
 8004a24:	3303      	adds	r3, #3
 8004a26:	089b      	lsrs	r3, r3, #2
 8004a28:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	6919      	ldr	r1, [r3, #16]
 8004a2e:	683b      	ldr	r3, [r7, #0]
 8004a30:	b2da      	uxtb	r2, r3
 8004a32:	69fb      	ldr	r3, [r7, #28]
 8004a34:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004a3a:	b2db      	uxtb	r3, r3
 8004a3c:	9300      	str	r3, [sp, #0]
 8004a3e:	4603      	mov	r3, r0
 8004a40:	6978      	ldr	r0, [r7, #20]
 8004a42:	f002 fe45 	bl	80076d0 <USB_WritePacket>

    ep->xfer_buff  += len;
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	691a      	ldr	r2, [r3, #16]
 8004a4a:	69fb      	ldr	r3, [r7, #28]
 8004a4c:	441a      	add	r2, r3
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	6a1a      	ldr	r2, [r3, #32]
 8004a56:	69fb      	ldr	r3, [r7, #28]
 8004a58:	441a      	add	r2, r3
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004a5e:	683b      	ldr	r3, [r7, #0]
 8004a60:	015a      	lsls	r2, r3, #5
 8004a62:	693b      	ldr	r3, [r7, #16]
 8004a64:	4413      	add	r3, r2
 8004a66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a6a:	699b      	ldr	r3, [r3, #24]
 8004a6c:	b29b      	uxth	r3, r3
 8004a6e:	69ba      	ldr	r2, [r7, #24]
 8004a70:	429a      	cmp	r2, r3
 8004a72:	d809      	bhi.n	8004a88 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	6a1a      	ldr	r2, [r3, #32]
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004a7c:	429a      	cmp	r2, r3
 8004a7e:	d203      	bcs.n	8004a88 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	699b      	ldr	r3, [r3, #24]
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d1be      	bne.n	8004a06 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	699a      	ldr	r2, [r3, #24]
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	6a1b      	ldr	r3, [r3, #32]
 8004a90:	429a      	cmp	r2, r3
 8004a92:	d811      	bhi.n	8004ab8 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004a94:	683b      	ldr	r3, [r7, #0]
 8004a96:	f003 030f 	and.w	r3, r3, #15
 8004a9a:	2201      	movs	r2, #1
 8004a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8004aa0:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004aa2:	693b      	ldr	r3, [r7, #16]
 8004aa4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004aa8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004aaa:	68bb      	ldr	r3, [r7, #8]
 8004aac:	43db      	mvns	r3, r3
 8004aae:	6939      	ldr	r1, [r7, #16]
 8004ab0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004ab4:	4013      	ands	r3, r2
 8004ab6:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8004ab8:	2300      	movs	r3, #0
}
 8004aba:	4618      	mov	r0, r3
 8004abc:	3720      	adds	r7, #32
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	bd80      	pop	{r7, pc}
	...

08004ac4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004ac4:	b580      	push	{r7, lr}
 8004ac6:	b088      	sub	sp, #32
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
 8004acc:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ad4:	69fb      	ldr	r3, [r7, #28]
 8004ad6:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004ad8:	69fb      	ldr	r3, [r7, #28]
 8004ada:	333c      	adds	r3, #60	; 0x3c
 8004adc:	3304      	adds	r3, #4
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004ae2:	683b      	ldr	r3, [r7, #0]
 8004ae4:	015a      	lsls	r2, r3, #5
 8004ae6:	69bb      	ldr	r3, [r7, #24]
 8004ae8:	4413      	add	r3, r2
 8004aea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004aee:	689b      	ldr	r3, [r3, #8]
 8004af0:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	691b      	ldr	r3, [r3, #16]
 8004af6:	2b01      	cmp	r3, #1
 8004af8:	d17b      	bne.n	8004bf2 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8004afa:	693b      	ldr	r3, [r7, #16]
 8004afc:	f003 0308 	and.w	r3, r3, #8
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d015      	beq.n	8004b30 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004b04:	697b      	ldr	r3, [r7, #20]
 8004b06:	4a61      	ldr	r2, [pc, #388]	; (8004c8c <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004b08:	4293      	cmp	r3, r2
 8004b0a:	f240 80b9 	bls.w	8004c80 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004b0e:	693b      	ldr	r3, [r7, #16]
 8004b10:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	f000 80b3 	beq.w	8004c80 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004b1a:	683b      	ldr	r3, [r7, #0]
 8004b1c:	015a      	lsls	r2, r3, #5
 8004b1e:	69bb      	ldr	r3, [r7, #24]
 8004b20:	4413      	add	r3, r2
 8004b22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b26:	461a      	mov	r2, r3
 8004b28:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004b2c:	6093      	str	r3, [r2, #8]
 8004b2e:	e0a7      	b.n	8004c80 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004b30:	693b      	ldr	r3, [r7, #16]
 8004b32:	f003 0320 	and.w	r3, r3, #32
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d009      	beq.n	8004b4e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004b3a:	683b      	ldr	r3, [r7, #0]
 8004b3c:	015a      	lsls	r2, r3, #5
 8004b3e:	69bb      	ldr	r3, [r7, #24]
 8004b40:	4413      	add	r3, r2
 8004b42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b46:	461a      	mov	r2, r3
 8004b48:	2320      	movs	r3, #32
 8004b4a:	6093      	str	r3, [r2, #8]
 8004b4c:	e098      	b.n	8004c80 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8004b4e:	693b      	ldr	r3, [r7, #16]
 8004b50:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	f040 8093 	bne.w	8004c80 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004b5a:	697b      	ldr	r3, [r7, #20]
 8004b5c:	4a4b      	ldr	r2, [pc, #300]	; (8004c8c <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004b5e:	4293      	cmp	r3, r2
 8004b60:	d90f      	bls.n	8004b82 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004b62:	693b      	ldr	r3, [r7, #16]
 8004b64:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d00a      	beq.n	8004b82 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004b6c:	683b      	ldr	r3, [r7, #0]
 8004b6e:	015a      	lsls	r2, r3, #5
 8004b70:	69bb      	ldr	r3, [r7, #24]
 8004b72:	4413      	add	r3, r2
 8004b74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b78:	461a      	mov	r2, r3
 8004b7a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004b7e:	6093      	str	r3, [r2, #8]
 8004b80:	e07e      	b.n	8004c80 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8004b82:	683a      	ldr	r2, [r7, #0]
 8004b84:	4613      	mov	r3, r2
 8004b86:	00db      	lsls	r3, r3, #3
 8004b88:	4413      	add	r3, r2
 8004b8a:	009b      	lsls	r3, r3, #2
 8004b8c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004b90:	687a      	ldr	r2, [r7, #4]
 8004b92:	4413      	add	r3, r2
 8004b94:	3304      	adds	r3, #4
 8004b96:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	69da      	ldr	r2, [r3, #28]
 8004b9c:	683b      	ldr	r3, [r7, #0]
 8004b9e:	0159      	lsls	r1, r3, #5
 8004ba0:	69bb      	ldr	r3, [r7, #24]
 8004ba2:	440b      	add	r3, r1
 8004ba4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ba8:	691b      	ldr	r3, [r3, #16]
 8004baa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004bae:	1ad2      	subs	r2, r2, r3
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8004bb4:	683b      	ldr	r3, [r7, #0]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d114      	bne.n	8004be4 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	699b      	ldr	r3, [r3, #24]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d109      	bne.n	8004bd6 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	6818      	ldr	r0, [r3, #0]
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004bcc:	461a      	mov	r2, r3
 8004bce:	2101      	movs	r1, #1
 8004bd0:	f003 f814 	bl	8007bfc <USB_EP0_OutStart>
 8004bd4:	e006      	b.n	8004be4 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	691a      	ldr	r2, [r3, #16]
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	6a1b      	ldr	r3, [r3, #32]
 8004bde:	441a      	add	r2, r3
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	b2db      	uxtb	r3, r3
 8004be8:	4619      	mov	r1, r3
 8004bea:	6878      	ldr	r0, [r7, #4]
 8004bec:	f004 ff72 	bl	8009ad4 <HAL_PCD_DataOutStageCallback>
 8004bf0:	e046      	b.n	8004c80 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004bf2:	697b      	ldr	r3, [r7, #20]
 8004bf4:	4a26      	ldr	r2, [pc, #152]	; (8004c90 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8004bf6:	4293      	cmp	r3, r2
 8004bf8:	d124      	bne.n	8004c44 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004bfa:	693b      	ldr	r3, [r7, #16]
 8004bfc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d00a      	beq.n	8004c1a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004c04:	683b      	ldr	r3, [r7, #0]
 8004c06:	015a      	lsls	r2, r3, #5
 8004c08:	69bb      	ldr	r3, [r7, #24]
 8004c0a:	4413      	add	r3, r2
 8004c0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c10:	461a      	mov	r2, r3
 8004c12:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004c16:	6093      	str	r3, [r2, #8]
 8004c18:	e032      	b.n	8004c80 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004c1a:	693b      	ldr	r3, [r7, #16]
 8004c1c:	f003 0320 	and.w	r3, r3, #32
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d008      	beq.n	8004c36 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004c24:	683b      	ldr	r3, [r7, #0]
 8004c26:	015a      	lsls	r2, r3, #5
 8004c28:	69bb      	ldr	r3, [r7, #24]
 8004c2a:	4413      	add	r3, r2
 8004c2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c30:	461a      	mov	r2, r3
 8004c32:	2320      	movs	r3, #32
 8004c34:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004c36:	683b      	ldr	r3, [r7, #0]
 8004c38:	b2db      	uxtb	r3, r3
 8004c3a:	4619      	mov	r1, r3
 8004c3c:	6878      	ldr	r0, [r7, #4]
 8004c3e:	f004 ff49 	bl	8009ad4 <HAL_PCD_DataOutStageCallback>
 8004c42:	e01d      	b.n	8004c80 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d114      	bne.n	8004c74 <PCD_EP_OutXfrComplete_int+0x1b0>
 8004c4a:	6879      	ldr	r1, [r7, #4]
 8004c4c:	683a      	ldr	r2, [r7, #0]
 8004c4e:	4613      	mov	r3, r2
 8004c50:	00db      	lsls	r3, r3, #3
 8004c52:	4413      	add	r3, r2
 8004c54:	009b      	lsls	r3, r3, #2
 8004c56:	440b      	add	r3, r1
 8004c58:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d108      	bne.n	8004c74 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	6818      	ldr	r0, [r3, #0]
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004c6c:	461a      	mov	r2, r3
 8004c6e:	2100      	movs	r1, #0
 8004c70:	f002 ffc4 	bl	8007bfc <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004c74:	683b      	ldr	r3, [r7, #0]
 8004c76:	b2db      	uxtb	r3, r3
 8004c78:	4619      	mov	r1, r3
 8004c7a:	6878      	ldr	r0, [r7, #4]
 8004c7c:	f004 ff2a 	bl	8009ad4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004c80:	2300      	movs	r3, #0
}
 8004c82:	4618      	mov	r0, r3
 8004c84:	3720      	adds	r7, #32
 8004c86:	46bd      	mov	sp, r7
 8004c88:	bd80      	pop	{r7, pc}
 8004c8a:	bf00      	nop
 8004c8c:	4f54300a 	.word	0x4f54300a
 8004c90:	4f54310a 	.word	0x4f54310a

08004c94 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004c94:	b580      	push	{r7, lr}
 8004c96:	b086      	sub	sp, #24
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	6078      	str	r0, [r7, #4]
 8004c9c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ca4:	697b      	ldr	r3, [r7, #20]
 8004ca6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004ca8:	697b      	ldr	r3, [r7, #20]
 8004caa:	333c      	adds	r3, #60	; 0x3c
 8004cac:	3304      	adds	r3, #4
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004cb2:	683b      	ldr	r3, [r7, #0]
 8004cb4:	015a      	lsls	r2, r3, #5
 8004cb6:	693b      	ldr	r3, [r7, #16]
 8004cb8:	4413      	add	r3, r2
 8004cba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cbe:	689b      	ldr	r3, [r3, #8]
 8004cc0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	4a15      	ldr	r2, [pc, #84]	; (8004d1c <PCD_EP_OutSetupPacket_int+0x88>)
 8004cc6:	4293      	cmp	r3, r2
 8004cc8:	d90e      	bls.n	8004ce8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004cca:	68bb      	ldr	r3, [r7, #8]
 8004ccc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d009      	beq.n	8004ce8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004cd4:	683b      	ldr	r3, [r7, #0]
 8004cd6:	015a      	lsls	r2, r3, #5
 8004cd8:	693b      	ldr	r3, [r7, #16]
 8004cda:	4413      	add	r3, r2
 8004cdc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ce0:	461a      	mov	r2, r3
 8004ce2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004ce6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004ce8:	6878      	ldr	r0, [r7, #4]
 8004cea:	f004 fee1 	bl	8009ab0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	4a0a      	ldr	r2, [pc, #40]	; (8004d1c <PCD_EP_OutSetupPacket_int+0x88>)
 8004cf2:	4293      	cmp	r3, r2
 8004cf4:	d90c      	bls.n	8004d10 <PCD_EP_OutSetupPacket_int+0x7c>
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	691b      	ldr	r3, [r3, #16]
 8004cfa:	2b01      	cmp	r3, #1
 8004cfc:	d108      	bne.n	8004d10 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6818      	ldr	r0, [r3, #0]
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004d08:	461a      	mov	r2, r3
 8004d0a:	2101      	movs	r1, #1
 8004d0c:	f002 ff76 	bl	8007bfc <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004d10:	2300      	movs	r3, #0
}
 8004d12:	4618      	mov	r0, r3
 8004d14:	3718      	adds	r7, #24
 8004d16:	46bd      	mov	sp, r7
 8004d18:	bd80      	pop	{r7, pc}
 8004d1a:	bf00      	nop
 8004d1c:	4f54300a 	.word	0x4f54300a

08004d20 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004d20:	b480      	push	{r7}
 8004d22:	b085      	sub	sp, #20
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	6078      	str	r0, [r7, #4]
 8004d28:	460b      	mov	r3, r1
 8004d2a:	70fb      	strb	r3, [r7, #3]
 8004d2c:	4613      	mov	r3, r2
 8004d2e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d36:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004d38:	78fb      	ldrb	r3, [r7, #3]
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d107      	bne.n	8004d4e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004d3e:	883b      	ldrh	r3, [r7, #0]
 8004d40:	0419      	lsls	r1, r3, #16
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	68ba      	ldr	r2, [r7, #8]
 8004d48:	430a      	orrs	r2, r1
 8004d4a:	629a      	str	r2, [r3, #40]	; 0x28
 8004d4c:	e028      	b.n	8004da0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d54:	0c1b      	lsrs	r3, r3, #16
 8004d56:	68ba      	ldr	r2, [r7, #8]
 8004d58:	4413      	add	r3, r2
 8004d5a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004d5c:	2300      	movs	r3, #0
 8004d5e:	73fb      	strb	r3, [r7, #15]
 8004d60:	e00d      	b.n	8004d7e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681a      	ldr	r2, [r3, #0]
 8004d66:	7bfb      	ldrb	r3, [r7, #15]
 8004d68:	3340      	adds	r3, #64	; 0x40
 8004d6a:	009b      	lsls	r3, r3, #2
 8004d6c:	4413      	add	r3, r2
 8004d6e:	685b      	ldr	r3, [r3, #4]
 8004d70:	0c1b      	lsrs	r3, r3, #16
 8004d72:	68ba      	ldr	r2, [r7, #8]
 8004d74:	4413      	add	r3, r2
 8004d76:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004d78:	7bfb      	ldrb	r3, [r7, #15]
 8004d7a:	3301      	adds	r3, #1
 8004d7c:	73fb      	strb	r3, [r7, #15]
 8004d7e:	7bfa      	ldrb	r2, [r7, #15]
 8004d80:	78fb      	ldrb	r3, [r7, #3]
 8004d82:	3b01      	subs	r3, #1
 8004d84:	429a      	cmp	r2, r3
 8004d86:	d3ec      	bcc.n	8004d62 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004d88:	883b      	ldrh	r3, [r7, #0]
 8004d8a:	0418      	lsls	r0, r3, #16
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	6819      	ldr	r1, [r3, #0]
 8004d90:	78fb      	ldrb	r3, [r7, #3]
 8004d92:	3b01      	subs	r3, #1
 8004d94:	68ba      	ldr	r2, [r7, #8]
 8004d96:	4302      	orrs	r2, r0
 8004d98:	3340      	adds	r3, #64	; 0x40
 8004d9a:	009b      	lsls	r3, r3, #2
 8004d9c:	440b      	add	r3, r1
 8004d9e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004da0:	2300      	movs	r3, #0
}
 8004da2:	4618      	mov	r0, r3
 8004da4:	3714      	adds	r7, #20
 8004da6:	46bd      	mov	sp, r7
 8004da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dac:	4770      	bx	lr

08004dae <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004dae:	b480      	push	{r7}
 8004db0:	b083      	sub	sp, #12
 8004db2:	af00      	add	r7, sp, #0
 8004db4:	6078      	str	r0, [r7, #4]
 8004db6:	460b      	mov	r3, r1
 8004db8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	887a      	ldrh	r2, [r7, #2]
 8004dc0:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004dc2:	2300      	movs	r3, #0
}
 8004dc4:	4618      	mov	r0, r3
 8004dc6:	370c      	adds	r7, #12
 8004dc8:	46bd      	mov	sp, r7
 8004dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dce:	4770      	bx	lr

08004dd0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004dd0:	b480      	push	{r7}
 8004dd2:	b083      	sub	sp, #12
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	6078      	str	r0, [r7, #4]
 8004dd8:	460b      	mov	r3, r1
 8004dda:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004ddc:	bf00      	nop
 8004dde:	370c      	adds	r7, #12
 8004de0:	46bd      	mov	sp, r7
 8004de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de6:	4770      	bx	lr

08004de8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004de8:	b580      	push	{r7, lr}
 8004dea:	b086      	sub	sp, #24
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d101      	bne.n	8004dfa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004df6:	2301      	movs	r3, #1
 8004df8:	e267      	b.n	80052ca <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f003 0301 	and.w	r3, r3, #1
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d075      	beq.n	8004ef2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004e06:	4b88      	ldr	r3, [pc, #544]	; (8005028 <HAL_RCC_OscConfig+0x240>)
 8004e08:	689b      	ldr	r3, [r3, #8]
 8004e0a:	f003 030c 	and.w	r3, r3, #12
 8004e0e:	2b04      	cmp	r3, #4
 8004e10:	d00c      	beq.n	8004e2c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004e12:	4b85      	ldr	r3, [pc, #532]	; (8005028 <HAL_RCC_OscConfig+0x240>)
 8004e14:	689b      	ldr	r3, [r3, #8]
 8004e16:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004e1a:	2b08      	cmp	r3, #8
 8004e1c:	d112      	bne.n	8004e44 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004e1e:	4b82      	ldr	r3, [pc, #520]	; (8005028 <HAL_RCC_OscConfig+0x240>)
 8004e20:	685b      	ldr	r3, [r3, #4]
 8004e22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e26:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004e2a:	d10b      	bne.n	8004e44 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e2c:	4b7e      	ldr	r3, [pc, #504]	; (8005028 <HAL_RCC_OscConfig+0x240>)
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d05b      	beq.n	8004ef0 <HAL_RCC_OscConfig+0x108>
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	685b      	ldr	r3, [r3, #4]
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d157      	bne.n	8004ef0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004e40:	2301      	movs	r3, #1
 8004e42:	e242      	b.n	80052ca <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	685b      	ldr	r3, [r3, #4]
 8004e48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e4c:	d106      	bne.n	8004e5c <HAL_RCC_OscConfig+0x74>
 8004e4e:	4b76      	ldr	r3, [pc, #472]	; (8005028 <HAL_RCC_OscConfig+0x240>)
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	4a75      	ldr	r2, [pc, #468]	; (8005028 <HAL_RCC_OscConfig+0x240>)
 8004e54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e58:	6013      	str	r3, [r2, #0]
 8004e5a:	e01d      	b.n	8004e98 <HAL_RCC_OscConfig+0xb0>
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	685b      	ldr	r3, [r3, #4]
 8004e60:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004e64:	d10c      	bne.n	8004e80 <HAL_RCC_OscConfig+0x98>
 8004e66:	4b70      	ldr	r3, [pc, #448]	; (8005028 <HAL_RCC_OscConfig+0x240>)
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	4a6f      	ldr	r2, [pc, #444]	; (8005028 <HAL_RCC_OscConfig+0x240>)
 8004e6c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004e70:	6013      	str	r3, [r2, #0]
 8004e72:	4b6d      	ldr	r3, [pc, #436]	; (8005028 <HAL_RCC_OscConfig+0x240>)
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	4a6c      	ldr	r2, [pc, #432]	; (8005028 <HAL_RCC_OscConfig+0x240>)
 8004e78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e7c:	6013      	str	r3, [r2, #0]
 8004e7e:	e00b      	b.n	8004e98 <HAL_RCC_OscConfig+0xb0>
 8004e80:	4b69      	ldr	r3, [pc, #420]	; (8005028 <HAL_RCC_OscConfig+0x240>)
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	4a68      	ldr	r2, [pc, #416]	; (8005028 <HAL_RCC_OscConfig+0x240>)
 8004e86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e8a:	6013      	str	r3, [r2, #0]
 8004e8c:	4b66      	ldr	r3, [pc, #408]	; (8005028 <HAL_RCC_OscConfig+0x240>)
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	4a65      	ldr	r2, [pc, #404]	; (8005028 <HAL_RCC_OscConfig+0x240>)
 8004e92:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004e96:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	685b      	ldr	r3, [r3, #4]
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d013      	beq.n	8004ec8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ea0:	f7fd fc9c 	bl	80027dc <HAL_GetTick>
 8004ea4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ea6:	e008      	b.n	8004eba <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004ea8:	f7fd fc98 	bl	80027dc <HAL_GetTick>
 8004eac:	4602      	mov	r2, r0
 8004eae:	693b      	ldr	r3, [r7, #16]
 8004eb0:	1ad3      	subs	r3, r2, r3
 8004eb2:	2b64      	cmp	r3, #100	; 0x64
 8004eb4:	d901      	bls.n	8004eba <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004eb6:	2303      	movs	r3, #3
 8004eb8:	e207      	b.n	80052ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004eba:	4b5b      	ldr	r3, [pc, #364]	; (8005028 <HAL_RCC_OscConfig+0x240>)
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d0f0      	beq.n	8004ea8 <HAL_RCC_OscConfig+0xc0>
 8004ec6:	e014      	b.n	8004ef2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ec8:	f7fd fc88 	bl	80027dc <HAL_GetTick>
 8004ecc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004ece:	e008      	b.n	8004ee2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004ed0:	f7fd fc84 	bl	80027dc <HAL_GetTick>
 8004ed4:	4602      	mov	r2, r0
 8004ed6:	693b      	ldr	r3, [r7, #16]
 8004ed8:	1ad3      	subs	r3, r2, r3
 8004eda:	2b64      	cmp	r3, #100	; 0x64
 8004edc:	d901      	bls.n	8004ee2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004ede:	2303      	movs	r3, #3
 8004ee0:	e1f3      	b.n	80052ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004ee2:	4b51      	ldr	r3, [pc, #324]	; (8005028 <HAL_RCC_OscConfig+0x240>)
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d1f0      	bne.n	8004ed0 <HAL_RCC_OscConfig+0xe8>
 8004eee:	e000      	b.n	8004ef2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ef0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f003 0302 	and.w	r3, r3, #2
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d063      	beq.n	8004fc6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004efe:	4b4a      	ldr	r3, [pc, #296]	; (8005028 <HAL_RCC_OscConfig+0x240>)
 8004f00:	689b      	ldr	r3, [r3, #8]
 8004f02:	f003 030c 	and.w	r3, r3, #12
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d00b      	beq.n	8004f22 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004f0a:	4b47      	ldr	r3, [pc, #284]	; (8005028 <HAL_RCC_OscConfig+0x240>)
 8004f0c:	689b      	ldr	r3, [r3, #8]
 8004f0e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004f12:	2b08      	cmp	r3, #8
 8004f14:	d11c      	bne.n	8004f50 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004f16:	4b44      	ldr	r3, [pc, #272]	; (8005028 <HAL_RCC_OscConfig+0x240>)
 8004f18:	685b      	ldr	r3, [r3, #4]
 8004f1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d116      	bne.n	8004f50 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004f22:	4b41      	ldr	r3, [pc, #260]	; (8005028 <HAL_RCC_OscConfig+0x240>)
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f003 0302 	and.w	r3, r3, #2
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d005      	beq.n	8004f3a <HAL_RCC_OscConfig+0x152>
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	68db      	ldr	r3, [r3, #12]
 8004f32:	2b01      	cmp	r3, #1
 8004f34:	d001      	beq.n	8004f3a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004f36:	2301      	movs	r3, #1
 8004f38:	e1c7      	b.n	80052ca <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f3a:	4b3b      	ldr	r3, [pc, #236]	; (8005028 <HAL_RCC_OscConfig+0x240>)
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	691b      	ldr	r3, [r3, #16]
 8004f46:	00db      	lsls	r3, r3, #3
 8004f48:	4937      	ldr	r1, [pc, #220]	; (8005028 <HAL_RCC_OscConfig+0x240>)
 8004f4a:	4313      	orrs	r3, r2
 8004f4c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004f4e:	e03a      	b.n	8004fc6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	68db      	ldr	r3, [r3, #12]
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d020      	beq.n	8004f9a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004f58:	4b34      	ldr	r3, [pc, #208]	; (800502c <HAL_RCC_OscConfig+0x244>)
 8004f5a:	2201      	movs	r2, #1
 8004f5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f5e:	f7fd fc3d 	bl	80027dc <HAL_GetTick>
 8004f62:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f64:	e008      	b.n	8004f78 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004f66:	f7fd fc39 	bl	80027dc <HAL_GetTick>
 8004f6a:	4602      	mov	r2, r0
 8004f6c:	693b      	ldr	r3, [r7, #16]
 8004f6e:	1ad3      	subs	r3, r2, r3
 8004f70:	2b02      	cmp	r3, #2
 8004f72:	d901      	bls.n	8004f78 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004f74:	2303      	movs	r3, #3
 8004f76:	e1a8      	b.n	80052ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f78:	4b2b      	ldr	r3, [pc, #172]	; (8005028 <HAL_RCC_OscConfig+0x240>)
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f003 0302 	and.w	r3, r3, #2
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d0f0      	beq.n	8004f66 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f84:	4b28      	ldr	r3, [pc, #160]	; (8005028 <HAL_RCC_OscConfig+0x240>)
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	691b      	ldr	r3, [r3, #16]
 8004f90:	00db      	lsls	r3, r3, #3
 8004f92:	4925      	ldr	r1, [pc, #148]	; (8005028 <HAL_RCC_OscConfig+0x240>)
 8004f94:	4313      	orrs	r3, r2
 8004f96:	600b      	str	r3, [r1, #0]
 8004f98:	e015      	b.n	8004fc6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004f9a:	4b24      	ldr	r3, [pc, #144]	; (800502c <HAL_RCC_OscConfig+0x244>)
 8004f9c:	2200      	movs	r2, #0
 8004f9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fa0:	f7fd fc1c 	bl	80027dc <HAL_GetTick>
 8004fa4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004fa6:	e008      	b.n	8004fba <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004fa8:	f7fd fc18 	bl	80027dc <HAL_GetTick>
 8004fac:	4602      	mov	r2, r0
 8004fae:	693b      	ldr	r3, [r7, #16]
 8004fb0:	1ad3      	subs	r3, r2, r3
 8004fb2:	2b02      	cmp	r3, #2
 8004fb4:	d901      	bls.n	8004fba <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004fb6:	2303      	movs	r3, #3
 8004fb8:	e187      	b.n	80052ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004fba:	4b1b      	ldr	r3, [pc, #108]	; (8005028 <HAL_RCC_OscConfig+0x240>)
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f003 0302 	and.w	r3, r3, #2
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d1f0      	bne.n	8004fa8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f003 0308 	and.w	r3, r3, #8
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d036      	beq.n	8005040 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	695b      	ldr	r3, [r3, #20]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d016      	beq.n	8005008 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004fda:	4b15      	ldr	r3, [pc, #84]	; (8005030 <HAL_RCC_OscConfig+0x248>)
 8004fdc:	2201      	movs	r2, #1
 8004fde:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fe0:	f7fd fbfc 	bl	80027dc <HAL_GetTick>
 8004fe4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004fe6:	e008      	b.n	8004ffa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004fe8:	f7fd fbf8 	bl	80027dc <HAL_GetTick>
 8004fec:	4602      	mov	r2, r0
 8004fee:	693b      	ldr	r3, [r7, #16]
 8004ff0:	1ad3      	subs	r3, r2, r3
 8004ff2:	2b02      	cmp	r3, #2
 8004ff4:	d901      	bls.n	8004ffa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004ff6:	2303      	movs	r3, #3
 8004ff8:	e167      	b.n	80052ca <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004ffa:	4b0b      	ldr	r3, [pc, #44]	; (8005028 <HAL_RCC_OscConfig+0x240>)
 8004ffc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ffe:	f003 0302 	and.w	r3, r3, #2
 8005002:	2b00      	cmp	r3, #0
 8005004:	d0f0      	beq.n	8004fe8 <HAL_RCC_OscConfig+0x200>
 8005006:	e01b      	b.n	8005040 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005008:	4b09      	ldr	r3, [pc, #36]	; (8005030 <HAL_RCC_OscConfig+0x248>)
 800500a:	2200      	movs	r2, #0
 800500c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800500e:	f7fd fbe5 	bl	80027dc <HAL_GetTick>
 8005012:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005014:	e00e      	b.n	8005034 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005016:	f7fd fbe1 	bl	80027dc <HAL_GetTick>
 800501a:	4602      	mov	r2, r0
 800501c:	693b      	ldr	r3, [r7, #16]
 800501e:	1ad3      	subs	r3, r2, r3
 8005020:	2b02      	cmp	r3, #2
 8005022:	d907      	bls.n	8005034 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005024:	2303      	movs	r3, #3
 8005026:	e150      	b.n	80052ca <HAL_RCC_OscConfig+0x4e2>
 8005028:	40023800 	.word	0x40023800
 800502c:	42470000 	.word	0x42470000
 8005030:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005034:	4b88      	ldr	r3, [pc, #544]	; (8005258 <HAL_RCC_OscConfig+0x470>)
 8005036:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005038:	f003 0302 	and.w	r3, r3, #2
 800503c:	2b00      	cmp	r3, #0
 800503e:	d1ea      	bne.n	8005016 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f003 0304 	and.w	r3, r3, #4
 8005048:	2b00      	cmp	r3, #0
 800504a:	f000 8097 	beq.w	800517c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800504e:	2300      	movs	r3, #0
 8005050:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005052:	4b81      	ldr	r3, [pc, #516]	; (8005258 <HAL_RCC_OscConfig+0x470>)
 8005054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005056:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800505a:	2b00      	cmp	r3, #0
 800505c:	d10f      	bne.n	800507e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800505e:	2300      	movs	r3, #0
 8005060:	60bb      	str	r3, [r7, #8]
 8005062:	4b7d      	ldr	r3, [pc, #500]	; (8005258 <HAL_RCC_OscConfig+0x470>)
 8005064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005066:	4a7c      	ldr	r2, [pc, #496]	; (8005258 <HAL_RCC_OscConfig+0x470>)
 8005068:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800506c:	6413      	str	r3, [r2, #64]	; 0x40
 800506e:	4b7a      	ldr	r3, [pc, #488]	; (8005258 <HAL_RCC_OscConfig+0x470>)
 8005070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005072:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005076:	60bb      	str	r3, [r7, #8]
 8005078:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800507a:	2301      	movs	r3, #1
 800507c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800507e:	4b77      	ldr	r3, [pc, #476]	; (800525c <HAL_RCC_OscConfig+0x474>)
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005086:	2b00      	cmp	r3, #0
 8005088:	d118      	bne.n	80050bc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800508a:	4b74      	ldr	r3, [pc, #464]	; (800525c <HAL_RCC_OscConfig+0x474>)
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	4a73      	ldr	r2, [pc, #460]	; (800525c <HAL_RCC_OscConfig+0x474>)
 8005090:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005094:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005096:	f7fd fba1 	bl	80027dc <HAL_GetTick>
 800509a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800509c:	e008      	b.n	80050b0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800509e:	f7fd fb9d 	bl	80027dc <HAL_GetTick>
 80050a2:	4602      	mov	r2, r0
 80050a4:	693b      	ldr	r3, [r7, #16]
 80050a6:	1ad3      	subs	r3, r2, r3
 80050a8:	2b02      	cmp	r3, #2
 80050aa:	d901      	bls.n	80050b0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80050ac:	2303      	movs	r3, #3
 80050ae:	e10c      	b.n	80052ca <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050b0:	4b6a      	ldr	r3, [pc, #424]	; (800525c <HAL_RCC_OscConfig+0x474>)
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d0f0      	beq.n	800509e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	689b      	ldr	r3, [r3, #8]
 80050c0:	2b01      	cmp	r3, #1
 80050c2:	d106      	bne.n	80050d2 <HAL_RCC_OscConfig+0x2ea>
 80050c4:	4b64      	ldr	r3, [pc, #400]	; (8005258 <HAL_RCC_OscConfig+0x470>)
 80050c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050c8:	4a63      	ldr	r2, [pc, #396]	; (8005258 <HAL_RCC_OscConfig+0x470>)
 80050ca:	f043 0301 	orr.w	r3, r3, #1
 80050ce:	6713      	str	r3, [r2, #112]	; 0x70
 80050d0:	e01c      	b.n	800510c <HAL_RCC_OscConfig+0x324>
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	689b      	ldr	r3, [r3, #8]
 80050d6:	2b05      	cmp	r3, #5
 80050d8:	d10c      	bne.n	80050f4 <HAL_RCC_OscConfig+0x30c>
 80050da:	4b5f      	ldr	r3, [pc, #380]	; (8005258 <HAL_RCC_OscConfig+0x470>)
 80050dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050de:	4a5e      	ldr	r2, [pc, #376]	; (8005258 <HAL_RCC_OscConfig+0x470>)
 80050e0:	f043 0304 	orr.w	r3, r3, #4
 80050e4:	6713      	str	r3, [r2, #112]	; 0x70
 80050e6:	4b5c      	ldr	r3, [pc, #368]	; (8005258 <HAL_RCC_OscConfig+0x470>)
 80050e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050ea:	4a5b      	ldr	r2, [pc, #364]	; (8005258 <HAL_RCC_OscConfig+0x470>)
 80050ec:	f043 0301 	orr.w	r3, r3, #1
 80050f0:	6713      	str	r3, [r2, #112]	; 0x70
 80050f2:	e00b      	b.n	800510c <HAL_RCC_OscConfig+0x324>
 80050f4:	4b58      	ldr	r3, [pc, #352]	; (8005258 <HAL_RCC_OscConfig+0x470>)
 80050f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050f8:	4a57      	ldr	r2, [pc, #348]	; (8005258 <HAL_RCC_OscConfig+0x470>)
 80050fa:	f023 0301 	bic.w	r3, r3, #1
 80050fe:	6713      	str	r3, [r2, #112]	; 0x70
 8005100:	4b55      	ldr	r3, [pc, #340]	; (8005258 <HAL_RCC_OscConfig+0x470>)
 8005102:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005104:	4a54      	ldr	r2, [pc, #336]	; (8005258 <HAL_RCC_OscConfig+0x470>)
 8005106:	f023 0304 	bic.w	r3, r3, #4
 800510a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	689b      	ldr	r3, [r3, #8]
 8005110:	2b00      	cmp	r3, #0
 8005112:	d015      	beq.n	8005140 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005114:	f7fd fb62 	bl	80027dc <HAL_GetTick>
 8005118:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800511a:	e00a      	b.n	8005132 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800511c:	f7fd fb5e 	bl	80027dc <HAL_GetTick>
 8005120:	4602      	mov	r2, r0
 8005122:	693b      	ldr	r3, [r7, #16]
 8005124:	1ad3      	subs	r3, r2, r3
 8005126:	f241 3288 	movw	r2, #5000	; 0x1388
 800512a:	4293      	cmp	r3, r2
 800512c:	d901      	bls.n	8005132 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800512e:	2303      	movs	r3, #3
 8005130:	e0cb      	b.n	80052ca <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005132:	4b49      	ldr	r3, [pc, #292]	; (8005258 <HAL_RCC_OscConfig+0x470>)
 8005134:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005136:	f003 0302 	and.w	r3, r3, #2
 800513a:	2b00      	cmp	r3, #0
 800513c:	d0ee      	beq.n	800511c <HAL_RCC_OscConfig+0x334>
 800513e:	e014      	b.n	800516a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005140:	f7fd fb4c 	bl	80027dc <HAL_GetTick>
 8005144:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005146:	e00a      	b.n	800515e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005148:	f7fd fb48 	bl	80027dc <HAL_GetTick>
 800514c:	4602      	mov	r2, r0
 800514e:	693b      	ldr	r3, [r7, #16]
 8005150:	1ad3      	subs	r3, r2, r3
 8005152:	f241 3288 	movw	r2, #5000	; 0x1388
 8005156:	4293      	cmp	r3, r2
 8005158:	d901      	bls.n	800515e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800515a:	2303      	movs	r3, #3
 800515c:	e0b5      	b.n	80052ca <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800515e:	4b3e      	ldr	r3, [pc, #248]	; (8005258 <HAL_RCC_OscConfig+0x470>)
 8005160:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005162:	f003 0302 	and.w	r3, r3, #2
 8005166:	2b00      	cmp	r3, #0
 8005168:	d1ee      	bne.n	8005148 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800516a:	7dfb      	ldrb	r3, [r7, #23]
 800516c:	2b01      	cmp	r3, #1
 800516e:	d105      	bne.n	800517c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005170:	4b39      	ldr	r3, [pc, #228]	; (8005258 <HAL_RCC_OscConfig+0x470>)
 8005172:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005174:	4a38      	ldr	r2, [pc, #224]	; (8005258 <HAL_RCC_OscConfig+0x470>)
 8005176:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800517a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	699b      	ldr	r3, [r3, #24]
 8005180:	2b00      	cmp	r3, #0
 8005182:	f000 80a1 	beq.w	80052c8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005186:	4b34      	ldr	r3, [pc, #208]	; (8005258 <HAL_RCC_OscConfig+0x470>)
 8005188:	689b      	ldr	r3, [r3, #8]
 800518a:	f003 030c 	and.w	r3, r3, #12
 800518e:	2b08      	cmp	r3, #8
 8005190:	d05c      	beq.n	800524c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	699b      	ldr	r3, [r3, #24]
 8005196:	2b02      	cmp	r3, #2
 8005198:	d141      	bne.n	800521e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800519a:	4b31      	ldr	r3, [pc, #196]	; (8005260 <HAL_RCC_OscConfig+0x478>)
 800519c:	2200      	movs	r2, #0
 800519e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051a0:	f7fd fb1c 	bl	80027dc <HAL_GetTick>
 80051a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80051a6:	e008      	b.n	80051ba <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80051a8:	f7fd fb18 	bl	80027dc <HAL_GetTick>
 80051ac:	4602      	mov	r2, r0
 80051ae:	693b      	ldr	r3, [r7, #16]
 80051b0:	1ad3      	subs	r3, r2, r3
 80051b2:	2b02      	cmp	r3, #2
 80051b4:	d901      	bls.n	80051ba <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80051b6:	2303      	movs	r3, #3
 80051b8:	e087      	b.n	80052ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80051ba:	4b27      	ldr	r3, [pc, #156]	; (8005258 <HAL_RCC_OscConfig+0x470>)
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d1f0      	bne.n	80051a8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	69da      	ldr	r2, [r3, #28]
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	6a1b      	ldr	r3, [r3, #32]
 80051ce:	431a      	orrs	r2, r3
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051d4:	019b      	lsls	r3, r3, #6
 80051d6:	431a      	orrs	r2, r3
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051dc:	085b      	lsrs	r3, r3, #1
 80051de:	3b01      	subs	r3, #1
 80051e0:	041b      	lsls	r3, r3, #16
 80051e2:	431a      	orrs	r2, r3
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051e8:	061b      	lsls	r3, r3, #24
 80051ea:	491b      	ldr	r1, [pc, #108]	; (8005258 <HAL_RCC_OscConfig+0x470>)
 80051ec:	4313      	orrs	r3, r2
 80051ee:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80051f0:	4b1b      	ldr	r3, [pc, #108]	; (8005260 <HAL_RCC_OscConfig+0x478>)
 80051f2:	2201      	movs	r2, #1
 80051f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051f6:	f7fd faf1 	bl	80027dc <HAL_GetTick>
 80051fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80051fc:	e008      	b.n	8005210 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80051fe:	f7fd faed 	bl	80027dc <HAL_GetTick>
 8005202:	4602      	mov	r2, r0
 8005204:	693b      	ldr	r3, [r7, #16]
 8005206:	1ad3      	subs	r3, r2, r3
 8005208:	2b02      	cmp	r3, #2
 800520a:	d901      	bls.n	8005210 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800520c:	2303      	movs	r3, #3
 800520e:	e05c      	b.n	80052ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005210:	4b11      	ldr	r3, [pc, #68]	; (8005258 <HAL_RCC_OscConfig+0x470>)
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005218:	2b00      	cmp	r3, #0
 800521a:	d0f0      	beq.n	80051fe <HAL_RCC_OscConfig+0x416>
 800521c:	e054      	b.n	80052c8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800521e:	4b10      	ldr	r3, [pc, #64]	; (8005260 <HAL_RCC_OscConfig+0x478>)
 8005220:	2200      	movs	r2, #0
 8005222:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005224:	f7fd fada 	bl	80027dc <HAL_GetTick>
 8005228:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800522a:	e008      	b.n	800523e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800522c:	f7fd fad6 	bl	80027dc <HAL_GetTick>
 8005230:	4602      	mov	r2, r0
 8005232:	693b      	ldr	r3, [r7, #16]
 8005234:	1ad3      	subs	r3, r2, r3
 8005236:	2b02      	cmp	r3, #2
 8005238:	d901      	bls.n	800523e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800523a:	2303      	movs	r3, #3
 800523c:	e045      	b.n	80052ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800523e:	4b06      	ldr	r3, [pc, #24]	; (8005258 <HAL_RCC_OscConfig+0x470>)
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005246:	2b00      	cmp	r3, #0
 8005248:	d1f0      	bne.n	800522c <HAL_RCC_OscConfig+0x444>
 800524a:	e03d      	b.n	80052c8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	699b      	ldr	r3, [r3, #24]
 8005250:	2b01      	cmp	r3, #1
 8005252:	d107      	bne.n	8005264 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005254:	2301      	movs	r3, #1
 8005256:	e038      	b.n	80052ca <HAL_RCC_OscConfig+0x4e2>
 8005258:	40023800 	.word	0x40023800
 800525c:	40007000 	.word	0x40007000
 8005260:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005264:	4b1b      	ldr	r3, [pc, #108]	; (80052d4 <HAL_RCC_OscConfig+0x4ec>)
 8005266:	685b      	ldr	r3, [r3, #4]
 8005268:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	699b      	ldr	r3, [r3, #24]
 800526e:	2b01      	cmp	r3, #1
 8005270:	d028      	beq.n	80052c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800527c:	429a      	cmp	r2, r3
 800527e:	d121      	bne.n	80052c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800528a:	429a      	cmp	r2, r3
 800528c:	d11a      	bne.n	80052c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800528e:	68fa      	ldr	r2, [r7, #12]
 8005290:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005294:	4013      	ands	r3, r2
 8005296:	687a      	ldr	r2, [r7, #4]
 8005298:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800529a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800529c:	4293      	cmp	r3, r2
 800529e:	d111      	bne.n	80052c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052aa:	085b      	lsrs	r3, r3, #1
 80052ac:	3b01      	subs	r3, #1
 80052ae:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80052b0:	429a      	cmp	r2, r3
 80052b2:	d107      	bne.n	80052c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052be:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80052c0:	429a      	cmp	r2, r3
 80052c2:	d001      	beq.n	80052c8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80052c4:	2301      	movs	r3, #1
 80052c6:	e000      	b.n	80052ca <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80052c8:	2300      	movs	r3, #0
}
 80052ca:	4618      	mov	r0, r3
 80052cc:	3718      	adds	r7, #24
 80052ce:	46bd      	mov	sp, r7
 80052d0:	bd80      	pop	{r7, pc}
 80052d2:	bf00      	nop
 80052d4:	40023800 	.word	0x40023800

080052d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80052d8:	b580      	push	{r7, lr}
 80052da:	b084      	sub	sp, #16
 80052dc:	af00      	add	r7, sp, #0
 80052de:	6078      	str	r0, [r7, #4]
 80052e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d101      	bne.n	80052ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80052e8:	2301      	movs	r3, #1
 80052ea:	e0cc      	b.n	8005486 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80052ec:	4b68      	ldr	r3, [pc, #416]	; (8005490 <HAL_RCC_ClockConfig+0x1b8>)
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	f003 0307 	and.w	r3, r3, #7
 80052f4:	683a      	ldr	r2, [r7, #0]
 80052f6:	429a      	cmp	r2, r3
 80052f8:	d90c      	bls.n	8005314 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80052fa:	4b65      	ldr	r3, [pc, #404]	; (8005490 <HAL_RCC_ClockConfig+0x1b8>)
 80052fc:	683a      	ldr	r2, [r7, #0]
 80052fe:	b2d2      	uxtb	r2, r2
 8005300:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005302:	4b63      	ldr	r3, [pc, #396]	; (8005490 <HAL_RCC_ClockConfig+0x1b8>)
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f003 0307 	and.w	r3, r3, #7
 800530a:	683a      	ldr	r2, [r7, #0]
 800530c:	429a      	cmp	r2, r3
 800530e:	d001      	beq.n	8005314 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005310:	2301      	movs	r3, #1
 8005312:	e0b8      	b.n	8005486 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f003 0302 	and.w	r3, r3, #2
 800531c:	2b00      	cmp	r3, #0
 800531e:	d020      	beq.n	8005362 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	f003 0304 	and.w	r3, r3, #4
 8005328:	2b00      	cmp	r3, #0
 800532a:	d005      	beq.n	8005338 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800532c:	4b59      	ldr	r3, [pc, #356]	; (8005494 <HAL_RCC_ClockConfig+0x1bc>)
 800532e:	689b      	ldr	r3, [r3, #8]
 8005330:	4a58      	ldr	r2, [pc, #352]	; (8005494 <HAL_RCC_ClockConfig+0x1bc>)
 8005332:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005336:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	f003 0308 	and.w	r3, r3, #8
 8005340:	2b00      	cmp	r3, #0
 8005342:	d005      	beq.n	8005350 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005344:	4b53      	ldr	r3, [pc, #332]	; (8005494 <HAL_RCC_ClockConfig+0x1bc>)
 8005346:	689b      	ldr	r3, [r3, #8]
 8005348:	4a52      	ldr	r2, [pc, #328]	; (8005494 <HAL_RCC_ClockConfig+0x1bc>)
 800534a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800534e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005350:	4b50      	ldr	r3, [pc, #320]	; (8005494 <HAL_RCC_ClockConfig+0x1bc>)
 8005352:	689b      	ldr	r3, [r3, #8]
 8005354:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	689b      	ldr	r3, [r3, #8]
 800535c:	494d      	ldr	r1, [pc, #308]	; (8005494 <HAL_RCC_ClockConfig+0x1bc>)
 800535e:	4313      	orrs	r3, r2
 8005360:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f003 0301 	and.w	r3, r3, #1
 800536a:	2b00      	cmp	r3, #0
 800536c:	d044      	beq.n	80053f8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	685b      	ldr	r3, [r3, #4]
 8005372:	2b01      	cmp	r3, #1
 8005374:	d107      	bne.n	8005386 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005376:	4b47      	ldr	r3, [pc, #284]	; (8005494 <HAL_RCC_ClockConfig+0x1bc>)
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800537e:	2b00      	cmp	r3, #0
 8005380:	d119      	bne.n	80053b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005382:	2301      	movs	r3, #1
 8005384:	e07f      	b.n	8005486 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	685b      	ldr	r3, [r3, #4]
 800538a:	2b02      	cmp	r3, #2
 800538c:	d003      	beq.n	8005396 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005392:	2b03      	cmp	r3, #3
 8005394:	d107      	bne.n	80053a6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005396:	4b3f      	ldr	r3, [pc, #252]	; (8005494 <HAL_RCC_ClockConfig+0x1bc>)
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d109      	bne.n	80053b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80053a2:	2301      	movs	r3, #1
 80053a4:	e06f      	b.n	8005486 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80053a6:	4b3b      	ldr	r3, [pc, #236]	; (8005494 <HAL_RCC_ClockConfig+0x1bc>)
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f003 0302 	and.w	r3, r3, #2
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d101      	bne.n	80053b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80053b2:	2301      	movs	r3, #1
 80053b4:	e067      	b.n	8005486 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80053b6:	4b37      	ldr	r3, [pc, #220]	; (8005494 <HAL_RCC_ClockConfig+0x1bc>)
 80053b8:	689b      	ldr	r3, [r3, #8]
 80053ba:	f023 0203 	bic.w	r2, r3, #3
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	685b      	ldr	r3, [r3, #4]
 80053c2:	4934      	ldr	r1, [pc, #208]	; (8005494 <HAL_RCC_ClockConfig+0x1bc>)
 80053c4:	4313      	orrs	r3, r2
 80053c6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80053c8:	f7fd fa08 	bl	80027dc <HAL_GetTick>
 80053cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80053ce:	e00a      	b.n	80053e6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80053d0:	f7fd fa04 	bl	80027dc <HAL_GetTick>
 80053d4:	4602      	mov	r2, r0
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	1ad3      	subs	r3, r2, r3
 80053da:	f241 3288 	movw	r2, #5000	; 0x1388
 80053de:	4293      	cmp	r3, r2
 80053e0:	d901      	bls.n	80053e6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80053e2:	2303      	movs	r3, #3
 80053e4:	e04f      	b.n	8005486 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80053e6:	4b2b      	ldr	r3, [pc, #172]	; (8005494 <HAL_RCC_ClockConfig+0x1bc>)
 80053e8:	689b      	ldr	r3, [r3, #8]
 80053ea:	f003 020c 	and.w	r2, r3, #12
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	685b      	ldr	r3, [r3, #4]
 80053f2:	009b      	lsls	r3, r3, #2
 80053f4:	429a      	cmp	r2, r3
 80053f6:	d1eb      	bne.n	80053d0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80053f8:	4b25      	ldr	r3, [pc, #148]	; (8005490 <HAL_RCC_ClockConfig+0x1b8>)
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f003 0307 	and.w	r3, r3, #7
 8005400:	683a      	ldr	r2, [r7, #0]
 8005402:	429a      	cmp	r2, r3
 8005404:	d20c      	bcs.n	8005420 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005406:	4b22      	ldr	r3, [pc, #136]	; (8005490 <HAL_RCC_ClockConfig+0x1b8>)
 8005408:	683a      	ldr	r2, [r7, #0]
 800540a:	b2d2      	uxtb	r2, r2
 800540c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800540e:	4b20      	ldr	r3, [pc, #128]	; (8005490 <HAL_RCC_ClockConfig+0x1b8>)
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f003 0307 	and.w	r3, r3, #7
 8005416:	683a      	ldr	r2, [r7, #0]
 8005418:	429a      	cmp	r2, r3
 800541a:	d001      	beq.n	8005420 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800541c:	2301      	movs	r3, #1
 800541e:	e032      	b.n	8005486 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	f003 0304 	and.w	r3, r3, #4
 8005428:	2b00      	cmp	r3, #0
 800542a:	d008      	beq.n	800543e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800542c:	4b19      	ldr	r3, [pc, #100]	; (8005494 <HAL_RCC_ClockConfig+0x1bc>)
 800542e:	689b      	ldr	r3, [r3, #8]
 8005430:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	68db      	ldr	r3, [r3, #12]
 8005438:	4916      	ldr	r1, [pc, #88]	; (8005494 <HAL_RCC_ClockConfig+0x1bc>)
 800543a:	4313      	orrs	r3, r2
 800543c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f003 0308 	and.w	r3, r3, #8
 8005446:	2b00      	cmp	r3, #0
 8005448:	d009      	beq.n	800545e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800544a:	4b12      	ldr	r3, [pc, #72]	; (8005494 <HAL_RCC_ClockConfig+0x1bc>)
 800544c:	689b      	ldr	r3, [r3, #8]
 800544e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	691b      	ldr	r3, [r3, #16]
 8005456:	00db      	lsls	r3, r3, #3
 8005458:	490e      	ldr	r1, [pc, #56]	; (8005494 <HAL_RCC_ClockConfig+0x1bc>)
 800545a:	4313      	orrs	r3, r2
 800545c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800545e:	f000 f889 	bl	8005574 <HAL_RCC_GetSysClockFreq>
 8005462:	4602      	mov	r2, r0
 8005464:	4b0b      	ldr	r3, [pc, #44]	; (8005494 <HAL_RCC_ClockConfig+0x1bc>)
 8005466:	689b      	ldr	r3, [r3, #8]
 8005468:	091b      	lsrs	r3, r3, #4
 800546a:	f003 030f 	and.w	r3, r3, #15
 800546e:	490a      	ldr	r1, [pc, #40]	; (8005498 <HAL_RCC_ClockConfig+0x1c0>)
 8005470:	5ccb      	ldrb	r3, [r1, r3]
 8005472:	fa22 f303 	lsr.w	r3, r2, r3
 8005476:	4a09      	ldr	r2, [pc, #36]	; (800549c <HAL_RCC_ClockConfig+0x1c4>)
 8005478:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800547a:	4b09      	ldr	r3, [pc, #36]	; (80054a0 <HAL_RCC_ClockConfig+0x1c8>)
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	4618      	mov	r0, r3
 8005480:	f7fd f968 	bl	8002754 <HAL_InitTick>

  return HAL_OK;
 8005484:	2300      	movs	r3, #0
}
 8005486:	4618      	mov	r0, r3
 8005488:	3710      	adds	r7, #16
 800548a:	46bd      	mov	sp, r7
 800548c:	bd80      	pop	{r7, pc}
 800548e:	bf00      	nop
 8005490:	40023c00 	.word	0x40023c00
 8005494:	40023800 	.word	0x40023800
 8005498:	0800a0e8 	.word	0x0800a0e8
 800549c:	20000000 	.word	0x20000000
 80054a0:	20000060 	.word	0x20000060

080054a4 <HAL_RCC_MCOConfig>:
  * @note  For STM32F410Rx devices to output I2SCLK clock on MCO2 you should have
  *        at last one of the SPI clocks enabled (SPI1, SPI2 or SPI5).
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 80054a4:	b580      	push	{r7, lr}
 80054a6:	b08c      	sub	sp, #48	; 0x30
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	60f8      	str	r0, [r7, #12]
 80054ac:	60b9      	str	r1, [r7, #8]
 80054ae:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if(RCC_MCOx == RCC_MCO1)
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d129      	bne.n	800550a <HAL_RCC_MCOConfig+0x66>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    __MCO1_CLK_ENABLE();
 80054b6:	2300      	movs	r3, #0
 80054b8:	61bb      	str	r3, [r7, #24]
 80054ba:	4b2b      	ldr	r3, [pc, #172]	; (8005568 <HAL_RCC_MCOConfig+0xc4>)
 80054bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054be:	4a2a      	ldr	r2, [pc, #168]	; (8005568 <HAL_RCC_MCOConfig+0xc4>)
 80054c0:	f043 0301 	orr.w	r3, r3, #1
 80054c4:	6313      	str	r3, [r2, #48]	; 0x30
 80054c6:	4b28      	ldr	r3, [pc, #160]	; (8005568 <HAL_RCC_MCOConfig+0xc4>)
 80054c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054ca:	f003 0301 	and.w	r3, r3, #1
 80054ce:	61bb      	str	r3, [r7, #24]
 80054d0:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 80054d2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80054d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80054d8:	2302      	movs	r3, #2
 80054da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80054dc:	2303      	movs	r3, #3
 80054de:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80054e0:	2300      	movs	r3, #0
 80054e2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80054e4:	2300      	movs	r3, #0
 80054e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 80054e8:	f107 031c 	add.w	r3, r7, #28
 80054ec:	4619      	mov	r1, r3
 80054ee:	481f      	ldr	r0, [pc, #124]	; (800556c <HAL_RCC_MCOConfig+0xc8>)
 80054f0:	f7fd fdf6 	bl	80030e0 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[2:0] bits then Select MCO1 clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 80054f4:	4b1c      	ldr	r3, [pc, #112]	; (8005568 <HAL_RCC_MCOConfig+0xc4>)
 80054f6:	689b      	ldr	r3, [r3, #8]
 80054f8:	f023 62ec 	bic.w	r2, r3, #123731968	; 0x7600000
 80054fc:	68b9      	ldr	r1, [r7, #8]
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	430b      	orrs	r3, r1
 8005502:	4919      	ldr	r1, [pc, #100]	; (8005568 <HAL_RCC_MCOConfig+0xc4>)
 8005504:	4313      	orrs	r3, r2
 8005506:	608b      	str	r3, [r1, #8]
#if defined(RCC_CFGR_MCO2EN)
    __HAL_RCC_MCO2_ENABLE();
#endif /* RCC_CFGR_MCO2EN */
  }
#endif /* RCC_CFGR_MCO2 */
}
 8005508:	e029      	b.n	800555e <HAL_RCC_MCOConfig+0xba>
    __MCO2_CLK_ENABLE();
 800550a:	2300      	movs	r3, #0
 800550c:	617b      	str	r3, [r7, #20]
 800550e:	4b16      	ldr	r3, [pc, #88]	; (8005568 <HAL_RCC_MCOConfig+0xc4>)
 8005510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005512:	4a15      	ldr	r2, [pc, #84]	; (8005568 <HAL_RCC_MCOConfig+0xc4>)
 8005514:	f043 0304 	orr.w	r3, r3, #4
 8005518:	6313      	str	r3, [r2, #48]	; 0x30
 800551a:	4b13      	ldr	r3, [pc, #76]	; (8005568 <HAL_RCC_MCOConfig+0xc4>)
 800551c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800551e:	f003 0304 	and.w	r3, r3, #4
 8005522:	617b      	str	r3, [r7, #20]
 8005524:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 8005526:	f44f 7300 	mov.w	r3, #512	; 0x200
 800552a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800552c:	2302      	movs	r3, #2
 800552e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005530:	2303      	movs	r3, #3
 8005532:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005534:	2300      	movs	r3, #0
 8005536:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8005538:	2300      	movs	r3, #0
 800553a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 800553c:	f107 031c 	add.w	r3, r7, #28
 8005540:	4619      	mov	r1, r3
 8005542:	480b      	ldr	r0, [pc, #44]	; (8005570 <HAL_RCC_MCOConfig+0xcc>)
 8005544:	f7fd fdcc 	bl	80030e0 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3U)));
 8005548:	4b07      	ldr	r3, [pc, #28]	; (8005568 <HAL_RCC_MCOConfig+0xc4>)
 800554a:	689b      	ldr	r3, [r3, #8]
 800554c:	f023 4278 	bic.w	r2, r3, #4160749568	; 0xf8000000
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	00d9      	lsls	r1, r3, #3
 8005554:	68bb      	ldr	r3, [r7, #8]
 8005556:	430b      	orrs	r3, r1
 8005558:	4903      	ldr	r1, [pc, #12]	; (8005568 <HAL_RCC_MCOConfig+0xc4>)
 800555a:	4313      	orrs	r3, r2
 800555c:	608b      	str	r3, [r1, #8]
}
 800555e:	bf00      	nop
 8005560:	3730      	adds	r7, #48	; 0x30
 8005562:	46bd      	mov	sp, r7
 8005564:	bd80      	pop	{r7, pc}
 8005566:	bf00      	nop
 8005568:	40023800 	.word	0x40023800
 800556c:	40020000 	.word	0x40020000
 8005570:	40020800 	.word	0x40020800

08005574 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005574:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005578:	b090      	sub	sp, #64	; 0x40
 800557a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800557c:	2300      	movs	r3, #0
 800557e:	637b      	str	r3, [r7, #52]	; 0x34
 8005580:	2300      	movs	r3, #0
 8005582:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005584:	2300      	movs	r3, #0
 8005586:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8005588:	2300      	movs	r3, #0
 800558a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800558c:	4b59      	ldr	r3, [pc, #356]	; (80056f4 <HAL_RCC_GetSysClockFreq+0x180>)
 800558e:	689b      	ldr	r3, [r3, #8]
 8005590:	f003 030c 	and.w	r3, r3, #12
 8005594:	2b08      	cmp	r3, #8
 8005596:	d00d      	beq.n	80055b4 <HAL_RCC_GetSysClockFreq+0x40>
 8005598:	2b08      	cmp	r3, #8
 800559a:	f200 80a1 	bhi.w	80056e0 <HAL_RCC_GetSysClockFreq+0x16c>
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d002      	beq.n	80055a8 <HAL_RCC_GetSysClockFreq+0x34>
 80055a2:	2b04      	cmp	r3, #4
 80055a4:	d003      	beq.n	80055ae <HAL_RCC_GetSysClockFreq+0x3a>
 80055a6:	e09b      	b.n	80056e0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80055a8:	4b53      	ldr	r3, [pc, #332]	; (80056f8 <HAL_RCC_GetSysClockFreq+0x184>)
 80055aa:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80055ac:	e09b      	b.n	80056e6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80055ae:	4b53      	ldr	r3, [pc, #332]	; (80056fc <HAL_RCC_GetSysClockFreq+0x188>)
 80055b0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80055b2:	e098      	b.n	80056e6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80055b4:	4b4f      	ldr	r3, [pc, #316]	; (80056f4 <HAL_RCC_GetSysClockFreq+0x180>)
 80055b6:	685b      	ldr	r3, [r3, #4]
 80055b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80055bc:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80055be:	4b4d      	ldr	r3, [pc, #308]	; (80056f4 <HAL_RCC_GetSysClockFreq+0x180>)
 80055c0:	685b      	ldr	r3, [r3, #4]
 80055c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d028      	beq.n	800561c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80055ca:	4b4a      	ldr	r3, [pc, #296]	; (80056f4 <HAL_RCC_GetSysClockFreq+0x180>)
 80055cc:	685b      	ldr	r3, [r3, #4]
 80055ce:	099b      	lsrs	r3, r3, #6
 80055d0:	2200      	movs	r2, #0
 80055d2:	623b      	str	r3, [r7, #32]
 80055d4:	627a      	str	r2, [r7, #36]	; 0x24
 80055d6:	6a3b      	ldr	r3, [r7, #32]
 80055d8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80055dc:	2100      	movs	r1, #0
 80055de:	4b47      	ldr	r3, [pc, #284]	; (80056fc <HAL_RCC_GetSysClockFreq+0x188>)
 80055e0:	fb03 f201 	mul.w	r2, r3, r1
 80055e4:	2300      	movs	r3, #0
 80055e6:	fb00 f303 	mul.w	r3, r0, r3
 80055ea:	4413      	add	r3, r2
 80055ec:	4a43      	ldr	r2, [pc, #268]	; (80056fc <HAL_RCC_GetSysClockFreq+0x188>)
 80055ee:	fba0 1202 	umull	r1, r2, r0, r2
 80055f2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80055f4:	460a      	mov	r2, r1
 80055f6:	62ba      	str	r2, [r7, #40]	; 0x28
 80055f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80055fa:	4413      	add	r3, r2
 80055fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80055fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005600:	2200      	movs	r2, #0
 8005602:	61bb      	str	r3, [r7, #24]
 8005604:	61fa      	str	r2, [r7, #28]
 8005606:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800560a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800560e:	f7fa fddb 	bl	80001c8 <__aeabi_uldivmod>
 8005612:	4602      	mov	r2, r0
 8005614:	460b      	mov	r3, r1
 8005616:	4613      	mov	r3, r2
 8005618:	63fb      	str	r3, [r7, #60]	; 0x3c
 800561a:	e053      	b.n	80056c4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800561c:	4b35      	ldr	r3, [pc, #212]	; (80056f4 <HAL_RCC_GetSysClockFreq+0x180>)
 800561e:	685b      	ldr	r3, [r3, #4]
 8005620:	099b      	lsrs	r3, r3, #6
 8005622:	2200      	movs	r2, #0
 8005624:	613b      	str	r3, [r7, #16]
 8005626:	617a      	str	r2, [r7, #20]
 8005628:	693b      	ldr	r3, [r7, #16]
 800562a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800562e:	f04f 0b00 	mov.w	fp, #0
 8005632:	4652      	mov	r2, sl
 8005634:	465b      	mov	r3, fp
 8005636:	f04f 0000 	mov.w	r0, #0
 800563a:	f04f 0100 	mov.w	r1, #0
 800563e:	0159      	lsls	r1, r3, #5
 8005640:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005644:	0150      	lsls	r0, r2, #5
 8005646:	4602      	mov	r2, r0
 8005648:	460b      	mov	r3, r1
 800564a:	ebb2 080a 	subs.w	r8, r2, sl
 800564e:	eb63 090b 	sbc.w	r9, r3, fp
 8005652:	f04f 0200 	mov.w	r2, #0
 8005656:	f04f 0300 	mov.w	r3, #0
 800565a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800565e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8005662:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8005666:	ebb2 0408 	subs.w	r4, r2, r8
 800566a:	eb63 0509 	sbc.w	r5, r3, r9
 800566e:	f04f 0200 	mov.w	r2, #0
 8005672:	f04f 0300 	mov.w	r3, #0
 8005676:	00eb      	lsls	r3, r5, #3
 8005678:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800567c:	00e2      	lsls	r2, r4, #3
 800567e:	4614      	mov	r4, r2
 8005680:	461d      	mov	r5, r3
 8005682:	eb14 030a 	adds.w	r3, r4, sl
 8005686:	603b      	str	r3, [r7, #0]
 8005688:	eb45 030b 	adc.w	r3, r5, fp
 800568c:	607b      	str	r3, [r7, #4]
 800568e:	f04f 0200 	mov.w	r2, #0
 8005692:	f04f 0300 	mov.w	r3, #0
 8005696:	e9d7 4500 	ldrd	r4, r5, [r7]
 800569a:	4629      	mov	r1, r5
 800569c:	028b      	lsls	r3, r1, #10
 800569e:	4621      	mov	r1, r4
 80056a0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80056a4:	4621      	mov	r1, r4
 80056a6:	028a      	lsls	r2, r1, #10
 80056a8:	4610      	mov	r0, r2
 80056aa:	4619      	mov	r1, r3
 80056ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056ae:	2200      	movs	r2, #0
 80056b0:	60bb      	str	r3, [r7, #8]
 80056b2:	60fa      	str	r2, [r7, #12]
 80056b4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80056b8:	f7fa fd86 	bl	80001c8 <__aeabi_uldivmod>
 80056bc:	4602      	mov	r2, r0
 80056be:	460b      	mov	r3, r1
 80056c0:	4613      	mov	r3, r2
 80056c2:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80056c4:	4b0b      	ldr	r3, [pc, #44]	; (80056f4 <HAL_RCC_GetSysClockFreq+0x180>)
 80056c6:	685b      	ldr	r3, [r3, #4]
 80056c8:	0c1b      	lsrs	r3, r3, #16
 80056ca:	f003 0303 	and.w	r3, r3, #3
 80056ce:	3301      	adds	r3, #1
 80056d0:	005b      	lsls	r3, r3, #1
 80056d2:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80056d4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80056d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80056dc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80056de:	e002      	b.n	80056e6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80056e0:	4b05      	ldr	r3, [pc, #20]	; (80056f8 <HAL_RCC_GetSysClockFreq+0x184>)
 80056e2:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80056e4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80056e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80056e8:	4618      	mov	r0, r3
 80056ea:	3740      	adds	r7, #64	; 0x40
 80056ec:	46bd      	mov	sp, r7
 80056ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80056f2:	bf00      	nop
 80056f4:	40023800 	.word	0x40023800
 80056f8:	00f42400 	.word	0x00f42400
 80056fc:	017d7840 	.word	0x017d7840

08005700 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005700:	b480      	push	{r7}
 8005702:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005704:	4b03      	ldr	r3, [pc, #12]	; (8005714 <HAL_RCC_GetHCLKFreq+0x14>)
 8005706:	681b      	ldr	r3, [r3, #0]
}
 8005708:	4618      	mov	r0, r3
 800570a:	46bd      	mov	sp, r7
 800570c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005710:	4770      	bx	lr
 8005712:	bf00      	nop
 8005714:	20000000 	.word	0x20000000

08005718 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005718:	b580      	push	{r7, lr}
 800571a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800571c:	f7ff fff0 	bl	8005700 <HAL_RCC_GetHCLKFreq>
 8005720:	4602      	mov	r2, r0
 8005722:	4b05      	ldr	r3, [pc, #20]	; (8005738 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005724:	689b      	ldr	r3, [r3, #8]
 8005726:	0a9b      	lsrs	r3, r3, #10
 8005728:	f003 0307 	and.w	r3, r3, #7
 800572c:	4903      	ldr	r1, [pc, #12]	; (800573c <HAL_RCC_GetPCLK1Freq+0x24>)
 800572e:	5ccb      	ldrb	r3, [r1, r3]
 8005730:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005734:	4618      	mov	r0, r3
 8005736:	bd80      	pop	{r7, pc}
 8005738:	40023800 	.word	0x40023800
 800573c:	0800a0f8 	.word	0x0800a0f8

08005740 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005740:	b580      	push	{r7, lr}
 8005742:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005744:	f7ff ffdc 	bl	8005700 <HAL_RCC_GetHCLKFreq>
 8005748:	4602      	mov	r2, r0
 800574a:	4b05      	ldr	r3, [pc, #20]	; (8005760 <HAL_RCC_GetPCLK2Freq+0x20>)
 800574c:	689b      	ldr	r3, [r3, #8]
 800574e:	0b5b      	lsrs	r3, r3, #13
 8005750:	f003 0307 	and.w	r3, r3, #7
 8005754:	4903      	ldr	r1, [pc, #12]	; (8005764 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005756:	5ccb      	ldrb	r3, [r1, r3]
 8005758:	fa22 f303 	lsr.w	r3, r2, r3
}
 800575c:	4618      	mov	r0, r3
 800575e:	bd80      	pop	{r7, pc}
 8005760:	40023800 	.word	0x40023800
 8005764:	0800a0f8 	.word	0x0800a0f8

08005768 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 8005768:	b580      	push	{r7, lr}
 800576a:	b084      	sub	sp, #16
 800576c:	af00      	add	r7, sp, #0
 800576e:	60f8      	str	r0, [r7, #12]
 8005770:	60b9      	str	r1, [r7, #8]
 8005772:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	2b00      	cmp	r3, #0
 8005778:	d101      	bne.n	800577e <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 800577a:	2301      	movs	r3, #1
 800577c:	e038      	b.n	80057f0 <HAL_SRAM_Init+0x88>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8005784:	b2db      	uxtb	r3, r3
 8005786:	2b00      	cmp	r3, #0
 8005788:	d106      	bne.n	8005798 <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	2200      	movs	r2, #0
 800578e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8005792:	68f8      	ldr	r0, [r7, #12]
 8005794:	f7fb ff72 	bl	800167c <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	681a      	ldr	r2, [r3, #0]
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	3308      	adds	r3, #8
 80057a0:	4619      	mov	r1, r3
 80057a2:	4610      	mov	r0, r2
 80057a4:	f000 fd80 	bl	80062a8 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	6818      	ldr	r0, [r3, #0]
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	689b      	ldr	r3, [r3, #8]
 80057b0:	461a      	mov	r2, r3
 80057b2:	68b9      	ldr	r1, [r7, #8]
 80057b4:	f000 fde2 	bl	800637c <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	6858      	ldr	r0, [r3, #4]
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	689a      	ldr	r2, [r3, #8]
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057c4:	6879      	ldr	r1, [r7, #4]
 80057c6:	f000 fe0f 	bl	80063e8 <FSMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	68fa      	ldr	r2, [r7, #12]
 80057d0:	6892      	ldr	r2, [r2, #8]
 80057d2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	68fa      	ldr	r2, [r7, #12]
 80057dc:	6892      	ldr	r2, [r2, #8]
 80057de:	f041 0101 	orr.w	r1, r1, #1
 80057e2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	2201      	movs	r2, #1
 80057ea:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

  return HAL_OK;
 80057ee:	2300      	movs	r3, #0
}
 80057f0:	4618      	mov	r0, r3
 80057f2:	3710      	adds	r7, #16
 80057f4:	46bd      	mov	sp, r7
 80057f6:	bd80      	pop	{r7, pc}

080057f8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80057f8:	b580      	push	{r7, lr}
 80057fa:	b086      	sub	sp, #24
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	6078      	str	r0, [r7, #4]
 8005800:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	2b00      	cmp	r3, #0
 8005806:	d101      	bne.n	800580c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005808:	2301      	movs	r3, #1
 800580a:	e097      	b.n	800593c <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005812:	b2db      	uxtb	r3, r3
 8005814:	2b00      	cmp	r3, #0
 8005816:	d106      	bne.n	8005826 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	2200      	movs	r2, #0
 800581c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005820:	6878      	ldr	r0, [r7, #4]
 8005822:	f7fb fe0f 	bl	8001444 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	2202      	movs	r2, #2
 800582a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	689b      	ldr	r3, [r3, #8]
 8005834:	687a      	ldr	r2, [r7, #4]
 8005836:	6812      	ldr	r2, [r2, #0]
 8005838:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800583c:	f023 0307 	bic.w	r3, r3, #7
 8005840:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681a      	ldr	r2, [r3, #0]
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	3304      	adds	r3, #4
 800584a:	4619      	mov	r1, r3
 800584c:	4610      	mov	r0, r2
 800584e:	f000 f927 	bl	8005aa0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	689b      	ldr	r3, [r3, #8]
 8005858:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	699b      	ldr	r3, [r3, #24]
 8005860:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	6a1b      	ldr	r3, [r3, #32]
 8005868:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800586a:	683b      	ldr	r3, [r7, #0]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	697a      	ldr	r2, [r7, #20]
 8005870:	4313      	orrs	r3, r2
 8005872:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005874:	693b      	ldr	r3, [r7, #16]
 8005876:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800587a:	f023 0303 	bic.w	r3, r3, #3
 800587e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005880:	683b      	ldr	r3, [r7, #0]
 8005882:	689a      	ldr	r2, [r3, #8]
 8005884:	683b      	ldr	r3, [r7, #0]
 8005886:	699b      	ldr	r3, [r3, #24]
 8005888:	021b      	lsls	r3, r3, #8
 800588a:	4313      	orrs	r3, r2
 800588c:	693a      	ldr	r2, [r7, #16]
 800588e:	4313      	orrs	r3, r2
 8005890:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005892:	693b      	ldr	r3, [r7, #16]
 8005894:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8005898:	f023 030c 	bic.w	r3, r3, #12
 800589c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800589e:	693b      	ldr	r3, [r7, #16]
 80058a0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80058a4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80058a8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80058aa:	683b      	ldr	r3, [r7, #0]
 80058ac:	68da      	ldr	r2, [r3, #12]
 80058ae:	683b      	ldr	r3, [r7, #0]
 80058b0:	69db      	ldr	r3, [r3, #28]
 80058b2:	021b      	lsls	r3, r3, #8
 80058b4:	4313      	orrs	r3, r2
 80058b6:	693a      	ldr	r2, [r7, #16]
 80058b8:	4313      	orrs	r3, r2
 80058ba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80058bc:	683b      	ldr	r3, [r7, #0]
 80058be:	691b      	ldr	r3, [r3, #16]
 80058c0:	011a      	lsls	r2, r3, #4
 80058c2:	683b      	ldr	r3, [r7, #0]
 80058c4:	6a1b      	ldr	r3, [r3, #32]
 80058c6:	031b      	lsls	r3, r3, #12
 80058c8:	4313      	orrs	r3, r2
 80058ca:	693a      	ldr	r2, [r7, #16]
 80058cc:	4313      	orrs	r3, r2
 80058ce:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80058d6:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80058de:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80058e0:	683b      	ldr	r3, [r7, #0]
 80058e2:	685a      	ldr	r2, [r3, #4]
 80058e4:	683b      	ldr	r3, [r7, #0]
 80058e6:	695b      	ldr	r3, [r3, #20]
 80058e8:	011b      	lsls	r3, r3, #4
 80058ea:	4313      	orrs	r3, r2
 80058ec:	68fa      	ldr	r2, [r7, #12]
 80058ee:	4313      	orrs	r3, r2
 80058f0:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	697a      	ldr	r2, [r7, #20]
 80058f8:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	693a      	ldr	r2, [r7, #16]
 8005900:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	68fa      	ldr	r2, [r7, #12]
 8005908:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	2201      	movs	r2, #1
 800590e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	2201      	movs	r2, #1
 8005916:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	2201      	movs	r2, #1
 800591e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	2201      	movs	r2, #1
 8005926:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	2201      	movs	r2, #1
 800592e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	2201      	movs	r2, #1
 8005936:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800593a:	2300      	movs	r3, #0
}
 800593c:	4618      	mov	r0, r3
 800593e:	3718      	adds	r7, #24
 8005940:	46bd      	mov	sp, r7
 8005942:	bd80      	pop	{r7, pc}

08005944 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005944:	b580      	push	{r7, lr}
 8005946:	b084      	sub	sp, #16
 8005948:	af00      	add	r7, sp, #0
 800594a:	6078      	str	r0, [r7, #4]
 800594c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005954:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800595c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005964:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800596c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800596e:	683b      	ldr	r3, [r7, #0]
 8005970:	2b00      	cmp	r3, #0
 8005972:	d110      	bne.n	8005996 <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005974:	7bfb      	ldrb	r3, [r7, #15]
 8005976:	2b01      	cmp	r3, #1
 8005978:	d102      	bne.n	8005980 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800597a:	7b7b      	ldrb	r3, [r7, #13]
 800597c:	2b01      	cmp	r3, #1
 800597e:	d001      	beq.n	8005984 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 8005980:	2301      	movs	r3, #1
 8005982:	e089      	b.n	8005a98 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2202      	movs	r2, #2
 8005988:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2202      	movs	r2, #2
 8005990:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005994:	e031      	b.n	80059fa <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8005996:	683b      	ldr	r3, [r7, #0]
 8005998:	2b04      	cmp	r3, #4
 800599a:	d110      	bne.n	80059be <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800599c:	7bbb      	ldrb	r3, [r7, #14]
 800599e:	2b01      	cmp	r3, #1
 80059a0:	d102      	bne.n	80059a8 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80059a2:	7b3b      	ldrb	r3, [r7, #12]
 80059a4:	2b01      	cmp	r3, #1
 80059a6:	d001      	beq.n	80059ac <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 80059a8:	2301      	movs	r3, #1
 80059aa:	e075      	b.n	8005a98 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	2202      	movs	r2, #2
 80059b0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	2202      	movs	r2, #2
 80059b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80059bc:	e01d      	b.n	80059fa <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80059be:	7bfb      	ldrb	r3, [r7, #15]
 80059c0:	2b01      	cmp	r3, #1
 80059c2:	d108      	bne.n	80059d6 <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80059c4:	7bbb      	ldrb	r3, [r7, #14]
 80059c6:	2b01      	cmp	r3, #1
 80059c8:	d105      	bne.n	80059d6 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80059ca:	7b7b      	ldrb	r3, [r7, #13]
 80059cc:	2b01      	cmp	r3, #1
 80059ce:	d102      	bne.n	80059d6 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80059d0:	7b3b      	ldrb	r3, [r7, #12]
 80059d2:	2b01      	cmp	r3, #1
 80059d4:	d001      	beq.n	80059da <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 80059d6:	2301      	movs	r3, #1
 80059d8:	e05e      	b.n	8005a98 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	2202      	movs	r2, #2
 80059de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	2202      	movs	r2, #2
 80059e6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	2202      	movs	r2, #2
 80059ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	2202      	movs	r2, #2
 80059f6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 80059fa:	683b      	ldr	r3, [r7, #0]
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d003      	beq.n	8005a08 <HAL_TIM_Encoder_Start_IT+0xc4>
 8005a00:	683b      	ldr	r3, [r7, #0]
 8005a02:	2b04      	cmp	r3, #4
 8005a04:	d010      	beq.n	8005a28 <HAL_TIM_Encoder_Start_IT+0xe4>
 8005a06:	e01f      	b.n	8005a48 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	2201      	movs	r2, #1
 8005a0e:	2100      	movs	r1, #0
 8005a10:	4618      	mov	r0, r3
 8005a12:	f000 f8e5 	bl	8005be0 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	68da      	ldr	r2, [r3, #12]
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	f042 0202 	orr.w	r2, r2, #2
 8005a24:	60da      	str	r2, [r3, #12]
      break;
 8005a26:	e02e      	b.n	8005a86 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	2201      	movs	r2, #1
 8005a2e:	2104      	movs	r1, #4
 8005a30:	4618      	mov	r0, r3
 8005a32:	f000 f8d5 	bl	8005be0 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	68da      	ldr	r2, [r3, #12]
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	f042 0204 	orr.w	r2, r2, #4
 8005a44:	60da      	str	r2, [r3, #12]
      break;
 8005a46:	e01e      	b.n	8005a86 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	2201      	movs	r2, #1
 8005a4e:	2100      	movs	r1, #0
 8005a50:	4618      	mov	r0, r3
 8005a52:	f000 f8c5 	bl	8005be0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	2201      	movs	r2, #1
 8005a5c:	2104      	movs	r1, #4
 8005a5e:	4618      	mov	r0, r3
 8005a60:	f000 f8be 	bl	8005be0 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	68da      	ldr	r2, [r3, #12]
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	f042 0202 	orr.w	r2, r2, #2
 8005a72:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	68da      	ldr	r2, [r3, #12]
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	f042 0204 	orr.w	r2, r2, #4
 8005a82:	60da      	str	r2, [r3, #12]
      break;
 8005a84:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	681a      	ldr	r2, [r3, #0]
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	f042 0201 	orr.w	r2, r2, #1
 8005a94:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005a96:	2300      	movs	r3, #0
}
 8005a98:	4618      	mov	r0, r3
 8005a9a:	3710      	adds	r7, #16
 8005a9c:	46bd      	mov	sp, r7
 8005a9e:	bd80      	pop	{r7, pc}

08005aa0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005aa0:	b480      	push	{r7}
 8005aa2:	b085      	sub	sp, #20
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	6078      	str	r0, [r7, #4]
 8005aa8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	4a40      	ldr	r2, [pc, #256]	; (8005bb4 <TIM_Base_SetConfig+0x114>)
 8005ab4:	4293      	cmp	r3, r2
 8005ab6:	d013      	beq.n	8005ae0 <TIM_Base_SetConfig+0x40>
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005abe:	d00f      	beq.n	8005ae0 <TIM_Base_SetConfig+0x40>
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	4a3d      	ldr	r2, [pc, #244]	; (8005bb8 <TIM_Base_SetConfig+0x118>)
 8005ac4:	4293      	cmp	r3, r2
 8005ac6:	d00b      	beq.n	8005ae0 <TIM_Base_SetConfig+0x40>
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	4a3c      	ldr	r2, [pc, #240]	; (8005bbc <TIM_Base_SetConfig+0x11c>)
 8005acc:	4293      	cmp	r3, r2
 8005ace:	d007      	beq.n	8005ae0 <TIM_Base_SetConfig+0x40>
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	4a3b      	ldr	r2, [pc, #236]	; (8005bc0 <TIM_Base_SetConfig+0x120>)
 8005ad4:	4293      	cmp	r3, r2
 8005ad6:	d003      	beq.n	8005ae0 <TIM_Base_SetConfig+0x40>
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	4a3a      	ldr	r2, [pc, #232]	; (8005bc4 <TIM_Base_SetConfig+0x124>)
 8005adc:	4293      	cmp	r3, r2
 8005ade:	d108      	bne.n	8005af2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ae6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005ae8:	683b      	ldr	r3, [r7, #0]
 8005aea:	685b      	ldr	r3, [r3, #4]
 8005aec:	68fa      	ldr	r2, [r7, #12]
 8005aee:	4313      	orrs	r3, r2
 8005af0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	4a2f      	ldr	r2, [pc, #188]	; (8005bb4 <TIM_Base_SetConfig+0x114>)
 8005af6:	4293      	cmp	r3, r2
 8005af8:	d02b      	beq.n	8005b52 <TIM_Base_SetConfig+0xb2>
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b00:	d027      	beq.n	8005b52 <TIM_Base_SetConfig+0xb2>
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	4a2c      	ldr	r2, [pc, #176]	; (8005bb8 <TIM_Base_SetConfig+0x118>)
 8005b06:	4293      	cmp	r3, r2
 8005b08:	d023      	beq.n	8005b52 <TIM_Base_SetConfig+0xb2>
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	4a2b      	ldr	r2, [pc, #172]	; (8005bbc <TIM_Base_SetConfig+0x11c>)
 8005b0e:	4293      	cmp	r3, r2
 8005b10:	d01f      	beq.n	8005b52 <TIM_Base_SetConfig+0xb2>
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	4a2a      	ldr	r2, [pc, #168]	; (8005bc0 <TIM_Base_SetConfig+0x120>)
 8005b16:	4293      	cmp	r3, r2
 8005b18:	d01b      	beq.n	8005b52 <TIM_Base_SetConfig+0xb2>
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	4a29      	ldr	r2, [pc, #164]	; (8005bc4 <TIM_Base_SetConfig+0x124>)
 8005b1e:	4293      	cmp	r3, r2
 8005b20:	d017      	beq.n	8005b52 <TIM_Base_SetConfig+0xb2>
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	4a28      	ldr	r2, [pc, #160]	; (8005bc8 <TIM_Base_SetConfig+0x128>)
 8005b26:	4293      	cmp	r3, r2
 8005b28:	d013      	beq.n	8005b52 <TIM_Base_SetConfig+0xb2>
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	4a27      	ldr	r2, [pc, #156]	; (8005bcc <TIM_Base_SetConfig+0x12c>)
 8005b2e:	4293      	cmp	r3, r2
 8005b30:	d00f      	beq.n	8005b52 <TIM_Base_SetConfig+0xb2>
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	4a26      	ldr	r2, [pc, #152]	; (8005bd0 <TIM_Base_SetConfig+0x130>)
 8005b36:	4293      	cmp	r3, r2
 8005b38:	d00b      	beq.n	8005b52 <TIM_Base_SetConfig+0xb2>
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	4a25      	ldr	r2, [pc, #148]	; (8005bd4 <TIM_Base_SetConfig+0x134>)
 8005b3e:	4293      	cmp	r3, r2
 8005b40:	d007      	beq.n	8005b52 <TIM_Base_SetConfig+0xb2>
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	4a24      	ldr	r2, [pc, #144]	; (8005bd8 <TIM_Base_SetConfig+0x138>)
 8005b46:	4293      	cmp	r3, r2
 8005b48:	d003      	beq.n	8005b52 <TIM_Base_SetConfig+0xb2>
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	4a23      	ldr	r2, [pc, #140]	; (8005bdc <TIM_Base_SetConfig+0x13c>)
 8005b4e:	4293      	cmp	r3, r2
 8005b50:	d108      	bne.n	8005b64 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b58:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005b5a:	683b      	ldr	r3, [r7, #0]
 8005b5c:	68db      	ldr	r3, [r3, #12]
 8005b5e:	68fa      	ldr	r2, [r7, #12]
 8005b60:	4313      	orrs	r3, r2
 8005b62:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005b6a:	683b      	ldr	r3, [r7, #0]
 8005b6c:	695b      	ldr	r3, [r3, #20]
 8005b6e:	4313      	orrs	r3, r2
 8005b70:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	68fa      	ldr	r2, [r7, #12]
 8005b76:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005b78:	683b      	ldr	r3, [r7, #0]
 8005b7a:	689a      	ldr	r2, [r3, #8]
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005b80:	683b      	ldr	r3, [r7, #0]
 8005b82:	681a      	ldr	r2, [r3, #0]
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	4a0a      	ldr	r2, [pc, #40]	; (8005bb4 <TIM_Base_SetConfig+0x114>)
 8005b8c:	4293      	cmp	r3, r2
 8005b8e:	d003      	beq.n	8005b98 <TIM_Base_SetConfig+0xf8>
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	4a0c      	ldr	r2, [pc, #48]	; (8005bc4 <TIM_Base_SetConfig+0x124>)
 8005b94:	4293      	cmp	r3, r2
 8005b96:	d103      	bne.n	8005ba0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005b98:	683b      	ldr	r3, [r7, #0]
 8005b9a:	691a      	ldr	r2, [r3, #16]
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	2201      	movs	r2, #1
 8005ba4:	615a      	str	r2, [r3, #20]
}
 8005ba6:	bf00      	nop
 8005ba8:	3714      	adds	r7, #20
 8005baa:	46bd      	mov	sp, r7
 8005bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb0:	4770      	bx	lr
 8005bb2:	bf00      	nop
 8005bb4:	40010000 	.word	0x40010000
 8005bb8:	40000400 	.word	0x40000400
 8005bbc:	40000800 	.word	0x40000800
 8005bc0:	40000c00 	.word	0x40000c00
 8005bc4:	40010400 	.word	0x40010400
 8005bc8:	40014000 	.word	0x40014000
 8005bcc:	40014400 	.word	0x40014400
 8005bd0:	40014800 	.word	0x40014800
 8005bd4:	40001800 	.word	0x40001800
 8005bd8:	40001c00 	.word	0x40001c00
 8005bdc:	40002000 	.word	0x40002000

08005be0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005be0:	b480      	push	{r7}
 8005be2:	b087      	sub	sp, #28
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	60f8      	str	r0, [r7, #12]
 8005be8:	60b9      	str	r1, [r7, #8]
 8005bea:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005bec:	68bb      	ldr	r3, [r7, #8]
 8005bee:	f003 031f 	and.w	r3, r3, #31
 8005bf2:	2201      	movs	r2, #1
 8005bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8005bf8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	6a1a      	ldr	r2, [r3, #32]
 8005bfe:	697b      	ldr	r3, [r7, #20]
 8005c00:	43db      	mvns	r3, r3
 8005c02:	401a      	ands	r2, r3
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	6a1a      	ldr	r2, [r3, #32]
 8005c0c:	68bb      	ldr	r3, [r7, #8]
 8005c0e:	f003 031f 	and.w	r3, r3, #31
 8005c12:	6879      	ldr	r1, [r7, #4]
 8005c14:	fa01 f303 	lsl.w	r3, r1, r3
 8005c18:	431a      	orrs	r2, r3
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	621a      	str	r2, [r3, #32]
}
 8005c1e:	bf00      	nop
 8005c20:	371c      	adds	r7, #28
 8005c22:	46bd      	mov	sp, r7
 8005c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c28:	4770      	bx	lr
	...

08005c2c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005c2c:	b480      	push	{r7}
 8005c2e:	b085      	sub	sp, #20
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	6078      	str	r0, [r7, #4]
 8005c34:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c3c:	2b01      	cmp	r3, #1
 8005c3e:	d101      	bne.n	8005c44 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005c40:	2302      	movs	r3, #2
 8005c42:	e05a      	b.n	8005cfa <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	2201      	movs	r2, #1
 8005c48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	2202      	movs	r2, #2
 8005c50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	685b      	ldr	r3, [r3, #4]
 8005c5a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	689b      	ldr	r3, [r3, #8]
 8005c62:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c6a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005c6c:	683b      	ldr	r3, [r7, #0]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	68fa      	ldr	r2, [r7, #12]
 8005c72:	4313      	orrs	r3, r2
 8005c74:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	68fa      	ldr	r2, [r7, #12]
 8005c7c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	4a21      	ldr	r2, [pc, #132]	; (8005d08 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005c84:	4293      	cmp	r3, r2
 8005c86:	d022      	beq.n	8005cce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c90:	d01d      	beq.n	8005cce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	4a1d      	ldr	r2, [pc, #116]	; (8005d0c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005c98:	4293      	cmp	r3, r2
 8005c9a:	d018      	beq.n	8005cce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	4a1b      	ldr	r2, [pc, #108]	; (8005d10 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005ca2:	4293      	cmp	r3, r2
 8005ca4:	d013      	beq.n	8005cce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	4a1a      	ldr	r2, [pc, #104]	; (8005d14 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005cac:	4293      	cmp	r3, r2
 8005cae:	d00e      	beq.n	8005cce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	4a18      	ldr	r2, [pc, #96]	; (8005d18 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005cb6:	4293      	cmp	r3, r2
 8005cb8:	d009      	beq.n	8005cce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	4a17      	ldr	r2, [pc, #92]	; (8005d1c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005cc0:	4293      	cmp	r3, r2
 8005cc2:	d004      	beq.n	8005cce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	4a15      	ldr	r2, [pc, #84]	; (8005d20 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005cca:	4293      	cmp	r3, r2
 8005ccc:	d10c      	bne.n	8005ce8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005cce:	68bb      	ldr	r3, [r7, #8]
 8005cd0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005cd4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005cd6:	683b      	ldr	r3, [r7, #0]
 8005cd8:	685b      	ldr	r3, [r3, #4]
 8005cda:	68ba      	ldr	r2, [r7, #8]
 8005cdc:	4313      	orrs	r3, r2
 8005cde:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	68ba      	ldr	r2, [r7, #8]
 8005ce6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	2201      	movs	r2, #1
 8005cec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	2200      	movs	r2, #0
 8005cf4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005cf8:	2300      	movs	r3, #0
}
 8005cfa:	4618      	mov	r0, r3
 8005cfc:	3714      	adds	r7, #20
 8005cfe:	46bd      	mov	sp, r7
 8005d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d04:	4770      	bx	lr
 8005d06:	bf00      	nop
 8005d08:	40010000 	.word	0x40010000
 8005d0c:	40000400 	.word	0x40000400
 8005d10:	40000800 	.word	0x40000800
 8005d14:	40000c00 	.word	0x40000c00
 8005d18:	40010400 	.word	0x40010400
 8005d1c:	40014000 	.word	0x40014000
 8005d20:	40001800 	.word	0x40001800

08005d24 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005d24:	b580      	push	{r7, lr}
 8005d26:	b082      	sub	sp, #8
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d101      	bne.n	8005d36 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005d32:	2301      	movs	r3, #1
 8005d34:	e03f      	b.n	8005db6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d3c:	b2db      	uxtb	r3, r3
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d106      	bne.n	8005d50 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	2200      	movs	r2, #0
 8005d46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005d4a:	6878      	ldr	r0, [r7, #4]
 8005d4c:	f7fb fbc2 	bl	80014d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	2224      	movs	r2, #36	; 0x24
 8005d54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	68da      	ldr	r2, [r3, #12]
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005d66:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005d68:	6878      	ldr	r0, [r7, #4]
 8005d6a:	f000 f829 	bl	8005dc0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	691a      	ldr	r2, [r3, #16]
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005d7c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	695a      	ldr	r2, [r3, #20]
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005d8c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	68da      	ldr	r2, [r3, #12]
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005d9c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	2200      	movs	r2, #0
 8005da2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	2220      	movs	r2, #32
 8005da8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	2220      	movs	r2, #32
 8005db0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005db4:	2300      	movs	r3, #0
}
 8005db6:	4618      	mov	r0, r3
 8005db8:	3708      	adds	r7, #8
 8005dba:	46bd      	mov	sp, r7
 8005dbc:	bd80      	pop	{r7, pc}
	...

08005dc0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005dc0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005dc4:	b0c0      	sub	sp, #256	; 0x100
 8005dc6:	af00      	add	r7, sp, #0
 8005dc8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005dcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	691b      	ldr	r3, [r3, #16]
 8005dd4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005dd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ddc:	68d9      	ldr	r1, [r3, #12]
 8005dde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005de2:	681a      	ldr	r2, [r3, #0]
 8005de4:	ea40 0301 	orr.w	r3, r0, r1
 8005de8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005dea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005dee:	689a      	ldr	r2, [r3, #8]
 8005df0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005df4:	691b      	ldr	r3, [r3, #16]
 8005df6:	431a      	orrs	r2, r3
 8005df8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005dfc:	695b      	ldr	r3, [r3, #20]
 8005dfe:	431a      	orrs	r2, r3
 8005e00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e04:	69db      	ldr	r3, [r3, #28]
 8005e06:	4313      	orrs	r3, r2
 8005e08:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005e0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	68db      	ldr	r3, [r3, #12]
 8005e14:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005e18:	f021 010c 	bic.w	r1, r1, #12
 8005e1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e20:	681a      	ldr	r2, [r3, #0]
 8005e22:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005e26:	430b      	orrs	r3, r1
 8005e28:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005e2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	695b      	ldr	r3, [r3, #20]
 8005e32:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005e36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e3a:	6999      	ldr	r1, [r3, #24]
 8005e3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e40:	681a      	ldr	r2, [r3, #0]
 8005e42:	ea40 0301 	orr.w	r3, r0, r1
 8005e46:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005e48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e4c:	681a      	ldr	r2, [r3, #0]
 8005e4e:	4b8f      	ldr	r3, [pc, #572]	; (800608c <UART_SetConfig+0x2cc>)
 8005e50:	429a      	cmp	r2, r3
 8005e52:	d005      	beq.n	8005e60 <UART_SetConfig+0xa0>
 8005e54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e58:	681a      	ldr	r2, [r3, #0]
 8005e5a:	4b8d      	ldr	r3, [pc, #564]	; (8006090 <UART_SetConfig+0x2d0>)
 8005e5c:	429a      	cmp	r2, r3
 8005e5e:	d104      	bne.n	8005e6a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005e60:	f7ff fc6e 	bl	8005740 <HAL_RCC_GetPCLK2Freq>
 8005e64:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005e68:	e003      	b.n	8005e72 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005e6a:	f7ff fc55 	bl	8005718 <HAL_RCC_GetPCLK1Freq>
 8005e6e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005e72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e76:	69db      	ldr	r3, [r3, #28]
 8005e78:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005e7c:	f040 810c 	bne.w	8006098 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005e80:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005e84:	2200      	movs	r2, #0
 8005e86:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005e8a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005e8e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005e92:	4622      	mov	r2, r4
 8005e94:	462b      	mov	r3, r5
 8005e96:	1891      	adds	r1, r2, r2
 8005e98:	65b9      	str	r1, [r7, #88]	; 0x58
 8005e9a:	415b      	adcs	r3, r3
 8005e9c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005e9e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005ea2:	4621      	mov	r1, r4
 8005ea4:	eb12 0801 	adds.w	r8, r2, r1
 8005ea8:	4629      	mov	r1, r5
 8005eaa:	eb43 0901 	adc.w	r9, r3, r1
 8005eae:	f04f 0200 	mov.w	r2, #0
 8005eb2:	f04f 0300 	mov.w	r3, #0
 8005eb6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005eba:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005ebe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005ec2:	4690      	mov	r8, r2
 8005ec4:	4699      	mov	r9, r3
 8005ec6:	4623      	mov	r3, r4
 8005ec8:	eb18 0303 	adds.w	r3, r8, r3
 8005ecc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005ed0:	462b      	mov	r3, r5
 8005ed2:	eb49 0303 	adc.w	r3, r9, r3
 8005ed6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005eda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ede:	685b      	ldr	r3, [r3, #4]
 8005ee0:	2200      	movs	r2, #0
 8005ee2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005ee6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005eea:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005eee:	460b      	mov	r3, r1
 8005ef0:	18db      	adds	r3, r3, r3
 8005ef2:	653b      	str	r3, [r7, #80]	; 0x50
 8005ef4:	4613      	mov	r3, r2
 8005ef6:	eb42 0303 	adc.w	r3, r2, r3
 8005efa:	657b      	str	r3, [r7, #84]	; 0x54
 8005efc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005f00:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005f04:	f7fa f960 	bl	80001c8 <__aeabi_uldivmod>
 8005f08:	4602      	mov	r2, r0
 8005f0a:	460b      	mov	r3, r1
 8005f0c:	4b61      	ldr	r3, [pc, #388]	; (8006094 <UART_SetConfig+0x2d4>)
 8005f0e:	fba3 2302 	umull	r2, r3, r3, r2
 8005f12:	095b      	lsrs	r3, r3, #5
 8005f14:	011c      	lsls	r4, r3, #4
 8005f16:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005f1a:	2200      	movs	r2, #0
 8005f1c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005f20:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005f24:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005f28:	4642      	mov	r2, r8
 8005f2a:	464b      	mov	r3, r9
 8005f2c:	1891      	adds	r1, r2, r2
 8005f2e:	64b9      	str	r1, [r7, #72]	; 0x48
 8005f30:	415b      	adcs	r3, r3
 8005f32:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005f34:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005f38:	4641      	mov	r1, r8
 8005f3a:	eb12 0a01 	adds.w	sl, r2, r1
 8005f3e:	4649      	mov	r1, r9
 8005f40:	eb43 0b01 	adc.w	fp, r3, r1
 8005f44:	f04f 0200 	mov.w	r2, #0
 8005f48:	f04f 0300 	mov.w	r3, #0
 8005f4c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005f50:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005f54:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005f58:	4692      	mov	sl, r2
 8005f5a:	469b      	mov	fp, r3
 8005f5c:	4643      	mov	r3, r8
 8005f5e:	eb1a 0303 	adds.w	r3, sl, r3
 8005f62:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005f66:	464b      	mov	r3, r9
 8005f68:	eb4b 0303 	adc.w	r3, fp, r3
 8005f6c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005f70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f74:	685b      	ldr	r3, [r3, #4]
 8005f76:	2200      	movs	r2, #0
 8005f78:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005f7c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005f80:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005f84:	460b      	mov	r3, r1
 8005f86:	18db      	adds	r3, r3, r3
 8005f88:	643b      	str	r3, [r7, #64]	; 0x40
 8005f8a:	4613      	mov	r3, r2
 8005f8c:	eb42 0303 	adc.w	r3, r2, r3
 8005f90:	647b      	str	r3, [r7, #68]	; 0x44
 8005f92:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005f96:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005f9a:	f7fa f915 	bl	80001c8 <__aeabi_uldivmod>
 8005f9e:	4602      	mov	r2, r0
 8005fa0:	460b      	mov	r3, r1
 8005fa2:	4611      	mov	r1, r2
 8005fa4:	4b3b      	ldr	r3, [pc, #236]	; (8006094 <UART_SetConfig+0x2d4>)
 8005fa6:	fba3 2301 	umull	r2, r3, r3, r1
 8005faa:	095b      	lsrs	r3, r3, #5
 8005fac:	2264      	movs	r2, #100	; 0x64
 8005fae:	fb02 f303 	mul.w	r3, r2, r3
 8005fb2:	1acb      	subs	r3, r1, r3
 8005fb4:	00db      	lsls	r3, r3, #3
 8005fb6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005fba:	4b36      	ldr	r3, [pc, #216]	; (8006094 <UART_SetConfig+0x2d4>)
 8005fbc:	fba3 2302 	umull	r2, r3, r3, r2
 8005fc0:	095b      	lsrs	r3, r3, #5
 8005fc2:	005b      	lsls	r3, r3, #1
 8005fc4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005fc8:	441c      	add	r4, r3
 8005fca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005fce:	2200      	movs	r2, #0
 8005fd0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005fd4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005fd8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005fdc:	4642      	mov	r2, r8
 8005fde:	464b      	mov	r3, r9
 8005fe0:	1891      	adds	r1, r2, r2
 8005fe2:	63b9      	str	r1, [r7, #56]	; 0x38
 8005fe4:	415b      	adcs	r3, r3
 8005fe6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005fe8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005fec:	4641      	mov	r1, r8
 8005fee:	1851      	adds	r1, r2, r1
 8005ff0:	6339      	str	r1, [r7, #48]	; 0x30
 8005ff2:	4649      	mov	r1, r9
 8005ff4:	414b      	adcs	r3, r1
 8005ff6:	637b      	str	r3, [r7, #52]	; 0x34
 8005ff8:	f04f 0200 	mov.w	r2, #0
 8005ffc:	f04f 0300 	mov.w	r3, #0
 8006000:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006004:	4659      	mov	r1, fp
 8006006:	00cb      	lsls	r3, r1, #3
 8006008:	4651      	mov	r1, sl
 800600a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800600e:	4651      	mov	r1, sl
 8006010:	00ca      	lsls	r2, r1, #3
 8006012:	4610      	mov	r0, r2
 8006014:	4619      	mov	r1, r3
 8006016:	4603      	mov	r3, r0
 8006018:	4642      	mov	r2, r8
 800601a:	189b      	adds	r3, r3, r2
 800601c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006020:	464b      	mov	r3, r9
 8006022:	460a      	mov	r2, r1
 8006024:	eb42 0303 	adc.w	r3, r2, r3
 8006028:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800602c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006030:	685b      	ldr	r3, [r3, #4]
 8006032:	2200      	movs	r2, #0
 8006034:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006038:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800603c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006040:	460b      	mov	r3, r1
 8006042:	18db      	adds	r3, r3, r3
 8006044:	62bb      	str	r3, [r7, #40]	; 0x28
 8006046:	4613      	mov	r3, r2
 8006048:	eb42 0303 	adc.w	r3, r2, r3
 800604c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800604e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006052:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006056:	f7fa f8b7 	bl	80001c8 <__aeabi_uldivmod>
 800605a:	4602      	mov	r2, r0
 800605c:	460b      	mov	r3, r1
 800605e:	4b0d      	ldr	r3, [pc, #52]	; (8006094 <UART_SetConfig+0x2d4>)
 8006060:	fba3 1302 	umull	r1, r3, r3, r2
 8006064:	095b      	lsrs	r3, r3, #5
 8006066:	2164      	movs	r1, #100	; 0x64
 8006068:	fb01 f303 	mul.w	r3, r1, r3
 800606c:	1ad3      	subs	r3, r2, r3
 800606e:	00db      	lsls	r3, r3, #3
 8006070:	3332      	adds	r3, #50	; 0x32
 8006072:	4a08      	ldr	r2, [pc, #32]	; (8006094 <UART_SetConfig+0x2d4>)
 8006074:	fba2 2303 	umull	r2, r3, r2, r3
 8006078:	095b      	lsrs	r3, r3, #5
 800607a:	f003 0207 	and.w	r2, r3, #7
 800607e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	4422      	add	r2, r4
 8006086:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006088:	e105      	b.n	8006296 <UART_SetConfig+0x4d6>
 800608a:	bf00      	nop
 800608c:	40011000 	.word	0x40011000
 8006090:	40011400 	.word	0x40011400
 8006094:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006098:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800609c:	2200      	movs	r2, #0
 800609e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80060a2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80060a6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80060aa:	4642      	mov	r2, r8
 80060ac:	464b      	mov	r3, r9
 80060ae:	1891      	adds	r1, r2, r2
 80060b0:	6239      	str	r1, [r7, #32]
 80060b2:	415b      	adcs	r3, r3
 80060b4:	627b      	str	r3, [r7, #36]	; 0x24
 80060b6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80060ba:	4641      	mov	r1, r8
 80060bc:	1854      	adds	r4, r2, r1
 80060be:	4649      	mov	r1, r9
 80060c0:	eb43 0501 	adc.w	r5, r3, r1
 80060c4:	f04f 0200 	mov.w	r2, #0
 80060c8:	f04f 0300 	mov.w	r3, #0
 80060cc:	00eb      	lsls	r3, r5, #3
 80060ce:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80060d2:	00e2      	lsls	r2, r4, #3
 80060d4:	4614      	mov	r4, r2
 80060d6:	461d      	mov	r5, r3
 80060d8:	4643      	mov	r3, r8
 80060da:	18e3      	adds	r3, r4, r3
 80060dc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80060e0:	464b      	mov	r3, r9
 80060e2:	eb45 0303 	adc.w	r3, r5, r3
 80060e6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80060ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060ee:	685b      	ldr	r3, [r3, #4]
 80060f0:	2200      	movs	r2, #0
 80060f2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80060f6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80060fa:	f04f 0200 	mov.w	r2, #0
 80060fe:	f04f 0300 	mov.w	r3, #0
 8006102:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006106:	4629      	mov	r1, r5
 8006108:	008b      	lsls	r3, r1, #2
 800610a:	4621      	mov	r1, r4
 800610c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006110:	4621      	mov	r1, r4
 8006112:	008a      	lsls	r2, r1, #2
 8006114:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006118:	f7fa f856 	bl	80001c8 <__aeabi_uldivmod>
 800611c:	4602      	mov	r2, r0
 800611e:	460b      	mov	r3, r1
 8006120:	4b60      	ldr	r3, [pc, #384]	; (80062a4 <UART_SetConfig+0x4e4>)
 8006122:	fba3 2302 	umull	r2, r3, r3, r2
 8006126:	095b      	lsrs	r3, r3, #5
 8006128:	011c      	lsls	r4, r3, #4
 800612a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800612e:	2200      	movs	r2, #0
 8006130:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006134:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006138:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800613c:	4642      	mov	r2, r8
 800613e:	464b      	mov	r3, r9
 8006140:	1891      	adds	r1, r2, r2
 8006142:	61b9      	str	r1, [r7, #24]
 8006144:	415b      	adcs	r3, r3
 8006146:	61fb      	str	r3, [r7, #28]
 8006148:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800614c:	4641      	mov	r1, r8
 800614e:	1851      	adds	r1, r2, r1
 8006150:	6139      	str	r1, [r7, #16]
 8006152:	4649      	mov	r1, r9
 8006154:	414b      	adcs	r3, r1
 8006156:	617b      	str	r3, [r7, #20]
 8006158:	f04f 0200 	mov.w	r2, #0
 800615c:	f04f 0300 	mov.w	r3, #0
 8006160:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006164:	4659      	mov	r1, fp
 8006166:	00cb      	lsls	r3, r1, #3
 8006168:	4651      	mov	r1, sl
 800616a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800616e:	4651      	mov	r1, sl
 8006170:	00ca      	lsls	r2, r1, #3
 8006172:	4610      	mov	r0, r2
 8006174:	4619      	mov	r1, r3
 8006176:	4603      	mov	r3, r0
 8006178:	4642      	mov	r2, r8
 800617a:	189b      	adds	r3, r3, r2
 800617c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006180:	464b      	mov	r3, r9
 8006182:	460a      	mov	r2, r1
 8006184:	eb42 0303 	adc.w	r3, r2, r3
 8006188:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800618c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006190:	685b      	ldr	r3, [r3, #4]
 8006192:	2200      	movs	r2, #0
 8006194:	67bb      	str	r3, [r7, #120]	; 0x78
 8006196:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006198:	f04f 0200 	mov.w	r2, #0
 800619c:	f04f 0300 	mov.w	r3, #0
 80061a0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80061a4:	4649      	mov	r1, r9
 80061a6:	008b      	lsls	r3, r1, #2
 80061a8:	4641      	mov	r1, r8
 80061aa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80061ae:	4641      	mov	r1, r8
 80061b0:	008a      	lsls	r2, r1, #2
 80061b2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80061b6:	f7fa f807 	bl	80001c8 <__aeabi_uldivmod>
 80061ba:	4602      	mov	r2, r0
 80061bc:	460b      	mov	r3, r1
 80061be:	4b39      	ldr	r3, [pc, #228]	; (80062a4 <UART_SetConfig+0x4e4>)
 80061c0:	fba3 1302 	umull	r1, r3, r3, r2
 80061c4:	095b      	lsrs	r3, r3, #5
 80061c6:	2164      	movs	r1, #100	; 0x64
 80061c8:	fb01 f303 	mul.w	r3, r1, r3
 80061cc:	1ad3      	subs	r3, r2, r3
 80061ce:	011b      	lsls	r3, r3, #4
 80061d0:	3332      	adds	r3, #50	; 0x32
 80061d2:	4a34      	ldr	r2, [pc, #208]	; (80062a4 <UART_SetConfig+0x4e4>)
 80061d4:	fba2 2303 	umull	r2, r3, r2, r3
 80061d8:	095b      	lsrs	r3, r3, #5
 80061da:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80061de:	441c      	add	r4, r3
 80061e0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80061e4:	2200      	movs	r2, #0
 80061e6:	673b      	str	r3, [r7, #112]	; 0x70
 80061e8:	677a      	str	r2, [r7, #116]	; 0x74
 80061ea:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80061ee:	4642      	mov	r2, r8
 80061f0:	464b      	mov	r3, r9
 80061f2:	1891      	adds	r1, r2, r2
 80061f4:	60b9      	str	r1, [r7, #8]
 80061f6:	415b      	adcs	r3, r3
 80061f8:	60fb      	str	r3, [r7, #12]
 80061fa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80061fe:	4641      	mov	r1, r8
 8006200:	1851      	adds	r1, r2, r1
 8006202:	6039      	str	r1, [r7, #0]
 8006204:	4649      	mov	r1, r9
 8006206:	414b      	adcs	r3, r1
 8006208:	607b      	str	r3, [r7, #4]
 800620a:	f04f 0200 	mov.w	r2, #0
 800620e:	f04f 0300 	mov.w	r3, #0
 8006212:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006216:	4659      	mov	r1, fp
 8006218:	00cb      	lsls	r3, r1, #3
 800621a:	4651      	mov	r1, sl
 800621c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006220:	4651      	mov	r1, sl
 8006222:	00ca      	lsls	r2, r1, #3
 8006224:	4610      	mov	r0, r2
 8006226:	4619      	mov	r1, r3
 8006228:	4603      	mov	r3, r0
 800622a:	4642      	mov	r2, r8
 800622c:	189b      	adds	r3, r3, r2
 800622e:	66bb      	str	r3, [r7, #104]	; 0x68
 8006230:	464b      	mov	r3, r9
 8006232:	460a      	mov	r2, r1
 8006234:	eb42 0303 	adc.w	r3, r2, r3
 8006238:	66fb      	str	r3, [r7, #108]	; 0x6c
 800623a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800623e:	685b      	ldr	r3, [r3, #4]
 8006240:	2200      	movs	r2, #0
 8006242:	663b      	str	r3, [r7, #96]	; 0x60
 8006244:	667a      	str	r2, [r7, #100]	; 0x64
 8006246:	f04f 0200 	mov.w	r2, #0
 800624a:	f04f 0300 	mov.w	r3, #0
 800624e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006252:	4649      	mov	r1, r9
 8006254:	008b      	lsls	r3, r1, #2
 8006256:	4641      	mov	r1, r8
 8006258:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800625c:	4641      	mov	r1, r8
 800625e:	008a      	lsls	r2, r1, #2
 8006260:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006264:	f7f9 ffb0 	bl	80001c8 <__aeabi_uldivmod>
 8006268:	4602      	mov	r2, r0
 800626a:	460b      	mov	r3, r1
 800626c:	4b0d      	ldr	r3, [pc, #52]	; (80062a4 <UART_SetConfig+0x4e4>)
 800626e:	fba3 1302 	umull	r1, r3, r3, r2
 8006272:	095b      	lsrs	r3, r3, #5
 8006274:	2164      	movs	r1, #100	; 0x64
 8006276:	fb01 f303 	mul.w	r3, r1, r3
 800627a:	1ad3      	subs	r3, r2, r3
 800627c:	011b      	lsls	r3, r3, #4
 800627e:	3332      	adds	r3, #50	; 0x32
 8006280:	4a08      	ldr	r2, [pc, #32]	; (80062a4 <UART_SetConfig+0x4e4>)
 8006282:	fba2 2303 	umull	r2, r3, r2, r3
 8006286:	095b      	lsrs	r3, r3, #5
 8006288:	f003 020f 	and.w	r2, r3, #15
 800628c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	4422      	add	r2, r4
 8006294:	609a      	str	r2, [r3, #8]
}
 8006296:	bf00      	nop
 8006298:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800629c:	46bd      	mov	sp, r7
 800629e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80062a2:	bf00      	nop
 80062a4:	51eb851f 	.word	0x51eb851f

080062a8 <FSMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device,
                                    FSMC_NORSRAM_InitTypeDef *Init)
{
 80062a8:	b480      	push	{r7}
 80062aa:	b087      	sub	sp, #28
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	6078      	str	r0, [r7, #4]
 80062b0:	6039      	str	r1, [r7, #0]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
#endif /* FSMC_BCR1_WFDIS */
  assert_param(IS_FSMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 80062b2:	683b      	ldr	r3, [r7, #0]
 80062b4:	681a      	ldr	r2, [r3, #0]
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80062bc:	683a      	ldr	r2, [r7, #0]
 80062be:	6812      	ldr	r2, [r2, #0]
 80062c0:	f023 0101 	bic.w	r1, r3, #1
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 80062ca:	683b      	ldr	r3, [r7, #0]
 80062cc:	689b      	ldr	r3, [r3, #8]
 80062ce:	2b08      	cmp	r3, #8
 80062d0:	d102      	bne.n	80062d8 <FSMC_NORSRAM_Init+0x30>
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 80062d2:	2340      	movs	r3, #64	; 0x40
 80062d4:	617b      	str	r3, [r7, #20]
 80062d6:	e001      	b.n	80062dc <FSMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_DISABLE;
 80062d8:	2300      	movs	r3, #0
 80062da:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 80062dc:	683b      	ldr	r3, [r7, #0]
 80062de:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 80062e0:	697b      	ldr	r3, [r7, #20]
 80062e2:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 80062e4:	683b      	ldr	r3, [r7, #0]
 80062e6:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 80062e8:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 80062ea:	683b      	ldr	r3, [r7, #0]
 80062ec:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 80062ee:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 80062f0:	683b      	ldr	r3, [r7, #0]
 80062f2:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 80062f4:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 80062f6:	683b      	ldr	r3, [r7, #0]
 80062f8:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 80062fa:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 80062fc:	683b      	ldr	r3, [r7, #0]
 80062fe:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalPolarity      | \
 8006300:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 8006302:	683b      	ldr	r3, [r7, #0]
 8006304:	6a1b      	ldr	r3, [r3, #32]
              Init->WaitSignalActive        | \
 8006306:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 8006308:	683b      	ldr	r3, [r7, #0]
 800630a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WriteOperation          | \
 800630c:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 800630e:	683b      	ldr	r3, [r7, #0]
 8006310:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->WaitSignal              | \
 8006312:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 8006314:	683b      	ldr	r3, [r7, #0]
 8006316:	6adb      	ldr	r3, [r3, #44]	; 0x2c
              Init->ExtendedMode            | \
 8006318:	431a      	orrs	r2, r3
              Init->WriteBurst);
 800631a:	683b      	ldr	r3, [r7, #0]
 800631c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  btcr_reg = (flashaccess                   | \
 800631e:	4313      	orrs	r3, r2
 8006320:	613b      	str	r3, [r7, #16]

#if defined(FSMC_BCR1_WRAPMOD)
  btcr_reg |= Init->WrapMode;
 8006322:	683b      	ldr	r3, [r7, #0]
 8006324:	699b      	ldr	r3, [r3, #24]
 8006326:	693a      	ldr	r2, [r7, #16]
 8006328:	4313      	orrs	r3, r2
 800632a:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->ContinuousClock;
#endif /* FSMC_BCR1_CCLKEN */
#if defined(FSMC_BCR1_WFDIS)
  btcr_reg |= Init->WriteFifo;
#endif /* FSMC_BCR1_WFDIS */
  btcr_reg |= Init->PageSize;
 800632c:	683b      	ldr	r3, [r7, #0]
 800632e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006330:	693a      	ldr	r2, [r7, #16]
 8006332:	4313      	orrs	r3, r2
 8006334:	613b      	str	r3, [r7, #16]

  mask = (FSMC_BCR1_MBKEN                |
 8006336:	4b10      	ldr	r3, [pc, #64]	; (8006378 <FSMC_NORSRAM_Init+0xd0>)
 8006338:	60fb      	str	r3, [r7, #12]
          FSMC_BCR1_EXTMOD               |
          FSMC_BCR1_ASYNCWAIT            |
          FSMC_BCR1_CBURSTRW);

#if defined(FSMC_BCR1_WRAPMOD)
  mask |= FSMC_BCR1_WRAPMOD;
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006340:	60fb      	str	r3, [r7, #12]
  mask |= FSMC_BCR1_CCLKEN;
#endif
#if defined(FSMC_BCR1_WFDIS)
  mask |= FSMC_BCR1_WFDIS;
#endif /* FSMC_BCR1_WFDIS */
  mask |= FSMC_BCR1_CPSIZE;
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 8006348:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 800634a:	683b      	ldr	r3, [r7, #0]
 800634c:	681a      	ldr	r2, [r3, #0]
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	43db      	mvns	r3, r3
 8006358:	ea02 0103 	and.w	r1, r2, r3
 800635c:	683b      	ldr	r3, [r7, #0]
 800635e:	681a      	ldr	r2, [r3, #0]
 8006360:	693b      	ldr	r3, [r7, #16]
 8006362:	4319      	orrs	r1, r3
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FSMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
  }
#endif /* FSMC_BCR1_WFDIS */

  return HAL_OK;
 800636a:	2300      	movs	r3, #0
}
 800636c:	4618      	mov	r0, r3
 800636e:	371c      	adds	r7, #28
 8006370:	46bd      	mov	sp, r7
 8006372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006376:	4770      	bx	lr
 8006378:	0008fb7f 	.word	0x0008fb7f

0800637c <FSMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device,
                                          FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800637c:	b480      	push	{r7}
 800637e:	b085      	sub	sp, #20
 8006380:	af00      	add	r7, sp, #0
 8006382:	60f8      	str	r0, [r7, #12]
 8006384:	60b9      	str	r1, [r7, #8]
 8006386:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Set FSMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	1c5a      	adds	r2, r3, #1
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006392:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8006396:	68bb      	ldr	r3, [r7, #8]
 8006398:	681a      	ldr	r2, [r3, #0]
 800639a:	68bb      	ldr	r3, [r7, #8]
 800639c:	685b      	ldr	r3, [r3, #4]
 800639e:	011b      	lsls	r3, r3, #4
 80063a0:	431a      	orrs	r2, r3
 80063a2:	68bb      	ldr	r3, [r7, #8]
 80063a4:	689b      	ldr	r3, [r3, #8]
 80063a6:	021b      	lsls	r3, r3, #8
 80063a8:	431a      	orrs	r2, r3
 80063aa:	68bb      	ldr	r3, [r7, #8]
 80063ac:	68db      	ldr	r3, [r3, #12]
 80063ae:	041b      	lsls	r3, r3, #16
 80063b0:	431a      	orrs	r2, r3
 80063b2:	68bb      	ldr	r3, [r7, #8]
 80063b4:	691b      	ldr	r3, [r3, #16]
 80063b6:	3b01      	subs	r3, #1
 80063b8:	051b      	lsls	r3, r3, #20
 80063ba:	431a      	orrs	r2, r3
 80063bc:	68bb      	ldr	r3, [r7, #8]
 80063be:	695b      	ldr	r3, [r3, #20]
 80063c0:	3b02      	subs	r3, #2
 80063c2:	061b      	lsls	r3, r3, #24
 80063c4:	431a      	orrs	r2, r3
 80063c6:	68bb      	ldr	r3, [r7, #8]
 80063c8:	699b      	ldr	r3, [r3, #24]
 80063ca:	4313      	orrs	r3, r2
 80063cc:	687a      	ldr	r2, [r7, #4]
 80063ce:	3201      	adds	r2, #1
 80063d0:	4319      	orrs	r1, r3
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FSMC_BTR1_CLKDIV_Pos);
    MODIFY_REG(Device->BTCR[FSMC_NORSRAM_BANK1 + 1U], FSMC_BTR1_CLKDIV, tmpr);
  }

#endif
  return HAL_OK;
 80063d8:	2300      	movs	r3, #0
}
 80063da:	4618      	mov	r0, r3
 80063dc:	3714      	adds	r7, #20
 80063de:	46bd      	mov	sp, r7
 80063e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e4:	4770      	bx	lr
	...

080063e8 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 80063e8:	b480      	push	{r7}
 80063ea:	b085      	sub	sp, #20
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	60f8      	str	r0, [r7, #12]
 80063f0:	60b9      	str	r1, [r7, #8]
 80063f2:	607a      	str	r2, [r7, #4]
 80063f4:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 80063f6:	683b      	ldr	r3, [r7, #0]
 80063f8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80063fc:	d11d      	bne.n	800643a <FSMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	687a      	ldr	r2, [r7, #4]
 8006402:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006406:	4b13      	ldr	r3, [pc, #76]	; (8006454 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>)
 8006408:	4013      	ands	r3, r2
 800640a:	68ba      	ldr	r2, [r7, #8]
 800640c:	6811      	ldr	r1, [r2, #0]
 800640e:	68ba      	ldr	r2, [r7, #8]
 8006410:	6852      	ldr	r2, [r2, #4]
 8006412:	0112      	lsls	r2, r2, #4
 8006414:	4311      	orrs	r1, r2
 8006416:	68ba      	ldr	r2, [r7, #8]
 8006418:	6892      	ldr	r2, [r2, #8]
 800641a:	0212      	lsls	r2, r2, #8
 800641c:	4311      	orrs	r1, r2
 800641e:	68ba      	ldr	r2, [r7, #8]
 8006420:	6992      	ldr	r2, [r2, #24]
 8006422:	4311      	orrs	r1, r2
 8006424:	68ba      	ldr	r2, [r7, #8]
 8006426:	68d2      	ldr	r2, [r2, #12]
 8006428:	0412      	lsls	r2, r2, #16
 800642a:	430a      	orrs	r2, r1
 800642c:	ea43 0102 	orr.w	r1, r3, r2
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	687a      	ldr	r2, [r7, #4]
 8006434:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8006438:	e005      	b.n	8006446 <FSMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FSMC_BWTR1_BUSTURN_Pos)));
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	687a      	ldr	r2, [r7, #4]
 800643e:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8006442:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 8006446:	2300      	movs	r3, #0
}
 8006448:	4618      	mov	r0, r3
 800644a:	3714      	adds	r7, #20
 800644c:	46bd      	mov	sp, r7
 800644e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006452:	4770      	bx	lr
 8006454:	cff00000 	.word	0xcff00000

08006458 <FSMC_NORSRAM_WriteOperation_Disable>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_WriteOperation_Disable(FSMC_NORSRAM_TypeDef *Device, uint32_t Bank)
{
 8006458:	b480      	push	{r7}
 800645a:	b083      	sub	sp, #12
 800645c:	af00      	add	r7, sp, #0
 800645e:	6078      	str	r0, [r7, #4]
 8006460:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_NORSRAM_DEVICE(Device));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Disable write operation */
  CLEAR_BIT(Device->BTCR[Bank], FSMC_WRITE_OPERATION_ENABLE);
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	683a      	ldr	r2, [r7, #0]
 8006466:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800646a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	683a      	ldr	r2, [r7, #0]
 8006472:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  return HAL_OK;
 8006476:	2300      	movs	r3, #0
}
 8006478:	4618      	mov	r0, r3
 800647a:	370c      	adds	r7, #12
 800647c:	46bd      	mov	sp, r7
 800647e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006482:	4770      	bx	lr

08006484 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006484:	b084      	sub	sp, #16
 8006486:	b580      	push	{r7, lr}
 8006488:	b084      	sub	sp, #16
 800648a:	af00      	add	r7, sp, #0
 800648c:	6078      	str	r0, [r7, #4]
 800648e:	f107 001c 	add.w	r0, r7, #28
 8006492:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006496:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006498:	2b01      	cmp	r3, #1
 800649a:	d122      	bne.n	80064e2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064a0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	68db      	ldr	r3, [r3, #12]
 80064ac:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80064b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80064b4:	687a      	ldr	r2, [r7, #4]
 80064b6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	68db      	ldr	r3, [r3, #12]
 80064bc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80064c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80064c6:	2b01      	cmp	r3, #1
 80064c8:	d105      	bne.n	80064d6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	68db      	ldr	r3, [r3, #12]
 80064ce:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80064d6:	6878      	ldr	r0, [r7, #4]
 80064d8:	f001 fbee 	bl	8007cb8 <USB_CoreReset>
 80064dc:	4603      	mov	r3, r0
 80064de:	73fb      	strb	r3, [r7, #15]
 80064e0:	e01a      	b.n	8006518 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	68db      	ldr	r3, [r3, #12]
 80064e6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80064ee:	6878      	ldr	r0, [r7, #4]
 80064f0:	f001 fbe2 	bl	8007cb8 <USB_CoreReset>
 80064f4:	4603      	mov	r3, r0
 80064f6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80064f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d106      	bne.n	800650c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006502:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	639a      	str	r2, [r3, #56]	; 0x38
 800650a:	e005      	b.n	8006518 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006510:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006518:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800651a:	2b01      	cmp	r3, #1
 800651c:	d10b      	bne.n	8006536 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	689b      	ldr	r3, [r3, #8]
 8006522:	f043 0206 	orr.w	r2, r3, #6
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	689b      	ldr	r3, [r3, #8]
 800652e:	f043 0220 	orr.w	r2, r3, #32
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006536:	7bfb      	ldrb	r3, [r7, #15]
}
 8006538:	4618      	mov	r0, r3
 800653a:	3710      	adds	r7, #16
 800653c:	46bd      	mov	sp, r7
 800653e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006542:	b004      	add	sp, #16
 8006544:	4770      	bx	lr
	...

08006548 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8006548:	b480      	push	{r7}
 800654a:	b087      	sub	sp, #28
 800654c:	af00      	add	r7, sp, #0
 800654e:	60f8      	str	r0, [r7, #12]
 8006550:	60b9      	str	r1, [r7, #8]
 8006552:	4613      	mov	r3, r2
 8006554:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8006556:	79fb      	ldrb	r3, [r7, #7]
 8006558:	2b02      	cmp	r3, #2
 800655a:	d165      	bne.n	8006628 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800655c:	68bb      	ldr	r3, [r7, #8]
 800655e:	4a41      	ldr	r2, [pc, #260]	; (8006664 <USB_SetTurnaroundTime+0x11c>)
 8006560:	4293      	cmp	r3, r2
 8006562:	d906      	bls.n	8006572 <USB_SetTurnaroundTime+0x2a>
 8006564:	68bb      	ldr	r3, [r7, #8]
 8006566:	4a40      	ldr	r2, [pc, #256]	; (8006668 <USB_SetTurnaroundTime+0x120>)
 8006568:	4293      	cmp	r3, r2
 800656a:	d202      	bcs.n	8006572 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800656c:	230f      	movs	r3, #15
 800656e:	617b      	str	r3, [r7, #20]
 8006570:	e062      	b.n	8006638 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8006572:	68bb      	ldr	r3, [r7, #8]
 8006574:	4a3c      	ldr	r2, [pc, #240]	; (8006668 <USB_SetTurnaroundTime+0x120>)
 8006576:	4293      	cmp	r3, r2
 8006578:	d306      	bcc.n	8006588 <USB_SetTurnaroundTime+0x40>
 800657a:	68bb      	ldr	r3, [r7, #8]
 800657c:	4a3b      	ldr	r2, [pc, #236]	; (800666c <USB_SetTurnaroundTime+0x124>)
 800657e:	4293      	cmp	r3, r2
 8006580:	d202      	bcs.n	8006588 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8006582:	230e      	movs	r3, #14
 8006584:	617b      	str	r3, [r7, #20]
 8006586:	e057      	b.n	8006638 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8006588:	68bb      	ldr	r3, [r7, #8]
 800658a:	4a38      	ldr	r2, [pc, #224]	; (800666c <USB_SetTurnaroundTime+0x124>)
 800658c:	4293      	cmp	r3, r2
 800658e:	d306      	bcc.n	800659e <USB_SetTurnaroundTime+0x56>
 8006590:	68bb      	ldr	r3, [r7, #8]
 8006592:	4a37      	ldr	r2, [pc, #220]	; (8006670 <USB_SetTurnaroundTime+0x128>)
 8006594:	4293      	cmp	r3, r2
 8006596:	d202      	bcs.n	800659e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8006598:	230d      	movs	r3, #13
 800659a:	617b      	str	r3, [r7, #20]
 800659c:	e04c      	b.n	8006638 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800659e:	68bb      	ldr	r3, [r7, #8]
 80065a0:	4a33      	ldr	r2, [pc, #204]	; (8006670 <USB_SetTurnaroundTime+0x128>)
 80065a2:	4293      	cmp	r3, r2
 80065a4:	d306      	bcc.n	80065b4 <USB_SetTurnaroundTime+0x6c>
 80065a6:	68bb      	ldr	r3, [r7, #8]
 80065a8:	4a32      	ldr	r2, [pc, #200]	; (8006674 <USB_SetTurnaroundTime+0x12c>)
 80065aa:	4293      	cmp	r3, r2
 80065ac:	d802      	bhi.n	80065b4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80065ae:	230c      	movs	r3, #12
 80065b0:	617b      	str	r3, [r7, #20]
 80065b2:	e041      	b.n	8006638 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80065b4:	68bb      	ldr	r3, [r7, #8]
 80065b6:	4a2f      	ldr	r2, [pc, #188]	; (8006674 <USB_SetTurnaroundTime+0x12c>)
 80065b8:	4293      	cmp	r3, r2
 80065ba:	d906      	bls.n	80065ca <USB_SetTurnaroundTime+0x82>
 80065bc:	68bb      	ldr	r3, [r7, #8]
 80065be:	4a2e      	ldr	r2, [pc, #184]	; (8006678 <USB_SetTurnaroundTime+0x130>)
 80065c0:	4293      	cmp	r3, r2
 80065c2:	d802      	bhi.n	80065ca <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80065c4:	230b      	movs	r3, #11
 80065c6:	617b      	str	r3, [r7, #20]
 80065c8:	e036      	b.n	8006638 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80065ca:	68bb      	ldr	r3, [r7, #8]
 80065cc:	4a2a      	ldr	r2, [pc, #168]	; (8006678 <USB_SetTurnaroundTime+0x130>)
 80065ce:	4293      	cmp	r3, r2
 80065d0:	d906      	bls.n	80065e0 <USB_SetTurnaroundTime+0x98>
 80065d2:	68bb      	ldr	r3, [r7, #8]
 80065d4:	4a29      	ldr	r2, [pc, #164]	; (800667c <USB_SetTurnaroundTime+0x134>)
 80065d6:	4293      	cmp	r3, r2
 80065d8:	d802      	bhi.n	80065e0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80065da:	230a      	movs	r3, #10
 80065dc:	617b      	str	r3, [r7, #20]
 80065de:	e02b      	b.n	8006638 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80065e0:	68bb      	ldr	r3, [r7, #8]
 80065e2:	4a26      	ldr	r2, [pc, #152]	; (800667c <USB_SetTurnaroundTime+0x134>)
 80065e4:	4293      	cmp	r3, r2
 80065e6:	d906      	bls.n	80065f6 <USB_SetTurnaroundTime+0xae>
 80065e8:	68bb      	ldr	r3, [r7, #8]
 80065ea:	4a25      	ldr	r2, [pc, #148]	; (8006680 <USB_SetTurnaroundTime+0x138>)
 80065ec:	4293      	cmp	r3, r2
 80065ee:	d202      	bcs.n	80065f6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80065f0:	2309      	movs	r3, #9
 80065f2:	617b      	str	r3, [r7, #20]
 80065f4:	e020      	b.n	8006638 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80065f6:	68bb      	ldr	r3, [r7, #8]
 80065f8:	4a21      	ldr	r2, [pc, #132]	; (8006680 <USB_SetTurnaroundTime+0x138>)
 80065fa:	4293      	cmp	r3, r2
 80065fc:	d306      	bcc.n	800660c <USB_SetTurnaroundTime+0xc4>
 80065fe:	68bb      	ldr	r3, [r7, #8]
 8006600:	4a20      	ldr	r2, [pc, #128]	; (8006684 <USB_SetTurnaroundTime+0x13c>)
 8006602:	4293      	cmp	r3, r2
 8006604:	d802      	bhi.n	800660c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8006606:	2308      	movs	r3, #8
 8006608:	617b      	str	r3, [r7, #20]
 800660a:	e015      	b.n	8006638 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800660c:	68bb      	ldr	r3, [r7, #8]
 800660e:	4a1d      	ldr	r2, [pc, #116]	; (8006684 <USB_SetTurnaroundTime+0x13c>)
 8006610:	4293      	cmp	r3, r2
 8006612:	d906      	bls.n	8006622 <USB_SetTurnaroundTime+0xda>
 8006614:	68bb      	ldr	r3, [r7, #8]
 8006616:	4a1c      	ldr	r2, [pc, #112]	; (8006688 <USB_SetTurnaroundTime+0x140>)
 8006618:	4293      	cmp	r3, r2
 800661a:	d202      	bcs.n	8006622 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800661c:	2307      	movs	r3, #7
 800661e:	617b      	str	r3, [r7, #20]
 8006620:	e00a      	b.n	8006638 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8006622:	2306      	movs	r3, #6
 8006624:	617b      	str	r3, [r7, #20]
 8006626:	e007      	b.n	8006638 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8006628:	79fb      	ldrb	r3, [r7, #7]
 800662a:	2b00      	cmp	r3, #0
 800662c:	d102      	bne.n	8006634 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800662e:	2309      	movs	r3, #9
 8006630:	617b      	str	r3, [r7, #20]
 8006632:	e001      	b.n	8006638 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8006634:	2309      	movs	r3, #9
 8006636:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	68db      	ldr	r3, [r3, #12]
 800663c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	68da      	ldr	r2, [r3, #12]
 8006648:	697b      	ldr	r3, [r7, #20]
 800664a:	029b      	lsls	r3, r3, #10
 800664c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8006650:	431a      	orrs	r2, r3
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006656:	2300      	movs	r3, #0
}
 8006658:	4618      	mov	r0, r3
 800665a:	371c      	adds	r7, #28
 800665c:	46bd      	mov	sp, r7
 800665e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006662:	4770      	bx	lr
 8006664:	00d8acbf 	.word	0x00d8acbf
 8006668:	00e4e1c0 	.word	0x00e4e1c0
 800666c:	00f42400 	.word	0x00f42400
 8006670:	01067380 	.word	0x01067380
 8006674:	011a499f 	.word	0x011a499f
 8006678:	01312cff 	.word	0x01312cff
 800667c:	014ca43f 	.word	0x014ca43f
 8006680:	016e3600 	.word	0x016e3600
 8006684:	01a6ab1f 	.word	0x01a6ab1f
 8006688:	01e84800 	.word	0x01e84800

0800668c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800668c:	b480      	push	{r7}
 800668e:	b083      	sub	sp, #12
 8006690:	af00      	add	r7, sp, #0
 8006692:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	689b      	ldr	r3, [r3, #8]
 8006698:	f043 0201 	orr.w	r2, r3, #1
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80066a0:	2300      	movs	r3, #0
}
 80066a2:	4618      	mov	r0, r3
 80066a4:	370c      	adds	r7, #12
 80066a6:	46bd      	mov	sp, r7
 80066a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ac:	4770      	bx	lr

080066ae <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80066ae:	b480      	push	{r7}
 80066b0:	b083      	sub	sp, #12
 80066b2:	af00      	add	r7, sp, #0
 80066b4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	689b      	ldr	r3, [r3, #8]
 80066ba:	f023 0201 	bic.w	r2, r3, #1
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80066c2:	2300      	movs	r3, #0
}
 80066c4:	4618      	mov	r0, r3
 80066c6:	370c      	adds	r7, #12
 80066c8:	46bd      	mov	sp, r7
 80066ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ce:	4770      	bx	lr

080066d0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80066d0:	b580      	push	{r7, lr}
 80066d2:	b084      	sub	sp, #16
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	6078      	str	r0, [r7, #4]
 80066d8:	460b      	mov	r3, r1
 80066da:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80066dc:	2300      	movs	r3, #0
 80066de:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	68db      	ldr	r3, [r3, #12]
 80066e4:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80066ec:	78fb      	ldrb	r3, [r7, #3]
 80066ee:	2b01      	cmp	r3, #1
 80066f0:	d115      	bne.n	800671e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	68db      	ldr	r3, [r3, #12]
 80066f6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80066fe:	2001      	movs	r0, #1
 8006700:	f7fc f878 	bl	80027f4 <HAL_Delay>
      ms++;
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	3301      	adds	r3, #1
 8006708:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800670a:	6878      	ldr	r0, [r7, #4]
 800670c:	f001 fa45 	bl	8007b9a <USB_GetMode>
 8006710:	4603      	mov	r3, r0
 8006712:	2b01      	cmp	r3, #1
 8006714:	d01e      	beq.n	8006754 <USB_SetCurrentMode+0x84>
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	2b31      	cmp	r3, #49	; 0x31
 800671a:	d9f0      	bls.n	80066fe <USB_SetCurrentMode+0x2e>
 800671c:	e01a      	b.n	8006754 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800671e:	78fb      	ldrb	r3, [r7, #3]
 8006720:	2b00      	cmp	r3, #0
 8006722:	d115      	bne.n	8006750 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	68db      	ldr	r3, [r3, #12]
 8006728:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006730:	2001      	movs	r0, #1
 8006732:	f7fc f85f 	bl	80027f4 <HAL_Delay>
      ms++;
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	3301      	adds	r3, #1
 800673a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800673c:	6878      	ldr	r0, [r7, #4]
 800673e:	f001 fa2c 	bl	8007b9a <USB_GetMode>
 8006742:	4603      	mov	r3, r0
 8006744:	2b00      	cmp	r3, #0
 8006746:	d005      	beq.n	8006754 <USB_SetCurrentMode+0x84>
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	2b31      	cmp	r3, #49	; 0x31
 800674c:	d9f0      	bls.n	8006730 <USB_SetCurrentMode+0x60>
 800674e:	e001      	b.n	8006754 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006750:	2301      	movs	r3, #1
 8006752:	e005      	b.n	8006760 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	2b32      	cmp	r3, #50	; 0x32
 8006758:	d101      	bne.n	800675e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800675a:	2301      	movs	r3, #1
 800675c:	e000      	b.n	8006760 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800675e:	2300      	movs	r3, #0
}
 8006760:	4618      	mov	r0, r3
 8006762:	3710      	adds	r7, #16
 8006764:	46bd      	mov	sp, r7
 8006766:	bd80      	pop	{r7, pc}

08006768 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006768:	b084      	sub	sp, #16
 800676a:	b580      	push	{r7, lr}
 800676c:	b086      	sub	sp, #24
 800676e:	af00      	add	r7, sp, #0
 8006770:	6078      	str	r0, [r7, #4]
 8006772:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006776:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800677a:	2300      	movs	r3, #0
 800677c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006782:	2300      	movs	r3, #0
 8006784:	613b      	str	r3, [r7, #16]
 8006786:	e009      	b.n	800679c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006788:	687a      	ldr	r2, [r7, #4]
 800678a:	693b      	ldr	r3, [r7, #16]
 800678c:	3340      	adds	r3, #64	; 0x40
 800678e:	009b      	lsls	r3, r3, #2
 8006790:	4413      	add	r3, r2
 8006792:	2200      	movs	r2, #0
 8006794:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006796:	693b      	ldr	r3, [r7, #16]
 8006798:	3301      	adds	r3, #1
 800679a:	613b      	str	r3, [r7, #16]
 800679c:	693b      	ldr	r3, [r7, #16]
 800679e:	2b0e      	cmp	r3, #14
 80067a0:	d9f2      	bls.n	8006788 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80067a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d11c      	bne.n	80067e2 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067ae:	685b      	ldr	r3, [r3, #4]
 80067b0:	68fa      	ldr	r2, [r7, #12]
 80067b2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80067b6:	f043 0302 	orr.w	r3, r3, #2
 80067ba:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067c0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067cc:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067d8:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	639a      	str	r2, [r3, #56]	; 0x38
 80067e0:	e00b      	b.n	80067fa <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067e6:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067f2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006800:	461a      	mov	r2, r3
 8006802:	2300      	movs	r3, #0
 8006804:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800680c:	4619      	mov	r1, r3
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006814:	461a      	mov	r2, r3
 8006816:	680b      	ldr	r3, [r1, #0]
 8006818:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800681a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800681c:	2b01      	cmp	r3, #1
 800681e:	d10c      	bne.n	800683a <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006820:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006822:	2b00      	cmp	r3, #0
 8006824:	d104      	bne.n	8006830 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006826:	2100      	movs	r1, #0
 8006828:	6878      	ldr	r0, [r7, #4]
 800682a:	f000 f965 	bl	8006af8 <USB_SetDevSpeed>
 800682e:	e008      	b.n	8006842 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006830:	2101      	movs	r1, #1
 8006832:	6878      	ldr	r0, [r7, #4]
 8006834:	f000 f960 	bl	8006af8 <USB_SetDevSpeed>
 8006838:	e003      	b.n	8006842 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800683a:	2103      	movs	r1, #3
 800683c:	6878      	ldr	r0, [r7, #4]
 800683e:	f000 f95b 	bl	8006af8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006842:	2110      	movs	r1, #16
 8006844:	6878      	ldr	r0, [r7, #4]
 8006846:	f000 f8f3 	bl	8006a30 <USB_FlushTxFifo>
 800684a:	4603      	mov	r3, r0
 800684c:	2b00      	cmp	r3, #0
 800684e:	d001      	beq.n	8006854 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8006850:	2301      	movs	r3, #1
 8006852:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006854:	6878      	ldr	r0, [r7, #4]
 8006856:	f000 f91f 	bl	8006a98 <USB_FlushRxFifo>
 800685a:	4603      	mov	r3, r0
 800685c:	2b00      	cmp	r3, #0
 800685e:	d001      	beq.n	8006864 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8006860:	2301      	movs	r3, #1
 8006862:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800686a:	461a      	mov	r2, r3
 800686c:	2300      	movs	r3, #0
 800686e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006876:	461a      	mov	r2, r3
 8006878:	2300      	movs	r3, #0
 800687a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006882:	461a      	mov	r2, r3
 8006884:	2300      	movs	r3, #0
 8006886:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006888:	2300      	movs	r3, #0
 800688a:	613b      	str	r3, [r7, #16]
 800688c:	e043      	b.n	8006916 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800688e:	693b      	ldr	r3, [r7, #16]
 8006890:	015a      	lsls	r2, r3, #5
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	4413      	add	r3, r2
 8006896:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80068a0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80068a4:	d118      	bne.n	80068d8 <USB_DevInit+0x170>
    {
      if (i == 0U)
 80068a6:	693b      	ldr	r3, [r7, #16]
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d10a      	bne.n	80068c2 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80068ac:	693b      	ldr	r3, [r7, #16]
 80068ae:	015a      	lsls	r2, r3, #5
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	4413      	add	r3, r2
 80068b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068b8:	461a      	mov	r2, r3
 80068ba:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80068be:	6013      	str	r3, [r2, #0]
 80068c0:	e013      	b.n	80068ea <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80068c2:	693b      	ldr	r3, [r7, #16]
 80068c4:	015a      	lsls	r2, r3, #5
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	4413      	add	r3, r2
 80068ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068ce:	461a      	mov	r2, r3
 80068d0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80068d4:	6013      	str	r3, [r2, #0]
 80068d6:	e008      	b.n	80068ea <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80068d8:	693b      	ldr	r3, [r7, #16]
 80068da:	015a      	lsls	r2, r3, #5
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	4413      	add	r3, r2
 80068e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068e4:	461a      	mov	r2, r3
 80068e6:	2300      	movs	r3, #0
 80068e8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80068ea:	693b      	ldr	r3, [r7, #16]
 80068ec:	015a      	lsls	r2, r3, #5
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	4413      	add	r3, r2
 80068f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068f6:	461a      	mov	r2, r3
 80068f8:	2300      	movs	r3, #0
 80068fa:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80068fc:	693b      	ldr	r3, [r7, #16]
 80068fe:	015a      	lsls	r2, r3, #5
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	4413      	add	r3, r2
 8006904:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006908:	461a      	mov	r2, r3
 800690a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800690e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006910:	693b      	ldr	r3, [r7, #16]
 8006912:	3301      	adds	r3, #1
 8006914:	613b      	str	r3, [r7, #16]
 8006916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006918:	693a      	ldr	r2, [r7, #16]
 800691a:	429a      	cmp	r2, r3
 800691c:	d3b7      	bcc.n	800688e <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800691e:	2300      	movs	r3, #0
 8006920:	613b      	str	r3, [r7, #16]
 8006922:	e043      	b.n	80069ac <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006924:	693b      	ldr	r3, [r7, #16]
 8006926:	015a      	lsls	r2, r3, #5
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	4413      	add	r3, r2
 800692c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006936:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800693a:	d118      	bne.n	800696e <USB_DevInit+0x206>
    {
      if (i == 0U)
 800693c:	693b      	ldr	r3, [r7, #16]
 800693e:	2b00      	cmp	r3, #0
 8006940:	d10a      	bne.n	8006958 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006942:	693b      	ldr	r3, [r7, #16]
 8006944:	015a      	lsls	r2, r3, #5
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	4413      	add	r3, r2
 800694a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800694e:	461a      	mov	r2, r3
 8006950:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006954:	6013      	str	r3, [r2, #0]
 8006956:	e013      	b.n	8006980 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006958:	693b      	ldr	r3, [r7, #16]
 800695a:	015a      	lsls	r2, r3, #5
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	4413      	add	r3, r2
 8006960:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006964:	461a      	mov	r2, r3
 8006966:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800696a:	6013      	str	r3, [r2, #0]
 800696c:	e008      	b.n	8006980 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800696e:	693b      	ldr	r3, [r7, #16]
 8006970:	015a      	lsls	r2, r3, #5
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	4413      	add	r3, r2
 8006976:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800697a:	461a      	mov	r2, r3
 800697c:	2300      	movs	r3, #0
 800697e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006980:	693b      	ldr	r3, [r7, #16]
 8006982:	015a      	lsls	r2, r3, #5
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	4413      	add	r3, r2
 8006988:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800698c:	461a      	mov	r2, r3
 800698e:	2300      	movs	r3, #0
 8006990:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006992:	693b      	ldr	r3, [r7, #16]
 8006994:	015a      	lsls	r2, r3, #5
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	4413      	add	r3, r2
 800699a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800699e:	461a      	mov	r2, r3
 80069a0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80069a4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80069a6:	693b      	ldr	r3, [r7, #16]
 80069a8:	3301      	adds	r3, #1
 80069aa:	613b      	str	r3, [r7, #16]
 80069ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069ae:	693a      	ldr	r2, [r7, #16]
 80069b0:	429a      	cmp	r2, r3
 80069b2:	d3b7      	bcc.n	8006924 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80069ba:	691b      	ldr	r3, [r3, #16]
 80069bc:	68fa      	ldr	r2, [r7, #12]
 80069be:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80069c2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80069c6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	2200      	movs	r2, #0
 80069cc:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80069d4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80069d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d105      	bne.n	80069e8 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	699b      	ldr	r3, [r3, #24]
 80069e0:	f043 0210 	orr.w	r2, r3, #16
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	699a      	ldr	r2, [r3, #24]
 80069ec:	4b0f      	ldr	r3, [pc, #60]	; (8006a2c <USB_DevInit+0x2c4>)
 80069ee:	4313      	orrs	r3, r2
 80069f0:	687a      	ldr	r2, [r7, #4]
 80069f2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80069f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d005      	beq.n	8006a06 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	699b      	ldr	r3, [r3, #24]
 80069fe:	f043 0208 	orr.w	r2, r3, #8
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006a06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a08:	2b01      	cmp	r3, #1
 8006a0a:	d107      	bne.n	8006a1c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	699b      	ldr	r3, [r3, #24]
 8006a10:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006a14:	f043 0304 	orr.w	r3, r3, #4
 8006a18:	687a      	ldr	r2, [r7, #4]
 8006a1a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006a1c:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a1e:	4618      	mov	r0, r3
 8006a20:	3718      	adds	r7, #24
 8006a22:	46bd      	mov	sp, r7
 8006a24:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006a28:	b004      	add	sp, #16
 8006a2a:	4770      	bx	lr
 8006a2c:	803c3800 	.word	0x803c3800

08006a30 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006a30:	b480      	push	{r7}
 8006a32:	b085      	sub	sp, #20
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	6078      	str	r0, [r7, #4]
 8006a38:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006a3a:	2300      	movs	r3, #0
 8006a3c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	3301      	adds	r3, #1
 8006a42:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	4a13      	ldr	r2, [pc, #76]	; (8006a94 <USB_FlushTxFifo+0x64>)
 8006a48:	4293      	cmp	r3, r2
 8006a4a:	d901      	bls.n	8006a50 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006a4c:	2303      	movs	r3, #3
 8006a4e:	e01b      	b.n	8006a88 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	691b      	ldr	r3, [r3, #16]
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	daf2      	bge.n	8006a3e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006a58:	2300      	movs	r3, #0
 8006a5a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006a5c:	683b      	ldr	r3, [r7, #0]
 8006a5e:	019b      	lsls	r3, r3, #6
 8006a60:	f043 0220 	orr.w	r2, r3, #32
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	3301      	adds	r3, #1
 8006a6c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	4a08      	ldr	r2, [pc, #32]	; (8006a94 <USB_FlushTxFifo+0x64>)
 8006a72:	4293      	cmp	r3, r2
 8006a74:	d901      	bls.n	8006a7a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006a76:	2303      	movs	r3, #3
 8006a78:	e006      	b.n	8006a88 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	691b      	ldr	r3, [r3, #16]
 8006a7e:	f003 0320 	and.w	r3, r3, #32
 8006a82:	2b20      	cmp	r3, #32
 8006a84:	d0f0      	beq.n	8006a68 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006a86:	2300      	movs	r3, #0
}
 8006a88:	4618      	mov	r0, r3
 8006a8a:	3714      	adds	r7, #20
 8006a8c:	46bd      	mov	sp, r7
 8006a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a92:	4770      	bx	lr
 8006a94:	00030d40 	.word	0x00030d40

08006a98 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006a98:	b480      	push	{r7}
 8006a9a:	b085      	sub	sp, #20
 8006a9c:	af00      	add	r7, sp, #0
 8006a9e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006aa0:	2300      	movs	r3, #0
 8006aa2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	3301      	adds	r3, #1
 8006aa8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	4a11      	ldr	r2, [pc, #68]	; (8006af4 <USB_FlushRxFifo+0x5c>)
 8006aae:	4293      	cmp	r3, r2
 8006ab0:	d901      	bls.n	8006ab6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006ab2:	2303      	movs	r3, #3
 8006ab4:	e018      	b.n	8006ae8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	691b      	ldr	r3, [r3, #16]
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	daf2      	bge.n	8006aa4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006abe:	2300      	movs	r3, #0
 8006ac0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	2210      	movs	r2, #16
 8006ac6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	3301      	adds	r3, #1
 8006acc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	4a08      	ldr	r2, [pc, #32]	; (8006af4 <USB_FlushRxFifo+0x5c>)
 8006ad2:	4293      	cmp	r3, r2
 8006ad4:	d901      	bls.n	8006ada <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006ad6:	2303      	movs	r3, #3
 8006ad8:	e006      	b.n	8006ae8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	691b      	ldr	r3, [r3, #16]
 8006ade:	f003 0310 	and.w	r3, r3, #16
 8006ae2:	2b10      	cmp	r3, #16
 8006ae4:	d0f0      	beq.n	8006ac8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006ae6:	2300      	movs	r3, #0
}
 8006ae8:	4618      	mov	r0, r3
 8006aea:	3714      	adds	r7, #20
 8006aec:	46bd      	mov	sp, r7
 8006aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af2:	4770      	bx	lr
 8006af4:	00030d40 	.word	0x00030d40

08006af8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006af8:	b480      	push	{r7}
 8006afa:	b085      	sub	sp, #20
 8006afc:	af00      	add	r7, sp, #0
 8006afe:	6078      	str	r0, [r7, #4]
 8006b00:	460b      	mov	r3, r1
 8006b02:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b0e:	681a      	ldr	r2, [r3, #0]
 8006b10:	78fb      	ldrb	r3, [r7, #3]
 8006b12:	68f9      	ldr	r1, [r7, #12]
 8006b14:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006b18:	4313      	orrs	r3, r2
 8006b1a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006b1c:	2300      	movs	r3, #0
}
 8006b1e:	4618      	mov	r0, r3
 8006b20:	3714      	adds	r7, #20
 8006b22:	46bd      	mov	sp, r7
 8006b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b28:	4770      	bx	lr

08006b2a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8006b2a:	b480      	push	{r7}
 8006b2c:	b087      	sub	sp, #28
 8006b2e:	af00      	add	r7, sp, #0
 8006b30:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8006b36:	693b      	ldr	r3, [r7, #16]
 8006b38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b3c:	689b      	ldr	r3, [r3, #8]
 8006b3e:	f003 0306 	and.w	r3, r3, #6
 8006b42:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d102      	bne.n	8006b50 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8006b4a:	2300      	movs	r3, #0
 8006b4c:	75fb      	strb	r3, [r7, #23]
 8006b4e:	e00a      	b.n	8006b66 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	2b02      	cmp	r3, #2
 8006b54:	d002      	beq.n	8006b5c <USB_GetDevSpeed+0x32>
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	2b06      	cmp	r3, #6
 8006b5a:	d102      	bne.n	8006b62 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8006b5c:	2302      	movs	r3, #2
 8006b5e:	75fb      	strb	r3, [r7, #23]
 8006b60:	e001      	b.n	8006b66 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8006b62:	230f      	movs	r3, #15
 8006b64:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8006b66:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b68:	4618      	mov	r0, r3
 8006b6a:	371c      	adds	r7, #28
 8006b6c:	46bd      	mov	sp, r7
 8006b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b72:	4770      	bx	lr

08006b74 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006b74:	b480      	push	{r7}
 8006b76:	b085      	sub	sp, #20
 8006b78:	af00      	add	r7, sp, #0
 8006b7a:	6078      	str	r0, [r7, #4]
 8006b7c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006b82:	683b      	ldr	r3, [r7, #0]
 8006b84:	781b      	ldrb	r3, [r3, #0]
 8006b86:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006b88:	683b      	ldr	r3, [r7, #0]
 8006b8a:	785b      	ldrb	r3, [r3, #1]
 8006b8c:	2b01      	cmp	r3, #1
 8006b8e:	d13a      	bne.n	8006c06 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b96:	69da      	ldr	r2, [r3, #28]
 8006b98:	683b      	ldr	r3, [r7, #0]
 8006b9a:	781b      	ldrb	r3, [r3, #0]
 8006b9c:	f003 030f 	and.w	r3, r3, #15
 8006ba0:	2101      	movs	r1, #1
 8006ba2:	fa01 f303 	lsl.w	r3, r1, r3
 8006ba6:	b29b      	uxth	r3, r3
 8006ba8:	68f9      	ldr	r1, [r7, #12]
 8006baa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006bae:	4313      	orrs	r3, r2
 8006bb0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8006bb2:	68bb      	ldr	r3, [r7, #8]
 8006bb4:	015a      	lsls	r2, r3, #5
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	4413      	add	r3, r2
 8006bba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d155      	bne.n	8006c74 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006bc8:	68bb      	ldr	r3, [r7, #8]
 8006bca:	015a      	lsls	r2, r3, #5
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	4413      	add	r3, r2
 8006bd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006bd4:	681a      	ldr	r2, [r3, #0]
 8006bd6:	683b      	ldr	r3, [r7, #0]
 8006bd8:	68db      	ldr	r3, [r3, #12]
 8006bda:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006bde:	683b      	ldr	r3, [r7, #0]
 8006be0:	791b      	ldrb	r3, [r3, #4]
 8006be2:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006be4:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006be6:	68bb      	ldr	r3, [r7, #8]
 8006be8:	059b      	lsls	r3, r3, #22
 8006bea:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006bec:	4313      	orrs	r3, r2
 8006bee:	68ba      	ldr	r2, [r7, #8]
 8006bf0:	0151      	lsls	r1, r2, #5
 8006bf2:	68fa      	ldr	r2, [r7, #12]
 8006bf4:	440a      	add	r2, r1
 8006bf6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006bfa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006bfe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c02:	6013      	str	r3, [r2, #0]
 8006c04:	e036      	b.n	8006c74 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c0c:	69da      	ldr	r2, [r3, #28]
 8006c0e:	683b      	ldr	r3, [r7, #0]
 8006c10:	781b      	ldrb	r3, [r3, #0]
 8006c12:	f003 030f 	and.w	r3, r3, #15
 8006c16:	2101      	movs	r1, #1
 8006c18:	fa01 f303 	lsl.w	r3, r1, r3
 8006c1c:	041b      	lsls	r3, r3, #16
 8006c1e:	68f9      	ldr	r1, [r7, #12]
 8006c20:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006c24:	4313      	orrs	r3, r2
 8006c26:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8006c28:	68bb      	ldr	r3, [r7, #8]
 8006c2a:	015a      	lsls	r2, r3, #5
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	4413      	add	r3, r2
 8006c30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d11a      	bne.n	8006c74 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006c3e:	68bb      	ldr	r3, [r7, #8]
 8006c40:	015a      	lsls	r2, r3, #5
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	4413      	add	r3, r2
 8006c46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c4a:	681a      	ldr	r2, [r3, #0]
 8006c4c:	683b      	ldr	r3, [r7, #0]
 8006c4e:	68db      	ldr	r3, [r3, #12]
 8006c50:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8006c54:	683b      	ldr	r3, [r7, #0]
 8006c56:	791b      	ldrb	r3, [r3, #4]
 8006c58:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006c5a:	430b      	orrs	r3, r1
 8006c5c:	4313      	orrs	r3, r2
 8006c5e:	68ba      	ldr	r2, [r7, #8]
 8006c60:	0151      	lsls	r1, r2, #5
 8006c62:	68fa      	ldr	r2, [r7, #12]
 8006c64:	440a      	add	r2, r1
 8006c66:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006c6a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006c6e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c72:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8006c74:	2300      	movs	r3, #0
}
 8006c76:	4618      	mov	r0, r3
 8006c78:	3714      	adds	r7, #20
 8006c7a:	46bd      	mov	sp, r7
 8006c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c80:	4770      	bx	lr
	...

08006c84 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006c84:	b480      	push	{r7}
 8006c86:	b085      	sub	sp, #20
 8006c88:	af00      	add	r7, sp, #0
 8006c8a:	6078      	str	r0, [r7, #4]
 8006c8c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006c92:	683b      	ldr	r3, [r7, #0]
 8006c94:	781b      	ldrb	r3, [r3, #0]
 8006c96:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8006c98:	683b      	ldr	r3, [r7, #0]
 8006c9a:	785b      	ldrb	r3, [r3, #1]
 8006c9c:	2b01      	cmp	r3, #1
 8006c9e:	d161      	bne.n	8006d64 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006ca0:	68bb      	ldr	r3, [r7, #8]
 8006ca2:	015a      	lsls	r2, r3, #5
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	4413      	add	r3, r2
 8006ca8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006cb2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006cb6:	d11f      	bne.n	8006cf8 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8006cb8:	68bb      	ldr	r3, [r7, #8]
 8006cba:	015a      	lsls	r2, r3, #5
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	4413      	add	r3, r2
 8006cc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	68ba      	ldr	r2, [r7, #8]
 8006cc8:	0151      	lsls	r1, r2, #5
 8006cca:	68fa      	ldr	r2, [r7, #12]
 8006ccc:	440a      	add	r2, r1
 8006cce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006cd2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006cd6:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8006cd8:	68bb      	ldr	r3, [r7, #8]
 8006cda:	015a      	lsls	r2, r3, #5
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	4413      	add	r3, r2
 8006ce0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	68ba      	ldr	r2, [r7, #8]
 8006ce8:	0151      	lsls	r1, r2, #5
 8006cea:	68fa      	ldr	r2, [r7, #12]
 8006cec:	440a      	add	r2, r1
 8006cee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006cf2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006cf6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006cfe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006d00:	683b      	ldr	r3, [r7, #0]
 8006d02:	781b      	ldrb	r3, [r3, #0]
 8006d04:	f003 030f 	and.w	r3, r3, #15
 8006d08:	2101      	movs	r1, #1
 8006d0a:	fa01 f303 	lsl.w	r3, r1, r3
 8006d0e:	b29b      	uxth	r3, r3
 8006d10:	43db      	mvns	r3, r3
 8006d12:	68f9      	ldr	r1, [r7, #12]
 8006d14:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006d18:	4013      	ands	r3, r2
 8006d1a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d22:	69da      	ldr	r2, [r3, #28]
 8006d24:	683b      	ldr	r3, [r7, #0]
 8006d26:	781b      	ldrb	r3, [r3, #0]
 8006d28:	f003 030f 	and.w	r3, r3, #15
 8006d2c:	2101      	movs	r1, #1
 8006d2e:	fa01 f303 	lsl.w	r3, r1, r3
 8006d32:	b29b      	uxth	r3, r3
 8006d34:	43db      	mvns	r3, r3
 8006d36:	68f9      	ldr	r1, [r7, #12]
 8006d38:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006d3c:	4013      	ands	r3, r2
 8006d3e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8006d40:	68bb      	ldr	r3, [r7, #8]
 8006d42:	015a      	lsls	r2, r3, #5
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	4413      	add	r3, r2
 8006d48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d4c:	681a      	ldr	r2, [r3, #0]
 8006d4e:	68bb      	ldr	r3, [r7, #8]
 8006d50:	0159      	lsls	r1, r3, #5
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	440b      	add	r3, r1
 8006d56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d5a:	4619      	mov	r1, r3
 8006d5c:	4b35      	ldr	r3, [pc, #212]	; (8006e34 <USB_DeactivateEndpoint+0x1b0>)
 8006d5e:	4013      	ands	r3, r2
 8006d60:	600b      	str	r3, [r1, #0]
 8006d62:	e060      	b.n	8006e26 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006d64:	68bb      	ldr	r3, [r7, #8]
 8006d66:	015a      	lsls	r2, r3, #5
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	4413      	add	r3, r2
 8006d6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006d76:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006d7a:	d11f      	bne.n	8006dbc <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006d7c:	68bb      	ldr	r3, [r7, #8]
 8006d7e:	015a      	lsls	r2, r3, #5
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	4413      	add	r3, r2
 8006d84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	68ba      	ldr	r2, [r7, #8]
 8006d8c:	0151      	lsls	r1, r2, #5
 8006d8e:	68fa      	ldr	r2, [r7, #12]
 8006d90:	440a      	add	r2, r1
 8006d92:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006d96:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006d9a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8006d9c:	68bb      	ldr	r3, [r7, #8]
 8006d9e:	015a      	lsls	r2, r3, #5
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	4413      	add	r3, r2
 8006da4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	68ba      	ldr	r2, [r7, #8]
 8006dac:	0151      	lsls	r1, r2, #5
 8006dae:	68fa      	ldr	r2, [r7, #12]
 8006db0:	440a      	add	r2, r1
 8006db2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006db6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006dba:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006dc2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006dc4:	683b      	ldr	r3, [r7, #0]
 8006dc6:	781b      	ldrb	r3, [r3, #0]
 8006dc8:	f003 030f 	and.w	r3, r3, #15
 8006dcc:	2101      	movs	r1, #1
 8006dce:	fa01 f303 	lsl.w	r3, r1, r3
 8006dd2:	041b      	lsls	r3, r3, #16
 8006dd4:	43db      	mvns	r3, r3
 8006dd6:	68f9      	ldr	r1, [r7, #12]
 8006dd8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006ddc:	4013      	ands	r3, r2
 8006dde:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006de6:	69da      	ldr	r2, [r3, #28]
 8006de8:	683b      	ldr	r3, [r7, #0]
 8006dea:	781b      	ldrb	r3, [r3, #0]
 8006dec:	f003 030f 	and.w	r3, r3, #15
 8006df0:	2101      	movs	r1, #1
 8006df2:	fa01 f303 	lsl.w	r3, r1, r3
 8006df6:	041b      	lsls	r3, r3, #16
 8006df8:	43db      	mvns	r3, r3
 8006dfa:	68f9      	ldr	r1, [r7, #12]
 8006dfc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006e00:	4013      	ands	r3, r2
 8006e02:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8006e04:	68bb      	ldr	r3, [r7, #8]
 8006e06:	015a      	lsls	r2, r3, #5
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	4413      	add	r3, r2
 8006e0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e10:	681a      	ldr	r2, [r3, #0]
 8006e12:	68bb      	ldr	r3, [r7, #8]
 8006e14:	0159      	lsls	r1, r3, #5
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	440b      	add	r3, r1
 8006e1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e1e:	4619      	mov	r1, r3
 8006e20:	4b05      	ldr	r3, [pc, #20]	; (8006e38 <USB_DeactivateEndpoint+0x1b4>)
 8006e22:	4013      	ands	r3, r2
 8006e24:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8006e26:	2300      	movs	r3, #0
}
 8006e28:	4618      	mov	r0, r3
 8006e2a:	3714      	adds	r7, #20
 8006e2c:	46bd      	mov	sp, r7
 8006e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e32:	4770      	bx	lr
 8006e34:	ec337800 	.word	0xec337800
 8006e38:	eff37800 	.word	0xeff37800

08006e3c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006e3c:	b580      	push	{r7, lr}
 8006e3e:	b08a      	sub	sp, #40	; 0x28
 8006e40:	af02      	add	r7, sp, #8
 8006e42:	60f8      	str	r0, [r7, #12]
 8006e44:	60b9      	str	r1, [r7, #8]
 8006e46:	4613      	mov	r3, r2
 8006e48:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8006e4e:	68bb      	ldr	r3, [r7, #8]
 8006e50:	781b      	ldrb	r3, [r3, #0]
 8006e52:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006e54:	68bb      	ldr	r3, [r7, #8]
 8006e56:	785b      	ldrb	r3, [r3, #1]
 8006e58:	2b01      	cmp	r3, #1
 8006e5a:	f040 815c 	bne.w	8007116 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006e5e:	68bb      	ldr	r3, [r7, #8]
 8006e60:	699b      	ldr	r3, [r3, #24]
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d132      	bne.n	8006ecc <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006e66:	69bb      	ldr	r3, [r7, #24]
 8006e68:	015a      	lsls	r2, r3, #5
 8006e6a:	69fb      	ldr	r3, [r7, #28]
 8006e6c:	4413      	add	r3, r2
 8006e6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e72:	691b      	ldr	r3, [r3, #16]
 8006e74:	69ba      	ldr	r2, [r7, #24]
 8006e76:	0151      	lsls	r1, r2, #5
 8006e78:	69fa      	ldr	r2, [r7, #28]
 8006e7a:	440a      	add	r2, r1
 8006e7c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006e80:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006e84:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006e88:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006e8a:	69bb      	ldr	r3, [r7, #24]
 8006e8c:	015a      	lsls	r2, r3, #5
 8006e8e:	69fb      	ldr	r3, [r7, #28]
 8006e90:	4413      	add	r3, r2
 8006e92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e96:	691b      	ldr	r3, [r3, #16]
 8006e98:	69ba      	ldr	r2, [r7, #24]
 8006e9a:	0151      	lsls	r1, r2, #5
 8006e9c:	69fa      	ldr	r2, [r7, #28]
 8006e9e:	440a      	add	r2, r1
 8006ea0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006ea4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006ea8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006eaa:	69bb      	ldr	r3, [r7, #24]
 8006eac:	015a      	lsls	r2, r3, #5
 8006eae:	69fb      	ldr	r3, [r7, #28]
 8006eb0:	4413      	add	r3, r2
 8006eb2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006eb6:	691b      	ldr	r3, [r3, #16]
 8006eb8:	69ba      	ldr	r2, [r7, #24]
 8006eba:	0151      	lsls	r1, r2, #5
 8006ebc:	69fa      	ldr	r2, [r7, #28]
 8006ebe:	440a      	add	r2, r1
 8006ec0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006ec4:	0cdb      	lsrs	r3, r3, #19
 8006ec6:	04db      	lsls	r3, r3, #19
 8006ec8:	6113      	str	r3, [r2, #16]
 8006eca:	e074      	b.n	8006fb6 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006ecc:	69bb      	ldr	r3, [r7, #24]
 8006ece:	015a      	lsls	r2, r3, #5
 8006ed0:	69fb      	ldr	r3, [r7, #28]
 8006ed2:	4413      	add	r3, r2
 8006ed4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ed8:	691b      	ldr	r3, [r3, #16]
 8006eda:	69ba      	ldr	r2, [r7, #24]
 8006edc:	0151      	lsls	r1, r2, #5
 8006ede:	69fa      	ldr	r2, [r7, #28]
 8006ee0:	440a      	add	r2, r1
 8006ee2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006ee6:	0cdb      	lsrs	r3, r3, #19
 8006ee8:	04db      	lsls	r3, r3, #19
 8006eea:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006eec:	69bb      	ldr	r3, [r7, #24]
 8006eee:	015a      	lsls	r2, r3, #5
 8006ef0:	69fb      	ldr	r3, [r7, #28]
 8006ef2:	4413      	add	r3, r2
 8006ef4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ef8:	691b      	ldr	r3, [r3, #16]
 8006efa:	69ba      	ldr	r2, [r7, #24]
 8006efc:	0151      	lsls	r1, r2, #5
 8006efe:	69fa      	ldr	r2, [r7, #28]
 8006f00:	440a      	add	r2, r1
 8006f02:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f06:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006f0a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006f0e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8006f10:	69bb      	ldr	r3, [r7, #24]
 8006f12:	015a      	lsls	r2, r3, #5
 8006f14:	69fb      	ldr	r3, [r7, #28]
 8006f16:	4413      	add	r3, r2
 8006f18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f1c:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8006f1e:	68bb      	ldr	r3, [r7, #8]
 8006f20:	6999      	ldr	r1, [r3, #24]
 8006f22:	68bb      	ldr	r3, [r7, #8]
 8006f24:	68db      	ldr	r3, [r3, #12]
 8006f26:	440b      	add	r3, r1
 8006f28:	1e59      	subs	r1, r3, #1
 8006f2a:	68bb      	ldr	r3, [r7, #8]
 8006f2c:	68db      	ldr	r3, [r3, #12]
 8006f2e:	fbb1 f3f3 	udiv	r3, r1, r3
 8006f32:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8006f34:	4b9d      	ldr	r3, [pc, #628]	; (80071ac <USB_EPStartXfer+0x370>)
 8006f36:	400b      	ands	r3, r1
 8006f38:	69b9      	ldr	r1, [r7, #24]
 8006f3a:	0148      	lsls	r0, r1, #5
 8006f3c:	69f9      	ldr	r1, [r7, #28]
 8006f3e:	4401      	add	r1, r0
 8006f40:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006f44:	4313      	orrs	r3, r2
 8006f46:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006f48:	69bb      	ldr	r3, [r7, #24]
 8006f4a:	015a      	lsls	r2, r3, #5
 8006f4c:	69fb      	ldr	r3, [r7, #28]
 8006f4e:	4413      	add	r3, r2
 8006f50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f54:	691a      	ldr	r2, [r3, #16]
 8006f56:	68bb      	ldr	r3, [r7, #8]
 8006f58:	699b      	ldr	r3, [r3, #24]
 8006f5a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006f5e:	69b9      	ldr	r1, [r7, #24]
 8006f60:	0148      	lsls	r0, r1, #5
 8006f62:	69f9      	ldr	r1, [r7, #28]
 8006f64:	4401      	add	r1, r0
 8006f66:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006f6a:	4313      	orrs	r3, r2
 8006f6c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8006f6e:	68bb      	ldr	r3, [r7, #8]
 8006f70:	791b      	ldrb	r3, [r3, #4]
 8006f72:	2b01      	cmp	r3, #1
 8006f74:	d11f      	bne.n	8006fb6 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8006f76:	69bb      	ldr	r3, [r7, #24]
 8006f78:	015a      	lsls	r2, r3, #5
 8006f7a:	69fb      	ldr	r3, [r7, #28]
 8006f7c:	4413      	add	r3, r2
 8006f7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f82:	691b      	ldr	r3, [r3, #16]
 8006f84:	69ba      	ldr	r2, [r7, #24]
 8006f86:	0151      	lsls	r1, r2, #5
 8006f88:	69fa      	ldr	r2, [r7, #28]
 8006f8a:	440a      	add	r2, r1
 8006f8c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f90:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8006f94:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8006f96:	69bb      	ldr	r3, [r7, #24]
 8006f98:	015a      	lsls	r2, r3, #5
 8006f9a:	69fb      	ldr	r3, [r7, #28]
 8006f9c:	4413      	add	r3, r2
 8006f9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fa2:	691b      	ldr	r3, [r3, #16]
 8006fa4:	69ba      	ldr	r2, [r7, #24]
 8006fa6:	0151      	lsls	r1, r2, #5
 8006fa8:	69fa      	ldr	r2, [r7, #28]
 8006faa:	440a      	add	r2, r1
 8006fac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006fb0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006fb4:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8006fb6:	79fb      	ldrb	r3, [r7, #7]
 8006fb8:	2b01      	cmp	r3, #1
 8006fba:	d14b      	bne.n	8007054 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006fbc:	68bb      	ldr	r3, [r7, #8]
 8006fbe:	695b      	ldr	r3, [r3, #20]
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d009      	beq.n	8006fd8 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006fc4:	69bb      	ldr	r3, [r7, #24]
 8006fc6:	015a      	lsls	r2, r3, #5
 8006fc8:	69fb      	ldr	r3, [r7, #28]
 8006fca:	4413      	add	r3, r2
 8006fcc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fd0:	461a      	mov	r2, r3
 8006fd2:	68bb      	ldr	r3, [r7, #8]
 8006fd4:	695b      	ldr	r3, [r3, #20]
 8006fd6:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8006fd8:	68bb      	ldr	r3, [r7, #8]
 8006fda:	791b      	ldrb	r3, [r3, #4]
 8006fdc:	2b01      	cmp	r3, #1
 8006fde:	d128      	bne.n	8007032 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006fe0:	69fb      	ldr	r3, [r7, #28]
 8006fe2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006fe6:	689b      	ldr	r3, [r3, #8]
 8006fe8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d110      	bne.n	8007012 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006ff0:	69bb      	ldr	r3, [r7, #24]
 8006ff2:	015a      	lsls	r2, r3, #5
 8006ff4:	69fb      	ldr	r3, [r7, #28]
 8006ff6:	4413      	add	r3, r2
 8006ff8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	69ba      	ldr	r2, [r7, #24]
 8007000:	0151      	lsls	r1, r2, #5
 8007002:	69fa      	ldr	r2, [r7, #28]
 8007004:	440a      	add	r2, r1
 8007006:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800700a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800700e:	6013      	str	r3, [r2, #0]
 8007010:	e00f      	b.n	8007032 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007012:	69bb      	ldr	r3, [r7, #24]
 8007014:	015a      	lsls	r2, r3, #5
 8007016:	69fb      	ldr	r3, [r7, #28]
 8007018:	4413      	add	r3, r2
 800701a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	69ba      	ldr	r2, [r7, #24]
 8007022:	0151      	lsls	r1, r2, #5
 8007024:	69fa      	ldr	r2, [r7, #28]
 8007026:	440a      	add	r2, r1
 8007028:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800702c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007030:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007032:	69bb      	ldr	r3, [r7, #24]
 8007034:	015a      	lsls	r2, r3, #5
 8007036:	69fb      	ldr	r3, [r7, #28]
 8007038:	4413      	add	r3, r2
 800703a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	69ba      	ldr	r2, [r7, #24]
 8007042:	0151      	lsls	r1, r2, #5
 8007044:	69fa      	ldr	r2, [r7, #28]
 8007046:	440a      	add	r2, r1
 8007048:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800704c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007050:	6013      	str	r3, [r2, #0]
 8007052:	e133      	b.n	80072bc <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007054:	69bb      	ldr	r3, [r7, #24]
 8007056:	015a      	lsls	r2, r3, #5
 8007058:	69fb      	ldr	r3, [r7, #28]
 800705a:	4413      	add	r3, r2
 800705c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	69ba      	ldr	r2, [r7, #24]
 8007064:	0151      	lsls	r1, r2, #5
 8007066:	69fa      	ldr	r2, [r7, #28]
 8007068:	440a      	add	r2, r1
 800706a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800706e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007072:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007074:	68bb      	ldr	r3, [r7, #8]
 8007076:	791b      	ldrb	r3, [r3, #4]
 8007078:	2b01      	cmp	r3, #1
 800707a:	d015      	beq.n	80070a8 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800707c:	68bb      	ldr	r3, [r7, #8]
 800707e:	699b      	ldr	r3, [r3, #24]
 8007080:	2b00      	cmp	r3, #0
 8007082:	f000 811b 	beq.w	80072bc <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007086:	69fb      	ldr	r3, [r7, #28]
 8007088:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800708c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800708e:	68bb      	ldr	r3, [r7, #8]
 8007090:	781b      	ldrb	r3, [r3, #0]
 8007092:	f003 030f 	and.w	r3, r3, #15
 8007096:	2101      	movs	r1, #1
 8007098:	fa01 f303 	lsl.w	r3, r1, r3
 800709c:	69f9      	ldr	r1, [r7, #28]
 800709e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80070a2:	4313      	orrs	r3, r2
 80070a4:	634b      	str	r3, [r1, #52]	; 0x34
 80070a6:	e109      	b.n	80072bc <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80070a8:	69fb      	ldr	r3, [r7, #28]
 80070aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80070ae:	689b      	ldr	r3, [r3, #8]
 80070b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d110      	bne.n	80070da <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80070b8:	69bb      	ldr	r3, [r7, #24]
 80070ba:	015a      	lsls	r2, r3, #5
 80070bc:	69fb      	ldr	r3, [r7, #28]
 80070be:	4413      	add	r3, r2
 80070c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	69ba      	ldr	r2, [r7, #24]
 80070c8:	0151      	lsls	r1, r2, #5
 80070ca:	69fa      	ldr	r2, [r7, #28]
 80070cc:	440a      	add	r2, r1
 80070ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80070d2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80070d6:	6013      	str	r3, [r2, #0]
 80070d8:	e00f      	b.n	80070fa <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80070da:	69bb      	ldr	r3, [r7, #24]
 80070dc:	015a      	lsls	r2, r3, #5
 80070de:	69fb      	ldr	r3, [r7, #28]
 80070e0:	4413      	add	r3, r2
 80070e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	69ba      	ldr	r2, [r7, #24]
 80070ea:	0151      	lsls	r1, r2, #5
 80070ec:	69fa      	ldr	r2, [r7, #28]
 80070ee:	440a      	add	r2, r1
 80070f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80070f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80070f8:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80070fa:	68bb      	ldr	r3, [r7, #8]
 80070fc:	6919      	ldr	r1, [r3, #16]
 80070fe:	68bb      	ldr	r3, [r7, #8]
 8007100:	781a      	ldrb	r2, [r3, #0]
 8007102:	68bb      	ldr	r3, [r7, #8]
 8007104:	699b      	ldr	r3, [r3, #24]
 8007106:	b298      	uxth	r0, r3
 8007108:	79fb      	ldrb	r3, [r7, #7]
 800710a:	9300      	str	r3, [sp, #0]
 800710c:	4603      	mov	r3, r0
 800710e:	68f8      	ldr	r0, [r7, #12]
 8007110:	f000 fade 	bl	80076d0 <USB_WritePacket>
 8007114:	e0d2      	b.n	80072bc <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007116:	69bb      	ldr	r3, [r7, #24]
 8007118:	015a      	lsls	r2, r3, #5
 800711a:	69fb      	ldr	r3, [r7, #28]
 800711c:	4413      	add	r3, r2
 800711e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007122:	691b      	ldr	r3, [r3, #16]
 8007124:	69ba      	ldr	r2, [r7, #24]
 8007126:	0151      	lsls	r1, r2, #5
 8007128:	69fa      	ldr	r2, [r7, #28]
 800712a:	440a      	add	r2, r1
 800712c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007130:	0cdb      	lsrs	r3, r3, #19
 8007132:	04db      	lsls	r3, r3, #19
 8007134:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007136:	69bb      	ldr	r3, [r7, #24]
 8007138:	015a      	lsls	r2, r3, #5
 800713a:	69fb      	ldr	r3, [r7, #28]
 800713c:	4413      	add	r3, r2
 800713e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007142:	691b      	ldr	r3, [r3, #16]
 8007144:	69ba      	ldr	r2, [r7, #24]
 8007146:	0151      	lsls	r1, r2, #5
 8007148:	69fa      	ldr	r2, [r7, #28]
 800714a:	440a      	add	r2, r1
 800714c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007150:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007154:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007158:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800715a:	68bb      	ldr	r3, [r7, #8]
 800715c:	699b      	ldr	r3, [r3, #24]
 800715e:	2b00      	cmp	r3, #0
 8007160:	d126      	bne.n	80071b0 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8007162:	69bb      	ldr	r3, [r7, #24]
 8007164:	015a      	lsls	r2, r3, #5
 8007166:	69fb      	ldr	r3, [r7, #28]
 8007168:	4413      	add	r3, r2
 800716a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800716e:	691a      	ldr	r2, [r3, #16]
 8007170:	68bb      	ldr	r3, [r7, #8]
 8007172:	68db      	ldr	r3, [r3, #12]
 8007174:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007178:	69b9      	ldr	r1, [r7, #24]
 800717a:	0148      	lsls	r0, r1, #5
 800717c:	69f9      	ldr	r1, [r7, #28]
 800717e:	4401      	add	r1, r0
 8007180:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007184:	4313      	orrs	r3, r2
 8007186:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007188:	69bb      	ldr	r3, [r7, #24]
 800718a:	015a      	lsls	r2, r3, #5
 800718c:	69fb      	ldr	r3, [r7, #28]
 800718e:	4413      	add	r3, r2
 8007190:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007194:	691b      	ldr	r3, [r3, #16]
 8007196:	69ba      	ldr	r2, [r7, #24]
 8007198:	0151      	lsls	r1, r2, #5
 800719a:	69fa      	ldr	r2, [r7, #28]
 800719c:	440a      	add	r2, r1
 800719e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80071a2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80071a6:	6113      	str	r3, [r2, #16]
 80071a8:	e03a      	b.n	8007220 <USB_EPStartXfer+0x3e4>
 80071aa:	bf00      	nop
 80071ac:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80071b0:	68bb      	ldr	r3, [r7, #8]
 80071b2:	699a      	ldr	r2, [r3, #24]
 80071b4:	68bb      	ldr	r3, [r7, #8]
 80071b6:	68db      	ldr	r3, [r3, #12]
 80071b8:	4413      	add	r3, r2
 80071ba:	1e5a      	subs	r2, r3, #1
 80071bc:	68bb      	ldr	r3, [r7, #8]
 80071be:	68db      	ldr	r3, [r3, #12]
 80071c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80071c4:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 80071c6:	68bb      	ldr	r3, [r7, #8]
 80071c8:	68db      	ldr	r3, [r3, #12]
 80071ca:	8afa      	ldrh	r2, [r7, #22]
 80071cc:	fb03 f202 	mul.w	r2, r3, r2
 80071d0:	68bb      	ldr	r3, [r7, #8]
 80071d2:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80071d4:	69bb      	ldr	r3, [r7, #24]
 80071d6:	015a      	lsls	r2, r3, #5
 80071d8:	69fb      	ldr	r3, [r7, #28]
 80071da:	4413      	add	r3, r2
 80071dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071e0:	691a      	ldr	r2, [r3, #16]
 80071e2:	8afb      	ldrh	r3, [r7, #22]
 80071e4:	04d9      	lsls	r1, r3, #19
 80071e6:	4b38      	ldr	r3, [pc, #224]	; (80072c8 <USB_EPStartXfer+0x48c>)
 80071e8:	400b      	ands	r3, r1
 80071ea:	69b9      	ldr	r1, [r7, #24]
 80071ec:	0148      	lsls	r0, r1, #5
 80071ee:	69f9      	ldr	r1, [r7, #28]
 80071f0:	4401      	add	r1, r0
 80071f2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80071f6:	4313      	orrs	r3, r2
 80071f8:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80071fa:	69bb      	ldr	r3, [r7, #24]
 80071fc:	015a      	lsls	r2, r3, #5
 80071fe:	69fb      	ldr	r3, [r7, #28]
 8007200:	4413      	add	r3, r2
 8007202:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007206:	691a      	ldr	r2, [r3, #16]
 8007208:	68bb      	ldr	r3, [r7, #8]
 800720a:	69db      	ldr	r3, [r3, #28]
 800720c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007210:	69b9      	ldr	r1, [r7, #24]
 8007212:	0148      	lsls	r0, r1, #5
 8007214:	69f9      	ldr	r1, [r7, #28]
 8007216:	4401      	add	r1, r0
 8007218:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800721c:	4313      	orrs	r3, r2
 800721e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8007220:	79fb      	ldrb	r3, [r7, #7]
 8007222:	2b01      	cmp	r3, #1
 8007224:	d10d      	bne.n	8007242 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8007226:	68bb      	ldr	r3, [r7, #8]
 8007228:	691b      	ldr	r3, [r3, #16]
 800722a:	2b00      	cmp	r3, #0
 800722c:	d009      	beq.n	8007242 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800722e:	68bb      	ldr	r3, [r7, #8]
 8007230:	6919      	ldr	r1, [r3, #16]
 8007232:	69bb      	ldr	r3, [r7, #24]
 8007234:	015a      	lsls	r2, r3, #5
 8007236:	69fb      	ldr	r3, [r7, #28]
 8007238:	4413      	add	r3, r2
 800723a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800723e:	460a      	mov	r2, r1
 8007240:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8007242:	68bb      	ldr	r3, [r7, #8]
 8007244:	791b      	ldrb	r3, [r3, #4]
 8007246:	2b01      	cmp	r3, #1
 8007248:	d128      	bne.n	800729c <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800724a:	69fb      	ldr	r3, [r7, #28]
 800724c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007250:	689b      	ldr	r3, [r3, #8]
 8007252:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007256:	2b00      	cmp	r3, #0
 8007258:	d110      	bne.n	800727c <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800725a:	69bb      	ldr	r3, [r7, #24]
 800725c:	015a      	lsls	r2, r3, #5
 800725e:	69fb      	ldr	r3, [r7, #28]
 8007260:	4413      	add	r3, r2
 8007262:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	69ba      	ldr	r2, [r7, #24]
 800726a:	0151      	lsls	r1, r2, #5
 800726c:	69fa      	ldr	r2, [r7, #28]
 800726e:	440a      	add	r2, r1
 8007270:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007274:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007278:	6013      	str	r3, [r2, #0]
 800727a:	e00f      	b.n	800729c <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800727c:	69bb      	ldr	r3, [r7, #24]
 800727e:	015a      	lsls	r2, r3, #5
 8007280:	69fb      	ldr	r3, [r7, #28]
 8007282:	4413      	add	r3, r2
 8007284:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	69ba      	ldr	r2, [r7, #24]
 800728c:	0151      	lsls	r1, r2, #5
 800728e:	69fa      	ldr	r2, [r7, #28]
 8007290:	440a      	add	r2, r1
 8007292:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007296:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800729a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800729c:	69bb      	ldr	r3, [r7, #24]
 800729e:	015a      	lsls	r2, r3, #5
 80072a0:	69fb      	ldr	r3, [r7, #28]
 80072a2:	4413      	add	r3, r2
 80072a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	69ba      	ldr	r2, [r7, #24]
 80072ac:	0151      	lsls	r1, r2, #5
 80072ae:	69fa      	ldr	r2, [r7, #28]
 80072b0:	440a      	add	r2, r1
 80072b2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80072b6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80072ba:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80072bc:	2300      	movs	r3, #0
}
 80072be:	4618      	mov	r0, r3
 80072c0:	3720      	adds	r7, #32
 80072c2:	46bd      	mov	sp, r7
 80072c4:	bd80      	pop	{r7, pc}
 80072c6:	bf00      	nop
 80072c8:	1ff80000 	.word	0x1ff80000

080072cc <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80072cc:	b480      	push	{r7}
 80072ce:	b087      	sub	sp, #28
 80072d0:	af00      	add	r7, sp, #0
 80072d2:	60f8      	str	r0, [r7, #12]
 80072d4:	60b9      	str	r1, [r7, #8]
 80072d6:	4613      	mov	r3, r2
 80072d8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80072de:	68bb      	ldr	r3, [r7, #8]
 80072e0:	781b      	ldrb	r3, [r3, #0]
 80072e2:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80072e4:	68bb      	ldr	r3, [r7, #8]
 80072e6:	785b      	ldrb	r3, [r3, #1]
 80072e8:	2b01      	cmp	r3, #1
 80072ea:	f040 80ce 	bne.w	800748a <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80072ee:	68bb      	ldr	r3, [r7, #8]
 80072f0:	699b      	ldr	r3, [r3, #24]
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d132      	bne.n	800735c <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80072f6:	693b      	ldr	r3, [r7, #16]
 80072f8:	015a      	lsls	r2, r3, #5
 80072fa:	697b      	ldr	r3, [r7, #20]
 80072fc:	4413      	add	r3, r2
 80072fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007302:	691b      	ldr	r3, [r3, #16]
 8007304:	693a      	ldr	r2, [r7, #16]
 8007306:	0151      	lsls	r1, r2, #5
 8007308:	697a      	ldr	r2, [r7, #20]
 800730a:	440a      	add	r2, r1
 800730c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007310:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007314:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007318:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800731a:	693b      	ldr	r3, [r7, #16]
 800731c:	015a      	lsls	r2, r3, #5
 800731e:	697b      	ldr	r3, [r7, #20]
 8007320:	4413      	add	r3, r2
 8007322:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007326:	691b      	ldr	r3, [r3, #16]
 8007328:	693a      	ldr	r2, [r7, #16]
 800732a:	0151      	lsls	r1, r2, #5
 800732c:	697a      	ldr	r2, [r7, #20]
 800732e:	440a      	add	r2, r1
 8007330:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007334:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007338:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800733a:	693b      	ldr	r3, [r7, #16]
 800733c:	015a      	lsls	r2, r3, #5
 800733e:	697b      	ldr	r3, [r7, #20]
 8007340:	4413      	add	r3, r2
 8007342:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007346:	691b      	ldr	r3, [r3, #16]
 8007348:	693a      	ldr	r2, [r7, #16]
 800734a:	0151      	lsls	r1, r2, #5
 800734c:	697a      	ldr	r2, [r7, #20]
 800734e:	440a      	add	r2, r1
 8007350:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007354:	0cdb      	lsrs	r3, r3, #19
 8007356:	04db      	lsls	r3, r3, #19
 8007358:	6113      	str	r3, [r2, #16]
 800735a:	e04e      	b.n	80073fa <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800735c:	693b      	ldr	r3, [r7, #16]
 800735e:	015a      	lsls	r2, r3, #5
 8007360:	697b      	ldr	r3, [r7, #20]
 8007362:	4413      	add	r3, r2
 8007364:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007368:	691b      	ldr	r3, [r3, #16]
 800736a:	693a      	ldr	r2, [r7, #16]
 800736c:	0151      	lsls	r1, r2, #5
 800736e:	697a      	ldr	r2, [r7, #20]
 8007370:	440a      	add	r2, r1
 8007372:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007376:	0cdb      	lsrs	r3, r3, #19
 8007378:	04db      	lsls	r3, r3, #19
 800737a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800737c:	693b      	ldr	r3, [r7, #16]
 800737e:	015a      	lsls	r2, r3, #5
 8007380:	697b      	ldr	r3, [r7, #20]
 8007382:	4413      	add	r3, r2
 8007384:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007388:	691b      	ldr	r3, [r3, #16]
 800738a:	693a      	ldr	r2, [r7, #16]
 800738c:	0151      	lsls	r1, r2, #5
 800738e:	697a      	ldr	r2, [r7, #20]
 8007390:	440a      	add	r2, r1
 8007392:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007396:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800739a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800739e:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80073a0:	68bb      	ldr	r3, [r7, #8]
 80073a2:	699a      	ldr	r2, [r3, #24]
 80073a4:	68bb      	ldr	r3, [r7, #8]
 80073a6:	68db      	ldr	r3, [r3, #12]
 80073a8:	429a      	cmp	r2, r3
 80073aa:	d903      	bls.n	80073b4 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80073ac:	68bb      	ldr	r3, [r7, #8]
 80073ae:	68da      	ldr	r2, [r3, #12]
 80073b0:	68bb      	ldr	r3, [r7, #8]
 80073b2:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80073b4:	693b      	ldr	r3, [r7, #16]
 80073b6:	015a      	lsls	r2, r3, #5
 80073b8:	697b      	ldr	r3, [r7, #20]
 80073ba:	4413      	add	r3, r2
 80073bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073c0:	691b      	ldr	r3, [r3, #16]
 80073c2:	693a      	ldr	r2, [r7, #16]
 80073c4:	0151      	lsls	r1, r2, #5
 80073c6:	697a      	ldr	r2, [r7, #20]
 80073c8:	440a      	add	r2, r1
 80073ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80073ce:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80073d2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80073d4:	693b      	ldr	r3, [r7, #16]
 80073d6:	015a      	lsls	r2, r3, #5
 80073d8:	697b      	ldr	r3, [r7, #20]
 80073da:	4413      	add	r3, r2
 80073dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073e0:	691a      	ldr	r2, [r3, #16]
 80073e2:	68bb      	ldr	r3, [r7, #8]
 80073e4:	699b      	ldr	r3, [r3, #24]
 80073e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80073ea:	6939      	ldr	r1, [r7, #16]
 80073ec:	0148      	lsls	r0, r1, #5
 80073ee:	6979      	ldr	r1, [r7, #20]
 80073f0:	4401      	add	r1, r0
 80073f2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80073f6:	4313      	orrs	r3, r2
 80073f8:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80073fa:	79fb      	ldrb	r3, [r7, #7]
 80073fc:	2b01      	cmp	r3, #1
 80073fe:	d11e      	bne.n	800743e <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007400:	68bb      	ldr	r3, [r7, #8]
 8007402:	695b      	ldr	r3, [r3, #20]
 8007404:	2b00      	cmp	r3, #0
 8007406:	d009      	beq.n	800741c <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007408:	693b      	ldr	r3, [r7, #16]
 800740a:	015a      	lsls	r2, r3, #5
 800740c:	697b      	ldr	r3, [r7, #20]
 800740e:	4413      	add	r3, r2
 8007410:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007414:	461a      	mov	r2, r3
 8007416:	68bb      	ldr	r3, [r7, #8]
 8007418:	695b      	ldr	r3, [r3, #20]
 800741a:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800741c:	693b      	ldr	r3, [r7, #16]
 800741e:	015a      	lsls	r2, r3, #5
 8007420:	697b      	ldr	r3, [r7, #20]
 8007422:	4413      	add	r3, r2
 8007424:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	693a      	ldr	r2, [r7, #16]
 800742c:	0151      	lsls	r1, r2, #5
 800742e:	697a      	ldr	r2, [r7, #20]
 8007430:	440a      	add	r2, r1
 8007432:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007436:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800743a:	6013      	str	r3, [r2, #0]
 800743c:	e097      	b.n	800756e <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800743e:	693b      	ldr	r3, [r7, #16]
 8007440:	015a      	lsls	r2, r3, #5
 8007442:	697b      	ldr	r3, [r7, #20]
 8007444:	4413      	add	r3, r2
 8007446:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	693a      	ldr	r2, [r7, #16]
 800744e:	0151      	lsls	r1, r2, #5
 8007450:	697a      	ldr	r2, [r7, #20]
 8007452:	440a      	add	r2, r1
 8007454:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007458:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800745c:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800745e:	68bb      	ldr	r3, [r7, #8]
 8007460:	699b      	ldr	r3, [r3, #24]
 8007462:	2b00      	cmp	r3, #0
 8007464:	f000 8083 	beq.w	800756e <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007468:	697b      	ldr	r3, [r7, #20]
 800746a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800746e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007470:	68bb      	ldr	r3, [r7, #8]
 8007472:	781b      	ldrb	r3, [r3, #0]
 8007474:	f003 030f 	and.w	r3, r3, #15
 8007478:	2101      	movs	r1, #1
 800747a:	fa01 f303 	lsl.w	r3, r1, r3
 800747e:	6979      	ldr	r1, [r7, #20]
 8007480:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007484:	4313      	orrs	r3, r2
 8007486:	634b      	str	r3, [r1, #52]	; 0x34
 8007488:	e071      	b.n	800756e <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800748a:	693b      	ldr	r3, [r7, #16]
 800748c:	015a      	lsls	r2, r3, #5
 800748e:	697b      	ldr	r3, [r7, #20]
 8007490:	4413      	add	r3, r2
 8007492:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007496:	691b      	ldr	r3, [r3, #16]
 8007498:	693a      	ldr	r2, [r7, #16]
 800749a:	0151      	lsls	r1, r2, #5
 800749c:	697a      	ldr	r2, [r7, #20]
 800749e:	440a      	add	r2, r1
 80074a0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80074a4:	0cdb      	lsrs	r3, r3, #19
 80074a6:	04db      	lsls	r3, r3, #19
 80074a8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80074aa:	693b      	ldr	r3, [r7, #16]
 80074ac:	015a      	lsls	r2, r3, #5
 80074ae:	697b      	ldr	r3, [r7, #20]
 80074b0:	4413      	add	r3, r2
 80074b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074b6:	691b      	ldr	r3, [r3, #16]
 80074b8:	693a      	ldr	r2, [r7, #16]
 80074ba:	0151      	lsls	r1, r2, #5
 80074bc:	697a      	ldr	r2, [r7, #20]
 80074be:	440a      	add	r2, r1
 80074c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80074c4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80074c8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80074cc:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80074ce:	68bb      	ldr	r3, [r7, #8]
 80074d0:	699b      	ldr	r3, [r3, #24]
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d003      	beq.n	80074de <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 80074d6:	68bb      	ldr	r3, [r7, #8]
 80074d8:	68da      	ldr	r2, [r3, #12]
 80074da:	68bb      	ldr	r3, [r7, #8]
 80074dc:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 80074de:	68bb      	ldr	r3, [r7, #8]
 80074e0:	68da      	ldr	r2, [r3, #12]
 80074e2:	68bb      	ldr	r3, [r7, #8]
 80074e4:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80074e6:	693b      	ldr	r3, [r7, #16]
 80074e8:	015a      	lsls	r2, r3, #5
 80074ea:	697b      	ldr	r3, [r7, #20]
 80074ec:	4413      	add	r3, r2
 80074ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074f2:	691b      	ldr	r3, [r3, #16]
 80074f4:	693a      	ldr	r2, [r7, #16]
 80074f6:	0151      	lsls	r1, r2, #5
 80074f8:	697a      	ldr	r2, [r7, #20]
 80074fa:	440a      	add	r2, r1
 80074fc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007500:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007504:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8007506:	693b      	ldr	r3, [r7, #16]
 8007508:	015a      	lsls	r2, r3, #5
 800750a:	697b      	ldr	r3, [r7, #20]
 800750c:	4413      	add	r3, r2
 800750e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007512:	691a      	ldr	r2, [r3, #16]
 8007514:	68bb      	ldr	r3, [r7, #8]
 8007516:	69db      	ldr	r3, [r3, #28]
 8007518:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800751c:	6939      	ldr	r1, [r7, #16]
 800751e:	0148      	lsls	r0, r1, #5
 8007520:	6979      	ldr	r1, [r7, #20]
 8007522:	4401      	add	r1, r0
 8007524:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007528:	4313      	orrs	r3, r2
 800752a:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800752c:	79fb      	ldrb	r3, [r7, #7]
 800752e:	2b01      	cmp	r3, #1
 8007530:	d10d      	bne.n	800754e <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8007532:	68bb      	ldr	r3, [r7, #8]
 8007534:	691b      	ldr	r3, [r3, #16]
 8007536:	2b00      	cmp	r3, #0
 8007538:	d009      	beq.n	800754e <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800753a:	68bb      	ldr	r3, [r7, #8]
 800753c:	6919      	ldr	r1, [r3, #16]
 800753e:	693b      	ldr	r3, [r7, #16]
 8007540:	015a      	lsls	r2, r3, #5
 8007542:	697b      	ldr	r3, [r7, #20]
 8007544:	4413      	add	r3, r2
 8007546:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800754a:	460a      	mov	r2, r1
 800754c:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800754e:	693b      	ldr	r3, [r7, #16]
 8007550:	015a      	lsls	r2, r3, #5
 8007552:	697b      	ldr	r3, [r7, #20]
 8007554:	4413      	add	r3, r2
 8007556:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	693a      	ldr	r2, [r7, #16]
 800755e:	0151      	lsls	r1, r2, #5
 8007560:	697a      	ldr	r2, [r7, #20]
 8007562:	440a      	add	r2, r1
 8007564:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007568:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800756c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800756e:	2300      	movs	r3, #0
}
 8007570:	4618      	mov	r0, r3
 8007572:	371c      	adds	r7, #28
 8007574:	46bd      	mov	sp, r7
 8007576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800757a:	4770      	bx	lr

0800757c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800757c:	b480      	push	{r7}
 800757e:	b087      	sub	sp, #28
 8007580:	af00      	add	r7, sp, #0
 8007582:	6078      	str	r0, [r7, #4]
 8007584:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007586:	2300      	movs	r3, #0
 8007588:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800758a:	2300      	movs	r3, #0
 800758c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007592:	683b      	ldr	r3, [r7, #0]
 8007594:	785b      	ldrb	r3, [r3, #1]
 8007596:	2b01      	cmp	r3, #1
 8007598:	d14a      	bne.n	8007630 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800759a:	683b      	ldr	r3, [r7, #0]
 800759c:	781b      	ldrb	r3, [r3, #0]
 800759e:	015a      	lsls	r2, r3, #5
 80075a0:	693b      	ldr	r3, [r7, #16]
 80075a2:	4413      	add	r3, r2
 80075a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80075ae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80075b2:	f040 8086 	bne.w	80076c2 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80075b6:	683b      	ldr	r3, [r7, #0]
 80075b8:	781b      	ldrb	r3, [r3, #0]
 80075ba:	015a      	lsls	r2, r3, #5
 80075bc:	693b      	ldr	r3, [r7, #16]
 80075be:	4413      	add	r3, r2
 80075c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	683a      	ldr	r2, [r7, #0]
 80075c8:	7812      	ldrb	r2, [r2, #0]
 80075ca:	0151      	lsls	r1, r2, #5
 80075cc:	693a      	ldr	r2, [r7, #16]
 80075ce:	440a      	add	r2, r1
 80075d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80075d4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80075d8:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80075da:	683b      	ldr	r3, [r7, #0]
 80075dc:	781b      	ldrb	r3, [r3, #0]
 80075de:	015a      	lsls	r2, r3, #5
 80075e0:	693b      	ldr	r3, [r7, #16]
 80075e2:	4413      	add	r3, r2
 80075e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	683a      	ldr	r2, [r7, #0]
 80075ec:	7812      	ldrb	r2, [r2, #0]
 80075ee:	0151      	lsls	r1, r2, #5
 80075f0:	693a      	ldr	r2, [r7, #16]
 80075f2:	440a      	add	r2, r1
 80075f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80075f8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80075fc:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	3301      	adds	r3, #1
 8007602:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	f242 7210 	movw	r2, #10000	; 0x2710
 800760a:	4293      	cmp	r3, r2
 800760c:	d902      	bls.n	8007614 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800760e:	2301      	movs	r3, #1
 8007610:	75fb      	strb	r3, [r7, #23]
          break;
 8007612:	e056      	b.n	80076c2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8007614:	683b      	ldr	r3, [r7, #0]
 8007616:	781b      	ldrb	r3, [r3, #0]
 8007618:	015a      	lsls	r2, r3, #5
 800761a:	693b      	ldr	r3, [r7, #16]
 800761c:	4413      	add	r3, r2
 800761e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007628:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800762c:	d0e7      	beq.n	80075fe <USB_EPStopXfer+0x82>
 800762e:	e048      	b.n	80076c2 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007630:	683b      	ldr	r3, [r7, #0]
 8007632:	781b      	ldrb	r3, [r3, #0]
 8007634:	015a      	lsls	r2, r3, #5
 8007636:	693b      	ldr	r3, [r7, #16]
 8007638:	4413      	add	r3, r2
 800763a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007644:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007648:	d13b      	bne.n	80076c2 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800764a:	683b      	ldr	r3, [r7, #0]
 800764c:	781b      	ldrb	r3, [r3, #0]
 800764e:	015a      	lsls	r2, r3, #5
 8007650:	693b      	ldr	r3, [r7, #16]
 8007652:	4413      	add	r3, r2
 8007654:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	683a      	ldr	r2, [r7, #0]
 800765c:	7812      	ldrb	r2, [r2, #0]
 800765e:	0151      	lsls	r1, r2, #5
 8007660:	693a      	ldr	r2, [r7, #16]
 8007662:	440a      	add	r2, r1
 8007664:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007668:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800766c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800766e:	683b      	ldr	r3, [r7, #0]
 8007670:	781b      	ldrb	r3, [r3, #0]
 8007672:	015a      	lsls	r2, r3, #5
 8007674:	693b      	ldr	r3, [r7, #16]
 8007676:	4413      	add	r3, r2
 8007678:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	683a      	ldr	r2, [r7, #0]
 8007680:	7812      	ldrb	r2, [r2, #0]
 8007682:	0151      	lsls	r1, r2, #5
 8007684:	693a      	ldr	r2, [r7, #16]
 8007686:	440a      	add	r2, r1
 8007688:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800768c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007690:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	3301      	adds	r3, #1
 8007696:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	f242 7210 	movw	r2, #10000	; 0x2710
 800769e:	4293      	cmp	r3, r2
 80076a0:	d902      	bls.n	80076a8 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80076a2:	2301      	movs	r3, #1
 80076a4:	75fb      	strb	r3, [r7, #23]
          break;
 80076a6:	e00c      	b.n	80076c2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80076a8:	683b      	ldr	r3, [r7, #0]
 80076aa:	781b      	ldrb	r3, [r3, #0]
 80076ac:	015a      	lsls	r2, r3, #5
 80076ae:	693b      	ldr	r3, [r7, #16]
 80076b0:	4413      	add	r3, r2
 80076b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80076bc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80076c0:	d0e7      	beq.n	8007692 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80076c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80076c4:	4618      	mov	r0, r3
 80076c6:	371c      	adds	r7, #28
 80076c8:	46bd      	mov	sp, r7
 80076ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ce:	4770      	bx	lr

080076d0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80076d0:	b480      	push	{r7}
 80076d2:	b089      	sub	sp, #36	; 0x24
 80076d4:	af00      	add	r7, sp, #0
 80076d6:	60f8      	str	r0, [r7, #12]
 80076d8:	60b9      	str	r1, [r7, #8]
 80076da:	4611      	mov	r1, r2
 80076dc:	461a      	mov	r2, r3
 80076de:	460b      	mov	r3, r1
 80076e0:	71fb      	strb	r3, [r7, #7]
 80076e2:	4613      	mov	r3, r2
 80076e4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80076ea:	68bb      	ldr	r3, [r7, #8]
 80076ec:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80076ee:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d123      	bne.n	800773e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80076f6:	88bb      	ldrh	r3, [r7, #4]
 80076f8:	3303      	adds	r3, #3
 80076fa:	089b      	lsrs	r3, r3, #2
 80076fc:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80076fe:	2300      	movs	r3, #0
 8007700:	61bb      	str	r3, [r7, #24]
 8007702:	e018      	b.n	8007736 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007704:	79fb      	ldrb	r3, [r7, #7]
 8007706:	031a      	lsls	r2, r3, #12
 8007708:	697b      	ldr	r3, [r7, #20]
 800770a:	4413      	add	r3, r2
 800770c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007710:	461a      	mov	r2, r3
 8007712:	69fb      	ldr	r3, [r7, #28]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007718:	69fb      	ldr	r3, [r7, #28]
 800771a:	3301      	adds	r3, #1
 800771c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800771e:	69fb      	ldr	r3, [r7, #28]
 8007720:	3301      	adds	r3, #1
 8007722:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007724:	69fb      	ldr	r3, [r7, #28]
 8007726:	3301      	adds	r3, #1
 8007728:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800772a:	69fb      	ldr	r3, [r7, #28]
 800772c:	3301      	adds	r3, #1
 800772e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007730:	69bb      	ldr	r3, [r7, #24]
 8007732:	3301      	adds	r3, #1
 8007734:	61bb      	str	r3, [r7, #24]
 8007736:	69ba      	ldr	r2, [r7, #24]
 8007738:	693b      	ldr	r3, [r7, #16]
 800773a:	429a      	cmp	r2, r3
 800773c:	d3e2      	bcc.n	8007704 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800773e:	2300      	movs	r3, #0
}
 8007740:	4618      	mov	r0, r3
 8007742:	3724      	adds	r7, #36	; 0x24
 8007744:	46bd      	mov	sp, r7
 8007746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800774a:	4770      	bx	lr

0800774c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800774c:	b480      	push	{r7}
 800774e:	b08b      	sub	sp, #44	; 0x2c
 8007750:	af00      	add	r7, sp, #0
 8007752:	60f8      	str	r0, [r7, #12]
 8007754:	60b9      	str	r1, [r7, #8]
 8007756:	4613      	mov	r3, r2
 8007758:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800775e:	68bb      	ldr	r3, [r7, #8]
 8007760:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8007762:	88fb      	ldrh	r3, [r7, #6]
 8007764:	089b      	lsrs	r3, r3, #2
 8007766:	b29b      	uxth	r3, r3
 8007768:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800776a:	88fb      	ldrh	r3, [r7, #6]
 800776c:	f003 0303 	and.w	r3, r3, #3
 8007770:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8007772:	2300      	movs	r3, #0
 8007774:	623b      	str	r3, [r7, #32]
 8007776:	e014      	b.n	80077a2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007778:	69bb      	ldr	r3, [r7, #24]
 800777a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800777e:	681a      	ldr	r2, [r3, #0]
 8007780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007782:	601a      	str	r2, [r3, #0]
    pDest++;
 8007784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007786:	3301      	adds	r3, #1
 8007788:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800778a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800778c:	3301      	adds	r3, #1
 800778e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007792:	3301      	adds	r3, #1
 8007794:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007798:	3301      	adds	r3, #1
 800779a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800779c:	6a3b      	ldr	r3, [r7, #32]
 800779e:	3301      	adds	r3, #1
 80077a0:	623b      	str	r3, [r7, #32]
 80077a2:	6a3a      	ldr	r2, [r7, #32]
 80077a4:	697b      	ldr	r3, [r7, #20]
 80077a6:	429a      	cmp	r2, r3
 80077a8:	d3e6      	bcc.n	8007778 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80077aa:	8bfb      	ldrh	r3, [r7, #30]
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d01e      	beq.n	80077ee <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80077b0:	2300      	movs	r3, #0
 80077b2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80077b4:	69bb      	ldr	r3, [r7, #24]
 80077b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80077ba:	461a      	mov	r2, r3
 80077bc:	f107 0310 	add.w	r3, r7, #16
 80077c0:	6812      	ldr	r2, [r2, #0]
 80077c2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80077c4:	693a      	ldr	r2, [r7, #16]
 80077c6:	6a3b      	ldr	r3, [r7, #32]
 80077c8:	b2db      	uxtb	r3, r3
 80077ca:	00db      	lsls	r3, r3, #3
 80077cc:	fa22 f303 	lsr.w	r3, r2, r3
 80077d0:	b2da      	uxtb	r2, r3
 80077d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077d4:	701a      	strb	r2, [r3, #0]
      i++;
 80077d6:	6a3b      	ldr	r3, [r7, #32]
 80077d8:	3301      	adds	r3, #1
 80077da:	623b      	str	r3, [r7, #32]
      pDest++;
 80077dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077de:	3301      	adds	r3, #1
 80077e0:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80077e2:	8bfb      	ldrh	r3, [r7, #30]
 80077e4:	3b01      	subs	r3, #1
 80077e6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80077e8:	8bfb      	ldrh	r3, [r7, #30]
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d1ea      	bne.n	80077c4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80077ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80077f0:	4618      	mov	r0, r3
 80077f2:	372c      	adds	r7, #44	; 0x2c
 80077f4:	46bd      	mov	sp, r7
 80077f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077fa:	4770      	bx	lr

080077fc <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80077fc:	b480      	push	{r7}
 80077fe:	b085      	sub	sp, #20
 8007800:	af00      	add	r7, sp, #0
 8007802:	6078      	str	r0, [r7, #4]
 8007804:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800780a:	683b      	ldr	r3, [r7, #0]
 800780c:	781b      	ldrb	r3, [r3, #0]
 800780e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007810:	683b      	ldr	r3, [r7, #0]
 8007812:	785b      	ldrb	r3, [r3, #1]
 8007814:	2b01      	cmp	r3, #1
 8007816:	d12c      	bne.n	8007872 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007818:	68bb      	ldr	r3, [r7, #8]
 800781a:	015a      	lsls	r2, r3, #5
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	4413      	add	r3, r2
 8007820:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	2b00      	cmp	r3, #0
 8007828:	db12      	blt.n	8007850 <USB_EPSetStall+0x54>
 800782a:	68bb      	ldr	r3, [r7, #8]
 800782c:	2b00      	cmp	r3, #0
 800782e:	d00f      	beq.n	8007850 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8007830:	68bb      	ldr	r3, [r7, #8]
 8007832:	015a      	lsls	r2, r3, #5
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	4413      	add	r3, r2
 8007838:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	68ba      	ldr	r2, [r7, #8]
 8007840:	0151      	lsls	r1, r2, #5
 8007842:	68fa      	ldr	r2, [r7, #12]
 8007844:	440a      	add	r2, r1
 8007846:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800784a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800784e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8007850:	68bb      	ldr	r3, [r7, #8]
 8007852:	015a      	lsls	r2, r3, #5
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	4413      	add	r3, r2
 8007858:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	68ba      	ldr	r2, [r7, #8]
 8007860:	0151      	lsls	r1, r2, #5
 8007862:	68fa      	ldr	r2, [r7, #12]
 8007864:	440a      	add	r2, r1
 8007866:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800786a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800786e:	6013      	str	r3, [r2, #0]
 8007870:	e02b      	b.n	80078ca <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007872:	68bb      	ldr	r3, [r7, #8]
 8007874:	015a      	lsls	r2, r3, #5
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	4413      	add	r3, r2
 800787a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	2b00      	cmp	r3, #0
 8007882:	db12      	blt.n	80078aa <USB_EPSetStall+0xae>
 8007884:	68bb      	ldr	r3, [r7, #8]
 8007886:	2b00      	cmp	r3, #0
 8007888:	d00f      	beq.n	80078aa <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800788a:	68bb      	ldr	r3, [r7, #8]
 800788c:	015a      	lsls	r2, r3, #5
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	4413      	add	r3, r2
 8007892:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	68ba      	ldr	r2, [r7, #8]
 800789a:	0151      	lsls	r1, r2, #5
 800789c:	68fa      	ldr	r2, [r7, #12]
 800789e:	440a      	add	r2, r1
 80078a0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80078a4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80078a8:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80078aa:	68bb      	ldr	r3, [r7, #8]
 80078ac:	015a      	lsls	r2, r3, #5
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	4413      	add	r3, r2
 80078b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	68ba      	ldr	r2, [r7, #8]
 80078ba:	0151      	lsls	r1, r2, #5
 80078bc:	68fa      	ldr	r2, [r7, #12]
 80078be:	440a      	add	r2, r1
 80078c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80078c4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80078c8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80078ca:	2300      	movs	r3, #0
}
 80078cc:	4618      	mov	r0, r3
 80078ce:	3714      	adds	r7, #20
 80078d0:	46bd      	mov	sp, r7
 80078d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d6:	4770      	bx	lr

080078d8 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80078d8:	b480      	push	{r7}
 80078da:	b085      	sub	sp, #20
 80078dc:	af00      	add	r7, sp, #0
 80078de:	6078      	str	r0, [r7, #4]
 80078e0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80078e6:	683b      	ldr	r3, [r7, #0]
 80078e8:	781b      	ldrb	r3, [r3, #0]
 80078ea:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80078ec:	683b      	ldr	r3, [r7, #0]
 80078ee:	785b      	ldrb	r3, [r3, #1]
 80078f0:	2b01      	cmp	r3, #1
 80078f2:	d128      	bne.n	8007946 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80078f4:	68bb      	ldr	r3, [r7, #8]
 80078f6:	015a      	lsls	r2, r3, #5
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	4413      	add	r3, r2
 80078fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	68ba      	ldr	r2, [r7, #8]
 8007904:	0151      	lsls	r1, r2, #5
 8007906:	68fa      	ldr	r2, [r7, #12]
 8007908:	440a      	add	r2, r1
 800790a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800790e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007912:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007914:	683b      	ldr	r3, [r7, #0]
 8007916:	791b      	ldrb	r3, [r3, #4]
 8007918:	2b03      	cmp	r3, #3
 800791a:	d003      	beq.n	8007924 <USB_EPClearStall+0x4c>
 800791c:	683b      	ldr	r3, [r7, #0]
 800791e:	791b      	ldrb	r3, [r3, #4]
 8007920:	2b02      	cmp	r3, #2
 8007922:	d138      	bne.n	8007996 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007924:	68bb      	ldr	r3, [r7, #8]
 8007926:	015a      	lsls	r2, r3, #5
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	4413      	add	r3, r2
 800792c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	68ba      	ldr	r2, [r7, #8]
 8007934:	0151      	lsls	r1, r2, #5
 8007936:	68fa      	ldr	r2, [r7, #12]
 8007938:	440a      	add	r2, r1
 800793a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800793e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007942:	6013      	str	r3, [r2, #0]
 8007944:	e027      	b.n	8007996 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007946:	68bb      	ldr	r3, [r7, #8]
 8007948:	015a      	lsls	r2, r3, #5
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	4413      	add	r3, r2
 800794e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	68ba      	ldr	r2, [r7, #8]
 8007956:	0151      	lsls	r1, r2, #5
 8007958:	68fa      	ldr	r2, [r7, #12]
 800795a:	440a      	add	r2, r1
 800795c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007960:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007964:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007966:	683b      	ldr	r3, [r7, #0]
 8007968:	791b      	ldrb	r3, [r3, #4]
 800796a:	2b03      	cmp	r3, #3
 800796c:	d003      	beq.n	8007976 <USB_EPClearStall+0x9e>
 800796e:	683b      	ldr	r3, [r7, #0]
 8007970:	791b      	ldrb	r3, [r3, #4]
 8007972:	2b02      	cmp	r3, #2
 8007974:	d10f      	bne.n	8007996 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007976:	68bb      	ldr	r3, [r7, #8]
 8007978:	015a      	lsls	r2, r3, #5
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	4413      	add	r3, r2
 800797e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	68ba      	ldr	r2, [r7, #8]
 8007986:	0151      	lsls	r1, r2, #5
 8007988:	68fa      	ldr	r2, [r7, #12]
 800798a:	440a      	add	r2, r1
 800798c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007990:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007994:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8007996:	2300      	movs	r3, #0
}
 8007998:	4618      	mov	r0, r3
 800799a:	3714      	adds	r7, #20
 800799c:	46bd      	mov	sp, r7
 800799e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a2:	4770      	bx	lr

080079a4 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80079a4:	b480      	push	{r7}
 80079a6:	b085      	sub	sp, #20
 80079a8:	af00      	add	r7, sp, #0
 80079aa:	6078      	str	r0, [r7, #4]
 80079ac:	460b      	mov	r3, r1
 80079ae:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	68fa      	ldr	r2, [r7, #12]
 80079be:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80079c2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80079c6:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80079ce:	681a      	ldr	r2, [r3, #0]
 80079d0:	78fb      	ldrb	r3, [r7, #3]
 80079d2:	011b      	lsls	r3, r3, #4
 80079d4:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80079d8:	68f9      	ldr	r1, [r7, #12]
 80079da:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80079de:	4313      	orrs	r3, r2
 80079e0:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80079e2:	2300      	movs	r3, #0
}
 80079e4:	4618      	mov	r0, r3
 80079e6:	3714      	adds	r7, #20
 80079e8:	46bd      	mov	sp, r7
 80079ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ee:	4770      	bx	lr

080079f0 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80079f0:	b480      	push	{r7}
 80079f2:	b085      	sub	sp, #20
 80079f4:	af00      	add	r7, sp, #0
 80079f6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	68fa      	ldr	r2, [r7, #12]
 8007a06:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007a0a:	f023 0303 	bic.w	r3, r3, #3
 8007a0e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a16:	685b      	ldr	r3, [r3, #4]
 8007a18:	68fa      	ldr	r2, [r7, #12]
 8007a1a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007a1e:	f023 0302 	bic.w	r3, r3, #2
 8007a22:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007a24:	2300      	movs	r3, #0
}
 8007a26:	4618      	mov	r0, r3
 8007a28:	3714      	adds	r7, #20
 8007a2a:	46bd      	mov	sp, r7
 8007a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a30:	4770      	bx	lr

08007a32 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007a32:	b480      	push	{r7}
 8007a34:	b085      	sub	sp, #20
 8007a36:	af00      	add	r7, sp, #0
 8007a38:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	68fa      	ldr	r2, [r7, #12]
 8007a48:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007a4c:	f023 0303 	bic.w	r3, r3, #3
 8007a50:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a58:	685b      	ldr	r3, [r3, #4]
 8007a5a:	68fa      	ldr	r2, [r7, #12]
 8007a5c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007a60:	f043 0302 	orr.w	r3, r3, #2
 8007a64:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007a66:	2300      	movs	r3, #0
}
 8007a68:	4618      	mov	r0, r3
 8007a6a:	3714      	adds	r7, #20
 8007a6c:	46bd      	mov	sp, r7
 8007a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a72:	4770      	bx	lr

08007a74 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8007a74:	b480      	push	{r7}
 8007a76:	b085      	sub	sp, #20
 8007a78:	af00      	add	r7, sp, #0
 8007a7a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	695b      	ldr	r3, [r3, #20]
 8007a80:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	699b      	ldr	r3, [r3, #24]
 8007a86:	68fa      	ldr	r2, [r7, #12]
 8007a88:	4013      	ands	r3, r2
 8007a8a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007a8c:	68fb      	ldr	r3, [r7, #12]
}
 8007a8e:	4618      	mov	r0, r3
 8007a90:	3714      	adds	r7, #20
 8007a92:	46bd      	mov	sp, r7
 8007a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a98:	4770      	bx	lr

08007a9a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007a9a:	b480      	push	{r7}
 8007a9c:	b085      	sub	sp, #20
 8007a9e:	af00      	add	r7, sp, #0
 8007aa0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007aac:	699b      	ldr	r3, [r3, #24]
 8007aae:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ab6:	69db      	ldr	r3, [r3, #28]
 8007ab8:	68ba      	ldr	r2, [r7, #8]
 8007aba:	4013      	ands	r3, r2
 8007abc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8007abe:	68bb      	ldr	r3, [r7, #8]
 8007ac0:	0c1b      	lsrs	r3, r3, #16
}
 8007ac2:	4618      	mov	r0, r3
 8007ac4:	3714      	adds	r7, #20
 8007ac6:	46bd      	mov	sp, r7
 8007ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007acc:	4770      	bx	lr

08007ace <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007ace:	b480      	push	{r7}
 8007ad0:	b085      	sub	sp, #20
 8007ad2:	af00      	add	r7, sp, #0
 8007ad4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ae0:	699b      	ldr	r3, [r3, #24]
 8007ae2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007aea:	69db      	ldr	r3, [r3, #28]
 8007aec:	68ba      	ldr	r2, [r7, #8]
 8007aee:	4013      	ands	r3, r2
 8007af0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8007af2:	68bb      	ldr	r3, [r7, #8]
 8007af4:	b29b      	uxth	r3, r3
}
 8007af6:	4618      	mov	r0, r3
 8007af8:	3714      	adds	r7, #20
 8007afa:	46bd      	mov	sp, r7
 8007afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b00:	4770      	bx	lr

08007b02 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007b02:	b480      	push	{r7}
 8007b04:	b085      	sub	sp, #20
 8007b06:	af00      	add	r7, sp, #0
 8007b08:	6078      	str	r0, [r7, #4]
 8007b0a:	460b      	mov	r3, r1
 8007b0c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8007b12:	78fb      	ldrb	r3, [r7, #3]
 8007b14:	015a      	lsls	r2, r3, #5
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	4413      	add	r3, r2
 8007b1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b1e:	689b      	ldr	r3, [r3, #8]
 8007b20:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b28:	695b      	ldr	r3, [r3, #20]
 8007b2a:	68ba      	ldr	r2, [r7, #8]
 8007b2c:	4013      	ands	r3, r2
 8007b2e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007b30:	68bb      	ldr	r3, [r7, #8]
}
 8007b32:	4618      	mov	r0, r3
 8007b34:	3714      	adds	r7, #20
 8007b36:	46bd      	mov	sp, r7
 8007b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b3c:	4770      	bx	lr

08007b3e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007b3e:	b480      	push	{r7}
 8007b40:	b087      	sub	sp, #28
 8007b42:	af00      	add	r7, sp, #0
 8007b44:	6078      	str	r0, [r7, #4]
 8007b46:	460b      	mov	r3, r1
 8007b48:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8007b4e:	697b      	ldr	r3, [r7, #20]
 8007b50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b54:	691b      	ldr	r3, [r3, #16]
 8007b56:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8007b58:	697b      	ldr	r3, [r7, #20]
 8007b5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b60:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8007b62:	78fb      	ldrb	r3, [r7, #3]
 8007b64:	f003 030f 	and.w	r3, r3, #15
 8007b68:	68fa      	ldr	r2, [r7, #12]
 8007b6a:	fa22 f303 	lsr.w	r3, r2, r3
 8007b6e:	01db      	lsls	r3, r3, #7
 8007b70:	b2db      	uxtb	r3, r3
 8007b72:	693a      	ldr	r2, [r7, #16]
 8007b74:	4313      	orrs	r3, r2
 8007b76:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8007b78:	78fb      	ldrb	r3, [r7, #3]
 8007b7a:	015a      	lsls	r2, r3, #5
 8007b7c:	697b      	ldr	r3, [r7, #20]
 8007b7e:	4413      	add	r3, r2
 8007b80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b84:	689b      	ldr	r3, [r3, #8]
 8007b86:	693a      	ldr	r2, [r7, #16]
 8007b88:	4013      	ands	r3, r2
 8007b8a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007b8c:	68bb      	ldr	r3, [r7, #8]
}
 8007b8e:	4618      	mov	r0, r3
 8007b90:	371c      	adds	r7, #28
 8007b92:	46bd      	mov	sp, r7
 8007b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b98:	4770      	bx	lr

08007b9a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007b9a:	b480      	push	{r7}
 8007b9c:	b083      	sub	sp, #12
 8007b9e:	af00      	add	r7, sp, #0
 8007ba0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	695b      	ldr	r3, [r3, #20]
 8007ba6:	f003 0301 	and.w	r3, r3, #1
}
 8007baa:	4618      	mov	r0, r3
 8007bac:	370c      	adds	r7, #12
 8007bae:	46bd      	mov	sp, r7
 8007bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb4:	4770      	bx	lr

08007bb6 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8007bb6:	b480      	push	{r7}
 8007bb8:	b085      	sub	sp, #20
 8007bba:	af00      	add	r7, sp, #0
 8007bbc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	68fa      	ldr	r2, [r7, #12]
 8007bcc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007bd0:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8007bd4:	f023 0307 	bic.w	r3, r3, #7
 8007bd8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007be0:	685b      	ldr	r3, [r3, #4]
 8007be2:	68fa      	ldr	r2, [r7, #12]
 8007be4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007be8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007bec:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007bee:	2300      	movs	r3, #0
}
 8007bf0:	4618      	mov	r0, r3
 8007bf2:	3714      	adds	r7, #20
 8007bf4:	46bd      	mov	sp, r7
 8007bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bfa:	4770      	bx	lr

08007bfc <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8007bfc:	b480      	push	{r7}
 8007bfe:	b087      	sub	sp, #28
 8007c00:	af00      	add	r7, sp, #0
 8007c02:	60f8      	str	r0, [r7, #12]
 8007c04:	460b      	mov	r3, r1
 8007c06:	607a      	str	r2, [r7, #4]
 8007c08:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	333c      	adds	r3, #60	; 0x3c
 8007c12:	3304      	adds	r3, #4
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8007c18:	693b      	ldr	r3, [r7, #16]
 8007c1a:	4a26      	ldr	r2, [pc, #152]	; (8007cb4 <USB_EP0_OutStart+0xb8>)
 8007c1c:	4293      	cmp	r3, r2
 8007c1e:	d90a      	bls.n	8007c36 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007c20:	697b      	ldr	r3, [r7, #20]
 8007c22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007c2c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007c30:	d101      	bne.n	8007c36 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8007c32:	2300      	movs	r3, #0
 8007c34:	e037      	b.n	8007ca6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8007c36:	697b      	ldr	r3, [r7, #20]
 8007c38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c3c:	461a      	mov	r2, r3
 8007c3e:	2300      	movs	r3, #0
 8007c40:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007c42:	697b      	ldr	r3, [r7, #20]
 8007c44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c48:	691b      	ldr	r3, [r3, #16]
 8007c4a:	697a      	ldr	r2, [r7, #20]
 8007c4c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007c50:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007c54:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8007c56:	697b      	ldr	r3, [r7, #20]
 8007c58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c5c:	691b      	ldr	r3, [r3, #16]
 8007c5e:	697a      	ldr	r2, [r7, #20]
 8007c60:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007c64:	f043 0318 	orr.w	r3, r3, #24
 8007c68:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8007c6a:	697b      	ldr	r3, [r7, #20]
 8007c6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c70:	691b      	ldr	r3, [r3, #16]
 8007c72:	697a      	ldr	r2, [r7, #20]
 8007c74:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007c78:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8007c7c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8007c7e:	7afb      	ldrb	r3, [r7, #11]
 8007c80:	2b01      	cmp	r3, #1
 8007c82:	d10f      	bne.n	8007ca4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8007c84:	697b      	ldr	r3, [r7, #20]
 8007c86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c8a:	461a      	mov	r2, r3
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8007c90:	697b      	ldr	r3, [r7, #20]
 8007c92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	697a      	ldr	r2, [r7, #20]
 8007c9a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007c9e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8007ca2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007ca4:	2300      	movs	r3, #0
}
 8007ca6:	4618      	mov	r0, r3
 8007ca8:	371c      	adds	r7, #28
 8007caa:	46bd      	mov	sp, r7
 8007cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb0:	4770      	bx	lr
 8007cb2:	bf00      	nop
 8007cb4:	4f54300a 	.word	0x4f54300a

08007cb8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007cb8:	b480      	push	{r7}
 8007cba:	b085      	sub	sp, #20
 8007cbc:	af00      	add	r7, sp, #0
 8007cbe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007cc0:	2300      	movs	r3, #0
 8007cc2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	3301      	adds	r3, #1
 8007cc8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	4a13      	ldr	r2, [pc, #76]	; (8007d1c <USB_CoreReset+0x64>)
 8007cce:	4293      	cmp	r3, r2
 8007cd0:	d901      	bls.n	8007cd6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007cd2:	2303      	movs	r3, #3
 8007cd4:	e01b      	b.n	8007d0e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	691b      	ldr	r3, [r3, #16]
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	daf2      	bge.n	8007cc4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007cde:	2300      	movs	r3, #0
 8007ce0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	691b      	ldr	r3, [r3, #16]
 8007ce6:	f043 0201 	orr.w	r2, r3, #1
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	3301      	adds	r3, #1
 8007cf2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	4a09      	ldr	r2, [pc, #36]	; (8007d1c <USB_CoreReset+0x64>)
 8007cf8:	4293      	cmp	r3, r2
 8007cfa:	d901      	bls.n	8007d00 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007cfc:	2303      	movs	r3, #3
 8007cfe:	e006      	b.n	8007d0e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	691b      	ldr	r3, [r3, #16]
 8007d04:	f003 0301 	and.w	r3, r3, #1
 8007d08:	2b01      	cmp	r3, #1
 8007d0a:	d0f0      	beq.n	8007cee <USB_CoreReset+0x36>

  return HAL_OK;
 8007d0c:	2300      	movs	r3, #0
}
 8007d0e:	4618      	mov	r0, r3
 8007d10:	3714      	adds	r7, #20
 8007d12:	46bd      	mov	sp, r7
 8007d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d18:	4770      	bx	lr
 8007d1a:	bf00      	nop
 8007d1c:	00030d40 	.word	0x00030d40

08007d20 <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007d20:	b580      	push	{r7, lr}
 8007d22:	b084      	sub	sp, #16
 8007d24:	af00      	add	r7, sp, #0
 8007d26:	6078      	str	r0, [r7, #4]
 8007d28:	460b      	mov	r3, r1
 8007d2a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_HID_HandleTypeDef *hhid;

  hhid = (USBD_HID_HandleTypeDef *)USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 8007d2c:	2010      	movs	r0, #16
 8007d2e:	f002 f929 	bl	8009f84 <USBD_static_malloc>
 8007d32:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d109      	bne.n	8007d4e <USBD_HID_Init+0x2e>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	32b0      	adds	r2, #176	; 0xb0
 8007d44:	2100      	movs	r1, #0
 8007d46:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8007d4a:	2302      	movs	r3, #2
 8007d4c:	e048      	b.n	8007de0 <USBD_HID_Init+0xc0>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hhid;
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	32b0      	adds	r2, #176	; 0xb0
 8007d58:	68f9      	ldr	r1, [r7, #12]
 8007d5a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	32b0      	adds	r2, #176	; 0xb0
 8007d68:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	7c1b      	ldrb	r3, [r3, #16]
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d10d      	bne.n	8007d96 <USBD_HID_Init+0x76>
  {
    pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = HID_HS_BINTERVAL;
 8007d7a:	4b1b      	ldr	r3, [pc, #108]	; (8007de8 <USBD_HID_Init+0xc8>)
 8007d7c:	781b      	ldrb	r3, [r3, #0]
 8007d7e:	f003 020f 	and.w	r2, r3, #15
 8007d82:	6879      	ldr	r1, [r7, #4]
 8007d84:	4613      	mov	r3, r2
 8007d86:	009b      	lsls	r3, r3, #2
 8007d88:	4413      	add	r3, r2
 8007d8a:	009b      	lsls	r3, r3, #2
 8007d8c:	440b      	add	r3, r1
 8007d8e:	3326      	adds	r3, #38	; 0x26
 8007d90:	2207      	movs	r2, #7
 8007d92:	801a      	strh	r2, [r3, #0]
 8007d94:	e00c      	b.n	8007db0 <USBD_HID_Init+0x90>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = HID_FS_BINTERVAL;
 8007d96:	4b14      	ldr	r3, [pc, #80]	; (8007de8 <USBD_HID_Init+0xc8>)
 8007d98:	781b      	ldrb	r3, [r3, #0]
 8007d9a:	f003 020f 	and.w	r2, r3, #15
 8007d9e:	6879      	ldr	r1, [r7, #4]
 8007da0:	4613      	mov	r3, r2
 8007da2:	009b      	lsls	r3, r3, #2
 8007da4:	4413      	add	r3, r2
 8007da6:	009b      	lsls	r3, r3, #2
 8007da8:	440b      	add	r3, r1
 8007daa:	3326      	adds	r3, #38	; 0x26
 8007dac:	220a      	movs	r2, #10
 8007dae:	801a      	strh	r2, [r3, #0]
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, HIDInEpAdd, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 8007db0:	4b0d      	ldr	r3, [pc, #52]	; (8007de8 <USBD_HID_Init+0xc8>)
 8007db2:	7819      	ldrb	r1, [r3, #0]
 8007db4:	2304      	movs	r3, #4
 8007db6:	2203      	movs	r2, #3
 8007db8:	6878      	ldr	r0, [r7, #4]
 8007dba:	f001 ffd2 	bl	8009d62 <USBD_LL_OpenEP>
  pdev->ep_in[HIDInEpAdd & 0xFU].is_used = 1U;
 8007dbe:	4b0a      	ldr	r3, [pc, #40]	; (8007de8 <USBD_HID_Init+0xc8>)
 8007dc0:	781b      	ldrb	r3, [r3, #0]
 8007dc2:	f003 020f 	and.w	r2, r3, #15
 8007dc6:	6879      	ldr	r1, [r7, #4]
 8007dc8:	4613      	mov	r3, r2
 8007dca:	009b      	lsls	r3, r3, #2
 8007dcc:	4413      	add	r3, r2
 8007dce:	009b      	lsls	r3, r3, #2
 8007dd0:	440b      	add	r3, r1
 8007dd2:	3324      	adds	r3, #36	; 0x24
 8007dd4:	2201      	movs	r2, #1
 8007dd6:	801a      	strh	r2, [r3, #0]

  hhid->state = HID_IDLE;
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	2200      	movs	r2, #0
 8007ddc:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 8007dde:	2300      	movs	r3, #0
}
 8007de0:	4618      	mov	r0, r3
 8007de2:	3710      	adds	r7, #16
 8007de4:	46bd      	mov	sp, r7
 8007de6:	bd80      	pop	{r7, pc}
 8007de8:	2000011b 	.word	0x2000011b

08007dec <USBD_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007dec:	b580      	push	{r7, lr}
 8007dee:	b082      	sub	sp, #8
 8007df0:	af00      	add	r7, sp, #0
 8007df2:	6078      	str	r0, [r7, #4]
 8007df4:	460b      	mov	r3, r1
 8007df6:	70fb      	strb	r3, [r7, #3]
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close HID EPs */
  (void)USBD_LL_CloseEP(pdev, HIDInEpAdd);
 8007df8:	4b1f      	ldr	r3, [pc, #124]	; (8007e78 <USBD_HID_DeInit+0x8c>)
 8007dfa:	781b      	ldrb	r3, [r3, #0]
 8007dfc:	4619      	mov	r1, r3
 8007dfe:	6878      	ldr	r0, [r7, #4]
 8007e00:	f001 ffd5 	bl	8009dae <USBD_LL_CloseEP>
  pdev->ep_in[HIDInEpAdd & 0xFU].is_used = 0U;
 8007e04:	4b1c      	ldr	r3, [pc, #112]	; (8007e78 <USBD_HID_DeInit+0x8c>)
 8007e06:	781b      	ldrb	r3, [r3, #0]
 8007e08:	f003 020f 	and.w	r2, r3, #15
 8007e0c:	6879      	ldr	r1, [r7, #4]
 8007e0e:	4613      	mov	r3, r2
 8007e10:	009b      	lsls	r3, r3, #2
 8007e12:	4413      	add	r3, r2
 8007e14:	009b      	lsls	r3, r3, #2
 8007e16:	440b      	add	r3, r1
 8007e18:	3324      	adds	r3, #36	; 0x24
 8007e1a:	2200      	movs	r2, #0
 8007e1c:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = 0U;
 8007e1e:	4b16      	ldr	r3, [pc, #88]	; (8007e78 <USBD_HID_DeInit+0x8c>)
 8007e20:	781b      	ldrb	r3, [r3, #0]
 8007e22:	f003 020f 	and.w	r2, r3, #15
 8007e26:	6879      	ldr	r1, [r7, #4]
 8007e28:	4613      	mov	r3, r2
 8007e2a:	009b      	lsls	r3, r3, #2
 8007e2c:	4413      	add	r3, r2
 8007e2e:	009b      	lsls	r3, r3, #2
 8007e30:	440b      	add	r3, r1
 8007e32:	3326      	adds	r3, #38	; 0x26
 8007e34:	2200      	movs	r2, #0
 8007e36:	801a      	strh	r2, [r3, #0]

  /* Free allocated memory */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	32b0      	adds	r2, #176	; 0xb0
 8007e42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d011      	beq.n	8007e6e <USBD_HID_DeInit+0x82>
  {
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	32b0      	adds	r2, #176	; 0xb0
 8007e54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e58:	4618      	mov	r0, r3
 8007e5a:	f002 f8a1 	bl	8009fa0 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	32b0      	adds	r2, #176	; 0xb0
 8007e68:	2100      	movs	r1, #0
 8007e6a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return (uint8_t)USBD_OK;
 8007e6e:	2300      	movs	r3, #0
}
 8007e70:	4618      	mov	r0, r3
 8007e72:	3708      	adds	r7, #8
 8007e74:	46bd      	mov	sp, r7
 8007e76:	bd80      	pop	{r7, pc}
 8007e78:	2000011b 	.word	0x2000011b

08007e7c <USBD_HID_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_HID_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007e7c:	b580      	push	{r7, lr}
 8007e7e:	b086      	sub	sp, #24
 8007e80:	af00      	add	r7, sp, #0
 8007e82:	6078      	str	r0, [r7, #4]
 8007e84:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	32b0      	adds	r2, #176	; 0xb0
 8007e90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e94:	60fb      	str	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 8007e96:	2300      	movs	r3, #0
 8007e98:	75fb      	strb	r3, [r7, #23]
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 8007e9a:	2300      	movs	r3, #0
 8007e9c:	817b      	strh	r3, [r7, #10]

  if (hhid == NULL)
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d101      	bne.n	8007ea8 <USBD_HID_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 8007ea4:	2303      	movs	r3, #3
 8007ea6:	e0e8      	b.n	800807a <USBD_HID_Setup+0x1fe>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007ea8:	683b      	ldr	r3, [r7, #0]
 8007eaa:	781b      	ldrb	r3, [r3, #0]
 8007eac:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d046      	beq.n	8007f42 <USBD_HID_Setup+0xc6>
 8007eb4:	2b20      	cmp	r3, #32
 8007eb6:	f040 80d8 	bne.w	800806a <USBD_HID_Setup+0x1ee>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 8007eba:	683b      	ldr	r3, [r7, #0]
 8007ebc:	785b      	ldrb	r3, [r3, #1]
 8007ebe:	3b02      	subs	r3, #2
 8007ec0:	2b09      	cmp	r3, #9
 8007ec2:	d836      	bhi.n	8007f32 <USBD_HID_Setup+0xb6>
 8007ec4:	a201      	add	r2, pc, #4	; (adr r2, 8007ecc <USBD_HID_Setup+0x50>)
 8007ec6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007eca:	bf00      	nop
 8007ecc:	08007f23 	.word	0x08007f23
 8007ed0:	08007f03 	.word	0x08007f03
 8007ed4:	08007f33 	.word	0x08007f33
 8007ed8:	08007f33 	.word	0x08007f33
 8007edc:	08007f33 	.word	0x08007f33
 8007ee0:	08007f33 	.word	0x08007f33
 8007ee4:	08007f33 	.word	0x08007f33
 8007ee8:	08007f33 	.word	0x08007f33
 8007eec:	08007f11 	.word	0x08007f11
 8007ef0:	08007ef5 	.word	0x08007ef5
      {
        case HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8007ef4:	683b      	ldr	r3, [r7, #0]
 8007ef6:	885b      	ldrh	r3, [r3, #2]
 8007ef8:	b2db      	uxtb	r3, r3
 8007efa:	461a      	mov	r2, r3
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	601a      	str	r2, [r3, #0]
          break;
 8007f00:	e01e      	b.n	8007f40 <USBD_HID_Setup+0xc4>

        case HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	2201      	movs	r2, #1
 8007f06:	4619      	mov	r1, r3
 8007f08:	6878      	ldr	r0, [r7, #4]
 8007f0a:	f001 fbd5 	bl	80096b8 <USBD_CtlSendData>
          break;
 8007f0e:	e017      	b.n	8007f40 <USBD_HID_Setup+0xc4>

        case HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8007f10:	683b      	ldr	r3, [r7, #0]
 8007f12:	885b      	ldrh	r3, [r3, #2]
 8007f14:	0a1b      	lsrs	r3, r3, #8
 8007f16:	b29b      	uxth	r3, r3
 8007f18:	b2db      	uxtb	r3, r3
 8007f1a:	461a      	mov	r2, r3
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	605a      	str	r2, [r3, #4]
          break;
 8007f20:	e00e      	b.n	8007f40 <USBD_HID_Setup+0xc4>

        case HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	3304      	adds	r3, #4
 8007f26:	2201      	movs	r2, #1
 8007f28:	4619      	mov	r1, r3
 8007f2a:	6878      	ldr	r0, [r7, #4]
 8007f2c:	f001 fbc4 	bl	80096b8 <USBD_CtlSendData>
          break;
 8007f30:	e006      	b.n	8007f40 <USBD_HID_Setup+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8007f32:	6839      	ldr	r1, [r7, #0]
 8007f34:	6878      	ldr	r0, [r7, #4]
 8007f36:	f001 fb4e 	bl	80095d6 <USBD_CtlError>
          ret = USBD_FAIL;
 8007f3a:	2303      	movs	r3, #3
 8007f3c:	75fb      	strb	r3, [r7, #23]
          break;
 8007f3e:	bf00      	nop
      }
      break;
 8007f40:	e09a      	b.n	8008078 <USBD_HID_Setup+0x1fc>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007f42:	683b      	ldr	r3, [r7, #0]
 8007f44:	785b      	ldrb	r3, [r3, #1]
 8007f46:	2b0b      	cmp	r3, #11
 8007f48:	f200 8086 	bhi.w	8008058 <USBD_HID_Setup+0x1dc>
 8007f4c:	a201      	add	r2, pc, #4	; (adr r2, 8007f54 <USBD_HID_Setup+0xd8>)
 8007f4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f52:	bf00      	nop
 8007f54:	08007f85 	.word	0x08007f85
 8007f58:	08008067 	.word	0x08008067
 8007f5c:	08008059 	.word	0x08008059
 8007f60:	08008059 	.word	0x08008059
 8007f64:	08008059 	.word	0x08008059
 8007f68:	08008059 	.word	0x08008059
 8007f6c:	08007faf 	.word	0x08007faf
 8007f70:	08008059 	.word	0x08008059
 8007f74:	08008059 	.word	0x08008059
 8007f78:	08008059 	.word	0x08008059
 8007f7c:	08008007 	.word	0x08008007
 8007f80:	08008031 	.word	0x08008031
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f8a:	b2db      	uxtb	r3, r3
 8007f8c:	2b03      	cmp	r3, #3
 8007f8e:	d107      	bne.n	8007fa0 <USBD_HID_Setup+0x124>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007f90:	f107 030a 	add.w	r3, r7, #10
 8007f94:	2202      	movs	r2, #2
 8007f96:	4619      	mov	r1, r3
 8007f98:	6878      	ldr	r0, [r7, #4]
 8007f9a:	f001 fb8d 	bl	80096b8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007f9e:	e063      	b.n	8008068 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 8007fa0:	6839      	ldr	r1, [r7, #0]
 8007fa2:	6878      	ldr	r0, [r7, #4]
 8007fa4:	f001 fb17 	bl	80095d6 <USBD_CtlError>
            ret = USBD_FAIL;
 8007fa8:	2303      	movs	r3, #3
 8007faa:	75fb      	strb	r3, [r7, #23]
          break;
 8007fac:	e05c      	b.n	8008068 <USBD_HID_Setup+0x1ec>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == HID_REPORT_DESC)
 8007fae:	683b      	ldr	r3, [r7, #0]
 8007fb0:	885b      	ldrh	r3, [r3, #2]
 8007fb2:	0a1b      	lsrs	r3, r3, #8
 8007fb4:	b29b      	uxth	r3, r3
 8007fb6:	2b22      	cmp	r3, #34	; 0x22
 8007fb8:	d108      	bne.n	8007fcc <USBD_HID_Setup+0x150>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 8007fba:	683b      	ldr	r3, [r7, #0]
 8007fbc:	88db      	ldrh	r3, [r3, #6]
 8007fbe:	2b3f      	cmp	r3, #63	; 0x3f
 8007fc0:	bf28      	it	cs
 8007fc2:	233f      	movcs	r3, #63	; 0x3f
 8007fc4:	82bb      	strh	r3, [r7, #20]
            pbuf = HID_MOUSE_ReportDesc;
 8007fc6:	4b2f      	ldr	r3, [pc, #188]	; (8008084 <USBD_HID_Setup+0x208>)
 8007fc8:	613b      	str	r3, [r7, #16]
 8007fca:	e015      	b.n	8007ff8 <USBD_HID_Setup+0x17c>
          }
          else if ((req->wValue >> 8) == HID_DESCRIPTOR_TYPE)
 8007fcc:	683b      	ldr	r3, [r7, #0]
 8007fce:	885b      	ldrh	r3, [r3, #2]
 8007fd0:	0a1b      	lsrs	r3, r3, #8
 8007fd2:	b29b      	uxth	r3, r3
 8007fd4:	2b21      	cmp	r3, #33	; 0x21
 8007fd6:	d108      	bne.n	8007fea <USBD_HID_Setup+0x16e>
          {
            pbuf = USBD_HID_Desc;
 8007fd8:	4b2b      	ldr	r3, [pc, #172]	; (8008088 <USBD_HID_Setup+0x20c>)
 8007fda:	613b      	str	r3, [r7, #16]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 8007fdc:	683b      	ldr	r3, [r7, #0]
 8007fde:	88db      	ldrh	r3, [r3, #6]
 8007fe0:	2b09      	cmp	r3, #9
 8007fe2:	bf28      	it	cs
 8007fe4:	2309      	movcs	r3, #9
 8007fe6:	82bb      	strh	r3, [r7, #20]
 8007fe8:	e006      	b.n	8007ff8 <USBD_HID_Setup+0x17c>
          }
          else
          {
            USBD_CtlError(pdev, req);
 8007fea:	6839      	ldr	r1, [r7, #0]
 8007fec:	6878      	ldr	r0, [r7, #4]
 8007fee:	f001 faf2 	bl	80095d6 <USBD_CtlError>
            ret = USBD_FAIL;
 8007ff2:	2303      	movs	r3, #3
 8007ff4:	75fb      	strb	r3, [r7, #23]
            break;
 8007ff6:	e037      	b.n	8008068 <USBD_HID_Setup+0x1ec>
          }
          (void)USBD_CtlSendData(pdev, pbuf, len);
 8007ff8:	8abb      	ldrh	r3, [r7, #20]
 8007ffa:	461a      	mov	r2, r3
 8007ffc:	6939      	ldr	r1, [r7, #16]
 8007ffe:	6878      	ldr	r0, [r7, #4]
 8008000:	f001 fb5a 	bl	80096b8 <USBD_CtlSendData>
          break;
 8008004:	e030      	b.n	8008068 <USBD_HID_Setup+0x1ec>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800800c:	b2db      	uxtb	r3, r3
 800800e:	2b03      	cmp	r3, #3
 8008010:	d107      	bne.n	8008022 <USBD_HID_Setup+0x1a6>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	3308      	adds	r3, #8
 8008016:	2201      	movs	r2, #1
 8008018:	4619      	mov	r1, r3
 800801a:	6878      	ldr	r0, [r7, #4]
 800801c:	f001 fb4c 	bl	80096b8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008020:	e022      	b.n	8008068 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 8008022:	6839      	ldr	r1, [r7, #0]
 8008024:	6878      	ldr	r0, [r7, #4]
 8008026:	f001 fad6 	bl	80095d6 <USBD_CtlError>
            ret = USBD_FAIL;
 800802a:	2303      	movs	r3, #3
 800802c:	75fb      	strb	r3, [r7, #23]
          break;
 800802e:	e01b      	b.n	8008068 <USBD_HID_Setup+0x1ec>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008036:	b2db      	uxtb	r3, r3
 8008038:	2b03      	cmp	r3, #3
 800803a:	d106      	bne.n	800804a <USBD_HID_Setup+0x1ce>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 800803c:	683b      	ldr	r3, [r7, #0]
 800803e:	885b      	ldrh	r3, [r3, #2]
 8008040:	b2db      	uxtb	r3, r3
 8008042:	461a      	mov	r2, r3
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008048:	e00e      	b.n	8008068 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 800804a:	6839      	ldr	r1, [r7, #0]
 800804c:	6878      	ldr	r0, [r7, #4]
 800804e:	f001 fac2 	bl	80095d6 <USBD_CtlError>
            ret = USBD_FAIL;
 8008052:	2303      	movs	r3, #3
 8008054:	75fb      	strb	r3, [r7, #23]
          break;
 8008056:	e007      	b.n	8008068 <USBD_HID_Setup+0x1ec>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8008058:	6839      	ldr	r1, [r7, #0]
 800805a:	6878      	ldr	r0, [r7, #4]
 800805c:	f001 fabb 	bl	80095d6 <USBD_CtlError>
          ret = USBD_FAIL;
 8008060:	2303      	movs	r3, #3
 8008062:	75fb      	strb	r3, [r7, #23]
          break;
 8008064:	e000      	b.n	8008068 <USBD_HID_Setup+0x1ec>
          break;
 8008066:	bf00      	nop
      }
      break;
 8008068:	e006      	b.n	8008078 <USBD_HID_Setup+0x1fc>

    default:
      USBD_CtlError(pdev, req);
 800806a:	6839      	ldr	r1, [r7, #0]
 800806c:	6878      	ldr	r0, [r7, #4]
 800806e:	f001 fab2 	bl	80095d6 <USBD_CtlError>
      ret = USBD_FAIL;
 8008072:	2303      	movs	r3, #3
 8008074:	75fb      	strb	r3, [r7, #23]
      break;
 8008076:	bf00      	nop
  }

  return (uint8_t)ret;
 8008078:	7dfb      	ldrb	r3, [r7, #23]
}
 800807a:	4618      	mov	r0, r3
 800807c:	3718      	adds	r7, #24
 800807e:	46bd      	mov	sp, r7
 8008080:	bd80      	pop	{r7, pc}
 8008082:	bf00      	nop
 8008084:	200000dc 	.word	0x200000dc
 8008088:	200000c4 	.word	0x200000c4

0800808c <USBD_HID_SendReport>:
  * @param  pdev: device instance
  * @param  buff: pointer to report
  * @retval status
  */
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef *pdev, uint8_t *report, uint16_t len)
{
 800808c:	b580      	push	{r7, lr}
 800808e:	b086      	sub	sp, #24
 8008090:	af00      	add	r7, sp, #0
 8008092:	60f8      	str	r0, [r7, #12]
 8008094:	60b9      	str	r1, [r7, #8]
 8008096:	4613      	mov	r3, r2
 8008098:	80fb      	strh	r3, [r7, #6]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	32b0      	adds	r2, #176	; 0xb0
 80080a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80080a8:	617b      	str	r3, [r7, #20]

  if (hhid == NULL)
 80080aa:	697b      	ldr	r3, [r7, #20]
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d101      	bne.n	80080b4 <USBD_HID_SendReport+0x28>
  {
    return (uint8_t)USBD_FAIL;
 80080b0:	2303      	movs	r3, #3
 80080b2:	e014      	b.n	80080de <USBD_HID_SendReport+0x52>
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80080ba:	b2db      	uxtb	r3, r3
 80080bc:	2b03      	cmp	r3, #3
 80080be:	d10d      	bne.n	80080dc <USBD_HID_SendReport+0x50>
  {
    if (hhid->state == HID_IDLE)
 80080c0:	697b      	ldr	r3, [r7, #20]
 80080c2:	7b1b      	ldrb	r3, [r3, #12]
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d109      	bne.n	80080dc <USBD_HID_SendReport+0x50>
    {
      hhid->state = HID_BUSY;
 80080c8:	697b      	ldr	r3, [r7, #20]
 80080ca:	2201      	movs	r2, #1
 80080cc:	731a      	strb	r2, [r3, #12]
      (void)USBD_LL_Transmit(pdev, HIDInEpAdd, report, len);
 80080ce:	4b06      	ldr	r3, [pc, #24]	; (80080e8 <USBD_HID_SendReport+0x5c>)
 80080d0:	7819      	ldrb	r1, [r3, #0]
 80080d2:	88fb      	ldrh	r3, [r7, #6]
 80080d4:	68ba      	ldr	r2, [r7, #8]
 80080d6:	68f8      	ldr	r0, [r7, #12]
 80080d8:	f001 ff11 	bl	8009efe <USBD_LL_Transmit>
    }
  }

  return (uint8_t)USBD_OK;
 80080dc:	2300      	movs	r3, #0
}
 80080de:	4618      	mov	r0, r3
 80080e0:	3718      	adds	r7, #24
 80080e2:	46bd      	mov	sp, r7
 80080e4:	bd80      	pop	{r7, pc}
 80080e6:	bf00      	nop
 80080e8:	2000011b 	.word	0x2000011b

080080ec <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 80080ec:	b580      	push	{r7, lr}
 80080ee:	b084      	sub	sp, #16
 80080f0:	af00      	add	r7, sp, #0
 80080f2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 80080f4:	2181      	movs	r1, #129	; 0x81
 80080f6:	4809      	ldr	r0, [pc, #36]	; (800811c <USBD_HID_GetFSCfgDesc+0x30>)
 80080f8:	f000 fc35 	bl	8008966 <USBD_GetEpDesc>
 80080fc:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	2b00      	cmp	r3, #0
 8008102:	d002      	beq.n	800810a <USBD_HID_GetFSCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_FS_BINTERVAL;
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	220a      	movs	r2, #10
 8008108:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	2222      	movs	r2, #34	; 0x22
 800810e:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 8008110:	4b02      	ldr	r3, [pc, #8]	; (800811c <USBD_HID_GetFSCfgDesc+0x30>)
}
 8008112:	4618      	mov	r0, r3
 8008114:	3710      	adds	r7, #16
 8008116:	46bd      	mov	sp, r7
 8008118:	bd80      	pop	{r7, pc}
 800811a:	bf00      	nop
 800811c:	200000a0 	.word	0x200000a0

08008120 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 8008120:	b580      	push	{r7, lr}
 8008122:	b084      	sub	sp, #16
 8008124:	af00      	add	r7, sp, #0
 8008126:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 8008128:	2181      	movs	r1, #129	; 0x81
 800812a:	4809      	ldr	r0, [pc, #36]	; (8008150 <USBD_HID_GetHSCfgDesc+0x30>)
 800812c:	f000 fc1b 	bl	8008966 <USBD_GetEpDesc>
 8008130:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	2b00      	cmp	r3, #0
 8008136:	d002      	beq.n	800813e <USBD_HID_GetHSCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_HS_BINTERVAL;
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	2207      	movs	r2, #7
 800813c:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	2222      	movs	r2, #34	; 0x22
 8008142:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 8008144:	4b02      	ldr	r3, [pc, #8]	; (8008150 <USBD_HID_GetHSCfgDesc+0x30>)
}
 8008146:	4618      	mov	r0, r3
 8008148:	3710      	adds	r7, #16
 800814a:	46bd      	mov	sp, r7
 800814c:	bd80      	pop	{r7, pc}
 800814e:	bf00      	nop
 8008150:	200000a0 	.word	0x200000a0

08008154 <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008154:	b580      	push	{r7, lr}
 8008156:	b084      	sub	sp, #16
 8008158:	af00      	add	r7, sp, #0
 800815a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 800815c:	2181      	movs	r1, #129	; 0x81
 800815e:	4809      	ldr	r0, [pc, #36]	; (8008184 <USBD_HID_GetOtherSpeedCfgDesc+0x30>)
 8008160:	f000 fc01 	bl	8008966 <USBD_GetEpDesc>
 8008164:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	2b00      	cmp	r3, #0
 800816a:	d002      	beq.n	8008172 <USBD_HID_GetOtherSpeedCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_FS_BINTERVAL;
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	220a      	movs	r2, #10
 8008170:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	2222      	movs	r2, #34	; 0x22
 8008176:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 8008178:	4b02      	ldr	r3, [pc, #8]	; (8008184 <USBD_HID_GetOtherSpeedCfgDesc+0x30>)
}
 800817a:	4618      	mov	r0, r3
 800817c:	3710      	adds	r7, #16
 800817e:	46bd      	mov	sp, r7
 8008180:	bd80      	pop	{r7, pc}
 8008182:	bf00      	nop
 8008184:	200000a0 	.word	0x200000a0

08008188 <USBD_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008188:	b480      	push	{r7}
 800818a:	b083      	sub	sp, #12
 800818c:	af00      	add	r7, sp, #0
 800818e:	6078      	str	r0, [r7, #4]
 8008190:	460b      	mov	r3, r1
 8008192:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId])->state = HID_IDLE;
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	32b0      	adds	r2, #176	; 0xb0
 800819e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80081a2:	2200      	movs	r2, #0
 80081a4:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 80081a6:	2300      	movs	r3, #0
}
 80081a8:	4618      	mov	r0, r3
 80081aa:	370c      	adds	r7, #12
 80081ac:	46bd      	mov	sp, r7
 80081ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b2:	4770      	bx	lr

080081b4 <USBD_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 80081b4:	b480      	push	{r7}
 80081b6:	b083      	sub	sp, #12
 80081b8:	af00      	add	r7, sp, #0
 80081ba:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_DeviceQualifierDesc);
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	220a      	movs	r2, #10
 80081c0:	801a      	strh	r2, [r3, #0]

  return USBD_HID_DeviceQualifierDesc;
 80081c2:	4b03      	ldr	r3, [pc, #12]	; (80081d0 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 80081c4:	4618      	mov	r0, r3
 80081c6:	370c      	adds	r7, #12
 80081c8:	46bd      	mov	sp, r7
 80081ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ce:	4770      	bx	lr
 80081d0:	200000d0 	.word	0x200000d0

080081d4 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80081d4:	b580      	push	{r7, lr}
 80081d6:	b086      	sub	sp, #24
 80081d8:	af00      	add	r7, sp, #0
 80081da:	60f8      	str	r0, [r7, #12]
 80081dc:	60b9      	str	r1, [r7, #8]
 80081de:	4613      	mov	r3, r2
 80081e0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d101      	bne.n	80081ec <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80081e8:	2303      	movs	r3, #3
 80081ea:	e01f      	b.n	800822c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	2200      	movs	r2, #0
 80081f0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	2200      	movs	r2, #0
 80081f8:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	2200      	movs	r2, #0
 8008200:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008204:	68bb      	ldr	r3, [r7, #8]
 8008206:	2b00      	cmp	r3, #0
 8008208:	d003      	beq.n	8008212 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	68ba      	ldr	r2, [r7, #8]
 800820e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	2201      	movs	r2, #1
 8008216:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	79fa      	ldrb	r2, [r7, #7]
 800821e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8008220:	68f8      	ldr	r0, [r7, #12]
 8008222:	f001 fd37 	bl	8009c94 <USBD_LL_Init>
 8008226:	4603      	mov	r3, r0
 8008228:	75fb      	strb	r3, [r7, #23]

  return ret;
 800822a:	7dfb      	ldrb	r3, [r7, #23]
}
 800822c:	4618      	mov	r0, r3
 800822e:	3718      	adds	r7, #24
 8008230:	46bd      	mov	sp, r7
 8008232:	bd80      	pop	{r7, pc}

08008234 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008234:	b580      	push	{r7, lr}
 8008236:	b084      	sub	sp, #16
 8008238:	af00      	add	r7, sp, #0
 800823a:	6078      	str	r0, [r7, #4]
 800823c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800823e:	2300      	movs	r3, #0
 8008240:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8008242:	683b      	ldr	r3, [r7, #0]
 8008244:	2b00      	cmp	r3, #0
 8008246:	d101      	bne.n	800824c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008248:	2303      	movs	r3, #3
 800824a:	e025      	b.n	8008298 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	683a      	ldr	r2, [r7, #0]
 8008250:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	32ae      	adds	r2, #174	; 0xae
 800825e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008262:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008264:	2b00      	cmp	r3, #0
 8008266:	d00f      	beq.n	8008288 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	32ae      	adds	r2, #174	; 0xae
 8008272:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008276:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008278:	f107 020e 	add.w	r2, r7, #14
 800827c:	4610      	mov	r0, r2
 800827e:	4798      	blx	r3
 8008280:	4602      	mov	r2, r0
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800828e:	1c5a      	adds	r2, r3, #1
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8008296:	2300      	movs	r3, #0
}
 8008298:	4618      	mov	r0, r3
 800829a:	3710      	adds	r7, #16
 800829c:	46bd      	mov	sp, r7
 800829e:	bd80      	pop	{r7, pc}

080082a0 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80082a0:	b580      	push	{r7, lr}
 80082a2:	b082      	sub	sp, #8
 80082a4:	af00      	add	r7, sp, #0
 80082a6:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80082a8:	6878      	ldr	r0, [r7, #4]
 80082aa:	f001 fd3f 	bl	8009d2c <USBD_LL_Start>
 80082ae:	4603      	mov	r3, r0
}
 80082b0:	4618      	mov	r0, r3
 80082b2:	3708      	adds	r7, #8
 80082b4:	46bd      	mov	sp, r7
 80082b6:	bd80      	pop	{r7, pc}

080082b8 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80082b8:	b480      	push	{r7}
 80082ba:	b083      	sub	sp, #12
 80082bc:	af00      	add	r7, sp, #0
 80082be:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80082c0:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80082c2:	4618      	mov	r0, r3
 80082c4:	370c      	adds	r7, #12
 80082c6:	46bd      	mov	sp, r7
 80082c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082cc:	4770      	bx	lr

080082ce <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80082ce:	b580      	push	{r7, lr}
 80082d0:	b084      	sub	sp, #16
 80082d2:	af00      	add	r7, sp, #0
 80082d4:	6078      	str	r0, [r7, #4]
 80082d6:	460b      	mov	r3, r1
 80082d8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80082da:	2300      	movs	r3, #0
 80082dc:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d009      	beq.n	80082fc <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	78fa      	ldrb	r2, [r7, #3]
 80082f2:	4611      	mov	r1, r2
 80082f4:	6878      	ldr	r0, [r7, #4]
 80082f6:	4798      	blx	r3
 80082f8:	4603      	mov	r3, r0
 80082fa:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80082fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80082fe:	4618      	mov	r0, r3
 8008300:	3710      	adds	r7, #16
 8008302:	46bd      	mov	sp, r7
 8008304:	bd80      	pop	{r7, pc}

08008306 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008306:	b580      	push	{r7, lr}
 8008308:	b084      	sub	sp, #16
 800830a:	af00      	add	r7, sp, #0
 800830c:	6078      	str	r0, [r7, #4]
 800830e:	460b      	mov	r3, r1
 8008310:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8008312:	2300      	movs	r3, #0
 8008314:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800831c:	685b      	ldr	r3, [r3, #4]
 800831e:	78fa      	ldrb	r2, [r7, #3]
 8008320:	4611      	mov	r1, r2
 8008322:	6878      	ldr	r0, [r7, #4]
 8008324:	4798      	blx	r3
 8008326:	4603      	mov	r3, r0
 8008328:	2b00      	cmp	r3, #0
 800832a:	d001      	beq.n	8008330 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800832c:	2303      	movs	r3, #3
 800832e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008330:	7bfb      	ldrb	r3, [r7, #15]
}
 8008332:	4618      	mov	r0, r3
 8008334:	3710      	adds	r7, #16
 8008336:	46bd      	mov	sp, r7
 8008338:	bd80      	pop	{r7, pc}

0800833a <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800833a:	b580      	push	{r7, lr}
 800833c:	b084      	sub	sp, #16
 800833e:	af00      	add	r7, sp, #0
 8008340:	6078      	str	r0, [r7, #4]
 8008342:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800834a:	6839      	ldr	r1, [r7, #0]
 800834c:	4618      	mov	r0, r3
 800834e:	f001 f908 	bl	8009562 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	2201      	movs	r2, #1
 8008356:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8008360:	461a      	mov	r2, r3
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800836e:	f003 031f 	and.w	r3, r3, #31
 8008372:	2b02      	cmp	r3, #2
 8008374:	d01a      	beq.n	80083ac <USBD_LL_SetupStage+0x72>
 8008376:	2b02      	cmp	r3, #2
 8008378:	d822      	bhi.n	80083c0 <USBD_LL_SetupStage+0x86>
 800837a:	2b00      	cmp	r3, #0
 800837c:	d002      	beq.n	8008384 <USBD_LL_SetupStage+0x4a>
 800837e:	2b01      	cmp	r3, #1
 8008380:	d00a      	beq.n	8008398 <USBD_LL_SetupStage+0x5e>
 8008382:	e01d      	b.n	80083c0 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800838a:	4619      	mov	r1, r3
 800838c:	6878      	ldr	r0, [r7, #4]
 800838e:	f000 fb5f 	bl	8008a50 <USBD_StdDevReq>
 8008392:	4603      	mov	r3, r0
 8008394:	73fb      	strb	r3, [r7, #15]
      break;
 8008396:	e020      	b.n	80083da <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800839e:	4619      	mov	r1, r3
 80083a0:	6878      	ldr	r0, [r7, #4]
 80083a2:	f000 fbc7 	bl	8008b34 <USBD_StdItfReq>
 80083a6:	4603      	mov	r3, r0
 80083a8:	73fb      	strb	r3, [r7, #15]
      break;
 80083aa:	e016      	b.n	80083da <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80083b2:	4619      	mov	r1, r3
 80083b4:	6878      	ldr	r0, [r7, #4]
 80083b6:	f000 fc29 	bl	8008c0c <USBD_StdEPReq>
 80083ba:	4603      	mov	r3, r0
 80083bc:	73fb      	strb	r3, [r7, #15]
      break;
 80083be:	e00c      	b.n	80083da <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80083c6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80083ca:	b2db      	uxtb	r3, r3
 80083cc:	4619      	mov	r1, r3
 80083ce:	6878      	ldr	r0, [r7, #4]
 80083d0:	f001 fd0c 	bl	8009dec <USBD_LL_StallEP>
 80083d4:	4603      	mov	r3, r0
 80083d6:	73fb      	strb	r3, [r7, #15]
      break;
 80083d8:	bf00      	nop
  }

  return ret;
 80083da:	7bfb      	ldrb	r3, [r7, #15]
}
 80083dc:	4618      	mov	r0, r3
 80083de:	3710      	adds	r7, #16
 80083e0:	46bd      	mov	sp, r7
 80083e2:	bd80      	pop	{r7, pc}

080083e4 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80083e4:	b580      	push	{r7, lr}
 80083e6:	b086      	sub	sp, #24
 80083e8:	af00      	add	r7, sp, #0
 80083ea:	60f8      	str	r0, [r7, #12]
 80083ec:	460b      	mov	r3, r1
 80083ee:	607a      	str	r2, [r7, #4]
 80083f0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80083f2:	2300      	movs	r3, #0
 80083f4:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80083f6:	7afb      	ldrb	r3, [r7, #11]
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d16e      	bne.n	80084da <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8008402:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800840a:	2b03      	cmp	r3, #3
 800840c:	f040 8098 	bne.w	8008540 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8008410:	693b      	ldr	r3, [r7, #16]
 8008412:	689a      	ldr	r2, [r3, #8]
 8008414:	693b      	ldr	r3, [r7, #16]
 8008416:	68db      	ldr	r3, [r3, #12]
 8008418:	429a      	cmp	r2, r3
 800841a:	d913      	bls.n	8008444 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800841c:	693b      	ldr	r3, [r7, #16]
 800841e:	689a      	ldr	r2, [r3, #8]
 8008420:	693b      	ldr	r3, [r7, #16]
 8008422:	68db      	ldr	r3, [r3, #12]
 8008424:	1ad2      	subs	r2, r2, r3
 8008426:	693b      	ldr	r3, [r7, #16]
 8008428:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800842a:	693b      	ldr	r3, [r7, #16]
 800842c:	68da      	ldr	r2, [r3, #12]
 800842e:	693b      	ldr	r3, [r7, #16]
 8008430:	689b      	ldr	r3, [r3, #8]
 8008432:	4293      	cmp	r3, r2
 8008434:	bf28      	it	cs
 8008436:	4613      	movcs	r3, r2
 8008438:	461a      	mov	r2, r3
 800843a:	6879      	ldr	r1, [r7, #4]
 800843c:	68f8      	ldr	r0, [r7, #12]
 800843e:	f001 f967 	bl	8009710 <USBD_CtlContinueRx>
 8008442:	e07d      	b.n	8008540 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800844a:	f003 031f 	and.w	r3, r3, #31
 800844e:	2b02      	cmp	r3, #2
 8008450:	d014      	beq.n	800847c <USBD_LL_DataOutStage+0x98>
 8008452:	2b02      	cmp	r3, #2
 8008454:	d81d      	bhi.n	8008492 <USBD_LL_DataOutStage+0xae>
 8008456:	2b00      	cmp	r3, #0
 8008458:	d002      	beq.n	8008460 <USBD_LL_DataOutStage+0x7c>
 800845a:	2b01      	cmp	r3, #1
 800845c:	d003      	beq.n	8008466 <USBD_LL_DataOutStage+0x82>
 800845e:	e018      	b.n	8008492 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8008460:	2300      	movs	r3, #0
 8008462:	75bb      	strb	r3, [r7, #22]
            break;
 8008464:	e018      	b.n	8008498 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800846c:	b2db      	uxtb	r3, r3
 800846e:	4619      	mov	r1, r3
 8008470:	68f8      	ldr	r0, [r7, #12]
 8008472:	f000 fa5e 	bl	8008932 <USBD_CoreFindIF>
 8008476:	4603      	mov	r3, r0
 8008478:	75bb      	strb	r3, [r7, #22]
            break;
 800847a:	e00d      	b.n	8008498 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8008482:	b2db      	uxtb	r3, r3
 8008484:	4619      	mov	r1, r3
 8008486:	68f8      	ldr	r0, [r7, #12]
 8008488:	f000 fa60 	bl	800894c <USBD_CoreFindEP>
 800848c:	4603      	mov	r3, r0
 800848e:	75bb      	strb	r3, [r7, #22]
            break;
 8008490:	e002      	b.n	8008498 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8008492:	2300      	movs	r3, #0
 8008494:	75bb      	strb	r3, [r7, #22]
            break;
 8008496:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8008498:	7dbb      	ldrb	r3, [r7, #22]
 800849a:	2b00      	cmp	r3, #0
 800849c:	d119      	bne.n	80084d2 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80084a4:	b2db      	uxtb	r3, r3
 80084a6:	2b03      	cmp	r3, #3
 80084a8:	d113      	bne.n	80084d2 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80084aa:	7dba      	ldrb	r2, [r7, #22]
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	32ae      	adds	r2, #174	; 0xae
 80084b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80084b4:	691b      	ldr	r3, [r3, #16]
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d00b      	beq.n	80084d2 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80084ba:	7dba      	ldrb	r2, [r7, #22]
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80084c2:	7dba      	ldrb	r2, [r7, #22]
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	32ae      	adds	r2, #174	; 0xae
 80084c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80084cc:	691b      	ldr	r3, [r3, #16]
 80084ce:	68f8      	ldr	r0, [r7, #12]
 80084d0:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80084d2:	68f8      	ldr	r0, [r7, #12]
 80084d4:	f001 f92d 	bl	8009732 <USBD_CtlSendStatus>
 80084d8:	e032      	b.n	8008540 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80084da:	7afb      	ldrb	r3, [r7, #11]
 80084dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80084e0:	b2db      	uxtb	r3, r3
 80084e2:	4619      	mov	r1, r3
 80084e4:	68f8      	ldr	r0, [r7, #12]
 80084e6:	f000 fa31 	bl	800894c <USBD_CoreFindEP>
 80084ea:	4603      	mov	r3, r0
 80084ec:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80084ee:	7dbb      	ldrb	r3, [r7, #22]
 80084f0:	2bff      	cmp	r3, #255	; 0xff
 80084f2:	d025      	beq.n	8008540 <USBD_LL_DataOutStage+0x15c>
 80084f4:	7dbb      	ldrb	r3, [r7, #22]
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d122      	bne.n	8008540 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008500:	b2db      	uxtb	r3, r3
 8008502:	2b03      	cmp	r3, #3
 8008504:	d117      	bne.n	8008536 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8008506:	7dba      	ldrb	r2, [r7, #22]
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	32ae      	adds	r2, #174	; 0xae
 800850c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008510:	699b      	ldr	r3, [r3, #24]
 8008512:	2b00      	cmp	r3, #0
 8008514:	d00f      	beq.n	8008536 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8008516:	7dba      	ldrb	r2, [r7, #22]
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800851e:	7dba      	ldrb	r2, [r7, #22]
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	32ae      	adds	r2, #174	; 0xae
 8008524:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008528:	699b      	ldr	r3, [r3, #24]
 800852a:	7afa      	ldrb	r2, [r7, #11]
 800852c:	4611      	mov	r1, r2
 800852e:	68f8      	ldr	r0, [r7, #12]
 8008530:	4798      	blx	r3
 8008532:	4603      	mov	r3, r0
 8008534:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8008536:	7dfb      	ldrb	r3, [r7, #23]
 8008538:	2b00      	cmp	r3, #0
 800853a:	d001      	beq.n	8008540 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800853c:	7dfb      	ldrb	r3, [r7, #23]
 800853e:	e000      	b.n	8008542 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8008540:	2300      	movs	r3, #0
}
 8008542:	4618      	mov	r0, r3
 8008544:	3718      	adds	r7, #24
 8008546:	46bd      	mov	sp, r7
 8008548:	bd80      	pop	{r7, pc}

0800854a <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800854a:	b580      	push	{r7, lr}
 800854c:	b086      	sub	sp, #24
 800854e:	af00      	add	r7, sp, #0
 8008550:	60f8      	str	r0, [r7, #12]
 8008552:	460b      	mov	r3, r1
 8008554:	607a      	str	r2, [r7, #4]
 8008556:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8008558:	7afb      	ldrb	r3, [r7, #11]
 800855a:	2b00      	cmp	r3, #0
 800855c:	d16f      	bne.n	800863e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	3314      	adds	r3, #20
 8008562:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800856a:	2b02      	cmp	r3, #2
 800856c:	d15a      	bne.n	8008624 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800856e:	693b      	ldr	r3, [r7, #16]
 8008570:	689a      	ldr	r2, [r3, #8]
 8008572:	693b      	ldr	r3, [r7, #16]
 8008574:	68db      	ldr	r3, [r3, #12]
 8008576:	429a      	cmp	r2, r3
 8008578:	d914      	bls.n	80085a4 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800857a:	693b      	ldr	r3, [r7, #16]
 800857c:	689a      	ldr	r2, [r3, #8]
 800857e:	693b      	ldr	r3, [r7, #16]
 8008580:	68db      	ldr	r3, [r3, #12]
 8008582:	1ad2      	subs	r2, r2, r3
 8008584:	693b      	ldr	r3, [r7, #16]
 8008586:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8008588:	693b      	ldr	r3, [r7, #16]
 800858a:	689b      	ldr	r3, [r3, #8]
 800858c:	461a      	mov	r2, r3
 800858e:	6879      	ldr	r1, [r7, #4]
 8008590:	68f8      	ldr	r0, [r7, #12]
 8008592:	f001 f8ac 	bl	80096ee <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008596:	2300      	movs	r3, #0
 8008598:	2200      	movs	r2, #0
 800859a:	2100      	movs	r1, #0
 800859c:	68f8      	ldr	r0, [r7, #12]
 800859e:	f001 fccf 	bl	8009f40 <USBD_LL_PrepareReceive>
 80085a2:	e03f      	b.n	8008624 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80085a4:	693b      	ldr	r3, [r7, #16]
 80085a6:	68da      	ldr	r2, [r3, #12]
 80085a8:	693b      	ldr	r3, [r7, #16]
 80085aa:	689b      	ldr	r3, [r3, #8]
 80085ac:	429a      	cmp	r2, r3
 80085ae:	d11c      	bne.n	80085ea <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80085b0:	693b      	ldr	r3, [r7, #16]
 80085b2:	685a      	ldr	r2, [r3, #4]
 80085b4:	693b      	ldr	r3, [r7, #16]
 80085b6:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80085b8:	429a      	cmp	r2, r3
 80085ba:	d316      	bcc.n	80085ea <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80085bc:	693b      	ldr	r3, [r7, #16]
 80085be:	685a      	ldr	r2, [r3, #4]
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80085c6:	429a      	cmp	r2, r3
 80085c8:	d20f      	bcs.n	80085ea <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80085ca:	2200      	movs	r2, #0
 80085cc:	2100      	movs	r1, #0
 80085ce:	68f8      	ldr	r0, [r7, #12]
 80085d0:	f001 f88d 	bl	80096ee <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	2200      	movs	r2, #0
 80085d8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80085dc:	2300      	movs	r3, #0
 80085de:	2200      	movs	r2, #0
 80085e0:	2100      	movs	r1, #0
 80085e2:	68f8      	ldr	r0, [r7, #12]
 80085e4:	f001 fcac 	bl	8009f40 <USBD_LL_PrepareReceive>
 80085e8:	e01c      	b.n	8008624 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80085f0:	b2db      	uxtb	r3, r3
 80085f2:	2b03      	cmp	r3, #3
 80085f4:	d10f      	bne.n	8008616 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80085fc:	68db      	ldr	r3, [r3, #12]
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d009      	beq.n	8008616 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	2200      	movs	r2, #0
 8008606:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008610:	68db      	ldr	r3, [r3, #12]
 8008612:	68f8      	ldr	r0, [r7, #12]
 8008614:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008616:	2180      	movs	r1, #128	; 0x80
 8008618:	68f8      	ldr	r0, [r7, #12]
 800861a:	f001 fbe7 	bl	8009dec <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800861e:	68f8      	ldr	r0, [r7, #12]
 8008620:	f001 f89a 	bl	8009758 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800862a:	2b00      	cmp	r3, #0
 800862c:	d03a      	beq.n	80086a4 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800862e:	68f8      	ldr	r0, [r7, #12]
 8008630:	f7ff fe42 	bl	80082b8 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	2200      	movs	r2, #0
 8008638:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800863c:	e032      	b.n	80086a4 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800863e:	7afb      	ldrb	r3, [r7, #11]
 8008640:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008644:	b2db      	uxtb	r3, r3
 8008646:	4619      	mov	r1, r3
 8008648:	68f8      	ldr	r0, [r7, #12]
 800864a:	f000 f97f 	bl	800894c <USBD_CoreFindEP>
 800864e:	4603      	mov	r3, r0
 8008650:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008652:	7dfb      	ldrb	r3, [r7, #23]
 8008654:	2bff      	cmp	r3, #255	; 0xff
 8008656:	d025      	beq.n	80086a4 <USBD_LL_DataInStage+0x15a>
 8008658:	7dfb      	ldrb	r3, [r7, #23]
 800865a:	2b00      	cmp	r3, #0
 800865c:	d122      	bne.n	80086a4 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008664:	b2db      	uxtb	r3, r3
 8008666:	2b03      	cmp	r3, #3
 8008668:	d11c      	bne.n	80086a4 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800866a:	7dfa      	ldrb	r2, [r7, #23]
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	32ae      	adds	r2, #174	; 0xae
 8008670:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008674:	695b      	ldr	r3, [r3, #20]
 8008676:	2b00      	cmp	r3, #0
 8008678:	d014      	beq.n	80086a4 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800867a:	7dfa      	ldrb	r2, [r7, #23]
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8008682:	7dfa      	ldrb	r2, [r7, #23]
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	32ae      	adds	r2, #174	; 0xae
 8008688:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800868c:	695b      	ldr	r3, [r3, #20]
 800868e:	7afa      	ldrb	r2, [r7, #11]
 8008690:	4611      	mov	r1, r2
 8008692:	68f8      	ldr	r0, [r7, #12]
 8008694:	4798      	blx	r3
 8008696:	4603      	mov	r3, r0
 8008698:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800869a:	7dbb      	ldrb	r3, [r7, #22]
 800869c:	2b00      	cmp	r3, #0
 800869e:	d001      	beq.n	80086a4 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80086a0:	7dbb      	ldrb	r3, [r7, #22]
 80086a2:	e000      	b.n	80086a6 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80086a4:	2300      	movs	r3, #0
}
 80086a6:	4618      	mov	r0, r3
 80086a8:	3718      	adds	r7, #24
 80086aa:	46bd      	mov	sp, r7
 80086ac:	bd80      	pop	{r7, pc}

080086ae <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80086ae:	b580      	push	{r7, lr}
 80086b0:	b084      	sub	sp, #16
 80086b2:	af00      	add	r7, sp, #0
 80086b4:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80086b6:	2300      	movs	r3, #0
 80086b8:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	2201      	movs	r2, #1
 80086be:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	2200      	movs	r2, #0
 80086c6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	2200      	movs	r2, #0
 80086ce:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	2200      	movs	r2, #0
 80086d4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	2200      	movs	r2, #0
 80086dc:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d014      	beq.n	8008714 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80086f0:	685b      	ldr	r3, [r3, #4]
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d00e      	beq.n	8008714 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80086fc:	685b      	ldr	r3, [r3, #4]
 80086fe:	687a      	ldr	r2, [r7, #4]
 8008700:	6852      	ldr	r2, [r2, #4]
 8008702:	b2d2      	uxtb	r2, r2
 8008704:	4611      	mov	r1, r2
 8008706:	6878      	ldr	r0, [r7, #4]
 8008708:	4798      	blx	r3
 800870a:	4603      	mov	r3, r0
 800870c:	2b00      	cmp	r3, #0
 800870e:	d001      	beq.n	8008714 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8008710:	2303      	movs	r3, #3
 8008712:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008714:	2340      	movs	r3, #64	; 0x40
 8008716:	2200      	movs	r2, #0
 8008718:	2100      	movs	r1, #0
 800871a:	6878      	ldr	r0, [r7, #4]
 800871c:	f001 fb21 	bl	8009d62 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	2201      	movs	r2, #1
 8008724:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	2240      	movs	r2, #64	; 0x40
 800872c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008730:	2340      	movs	r3, #64	; 0x40
 8008732:	2200      	movs	r2, #0
 8008734:	2180      	movs	r1, #128	; 0x80
 8008736:	6878      	ldr	r0, [r7, #4]
 8008738:	f001 fb13 	bl	8009d62 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	2201      	movs	r2, #1
 8008740:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	2240      	movs	r2, #64	; 0x40
 8008746:	621a      	str	r2, [r3, #32]

  return ret;
 8008748:	7bfb      	ldrb	r3, [r7, #15]
}
 800874a:	4618      	mov	r0, r3
 800874c:	3710      	adds	r7, #16
 800874e:	46bd      	mov	sp, r7
 8008750:	bd80      	pop	{r7, pc}

08008752 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008752:	b480      	push	{r7}
 8008754:	b083      	sub	sp, #12
 8008756:	af00      	add	r7, sp, #0
 8008758:	6078      	str	r0, [r7, #4]
 800875a:	460b      	mov	r3, r1
 800875c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	78fa      	ldrb	r2, [r7, #3]
 8008762:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008764:	2300      	movs	r3, #0
}
 8008766:	4618      	mov	r0, r3
 8008768:	370c      	adds	r7, #12
 800876a:	46bd      	mov	sp, r7
 800876c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008770:	4770      	bx	lr

08008772 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008772:	b480      	push	{r7}
 8008774:	b083      	sub	sp, #12
 8008776:	af00      	add	r7, sp, #0
 8008778:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008780:	b2da      	uxtb	r2, r3
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	2204      	movs	r2, #4
 800878c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8008790:	2300      	movs	r3, #0
}
 8008792:	4618      	mov	r0, r3
 8008794:	370c      	adds	r7, #12
 8008796:	46bd      	mov	sp, r7
 8008798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800879c:	4770      	bx	lr

0800879e <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800879e:	b480      	push	{r7}
 80087a0:	b083      	sub	sp, #12
 80087a2:	af00      	add	r7, sp, #0
 80087a4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80087ac:	b2db      	uxtb	r3, r3
 80087ae:	2b04      	cmp	r3, #4
 80087b0:	d106      	bne.n	80087c0 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80087b8:	b2da      	uxtb	r2, r3
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80087c0:	2300      	movs	r3, #0
}
 80087c2:	4618      	mov	r0, r3
 80087c4:	370c      	adds	r7, #12
 80087c6:	46bd      	mov	sp, r7
 80087c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087cc:	4770      	bx	lr

080087ce <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80087ce:	b580      	push	{r7, lr}
 80087d0:	b082      	sub	sp, #8
 80087d2:	af00      	add	r7, sp, #0
 80087d4:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80087dc:	b2db      	uxtb	r3, r3
 80087de:	2b03      	cmp	r3, #3
 80087e0:	d110      	bne.n	8008804 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d00b      	beq.n	8008804 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80087f2:	69db      	ldr	r3, [r3, #28]
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d005      	beq.n	8008804 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80087fe:	69db      	ldr	r3, [r3, #28]
 8008800:	6878      	ldr	r0, [r7, #4]
 8008802:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8008804:	2300      	movs	r3, #0
}
 8008806:	4618      	mov	r0, r3
 8008808:	3708      	adds	r7, #8
 800880a:	46bd      	mov	sp, r7
 800880c:	bd80      	pop	{r7, pc}

0800880e <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800880e:	b580      	push	{r7, lr}
 8008810:	b082      	sub	sp, #8
 8008812:	af00      	add	r7, sp, #0
 8008814:	6078      	str	r0, [r7, #4]
 8008816:	460b      	mov	r3, r1
 8008818:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	32ae      	adds	r2, #174	; 0xae
 8008824:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008828:	2b00      	cmp	r3, #0
 800882a:	d101      	bne.n	8008830 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800882c:	2303      	movs	r3, #3
 800882e:	e01c      	b.n	800886a <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008836:	b2db      	uxtb	r3, r3
 8008838:	2b03      	cmp	r3, #3
 800883a:	d115      	bne.n	8008868 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	32ae      	adds	r2, #174	; 0xae
 8008846:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800884a:	6a1b      	ldr	r3, [r3, #32]
 800884c:	2b00      	cmp	r3, #0
 800884e:	d00b      	beq.n	8008868 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	32ae      	adds	r2, #174	; 0xae
 800885a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800885e:	6a1b      	ldr	r3, [r3, #32]
 8008860:	78fa      	ldrb	r2, [r7, #3]
 8008862:	4611      	mov	r1, r2
 8008864:	6878      	ldr	r0, [r7, #4]
 8008866:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008868:	2300      	movs	r3, #0
}
 800886a:	4618      	mov	r0, r3
 800886c:	3708      	adds	r7, #8
 800886e:	46bd      	mov	sp, r7
 8008870:	bd80      	pop	{r7, pc}

08008872 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8008872:	b580      	push	{r7, lr}
 8008874:	b082      	sub	sp, #8
 8008876:	af00      	add	r7, sp, #0
 8008878:	6078      	str	r0, [r7, #4]
 800887a:	460b      	mov	r3, r1
 800887c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	32ae      	adds	r2, #174	; 0xae
 8008888:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800888c:	2b00      	cmp	r3, #0
 800888e:	d101      	bne.n	8008894 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8008890:	2303      	movs	r3, #3
 8008892:	e01c      	b.n	80088ce <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800889a:	b2db      	uxtb	r3, r3
 800889c:	2b03      	cmp	r3, #3
 800889e:	d115      	bne.n	80088cc <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	32ae      	adds	r2, #174	; 0xae
 80088aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80088ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d00b      	beq.n	80088cc <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	32ae      	adds	r2, #174	; 0xae
 80088be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80088c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088c4:	78fa      	ldrb	r2, [r7, #3]
 80088c6:	4611      	mov	r1, r2
 80088c8:	6878      	ldr	r0, [r7, #4]
 80088ca:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80088cc:	2300      	movs	r3, #0
}
 80088ce:	4618      	mov	r0, r3
 80088d0:	3708      	adds	r7, #8
 80088d2:	46bd      	mov	sp, r7
 80088d4:	bd80      	pop	{r7, pc}

080088d6 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80088d6:	b480      	push	{r7}
 80088d8:	b083      	sub	sp, #12
 80088da:	af00      	add	r7, sp, #0
 80088dc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80088de:	2300      	movs	r3, #0
}
 80088e0:	4618      	mov	r0, r3
 80088e2:	370c      	adds	r7, #12
 80088e4:	46bd      	mov	sp, r7
 80088e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ea:	4770      	bx	lr

080088ec <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80088ec:	b580      	push	{r7, lr}
 80088ee:	b084      	sub	sp, #16
 80088f0:	af00      	add	r7, sp, #0
 80088f2:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80088f4:	2300      	movs	r3, #0
 80088f6:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	2201      	movs	r2, #1
 80088fc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008906:	2b00      	cmp	r3, #0
 8008908:	d00e      	beq.n	8008928 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008910:	685b      	ldr	r3, [r3, #4]
 8008912:	687a      	ldr	r2, [r7, #4]
 8008914:	6852      	ldr	r2, [r2, #4]
 8008916:	b2d2      	uxtb	r2, r2
 8008918:	4611      	mov	r1, r2
 800891a:	6878      	ldr	r0, [r7, #4]
 800891c:	4798      	blx	r3
 800891e:	4603      	mov	r3, r0
 8008920:	2b00      	cmp	r3, #0
 8008922:	d001      	beq.n	8008928 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8008924:	2303      	movs	r3, #3
 8008926:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008928:	7bfb      	ldrb	r3, [r7, #15]
}
 800892a:	4618      	mov	r0, r3
 800892c:	3710      	adds	r7, #16
 800892e:	46bd      	mov	sp, r7
 8008930:	bd80      	pop	{r7, pc}

08008932 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008932:	b480      	push	{r7}
 8008934:	b083      	sub	sp, #12
 8008936:	af00      	add	r7, sp, #0
 8008938:	6078      	str	r0, [r7, #4]
 800893a:	460b      	mov	r3, r1
 800893c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800893e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008940:	4618      	mov	r0, r3
 8008942:	370c      	adds	r7, #12
 8008944:	46bd      	mov	sp, r7
 8008946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800894a:	4770      	bx	lr

0800894c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800894c:	b480      	push	{r7}
 800894e:	b083      	sub	sp, #12
 8008950:	af00      	add	r7, sp, #0
 8008952:	6078      	str	r0, [r7, #4]
 8008954:	460b      	mov	r3, r1
 8008956:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008958:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800895a:	4618      	mov	r0, r3
 800895c:	370c      	adds	r7, #12
 800895e:	46bd      	mov	sp, r7
 8008960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008964:	4770      	bx	lr

08008966 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8008966:	b580      	push	{r7, lr}
 8008968:	b086      	sub	sp, #24
 800896a:	af00      	add	r7, sp, #0
 800896c:	6078      	str	r0, [r7, #4]
 800896e:	460b      	mov	r3, r1
 8008970:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800897a:	2300      	movs	r3, #0
 800897c:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	885b      	ldrh	r3, [r3, #2]
 8008982:	b29a      	uxth	r2, r3
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	781b      	ldrb	r3, [r3, #0]
 8008988:	b29b      	uxth	r3, r3
 800898a:	429a      	cmp	r2, r3
 800898c:	d920      	bls.n	80089d0 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	781b      	ldrb	r3, [r3, #0]
 8008992:	b29b      	uxth	r3, r3
 8008994:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8008996:	e013      	b.n	80089c0 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8008998:	f107 030a 	add.w	r3, r7, #10
 800899c:	4619      	mov	r1, r3
 800899e:	6978      	ldr	r0, [r7, #20]
 80089a0:	f000 f81b 	bl	80089da <USBD_GetNextDesc>
 80089a4:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80089a6:	697b      	ldr	r3, [r7, #20]
 80089a8:	785b      	ldrb	r3, [r3, #1]
 80089aa:	2b05      	cmp	r3, #5
 80089ac:	d108      	bne.n	80089c0 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80089ae:	697b      	ldr	r3, [r7, #20]
 80089b0:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80089b2:	693b      	ldr	r3, [r7, #16]
 80089b4:	789b      	ldrb	r3, [r3, #2]
 80089b6:	78fa      	ldrb	r2, [r7, #3]
 80089b8:	429a      	cmp	r2, r3
 80089ba:	d008      	beq.n	80089ce <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80089bc:	2300      	movs	r3, #0
 80089be:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	885b      	ldrh	r3, [r3, #2]
 80089c4:	b29a      	uxth	r2, r3
 80089c6:	897b      	ldrh	r3, [r7, #10]
 80089c8:	429a      	cmp	r2, r3
 80089ca:	d8e5      	bhi.n	8008998 <USBD_GetEpDesc+0x32>
 80089cc:	e000      	b.n	80089d0 <USBD_GetEpDesc+0x6a>
          break;
 80089ce:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80089d0:	693b      	ldr	r3, [r7, #16]
}
 80089d2:	4618      	mov	r0, r3
 80089d4:	3718      	adds	r7, #24
 80089d6:	46bd      	mov	sp, r7
 80089d8:	bd80      	pop	{r7, pc}

080089da <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80089da:	b480      	push	{r7}
 80089dc:	b085      	sub	sp, #20
 80089de:	af00      	add	r7, sp, #0
 80089e0:	6078      	str	r0, [r7, #4]
 80089e2:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80089e8:	683b      	ldr	r3, [r7, #0]
 80089ea:	881a      	ldrh	r2, [r3, #0]
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	781b      	ldrb	r3, [r3, #0]
 80089f0:	b29b      	uxth	r3, r3
 80089f2:	4413      	add	r3, r2
 80089f4:	b29a      	uxth	r2, r3
 80089f6:	683b      	ldr	r3, [r7, #0]
 80089f8:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	781b      	ldrb	r3, [r3, #0]
 80089fe:	461a      	mov	r2, r3
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	4413      	add	r3, r2
 8008a04:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8008a06:	68fb      	ldr	r3, [r7, #12]
}
 8008a08:	4618      	mov	r0, r3
 8008a0a:	3714      	adds	r7, #20
 8008a0c:	46bd      	mov	sp, r7
 8008a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a12:	4770      	bx	lr

08008a14 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8008a14:	b480      	push	{r7}
 8008a16:	b087      	sub	sp, #28
 8008a18:	af00      	add	r7, sp, #0
 8008a1a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8008a20:	697b      	ldr	r3, [r7, #20]
 8008a22:	781b      	ldrb	r3, [r3, #0]
 8008a24:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8008a26:	697b      	ldr	r3, [r7, #20]
 8008a28:	3301      	adds	r3, #1
 8008a2a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8008a2c:	697b      	ldr	r3, [r7, #20]
 8008a2e:	781b      	ldrb	r3, [r3, #0]
 8008a30:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8008a32:	8a3b      	ldrh	r3, [r7, #16]
 8008a34:	021b      	lsls	r3, r3, #8
 8008a36:	b21a      	sxth	r2, r3
 8008a38:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008a3c:	4313      	orrs	r3, r2
 8008a3e:	b21b      	sxth	r3, r3
 8008a40:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8008a42:	89fb      	ldrh	r3, [r7, #14]
}
 8008a44:	4618      	mov	r0, r3
 8008a46:	371c      	adds	r7, #28
 8008a48:	46bd      	mov	sp, r7
 8008a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a4e:	4770      	bx	lr

08008a50 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008a50:	b580      	push	{r7, lr}
 8008a52:	b084      	sub	sp, #16
 8008a54:	af00      	add	r7, sp, #0
 8008a56:	6078      	str	r0, [r7, #4]
 8008a58:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008a5a:	2300      	movs	r3, #0
 8008a5c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008a5e:	683b      	ldr	r3, [r7, #0]
 8008a60:	781b      	ldrb	r3, [r3, #0]
 8008a62:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008a66:	2b40      	cmp	r3, #64	; 0x40
 8008a68:	d005      	beq.n	8008a76 <USBD_StdDevReq+0x26>
 8008a6a:	2b40      	cmp	r3, #64	; 0x40
 8008a6c:	d857      	bhi.n	8008b1e <USBD_StdDevReq+0xce>
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d00f      	beq.n	8008a92 <USBD_StdDevReq+0x42>
 8008a72:	2b20      	cmp	r3, #32
 8008a74:	d153      	bne.n	8008b1e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	32ae      	adds	r2, #174	; 0xae
 8008a80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a84:	689b      	ldr	r3, [r3, #8]
 8008a86:	6839      	ldr	r1, [r7, #0]
 8008a88:	6878      	ldr	r0, [r7, #4]
 8008a8a:	4798      	blx	r3
 8008a8c:	4603      	mov	r3, r0
 8008a8e:	73fb      	strb	r3, [r7, #15]
      break;
 8008a90:	e04a      	b.n	8008b28 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008a92:	683b      	ldr	r3, [r7, #0]
 8008a94:	785b      	ldrb	r3, [r3, #1]
 8008a96:	2b09      	cmp	r3, #9
 8008a98:	d83b      	bhi.n	8008b12 <USBD_StdDevReq+0xc2>
 8008a9a:	a201      	add	r2, pc, #4	; (adr r2, 8008aa0 <USBD_StdDevReq+0x50>)
 8008a9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008aa0:	08008af5 	.word	0x08008af5
 8008aa4:	08008b09 	.word	0x08008b09
 8008aa8:	08008b13 	.word	0x08008b13
 8008aac:	08008aff 	.word	0x08008aff
 8008ab0:	08008b13 	.word	0x08008b13
 8008ab4:	08008ad3 	.word	0x08008ad3
 8008ab8:	08008ac9 	.word	0x08008ac9
 8008abc:	08008b13 	.word	0x08008b13
 8008ac0:	08008aeb 	.word	0x08008aeb
 8008ac4:	08008add 	.word	0x08008add
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008ac8:	6839      	ldr	r1, [r7, #0]
 8008aca:	6878      	ldr	r0, [r7, #4]
 8008acc:	f000 fa3c 	bl	8008f48 <USBD_GetDescriptor>
          break;
 8008ad0:	e024      	b.n	8008b1c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008ad2:	6839      	ldr	r1, [r7, #0]
 8008ad4:	6878      	ldr	r0, [r7, #4]
 8008ad6:	f000 fba1 	bl	800921c <USBD_SetAddress>
          break;
 8008ada:	e01f      	b.n	8008b1c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8008adc:	6839      	ldr	r1, [r7, #0]
 8008ade:	6878      	ldr	r0, [r7, #4]
 8008ae0:	f000 fbe0 	bl	80092a4 <USBD_SetConfig>
 8008ae4:	4603      	mov	r3, r0
 8008ae6:	73fb      	strb	r3, [r7, #15]
          break;
 8008ae8:	e018      	b.n	8008b1c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008aea:	6839      	ldr	r1, [r7, #0]
 8008aec:	6878      	ldr	r0, [r7, #4]
 8008aee:	f000 fc83 	bl	80093f8 <USBD_GetConfig>
          break;
 8008af2:	e013      	b.n	8008b1c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008af4:	6839      	ldr	r1, [r7, #0]
 8008af6:	6878      	ldr	r0, [r7, #4]
 8008af8:	f000 fcb4 	bl	8009464 <USBD_GetStatus>
          break;
 8008afc:	e00e      	b.n	8008b1c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008afe:	6839      	ldr	r1, [r7, #0]
 8008b00:	6878      	ldr	r0, [r7, #4]
 8008b02:	f000 fce3 	bl	80094cc <USBD_SetFeature>
          break;
 8008b06:	e009      	b.n	8008b1c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008b08:	6839      	ldr	r1, [r7, #0]
 8008b0a:	6878      	ldr	r0, [r7, #4]
 8008b0c:	f000 fd07 	bl	800951e <USBD_ClrFeature>
          break;
 8008b10:	e004      	b.n	8008b1c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8008b12:	6839      	ldr	r1, [r7, #0]
 8008b14:	6878      	ldr	r0, [r7, #4]
 8008b16:	f000 fd5e 	bl	80095d6 <USBD_CtlError>
          break;
 8008b1a:	bf00      	nop
      }
      break;
 8008b1c:	e004      	b.n	8008b28 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8008b1e:	6839      	ldr	r1, [r7, #0]
 8008b20:	6878      	ldr	r0, [r7, #4]
 8008b22:	f000 fd58 	bl	80095d6 <USBD_CtlError>
      break;
 8008b26:	bf00      	nop
  }

  return ret;
 8008b28:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b2a:	4618      	mov	r0, r3
 8008b2c:	3710      	adds	r7, #16
 8008b2e:	46bd      	mov	sp, r7
 8008b30:	bd80      	pop	{r7, pc}
 8008b32:	bf00      	nop

08008b34 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008b34:	b580      	push	{r7, lr}
 8008b36:	b084      	sub	sp, #16
 8008b38:	af00      	add	r7, sp, #0
 8008b3a:	6078      	str	r0, [r7, #4]
 8008b3c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008b3e:	2300      	movs	r3, #0
 8008b40:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008b42:	683b      	ldr	r3, [r7, #0]
 8008b44:	781b      	ldrb	r3, [r3, #0]
 8008b46:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008b4a:	2b40      	cmp	r3, #64	; 0x40
 8008b4c:	d005      	beq.n	8008b5a <USBD_StdItfReq+0x26>
 8008b4e:	2b40      	cmp	r3, #64	; 0x40
 8008b50:	d852      	bhi.n	8008bf8 <USBD_StdItfReq+0xc4>
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d001      	beq.n	8008b5a <USBD_StdItfReq+0x26>
 8008b56:	2b20      	cmp	r3, #32
 8008b58:	d14e      	bne.n	8008bf8 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b60:	b2db      	uxtb	r3, r3
 8008b62:	3b01      	subs	r3, #1
 8008b64:	2b02      	cmp	r3, #2
 8008b66:	d840      	bhi.n	8008bea <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008b68:	683b      	ldr	r3, [r7, #0]
 8008b6a:	889b      	ldrh	r3, [r3, #4]
 8008b6c:	b2db      	uxtb	r3, r3
 8008b6e:	2b01      	cmp	r3, #1
 8008b70:	d836      	bhi.n	8008be0 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8008b72:	683b      	ldr	r3, [r7, #0]
 8008b74:	889b      	ldrh	r3, [r3, #4]
 8008b76:	b2db      	uxtb	r3, r3
 8008b78:	4619      	mov	r1, r3
 8008b7a:	6878      	ldr	r0, [r7, #4]
 8008b7c:	f7ff fed9 	bl	8008932 <USBD_CoreFindIF>
 8008b80:	4603      	mov	r3, r0
 8008b82:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008b84:	7bbb      	ldrb	r3, [r7, #14]
 8008b86:	2bff      	cmp	r3, #255	; 0xff
 8008b88:	d01d      	beq.n	8008bc6 <USBD_StdItfReq+0x92>
 8008b8a:	7bbb      	ldrb	r3, [r7, #14]
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d11a      	bne.n	8008bc6 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8008b90:	7bba      	ldrb	r2, [r7, #14]
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	32ae      	adds	r2, #174	; 0xae
 8008b96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b9a:	689b      	ldr	r3, [r3, #8]
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d00f      	beq.n	8008bc0 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8008ba0:	7bba      	ldrb	r2, [r7, #14]
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008ba8:	7bba      	ldrb	r2, [r7, #14]
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	32ae      	adds	r2, #174	; 0xae
 8008bae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008bb2:	689b      	ldr	r3, [r3, #8]
 8008bb4:	6839      	ldr	r1, [r7, #0]
 8008bb6:	6878      	ldr	r0, [r7, #4]
 8008bb8:	4798      	blx	r3
 8008bba:	4603      	mov	r3, r0
 8008bbc:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008bbe:	e004      	b.n	8008bca <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8008bc0:	2303      	movs	r3, #3
 8008bc2:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008bc4:	e001      	b.n	8008bca <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8008bc6:	2303      	movs	r3, #3
 8008bc8:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008bca:	683b      	ldr	r3, [r7, #0]
 8008bcc:	88db      	ldrh	r3, [r3, #6]
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d110      	bne.n	8008bf4 <USBD_StdItfReq+0xc0>
 8008bd2:	7bfb      	ldrb	r3, [r7, #15]
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d10d      	bne.n	8008bf4 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8008bd8:	6878      	ldr	r0, [r7, #4]
 8008bda:	f000 fdaa 	bl	8009732 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008bde:	e009      	b.n	8008bf4 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8008be0:	6839      	ldr	r1, [r7, #0]
 8008be2:	6878      	ldr	r0, [r7, #4]
 8008be4:	f000 fcf7 	bl	80095d6 <USBD_CtlError>
          break;
 8008be8:	e004      	b.n	8008bf4 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8008bea:	6839      	ldr	r1, [r7, #0]
 8008bec:	6878      	ldr	r0, [r7, #4]
 8008bee:	f000 fcf2 	bl	80095d6 <USBD_CtlError>
          break;
 8008bf2:	e000      	b.n	8008bf6 <USBD_StdItfReq+0xc2>
          break;
 8008bf4:	bf00      	nop
      }
      break;
 8008bf6:	e004      	b.n	8008c02 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8008bf8:	6839      	ldr	r1, [r7, #0]
 8008bfa:	6878      	ldr	r0, [r7, #4]
 8008bfc:	f000 fceb 	bl	80095d6 <USBD_CtlError>
      break;
 8008c00:	bf00      	nop
  }

  return ret;
 8008c02:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c04:	4618      	mov	r0, r3
 8008c06:	3710      	adds	r7, #16
 8008c08:	46bd      	mov	sp, r7
 8008c0a:	bd80      	pop	{r7, pc}

08008c0c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008c0c:	b580      	push	{r7, lr}
 8008c0e:	b084      	sub	sp, #16
 8008c10:	af00      	add	r7, sp, #0
 8008c12:	6078      	str	r0, [r7, #4]
 8008c14:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8008c16:	2300      	movs	r3, #0
 8008c18:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8008c1a:	683b      	ldr	r3, [r7, #0]
 8008c1c:	889b      	ldrh	r3, [r3, #4]
 8008c1e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008c20:	683b      	ldr	r3, [r7, #0]
 8008c22:	781b      	ldrb	r3, [r3, #0]
 8008c24:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008c28:	2b40      	cmp	r3, #64	; 0x40
 8008c2a:	d007      	beq.n	8008c3c <USBD_StdEPReq+0x30>
 8008c2c:	2b40      	cmp	r3, #64	; 0x40
 8008c2e:	f200 817f 	bhi.w	8008f30 <USBD_StdEPReq+0x324>
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d02a      	beq.n	8008c8c <USBD_StdEPReq+0x80>
 8008c36:	2b20      	cmp	r3, #32
 8008c38:	f040 817a 	bne.w	8008f30 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8008c3c:	7bbb      	ldrb	r3, [r7, #14]
 8008c3e:	4619      	mov	r1, r3
 8008c40:	6878      	ldr	r0, [r7, #4]
 8008c42:	f7ff fe83 	bl	800894c <USBD_CoreFindEP>
 8008c46:	4603      	mov	r3, r0
 8008c48:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008c4a:	7b7b      	ldrb	r3, [r7, #13]
 8008c4c:	2bff      	cmp	r3, #255	; 0xff
 8008c4e:	f000 8174 	beq.w	8008f3a <USBD_StdEPReq+0x32e>
 8008c52:	7b7b      	ldrb	r3, [r7, #13]
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	f040 8170 	bne.w	8008f3a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8008c5a:	7b7a      	ldrb	r2, [r7, #13]
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8008c62:	7b7a      	ldrb	r2, [r7, #13]
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	32ae      	adds	r2, #174	; 0xae
 8008c68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c6c:	689b      	ldr	r3, [r3, #8]
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	f000 8163 	beq.w	8008f3a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8008c74:	7b7a      	ldrb	r2, [r7, #13]
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	32ae      	adds	r2, #174	; 0xae
 8008c7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c7e:	689b      	ldr	r3, [r3, #8]
 8008c80:	6839      	ldr	r1, [r7, #0]
 8008c82:	6878      	ldr	r0, [r7, #4]
 8008c84:	4798      	blx	r3
 8008c86:	4603      	mov	r3, r0
 8008c88:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8008c8a:	e156      	b.n	8008f3a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008c8c:	683b      	ldr	r3, [r7, #0]
 8008c8e:	785b      	ldrb	r3, [r3, #1]
 8008c90:	2b03      	cmp	r3, #3
 8008c92:	d008      	beq.n	8008ca6 <USBD_StdEPReq+0x9a>
 8008c94:	2b03      	cmp	r3, #3
 8008c96:	f300 8145 	bgt.w	8008f24 <USBD_StdEPReq+0x318>
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	f000 809b 	beq.w	8008dd6 <USBD_StdEPReq+0x1ca>
 8008ca0:	2b01      	cmp	r3, #1
 8008ca2:	d03c      	beq.n	8008d1e <USBD_StdEPReq+0x112>
 8008ca4:	e13e      	b.n	8008f24 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008cac:	b2db      	uxtb	r3, r3
 8008cae:	2b02      	cmp	r3, #2
 8008cb0:	d002      	beq.n	8008cb8 <USBD_StdEPReq+0xac>
 8008cb2:	2b03      	cmp	r3, #3
 8008cb4:	d016      	beq.n	8008ce4 <USBD_StdEPReq+0xd8>
 8008cb6:	e02c      	b.n	8008d12 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008cb8:	7bbb      	ldrb	r3, [r7, #14]
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d00d      	beq.n	8008cda <USBD_StdEPReq+0xce>
 8008cbe:	7bbb      	ldrb	r3, [r7, #14]
 8008cc0:	2b80      	cmp	r3, #128	; 0x80
 8008cc2:	d00a      	beq.n	8008cda <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008cc4:	7bbb      	ldrb	r3, [r7, #14]
 8008cc6:	4619      	mov	r1, r3
 8008cc8:	6878      	ldr	r0, [r7, #4]
 8008cca:	f001 f88f 	bl	8009dec <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008cce:	2180      	movs	r1, #128	; 0x80
 8008cd0:	6878      	ldr	r0, [r7, #4]
 8008cd2:	f001 f88b 	bl	8009dec <USBD_LL_StallEP>
 8008cd6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008cd8:	e020      	b.n	8008d1c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8008cda:	6839      	ldr	r1, [r7, #0]
 8008cdc:	6878      	ldr	r0, [r7, #4]
 8008cde:	f000 fc7a 	bl	80095d6 <USBD_CtlError>
              break;
 8008ce2:	e01b      	b.n	8008d1c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008ce4:	683b      	ldr	r3, [r7, #0]
 8008ce6:	885b      	ldrh	r3, [r3, #2]
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d10e      	bne.n	8008d0a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008cec:	7bbb      	ldrb	r3, [r7, #14]
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d00b      	beq.n	8008d0a <USBD_StdEPReq+0xfe>
 8008cf2:	7bbb      	ldrb	r3, [r7, #14]
 8008cf4:	2b80      	cmp	r3, #128	; 0x80
 8008cf6:	d008      	beq.n	8008d0a <USBD_StdEPReq+0xfe>
 8008cf8:	683b      	ldr	r3, [r7, #0]
 8008cfa:	88db      	ldrh	r3, [r3, #6]
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d104      	bne.n	8008d0a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8008d00:	7bbb      	ldrb	r3, [r7, #14]
 8008d02:	4619      	mov	r1, r3
 8008d04:	6878      	ldr	r0, [r7, #4]
 8008d06:	f001 f871 	bl	8009dec <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8008d0a:	6878      	ldr	r0, [r7, #4]
 8008d0c:	f000 fd11 	bl	8009732 <USBD_CtlSendStatus>

              break;
 8008d10:	e004      	b.n	8008d1c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8008d12:	6839      	ldr	r1, [r7, #0]
 8008d14:	6878      	ldr	r0, [r7, #4]
 8008d16:	f000 fc5e 	bl	80095d6 <USBD_CtlError>
              break;
 8008d1a:	bf00      	nop
          }
          break;
 8008d1c:	e107      	b.n	8008f2e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008d24:	b2db      	uxtb	r3, r3
 8008d26:	2b02      	cmp	r3, #2
 8008d28:	d002      	beq.n	8008d30 <USBD_StdEPReq+0x124>
 8008d2a:	2b03      	cmp	r3, #3
 8008d2c:	d016      	beq.n	8008d5c <USBD_StdEPReq+0x150>
 8008d2e:	e04b      	b.n	8008dc8 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008d30:	7bbb      	ldrb	r3, [r7, #14]
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d00d      	beq.n	8008d52 <USBD_StdEPReq+0x146>
 8008d36:	7bbb      	ldrb	r3, [r7, #14]
 8008d38:	2b80      	cmp	r3, #128	; 0x80
 8008d3a:	d00a      	beq.n	8008d52 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008d3c:	7bbb      	ldrb	r3, [r7, #14]
 8008d3e:	4619      	mov	r1, r3
 8008d40:	6878      	ldr	r0, [r7, #4]
 8008d42:	f001 f853 	bl	8009dec <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008d46:	2180      	movs	r1, #128	; 0x80
 8008d48:	6878      	ldr	r0, [r7, #4]
 8008d4a:	f001 f84f 	bl	8009dec <USBD_LL_StallEP>
 8008d4e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008d50:	e040      	b.n	8008dd4 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8008d52:	6839      	ldr	r1, [r7, #0]
 8008d54:	6878      	ldr	r0, [r7, #4]
 8008d56:	f000 fc3e 	bl	80095d6 <USBD_CtlError>
              break;
 8008d5a:	e03b      	b.n	8008dd4 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008d5c:	683b      	ldr	r3, [r7, #0]
 8008d5e:	885b      	ldrh	r3, [r3, #2]
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d136      	bne.n	8008dd2 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008d64:	7bbb      	ldrb	r3, [r7, #14]
 8008d66:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d004      	beq.n	8008d78 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8008d6e:	7bbb      	ldrb	r3, [r7, #14]
 8008d70:	4619      	mov	r1, r3
 8008d72:	6878      	ldr	r0, [r7, #4]
 8008d74:	f001 f859 	bl	8009e2a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8008d78:	6878      	ldr	r0, [r7, #4]
 8008d7a:	f000 fcda 	bl	8009732 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8008d7e:	7bbb      	ldrb	r3, [r7, #14]
 8008d80:	4619      	mov	r1, r3
 8008d82:	6878      	ldr	r0, [r7, #4]
 8008d84:	f7ff fde2 	bl	800894c <USBD_CoreFindEP>
 8008d88:	4603      	mov	r3, r0
 8008d8a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008d8c:	7b7b      	ldrb	r3, [r7, #13]
 8008d8e:	2bff      	cmp	r3, #255	; 0xff
 8008d90:	d01f      	beq.n	8008dd2 <USBD_StdEPReq+0x1c6>
 8008d92:	7b7b      	ldrb	r3, [r7, #13]
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d11c      	bne.n	8008dd2 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8008d98:	7b7a      	ldrb	r2, [r7, #13]
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8008da0:	7b7a      	ldrb	r2, [r7, #13]
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	32ae      	adds	r2, #174	; 0xae
 8008da6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008daa:	689b      	ldr	r3, [r3, #8]
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d010      	beq.n	8008dd2 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008db0:	7b7a      	ldrb	r2, [r7, #13]
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	32ae      	adds	r2, #174	; 0xae
 8008db6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008dba:	689b      	ldr	r3, [r3, #8]
 8008dbc:	6839      	ldr	r1, [r7, #0]
 8008dbe:	6878      	ldr	r0, [r7, #4]
 8008dc0:	4798      	blx	r3
 8008dc2:	4603      	mov	r3, r0
 8008dc4:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8008dc6:	e004      	b.n	8008dd2 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8008dc8:	6839      	ldr	r1, [r7, #0]
 8008dca:	6878      	ldr	r0, [r7, #4]
 8008dcc:	f000 fc03 	bl	80095d6 <USBD_CtlError>
              break;
 8008dd0:	e000      	b.n	8008dd4 <USBD_StdEPReq+0x1c8>
              break;
 8008dd2:	bf00      	nop
          }
          break;
 8008dd4:	e0ab      	b.n	8008f2e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ddc:	b2db      	uxtb	r3, r3
 8008dde:	2b02      	cmp	r3, #2
 8008de0:	d002      	beq.n	8008de8 <USBD_StdEPReq+0x1dc>
 8008de2:	2b03      	cmp	r3, #3
 8008de4:	d032      	beq.n	8008e4c <USBD_StdEPReq+0x240>
 8008de6:	e097      	b.n	8008f18 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008de8:	7bbb      	ldrb	r3, [r7, #14]
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d007      	beq.n	8008dfe <USBD_StdEPReq+0x1f2>
 8008dee:	7bbb      	ldrb	r3, [r7, #14]
 8008df0:	2b80      	cmp	r3, #128	; 0x80
 8008df2:	d004      	beq.n	8008dfe <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8008df4:	6839      	ldr	r1, [r7, #0]
 8008df6:	6878      	ldr	r0, [r7, #4]
 8008df8:	f000 fbed 	bl	80095d6 <USBD_CtlError>
                break;
 8008dfc:	e091      	b.n	8008f22 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008dfe:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	da0b      	bge.n	8008e1e <USBD_StdEPReq+0x212>
 8008e06:	7bbb      	ldrb	r3, [r7, #14]
 8008e08:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008e0c:	4613      	mov	r3, r2
 8008e0e:	009b      	lsls	r3, r3, #2
 8008e10:	4413      	add	r3, r2
 8008e12:	009b      	lsls	r3, r3, #2
 8008e14:	3310      	adds	r3, #16
 8008e16:	687a      	ldr	r2, [r7, #4]
 8008e18:	4413      	add	r3, r2
 8008e1a:	3304      	adds	r3, #4
 8008e1c:	e00b      	b.n	8008e36 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008e1e:	7bbb      	ldrb	r3, [r7, #14]
 8008e20:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008e24:	4613      	mov	r3, r2
 8008e26:	009b      	lsls	r3, r3, #2
 8008e28:	4413      	add	r3, r2
 8008e2a:	009b      	lsls	r3, r3, #2
 8008e2c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008e30:	687a      	ldr	r2, [r7, #4]
 8008e32:	4413      	add	r3, r2
 8008e34:	3304      	adds	r3, #4
 8008e36:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008e38:	68bb      	ldr	r3, [r7, #8]
 8008e3a:	2200      	movs	r2, #0
 8008e3c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008e3e:	68bb      	ldr	r3, [r7, #8]
 8008e40:	2202      	movs	r2, #2
 8008e42:	4619      	mov	r1, r3
 8008e44:	6878      	ldr	r0, [r7, #4]
 8008e46:	f000 fc37 	bl	80096b8 <USBD_CtlSendData>
              break;
 8008e4a:	e06a      	b.n	8008f22 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008e4c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	da11      	bge.n	8008e78 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008e54:	7bbb      	ldrb	r3, [r7, #14]
 8008e56:	f003 020f 	and.w	r2, r3, #15
 8008e5a:	6879      	ldr	r1, [r7, #4]
 8008e5c:	4613      	mov	r3, r2
 8008e5e:	009b      	lsls	r3, r3, #2
 8008e60:	4413      	add	r3, r2
 8008e62:	009b      	lsls	r3, r3, #2
 8008e64:	440b      	add	r3, r1
 8008e66:	3324      	adds	r3, #36	; 0x24
 8008e68:	881b      	ldrh	r3, [r3, #0]
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d117      	bne.n	8008e9e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8008e6e:	6839      	ldr	r1, [r7, #0]
 8008e70:	6878      	ldr	r0, [r7, #4]
 8008e72:	f000 fbb0 	bl	80095d6 <USBD_CtlError>
                  break;
 8008e76:	e054      	b.n	8008f22 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008e78:	7bbb      	ldrb	r3, [r7, #14]
 8008e7a:	f003 020f 	and.w	r2, r3, #15
 8008e7e:	6879      	ldr	r1, [r7, #4]
 8008e80:	4613      	mov	r3, r2
 8008e82:	009b      	lsls	r3, r3, #2
 8008e84:	4413      	add	r3, r2
 8008e86:	009b      	lsls	r3, r3, #2
 8008e88:	440b      	add	r3, r1
 8008e8a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008e8e:	881b      	ldrh	r3, [r3, #0]
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d104      	bne.n	8008e9e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8008e94:	6839      	ldr	r1, [r7, #0]
 8008e96:	6878      	ldr	r0, [r7, #4]
 8008e98:	f000 fb9d 	bl	80095d6 <USBD_CtlError>
                  break;
 8008e9c:	e041      	b.n	8008f22 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008e9e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	da0b      	bge.n	8008ebe <USBD_StdEPReq+0x2b2>
 8008ea6:	7bbb      	ldrb	r3, [r7, #14]
 8008ea8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008eac:	4613      	mov	r3, r2
 8008eae:	009b      	lsls	r3, r3, #2
 8008eb0:	4413      	add	r3, r2
 8008eb2:	009b      	lsls	r3, r3, #2
 8008eb4:	3310      	adds	r3, #16
 8008eb6:	687a      	ldr	r2, [r7, #4]
 8008eb8:	4413      	add	r3, r2
 8008eba:	3304      	adds	r3, #4
 8008ebc:	e00b      	b.n	8008ed6 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008ebe:	7bbb      	ldrb	r3, [r7, #14]
 8008ec0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008ec4:	4613      	mov	r3, r2
 8008ec6:	009b      	lsls	r3, r3, #2
 8008ec8:	4413      	add	r3, r2
 8008eca:	009b      	lsls	r3, r3, #2
 8008ecc:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008ed0:	687a      	ldr	r2, [r7, #4]
 8008ed2:	4413      	add	r3, r2
 8008ed4:	3304      	adds	r3, #4
 8008ed6:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008ed8:	7bbb      	ldrb	r3, [r7, #14]
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d002      	beq.n	8008ee4 <USBD_StdEPReq+0x2d8>
 8008ede:	7bbb      	ldrb	r3, [r7, #14]
 8008ee0:	2b80      	cmp	r3, #128	; 0x80
 8008ee2:	d103      	bne.n	8008eec <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8008ee4:	68bb      	ldr	r3, [r7, #8]
 8008ee6:	2200      	movs	r2, #0
 8008ee8:	601a      	str	r2, [r3, #0]
 8008eea:	e00e      	b.n	8008f0a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008eec:	7bbb      	ldrb	r3, [r7, #14]
 8008eee:	4619      	mov	r1, r3
 8008ef0:	6878      	ldr	r0, [r7, #4]
 8008ef2:	f000 ffb9 	bl	8009e68 <USBD_LL_IsStallEP>
 8008ef6:	4603      	mov	r3, r0
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d003      	beq.n	8008f04 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8008efc:	68bb      	ldr	r3, [r7, #8]
 8008efe:	2201      	movs	r2, #1
 8008f00:	601a      	str	r2, [r3, #0]
 8008f02:	e002      	b.n	8008f0a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8008f04:	68bb      	ldr	r3, [r7, #8]
 8008f06:	2200      	movs	r2, #0
 8008f08:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008f0a:	68bb      	ldr	r3, [r7, #8]
 8008f0c:	2202      	movs	r2, #2
 8008f0e:	4619      	mov	r1, r3
 8008f10:	6878      	ldr	r0, [r7, #4]
 8008f12:	f000 fbd1 	bl	80096b8 <USBD_CtlSendData>
              break;
 8008f16:	e004      	b.n	8008f22 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8008f18:	6839      	ldr	r1, [r7, #0]
 8008f1a:	6878      	ldr	r0, [r7, #4]
 8008f1c:	f000 fb5b 	bl	80095d6 <USBD_CtlError>
              break;
 8008f20:	bf00      	nop
          }
          break;
 8008f22:	e004      	b.n	8008f2e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8008f24:	6839      	ldr	r1, [r7, #0]
 8008f26:	6878      	ldr	r0, [r7, #4]
 8008f28:	f000 fb55 	bl	80095d6 <USBD_CtlError>
          break;
 8008f2c:	bf00      	nop
      }
      break;
 8008f2e:	e005      	b.n	8008f3c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8008f30:	6839      	ldr	r1, [r7, #0]
 8008f32:	6878      	ldr	r0, [r7, #4]
 8008f34:	f000 fb4f 	bl	80095d6 <USBD_CtlError>
      break;
 8008f38:	e000      	b.n	8008f3c <USBD_StdEPReq+0x330>
      break;
 8008f3a:	bf00      	nop
  }

  return ret;
 8008f3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f3e:	4618      	mov	r0, r3
 8008f40:	3710      	adds	r7, #16
 8008f42:	46bd      	mov	sp, r7
 8008f44:	bd80      	pop	{r7, pc}
	...

08008f48 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008f48:	b580      	push	{r7, lr}
 8008f4a:	b084      	sub	sp, #16
 8008f4c:	af00      	add	r7, sp, #0
 8008f4e:	6078      	str	r0, [r7, #4]
 8008f50:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008f52:	2300      	movs	r3, #0
 8008f54:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008f56:	2300      	movs	r3, #0
 8008f58:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008f5a:	2300      	movs	r3, #0
 8008f5c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008f5e:	683b      	ldr	r3, [r7, #0]
 8008f60:	885b      	ldrh	r3, [r3, #2]
 8008f62:	0a1b      	lsrs	r3, r3, #8
 8008f64:	b29b      	uxth	r3, r3
 8008f66:	3b01      	subs	r3, #1
 8008f68:	2b06      	cmp	r3, #6
 8008f6a:	f200 8128 	bhi.w	80091be <USBD_GetDescriptor+0x276>
 8008f6e:	a201      	add	r2, pc, #4	; (adr r2, 8008f74 <USBD_GetDescriptor+0x2c>)
 8008f70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f74:	08008f91 	.word	0x08008f91
 8008f78:	08008fa9 	.word	0x08008fa9
 8008f7c:	08008fe9 	.word	0x08008fe9
 8008f80:	080091bf 	.word	0x080091bf
 8008f84:	080091bf 	.word	0x080091bf
 8008f88:	0800915f 	.word	0x0800915f
 8008f8c:	0800918b 	.word	0x0800918b
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	687a      	ldr	r2, [r7, #4]
 8008f9a:	7c12      	ldrb	r2, [r2, #16]
 8008f9c:	f107 0108 	add.w	r1, r7, #8
 8008fa0:	4610      	mov	r0, r2
 8008fa2:	4798      	blx	r3
 8008fa4:	60f8      	str	r0, [r7, #12]
      break;
 8008fa6:	e112      	b.n	80091ce <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	7c1b      	ldrb	r3, [r3, #16]
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d10d      	bne.n	8008fcc <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008fb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fb8:	f107 0208 	add.w	r2, r7, #8
 8008fbc:	4610      	mov	r0, r2
 8008fbe:	4798      	blx	r3
 8008fc0:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	3301      	adds	r3, #1
 8008fc6:	2202      	movs	r2, #2
 8008fc8:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008fca:	e100      	b.n	80091ce <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008fd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fd4:	f107 0208 	add.w	r2, r7, #8
 8008fd8:	4610      	mov	r0, r2
 8008fda:	4798      	blx	r3
 8008fdc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	3301      	adds	r3, #1
 8008fe2:	2202      	movs	r2, #2
 8008fe4:	701a      	strb	r2, [r3, #0]
      break;
 8008fe6:	e0f2      	b.n	80091ce <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008fe8:	683b      	ldr	r3, [r7, #0]
 8008fea:	885b      	ldrh	r3, [r3, #2]
 8008fec:	b2db      	uxtb	r3, r3
 8008fee:	2b05      	cmp	r3, #5
 8008ff0:	f200 80ac 	bhi.w	800914c <USBD_GetDescriptor+0x204>
 8008ff4:	a201      	add	r2, pc, #4	; (adr r2, 8008ffc <USBD_GetDescriptor+0xb4>)
 8008ff6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ffa:	bf00      	nop
 8008ffc:	08009015 	.word	0x08009015
 8009000:	08009049 	.word	0x08009049
 8009004:	0800907d 	.word	0x0800907d
 8009008:	080090b1 	.word	0x080090b1
 800900c:	080090e5 	.word	0x080090e5
 8009010:	08009119 	.word	0x08009119
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800901a:	685b      	ldr	r3, [r3, #4]
 800901c:	2b00      	cmp	r3, #0
 800901e:	d00b      	beq.n	8009038 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009026:	685b      	ldr	r3, [r3, #4]
 8009028:	687a      	ldr	r2, [r7, #4]
 800902a:	7c12      	ldrb	r2, [r2, #16]
 800902c:	f107 0108 	add.w	r1, r7, #8
 8009030:	4610      	mov	r0, r2
 8009032:	4798      	blx	r3
 8009034:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009036:	e091      	b.n	800915c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009038:	6839      	ldr	r1, [r7, #0]
 800903a:	6878      	ldr	r0, [r7, #4]
 800903c:	f000 facb 	bl	80095d6 <USBD_CtlError>
            err++;
 8009040:	7afb      	ldrb	r3, [r7, #11]
 8009042:	3301      	adds	r3, #1
 8009044:	72fb      	strb	r3, [r7, #11]
          break;
 8009046:	e089      	b.n	800915c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800904e:	689b      	ldr	r3, [r3, #8]
 8009050:	2b00      	cmp	r3, #0
 8009052:	d00b      	beq.n	800906c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800905a:	689b      	ldr	r3, [r3, #8]
 800905c:	687a      	ldr	r2, [r7, #4]
 800905e:	7c12      	ldrb	r2, [r2, #16]
 8009060:	f107 0108 	add.w	r1, r7, #8
 8009064:	4610      	mov	r0, r2
 8009066:	4798      	blx	r3
 8009068:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800906a:	e077      	b.n	800915c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800906c:	6839      	ldr	r1, [r7, #0]
 800906e:	6878      	ldr	r0, [r7, #4]
 8009070:	f000 fab1 	bl	80095d6 <USBD_CtlError>
            err++;
 8009074:	7afb      	ldrb	r3, [r7, #11]
 8009076:	3301      	adds	r3, #1
 8009078:	72fb      	strb	r3, [r7, #11]
          break;
 800907a:	e06f      	b.n	800915c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009082:	68db      	ldr	r3, [r3, #12]
 8009084:	2b00      	cmp	r3, #0
 8009086:	d00b      	beq.n	80090a0 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800908e:	68db      	ldr	r3, [r3, #12]
 8009090:	687a      	ldr	r2, [r7, #4]
 8009092:	7c12      	ldrb	r2, [r2, #16]
 8009094:	f107 0108 	add.w	r1, r7, #8
 8009098:	4610      	mov	r0, r2
 800909a:	4798      	blx	r3
 800909c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800909e:	e05d      	b.n	800915c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80090a0:	6839      	ldr	r1, [r7, #0]
 80090a2:	6878      	ldr	r0, [r7, #4]
 80090a4:	f000 fa97 	bl	80095d6 <USBD_CtlError>
            err++;
 80090a8:	7afb      	ldrb	r3, [r7, #11]
 80090aa:	3301      	adds	r3, #1
 80090ac:	72fb      	strb	r3, [r7, #11]
          break;
 80090ae:	e055      	b.n	800915c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80090b6:	691b      	ldr	r3, [r3, #16]
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d00b      	beq.n	80090d4 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80090c2:	691b      	ldr	r3, [r3, #16]
 80090c4:	687a      	ldr	r2, [r7, #4]
 80090c6:	7c12      	ldrb	r2, [r2, #16]
 80090c8:	f107 0108 	add.w	r1, r7, #8
 80090cc:	4610      	mov	r0, r2
 80090ce:	4798      	blx	r3
 80090d0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80090d2:	e043      	b.n	800915c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80090d4:	6839      	ldr	r1, [r7, #0]
 80090d6:	6878      	ldr	r0, [r7, #4]
 80090d8:	f000 fa7d 	bl	80095d6 <USBD_CtlError>
            err++;
 80090dc:	7afb      	ldrb	r3, [r7, #11]
 80090de:	3301      	adds	r3, #1
 80090e0:	72fb      	strb	r3, [r7, #11]
          break;
 80090e2:	e03b      	b.n	800915c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80090ea:	695b      	ldr	r3, [r3, #20]
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d00b      	beq.n	8009108 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80090f6:	695b      	ldr	r3, [r3, #20]
 80090f8:	687a      	ldr	r2, [r7, #4]
 80090fa:	7c12      	ldrb	r2, [r2, #16]
 80090fc:	f107 0108 	add.w	r1, r7, #8
 8009100:	4610      	mov	r0, r2
 8009102:	4798      	blx	r3
 8009104:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009106:	e029      	b.n	800915c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009108:	6839      	ldr	r1, [r7, #0]
 800910a:	6878      	ldr	r0, [r7, #4]
 800910c:	f000 fa63 	bl	80095d6 <USBD_CtlError>
            err++;
 8009110:	7afb      	ldrb	r3, [r7, #11]
 8009112:	3301      	adds	r3, #1
 8009114:	72fb      	strb	r3, [r7, #11]
          break;
 8009116:	e021      	b.n	800915c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800911e:	699b      	ldr	r3, [r3, #24]
 8009120:	2b00      	cmp	r3, #0
 8009122:	d00b      	beq.n	800913c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800912a:	699b      	ldr	r3, [r3, #24]
 800912c:	687a      	ldr	r2, [r7, #4]
 800912e:	7c12      	ldrb	r2, [r2, #16]
 8009130:	f107 0108 	add.w	r1, r7, #8
 8009134:	4610      	mov	r0, r2
 8009136:	4798      	blx	r3
 8009138:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800913a:	e00f      	b.n	800915c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800913c:	6839      	ldr	r1, [r7, #0]
 800913e:	6878      	ldr	r0, [r7, #4]
 8009140:	f000 fa49 	bl	80095d6 <USBD_CtlError>
            err++;
 8009144:	7afb      	ldrb	r3, [r7, #11]
 8009146:	3301      	adds	r3, #1
 8009148:	72fb      	strb	r3, [r7, #11]
          break;
 800914a:	e007      	b.n	800915c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800914c:	6839      	ldr	r1, [r7, #0]
 800914e:	6878      	ldr	r0, [r7, #4]
 8009150:	f000 fa41 	bl	80095d6 <USBD_CtlError>
          err++;
 8009154:	7afb      	ldrb	r3, [r7, #11]
 8009156:	3301      	adds	r3, #1
 8009158:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800915a:	bf00      	nop
      }
      break;
 800915c:	e037      	b.n	80091ce <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	7c1b      	ldrb	r3, [r3, #16]
 8009162:	2b00      	cmp	r3, #0
 8009164:	d109      	bne.n	800917a <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800916c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800916e:	f107 0208 	add.w	r2, r7, #8
 8009172:	4610      	mov	r0, r2
 8009174:	4798      	blx	r3
 8009176:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009178:	e029      	b.n	80091ce <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800917a:	6839      	ldr	r1, [r7, #0]
 800917c:	6878      	ldr	r0, [r7, #4]
 800917e:	f000 fa2a 	bl	80095d6 <USBD_CtlError>
        err++;
 8009182:	7afb      	ldrb	r3, [r7, #11]
 8009184:	3301      	adds	r3, #1
 8009186:	72fb      	strb	r3, [r7, #11]
      break;
 8009188:	e021      	b.n	80091ce <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	7c1b      	ldrb	r3, [r3, #16]
 800918e:	2b00      	cmp	r3, #0
 8009190:	d10d      	bne.n	80091ae <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800919a:	f107 0208 	add.w	r2, r7, #8
 800919e:	4610      	mov	r0, r2
 80091a0:	4798      	blx	r3
 80091a2:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	3301      	adds	r3, #1
 80091a8:	2207      	movs	r2, #7
 80091aa:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80091ac:	e00f      	b.n	80091ce <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80091ae:	6839      	ldr	r1, [r7, #0]
 80091b0:	6878      	ldr	r0, [r7, #4]
 80091b2:	f000 fa10 	bl	80095d6 <USBD_CtlError>
        err++;
 80091b6:	7afb      	ldrb	r3, [r7, #11]
 80091b8:	3301      	adds	r3, #1
 80091ba:	72fb      	strb	r3, [r7, #11]
      break;
 80091bc:	e007      	b.n	80091ce <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80091be:	6839      	ldr	r1, [r7, #0]
 80091c0:	6878      	ldr	r0, [r7, #4]
 80091c2:	f000 fa08 	bl	80095d6 <USBD_CtlError>
      err++;
 80091c6:	7afb      	ldrb	r3, [r7, #11]
 80091c8:	3301      	adds	r3, #1
 80091ca:	72fb      	strb	r3, [r7, #11]
      break;
 80091cc:	bf00      	nop
  }

  if (err != 0U)
 80091ce:	7afb      	ldrb	r3, [r7, #11]
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d11e      	bne.n	8009212 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 80091d4:	683b      	ldr	r3, [r7, #0]
 80091d6:	88db      	ldrh	r3, [r3, #6]
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d016      	beq.n	800920a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 80091dc:	893b      	ldrh	r3, [r7, #8]
 80091de:	2b00      	cmp	r3, #0
 80091e0:	d00e      	beq.n	8009200 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 80091e2:	683b      	ldr	r3, [r7, #0]
 80091e4:	88da      	ldrh	r2, [r3, #6]
 80091e6:	893b      	ldrh	r3, [r7, #8]
 80091e8:	4293      	cmp	r3, r2
 80091ea:	bf28      	it	cs
 80091ec:	4613      	movcs	r3, r2
 80091ee:	b29b      	uxth	r3, r3
 80091f0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80091f2:	893b      	ldrh	r3, [r7, #8]
 80091f4:	461a      	mov	r2, r3
 80091f6:	68f9      	ldr	r1, [r7, #12]
 80091f8:	6878      	ldr	r0, [r7, #4]
 80091fa:	f000 fa5d 	bl	80096b8 <USBD_CtlSendData>
 80091fe:	e009      	b.n	8009214 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8009200:	6839      	ldr	r1, [r7, #0]
 8009202:	6878      	ldr	r0, [r7, #4]
 8009204:	f000 f9e7 	bl	80095d6 <USBD_CtlError>
 8009208:	e004      	b.n	8009214 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800920a:	6878      	ldr	r0, [r7, #4]
 800920c:	f000 fa91 	bl	8009732 <USBD_CtlSendStatus>
 8009210:	e000      	b.n	8009214 <USBD_GetDescriptor+0x2cc>
    return;
 8009212:	bf00      	nop
  }
}
 8009214:	3710      	adds	r7, #16
 8009216:	46bd      	mov	sp, r7
 8009218:	bd80      	pop	{r7, pc}
 800921a:	bf00      	nop

0800921c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800921c:	b580      	push	{r7, lr}
 800921e:	b084      	sub	sp, #16
 8009220:	af00      	add	r7, sp, #0
 8009222:	6078      	str	r0, [r7, #4]
 8009224:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009226:	683b      	ldr	r3, [r7, #0]
 8009228:	889b      	ldrh	r3, [r3, #4]
 800922a:	2b00      	cmp	r3, #0
 800922c:	d131      	bne.n	8009292 <USBD_SetAddress+0x76>
 800922e:	683b      	ldr	r3, [r7, #0]
 8009230:	88db      	ldrh	r3, [r3, #6]
 8009232:	2b00      	cmp	r3, #0
 8009234:	d12d      	bne.n	8009292 <USBD_SetAddress+0x76>
 8009236:	683b      	ldr	r3, [r7, #0]
 8009238:	885b      	ldrh	r3, [r3, #2]
 800923a:	2b7f      	cmp	r3, #127	; 0x7f
 800923c:	d829      	bhi.n	8009292 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800923e:	683b      	ldr	r3, [r7, #0]
 8009240:	885b      	ldrh	r3, [r3, #2]
 8009242:	b2db      	uxtb	r3, r3
 8009244:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009248:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009250:	b2db      	uxtb	r3, r3
 8009252:	2b03      	cmp	r3, #3
 8009254:	d104      	bne.n	8009260 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8009256:	6839      	ldr	r1, [r7, #0]
 8009258:	6878      	ldr	r0, [r7, #4]
 800925a:	f000 f9bc 	bl	80095d6 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800925e:	e01d      	b.n	800929c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	7bfa      	ldrb	r2, [r7, #15]
 8009264:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009268:	7bfb      	ldrb	r3, [r7, #15]
 800926a:	4619      	mov	r1, r3
 800926c:	6878      	ldr	r0, [r7, #4]
 800926e:	f000 fe27 	bl	8009ec0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8009272:	6878      	ldr	r0, [r7, #4]
 8009274:	f000 fa5d 	bl	8009732 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009278:	7bfb      	ldrb	r3, [r7, #15]
 800927a:	2b00      	cmp	r3, #0
 800927c:	d004      	beq.n	8009288 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	2202      	movs	r2, #2
 8009282:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009286:	e009      	b.n	800929c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	2201      	movs	r2, #1
 800928c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009290:	e004      	b.n	800929c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009292:	6839      	ldr	r1, [r7, #0]
 8009294:	6878      	ldr	r0, [r7, #4]
 8009296:	f000 f99e 	bl	80095d6 <USBD_CtlError>
  }
}
 800929a:	bf00      	nop
 800929c:	bf00      	nop
 800929e:	3710      	adds	r7, #16
 80092a0:	46bd      	mov	sp, r7
 80092a2:	bd80      	pop	{r7, pc}

080092a4 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80092a4:	b580      	push	{r7, lr}
 80092a6:	b084      	sub	sp, #16
 80092a8:	af00      	add	r7, sp, #0
 80092aa:	6078      	str	r0, [r7, #4]
 80092ac:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80092ae:	2300      	movs	r3, #0
 80092b0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80092b2:	683b      	ldr	r3, [r7, #0]
 80092b4:	885b      	ldrh	r3, [r3, #2]
 80092b6:	b2da      	uxtb	r2, r3
 80092b8:	4b4e      	ldr	r3, [pc, #312]	; (80093f4 <USBD_SetConfig+0x150>)
 80092ba:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80092bc:	4b4d      	ldr	r3, [pc, #308]	; (80093f4 <USBD_SetConfig+0x150>)
 80092be:	781b      	ldrb	r3, [r3, #0]
 80092c0:	2b01      	cmp	r3, #1
 80092c2:	d905      	bls.n	80092d0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80092c4:	6839      	ldr	r1, [r7, #0]
 80092c6:	6878      	ldr	r0, [r7, #4]
 80092c8:	f000 f985 	bl	80095d6 <USBD_CtlError>
    return USBD_FAIL;
 80092cc:	2303      	movs	r3, #3
 80092ce:	e08c      	b.n	80093ea <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80092d6:	b2db      	uxtb	r3, r3
 80092d8:	2b02      	cmp	r3, #2
 80092da:	d002      	beq.n	80092e2 <USBD_SetConfig+0x3e>
 80092dc:	2b03      	cmp	r3, #3
 80092de:	d029      	beq.n	8009334 <USBD_SetConfig+0x90>
 80092e0:	e075      	b.n	80093ce <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80092e2:	4b44      	ldr	r3, [pc, #272]	; (80093f4 <USBD_SetConfig+0x150>)
 80092e4:	781b      	ldrb	r3, [r3, #0]
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d020      	beq.n	800932c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80092ea:	4b42      	ldr	r3, [pc, #264]	; (80093f4 <USBD_SetConfig+0x150>)
 80092ec:	781b      	ldrb	r3, [r3, #0]
 80092ee:	461a      	mov	r2, r3
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80092f4:	4b3f      	ldr	r3, [pc, #252]	; (80093f4 <USBD_SetConfig+0x150>)
 80092f6:	781b      	ldrb	r3, [r3, #0]
 80092f8:	4619      	mov	r1, r3
 80092fa:	6878      	ldr	r0, [r7, #4]
 80092fc:	f7fe ffe7 	bl	80082ce <USBD_SetClassConfig>
 8009300:	4603      	mov	r3, r0
 8009302:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8009304:	7bfb      	ldrb	r3, [r7, #15]
 8009306:	2b00      	cmp	r3, #0
 8009308:	d008      	beq.n	800931c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800930a:	6839      	ldr	r1, [r7, #0]
 800930c:	6878      	ldr	r0, [r7, #4]
 800930e:	f000 f962 	bl	80095d6 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	2202      	movs	r2, #2
 8009316:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800931a:	e065      	b.n	80093e8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800931c:	6878      	ldr	r0, [r7, #4]
 800931e:	f000 fa08 	bl	8009732 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	2203      	movs	r2, #3
 8009326:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800932a:	e05d      	b.n	80093e8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800932c:	6878      	ldr	r0, [r7, #4]
 800932e:	f000 fa00 	bl	8009732 <USBD_CtlSendStatus>
      break;
 8009332:	e059      	b.n	80093e8 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8009334:	4b2f      	ldr	r3, [pc, #188]	; (80093f4 <USBD_SetConfig+0x150>)
 8009336:	781b      	ldrb	r3, [r3, #0]
 8009338:	2b00      	cmp	r3, #0
 800933a:	d112      	bne.n	8009362 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	2202      	movs	r2, #2
 8009340:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8009344:	4b2b      	ldr	r3, [pc, #172]	; (80093f4 <USBD_SetConfig+0x150>)
 8009346:	781b      	ldrb	r3, [r3, #0]
 8009348:	461a      	mov	r2, r3
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800934e:	4b29      	ldr	r3, [pc, #164]	; (80093f4 <USBD_SetConfig+0x150>)
 8009350:	781b      	ldrb	r3, [r3, #0]
 8009352:	4619      	mov	r1, r3
 8009354:	6878      	ldr	r0, [r7, #4]
 8009356:	f7fe ffd6 	bl	8008306 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800935a:	6878      	ldr	r0, [r7, #4]
 800935c:	f000 f9e9 	bl	8009732 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009360:	e042      	b.n	80093e8 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8009362:	4b24      	ldr	r3, [pc, #144]	; (80093f4 <USBD_SetConfig+0x150>)
 8009364:	781b      	ldrb	r3, [r3, #0]
 8009366:	461a      	mov	r2, r3
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	685b      	ldr	r3, [r3, #4]
 800936c:	429a      	cmp	r2, r3
 800936e:	d02a      	beq.n	80093c6 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	685b      	ldr	r3, [r3, #4]
 8009374:	b2db      	uxtb	r3, r3
 8009376:	4619      	mov	r1, r3
 8009378:	6878      	ldr	r0, [r7, #4]
 800937a:	f7fe ffc4 	bl	8008306 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800937e:	4b1d      	ldr	r3, [pc, #116]	; (80093f4 <USBD_SetConfig+0x150>)
 8009380:	781b      	ldrb	r3, [r3, #0]
 8009382:	461a      	mov	r2, r3
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009388:	4b1a      	ldr	r3, [pc, #104]	; (80093f4 <USBD_SetConfig+0x150>)
 800938a:	781b      	ldrb	r3, [r3, #0]
 800938c:	4619      	mov	r1, r3
 800938e:	6878      	ldr	r0, [r7, #4]
 8009390:	f7fe ff9d 	bl	80082ce <USBD_SetClassConfig>
 8009394:	4603      	mov	r3, r0
 8009396:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8009398:	7bfb      	ldrb	r3, [r7, #15]
 800939a:	2b00      	cmp	r3, #0
 800939c:	d00f      	beq.n	80093be <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800939e:	6839      	ldr	r1, [r7, #0]
 80093a0:	6878      	ldr	r0, [r7, #4]
 80093a2:	f000 f918 	bl	80095d6 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	685b      	ldr	r3, [r3, #4]
 80093aa:	b2db      	uxtb	r3, r3
 80093ac:	4619      	mov	r1, r3
 80093ae:	6878      	ldr	r0, [r7, #4]
 80093b0:	f7fe ffa9 	bl	8008306 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	2202      	movs	r2, #2
 80093b8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80093bc:	e014      	b.n	80093e8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80093be:	6878      	ldr	r0, [r7, #4]
 80093c0:	f000 f9b7 	bl	8009732 <USBD_CtlSendStatus>
      break;
 80093c4:	e010      	b.n	80093e8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80093c6:	6878      	ldr	r0, [r7, #4]
 80093c8:	f000 f9b3 	bl	8009732 <USBD_CtlSendStatus>
      break;
 80093cc:	e00c      	b.n	80093e8 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80093ce:	6839      	ldr	r1, [r7, #0]
 80093d0:	6878      	ldr	r0, [r7, #4]
 80093d2:	f000 f900 	bl	80095d6 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80093d6:	4b07      	ldr	r3, [pc, #28]	; (80093f4 <USBD_SetConfig+0x150>)
 80093d8:	781b      	ldrb	r3, [r3, #0]
 80093da:	4619      	mov	r1, r3
 80093dc:	6878      	ldr	r0, [r7, #4]
 80093de:	f7fe ff92 	bl	8008306 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80093e2:	2303      	movs	r3, #3
 80093e4:	73fb      	strb	r3, [r7, #15]
      break;
 80093e6:	bf00      	nop
  }

  return ret;
 80093e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80093ea:	4618      	mov	r0, r3
 80093ec:	3710      	adds	r7, #16
 80093ee:	46bd      	mov	sp, r7
 80093f0:	bd80      	pop	{r7, pc}
 80093f2:	bf00      	nop
 80093f4:	2000069c 	.word	0x2000069c

080093f8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80093f8:	b580      	push	{r7, lr}
 80093fa:	b082      	sub	sp, #8
 80093fc:	af00      	add	r7, sp, #0
 80093fe:	6078      	str	r0, [r7, #4]
 8009400:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009402:	683b      	ldr	r3, [r7, #0]
 8009404:	88db      	ldrh	r3, [r3, #6]
 8009406:	2b01      	cmp	r3, #1
 8009408:	d004      	beq.n	8009414 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800940a:	6839      	ldr	r1, [r7, #0]
 800940c:	6878      	ldr	r0, [r7, #4]
 800940e:	f000 f8e2 	bl	80095d6 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8009412:	e023      	b.n	800945c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800941a:	b2db      	uxtb	r3, r3
 800941c:	2b02      	cmp	r3, #2
 800941e:	dc02      	bgt.n	8009426 <USBD_GetConfig+0x2e>
 8009420:	2b00      	cmp	r3, #0
 8009422:	dc03      	bgt.n	800942c <USBD_GetConfig+0x34>
 8009424:	e015      	b.n	8009452 <USBD_GetConfig+0x5a>
 8009426:	2b03      	cmp	r3, #3
 8009428:	d00b      	beq.n	8009442 <USBD_GetConfig+0x4a>
 800942a:	e012      	b.n	8009452 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	2200      	movs	r2, #0
 8009430:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	3308      	adds	r3, #8
 8009436:	2201      	movs	r2, #1
 8009438:	4619      	mov	r1, r3
 800943a:	6878      	ldr	r0, [r7, #4]
 800943c:	f000 f93c 	bl	80096b8 <USBD_CtlSendData>
        break;
 8009440:	e00c      	b.n	800945c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	3304      	adds	r3, #4
 8009446:	2201      	movs	r2, #1
 8009448:	4619      	mov	r1, r3
 800944a:	6878      	ldr	r0, [r7, #4]
 800944c:	f000 f934 	bl	80096b8 <USBD_CtlSendData>
        break;
 8009450:	e004      	b.n	800945c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8009452:	6839      	ldr	r1, [r7, #0]
 8009454:	6878      	ldr	r0, [r7, #4]
 8009456:	f000 f8be 	bl	80095d6 <USBD_CtlError>
        break;
 800945a:	bf00      	nop
}
 800945c:	bf00      	nop
 800945e:	3708      	adds	r7, #8
 8009460:	46bd      	mov	sp, r7
 8009462:	bd80      	pop	{r7, pc}

08009464 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009464:	b580      	push	{r7, lr}
 8009466:	b082      	sub	sp, #8
 8009468:	af00      	add	r7, sp, #0
 800946a:	6078      	str	r0, [r7, #4]
 800946c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009474:	b2db      	uxtb	r3, r3
 8009476:	3b01      	subs	r3, #1
 8009478:	2b02      	cmp	r3, #2
 800947a:	d81e      	bhi.n	80094ba <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800947c:	683b      	ldr	r3, [r7, #0]
 800947e:	88db      	ldrh	r3, [r3, #6]
 8009480:	2b02      	cmp	r3, #2
 8009482:	d004      	beq.n	800948e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8009484:	6839      	ldr	r1, [r7, #0]
 8009486:	6878      	ldr	r0, [r7, #4]
 8009488:	f000 f8a5 	bl	80095d6 <USBD_CtlError>
        break;
 800948c:	e01a      	b.n	80094c4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	2201      	movs	r2, #1
 8009492:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800949a:	2b00      	cmp	r3, #0
 800949c:	d005      	beq.n	80094aa <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	68db      	ldr	r3, [r3, #12]
 80094a2:	f043 0202 	orr.w	r2, r3, #2
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	330c      	adds	r3, #12
 80094ae:	2202      	movs	r2, #2
 80094b0:	4619      	mov	r1, r3
 80094b2:	6878      	ldr	r0, [r7, #4]
 80094b4:	f000 f900 	bl	80096b8 <USBD_CtlSendData>
      break;
 80094b8:	e004      	b.n	80094c4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80094ba:	6839      	ldr	r1, [r7, #0]
 80094bc:	6878      	ldr	r0, [r7, #4]
 80094be:	f000 f88a 	bl	80095d6 <USBD_CtlError>
      break;
 80094c2:	bf00      	nop
  }
}
 80094c4:	bf00      	nop
 80094c6:	3708      	adds	r7, #8
 80094c8:	46bd      	mov	sp, r7
 80094ca:	bd80      	pop	{r7, pc}

080094cc <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80094cc:	b580      	push	{r7, lr}
 80094ce:	b082      	sub	sp, #8
 80094d0:	af00      	add	r7, sp, #0
 80094d2:	6078      	str	r0, [r7, #4]
 80094d4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80094d6:	683b      	ldr	r3, [r7, #0]
 80094d8:	885b      	ldrh	r3, [r3, #2]
 80094da:	2b01      	cmp	r3, #1
 80094dc:	d107      	bne.n	80094ee <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	2201      	movs	r2, #1
 80094e2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80094e6:	6878      	ldr	r0, [r7, #4]
 80094e8:	f000 f923 	bl	8009732 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80094ec:	e013      	b.n	8009516 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80094ee:	683b      	ldr	r3, [r7, #0]
 80094f0:	885b      	ldrh	r3, [r3, #2]
 80094f2:	2b02      	cmp	r3, #2
 80094f4:	d10b      	bne.n	800950e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 80094f6:	683b      	ldr	r3, [r7, #0]
 80094f8:	889b      	ldrh	r3, [r3, #4]
 80094fa:	0a1b      	lsrs	r3, r3, #8
 80094fc:	b29b      	uxth	r3, r3
 80094fe:	b2da      	uxtb	r2, r3
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8009506:	6878      	ldr	r0, [r7, #4]
 8009508:	f000 f913 	bl	8009732 <USBD_CtlSendStatus>
}
 800950c:	e003      	b.n	8009516 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800950e:	6839      	ldr	r1, [r7, #0]
 8009510:	6878      	ldr	r0, [r7, #4]
 8009512:	f000 f860 	bl	80095d6 <USBD_CtlError>
}
 8009516:	bf00      	nop
 8009518:	3708      	adds	r7, #8
 800951a:	46bd      	mov	sp, r7
 800951c:	bd80      	pop	{r7, pc}

0800951e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800951e:	b580      	push	{r7, lr}
 8009520:	b082      	sub	sp, #8
 8009522:	af00      	add	r7, sp, #0
 8009524:	6078      	str	r0, [r7, #4]
 8009526:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800952e:	b2db      	uxtb	r3, r3
 8009530:	3b01      	subs	r3, #1
 8009532:	2b02      	cmp	r3, #2
 8009534:	d80b      	bhi.n	800954e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009536:	683b      	ldr	r3, [r7, #0]
 8009538:	885b      	ldrh	r3, [r3, #2]
 800953a:	2b01      	cmp	r3, #1
 800953c:	d10c      	bne.n	8009558 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	2200      	movs	r2, #0
 8009542:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8009546:	6878      	ldr	r0, [r7, #4]
 8009548:	f000 f8f3 	bl	8009732 <USBD_CtlSendStatus>
      }
      break;
 800954c:	e004      	b.n	8009558 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800954e:	6839      	ldr	r1, [r7, #0]
 8009550:	6878      	ldr	r0, [r7, #4]
 8009552:	f000 f840 	bl	80095d6 <USBD_CtlError>
      break;
 8009556:	e000      	b.n	800955a <USBD_ClrFeature+0x3c>
      break;
 8009558:	bf00      	nop
  }
}
 800955a:	bf00      	nop
 800955c:	3708      	adds	r7, #8
 800955e:	46bd      	mov	sp, r7
 8009560:	bd80      	pop	{r7, pc}

08009562 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009562:	b580      	push	{r7, lr}
 8009564:	b084      	sub	sp, #16
 8009566:	af00      	add	r7, sp, #0
 8009568:	6078      	str	r0, [r7, #4]
 800956a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800956c:	683b      	ldr	r3, [r7, #0]
 800956e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	781a      	ldrb	r2, [r3, #0]
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	3301      	adds	r3, #1
 800957c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	781a      	ldrb	r2, [r3, #0]
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8009586:	68fb      	ldr	r3, [r7, #12]
 8009588:	3301      	adds	r3, #1
 800958a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800958c:	68f8      	ldr	r0, [r7, #12]
 800958e:	f7ff fa41 	bl	8008a14 <SWAPBYTE>
 8009592:	4603      	mov	r3, r0
 8009594:	461a      	mov	r2, r3
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	3301      	adds	r3, #1
 800959e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	3301      	adds	r3, #1
 80095a4:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80095a6:	68f8      	ldr	r0, [r7, #12]
 80095a8:	f7ff fa34 	bl	8008a14 <SWAPBYTE>
 80095ac:	4603      	mov	r3, r0
 80095ae:	461a      	mov	r2, r3
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	3301      	adds	r3, #1
 80095b8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	3301      	adds	r3, #1
 80095be:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80095c0:	68f8      	ldr	r0, [r7, #12]
 80095c2:	f7ff fa27 	bl	8008a14 <SWAPBYTE>
 80095c6:	4603      	mov	r3, r0
 80095c8:	461a      	mov	r2, r3
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	80da      	strh	r2, [r3, #6]
}
 80095ce:	bf00      	nop
 80095d0:	3710      	adds	r7, #16
 80095d2:	46bd      	mov	sp, r7
 80095d4:	bd80      	pop	{r7, pc}

080095d6 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80095d6:	b580      	push	{r7, lr}
 80095d8:	b082      	sub	sp, #8
 80095da:	af00      	add	r7, sp, #0
 80095dc:	6078      	str	r0, [r7, #4]
 80095de:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80095e0:	2180      	movs	r1, #128	; 0x80
 80095e2:	6878      	ldr	r0, [r7, #4]
 80095e4:	f000 fc02 	bl	8009dec <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80095e8:	2100      	movs	r1, #0
 80095ea:	6878      	ldr	r0, [r7, #4]
 80095ec:	f000 fbfe 	bl	8009dec <USBD_LL_StallEP>
}
 80095f0:	bf00      	nop
 80095f2:	3708      	adds	r7, #8
 80095f4:	46bd      	mov	sp, r7
 80095f6:	bd80      	pop	{r7, pc}

080095f8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80095f8:	b580      	push	{r7, lr}
 80095fa:	b086      	sub	sp, #24
 80095fc:	af00      	add	r7, sp, #0
 80095fe:	60f8      	str	r0, [r7, #12]
 8009600:	60b9      	str	r1, [r7, #8]
 8009602:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009604:	2300      	movs	r3, #0
 8009606:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	2b00      	cmp	r3, #0
 800960c:	d036      	beq.n	800967c <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8009612:	6938      	ldr	r0, [r7, #16]
 8009614:	f000 f836 	bl	8009684 <USBD_GetLen>
 8009618:	4603      	mov	r3, r0
 800961a:	3301      	adds	r3, #1
 800961c:	b29b      	uxth	r3, r3
 800961e:	005b      	lsls	r3, r3, #1
 8009620:	b29a      	uxth	r2, r3
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8009626:	7dfb      	ldrb	r3, [r7, #23]
 8009628:	68ba      	ldr	r2, [r7, #8]
 800962a:	4413      	add	r3, r2
 800962c:	687a      	ldr	r2, [r7, #4]
 800962e:	7812      	ldrb	r2, [r2, #0]
 8009630:	701a      	strb	r2, [r3, #0]
  idx++;
 8009632:	7dfb      	ldrb	r3, [r7, #23]
 8009634:	3301      	adds	r3, #1
 8009636:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8009638:	7dfb      	ldrb	r3, [r7, #23]
 800963a:	68ba      	ldr	r2, [r7, #8]
 800963c:	4413      	add	r3, r2
 800963e:	2203      	movs	r2, #3
 8009640:	701a      	strb	r2, [r3, #0]
  idx++;
 8009642:	7dfb      	ldrb	r3, [r7, #23]
 8009644:	3301      	adds	r3, #1
 8009646:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8009648:	e013      	b.n	8009672 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800964a:	7dfb      	ldrb	r3, [r7, #23]
 800964c:	68ba      	ldr	r2, [r7, #8]
 800964e:	4413      	add	r3, r2
 8009650:	693a      	ldr	r2, [r7, #16]
 8009652:	7812      	ldrb	r2, [r2, #0]
 8009654:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8009656:	693b      	ldr	r3, [r7, #16]
 8009658:	3301      	adds	r3, #1
 800965a:	613b      	str	r3, [r7, #16]
    idx++;
 800965c:	7dfb      	ldrb	r3, [r7, #23]
 800965e:	3301      	adds	r3, #1
 8009660:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8009662:	7dfb      	ldrb	r3, [r7, #23]
 8009664:	68ba      	ldr	r2, [r7, #8]
 8009666:	4413      	add	r3, r2
 8009668:	2200      	movs	r2, #0
 800966a:	701a      	strb	r2, [r3, #0]
    idx++;
 800966c:	7dfb      	ldrb	r3, [r7, #23]
 800966e:	3301      	adds	r3, #1
 8009670:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8009672:	693b      	ldr	r3, [r7, #16]
 8009674:	781b      	ldrb	r3, [r3, #0]
 8009676:	2b00      	cmp	r3, #0
 8009678:	d1e7      	bne.n	800964a <USBD_GetString+0x52>
 800967a:	e000      	b.n	800967e <USBD_GetString+0x86>
    return;
 800967c:	bf00      	nop
  }
}
 800967e:	3718      	adds	r7, #24
 8009680:	46bd      	mov	sp, r7
 8009682:	bd80      	pop	{r7, pc}

08009684 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009684:	b480      	push	{r7}
 8009686:	b085      	sub	sp, #20
 8009688:	af00      	add	r7, sp, #0
 800968a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800968c:	2300      	movs	r3, #0
 800968e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8009694:	e005      	b.n	80096a2 <USBD_GetLen+0x1e>
  {
    len++;
 8009696:	7bfb      	ldrb	r3, [r7, #15]
 8009698:	3301      	adds	r3, #1
 800969a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800969c:	68bb      	ldr	r3, [r7, #8]
 800969e:	3301      	adds	r3, #1
 80096a0:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80096a2:	68bb      	ldr	r3, [r7, #8]
 80096a4:	781b      	ldrb	r3, [r3, #0]
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d1f5      	bne.n	8009696 <USBD_GetLen+0x12>
  }

  return len;
 80096aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80096ac:	4618      	mov	r0, r3
 80096ae:	3714      	adds	r7, #20
 80096b0:	46bd      	mov	sp, r7
 80096b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096b6:	4770      	bx	lr

080096b8 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80096b8:	b580      	push	{r7, lr}
 80096ba:	b084      	sub	sp, #16
 80096bc:	af00      	add	r7, sp, #0
 80096be:	60f8      	str	r0, [r7, #12]
 80096c0:	60b9      	str	r1, [r7, #8]
 80096c2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	2202      	movs	r2, #2
 80096c8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	687a      	ldr	r2, [r7, #4]
 80096d0:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	687a      	ldr	r2, [r7, #4]
 80096d6:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	68ba      	ldr	r2, [r7, #8]
 80096dc:	2100      	movs	r1, #0
 80096de:	68f8      	ldr	r0, [r7, #12]
 80096e0:	f000 fc0d 	bl	8009efe <USBD_LL_Transmit>

  return USBD_OK;
 80096e4:	2300      	movs	r3, #0
}
 80096e6:	4618      	mov	r0, r3
 80096e8:	3710      	adds	r7, #16
 80096ea:	46bd      	mov	sp, r7
 80096ec:	bd80      	pop	{r7, pc}

080096ee <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80096ee:	b580      	push	{r7, lr}
 80096f0:	b084      	sub	sp, #16
 80096f2:	af00      	add	r7, sp, #0
 80096f4:	60f8      	str	r0, [r7, #12]
 80096f6:	60b9      	str	r1, [r7, #8]
 80096f8:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	68ba      	ldr	r2, [r7, #8]
 80096fe:	2100      	movs	r1, #0
 8009700:	68f8      	ldr	r0, [r7, #12]
 8009702:	f000 fbfc 	bl	8009efe <USBD_LL_Transmit>

  return USBD_OK;
 8009706:	2300      	movs	r3, #0
}
 8009708:	4618      	mov	r0, r3
 800970a:	3710      	adds	r7, #16
 800970c:	46bd      	mov	sp, r7
 800970e:	bd80      	pop	{r7, pc}

08009710 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8009710:	b580      	push	{r7, lr}
 8009712:	b084      	sub	sp, #16
 8009714:	af00      	add	r7, sp, #0
 8009716:	60f8      	str	r0, [r7, #12]
 8009718:	60b9      	str	r1, [r7, #8]
 800971a:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	68ba      	ldr	r2, [r7, #8]
 8009720:	2100      	movs	r1, #0
 8009722:	68f8      	ldr	r0, [r7, #12]
 8009724:	f000 fc0c 	bl	8009f40 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009728:	2300      	movs	r3, #0
}
 800972a:	4618      	mov	r0, r3
 800972c:	3710      	adds	r7, #16
 800972e:	46bd      	mov	sp, r7
 8009730:	bd80      	pop	{r7, pc}

08009732 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009732:	b580      	push	{r7, lr}
 8009734:	b082      	sub	sp, #8
 8009736:	af00      	add	r7, sp, #0
 8009738:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	2204      	movs	r2, #4
 800973e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009742:	2300      	movs	r3, #0
 8009744:	2200      	movs	r2, #0
 8009746:	2100      	movs	r1, #0
 8009748:	6878      	ldr	r0, [r7, #4]
 800974a:	f000 fbd8 	bl	8009efe <USBD_LL_Transmit>

  return USBD_OK;
 800974e:	2300      	movs	r3, #0
}
 8009750:	4618      	mov	r0, r3
 8009752:	3708      	adds	r7, #8
 8009754:	46bd      	mov	sp, r7
 8009756:	bd80      	pop	{r7, pc}

08009758 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009758:	b580      	push	{r7, lr}
 800975a:	b082      	sub	sp, #8
 800975c:	af00      	add	r7, sp, #0
 800975e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	2205      	movs	r2, #5
 8009764:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009768:	2300      	movs	r3, #0
 800976a:	2200      	movs	r2, #0
 800976c:	2100      	movs	r1, #0
 800976e:	6878      	ldr	r0, [r7, #4]
 8009770:	f000 fbe6 	bl	8009f40 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009774:	2300      	movs	r3, #0
}
 8009776:	4618      	mov	r0, r3
 8009778:	3708      	adds	r7, #8
 800977a:	46bd      	mov	sp, r7
 800977c:	bd80      	pop	{r7, pc}
	...

08009780 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009780:	b580      	push	{r7, lr}
 8009782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009784:	2200      	movs	r2, #0
 8009786:	490e      	ldr	r1, [pc, #56]	; (80097c0 <MX_USB_DEVICE_Init+0x40>)
 8009788:	480e      	ldr	r0, [pc, #56]	; (80097c4 <MX_USB_DEVICE_Init+0x44>)
 800978a:	f7fe fd23 	bl	80081d4 <USBD_Init>
 800978e:	4603      	mov	r3, r0
 8009790:	2b00      	cmp	r3, #0
 8009792:	d001      	beq.n	8009798 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009794:	f7f7 fcd0 	bl	8001138 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 8009798:	490b      	ldr	r1, [pc, #44]	; (80097c8 <MX_USB_DEVICE_Init+0x48>)
 800979a:	480a      	ldr	r0, [pc, #40]	; (80097c4 <MX_USB_DEVICE_Init+0x44>)
 800979c:	f7fe fd4a 	bl	8008234 <USBD_RegisterClass>
 80097a0:	4603      	mov	r3, r0
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	d001      	beq.n	80097aa <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80097a6:	f7f7 fcc7 	bl	8001138 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80097aa:	4806      	ldr	r0, [pc, #24]	; (80097c4 <MX_USB_DEVICE_Init+0x44>)
 80097ac:	f7fe fd78 	bl	80082a0 <USBD_Start>
 80097b0:	4603      	mov	r3, r0
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	d001      	beq.n	80097ba <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 80097b6:	f7f7 fcbf 	bl	8001138 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80097ba:	bf00      	nop
 80097bc:	bd80      	pop	{r7, pc}
 80097be:	bf00      	nop
 80097c0:	2000011c 	.word	0x2000011c
 80097c4:	200006a0 	.word	0x200006a0
 80097c8:	20000068 	.word	0x20000068

080097cc <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80097cc:	b480      	push	{r7}
 80097ce:	b083      	sub	sp, #12
 80097d0:	af00      	add	r7, sp, #0
 80097d2:	4603      	mov	r3, r0
 80097d4:	6039      	str	r1, [r7, #0]
 80097d6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80097d8:	683b      	ldr	r3, [r7, #0]
 80097da:	2212      	movs	r2, #18
 80097dc:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80097de:	4b03      	ldr	r3, [pc, #12]	; (80097ec <USBD_FS_DeviceDescriptor+0x20>)
}
 80097e0:	4618      	mov	r0, r3
 80097e2:	370c      	adds	r7, #12
 80097e4:	46bd      	mov	sp, r7
 80097e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ea:	4770      	bx	lr
 80097ec:	20000138 	.word	0x20000138

080097f0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80097f0:	b480      	push	{r7}
 80097f2:	b083      	sub	sp, #12
 80097f4:	af00      	add	r7, sp, #0
 80097f6:	4603      	mov	r3, r0
 80097f8:	6039      	str	r1, [r7, #0]
 80097fa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80097fc:	683b      	ldr	r3, [r7, #0]
 80097fe:	2204      	movs	r2, #4
 8009800:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009802:	4b03      	ldr	r3, [pc, #12]	; (8009810 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009804:	4618      	mov	r0, r3
 8009806:	370c      	adds	r7, #12
 8009808:	46bd      	mov	sp, r7
 800980a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800980e:	4770      	bx	lr
 8009810:	2000014c 	.word	0x2000014c

08009814 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009814:	b580      	push	{r7, lr}
 8009816:	b082      	sub	sp, #8
 8009818:	af00      	add	r7, sp, #0
 800981a:	4603      	mov	r3, r0
 800981c:	6039      	str	r1, [r7, #0]
 800981e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009820:	79fb      	ldrb	r3, [r7, #7]
 8009822:	2b00      	cmp	r3, #0
 8009824:	d105      	bne.n	8009832 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009826:	683a      	ldr	r2, [r7, #0]
 8009828:	4907      	ldr	r1, [pc, #28]	; (8009848 <USBD_FS_ProductStrDescriptor+0x34>)
 800982a:	4808      	ldr	r0, [pc, #32]	; (800984c <USBD_FS_ProductStrDescriptor+0x38>)
 800982c:	f7ff fee4 	bl	80095f8 <USBD_GetString>
 8009830:	e004      	b.n	800983c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009832:	683a      	ldr	r2, [r7, #0]
 8009834:	4904      	ldr	r1, [pc, #16]	; (8009848 <USBD_FS_ProductStrDescriptor+0x34>)
 8009836:	4805      	ldr	r0, [pc, #20]	; (800984c <USBD_FS_ProductStrDescriptor+0x38>)
 8009838:	f7ff fede 	bl	80095f8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800983c:	4b02      	ldr	r3, [pc, #8]	; (8009848 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800983e:	4618      	mov	r0, r3
 8009840:	3708      	adds	r7, #8
 8009842:	46bd      	mov	sp, r7
 8009844:	bd80      	pop	{r7, pc}
 8009846:	bf00      	nop
 8009848:	2000097c 	.word	0x2000097c
 800984c:	0800a0a0 	.word	0x0800a0a0

08009850 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009850:	b580      	push	{r7, lr}
 8009852:	b082      	sub	sp, #8
 8009854:	af00      	add	r7, sp, #0
 8009856:	4603      	mov	r3, r0
 8009858:	6039      	str	r1, [r7, #0]
 800985a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800985c:	683a      	ldr	r2, [r7, #0]
 800985e:	4904      	ldr	r1, [pc, #16]	; (8009870 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009860:	4804      	ldr	r0, [pc, #16]	; (8009874 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8009862:	f7ff fec9 	bl	80095f8 <USBD_GetString>
  return USBD_StrDesc;
 8009866:	4b02      	ldr	r3, [pc, #8]	; (8009870 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009868:	4618      	mov	r0, r3
 800986a:	3708      	adds	r7, #8
 800986c:	46bd      	mov	sp, r7
 800986e:	bd80      	pop	{r7, pc}
 8009870:	2000097c 	.word	0x2000097c
 8009874:	0800a0b8 	.word	0x0800a0b8

08009878 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009878:	b580      	push	{r7, lr}
 800987a:	b082      	sub	sp, #8
 800987c:	af00      	add	r7, sp, #0
 800987e:	4603      	mov	r3, r0
 8009880:	6039      	str	r1, [r7, #0]
 8009882:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009884:	683b      	ldr	r3, [r7, #0]
 8009886:	221a      	movs	r2, #26
 8009888:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800988a:	f000 f843 	bl	8009914 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800988e:	4b02      	ldr	r3, [pc, #8]	; (8009898 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8009890:	4618      	mov	r0, r3
 8009892:	3708      	adds	r7, #8
 8009894:	46bd      	mov	sp, r7
 8009896:	bd80      	pop	{r7, pc}
 8009898:	20000150 	.word	0x20000150

0800989c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800989c:	b580      	push	{r7, lr}
 800989e:	b082      	sub	sp, #8
 80098a0:	af00      	add	r7, sp, #0
 80098a2:	4603      	mov	r3, r0
 80098a4:	6039      	str	r1, [r7, #0]
 80098a6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80098a8:	79fb      	ldrb	r3, [r7, #7]
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d105      	bne.n	80098ba <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80098ae:	683a      	ldr	r2, [r7, #0]
 80098b0:	4907      	ldr	r1, [pc, #28]	; (80098d0 <USBD_FS_ConfigStrDescriptor+0x34>)
 80098b2:	4808      	ldr	r0, [pc, #32]	; (80098d4 <USBD_FS_ConfigStrDescriptor+0x38>)
 80098b4:	f7ff fea0 	bl	80095f8 <USBD_GetString>
 80098b8:	e004      	b.n	80098c4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80098ba:	683a      	ldr	r2, [r7, #0]
 80098bc:	4904      	ldr	r1, [pc, #16]	; (80098d0 <USBD_FS_ConfigStrDescriptor+0x34>)
 80098be:	4805      	ldr	r0, [pc, #20]	; (80098d4 <USBD_FS_ConfigStrDescriptor+0x38>)
 80098c0:	f7ff fe9a 	bl	80095f8 <USBD_GetString>
  }
  return USBD_StrDesc;
 80098c4:	4b02      	ldr	r3, [pc, #8]	; (80098d0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80098c6:	4618      	mov	r0, r3
 80098c8:	3708      	adds	r7, #8
 80098ca:	46bd      	mov	sp, r7
 80098cc:	bd80      	pop	{r7, pc}
 80098ce:	bf00      	nop
 80098d0:	2000097c 	.word	0x2000097c
 80098d4:	0800a0cc 	.word	0x0800a0cc

080098d8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80098d8:	b580      	push	{r7, lr}
 80098da:	b082      	sub	sp, #8
 80098dc:	af00      	add	r7, sp, #0
 80098de:	4603      	mov	r3, r0
 80098e0:	6039      	str	r1, [r7, #0]
 80098e2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80098e4:	79fb      	ldrb	r3, [r7, #7]
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d105      	bne.n	80098f6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80098ea:	683a      	ldr	r2, [r7, #0]
 80098ec:	4907      	ldr	r1, [pc, #28]	; (800990c <USBD_FS_InterfaceStrDescriptor+0x34>)
 80098ee:	4808      	ldr	r0, [pc, #32]	; (8009910 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80098f0:	f7ff fe82 	bl	80095f8 <USBD_GetString>
 80098f4:	e004      	b.n	8009900 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80098f6:	683a      	ldr	r2, [r7, #0]
 80098f8:	4904      	ldr	r1, [pc, #16]	; (800990c <USBD_FS_InterfaceStrDescriptor+0x34>)
 80098fa:	4805      	ldr	r0, [pc, #20]	; (8009910 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80098fc:	f7ff fe7c 	bl	80095f8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009900:	4b02      	ldr	r3, [pc, #8]	; (800990c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8009902:	4618      	mov	r0, r3
 8009904:	3708      	adds	r7, #8
 8009906:	46bd      	mov	sp, r7
 8009908:	bd80      	pop	{r7, pc}
 800990a:	bf00      	nop
 800990c:	2000097c 	.word	0x2000097c
 8009910:	0800a0d8 	.word	0x0800a0d8

08009914 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009914:	b580      	push	{r7, lr}
 8009916:	b084      	sub	sp, #16
 8009918:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800991a:	4b0f      	ldr	r3, [pc, #60]	; (8009958 <Get_SerialNum+0x44>)
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009920:	4b0e      	ldr	r3, [pc, #56]	; (800995c <Get_SerialNum+0x48>)
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009926:	4b0e      	ldr	r3, [pc, #56]	; (8009960 <Get_SerialNum+0x4c>)
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800992c:	68fa      	ldr	r2, [r7, #12]
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	4413      	add	r3, r2
 8009932:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009934:	68fb      	ldr	r3, [r7, #12]
 8009936:	2b00      	cmp	r3, #0
 8009938:	d009      	beq.n	800994e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800993a:	2208      	movs	r2, #8
 800993c:	4909      	ldr	r1, [pc, #36]	; (8009964 <Get_SerialNum+0x50>)
 800993e:	68f8      	ldr	r0, [r7, #12]
 8009940:	f000 f814 	bl	800996c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009944:	2204      	movs	r2, #4
 8009946:	4908      	ldr	r1, [pc, #32]	; (8009968 <Get_SerialNum+0x54>)
 8009948:	68b8      	ldr	r0, [r7, #8]
 800994a:	f000 f80f 	bl	800996c <IntToUnicode>
  }
}
 800994e:	bf00      	nop
 8009950:	3710      	adds	r7, #16
 8009952:	46bd      	mov	sp, r7
 8009954:	bd80      	pop	{r7, pc}
 8009956:	bf00      	nop
 8009958:	1fff7a10 	.word	0x1fff7a10
 800995c:	1fff7a14 	.word	0x1fff7a14
 8009960:	1fff7a18 	.word	0x1fff7a18
 8009964:	20000152 	.word	0x20000152
 8009968:	20000162 	.word	0x20000162

0800996c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800996c:	b480      	push	{r7}
 800996e:	b087      	sub	sp, #28
 8009970:	af00      	add	r7, sp, #0
 8009972:	60f8      	str	r0, [r7, #12]
 8009974:	60b9      	str	r1, [r7, #8]
 8009976:	4613      	mov	r3, r2
 8009978:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800997a:	2300      	movs	r3, #0
 800997c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800997e:	2300      	movs	r3, #0
 8009980:	75fb      	strb	r3, [r7, #23]
 8009982:	e027      	b.n	80099d4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	0f1b      	lsrs	r3, r3, #28
 8009988:	2b09      	cmp	r3, #9
 800998a:	d80b      	bhi.n	80099a4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	0f1b      	lsrs	r3, r3, #28
 8009990:	b2da      	uxtb	r2, r3
 8009992:	7dfb      	ldrb	r3, [r7, #23]
 8009994:	005b      	lsls	r3, r3, #1
 8009996:	4619      	mov	r1, r3
 8009998:	68bb      	ldr	r3, [r7, #8]
 800999a:	440b      	add	r3, r1
 800999c:	3230      	adds	r2, #48	; 0x30
 800999e:	b2d2      	uxtb	r2, r2
 80099a0:	701a      	strb	r2, [r3, #0]
 80099a2:	e00a      	b.n	80099ba <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80099a4:	68fb      	ldr	r3, [r7, #12]
 80099a6:	0f1b      	lsrs	r3, r3, #28
 80099a8:	b2da      	uxtb	r2, r3
 80099aa:	7dfb      	ldrb	r3, [r7, #23]
 80099ac:	005b      	lsls	r3, r3, #1
 80099ae:	4619      	mov	r1, r3
 80099b0:	68bb      	ldr	r3, [r7, #8]
 80099b2:	440b      	add	r3, r1
 80099b4:	3237      	adds	r2, #55	; 0x37
 80099b6:	b2d2      	uxtb	r2, r2
 80099b8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	011b      	lsls	r3, r3, #4
 80099be:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80099c0:	7dfb      	ldrb	r3, [r7, #23]
 80099c2:	005b      	lsls	r3, r3, #1
 80099c4:	3301      	adds	r3, #1
 80099c6:	68ba      	ldr	r2, [r7, #8]
 80099c8:	4413      	add	r3, r2
 80099ca:	2200      	movs	r2, #0
 80099cc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80099ce:	7dfb      	ldrb	r3, [r7, #23]
 80099d0:	3301      	adds	r3, #1
 80099d2:	75fb      	strb	r3, [r7, #23]
 80099d4:	7dfa      	ldrb	r2, [r7, #23]
 80099d6:	79fb      	ldrb	r3, [r7, #7]
 80099d8:	429a      	cmp	r2, r3
 80099da:	d3d3      	bcc.n	8009984 <IntToUnicode+0x18>
  }
}
 80099dc:	bf00      	nop
 80099de:	bf00      	nop
 80099e0:	371c      	adds	r7, #28
 80099e2:	46bd      	mov	sp, r7
 80099e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099e8:	4770      	bx	lr
	...

080099ec <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80099ec:	b580      	push	{r7, lr}
 80099ee:	b08a      	sub	sp, #40	; 0x28
 80099f0:	af00      	add	r7, sp, #0
 80099f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80099f4:	f107 0314 	add.w	r3, r7, #20
 80099f8:	2200      	movs	r2, #0
 80099fa:	601a      	str	r2, [r3, #0]
 80099fc:	605a      	str	r2, [r3, #4]
 80099fe:	609a      	str	r2, [r3, #8]
 8009a00:	60da      	str	r2, [r3, #12]
 8009a02:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009a0c:	d147      	bne.n	8009a9e <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009a0e:	2300      	movs	r3, #0
 8009a10:	613b      	str	r3, [r7, #16]
 8009a12:	4b25      	ldr	r3, [pc, #148]	; (8009aa8 <HAL_PCD_MspInit+0xbc>)
 8009a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a16:	4a24      	ldr	r2, [pc, #144]	; (8009aa8 <HAL_PCD_MspInit+0xbc>)
 8009a18:	f043 0301 	orr.w	r3, r3, #1
 8009a1c:	6313      	str	r3, [r2, #48]	; 0x30
 8009a1e:	4b22      	ldr	r3, [pc, #136]	; (8009aa8 <HAL_PCD_MspInit+0xbc>)
 8009a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a22:	f003 0301 	and.w	r3, r3, #1
 8009a26:	613b      	str	r3, [r7, #16]
 8009a28:	693b      	ldr	r3, [r7, #16]
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    PA10     ------> USB_OTG_FS_ID
    PA9     ------> USB_OTG_FS_VBUS
    */
    GPIO_InitStruct.Pin = USB_FS_DP_Pin|USB_FS_DM_Pin|USB_FS_ID_Pin;
 8009a2a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8009a2e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009a30:	2302      	movs	r3, #2
 8009a32:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009a34:	2300      	movs	r3, #0
 8009a36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009a38:	2300      	movs	r3, #0
 8009a3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8009a3c:	230a      	movs	r3, #10
 8009a3e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009a40:	f107 0314 	add.w	r3, r7, #20
 8009a44:	4619      	mov	r1, r3
 8009a46:	4819      	ldr	r0, [pc, #100]	; (8009aac <HAL_PCD_MspInit+0xc0>)
 8009a48:	f7f9 fb4a 	bl	80030e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8009a4c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009a50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009a52:	2300      	movs	r3, #0
 8009a54:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009a56:	2300      	movs	r3, #0
 8009a58:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8009a5a:	f107 0314 	add.w	r3, r7, #20
 8009a5e:	4619      	mov	r1, r3
 8009a60:	4812      	ldr	r0, [pc, #72]	; (8009aac <HAL_PCD_MspInit+0xc0>)
 8009a62:	f7f9 fb3d 	bl	80030e0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8009a66:	4b10      	ldr	r3, [pc, #64]	; (8009aa8 <HAL_PCD_MspInit+0xbc>)
 8009a68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009a6a:	4a0f      	ldr	r2, [pc, #60]	; (8009aa8 <HAL_PCD_MspInit+0xbc>)
 8009a6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009a70:	6353      	str	r3, [r2, #52]	; 0x34
 8009a72:	2300      	movs	r3, #0
 8009a74:	60fb      	str	r3, [r7, #12]
 8009a76:	4b0c      	ldr	r3, [pc, #48]	; (8009aa8 <HAL_PCD_MspInit+0xbc>)
 8009a78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009a7a:	4a0b      	ldr	r2, [pc, #44]	; (8009aa8 <HAL_PCD_MspInit+0xbc>)
 8009a7c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009a80:	6453      	str	r3, [r2, #68]	; 0x44
 8009a82:	4b09      	ldr	r3, [pc, #36]	; (8009aa8 <HAL_PCD_MspInit+0xbc>)
 8009a84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009a86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009a8a:	60fb      	str	r3, [r7, #12]
 8009a8c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8009a8e:	2200      	movs	r2, #0
 8009a90:	2100      	movs	r1, #0
 8009a92:	2043      	movs	r0, #67	; 0x43
 8009a94:	f7f9 fa0f 	bl	8002eb6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8009a98:	2043      	movs	r0, #67	; 0x43
 8009a9a:	f7f9 fa28 	bl	8002eee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8009a9e:	bf00      	nop
 8009aa0:	3728      	adds	r7, #40	; 0x28
 8009aa2:	46bd      	mov	sp, r7
 8009aa4:	bd80      	pop	{r7, pc}
 8009aa6:	bf00      	nop
 8009aa8:	40023800 	.word	0x40023800
 8009aac:	40020000 	.word	0x40020000

08009ab0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009ab0:	b580      	push	{r7, lr}
 8009ab2:	b082      	sub	sp, #8
 8009ab4:	af00      	add	r7, sp, #0
 8009ab6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8009ac4:	4619      	mov	r1, r3
 8009ac6:	4610      	mov	r0, r2
 8009ac8:	f7fe fc37 	bl	800833a <USBD_LL_SetupStage>
}
 8009acc:	bf00      	nop
 8009ace:	3708      	adds	r7, #8
 8009ad0:	46bd      	mov	sp, r7
 8009ad2:	bd80      	pop	{r7, pc}

08009ad4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009ad4:	b580      	push	{r7, lr}
 8009ad6:	b082      	sub	sp, #8
 8009ad8:	af00      	add	r7, sp, #0
 8009ada:	6078      	str	r0, [r7, #4]
 8009adc:	460b      	mov	r3, r1
 8009ade:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8009ae6:	78fa      	ldrb	r2, [r7, #3]
 8009ae8:	6879      	ldr	r1, [r7, #4]
 8009aea:	4613      	mov	r3, r2
 8009aec:	00db      	lsls	r3, r3, #3
 8009aee:	4413      	add	r3, r2
 8009af0:	009b      	lsls	r3, r3, #2
 8009af2:	440b      	add	r3, r1
 8009af4:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8009af8:	681a      	ldr	r2, [r3, #0]
 8009afa:	78fb      	ldrb	r3, [r7, #3]
 8009afc:	4619      	mov	r1, r3
 8009afe:	f7fe fc71 	bl	80083e4 <USBD_LL_DataOutStage>
}
 8009b02:	bf00      	nop
 8009b04:	3708      	adds	r7, #8
 8009b06:	46bd      	mov	sp, r7
 8009b08:	bd80      	pop	{r7, pc}

08009b0a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009b0a:	b580      	push	{r7, lr}
 8009b0c:	b082      	sub	sp, #8
 8009b0e:	af00      	add	r7, sp, #0
 8009b10:	6078      	str	r0, [r7, #4]
 8009b12:	460b      	mov	r3, r1
 8009b14:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8009b1c:	78fa      	ldrb	r2, [r7, #3]
 8009b1e:	6879      	ldr	r1, [r7, #4]
 8009b20:	4613      	mov	r3, r2
 8009b22:	00db      	lsls	r3, r3, #3
 8009b24:	4413      	add	r3, r2
 8009b26:	009b      	lsls	r3, r3, #2
 8009b28:	440b      	add	r3, r1
 8009b2a:	334c      	adds	r3, #76	; 0x4c
 8009b2c:	681a      	ldr	r2, [r3, #0]
 8009b2e:	78fb      	ldrb	r3, [r7, #3]
 8009b30:	4619      	mov	r1, r3
 8009b32:	f7fe fd0a 	bl	800854a <USBD_LL_DataInStage>
}
 8009b36:	bf00      	nop
 8009b38:	3708      	adds	r7, #8
 8009b3a:	46bd      	mov	sp, r7
 8009b3c:	bd80      	pop	{r7, pc}

08009b3e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009b3e:	b580      	push	{r7, lr}
 8009b40:	b082      	sub	sp, #8
 8009b42:	af00      	add	r7, sp, #0
 8009b44:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009b4c:	4618      	mov	r0, r3
 8009b4e:	f7fe fe3e 	bl	80087ce <USBD_LL_SOF>
}
 8009b52:	bf00      	nop
 8009b54:	3708      	adds	r7, #8
 8009b56:	46bd      	mov	sp, r7
 8009b58:	bd80      	pop	{r7, pc}

08009b5a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009b5a:	b580      	push	{r7, lr}
 8009b5c:	b084      	sub	sp, #16
 8009b5e:	af00      	add	r7, sp, #0
 8009b60:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009b62:	2301      	movs	r3, #1
 8009b64:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	68db      	ldr	r3, [r3, #12]
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	d102      	bne.n	8009b74 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8009b6e:	2300      	movs	r3, #0
 8009b70:	73fb      	strb	r3, [r7, #15]
 8009b72:	e008      	b.n	8009b86 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	68db      	ldr	r3, [r3, #12]
 8009b78:	2b02      	cmp	r3, #2
 8009b7a:	d102      	bne.n	8009b82 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8009b7c:	2301      	movs	r3, #1
 8009b7e:	73fb      	strb	r3, [r7, #15]
 8009b80:	e001      	b.n	8009b86 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8009b82:	f7f7 fad9 	bl	8001138 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009b8c:	7bfa      	ldrb	r2, [r7, #15]
 8009b8e:	4611      	mov	r1, r2
 8009b90:	4618      	mov	r0, r3
 8009b92:	f7fe fdde 	bl	8008752 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009b9c:	4618      	mov	r0, r3
 8009b9e:	f7fe fd86 	bl	80086ae <USBD_LL_Reset>
}
 8009ba2:	bf00      	nop
 8009ba4:	3710      	adds	r7, #16
 8009ba6:	46bd      	mov	sp, r7
 8009ba8:	bd80      	pop	{r7, pc}
	...

08009bac <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009bac:	b580      	push	{r7, lr}
 8009bae:	b082      	sub	sp, #8
 8009bb0:	af00      	add	r7, sp, #0
 8009bb2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009bba:	4618      	mov	r0, r3
 8009bbc:	f7fe fdd9 	bl	8008772 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	687a      	ldr	r2, [r7, #4]
 8009bcc:	6812      	ldr	r2, [r2, #0]
 8009bce:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009bd2:	f043 0301 	orr.w	r3, r3, #1
 8009bd6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	6a1b      	ldr	r3, [r3, #32]
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d005      	beq.n	8009bec <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009be0:	4b04      	ldr	r3, [pc, #16]	; (8009bf4 <HAL_PCD_SuspendCallback+0x48>)
 8009be2:	691b      	ldr	r3, [r3, #16]
 8009be4:	4a03      	ldr	r2, [pc, #12]	; (8009bf4 <HAL_PCD_SuspendCallback+0x48>)
 8009be6:	f043 0306 	orr.w	r3, r3, #6
 8009bea:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009bec:	bf00      	nop
 8009bee:	3708      	adds	r7, #8
 8009bf0:	46bd      	mov	sp, r7
 8009bf2:	bd80      	pop	{r7, pc}
 8009bf4:	e000ed00 	.word	0xe000ed00

08009bf8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009bf8:	b580      	push	{r7, lr}
 8009bfa:	b082      	sub	sp, #8
 8009bfc:	af00      	add	r7, sp, #0
 8009bfe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009c06:	4618      	mov	r0, r3
 8009c08:	f7fe fdc9 	bl	800879e <USBD_LL_Resume>
}
 8009c0c:	bf00      	nop
 8009c0e:	3708      	adds	r7, #8
 8009c10:	46bd      	mov	sp, r7
 8009c12:	bd80      	pop	{r7, pc}

08009c14 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009c14:	b580      	push	{r7, lr}
 8009c16:	b082      	sub	sp, #8
 8009c18:	af00      	add	r7, sp, #0
 8009c1a:	6078      	str	r0, [r7, #4]
 8009c1c:	460b      	mov	r3, r1
 8009c1e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009c26:	78fa      	ldrb	r2, [r7, #3]
 8009c28:	4611      	mov	r1, r2
 8009c2a:	4618      	mov	r0, r3
 8009c2c:	f7fe fe21 	bl	8008872 <USBD_LL_IsoOUTIncomplete>
}
 8009c30:	bf00      	nop
 8009c32:	3708      	adds	r7, #8
 8009c34:	46bd      	mov	sp, r7
 8009c36:	bd80      	pop	{r7, pc}

08009c38 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009c38:	b580      	push	{r7, lr}
 8009c3a:	b082      	sub	sp, #8
 8009c3c:	af00      	add	r7, sp, #0
 8009c3e:	6078      	str	r0, [r7, #4]
 8009c40:	460b      	mov	r3, r1
 8009c42:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009c4a:	78fa      	ldrb	r2, [r7, #3]
 8009c4c:	4611      	mov	r1, r2
 8009c4e:	4618      	mov	r0, r3
 8009c50:	f7fe fddd 	bl	800880e <USBD_LL_IsoINIncomplete>
}
 8009c54:	bf00      	nop
 8009c56:	3708      	adds	r7, #8
 8009c58:	46bd      	mov	sp, r7
 8009c5a:	bd80      	pop	{r7, pc}

08009c5c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009c5c:	b580      	push	{r7, lr}
 8009c5e:	b082      	sub	sp, #8
 8009c60:	af00      	add	r7, sp, #0
 8009c62:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009c6a:	4618      	mov	r0, r3
 8009c6c:	f7fe fe33 	bl	80088d6 <USBD_LL_DevConnected>
}
 8009c70:	bf00      	nop
 8009c72:	3708      	adds	r7, #8
 8009c74:	46bd      	mov	sp, r7
 8009c76:	bd80      	pop	{r7, pc}

08009c78 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009c78:	b580      	push	{r7, lr}
 8009c7a:	b082      	sub	sp, #8
 8009c7c:	af00      	add	r7, sp, #0
 8009c7e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009c86:	4618      	mov	r0, r3
 8009c88:	f7fe fe30 	bl	80088ec <USBD_LL_DevDisconnected>
}
 8009c8c:	bf00      	nop
 8009c8e:	3708      	adds	r7, #8
 8009c90:	46bd      	mov	sp, r7
 8009c92:	bd80      	pop	{r7, pc}

08009c94 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009c94:	b580      	push	{r7, lr}
 8009c96:	b082      	sub	sp, #8
 8009c98:	af00      	add	r7, sp, #0
 8009c9a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	781b      	ldrb	r3, [r3, #0]
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d13c      	bne.n	8009d1e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8009ca4:	4a20      	ldr	r2, [pc, #128]	; (8009d28 <USBD_LL_Init+0x94>)
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	4a1e      	ldr	r2, [pc, #120]	; (8009d28 <USBD_LL_Init+0x94>)
 8009cb0:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009cb4:	4b1c      	ldr	r3, [pc, #112]	; (8009d28 <USBD_LL_Init+0x94>)
 8009cb6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8009cba:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8009cbc:	4b1a      	ldr	r3, [pc, #104]	; (8009d28 <USBD_LL_Init+0x94>)
 8009cbe:	2204      	movs	r2, #4
 8009cc0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8009cc2:	4b19      	ldr	r3, [pc, #100]	; (8009d28 <USBD_LL_Init+0x94>)
 8009cc4:	2202      	movs	r2, #2
 8009cc6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8009cc8:	4b17      	ldr	r3, [pc, #92]	; (8009d28 <USBD_LL_Init+0x94>)
 8009cca:	2200      	movs	r2, #0
 8009ccc:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8009cce:	4b16      	ldr	r3, [pc, #88]	; (8009d28 <USBD_LL_Init+0x94>)
 8009cd0:	2202      	movs	r2, #2
 8009cd2:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8009cd4:	4b14      	ldr	r3, [pc, #80]	; (8009d28 <USBD_LL_Init+0x94>)
 8009cd6:	2200      	movs	r2, #0
 8009cd8:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8009cda:	4b13      	ldr	r3, [pc, #76]	; (8009d28 <USBD_LL_Init+0x94>)
 8009cdc:	2200      	movs	r2, #0
 8009cde:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8009ce0:	4b11      	ldr	r3, [pc, #68]	; (8009d28 <USBD_LL_Init+0x94>)
 8009ce2:	2200      	movs	r2, #0
 8009ce4:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8009ce6:	4b10      	ldr	r3, [pc, #64]	; (8009d28 <USBD_LL_Init+0x94>)
 8009ce8:	2201      	movs	r2, #1
 8009cea:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8009cec:	4b0e      	ldr	r3, [pc, #56]	; (8009d28 <USBD_LL_Init+0x94>)
 8009cee:	2200      	movs	r2, #0
 8009cf0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8009cf2:	480d      	ldr	r0, [pc, #52]	; (8009d28 <USBD_LL_Init+0x94>)
 8009cf4:	f7f9 fe12 	bl	800391c <HAL_PCD_Init>
 8009cf8:	4603      	mov	r3, r0
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d001      	beq.n	8009d02 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8009cfe:	f7f7 fa1b 	bl	8001138 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8009d02:	2180      	movs	r1, #128	; 0x80
 8009d04:	4808      	ldr	r0, [pc, #32]	; (8009d28 <USBD_LL_Init+0x94>)
 8009d06:	f7fb f852 	bl	8004dae <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8009d0a:	2240      	movs	r2, #64	; 0x40
 8009d0c:	2100      	movs	r1, #0
 8009d0e:	4806      	ldr	r0, [pc, #24]	; (8009d28 <USBD_LL_Init+0x94>)
 8009d10:	f7fb f806 	bl	8004d20 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8009d14:	2280      	movs	r2, #128	; 0x80
 8009d16:	2101      	movs	r1, #1
 8009d18:	4803      	ldr	r0, [pc, #12]	; (8009d28 <USBD_LL_Init+0x94>)
 8009d1a:	f7fb f801 	bl	8004d20 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8009d1e:	2300      	movs	r3, #0
}
 8009d20:	4618      	mov	r0, r3
 8009d22:	3708      	adds	r7, #8
 8009d24:	46bd      	mov	sp, r7
 8009d26:	bd80      	pop	{r7, pc}
 8009d28:	20000b7c 	.word	0x20000b7c

08009d2c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009d2c:	b580      	push	{r7, lr}
 8009d2e:	b084      	sub	sp, #16
 8009d30:	af00      	add	r7, sp, #0
 8009d32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009d34:	2300      	movs	r3, #0
 8009d36:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009d38:	2300      	movs	r3, #0
 8009d3a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009d42:	4618      	mov	r0, r3
 8009d44:	f7f9 ff07 	bl	8003b56 <HAL_PCD_Start>
 8009d48:	4603      	mov	r3, r0
 8009d4a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009d4c:	7bfb      	ldrb	r3, [r7, #15]
 8009d4e:	4618      	mov	r0, r3
 8009d50:	f000 f930 	bl	8009fb4 <USBD_Get_USB_Status>
 8009d54:	4603      	mov	r3, r0
 8009d56:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009d58:	7bbb      	ldrb	r3, [r7, #14]
}
 8009d5a:	4618      	mov	r0, r3
 8009d5c:	3710      	adds	r7, #16
 8009d5e:	46bd      	mov	sp, r7
 8009d60:	bd80      	pop	{r7, pc}

08009d62 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009d62:	b580      	push	{r7, lr}
 8009d64:	b084      	sub	sp, #16
 8009d66:	af00      	add	r7, sp, #0
 8009d68:	6078      	str	r0, [r7, #4]
 8009d6a:	4608      	mov	r0, r1
 8009d6c:	4611      	mov	r1, r2
 8009d6e:	461a      	mov	r2, r3
 8009d70:	4603      	mov	r3, r0
 8009d72:	70fb      	strb	r3, [r7, #3]
 8009d74:	460b      	mov	r3, r1
 8009d76:	70bb      	strb	r3, [r7, #2]
 8009d78:	4613      	mov	r3, r2
 8009d7a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009d7c:	2300      	movs	r3, #0
 8009d7e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009d80:	2300      	movs	r3, #0
 8009d82:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8009d8a:	78bb      	ldrb	r3, [r7, #2]
 8009d8c:	883a      	ldrh	r2, [r7, #0]
 8009d8e:	78f9      	ldrb	r1, [r7, #3]
 8009d90:	f7fa fbd8 	bl	8004544 <HAL_PCD_EP_Open>
 8009d94:	4603      	mov	r3, r0
 8009d96:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009d98:	7bfb      	ldrb	r3, [r7, #15]
 8009d9a:	4618      	mov	r0, r3
 8009d9c:	f000 f90a 	bl	8009fb4 <USBD_Get_USB_Status>
 8009da0:	4603      	mov	r3, r0
 8009da2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009da4:	7bbb      	ldrb	r3, [r7, #14]
}
 8009da6:	4618      	mov	r0, r3
 8009da8:	3710      	adds	r7, #16
 8009daa:	46bd      	mov	sp, r7
 8009dac:	bd80      	pop	{r7, pc}

08009dae <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009dae:	b580      	push	{r7, lr}
 8009db0:	b084      	sub	sp, #16
 8009db2:	af00      	add	r7, sp, #0
 8009db4:	6078      	str	r0, [r7, #4]
 8009db6:	460b      	mov	r3, r1
 8009db8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009dba:	2300      	movs	r3, #0
 8009dbc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009dbe:	2300      	movs	r3, #0
 8009dc0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009dc8:	78fa      	ldrb	r2, [r7, #3]
 8009dca:	4611      	mov	r1, r2
 8009dcc:	4618      	mov	r0, r3
 8009dce:	f7fa fc21 	bl	8004614 <HAL_PCD_EP_Close>
 8009dd2:	4603      	mov	r3, r0
 8009dd4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009dd6:	7bfb      	ldrb	r3, [r7, #15]
 8009dd8:	4618      	mov	r0, r3
 8009dda:	f000 f8eb 	bl	8009fb4 <USBD_Get_USB_Status>
 8009dde:	4603      	mov	r3, r0
 8009de0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009de2:	7bbb      	ldrb	r3, [r7, #14]
}
 8009de4:	4618      	mov	r0, r3
 8009de6:	3710      	adds	r7, #16
 8009de8:	46bd      	mov	sp, r7
 8009dea:	bd80      	pop	{r7, pc}

08009dec <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009dec:	b580      	push	{r7, lr}
 8009dee:	b084      	sub	sp, #16
 8009df0:	af00      	add	r7, sp, #0
 8009df2:	6078      	str	r0, [r7, #4]
 8009df4:	460b      	mov	r3, r1
 8009df6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009df8:	2300      	movs	r3, #0
 8009dfa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009dfc:	2300      	movs	r3, #0
 8009dfe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009e06:	78fa      	ldrb	r2, [r7, #3]
 8009e08:	4611      	mov	r1, r2
 8009e0a:	4618      	mov	r0, r3
 8009e0c:	f7fa fce1 	bl	80047d2 <HAL_PCD_EP_SetStall>
 8009e10:	4603      	mov	r3, r0
 8009e12:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009e14:	7bfb      	ldrb	r3, [r7, #15]
 8009e16:	4618      	mov	r0, r3
 8009e18:	f000 f8cc 	bl	8009fb4 <USBD_Get_USB_Status>
 8009e1c:	4603      	mov	r3, r0
 8009e1e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009e20:	7bbb      	ldrb	r3, [r7, #14]
}
 8009e22:	4618      	mov	r0, r3
 8009e24:	3710      	adds	r7, #16
 8009e26:	46bd      	mov	sp, r7
 8009e28:	bd80      	pop	{r7, pc}

08009e2a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009e2a:	b580      	push	{r7, lr}
 8009e2c:	b084      	sub	sp, #16
 8009e2e:	af00      	add	r7, sp, #0
 8009e30:	6078      	str	r0, [r7, #4]
 8009e32:	460b      	mov	r3, r1
 8009e34:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009e36:	2300      	movs	r3, #0
 8009e38:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009e3a:	2300      	movs	r3, #0
 8009e3c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009e44:	78fa      	ldrb	r2, [r7, #3]
 8009e46:	4611      	mov	r1, r2
 8009e48:	4618      	mov	r0, r3
 8009e4a:	f7fa fd26 	bl	800489a <HAL_PCD_EP_ClrStall>
 8009e4e:	4603      	mov	r3, r0
 8009e50:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009e52:	7bfb      	ldrb	r3, [r7, #15]
 8009e54:	4618      	mov	r0, r3
 8009e56:	f000 f8ad 	bl	8009fb4 <USBD_Get_USB_Status>
 8009e5a:	4603      	mov	r3, r0
 8009e5c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009e5e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009e60:	4618      	mov	r0, r3
 8009e62:	3710      	adds	r7, #16
 8009e64:	46bd      	mov	sp, r7
 8009e66:	bd80      	pop	{r7, pc}

08009e68 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009e68:	b480      	push	{r7}
 8009e6a:	b085      	sub	sp, #20
 8009e6c:	af00      	add	r7, sp, #0
 8009e6e:	6078      	str	r0, [r7, #4]
 8009e70:	460b      	mov	r3, r1
 8009e72:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009e7a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009e7c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	da0b      	bge.n	8009e9c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009e84:	78fb      	ldrb	r3, [r7, #3]
 8009e86:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009e8a:	68f9      	ldr	r1, [r7, #12]
 8009e8c:	4613      	mov	r3, r2
 8009e8e:	00db      	lsls	r3, r3, #3
 8009e90:	4413      	add	r3, r2
 8009e92:	009b      	lsls	r3, r3, #2
 8009e94:	440b      	add	r3, r1
 8009e96:	333e      	adds	r3, #62	; 0x3e
 8009e98:	781b      	ldrb	r3, [r3, #0]
 8009e9a:	e00b      	b.n	8009eb4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009e9c:	78fb      	ldrb	r3, [r7, #3]
 8009e9e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009ea2:	68f9      	ldr	r1, [r7, #12]
 8009ea4:	4613      	mov	r3, r2
 8009ea6:	00db      	lsls	r3, r3, #3
 8009ea8:	4413      	add	r3, r2
 8009eaa:	009b      	lsls	r3, r3, #2
 8009eac:	440b      	add	r3, r1
 8009eae:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8009eb2:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009eb4:	4618      	mov	r0, r3
 8009eb6:	3714      	adds	r7, #20
 8009eb8:	46bd      	mov	sp, r7
 8009eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ebe:	4770      	bx	lr

08009ec0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009ec0:	b580      	push	{r7, lr}
 8009ec2:	b084      	sub	sp, #16
 8009ec4:	af00      	add	r7, sp, #0
 8009ec6:	6078      	str	r0, [r7, #4]
 8009ec8:	460b      	mov	r3, r1
 8009eca:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009ecc:	2300      	movs	r3, #0
 8009ece:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009ed0:	2300      	movs	r3, #0
 8009ed2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009eda:	78fa      	ldrb	r2, [r7, #3]
 8009edc:	4611      	mov	r1, r2
 8009ede:	4618      	mov	r0, r3
 8009ee0:	f7fa fb0b 	bl	80044fa <HAL_PCD_SetAddress>
 8009ee4:	4603      	mov	r3, r0
 8009ee6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009ee8:	7bfb      	ldrb	r3, [r7, #15]
 8009eea:	4618      	mov	r0, r3
 8009eec:	f000 f862 	bl	8009fb4 <USBD_Get_USB_Status>
 8009ef0:	4603      	mov	r3, r0
 8009ef2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009ef4:	7bbb      	ldrb	r3, [r7, #14]
}
 8009ef6:	4618      	mov	r0, r3
 8009ef8:	3710      	adds	r7, #16
 8009efa:	46bd      	mov	sp, r7
 8009efc:	bd80      	pop	{r7, pc}

08009efe <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009efe:	b580      	push	{r7, lr}
 8009f00:	b086      	sub	sp, #24
 8009f02:	af00      	add	r7, sp, #0
 8009f04:	60f8      	str	r0, [r7, #12]
 8009f06:	607a      	str	r2, [r7, #4]
 8009f08:	603b      	str	r3, [r7, #0]
 8009f0a:	460b      	mov	r3, r1
 8009f0c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009f0e:	2300      	movs	r3, #0
 8009f10:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009f12:	2300      	movs	r3, #0
 8009f14:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009f16:	68fb      	ldr	r3, [r7, #12]
 8009f18:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8009f1c:	7af9      	ldrb	r1, [r7, #11]
 8009f1e:	683b      	ldr	r3, [r7, #0]
 8009f20:	687a      	ldr	r2, [r7, #4]
 8009f22:	f7fa fc0c 	bl	800473e <HAL_PCD_EP_Transmit>
 8009f26:	4603      	mov	r3, r0
 8009f28:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009f2a:	7dfb      	ldrb	r3, [r7, #23]
 8009f2c:	4618      	mov	r0, r3
 8009f2e:	f000 f841 	bl	8009fb4 <USBD_Get_USB_Status>
 8009f32:	4603      	mov	r3, r0
 8009f34:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009f36:	7dbb      	ldrb	r3, [r7, #22]
}
 8009f38:	4618      	mov	r0, r3
 8009f3a:	3718      	adds	r7, #24
 8009f3c:	46bd      	mov	sp, r7
 8009f3e:	bd80      	pop	{r7, pc}

08009f40 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009f40:	b580      	push	{r7, lr}
 8009f42:	b086      	sub	sp, #24
 8009f44:	af00      	add	r7, sp, #0
 8009f46:	60f8      	str	r0, [r7, #12]
 8009f48:	607a      	str	r2, [r7, #4]
 8009f4a:	603b      	str	r3, [r7, #0]
 8009f4c:	460b      	mov	r3, r1
 8009f4e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009f50:	2300      	movs	r3, #0
 8009f52:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009f54:	2300      	movs	r3, #0
 8009f56:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8009f5e:	7af9      	ldrb	r1, [r7, #11]
 8009f60:	683b      	ldr	r3, [r7, #0]
 8009f62:	687a      	ldr	r2, [r7, #4]
 8009f64:	f7fa fba0 	bl	80046a8 <HAL_PCD_EP_Receive>
 8009f68:	4603      	mov	r3, r0
 8009f6a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009f6c:	7dfb      	ldrb	r3, [r7, #23]
 8009f6e:	4618      	mov	r0, r3
 8009f70:	f000 f820 	bl	8009fb4 <USBD_Get_USB_Status>
 8009f74:	4603      	mov	r3, r0
 8009f76:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009f78:	7dbb      	ldrb	r3, [r7, #22]
}
 8009f7a:	4618      	mov	r0, r3
 8009f7c:	3718      	adds	r7, #24
 8009f7e:	46bd      	mov	sp, r7
 8009f80:	bd80      	pop	{r7, pc}
	...

08009f84 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009f84:	b480      	push	{r7}
 8009f86:	b083      	sub	sp, #12
 8009f88:	af00      	add	r7, sp, #0
 8009f8a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009f8c:	4b03      	ldr	r3, [pc, #12]	; (8009f9c <USBD_static_malloc+0x18>)
}
 8009f8e:	4618      	mov	r0, r3
 8009f90:	370c      	adds	r7, #12
 8009f92:	46bd      	mov	sp, r7
 8009f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f98:	4770      	bx	lr
 8009f9a:	bf00      	nop
 8009f9c:	20001088 	.word	0x20001088

08009fa0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009fa0:	b480      	push	{r7}
 8009fa2:	b083      	sub	sp, #12
 8009fa4:	af00      	add	r7, sp, #0
 8009fa6:	6078      	str	r0, [r7, #4]

}
 8009fa8:	bf00      	nop
 8009faa:	370c      	adds	r7, #12
 8009fac:	46bd      	mov	sp, r7
 8009fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fb2:	4770      	bx	lr

08009fb4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009fb4:	b480      	push	{r7}
 8009fb6:	b085      	sub	sp, #20
 8009fb8:	af00      	add	r7, sp, #0
 8009fba:	4603      	mov	r3, r0
 8009fbc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009fbe:	2300      	movs	r3, #0
 8009fc0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009fc2:	79fb      	ldrb	r3, [r7, #7]
 8009fc4:	2b03      	cmp	r3, #3
 8009fc6:	d817      	bhi.n	8009ff8 <USBD_Get_USB_Status+0x44>
 8009fc8:	a201      	add	r2, pc, #4	; (adr r2, 8009fd0 <USBD_Get_USB_Status+0x1c>)
 8009fca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009fce:	bf00      	nop
 8009fd0:	08009fe1 	.word	0x08009fe1
 8009fd4:	08009fe7 	.word	0x08009fe7
 8009fd8:	08009fed 	.word	0x08009fed
 8009fdc:	08009ff3 	.word	0x08009ff3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009fe0:	2300      	movs	r3, #0
 8009fe2:	73fb      	strb	r3, [r7, #15]
    break;
 8009fe4:	e00b      	b.n	8009ffe <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009fe6:	2303      	movs	r3, #3
 8009fe8:	73fb      	strb	r3, [r7, #15]
    break;
 8009fea:	e008      	b.n	8009ffe <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009fec:	2301      	movs	r3, #1
 8009fee:	73fb      	strb	r3, [r7, #15]
    break;
 8009ff0:	e005      	b.n	8009ffe <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009ff2:	2303      	movs	r3, #3
 8009ff4:	73fb      	strb	r3, [r7, #15]
    break;
 8009ff6:	e002      	b.n	8009ffe <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009ff8:	2303      	movs	r3, #3
 8009ffa:	73fb      	strb	r3, [r7, #15]
    break;
 8009ffc:	bf00      	nop
  }
  return usb_status;
 8009ffe:	7bfb      	ldrb	r3, [r7, #15]
}
 800a000:	4618      	mov	r0, r3
 800a002:	3714      	adds	r7, #20
 800a004:	46bd      	mov	sp, r7
 800a006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a00a:	4770      	bx	lr

0800a00c <__libc_init_array>:
 800a00c:	b570      	push	{r4, r5, r6, lr}
 800a00e:	4d0d      	ldr	r5, [pc, #52]	; (800a044 <__libc_init_array+0x38>)
 800a010:	4c0d      	ldr	r4, [pc, #52]	; (800a048 <__libc_init_array+0x3c>)
 800a012:	1b64      	subs	r4, r4, r5
 800a014:	10a4      	asrs	r4, r4, #2
 800a016:	2600      	movs	r6, #0
 800a018:	42a6      	cmp	r6, r4
 800a01a:	d109      	bne.n	800a030 <__libc_init_array+0x24>
 800a01c:	4d0b      	ldr	r5, [pc, #44]	; (800a04c <__libc_init_array+0x40>)
 800a01e:	4c0c      	ldr	r4, [pc, #48]	; (800a050 <__libc_init_array+0x44>)
 800a020:	f000 f820 	bl	800a064 <_init>
 800a024:	1b64      	subs	r4, r4, r5
 800a026:	10a4      	asrs	r4, r4, #2
 800a028:	2600      	movs	r6, #0
 800a02a:	42a6      	cmp	r6, r4
 800a02c:	d105      	bne.n	800a03a <__libc_init_array+0x2e>
 800a02e:	bd70      	pop	{r4, r5, r6, pc}
 800a030:	f855 3b04 	ldr.w	r3, [r5], #4
 800a034:	4798      	blx	r3
 800a036:	3601      	adds	r6, #1
 800a038:	e7ee      	b.n	800a018 <__libc_init_array+0xc>
 800a03a:	f855 3b04 	ldr.w	r3, [r5], #4
 800a03e:	4798      	blx	r3
 800a040:	3601      	adds	r6, #1
 800a042:	e7f2      	b.n	800a02a <__libc_init_array+0x1e>
 800a044:	0800bbd8 	.word	0x0800bbd8
 800a048:	0800bbd8 	.word	0x0800bbd8
 800a04c:	0800bbd8 	.word	0x0800bbd8
 800a050:	0800bbdc 	.word	0x0800bbdc

0800a054 <memset>:
 800a054:	4402      	add	r2, r0
 800a056:	4603      	mov	r3, r0
 800a058:	4293      	cmp	r3, r2
 800a05a:	d100      	bne.n	800a05e <memset+0xa>
 800a05c:	4770      	bx	lr
 800a05e:	f803 1b01 	strb.w	r1, [r3], #1
 800a062:	e7f9      	b.n	800a058 <memset+0x4>

0800a064 <_init>:
 800a064:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a066:	bf00      	nop
 800a068:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a06a:	bc08      	pop	{r3}
 800a06c:	469e      	mov	lr, r3
 800a06e:	4770      	bx	lr

0800a070 <_fini>:
 800a070:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a072:	bf00      	nop
 800a074:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a076:	bc08      	pop	{r3}
 800a078:	469e      	mov	lr, r3
 800a07a:	4770      	bx	lr
