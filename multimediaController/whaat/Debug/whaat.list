
whaat.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009bbc  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001b30  08009d44  08009d44  00019d44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b874  0800b874  0002016c  2**0
                  CONTENTS
  4 .ARM          00000008  0800b874  0800b874  0001b874  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b87c  0800b87c  0002016c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b87c  0800b87c  0001b87c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b880  0800b880  0001b880  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000016c  20000000  0800b884  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002016c  2**0
                  CONTENTS
 10 .bss          00000f30  2000016c  2000016c  0002016c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000109c  2000109c  0002016c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002016c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00021e03  00000000  00000000  0002019c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000044e8  00000000  00000000  00041f9f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001c88  00000000  00000000  00046488  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001ad8  00000000  00000000  00048110  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000296a1  00000000  00000000  00049be8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000257d5  00000000  00000000  00073289  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e9919  00000000  00000000  00098a5e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00182377  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007968  00000000  00000000  001823c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000016c 	.word	0x2000016c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08009d2c 	.word	0x08009d2c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000170 	.word	0x20000170
 80001c4:	08009d2c 	.word	0x08009d2c

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b084      	sub	sp, #16
 80004d0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d2:	f001 ff81 	bl	80023d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d6:	f000 f8c1 	bl	800065c <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  BSP_LCD_Init();
 80004da:	f001 fe79 	bl	80021d0 <BSP_LCD_Init>
  BSP_LCD_SetBackColor(LCD_COLOR_LIGHTYELLOW);
 80004de:	f64f 70f0 	movw	r0, #65520	; 0xfff0
 80004e2:	f001 fecf 	bl	8002284 <BSP_LCD_SetBackColor>
  BSP_LCD_Clear(LCD_COLOR_LIGHTYELLOW);
 80004e6:	f64f 70f0 	movw	r0, #65520	; 0xfff0
 80004ea:	f001 feeb 	bl	80022c4 <BSP_LCD_Clear>

  BSP_PB_Init(BUTTON_KEY, BUTTON_MODE_GPIO);
 80004ee:	2100      	movs	r1, #0
 80004f0:	2002      	movs	r0, #2
 80004f2:	f001 fc83 	bl	8001dfc <BSP_PB_Init>
  BSP_LED_Init(LED1);
 80004f6:	2000      	movs	r0, #0
 80004f8:	f001 fbe0 	bl	8001cbc <BSP_LED_Init>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004fc:	f000 fa6e 	bl	80009dc <MX_GPIO_Init>
  MX_ADC3_Init();
 8000500:	f000 f91c 	bl	800073c <MX_ADC3_Init>
  MX_DAC_Init();
 8000504:	f000 f96c 	bl	80007e0 <MX_DAC_Init>
  MX_DCMI_Init();
 8000508:	f000 f994 	bl	8000834 <MX_DCMI_Init>
  MX_FSMC_Init();
 800050c:	f000 fcd4 	bl	8000eb8 <MX_FSMC_Init>
  MX_USART3_UART_Init();
 8000510:	f000 fa3a 	bl	8000988 <MX_USART3_UART_Init>
  MX_TIM3_Init();
 8000514:	f000 f9e4 	bl	80008e0 <MX_TIM3_Init>
  MX_USB_DEVICE_Init();
 8000518:	f008 ff96 	bl	8009448 <MX_USB_DEVICE_Init>
  MX_I2C1_Init();
 800051c:	f000 f9b2 	bl	8000884 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Encoder_Start_IT(&htim3, TIM_CHANNEL_ALL);
 8000520:	213c      	movs	r1, #60	; 0x3c
 8000522:	4849      	ldr	r0, [pc, #292]	; (8000648 <main+0x17c>)
 8000524:	f005 f872 	bl	800560c <HAL_TIM_Encoder_Start_IT>
    uint32_t last_print = 0, now = 0;
 8000528:	2300      	movs	r3, #0
 800052a:	60bb      	str	r3, [r7, #8]
 800052c:	2300      	movs	r3, #0
 800052e:	607b      	str	r3, [r7, #4]
    uint32_t rot_count = 0;
 8000530:	2300      	movs	r3, #0
 8000532:	60fb      	str	r3, [r7, #12]
    now = HAL_GetTick();
 8000534:	f001 ffb6 	bl	80024a4 <HAL_GetTick>
 8000538:	6078      	str	r0, [r7, #4]
    TIM3->CNT = 30000;
 800053a:	4b44      	ldr	r3, [pc, #272]	; (800064c <main+0x180>)
 800053c:	f247 5230 	movw	r2, #30000	; 0x7530
 8000540:	625a      	str	r2, [r3, #36]	; 0x24
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  if(BSP_PB_GetState(BUTTON_KEY) == RESET){
 8000542:	2002      	movs	r0, #2
 8000544:	f001 fcee 	bl	8001f24 <BSP_PB_GetState>
 8000548:	4603      	mov	r3, r0
 800054a:	2b00      	cmp	r3, #0
 800054c:	d103      	bne.n	8000556 <main+0x8a>
		  BSP_LED_On(LED1);
 800054e:	2000      	movs	r0, #0
 8000550:	f001 fc20 	bl	8001d94 <BSP_LED_On>
 8000554:	e002      	b.n	800055c <main+0x90>
	  } else {
		  BSP_LED_Off(LED1);
 8000556:	2000      	movs	r0, #0
 8000558:	f001 fc36 	bl	8001dc8 <BSP_LED_Off>
	  }
    /* USER CODE BEGIN 3 */
	  now = HAL_GetTick();
 800055c:	f001 ffa2 	bl	80024a4 <HAL_GetTick>
 8000560:	6078      	str	r0, [r7, #4]
	  	  //if (now - last_print >= 100) {
	  		  // DBG("Encoder counter = %lu", TIM3->CNT);
	  		  if (rot_count != TIM3->CNT) {
 8000562:	4b3a      	ldr	r3, [pc, #232]	; (800064c <main+0x180>)
 8000564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000566:	68fa      	ldr	r2, [r7, #12]
 8000568:	429a      	cmp	r2, r3
 800056a:	d039      	beq.n	80005e0 <main+0x114>
	  			  	  if (rot_count > TIM3->CNT) {
 800056c:	4b37      	ldr	r3, [pc, #220]	; (800064c <main+0x180>)
 800056e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000570:	68fa      	ldr	r2, [r7, #12]
 8000572:	429a      	cmp	r2, r3
 8000574:	d90c      	bls.n	8000590 <main+0xc4>
	  			  		  keyBoardHIDsub.KEYCODE1=0x04;  // Press A key
 8000576:	4b36      	ldr	r3, [pc, #216]	; (8000650 <main+0x184>)
 8000578:	2204      	movs	r2, #4
 800057a:	709a      	strb	r2, [r3, #2]
	  					  keyBoardHIDsub.KEYCODE2=0x05;  // Press B key
 800057c:	4b34      	ldr	r3, [pc, #208]	; (8000650 <main+0x184>)
 800057e:	2205      	movs	r2, #5
 8000580:	70da      	strb	r2, [r3, #3]
	  					  keyBoardHIDsub.KEYCODE3=0x06;  // Press C key
 8000582:	4b33      	ldr	r3, [pc, #204]	; (8000650 <main+0x184>)
 8000584:	2206      	movs	r2, #6
 8000586:	711a      	strb	r2, [r3, #4]
	  					  keyBoardHIDsub.KEYCODE4=0x80;	 // Volume up - only works on linux
 8000588:	4b31      	ldr	r3, [pc, #196]	; (8000650 <main+0x184>)
 800058a:	2280      	movs	r2, #128	; 0x80
 800058c:	715a      	strb	r2, [r3, #5]
 800058e:	e00b      	b.n	80005a8 <main+0xdc>
	  			  	  } else {
	  			  		  keyBoardHIDsub.KEYCODE1=0x07;  // Press A key
 8000590:	4b2f      	ldr	r3, [pc, #188]	; (8000650 <main+0x184>)
 8000592:	2207      	movs	r2, #7
 8000594:	709a      	strb	r2, [r3, #2]
	  					  keyBoardHIDsub.KEYCODE2=0x08;  // Press B key
 8000596:	4b2e      	ldr	r3, [pc, #184]	; (8000650 <main+0x184>)
 8000598:	2208      	movs	r2, #8
 800059a:	70da      	strb	r2, [r3, #3]
	  					  keyBoardHIDsub.KEYCODE3=0x09;  // Press C key
 800059c:	4b2c      	ldr	r3, [pc, #176]	; (8000650 <main+0x184>)
 800059e:	2209      	movs	r2, #9
 80005a0:	711a      	strb	r2, [r3, #4]
	  					  keyBoardHIDsub.KEYCODE4=0x81;	 // Volume down - only works on linux
 80005a2:	4b2b      	ldr	r3, [pc, #172]	; (8000650 <main+0x184>)
 80005a4:	2281      	movs	r2, #129	; 0x81
 80005a6:	715a      	strb	r2, [r3, #5]
	  			  	  }
	  			  	  USBD_HID_SendReport(&hUsbDeviceFS,&keyBoardHIDsub,sizeof(keyBoardHIDsub));
 80005a8:	2208      	movs	r2, #8
 80005aa:	4929      	ldr	r1, [pc, #164]	; (8000650 <main+0x184>)
 80005ac:	4829      	ldr	r0, [pc, #164]	; (8000654 <main+0x188>)
 80005ae:	f007 fbd1 	bl	8007d54 <USBD_HID_SendReport>
	  			  	  HAL_Delay(20); 		       // Press all key for 50 milliseconds
 80005b2:	2014      	movs	r0, #20
 80005b4:	f001 ff82 	bl	80024bc <HAL_Delay>
	  			  	  //keyBoardHIDsub.MODIFIER=0x00;  // To release shift key
	  			  	  keyBoardHIDsub.KEYCODE1=0x00;  // Release A key
 80005b8:	4b25      	ldr	r3, [pc, #148]	; (8000650 <main+0x184>)
 80005ba:	2200      	movs	r2, #0
 80005bc:	709a      	strb	r2, [r3, #2]
	  			  	  keyBoardHIDsub.KEYCODE2=0x00;  // Release B key
 80005be:	4b24      	ldr	r3, [pc, #144]	; (8000650 <main+0x184>)
 80005c0:	2200      	movs	r2, #0
 80005c2:	70da      	strb	r2, [r3, #3]
	  			  	  keyBoardHIDsub.KEYCODE3=0x00;  // Release C key
 80005c4:	4b22      	ldr	r3, [pc, #136]	; (8000650 <main+0x184>)
 80005c6:	2200      	movs	r2, #0
 80005c8:	711a      	strb	r2, [r3, #4]
	  			  	  keyBoardHIDsub.KEYCODE4=0x00;	 // Clear buffer from volume up
 80005ca:	4b21      	ldr	r3, [pc, #132]	; (8000650 <main+0x184>)
 80005cc:	2200      	movs	r2, #0
 80005ce:	715a      	strb	r2, [r3, #5]
	  			  	  USBD_HID_SendReport(&hUsbDeviceFS,&keyBoardHIDsub,sizeof(keyBoardHIDsub));
 80005d0:	2208      	movs	r2, #8
 80005d2:	491f      	ldr	r1, [pc, #124]	; (8000650 <main+0x184>)
 80005d4:	481f      	ldr	r0, [pc, #124]	; (8000654 <main+0x188>)
 80005d6:	f007 fbbd 	bl	8007d54 <USBD_HID_SendReport>
	  			  	  rot_count = TIM3->CNT;
 80005da:	4b1c      	ldr	r3, [pc, #112]	; (800064c <main+0x180>)
 80005dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80005de:	60fb      	str	r3, [r7, #12]
	  		  }
	  		  last_print = now;
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	60bb      	str	r3, [r7, #8]
	  	  //}
	  	  if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) == 0){
 80005e4:	2140      	movs	r1, #64	; 0x40
 80005e6:	481c      	ldr	r0, [pc, #112]	; (8000658 <main+0x18c>)
 80005e8:	f002 fd7a 	bl	80030e0 <HAL_GPIO_ReadPin>
 80005ec:	4603      	mov	r3, r0
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d1a7      	bne.n	8000542 <main+0x76>
	  		  	  //keyBoardHIDsub.MODIFIER=0x02;  // To press shift key
	  		  	  keyBoardHIDsub.KEYCODE1=0x04;  // Press A key
 80005f2:	4b17      	ldr	r3, [pc, #92]	; (8000650 <main+0x184>)
 80005f4:	2204      	movs	r2, #4
 80005f6:	709a      	strb	r2, [r3, #2]
	  		  	  keyBoardHIDsub.KEYCODE2=0x05;  // Press B key
 80005f8:	4b15      	ldr	r3, [pc, #84]	; (8000650 <main+0x184>)
 80005fa:	2205      	movs	r2, #5
 80005fc:	70da      	strb	r2, [r3, #3]
	  		  	  keyBoardHIDsub.KEYCODE3=0x06;  // Press C key
 80005fe:	4b14      	ldr	r3, [pc, #80]	; (8000650 <main+0x184>)
 8000600:	2206      	movs	r2, #6
 8000602:	711a      	strb	r2, [r3, #4]
	  		  	  keyBoardHIDsub.KEYCODE4=0x80;	 // Volume up - only works on linux
 8000604:	4b12      	ldr	r3, [pc, #72]	; (8000650 <main+0x184>)
 8000606:	2280      	movs	r2, #128	; 0x80
 8000608:	715a      	strb	r2, [r3, #5]
	  		  	  USBD_HID_SendReport(&hUsbDeviceFS,&keyBoardHIDsub,sizeof(keyBoardHIDsub));
 800060a:	2208      	movs	r2, #8
 800060c:	4910      	ldr	r1, [pc, #64]	; (8000650 <main+0x184>)
 800060e:	4811      	ldr	r0, [pc, #68]	; (8000654 <main+0x188>)
 8000610:	f007 fba0 	bl	8007d54 <USBD_HID_SendReport>
	  		  	  HAL_Delay(50); 		       // Press all key for 50 milliseconds
 8000614:	2032      	movs	r0, #50	; 0x32
 8000616:	f001 ff51 	bl	80024bc <HAL_Delay>
	  		  	  //keyBoardHIDsub.MODIFIER=0x00;  // To release shift key
	  		  	  keyBoardHIDsub.KEYCODE1=0x00;  // Release A key
 800061a:	4b0d      	ldr	r3, [pc, #52]	; (8000650 <main+0x184>)
 800061c:	2200      	movs	r2, #0
 800061e:	709a      	strb	r2, [r3, #2]
	  		  	  keyBoardHIDsub.KEYCODE2=0x00;  // Release B key
 8000620:	4b0b      	ldr	r3, [pc, #44]	; (8000650 <main+0x184>)
 8000622:	2200      	movs	r2, #0
 8000624:	70da      	strb	r2, [r3, #3]
	  		  	  keyBoardHIDsub.KEYCODE3=0x00;  // Release C key
 8000626:	4b0a      	ldr	r3, [pc, #40]	; (8000650 <main+0x184>)
 8000628:	2200      	movs	r2, #0
 800062a:	711a      	strb	r2, [r3, #4]
	  		  	  keyBoardHIDsub.KEYCODE4=0x00;	 // Clear buffer from volume up
 800062c:	4b08      	ldr	r3, [pc, #32]	; (8000650 <main+0x184>)
 800062e:	2200      	movs	r2, #0
 8000630:	715a      	strb	r2, [r3, #5]
	  		  	  USBD_HID_SendReport(&hUsbDeviceFS,&keyBoardHIDsub,sizeof(keyBoardHIDsub));
 8000632:	2208      	movs	r2, #8
 8000634:	4906      	ldr	r1, [pc, #24]	; (8000650 <main+0x184>)
 8000636:	4807      	ldr	r0, [pc, #28]	; (8000654 <main+0x188>)
 8000638:	f007 fb8c 	bl	8007d54 <USBD_HID_SendReport>
	  		  	  HAL_Delay(1000); 	       // Repeat this task on every 1 second
 800063c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000640:	f001 ff3c 	bl	80024bc <HAL_Delay>
	  if(BSP_PB_GetState(BUTTON_KEY) == RESET){
 8000644:	e77d      	b.n	8000542 <main+0x76>
 8000646:	bf00      	nop
 8000648:	20000278 	.word	0x20000278
 800064c:	40000400 	.word	0x40000400
 8000650:	200003f4 	.word	0x200003f4
 8000654:	200006a0 	.word	0x200006a0
 8000658:	40020400 	.word	0x40020400

0800065c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b094      	sub	sp, #80	; 0x50
 8000660:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000662:	f107 0320 	add.w	r3, r7, #32
 8000666:	2230      	movs	r2, #48	; 0x30
 8000668:	2100      	movs	r1, #0
 800066a:	4618      	mov	r0, r3
 800066c:	f009 fb56 	bl	8009d1c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000670:	f107 030c 	add.w	r3, r7, #12
 8000674:	2200      	movs	r2, #0
 8000676:	601a      	str	r2, [r3, #0]
 8000678:	605a      	str	r2, [r3, #4]
 800067a:	609a      	str	r2, [r3, #8]
 800067c:	60da      	str	r2, [r3, #12]
 800067e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000680:	2300      	movs	r3, #0
 8000682:	60bb      	str	r3, [r7, #8]
 8000684:	4b2b      	ldr	r3, [pc, #172]	; (8000734 <SystemClock_Config+0xd8>)
 8000686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000688:	4a2a      	ldr	r2, [pc, #168]	; (8000734 <SystemClock_Config+0xd8>)
 800068a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800068e:	6413      	str	r3, [r2, #64]	; 0x40
 8000690:	4b28      	ldr	r3, [pc, #160]	; (8000734 <SystemClock_Config+0xd8>)
 8000692:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000694:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000698:	60bb      	str	r3, [r7, #8]
 800069a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800069c:	2300      	movs	r3, #0
 800069e:	607b      	str	r3, [r7, #4]
 80006a0:	4b25      	ldr	r3, [pc, #148]	; (8000738 <SystemClock_Config+0xdc>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	4a24      	ldr	r2, [pc, #144]	; (8000738 <SystemClock_Config+0xdc>)
 80006a6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006aa:	6013      	str	r3, [r2, #0]
 80006ac:	4b22      	ldr	r3, [pc, #136]	; (8000738 <SystemClock_Config+0xdc>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006b4:	607b      	str	r3, [r7, #4]
 80006b6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006b8:	2301      	movs	r3, #1
 80006ba:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006bc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006c0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006c2:	2302      	movs	r3, #2
 80006c4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006c6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80006cc:	2319      	movs	r3, #25
 80006ce:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80006d0:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80006d4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006d6:	2302      	movs	r3, #2
 80006d8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80006da:	2307      	movs	r3, #7
 80006dc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006de:	f107 0320 	add.w	r3, r7, #32
 80006e2:	4618      	mov	r0, r3
 80006e4:	f004 f9e4 	bl	8004ab0 <HAL_RCC_OscConfig>
 80006e8:	4603      	mov	r3, r0
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d001      	beq.n	80006f2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80006ee:	f000 fcd9 	bl	80010a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006f2:	230f      	movs	r3, #15
 80006f4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006f6:	2302      	movs	r3, #2
 80006f8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006fa:	2300      	movs	r3, #0
 80006fc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006fe:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000702:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000704:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000708:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800070a:	f107 030c 	add.w	r3, r7, #12
 800070e:	2105      	movs	r1, #5
 8000710:	4618      	mov	r0, r3
 8000712:	f004 fc45 	bl	8004fa0 <HAL_RCC_ClockConfig>
 8000716:	4603      	mov	r3, r0
 8000718:	2b00      	cmp	r3, #0
 800071a:	d001      	beq.n	8000720 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800071c:	f000 fcc2 	bl	80010a4 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSE, RCC_MCODIV_1);
 8000720:	2200      	movs	r2, #0
 8000722:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8000726:	2000      	movs	r0, #0
 8000728:	f004 fd20 	bl	800516c <HAL_RCC_MCOConfig>
}
 800072c:	bf00      	nop
 800072e:	3750      	adds	r7, #80	; 0x50
 8000730:	46bd      	mov	sp, r7
 8000732:	bd80      	pop	{r7, pc}
 8000734:	40023800 	.word	0x40023800
 8000738:	40007000 	.word	0x40007000

0800073c <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b084      	sub	sp, #16
 8000740:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000742:	463b      	mov	r3, r7
 8000744:	2200      	movs	r2, #0
 8000746:	601a      	str	r2, [r3, #0]
 8000748:	605a      	str	r2, [r3, #4]
 800074a:	609a      	str	r2, [r3, #8]
 800074c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 800074e:	4b21      	ldr	r3, [pc, #132]	; (80007d4 <MX_ADC3_Init+0x98>)
 8000750:	4a21      	ldr	r2, [pc, #132]	; (80007d8 <MX_ADC3_Init+0x9c>)
 8000752:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000754:	4b1f      	ldr	r3, [pc, #124]	; (80007d4 <MX_ADC3_Init+0x98>)
 8000756:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800075a:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 800075c:	4b1d      	ldr	r3, [pc, #116]	; (80007d4 <MX_ADC3_Init+0x98>)
 800075e:	2200      	movs	r2, #0
 8000760:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = DISABLE;
 8000762:	4b1c      	ldr	r3, [pc, #112]	; (80007d4 <MX_ADC3_Init+0x98>)
 8000764:	2200      	movs	r2, #0
 8000766:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000768:	4b1a      	ldr	r3, [pc, #104]	; (80007d4 <MX_ADC3_Init+0x98>)
 800076a:	2200      	movs	r2, #0
 800076c:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800076e:	4b19      	ldr	r3, [pc, #100]	; (80007d4 <MX_ADC3_Init+0x98>)
 8000770:	2200      	movs	r2, #0
 8000772:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000776:	4b17      	ldr	r3, [pc, #92]	; (80007d4 <MX_ADC3_Init+0x98>)
 8000778:	2200      	movs	r2, #0
 800077a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800077c:	4b15      	ldr	r3, [pc, #84]	; (80007d4 <MX_ADC3_Init+0x98>)
 800077e:	4a17      	ldr	r2, [pc, #92]	; (80007dc <MX_ADC3_Init+0xa0>)
 8000780:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000782:	4b14      	ldr	r3, [pc, #80]	; (80007d4 <MX_ADC3_Init+0x98>)
 8000784:	2200      	movs	r2, #0
 8000786:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8000788:	4b12      	ldr	r3, [pc, #72]	; (80007d4 <MX_ADC3_Init+0x98>)
 800078a:	2201      	movs	r2, #1
 800078c:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 800078e:	4b11      	ldr	r3, [pc, #68]	; (80007d4 <MX_ADC3_Init+0x98>)
 8000790:	2200      	movs	r2, #0
 8000792:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000796:	4b0f      	ldr	r3, [pc, #60]	; (80007d4 <MX_ADC3_Init+0x98>)
 8000798:	2201      	movs	r2, #1
 800079a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800079c:	480d      	ldr	r0, [pc, #52]	; (80007d4 <MX_ADC3_Init+0x98>)
 800079e:	f001 feb1 	bl	8002504 <HAL_ADC_Init>
 80007a2:	4603      	mov	r3, r0
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d001      	beq.n	80007ac <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 80007a8:	f000 fc7c 	bl	80010a4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80007ac:	2307      	movs	r3, #7
 80007ae:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80007b0:	2301      	movs	r3, #1
 80007b2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80007b4:	2300      	movs	r3, #0
 80007b6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80007b8:	463b      	mov	r3, r7
 80007ba:	4619      	mov	r1, r3
 80007bc:	4805      	ldr	r0, [pc, #20]	; (80007d4 <MX_ADC3_Init+0x98>)
 80007be:	f001 fee5 	bl	800258c <HAL_ADC_ConfigChannel>
 80007c2:	4603      	mov	r3, r0
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d001      	beq.n	80007cc <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 80007c8:	f000 fc6c 	bl	80010a4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80007cc:	bf00      	nop
 80007ce:	3710      	adds	r7, #16
 80007d0:	46bd      	mov	sp, r7
 80007d2:	bd80      	pop	{r7, pc}
 80007d4:	20000188 	.word	0x20000188
 80007d8:	40012200 	.word	0x40012200
 80007dc:	0f000001 	.word	0x0f000001

080007e0 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b082      	sub	sp, #8
 80007e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80007e6:	463b      	mov	r3, r7
 80007e8:	2200      	movs	r2, #0
 80007ea:	601a      	str	r2, [r3, #0]
 80007ec:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 80007ee:	4b0f      	ldr	r3, [pc, #60]	; (800082c <MX_DAC_Init+0x4c>)
 80007f0:	4a0f      	ldr	r2, [pc, #60]	; (8000830 <MX_DAC_Init+0x50>)
 80007f2:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 80007f4:	480d      	ldr	r0, [pc, #52]	; (800082c <MX_DAC_Init+0x4c>)
 80007f6:	f002 f9f8 	bl	8002bea <HAL_DAC_Init>
 80007fa:	4603      	mov	r3, r0
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d001      	beq.n	8000804 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8000800:	f000 fc50 	bl	80010a4 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000804:	2300      	movs	r3, #0
 8000806:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000808:	2300      	movs	r3, #0
 800080a:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800080c:	463b      	mov	r3, r7
 800080e:	2200      	movs	r2, #0
 8000810:	4619      	mov	r1, r3
 8000812:	4806      	ldr	r0, [pc, #24]	; (800082c <MX_DAC_Init+0x4c>)
 8000814:	f002 fa0b 	bl	8002c2e <HAL_DAC_ConfigChannel>
 8000818:	4603      	mov	r3, r0
 800081a:	2b00      	cmp	r3, #0
 800081c:	d001      	beq.n	8000822 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 800081e:	f000 fc41 	bl	80010a4 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8000822:	bf00      	nop
 8000824:	3708      	adds	r7, #8
 8000826:	46bd      	mov	sp, r7
 8000828:	bd80      	pop	{r7, pc}
 800082a:	bf00      	nop
 800082c:	200001d0 	.word	0x200001d0
 8000830:	40007400 	.word	0x40007400

08000834 <MX_DCMI_Init>:
  * @brief DCMI Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCMI_Init(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 8000838:	4b10      	ldr	r3, [pc, #64]	; (800087c <MX_DCMI_Init+0x48>)
 800083a:	4a11      	ldr	r2, [pc, #68]	; (8000880 <MX_DCMI_Init+0x4c>)
 800083c:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 800083e:	4b0f      	ldr	r3, [pc, #60]	; (800087c <MX_DCMI_Init+0x48>)
 8000840:	2200      	movs	r2, #0
 8000842:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_FALLING;
 8000844:	4b0d      	ldr	r3, [pc, #52]	; (800087c <MX_DCMI_Init+0x48>)
 8000846:	2200      	movs	r2, #0
 8000848:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_LOW;
 800084a:	4b0c      	ldr	r3, [pc, #48]	; (800087c <MX_DCMI_Init+0x48>)
 800084c:	2200      	movs	r2, #0
 800084e:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 8000850:	4b0a      	ldr	r3, [pc, #40]	; (800087c <MX_DCMI_Init+0x48>)
 8000852:	2200      	movs	r2, #0
 8000854:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 8000856:	4b09      	ldr	r3, [pc, #36]	; (800087c <MX_DCMI_Init+0x48>)
 8000858:	2200      	movs	r2, #0
 800085a:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 800085c:	4b07      	ldr	r3, [pc, #28]	; (800087c <MX_DCMI_Init+0x48>)
 800085e:	2200      	movs	r2, #0
 8000860:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 8000862:	4b06      	ldr	r3, [pc, #24]	; (800087c <MX_DCMI_Init+0x48>)
 8000864:	2200      	movs	r2, #0
 8000866:	621a      	str	r2, [r3, #32]
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 8000868:	4804      	ldr	r0, [pc, #16]	; (800087c <MX_DCMI_Init+0x48>)
 800086a:	f002 fa2f 	bl	8002ccc <HAL_DCMI_Init>
 800086e:	4603      	mov	r3, r0
 8000870:	2b00      	cmp	r3, #0
 8000872:	d001      	beq.n	8000878 <MX_DCMI_Init+0x44>
  {
    Error_Handler();
 8000874:	f000 fc16 	bl	80010a4 <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 8000878:	bf00      	nop
 800087a:	bd80      	pop	{r7, pc}
 800087c:	200001e4 	.word	0x200001e4
 8000880:	50050000 	.word	0x50050000

08000884 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000888:	4b12      	ldr	r3, [pc, #72]	; (80008d4 <MX_I2C1_Init+0x50>)
 800088a:	4a13      	ldr	r2, [pc, #76]	; (80008d8 <MX_I2C1_Init+0x54>)
 800088c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800088e:	4b11      	ldr	r3, [pc, #68]	; (80008d4 <MX_I2C1_Init+0x50>)
 8000890:	4a12      	ldr	r2, [pc, #72]	; (80008dc <MX_I2C1_Init+0x58>)
 8000892:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000894:	4b0f      	ldr	r3, [pc, #60]	; (80008d4 <MX_I2C1_Init+0x50>)
 8000896:	2200      	movs	r2, #0
 8000898:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800089a:	4b0e      	ldr	r3, [pc, #56]	; (80008d4 <MX_I2C1_Init+0x50>)
 800089c:	2200      	movs	r2, #0
 800089e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008a0:	4b0c      	ldr	r3, [pc, #48]	; (80008d4 <MX_I2C1_Init+0x50>)
 80008a2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80008a6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008a8:	4b0a      	ldr	r3, [pc, #40]	; (80008d4 <MX_I2C1_Init+0x50>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80008ae:	4b09      	ldr	r3, [pc, #36]	; (80008d4 <MX_I2C1_Init+0x50>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008b4:	4b07      	ldr	r3, [pc, #28]	; (80008d4 <MX_I2C1_Init+0x50>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008ba:	4b06      	ldr	r3, [pc, #24]	; (80008d4 <MX_I2C1_Init+0x50>)
 80008bc:	2200      	movs	r2, #0
 80008be:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80008c0:	4804      	ldr	r0, [pc, #16]	; (80008d4 <MX_I2C1_Init+0x50>)
 80008c2:	f002 fc3f 	bl	8003144 <HAL_I2C_Init>
 80008c6:	4603      	mov	r3, r0
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d001      	beq.n	80008d0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80008cc:	f000 fbea 	bl	80010a4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80008d0:	bf00      	nop
 80008d2:	bd80      	pop	{r7, pc}
 80008d4:	20000224 	.word	0x20000224
 80008d8:	40005400 	.word	0x40005400
 80008dc:	000186a0 	.word	0x000186a0

080008e0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b08c      	sub	sp, #48	; 0x30
 80008e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80008e6:	f107 030c 	add.w	r3, r7, #12
 80008ea:	2224      	movs	r2, #36	; 0x24
 80008ec:	2100      	movs	r1, #0
 80008ee:	4618      	mov	r0, r3
 80008f0:	f009 fa14 	bl	8009d1c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008f4:	1d3b      	adds	r3, r7, #4
 80008f6:	2200      	movs	r2, #0
 80008f8:	601a      	str	r2, [r3, #0]
 80008fa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80008fc:	4b20      	ldr	r3, [pc, #128]	; (8000980 <MX_TIM3_Init+0xa0>)
 80008fe:	4a21      	ldr	r2, [pc, #132]	; (8000984 <MX_TIM3_Init+0xa4>)
 8000900:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000902:	4b1f      	ldr	r3, [pc, #124]	; (8000980 <MX_TIM3_Init+0xa0>)
 8000904:	2200      	movs	r2, #0
 8000906:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000908:	4b1d      	ldr	r3, [pc, #116]	; (8000980 <MX_TIM3_Init+0xa0>)
 800090a:	2200      	movs	r2, #0
 800090c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800090e:	4b1c      	ldr	r3, [pc, #112]	; (8000980 <MX_TIM3_Init+0xa0>)
 8000910:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000914:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000916:	4b1a      	ldr	r3, [pc, #104]	; (8000980 <MX_TIM3_Init+0xa0>)
 8000918:	2200      	movs	r2, #0
 800091a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800091c:	4b18      	ldr	r3, [pc, #96]	; (8000980 <MX_TIM3_Init+0xa0>)
 800091e:	2200      	movs	r2, #0
 8000920:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000922:	2301      	movs	r3, #1
 8000924:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000926:	2300      	movs	r3, #0
 8000928:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800092a:	2301      	movs	r3, #1
 800092c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800092e:	2300      	movs	r3, #0
 8000930:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000932:	2300      	movs	r3, #0
 8000934:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000936:	2300      	movs	r3, #0
 8000938:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800093a:	2301      	movs	r3, #1
 800093c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800093e:	2300      	movs	r3, #0
 8000940:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000942:	2300      	movs	r3, #0
 8000944:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8000946:	f107 030c 	add.w	r3, r7, #12
 800094a:	4619      	mov	r1, r3
 800094c:	480c      	ldr	r0, [pc, #48]	; (8000980 <MX_TIM3_Init+0xa0>)
 800094e:	f004 fdb7 	bl	80054c0 <HAL_TIM_Encoder_Init>
 8000952:	4603      	mov	r3, r0
 8000954:	2b00      	cmp	r3, #0
 8000956:	d001      	beq.n	800095c <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8000958:	f000 fba4 	bl	80010a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800095c:	2300      	movs	r3, #0
 800095e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000960:	2300      	movs	r3, #0
 8000962:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000964:	1d3b      	adds	r3, r7, #4
 8000966:	4619      	mov	r1, r3
 8000968:	4805      	ldr	r0, [pc, #20]	; (8000980 <MX_TIM3_Init+0xa0>)
 800096a:	f004 ffc3 	bl	80058f4 <HAL_TIMEx_MasterConfigSynchronization>
 800096e:	4603      	mov	r3, r0
 8000970:	2b00      	cmp	r3, #0
 8000972:	d001      	beq.n	8000978 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8000974:	f000 fb96 	bl	80010a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000978:	bf00      	nop
 800097a:	3730      	adds	r7, #48	; 0x30
 800097c:	46bd      	mov	sp, r7
 800097e:	bd80      	pop	{r7, pc}
 8000980:	20000278 	.word	0x20000278
 8000984:	40000400 	.word	0x40000400

08000988 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800098c:	4b11      	ldr	r3, [pc, #68]	; (80009d4 <MX_USART3_UART_Init+0x4c>)
 800098e:	4a12      	ldr	r2, [pc, #72]	; (80009d8 <MX_USART3_UART_Init+0x50>)
 8000990:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000992:	4b10      	ldr	r3, [pc, #64]	; (80009d4 <MX_USART3_UART_Init+0x4c>)
 8000994:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000998:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800099a:	4b0e      	ldr	r3, [pc, #56]	; (80009d4 <MX_USART3_UART_Init+0x4c>)
 800099c:	2200      	movs	r2, #0
 800099e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80009a0:	4b0c      	ldr	r3, [pc, #48]	; (80009d4 <MX_USART3_UART_Init+0x4c>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80009a6:	4b0b      	ldr	r3, [pc, #44]	; (80009d4 <MX_USART3_UART_Init+0x4c>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80009ac:	4b09      	ldr	r3, [pc, #36]	; (80009d4 <MX_USART3_UART_Init+0x4c>)
 80009ae:	220c      	movs	r2, #12
 80009b0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009b2:	4b08      	ldr	r3, [pc, #32]	; (80009d4 <MX_USART3_UART_Init+0x4c>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80009b8:	4b06      	ldr	r3, [pc, #24]	; (80009d4 <MX_USART3_UART_Init+0x4c>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80009be:	4805      	ldr	r0, [pc, #20]	; (80009d4 <MX_USART3_UART_Init+0x4c>)
 80009c0:	f005 f814 	bl	80059ec <HAL_UART_Init>
 80009c4:	4603      	mov	r3, r0
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d001      	beq.n	80009ce <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80009ca:	f000 fb6b 	bl	80010a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80009ce:	bf00      	nop
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	bf00      	nop
 80009d4:	200002c0 	.word	0x200002c0
 80009d8:	40004800 	.word	0x40004800

080009dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b08e      	sub	sp, #56	; 0x38
 80009e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009e6:	2200      	movs	r2, #0
 80009e8:	601a      	str	r2, [r3, #0]
 80009ea:	605a      	str	r2, [r3, #4]
 80009ec:	609a      	str	r2, [r3, #8]
 80009ee:	60da      	str	r2, [r3, #12]
 80009f0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80009f2:	2300      	movs	r3, #0
 80009f4:	623b      	str	r3, [r7, #32]
 80009f6:	4bb1      	ldr	r3, [pc, #708]	; (8000cbc <MX_GPIO_Init+0x2e0>)
 80009f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fa:	4ab0      	ldr	r2, [pc, #704]	; (8000cbc <MX_GPIO_Init+0x2e0>)
 80009fc:	f043 0310 	orr.w	r3, r3, #16
 8000a00:	6313      	str	r3, [r2, #48]	; 0x30
 8000a02:	4bae      	ldr	r3, [pc, #696]	; (8000cbc <MX_GPIO_Init+0x2e0>)
 8000a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a06:	f003 0310 	and.w	r3, r3, #16
 8000a0a:	623b      	str	r3, [r7, #32]
 8000a0c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a0e:	2300      	movs	r3, #0
 8000a10:	61fb      	str	r3, [r7, #28]
 8000a12:	4baa      	ldr	r3, [pc, #680]	; (8000cbc <MX_GPIO_Init+0x2e0>)
 8000a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a16:	4aa9      	ldr	r2, [pc, #676]	; (8000cbc <MX_GPIO_Init+0x2e0>)
 8000a18:	f043 0302 	orr.w	r3, r3, #2
 8000a1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a1e:	4ba7      	ldr	r3, [pc, #668]	; (8000cbc <MX_GPIO_Init+0x2e0>)
 8000a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a22:	f003 0302 	and.w	r3, r3, #2
 8000a26:	61fb      	str	r3, [r7, #28]
 8000a28:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	61bb      	str	r3, [r7, #24]
 8000a2e:	4ba3      	ldr	r3, [pc, #652]	; (8000cbc <MX_GPIO_Init+0x2e0>)
 8000a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a32:	4aa2      	ldr	r2, [pc, #648]	; (8000cbc <MX_GPIO_Init+0x2e0>)
 8000a34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a38:	6313      	str	r3, [r2, #48]	; 0x30
 8000a3a:	4ba0      	ldr	r3, [pc, #640]	; (8000cbc <MX_GPIO_Init+0x2e0>)
 8000a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a42:	61bb      	str	r3, [r7, #24]
 8000a44:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a46:	2300      	movs	r3, #0
 8000a48:	617b      	str	r3, [r7, #20]
 8000a4a:	4b9c      	ldr	r3, [pc, #624]	; (8000cbc <MX_GPIO_Init+0x2e0>)
 8000a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a4e:	4a9b      	ldr	r2, [pc, #620]	; (8000cbc <MX_GPIO_Init+0x2e0>)
 8000a50:	f043 0308 	orr.w	r3, r3, #8
 8000a54:	6313      	str	r3, [r2, #48]	; 0x30
 8000a56:	4b99      	ldr	r3, [pc, #612]	; (8000cbc <MX_GPIO_Init+0x2e0>)
 8000a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5a:	f003 0308 	and.w	r3, r3, #8
 8000a5e:	617b      	str	r3, [r7, #20]
 8000a60:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a62:	2300      	movs	r3, #0
 8000a64:	613b      	str	r3, [r7, #16]
 8000a66:	4b95      	ldr	r3, [pc, #596]	; (8000cbc <MX_GPIO_Init+0x2e0>)
 8000a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6a:	4a94      	ldr	r2, [pc, #592]	; (8000cbc <MX_GPIO_Init+0x2e0>)
 8000a6c:	f043 0304 	orr.w	r3, r3, #4
 8000a70:	6313      	str	r3, [r2, #48]	; 0x30
 8000a72:	4b92      	ldr	r3, [pc, #584]	; (8000cbc <MX_GPIO_Init+0x2e0>)
 8000a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a76:	f003 0304 	and.w	r3, r3, #4
 8000a7a:	613b      	str	r3, [r7, #16]
 8000a7c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a7e:	2300      	movs	r3, #0
 8000a80:	60fb      	str	r3, [r7, #12]
 8000a82:	4b8e      	ldr	r3, [pc, #568]	; (8000cbc <MX_GPIO_Init+0x2e0>)
 8000a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a86:	4a8d      	ldr	r2, [pc, #564]	; (8000cbc <MX_GPIO_Init+0x2e0>)
 8000a88:	f043 0301 	orr.w	r3, r3, #1
 8000a8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a8e:	4b8b      	ldr	r3, [pc, #556]	; (8000cbc <MX_GPIO_Init+0x2e0>)
 8000a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a92:	f003 0301 	and.w	r3, r3, #1
 8000a96:	60fb      	str	r3, [r7, #12]
 8000a98:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	60bb      	str	r3, [r7, #8]
 8000a9e:	4b87      	ldr	r3, [pc, #540]	; (8000cbc <MX_GPIO_Init+0x2e0>)
 8000aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa2:	4a86      	ldr	r2, [pc, #536]	; (8000cbc <MX_GPIO_Init+0x2e0>)
 8000aa4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000aa8:	6313      	str	r3, [r2, #48]	; 0x30
 8000aaa:	4b84      	ldr	r3, [pc, #528]	; (8000cbc <MX_GPIO_Init+0x2e0>)
 8000aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ab2:	60bb      	str	r3, [r7, #8]
 8000ab4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	607b      	str	r3, [r7, #4]
 8000aba:	4b80      	ldr	r3, [pc, #512]	; (8000cbc <MX_GPIO_Init+0x2e0>)
 8000abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000abe:	4a7f      	ldr	r2, [pc, #508]	; (8000cbc <MX_GPIO_Init+0x2e0>)
 8000ac0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ac4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ac6:	4b7d      	ldr	r3, [pc, #500]	; (8000cbc <MX_GPIO_Init+0x2e0>)
 8000ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ace:	607b      	str	r3, [r7, #4]
 8000ad0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	603b      	str	r3, [r7, #0]
 8000ad6:	4b79      	ldr	r3, [pc, #484]	; (8000cbc <MX_GPIO_Init+0x2e0>)
 8000ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ada:	4a78      	ldr	r2, [pc, #480]	; (8000cbc <MX_GPIO_Init+0x2e0>)
 8000adc:	f043 0320 	orr.w	r3, r3, #32
 8000ae0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ae2:	4b76      	ldr	r3, [pc, #472]	; (8000cbc <MX_GPIO_Init+0x2e0>)
 8000ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae6:	f003 0320 	and.w	r3, r3, #32
 8000aea:	603b      	str	r3, [r7, #0]
 8000aec:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, SmartCard_CMDVCC_Pin|LED2_Pin|LED1_Pin, GPIO_PIN_RESET);
 8000aee:	2200      	movs	r2, #0
 8000af0:	f44f 518a 	mov.w	r1, #4416	; 0x1140
 8000af4:	4872      	ldr	r0, [pc, #456]	; (8000cc0 <MX_GPIO_Init+0x2e4>)
 8000af6:	f002 fb0b 	bl	8003110 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
 8000afa:	2200      	movs	r2, #0
 8000afc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b00:	4870      	ldr	r0, [pc, #448]	; (8000cc4 <MX_GPIO_Init+0x2e8>)
 8000b02:	f002 fb05 	bl	8003110 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, SmartCard_3_5V_Pin|OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000b06:	2200      	movs	r2, #0
 8000b08:	f248 0120 	movw	r1, #32800	; 0x8020
 8000b0c:	486e      	ldr	r0, [pc, #440]	; (8000cc8 <MX_GPIO_Init+0x2ec>)
 8000b0e:	f002 faff 	bl	8003110 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, GPIO_PIN_RESET);
 8000b12:	2200      	movs	r2, #0
 8000b14:	2180      	movs	r1, #128	; 0x80
 8000b16:	486d      	ldr	r0, [pc, #436]	; (8000ccc <MX_GPIO_Init+0x2f0>)
 8000b18:	f002 fafa 	bl	8003110 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SmartCard_RST_GPIO_Port, SmartCard_RST_Pin, GPIO_PIN_RESET);
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	2180      	movs	r1, #128	; 0x80
 8000b20:	486b      	ldr	r0, [pc, #428]	; (8000cd0 <MX_GPIO_Init+0x2f4>)
 8000b22:	f002 faf5 	bl	8003110 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : MII_TXD1_Pin MII_TXD0_Pin MII_TX_EN_Pin */
  GPIO_InitStruct.Pin = MII_TXD1_Pin|MII_TXD0_Pin|MII_TX_EN_Pin;
 8000b26:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 8000b2a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b2c:	2302      	movs	r3, #2
 8000b2e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b30:	2300      	movs	r3, #0
 8000b32:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b34:	2300      	movs	r3, #0
 8000b36:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b38:	230b      	movs	r3, #11
 8000b3a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000b3c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b40:	4619      	mov	r1, r3
 8000b42:	485f      	ldr	r0, [pc, #380]	; (8000cc0 <MX_GPIO_Init+0x2e4>)
 8000b44:	f002 f930 	bl	8002da8 <HAL_GPIO_Init>

  /*Configure GPIO pins : MicroSDCard_CLK_Pin MicroSDCard_D1_Pin MicroSDCard_D0_Pin */
  GPIO_InitStruct.Pin = MicroSDCard_CLK_Pin|MicroSDCard_D1_Pin|MicroSDCard_D0_Pin;
 8000b48:	f44f 5398 	mov.w	r3, #4864	; 0x1300
 8000b4c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b4e:	2302      	movs	r3, #2
 8000b50:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b52:	2300      	movs	r3, #0
 8000b54:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b56:	2303      	movs	r3, #3
 8000b58:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000b5a:	230c      	movs	r3, #12
 8000b5c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b5e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b62:	4619      	mov	r1, r3
 8000b64:	4859      	ldr	r0, [pc, #356]	; (8000ccc <MX_GPIO_Init+0x2f0>)
 8000b66:	f002 f91f 	bl	8002da8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000b6a:	2340      	movs	r3, #64	; 0x40
 8000b6c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000b72:	2302      	movs	r3, #2
 8000b74:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b76:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b7a:	4619      	mov	r1, r3
 8000b7c:	4855      	ldr	r0, [pc, #340]	; (8000cd4 <MX_GPIO_Init+0x2f8>)
 8000b7e:	f002 f913 	bl	8002da8 <HAL_GPIO_Init>

  /*Configure GPIO pin : User_Button_Pin */
  GPIO_InitStruct.Pin = User_Button_Pin;
 8000b82:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000b86:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000b88:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000b8c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(User_Button_GPIO_Port, &GPIO_InitStruct);
 8000b92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b96:	4619      	mov	r1, r3
 8000b98:	4849      	ldr	r0, [pc, #292]	; (8000cc0 <MX_GPIO_Init+0x2e4>)
 8000b9a:	f002 f905 	bl	8002da8 <HAL_GPIO_Init>

  /*Configure GPIO pins : SmartCard_CMDVCC_Pin LED2_Pin LED1_Pin */
  GPIO_InitStruct.Pin = SmartCard_CMDVCC_Pin|LED2_Pin|LED1_Pin;
 8000b9e:	f44f 538a 	mov.w	r3, #4416	; 0x1140
 8000ba2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ba4:	2301      	movs	r3, #1
 8000ba6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bac:	2300      	movs	r3, #0
 8000bae:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000bb0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bb4:	4619      	mov	r1, r3
 8000bb6:	4842      	ldr	r0, [pc, #264]	; (8000cc0 <MX_GPIO_Init+0x2e4>)
 8000bb8:	f002 f8f6 	bl	8002da8 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S_SD_Pin I2S_WS_Pin */
  GPIO_InitStruct.Pin = I2S_SD_Pin|I2S_WS_Pin;
 8000bbc:	2309      	movs	r3, #9
 8000bbe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bc0:	2302      	movs	r3, #2
 8000bc2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000bcc:	2305      	movs	r3, #5
 8000bce:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000bd0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bd4:	4619      	mov	r1, r3
 8000bd6:	483b      	ldr	r0, [pc, #236]	; (8000cc4 <MX_GPIO_Init+0x2e8>)
 8000bd8:	f002 f8e6 	bl	8002da8 <HAL_GPIO_Init>

  /*Configure GPIO pin : IO_Expander_INT_Pin */
  GPIO_InitStruct.Pin = IO_Expander_INT_Pin;
 8000bdc:	2304      	movs	r3, #4
 8000bde:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000be0:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000be4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be6:	2300      	movs	r3, #0
 8000be8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(IO_Expander_INT_GPIO_Port, &GPIO_InitStruct);
 8000bea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bee:	4619      	mov	r1, r3
 8000bf0:	4834      	ldr	r0, [pc, #208]	; (8000cc4 <MX_GPIO_Init+0x2e8>)
 8000bf2:	f002 f8d9 	bl	8002da8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED3_Pin */
  GPIO_InitStruct.Pin = LED3_Pin;
 8000bf6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000bfa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bfc:	2301      	movs	r3, #1
 8000bfe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c00:	2300      	movs	r3, #0
 8000c02:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c04:	2300      	movs	r3, #0
 8000c06:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LED3_GPIO_Port, &GPIO_InitStruct);
 8000c08:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c0c:	4619      	mov	r1, r3
 8000c0e:	482d      	ldr	r0, [pc, #180]	; (8000cc4 <MX_GPIO_Init+0x2e8>)
 8000c10:	f002 f8ca 	bl	8002da8 <HAL_GPIO_Init>

  /*Configure GPIO pin : MicroSDCard_CMD_Pin */
  GPIO_InitStruct.Pin = MicroSDCard_CMD_Pin;
 8000c14:	2304      	movs	r3, #4
 8000c16:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c18:	2302      	movs	r3, #2
 8000c1a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c20:	2303      	movs	r3, #3
 8000c22:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000c24:	230c      	movs	r3, #12
 8000c26:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(MicroSDCard_CMD_GPIO_Port, &GPIO_InitStruct);
 8000c28:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c2c:	4619      	mov	r1, r3
 8000c2e:	482a      	ldr	r0, [pc, #168]	; (8000cd8 <MX_GPIO_Init+0x2fc>)
 8000c30:	f002 f8ba 	bl	8002da8 <HAL_GPIO_Init>

  /*Configure GPIO pins : SmartCard_3_5V_Pin OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = SmartCard_3_5V_Pin|OTG_FS_PowerSwitchOn_Pin;
 8000c34:	f248 0320 	movw	r3, #32800	; 0x8020
 8000c38:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c3a:	2301      	movs	r3, #1
 8000c3c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c42:	2300      	movs	r3, #0
 8000c44:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000c46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c4a:	4619      	mov	r1, r3
 8000c4c:	481e      	ldr	r0, [pc, #120]	; (8000cc8 <MX_GPIO_Init+0x2ec>)
 8000c4e:	f002 f8ab 	bl	8002da8 <HAL_GPIO_Init>

  /*Configure GPIO pin : MII_RX_ER_Pin */
  GPIO_InitStruct.Pin = MII_RX_ER_Pin;
 8000c52:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c56:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c58:	2302      	movs	r3, #2
 8000c5a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c60:	2300      	movs	r3, #0
 8000c62:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c64:	230b      	movs	r3, #11
 8000c66:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(MII_RX_ER_GPIO_Port, &GPIO_InitStruct);
 8000c68:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c6c:	4619      	mov	r1, r3
 8000c6e:	4815      	ldr	r0, [pc, #84]	; (8000cc4 <MX_GPIO_Init+0x2e8>)
 8000c70:	f002 f89a 	bl	8002da8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_DIR_Pin;
 8000c74:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000c78:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c7a:	2302      	movs	r3, #2
 8000c7c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c82:	2303      	movs	r3, #3
 8000c84:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000c86:	230a      	movs	r3, #10
 8000c88:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ULPI_DIR_GPIO_Port, &GPIO_InitStruct);
 8000c8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c8e:	4619      	mov	r1, r3
 8000c90:	480c      	ldr	r0, [pc, #48]	; (8000cc4 <MX_GPIO_Init+0x2e8>)
 8000c92:	f002 f889 	bl	8002da8 <HAL_GPIO_Init>

  /*Configure GPIO pin : MicroSDCard_Detect_Pin */
  GPIO_InitStruct.Pin = MicroSDCard_Detect_Pin;
 8000c96:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c9a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ca0:	2301      	movs	r3, #1
 8000ca2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(MicroSDCard_Detect_GPIO_Port, &GPIO_InitStruct);
 8000ca4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ca8:	4619      	mov	r1, r3
 8000caa:	4807      	ldr	r0, [pc, #28]	; (8000cc8 <MX_GPIO_Init+0x2ec>)
 8000cac:	f002 f87c 	bl	8002da8 <HAL_GPIO_Init>

  /*Configure GPIO pins : MII_CRS_Pin MII_COL_Pin MII_RXD2_Pin MII_RXD3_Pin */
  GPIO_InitStruct.Pin = MII_CRS_Pin|MII_COL_Pin|MII_RXD2_Pin|MII_RXD3_Pin;
 8000cb0:	23cc      	movs	r3, #204	; 0xcc
 8000cb2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cb4:	2302      	movs	r3, #2
 8000cb6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	e00f      	b.n	8000cdc <MX_GPIO_Init+0x300>
 8000cbc:	40023800 	.word	0x40023800
 8000cc0:	40021800 	.word	0x40021800
 8000cc4:	40022000 	.word	0x40022000
 8000cc8:	40021c00 	.word	0x40021c00
 8000ccc:	40020800 	.word	0x40020800
 8000cd0:	40021400 	.word	0x40021400
 8000cd4:	40020400 	.word	0x40020400
 8000cd8:	40020c00 	.word	0x40020c00
 8000cdc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ce2:	230b      	movs	r3, #11
 8000ce4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000ce6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cea:	4619      	mov	r1, r3
 8000cec:	486c      	ldr	r0, [pc, #432]	; (8000ea0 <MX_GPIO_Init+0x4c4>)
 8000cee:	f002 f85b 	bl	8002da8 <HAL_GPIO_Init>

  /*Configure GPIO pin : MCO_Pin */
  GPIO_InitStruct.Pin = MCO_Pin;
 8000cf2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000cf6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cf8:	2302      	movs	r3, #2
 8000cfa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d00:	2300      	movs	r3, #0
 8000d02:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8000d04:	2300      	movs	r3, #0
 8000d06:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(MCO_GPIO_Port, &GPIO_InitStruct);
 8000d08:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d0c:	4619      	mov	r1, r3
 8000d0e:	4865      	ldr	r0, [pc, #404]	; (8000ea4 <MX_GPIO_Init+0x4c8>)
 8000d10:	f002 f84a 	bl	8002da8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED4_Pin */
  GPIO_InitStruct.Pin = LED4_Pin;
 8000d14:	2380      	movs	r3, #128	; 0x80
 8000d16:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d18:	2301      	movs	r3, #1
 8000d1a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d20:	2300      	movs	r3, #0
 8000d22:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LED4_GPIO_Port, &GPIO_InitStruct);
 8000d24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d28:	4619      	mov	r1, r3
 8000d2a:	485f      	ldr	r0, [pc, #380]	; (8000ea8 <MX_GPIO_Init+0x4cc>)
 8000d2c:	f002 f83c 	bl	8002da8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8000d30:	2310      	movs	r3, #16
 8000d32:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d34:	2302      	movs	r3, #2
 8000d36:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d3c:	2303      	movs	r3, #3
 8000d3e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000d40:	230a      	movs	r3, #10
 8000d42:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8000d44:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d48:	4619      	mov	r1, r3
 8000d4a:	4855      	ldr	r0, [pc, #340]	; (8000ea0 <MX_GPIO_Init+0x4c4>)
 8000d4c:	f002 f82c 	bl	8002da8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SmartCard_CLK_Pin */
  GPIO_InitStruct.Pin = SmartCard_CLK_Pin;
 8000d50:	2380      	movs	r3, #128	; 0x80
 8000d52:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d54:	2302      	movs	r3, #2
 8000d56:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8000d60:	2308      	movs	r3, #8
 8000d62:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(SmartCard_CLK_GPIO_Port, &GPIO_InitStruct);
 8000d64:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d68:	4619      	mov	r1, r3
 8000d6a:	4850      	ldr	r0, [pc, #320]	; (8000eac <MX_GPIO_Init+0x4d0>)
 8000d6c:	f002 f81c 	bl	8002da8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SmartCard_RST_Pin */
  GPIO_InitStruct.Pin = SmartCard_RST_Pin;
 8000d70:	2380      	movs	r3, #128	; 0x80
 8000d72:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d74:	2301      	movs	r3, #1
 8000d76:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(SmartCard_RST_GPIO_Port, &GPIO_InitStruct);
 8000d80:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d84:	4619      	mov	r1, r3
 8000d86:	484a      	ldr	r0, [pc, #296]	; (8000eb0 <MX_GPIO_Init+0x4d4>)
 8000d88:	f002 f80e 	bl	8002da8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SmartCard_OFF_Pin */
  GPIO_InitStruct.Pin = SmartCard_OFF_Pin;
 8000d8c:	2340      	movs	r3, #64	; 0x40
 8000d8e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d90:	2300      	movs	r3, #0
 8000d92:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d94:	2300      	movs	r3, #0
 8000d96:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(SmartCard_OFF_GPIO_Port, &GPIO_InitStruct);
 8000d98:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d9c:	4619      	mov	r1, r3
 8000d9e:	4844      	ldr	r0, [pc, #272]	; (8000eb0 <MX_GPIO_Init+0x4d4>)
 8000da0:	f002 f802 	bl	8002da8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_STP_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin;
 8000da4:	2301      	movs	r3, #1
 8000da6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000da8:	2302      	movs	r3, #2
 8000daa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dac:	2300      	movs	r3, #0
 8000dae:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000db0:	2303      	movs	r3, #3
 8000db2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000db4:	230a      	movs	r3, #10
 8000db6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ULPI_STP_GPIO_Port, &GPIO_InitStruct);
 8000db8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dbc:	4619      	mov	r1, r3
 8000dbe:	483a      	ldr	r0, [pc, #232]	; (8000ea8 <MX_GPIO_Init+0x4cc>)
 8000dc0:	f001 fff2 	bl	8002da8 <HAL_GPIO_Init>

  /*Configure GPIO pins : MII_MDC_Pin MII_TXD2_Pin MII_TX_CLK_Pin MII_RXD0_Pin
                           MII_RXD1_Pin */
  GPIO_InitStruct.Pin = MII_MDC_Pin|MII_TXD2_Pin|MII_TX_CLK_Pin|MII_RXD0_Pin
 8000dc4:	233e      	movs	r3, #62	; 0x3e
 8000dc6:	627b      	str	r3, [r7, #36]	; 0x24
                          |MII_RXD1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dc8:	2302      	movs	r3, #2
 8000dca:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000dd4:	230b      	movs	r3, #11
 8000dd6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dd8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ddc:	4619      	mov	r1, r3
 8000dde:	4832      	ldr	r0, [pc, #200]	; (8000ea8 <MX_GPIO_Init+0x4cc>)
 8000de0:	f001 ffe2 	bl	8002da8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SW1_Pin */
  GPIO_InitStruct.Pin = SW1_Pin;
 8000de4:	2304      	movs	r3, #4
 8000de6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000de8:	2300      	movs	r3, #0
 8000dea:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dec:	2300      	movs	r3, #0
 8000dee:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(SW1_GPIO_Port, &GPIO_InitStruct);
 8000df0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000df4:	4619      	mov	r1, r3
 8000df6:	482f      	ldr	r0, [pc, #188]	; (8000eb4 <MX_GPIO_Init+0x4d8>)
 8000df8:	f001 ffd6 	bl	8002da8 <HAL_GPIO_Init>

  /*Configure GPIO pins : MII_RX_CLK_RMII_REF_CLK_Pin MII_MDIO_Pin MII_RX_DV_RMII_CRSDV_Pin */
  GPIO_InitStruct.Pin = MII_RX_CLK_RMII_REF_CLK_Pin|MII_MDIO_Pin|MII_RX_DV_RMII_CRSDV_Pin;
 8000dfc:	2386      	movs	r3, #134	; 0x86
 8000dfe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e00:	2302      	movs	r3, #2
 8000e02:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e04:	2300      	movs	r3, #0
 8000e06:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e0c:	230b      	movs	r3, #11
 8000e0e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e10:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e14:	4619      	mov	r1, r3
 8000e16:	4823      	ldr	r0, [pc, #140]	; (8000ea4 <MX_GPIO_Init+0x4c8>)
 8000e18:	f001 ffc6 	bl	8002da8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 8000e1c:	2328      	movs	r3, #40	; 0x28
 8000e1e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e20:	2302      	movs	r3, #2
 8000e22:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e24:	2300      	movs	r3, #0
 8000e26:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e28:	2303      	movs	r3, #3
 8000e2a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000e2c:	230a      	movs	r3, #10
 8000e2e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e34:	4619      	mov	r1, r3
 8000e36:	481b      	ldr	r0, [pc, #108]	; (8000ea4 <MX_GPIO_Init+0x4c8>)
 8000e38:	f001 ffb6 	bl	8002da8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D5_Pin ULPI_D6_Pin ULPI_D2_Pin ULPI_D1_Pin
                           ULPI_D3_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D5_Pin|ULPI_D6_Pin|ULPI_D2_Pin|ULPI_D1_Pin
 8000e3c:	f643 4303 	movw	r3, #15363	; 0x3c03
 8000e40:	627b      	str	r3, [r7, #36]	; 0x24
                          |ULPI_D3_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e42:	2302      	movs	r3, #2
 8000e44:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e46:	2300      	movs	r3, #0
 8000e48:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e4a:	2303      	movs	r3, #3
 8000e4c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000e4e:	230a      	movs	r3, #10
 8000e50:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e52:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e56:	4619      	mov	r1, r3
 8000e58:	4816      	ldr	r0, [pc, #88]	; (8000eb4 <MX_GPIO_Init+0x4d8>)
 8000e5a:	f001 ffa5 	bl	8002da8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000e5e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000e62:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000e64:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000e68:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000e6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e72:	4619      	mov	r1, r3
 8000e74:	480e      	ldr	r0, [pc, #56]	; (8000eb0 <MX_GPIO_Init+0x4d4>)
 8000e76:	f001 ff97 	bl	8002da8 <HAL_GPIO_Init>

  /*Configure GPIO pin : MII_INT_Pin */
  GPIO_InitStruct.Pin = MII_INT_Pin;
 8000e7a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000e7e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000e80:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000e84:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e86:	2300      	movs	r3, #0
 8000e88:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(MII_INT_GPIO_Port, &GPIO_InitStruct);
 8000e8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e8e:	4619      	mov	r1, r3
 8000e90:	4808      	ldr	r0, [pc, #32]	; (8000eb4 <MX_GPIO_Init+0x4d8>)
 8000e92:	f001 ff89 	bl	8002da8 <HAL_GPIO_Init>

}
 8000e96:	bf00      	nop
 8000e98:	3738      	adds	r7, #56	; 0x38
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	40021c00 	.word	0x40021c00
 8000ea4:	40020000 	.word	0x40020000
 8000ea8:	40020800 	.word	0x40020800
 8000eac:	40021800 	.word	0x40021800
 8000eb0:	40021400 	.word	0x40021400
 8000eb4:	40020400 	.word	0x40020400

08000eb8 <MX_FSMC_Init>:

/* FSMC initialization function */
static void MX_FSMC_Init(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b088      	sub	sp, #32
 8000ebc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 8000ebe:	1d3b      	adds	r3, r7, #4
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	601a      	str	r2, [r3, #0]
 8000ec4:	605a      	str	r2, [r3, #4]
 8000ec6:	609a      	str	r2, [r3, #8]
 8000ec8:	60da      	str	r2, [r3, #12]
 8000eca:	611a      	str	r2, [r3, #16]
 8000ecc:	615a      	str	r2, [r3, #20]
 8000ece:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the NOR1 memory initialization sequence
  */
  hnor1.Instance = FSMC_NORSRAM_DEVICE;
 8000ed0:	4b70      	ldr	r3, [pc, #448]	; (8001094 <MX_FSMC_Init+0x1dc>)
 8000ed2:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8000ed6:	601a      	str	r2, [r3, #0]
  hnor1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8000ed8:	4b6e      	ldr	r3, [pc, #440]	; (8001094 <MX_FSMC_Init+0x1dc>)
 8000eda:	4a6f      	ldr	r2, [pc, #444]	; (8001098 <MX_FSMC_Init+0x1e0>)
 8000edc:	605a      	str	r2, [r3, #4]
  /* hnor1.Init */
  hnor1.Init.NSBank = FSMC_NORSRAM_BANK1;
 8000ede:	4b6d      	ldr	r3, [pc, #436]	; (8001094 <MX_FSMC_Init+0x1dc>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	609a      	str	r2, [r3, #8]
  hnor1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8000ee4:	4b6b      	ldr	r3, [pc, #428]	; (8001094 <MX_FSMC_Init+0x1dc>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	60da      	str	r2, [r3, #12]
  hnor1.Init.MemoryType = FSMC_MEMORY_TYPE_NOR;
 8000eea:	4b6a      	ldr	r3, [pc, #424]	; (8001094 <MX_FSMC_Init+0x1dc>)
 8000eec:	2208      	movs	r2, #8
 8000eee:	611a      	str	r2, [r3, #16]
  hnor1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8000ef0:	4b68      	ldr	r3, [pc, #416]	; (8001094 <MX_FSMC_Init+0x1dc>)
 8000ef2:	2210      	movs	r2, #16
 8000ef4:	615a      	str	r2, [r3, #20]
  hnor1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8000ef6:	4b67      	ldr	r3, [pc, #412]	; (8001094 <MX_FSMC_Init+0x1dc>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	619a      	str	r2, [r3, #24]
  hnor1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8000efc:	4b65      	ldr	r3, [pc, #404]	; (8001094 <MX_FSMC_Init+0x1dc>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	61da      	str	r2, [r3, #28]
  hnor1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 8000f02:	4b64      	ldr	r3, [pc, #400]	; (8001094 <MX_FSMC_Init+0x1dc>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	621a      	str	r2, [r3, #32]
  hnor1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8000f08:	4b62      	ldr	r3, [pc, #392]	; (8001094 <MX_FSMC_Init+0x1dc>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	625a      	str	r2, [r3, #36]	; 0x24
  hnor1.Init.WriteOperation = FSMC_WRITE_OPERATION_DISABLE;
 8000f0e:	4b61      	ldr	r3, [pc, #388]	; (8001094 <MX_FSMC_Init+0x1dc>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	629a      	str	r2, [r3, #40]	; 0x28
  hnor1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8000f14:	4b5f      	ldr	r3, [pc, #380]	; (8001094 <MX_FSMC_Init+0x1dc>)
 8000f16:	2200      	movs	r2, #0
 8000f18:	62da      	str	r2, [r3, #44]	; 0x2c
  hnor1.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 8000f1a:	4b5e      	ldr	r3, [pc, #376]	; (8001094 <MX_FSMC_Init+0x1dc>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	631a      	str	r2, [r3, #48]	; 0x30
  hnor1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8000f20:	4b5c      	ldr	r3, [pc, #368]	; (8001094 <MX_FSMC_Init+0x1dc>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	635a      	str	r2, [r3, #52]	; 0x34
  hnor1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8000f26:	4b5b      	ldr	r3, [pc, #364]	; (8001094 <MX_FSMC_Init+0x1dc>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	639a      	str	r2, [r3, #56]	; 0x38
  hnor1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 8000f2c:	4b59      	ldr	r3, [pc, #356]	; (8001094 <MX_FSMC_Init+0x1dc>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 15;
 8000f32:	230f      	movs	r3, #15
 8000f34:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 8000f36:	230f      	movs	r3, #15
 8000f38:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 255;
 8000f3a:	23ff      	movs	r3, #255	; 0xff
 8000f3c:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 8000f3e:	230f      	movs	r3, #15
 8000f40:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8000f42:	2310      	movs	r3, #16
 8000f44:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 8000f46:	2311      	movs	r3, #17
 8000f48:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_NOR_Init(&hnor1, &Timing, NULL) != HAL_OK)
 8000f4e:	1d3b      	adds	r3, r7, #4
 8000f50:	2200      	movs	r2, #0
 8000f52:	4619      	mov	r1, r3
 8000f54:	484f      	ldr	r0, [pc, #316]	; (8001094 <MX_FSMC_Init+0x1dc>)
 8000f56:	f002 fa39 	bl	80033cc <HAL_NOR_Init>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d001      	beq.n	8000f64 <MX_FSMC_Init+0xac>
  {
    Error_Handler( );
 8000f60:	f000 f8a0 	bl	80010a4 <Error_Handler>
  }

  /** Perform the SRAM2 memory initialization sequence
  */
  hsram2.Instance = FSMC_NORSRAM_DEVICE;
 8000f64:	4b4d      	ldr	r3, [pc, #308]	; (800109c <MX_FSMC_Init+0x1e4>)
 8000f66:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8000f6a:	601a      	str	r2, [r3, #0]
  hsram2.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8000f6c:	4b4b      	ldr	r3, [pc, #300]	; (800109c <MX_FSMC_Init+0x1e4>)
 8000f6e:	4a4a      	ldr	r2, [pc, #296]	; (8001098 <MX_FSMC_Init+0x1e0>)
 8000f70:	605a      	str	r2, [r3, #4]
  /* hsram2.Init */
  hsram2.Init.NSBank = FSMC_NORSRAM_BANK2;
 8000f72:	4b4a      	ldr	r3, [pc, #296]	; (800109c <MX_FSMC_Init+0x1e4>)
 8000f74:	2202      	movs	r2, #2
 8000f76:	609a      	str	r2, [r3, #8]
  hsram2.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8000f78:	4b48      	ldr	r3, [pc, #288]	; (800109c <MX_FSMC_Init+0x1e4>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	60da      	str	r2, [r3, #12]
  hsram2.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8000f7e:	4b47      	ldr	r3, [pc, #284]	; (800109c <MX_FSMC_Init+0x1e4>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	611a      	str	r2, [r3, #16]
  hsram2.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8000f84:	4b45      	ldr	r3, [pc, #276]	; (800109c <MX_FSMC_Init+0x1e4>)
 8000f86:	2210      	movs	r2, #16
 8000f88:	615a      	str	r2, [r3, #20]
  hsram2.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8000f8a:	4b44      	ldr	r3, [pc, #272]	; (800109c <MX_FSMC_Init+0x1e4>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	619a      	str	r2, [r3, #24]
  hsram2.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8000f90:	4b42      	ldr	r3, [pc, #264]	; (800109c <MX_FSMC_Init+0x1e4>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	61da      	str	r2, [r3, #28]
  hsram2.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 8000f96:	4b41      	ldr	r3, [pc, #260]	; (800109c <MX_FSMC_Init+0x1e4>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	621a      	str	r2, [r3, #32]
  hsram2.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8000f9c:	4b3f      	ldr	r3, [pc, #252]	; (800109c <MX_FSMC_Init+0x1e4>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	625a      	str	r2, [r3, #36]	; 0x24
  hsram2.Init.WriteOperation = FSMC_WRITE_OPERATION_DISABLE;
 8000fa2:	4b3e      	ldr	r3, [pc, #248]	; (800109c <MX_FSMC_Init+0x1e4>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	629a      	str	r2, [r3, #40]	; 0x28
  hsram2.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8000fa8:	4b3c      	ldr	r3, [pc, #240]	; (800109c <MX_FSMC_Init+0x1e4>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram2.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 8000fae:	4b3b      	ldr	r3, [pc, #236]	; (800109c <MX_FSMC_Init+0x1e4>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	631a      	str	r2, [r3, #48]	; 0x30
  hsram2.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8000fb4:	4b39      	ldr	r3, [pc, #228]	; (800109c <MX_FSMC_Init+0x1e4>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	635a      	str	r2, [r3, #52]	; 0x34
  hsram2.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8000fba:	4b38      	ldr	r3, [pc, #224]	; (800109c <MX_FSMC_Init+0x1e4>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	639a      	str	r2, [r3, #56]	; 0x38
  hsram2.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 8000fc0:	4b36      	ldr	r3, [pc, #216]	; (800109c <MX_FSMC_Init+0x1e4>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 15;
 8000fc6:	230f      	movs	r3, #15
 8000fc8:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 8000fca:	230f      	movs	r3, #15
 8000fcc:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 255;
 8000fce:	23ff      	movs	r3, #255	; 0xff
 8000fd0:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 8000fd2:	230f      	movs	r3, #15
 8000fd4:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8000fd6:	2310      	movs	r3, #16
 8000fd8:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 8000fda:	2311      	movs	r3, #17
 8000fdc:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram2, &Timing, NULL) != HAL_OK)
 8000fe2:	1d3b      	adds	r3, r7, #4
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	4619      	mov	r1, r3
 8000fe8:	482c      	ldr	r0, [pc, #176]	; (800109c <MX_FSMC_Init+0x1e4>)
 8000fea:	f004 fa21 	bl	8005430 <HAL_SRAM_Init>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d001      	beq.n	8000ff8 <MX_FSMC_Init+0x140>
  {
    Error_Handler( );
 8000ff4:	f000 f856 	bl	80010a4 <Error_Handler>
  }

  /** Perform the SRAM3 memory initialization sequence
  */
  hsram3.Instance = FSMC_NORSRAM_DEVICE;
 8000ff8:	4b29      	ldr	r3, [pc, #164]	; (80010a0 <MX_FSMC_Init+0x1e8>)
 8000ffa:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8000ffe:	601a      	str	r2, [r3, #0]
  hsram3.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8001000:	4b27      	ldr	r3, [pc, #156]	; (80010a0 <MX_FSMC_Init+0x1e8>)
 8001002:	4a25      	ldr	r2, [pc, #148]	; (8001098 <MX_FSMC_Init+0x1e0>)
 8001004:	605a      	str	r2, [r3, #4]
  /* hsram3.Init */
  hsram3.Init.NSBank = FSMC_NORSRAM_BANK3;
 8001006:	4b26      	ldr	r3, [pc, #152]	; (80010a0 <MX_FSMC_Init+0x1e8>)
 8001008:	2204      	movs	r2, #4
 800100a:	609a      	str	r2, [r3, #8]
  hsram3.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 800100c:	4b24      	ldr	r3, [pc, #144]	; (80010a0 <MX_FSMC_Init+0x1e8>)
 800100e:	2200      	movs	r2, #0
 8001010:	60da      	str	r2, [r3, #12]
  hsram3.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8001012:	4b23      	ldr	r3, [pc, #140]	; (80010a0 <MX_FSMC_Init+0x1e8>)
 8001014:	2200      	movs	r2, #0
 8001016:	611a      	str	r2, [r3, #16]
  hsram3.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8001018:	4b21      	ldr	r3, [pc, #132]	; (80010a0 <MX_FSMC_Init+0x1e8>)
 800101a:	2210      	movs	r2, #16
 800101c:	615a      	str	r2, [r3, #20]
  hsram3.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 800101e:	4b20      	ldr	r3, [pc, #128]	; (80010a0 <MX_FSMC_Init+0x1e8>)
 8001020:	2200      	movs	r2, #0
 8001022:	619a      	str	r2, [r3, #24]
  hsram3.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8001024:	4b1e      	ldr	r3, [pc, #120]	; (80010a0 <MX_FSMC_Init+0x1e8>)
 8001026:	2200      	movs	r2, #0
 8001028:	61da      	str	r2, [r3, #28]
  hsram3.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 800102a:	4b1d      	ldr	r3, [pc, #116]	; (80010a0 <MX_FSMC_Init+0x1e8>)
 800102c:	2200      	movs	r2, #0
 800102e:	621a      	str	r2, [r3, #32]
  hsram3.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8001030:	4b1b      	ldr	r3, [pc, #108]	; (80010a0 <MX_FSMC_Init+0x1e8>)
 8001032:	2200      	movs	r2, #0
 8001034:	625a      	str	r2, [r3, #36]	; 0x24
  hsram3.Init.WriteOperation = FSMC_WRITE_OPERATION_DISABLE;
 8001036:	4b1a      	ldr	r3, [pc, #104]	; (80010a0 <MX_FSMC_Init+0x1e8>)
 8001038:	2200      	movs	r2, #0
 800103a:	629a      	str	r2, [r3, #40]	; 0x28
  hsram3.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 800103c:	4b18      	ldr	r3, [pc, #96]	; (80010a0 <MX_FSMC_Init+0x1e8>)
 800103e:	2200      	movs	r2, #0
 8001040:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram3.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 8001042:	4b17      	ldr	r3, [pc, #92]	; (80010a0 <MX_FSMC_Init+0x1e8>)
 8001044:	2200      	movs	r2, #0
 8001046:	631a      	str	r2, [r3, #48]	; 0x30
  hsram3.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8001048:	4b15      	ldr	r3, [pc, #84]	; (80010a0 <MX_FSMC_Init+0x1e8>)
 800104a:	2200      	movs	r2, #0
 800104c:	635a      	str	r2, [r3, #52]	; 0x34
  hsram3.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 800104e:	4b14      	ldr	r3, [pc, #80]	; (80010a0 <MX_FSMC_Init+0x1e8>)
 8001050:	2200      	movs	r2, #0
 8001052:	639a      	str	r2, [r3, #56]	; 0x38
  hsram3.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 8001054:	4b12      	ldr	r3, [pc, #72]	; (80010a0 <MX_FSMC_Init+0x1e8>)
 8001056:	2200      	movs	r2, #0
 8001058:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 15;
 800105a:	230f      	movs	r3, #15
 800105c:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 800105e:	230f      	movs	r3, #15
 8001060:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 255;
 8001062:	23ff      	movs	r3, #255	; 0xff
 8001064:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 8001066:	230f      	movs	r3, #15
 8001068:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 800106a:	2310      	movs	r3, #16
 800106c:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 800106e:	2311      	movs	r3, #17
 8001070:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8001072:	2300      	movs	r3, #0
 8001074:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram3, &Timing, NULL) != HAL_OK)
 8001076:	1d3b      	adds	r3, r7, #4
 8001078:	2200      	movs	r2, #0
 800107a:	4619      	mov	r1, r3
 800107c:	4808      	ldr	r0, [pc, #32]	; (80010a0 <MX_FSMC_Init+0x1e8>)
 800107e:	f004 f9d7 	bl	8005430 <HAL_SRAM_Init>
 8001082:	4603      	mov	r3, r0
 8001084:	2b00      	cmp	r3, #0
 8001086:	d001      	beq.n	800108c <MX_FSMC_Init+0x1d4>
  {
    Error_Handler( );
 8001088:	f000 f80c 	bl	80010a4 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 800108c:	bf00      	nop
 800108e:	3720      	adds	r7, #32
 8001090:	46bd      	mov	sp, r7
 8001092:	bd80      	pop	{r7, pc}
 8001094:	20000304 	.word	0x20000304
 8001098:	a0000104 	.word	0xa0000104
 800109c:	20000354 	.word	0x20000354
 80010a0:	200003a4 	.word	0x200003a4

080010a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010a4:	b480      	push	{r7}
 80010a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010a8:	b672      	cpsid	i
}
 80010aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010ac:	e7fe      	b.n	80010ac <Error_Handler+0x8>
	...

080010b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b082      	sub	sp, #8
 80010b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010b6:	2300      	movs	r3, #0
 80010b8:	607b      	str	r3, [r7, #4]
 80010ba:	4b10      	ldr	r3, [pc, #64]	; (80010fc <HAL_MspInit+0x4c>)
 80010bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010be:	4a0f      	ldr	r2, [pc, #60]	; (80010fc <HAL_MspInit+0x4c>)
 80010c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010c4:	6453      	str	r3, [r2, #68]	; 0x44
 80010c6:	4b0d      	ldr	r3, [pc, #52]	; (80010fc <HAL_MspInit+0x4c>)
 80010c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010ce:	607b      	str	r3, [r7, #4]
 80010d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010d2:	2300      	movs	r3, #0
 80010d4:	603b      	str	r3, [r7, #0]
 80010d6:	4b09      	ldr	r3, [pc, #36]	; (80010fc <HAL_MspInit+0x4c>)
 80010d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010da:	4a08      	ldr	r2, [pc, #32]	; (80010fc <HAL_MspInit+0x4c>)
 80010dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010e0:	6413      	str	r3, [r2, #64]	; 0x40
 80010e2:	4b06      	ldr	r3, [pc, #24]	; (80010fc <HAL_MspInit+0x4c>)
 80010e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010ea:	603b      	str	r3, [r7, #0]
 80010ec:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80010ee:	2007      	movs	r0, #7
 80010f0:	f001 fd3a 	bl	8002b68 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010f4:	bf00      	nop
 80010f6:	3708      	adds	r7, #8
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}
 80010fc:	40023800 	.word	0x40023800

08001100 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b08a      	sub	sp, #40	; 0x28
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001108:	f107 0314 	add.w	r3, r7, #20
 800110c:	2200      	movs	r2, #0
 800110e:	601a      	str	r2, [r3, #0]
 8001110:	605a      	str	r2, [r3, #4]
 8001112:	609a      	str	r2, [r3, #8]
 8001114:	60da      	str	r2, [r3, #12]
 8001116:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC3)
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	4a17      	ldr	r2, [pc, #92]	; (800117c <HAL_ADC_MspInit+0x7c>)
 800111e:	4293      	cmp	r3, r2
 8001120:	d128      	bne.n	8001174 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001122:	2300      	movs	r3, #0
 8001124:	613b      	str	r3, [r7, #16]
 8001126:	4b16      	ldr	r3, [pc, #88]	; (8001180 <HAL_ADC_MspInit+0x80>)
 8001128:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800112a:	4a15      	ldr	r2, [pc, #84]	; (8001180 <HAL_ADC_MspInit+0x80>)
 800112c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001130:	6453      	str	r3, [r2, #68]	; 0x44
 8001132:	4b13      	ldr	r3, [pc, #76]	; (8001180 <HAL_ADC_MspInit+0x80>)
 8001134:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001136:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800113a:	613b      	str	r3, [r7, #16]
 800113c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800113e:	2300      	movs	r3, #0
 8001140:	60fb      	str	r3, [r7, #12]
 8001142:	4b0f      	ldr	r3, [pc, #60]	; (8001180 <HAL_ADC_MspInit+0x80>)
 8001144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001146:	4a0e      	ldr	r2, [pc, #56]	; (8001180 <HAL_ADC_MspInit+0x80>)
 8001148:	f043 0320 	orr.w	r3, r3, #32
 800114c:	6313      	str	r3, [r2, #48]	; 0x30
 800114e:	4b0c      	ldr	r3, [pc, #48]	; (8001180 <HAL_ADC_MspInit+0x80>)
 8001150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001152:	f003 0320 	and.w	r3, r3, #32
 8001156:	60fb      	str	r3, [r7, #12]
 8001158:	68fb      	ldr	r3, [r7, #12]
    /**ADC3 GPIO Configuration
    PF10     ------> ADC3_IN8
    PF9     ------> ADC3_IN7
    */
    GPIO_InitStruct.Pin = Audio_IN_Pin|Potentiometer_Pin;
 800115a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800115e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001160:	2303      	movs	r3, #3
 8001162:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001164:	2300      	movs	r3, #0
 8001166:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001168:	f107 0314 	add.w	r3, r7, #20
 800116c:	4619      	mov	r1, r3
 800116e:	4805      	ldr	r0, [pc, #20]	; (8001184 <HAL_ADC_MspInit+0x84>)
 8001170:	f001 fe1a 	bl	8002da8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8001174:	bf00      	nop
 8001176:	3728      	adds	r7, #40	; 0x28
 8001178:	46bd      	mov	sp, r7
 800117a:	bd80      	pop	{r7, pc}
 800117c:	40012200 	.word	0x40012200
 8001180:	40023800 	.word	0x40023800
 8001184:	40021400 	.word	0x40021400

08001188 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b08a      	sub	sp, #40	; 0x28
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001190:	f107 0314 	add.w	r3, r7, #20
 8001194:	2200      	movs	r2, #0
 8001196:	601a      	str	r2, [r3, #0]
 8001198:	605a      	str	r2, [r3, #4]
 800119a:	609a      	str	r2, [r3, #8]
 800119c:	60da      	str	r2, [r3, #12]
 800119e:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	4a17      	ldr	r2, [pc, #92]	; (8001204 <HAL_DAC_MspInit+0x7c>)
 80011a6:	4293      	cmp	r3, r2
 80011a8:	d127      	bne.n	80011fa <HAL_DAC_MspInit+0x72>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 80011aa:	2300      	movs	r3, #0
 80011ac:	613b      	str	r3, [r7, #16]
 80011ae:	4b16      	ldr	r3, [pc, #88]	; (8001208 <HAL_DAC_MspInit+0x80>)
 80011b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011b2:	4a15      	ldr	r2, [pc, #84]	; (8001208 <HAL_DAC_MspInit+0x80>)
 80011b4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80011b8:	6413      	str	r3, [r2, #64]	; 0x40
 80011ba:	4b13      	ldr	r3, [pc, #76]	; (8001208 <HAL_DAC_MspInit+0x80>)
 80011bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011be:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80011c2:	613b      	str	r3, [r7, #16]
 80011c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011c6:	2300      	movs	r3, #0
 80011c8:	60fb      	str	r3, [r7, #12]
 80011ca:	4b0f      	ldr	r3, [pc, #60]	; (8001208 <HAL_DAC_MspInit+0x80>)
 80011cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ce:	4a0e      	ldr	r2, [pc, #56]	; (8001208 <HAL_DAC_MspInit+0x80>)
 80011d0:	f043 0301 	orr.w	r3, r3, #1
 80011d4:	6313      	str	r3, [r2, #48]	; 0x30
 80011d6:	4b0c      	ldr	r3, [pc, #48]	; (8001208 <HAL_DAC_MspInit+0x80>)
 80011d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011da:	f003 0301 	and.w	r3, r3, #1
 80011de:	60fb      	str	r3, [r7, #12]
 80011e0:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = Audio_DAC_OUT_Pin;
 80011e2:	2310      	movs	r3, #16
 80011e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011e6:	2303      	movs	r3, #3
 80011e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ea:	2300      	movs	r3, #0
 80011ec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Audio_DAC_OUT_GPIO_Port, &GPIO_InitStruct);
 80011ee:	f107 0314 	add.w	r3, r7, #20
 80011f2:	4619      	mov	r1, r3
 80011f4:	4805      	ldr	r0, [pc, #20]	; (800120c <HAL_DAC_MspInit+0x84>)
 80011f6:	f001 fdd7 	bl	8002da8 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 80011fa:	bf00      	nop
 80011fc:	3728      	adds	r7, #40	; 0x28
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	40007400 	.word	0x40007400
 8001208:	40023800 	.word	0x40023800
 800120c:	40020000 	.word	0x40020000

08001210 <HAL_DCMI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdcmi: DCMI handle pointer
* @retval None
*/
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b08c      	sub	sp, #48	; 0x30
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001218:	f107 031c 	add.w	r3, r7, #28
 800121c:	2200      	movs	r2, #0
 800121e:	601a      	str	r2, [r3, #0]
 8001220:	605a      	str	r2, [r3, #4]
 8001222:	609a      	str	r2, [r3, #8]
 8001224:	60da      	str	r2, [r3, #12]
 8001226:	611a      	str	r2, [r3, #16]
  if(hdcmi->Instance==DCMI)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	4a37      	ldr	r2, [pc, #220]	; (800130c <HAL_DCMI_MspInit+0xfc>)
 800122e:	4293      	cmp	r3, r2
 8001230:	d168      	bne.n	8001304 <HAL_DCMI_MspInit+0xf4>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 8001232:	2300      	movs	r3, #0
 8001234:	61bb      	str	r3, [r7, #24]
 8001236:	4b36      	ldr	r3, [pc, #216]	; (8001310 <HAL_DCMI_MspInit+0x100>)
 8001238:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800123a:	4a35      	ldr	r2, [pc, #212]	; (8001310 <HAL_DCMI_MspInit+0x100>)
 800123c:	f043 0301 	orr.w	r3, r3, #1
 8001240:	6353      	str	r3, [r2, #52]	; 0x34
 8001242:	4b33      	ldr	r3, [pc, #204]	; (8001310 <HAL_DCMI_MspInit+0x100>)
 8001244:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001246:	f003 0301 	and.w	r3, r3, #1
 800124a:	61bb      	str	r3, [r7, #24]
 800124c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOI_CLK_ENABLE();
 800124e:	2300      	movs	r3, #0
 8001250:	617b      	str	r3, [r7, #20]
 8001252:	4b2f      	ldr	r3, [pc, #188]	; (8001310 <HAL_DCMI_MspInit+0x100>)
 8001254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001256:	4a2e      	ldr	r2, [pc, #184]	; (8001310 <HAL_DCMI_MspInit+0x100>)
 8001258:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800125c:	6313      	str	r3, [r2, #48]	; 0x30
 800125e:	4b2c      	ldr	r3, [pc, #176]	; (8001310 <HAL_DCMI_MspInit+0x100>)
 8001260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001262:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001266:	617b      	str	r3, [r7, #20]
 8001268:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800126a:	2300      	movs	r3, #0
 800126c:	613b      	str	r3, [r7, #16]
 800126e:	4b28      	ldr	r3, [pc, #160]	; (8001310 <HAL_DCMI_MspInit+0x100>)
 8001270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001272:	4a27      	ldr	r2, [pc, #156]	; (8001310 <HAL_DCMI_MspInit+0x100>)
 8001274:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001278:	6313      	str	r3, [r2, #48]	; 0x30
 800127a:	4b25      	ldr	r3, [pc, #148]	; (8001310 <HAL_DCMI_MspInit+0x100>)
 800127c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800127e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001282:	613b      	str	r3, [r7, #16]
 8001284:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001286:	2300      	movs	r3, #0
 8001288:	60fb      	str	r3, [r7, #12]
 800128a:	4b21      	ldr	r3, [pc, #132]	; (8001310 <HAL_DCMI_MspInit+0x100>)
 800128c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800128e:	4a20      	ldr	r2, [pc, #128]	; (8001310 <HAL_DCMI_MspInit+0x100>)
 8001290:	f043 0301 	orr.w	r3, r3, #1
 8001294:	6313      	str	r3, [r2, #48]	; 0x30
 8001296:	4b1e      	ldr	r3, [pc, #120]	; (8001310 <HAL_DCMI_MspInit+0x100>)
 8001298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800129a:	f003 0301 	and.w	r3, r3, #1
 800129e:	60fb      	str	r3, [r7, #12]
 80012a0:	68fb      	ldr	r3, [r7, #12]
    PH10     ------> DCMI_D1
    PH8     ------> DCMI_HSYNC
    PH9     ------> DCMI_D0
    PA6     ------> DCMI_PIXCLK
    */
    GPIO_InitStruct.Pin = DCMI_D7_Pin|DCMI_D6_Pin|DCMI_VSYNC_Pin|DCMI_D5_Pin;
 80012a2:	23f0      	movs	r3, #240	; 0xf0
 80012a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012a6:	2302      	movs	r3, #2
 80012a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012aa:	2300      	movs	r3, #0
 80012ac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ae:	2300      	movs	r3, #0
 80012b0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80012b2:	230d      	movs	r3, #13
 80012b4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80012b6:	f107 031c 	add.w	r3, r7, #28
 80012ba:	4619      	mov	r1, r3
 80012bc:	4815      	ldr	r0, [pc, #84]	; (8001314 <HAL_DCMI_MspInit+0x104>)
 80012be:	f001 fd73 	bl	8002da8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D2_Pin|DCMI_D1_Pin
 80012c2:	f44f 43be 	mov.w	r3, #24320	; 0x5f00
 80012c6:	61fb      	str	r3, [r7, #28]
                          |DCMI_HSYNC_Pin|DCMI_D0_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012c8:	2302      	movs	r3, #2
 80012ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012cc:	2300      	movs	r3, #0
 80012ce:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012d0:	2300      	movs	r3, #0
 80012d2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80012d4:	230d      	movs	r3, #13
 80012d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80012d8:	f107 031c 	add.w	r3, r7, #28
 80012dc:	4619      	mov	r1, r3
 80012de:	480e      	ldr	r0, [pc, #56]	; (8001318 <HAL_DCMI_MspInit+0x108>)
 80012e0:	f001 fd62 	bl	8002da8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_PIXCK_Pin;
 80012e4:	2340      	movs	r3, #64	; 0x40
 80012e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012e8:	2302      	movs	r3, #2
 80012ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ec:	2300      	movs	r3, #0
 80012ee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012f0:	2300      	movs	r3, #0
 80012f2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80012f4:	230d      	movs	r3, #13
 80012f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DCMI_PIXCK_GPIO_Port, &GPIO_InitStruct);
 80012f8:	f107 031c 	add.w	r3, r7, #28
 80012fc:	4619      	mov	r1, r3
 80012fe:	4807      	ldr	r0, [pc, #28]	; (800131c <HAL_DCMI_MspInit+0x10c>)
 8001300:	f001 fd52 	bl	8002da8 <HAL_GPIO_Init>
  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }

}
 8001304:	bf00      	nop
 8001306:	3730      	adds	r7, #48	; 0x30
 8001308:	46bd      	mov	sp, r7
 800130a:	bd80      	pop	{r7, pc}
 800130c:	50050000 	.word	0x50050000
 8001310:	40023800 	.word	0x40023800
 8001314:	40022000 	.word	0x40022000
 8001318:	40021c00 	.word	0x40021c00
 800131c:	40020000 	.word	0x40020000

08001320 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b08a      	sub	sp, #40	; 0x28
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001328:	f107 0314 	add.w	r3, r7, #20
 800132c:	2200      	movs	r2, #0
 800132e:	601a      	str	r2, [r3, #0]
 8001330:	605a      	str	r2, [r3, #4]
 8001332:	609a      	str	r2, [r3, #8]
 8001334:	60da      	str	r2, [r3, #12]
 8001336:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	4a19      	ldr	r2, [pc, #100]	; (80013a4 <HAL_I2C_MspInit+0x84>)
 800133e:	4293      	cmp	r3, r2
 8001340:	d12c      	bne.n	800139c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001342:	2300      	movs	r3, #0
 8001344:	613b      	str	r3, [r7, #16]
 8001346:	4b18      	ldr	r3, [pc, #96]	; (80013a8 <HAL_I2C_MspInit+0x88>)
 8001348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800134a:	4a17      	ldr	r2, [pc, #92]	; (80013a8 <HAL_I2C_MspInit+0x88>)
 800134c:	f043 0302 	orr.w	r3, r3, #2
 8001350:	6313      	str	r3, [r2, #48]	; 0x30
 8001352:	4b15      	ldr	r3, [pc, #84]	; (80013a8 <HAL_I2C_MspInit+0x88>)
 8001354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001356:	f003 0302 	and.w	r3, r3, #2
 800135a:	613b      	str	r3, [r7, #16]
 800135c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800135e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001362:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001364:	2312      	movs	r3, #18
 8001366:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001368:	2300      	movs	r3, #0
 800136a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800136c:	2303      	movs	r3, #3
 800136e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001370:	2304      	movs	r3, #4
 8001372:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001374:	f107 0314 	add.w	r3, r7, #20
 8001378:	4619      	mov	r1, r3
 800137a:	480c      	ldr	r0, [pc, #48]	; (80013ac <HAL_I2C_MspInit+0x8c>)
 800137c:	f001 fd14 	bl	8002da8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001380:	2300      	movs	r3, #0
 8001382:	60fb      	str	r3, [r7, #12]
 8001384:	4b08      	ldr	r3, [pc, #32]	; (80013a8 <HAL_I2C_MspInit+0x88>)
 8001386:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001388:	4a07      	ldr	r2, [pc, #28]	; (80013a8 <HAL_I2C_MspInit+0x88>)
 800138a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800138e:	6413      	str	r3, [r2, #64]	; 0x40
 8001390:	4b05      	ldr	r3, [pc, #20]	; (80013a8 <HAL_I2C_MspInit+0x88>)
 8001392:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001394:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001398:	60fb      	str	r3, [r7, #12]
 800139a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800139c:	bf00      	nop
 800139e:	3728      	adds	r7, #40	; 0x28
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bd80      	pop	{r7, pc}
 80013a4:	40005400 	.word	0x40005400
 80013a8:	40023800 	.word	0x40023800
 80013ac:	40020400 	.word	0x40020400

080013b0 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b08a      	sub	sp, #40	; 0x28
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013b8:	f107 0314 	add.w	r3, r7, #20
 80013bc:	2200      	movs	r2, #0
 80013be:	601a      	str	r2, [r3, #0]
 80013c0:	605a      	str	r2, [r3, #4]
 80013c2:	609a      	str	r2, [r3, #8]
 80013c4:	60da      	str	r2, [r3, #12]
 80013c6:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	4a19      	ldr	r2, [pc, #100]	; (8001434 <HAL_TIM_Encoder_MspInit+0x84>)
 80013ce:	4293      	cmp	r3, r2
 80013d0:	d12b      	bne.n	800142a <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80013d2:	2300      	movs	r3, #0
 80013d4:	613b      	str	r3, [r7, #16]
 80013d6:	4b18      	ldr	r3, [pc, #96]	; (8001438 <HAL_TIM_Encoder_MspInit+0x88>)
 80013d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013da:	4a17      	ldr	r2, [pc, #92]	; (8001438 <HAL_TIM_Encoder_MspInit+0x88>)
 80013dc:	f043 0302 	orr.w	r3, r3, #2
 80013e0:	6413      	str	r3, [r2, #64]	; 0x40
 80013e2:	4b15      	ldr	r3, [pc, #84]	; (8001438 <HAL_TIM_Encoder_MspInit+0x88>)
 80013e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013e6:	f003 0302 	and.w	r3, r3, #2
 80013ea:	613b      	str	r3, [r7, #16]
 80013ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013ee:	2300      	movs	r3, #0
 80013f0:	60fb      	str	r3, [r7, #12]
 80013f2:	4b11      	ldr	r3, [pc, #68]	; (8001438 <HAL_TIM_Encoder_MspInit+0x88>)
 80013f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013f6:	4a10      	ldr	r2, [pc, #64]	; (8001438 <HAL_TIM_Encoder_MspInit+0x88>)
 80013f8:	f043 0302 	orr.w	r3, r3, #2
 80013fc:	6313      	str	r3, [r2, #48]	; 0x30
 80013fe:	4b0e      	ldr	r3, [pc, #56]	; (8001438 <HAL_TIM_Encoder_MspInit+0x88>)
 8001400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001402:	f003 0302 	and.w	r3, r3, #2
 8001406:	60fb      	str	r3, [r7, #12]
 8001408:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PB5     ------> TIM3_CH2
    PB4     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4;
 800140a:	2330      	movs	r3, #48	; 0x30
 800140c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800140e:	2302      	movs	r3, #2
 8001410:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001412:	2300      	movs	r3, #0
 8001414:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001416:	2300      	movs	r3, #0
 8001418:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800141a:	2302      	movs	r3, #2
 800141c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800141e:	f107 0314 	add.w	r3, r7, #20
 8001422:	4619      	mov	r1, r3
 8001424:	4805      	ldr	r0, [pc, #20]	; (800143c <HAL_TIM_Encoder_MspInit+0x8c>)
 8001426:	f001 fcbf 	bl	8002da8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800142a:	bf00      	nop
 800142c:	3728      	adds	r7, #40	; 0x28
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}
 8001432:	bf00      	nop
 8001434:	40000400 	.word	0x40000400
 8001438:	40023800 	.word	0x40023800
 800143c:	40020400 	.word	0x40020400

08001440 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b08a      	sub	sp, #40	; 0x28
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001448:	f107 0314 	add.w	r3, r7, #20
 800144c:	2200      	movs	r2, #0
 800144e:	601a      	str	r2, [r3, #0]
 8001450:	605a      	str	r2, [r3, #4]
 8001452:	609a      	str	r2, [r3, #8]
 8001454:	60da      	str	r2, [r3, #12]
 8001456:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	4a19      	ldr	r2, [pc, #100]	; (80014c4 <HAL_UART_MspInit+0x84>)
 800145e:	4293      	cmp	r3, r2
 8001460:	d12c      	bne.n	80014bc <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001462:	2300      	movs	r3, #0
 8001464:	613b      	str	r3, [r7, #16]
 8001466:	4b18      	ldr	r3, [pc, #96]	; (80014c8 <HAL_UART_MspInit+0x88>)
 8001468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800146a:	4a17      	ldr	r2, [pc, #92]	; (80014c8 <HAL_UART_MspInit+0x88>)
 800146c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001470:	6413      	str	r3, [r2, #64]	; 0x40
 8001472:	4b15      	ldr	r3, [pc, #84]	; (80014c8 <HAL_UART_MspInit+0x88>)
 8001474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001476:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800147a:	613b      	str	r3, [r7, #16]
 800147c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800147e:	2300      	movs	r3, #0
 8001480:	60fb      	str	r3, [r7, #12]
 8001482:	4b11      	ldr	r3, [pc, #68]	; (80014c8 <HAL_UART_MspInit+0x88>)
 8001484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001486:	4a10      	ldr	r2, [pc, #64]	; (80014c8 <HAL_UART_MspInit+0x88>)
 8001488:	f043 0304 	orr.w	r3, r3, #4
 800148c:	6313      	str	r3, [r2, #48]	; 0x30
 800148e:	4b0e      	ldr	r3, [pc, #56]	; (80014c8 <HAL_UART_MspInit+0x88>)
 8001490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001492:	f003 0304 	and.w	r3, r3, #4
 8001496:	60fb      	str	r3, [r7, #12]
 8001498:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PC11     ------> USART3_RX
    PC10     ------> USART3_TX
    */
    GPIO_InitStruct.Pin = MicroSDCard_D3_Pin|MicroSDCard_D2_Pin;
 800149a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800149e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014a0:	2302      	movs	r3, #2
 80014a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a4:	2300      	movs	r3, #0
 80014a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014a8:	2300      	movs	r3, #0
 80014aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80014ac:	2307      	movs	r3, #7
 80014ae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014b0:	f107 0314 	add.w	r3, r7, #20
 80014b4:	4619      	mov	r1, r3
 80014b6:	4805      	ldr	r0, [pc, #20]	; (80014cc <HAL_UART_MspInit+0x8c>)
 80014b8:	f001 fc76 	bl	8002da8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80014bc:	bf00      	nop
 80014be:	3728      	adds	r7, #40	; 0x28
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bd80      	pop	{r7, pc}
 80014c4:	40004800 	.word	0x40004800
 80014c8:	40023800 	.word	0x40023800
 80014cc:	40020800 	.word	0x40020800

080014d0 <HAL_FSMC_MspInit>:

}

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b086      	sub	sp, #24
 80014d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80014d6:	1d3b      	adds	r3, r7, #4
 80014d8:	2200      	movs	r2, #0
 80014da:	601a      	str	r2, [r3, #0]
 80014dc:	605a      	str	r2, [r3, #4]
 80014de:	609a      	str	r2, [r3, #8]
 80014e0:	60da      	str	r2, [r3, #12]
 80014e2:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 80014e4:	4b34      	ldr	r3, [pc, #208]	; (80015b8 <HAL_FSMC_MspInit+0xe8>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d160      	bne.n	80015ae <HAL_FSMC_MspInit+0xde>
    return;
  }
  FSMC_Initialized = 1;
 80014ec:	4b32      	ldr	r3, [pc, #200]	; (80015b8 <HAL_FSMC_MspInit+0xe8>)
 80014ee:	2201      	movs	r2, #1
 80014f0:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 80014f2:	2300      	movs	r3, #0
 80014f4:	603b      	str	r3, [r7, #0]
 80014f6:	4b31      	ldr	r3, [pc, #196]	; (80015bc <HAL_FSMC_MspInit+0xec>)
 80014f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014fa:	4a30      	ldr	r2, [pc, #192]	; (80015bc <HAL_FSMC_MspInit+0xec>)
 80014fc:	f043 0301 	orr.w	r3, r3, #1
 8001500:	6393      	str	r3, [r2, #56]	; 0x38
 8001502:	4b2e      	ldr	r3, [pc, #184]	; (80015bc <HAL_FSMC_MspInit+0xec>)
 8001504:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001506:	f003 0301 	and.w	r3, r3, #1
 800150a:	603b      	str	r3, [r7, #0]
 800150c:	683b      	ldr	r3, [r7, #0]
  PE7   ------> FSMC_D4
  PE10   ------> FSMC_D7
  PE12   ------> FSMC_D9
  PE15   ------> FSMC_D12
  */
  GPIO_InitStruct.Pin = A19_Pin|FSMC_NBL1_Pin|FSMC_NBL0_Pin|A20_Pin
 800150e:	f64f 739b 	movw	r3, #65435	; 0xff9b
 8001512:	607b      	str	r3, [r7, #4]
                          |D10_Pin|D5_Pin|D6_Pin|D8_Pin
                          |D11_Pin|D4_Pin|D7_Pin|D9_Pin
                          |D12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001514:	2302      	movs	r3, #2
 8001516:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001518:	2300      	movs	r3, #0
 800151a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800151c:	2303      	movs	r3, #3
 800151e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8001520:	230c      	movs	r3, #12
 8001522:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001524:	1d3b      	adds	r3, r7, #4
 8001526:	4619      	mov	r1, r3
 8001528:	4825      	ldr	r0, [pc, #148]	; (80015c0 <HAL_FSMC_MspInit+0xf0>)
 800152a:	f001 fc3d 	bl	8002da8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FSMC_NE1_Pin|FSMC_NWAIT_Pin|D2_Pin|FSMC_NWE_Pin
 800152e:	f64f 73fb 	movw	r3, #65531	; 0xfffb
 8001532:	607b      	str	r3, [r7, #4]
                          |D3_Pin|FSMC_NOE_Pin|FSMC_CLK_Pin|D1_Pin
                          |D0_Pin|A18_Pin|A17_Pin|A16_Pin
                          |D15_Pin|D14_Pin|D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001534:	2302      	movs	r3, #2
 8001536:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001538:	2300      	movs	r3, #0
 800153a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800153c:	2303      	movs	r3, #3
 800153e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8001540:	230c      	movs	r3, #12
 8001542:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001544:	1d3b      	adds	r3, r7, #4
 8001546:	4619      	mov	r1, r3
 8001548:	481e      	ldr	r0, [pc, #120]	; (80015c4 <HAL_FSMC_MspInit+0xf4>)
 800154a:	f001 fc2d 	bl	8002da8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FSMC_NL_Pin;
 800154e:	2380      	movs	r3, #128	; 0x80
 8001550:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001552:	2302      	movs	r3, #2
 8001554:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001556:	2300      	movs	r3, #0
 8001558:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800155a:	2303      	movs	r3, #3
 800155c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 800155e:	230c      	movs	r3, #12
 8001560:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(FSMC_NL_GPIO_Port, &GPIO_InitStruct);
 8001562:	1d3b      	adds	r3, r7, #4
 8001564:	4619      	mov	r1, r3
 8001566:	4818      	ldr	r0, [pc, #96]	; (80015c8 <HAL_FSMC_MspInit+0xf8>)
 8001568:	f001 fc1e 	bl	8002da8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FSMC_NE3_Pin|FSMC_NE2_Pin|A15_Pin|A14_Pin
 800156c:	f240 633f 	movw	r3, #1599	; 0x63f
 8001570:	607b      	str	r3, [r7, #4]
                          |A13_Pin|A12_Pin|A11_Pin|A10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001572:	2302      	movs	r3, #2
 8001574:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001576:	2300      	movs	r3, #0
 8001578:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800157a:	2303      	movs	r3, #3
 800157c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 800157e:	230c      	movs	r3, #12
 8001580:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001582:	1d3b      	adds	r3, r7, #4
 8001584:	4619      	mov	r1, r3
 8001586:	4811      	ldr	r0, [pc, #68]	; (80015cc <HAL_FSMC_MspInit+0xfc>)
 8001588:	f001 fc0e 	bl	8002da8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = A0_Pin|A2_Pin|A1_Pin|A3_Pin
 800158c:	f24f 033f 	movw	r3, #61503	; 0xf03f
 8001590:	607b      	str	r3, [r7, #4]
                          |A4_Pin|A5_Pin|A7_Pin|A6_Pin
                          |A9_Pin|A8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001592:	2302      	movs	r3, #2
 8001594:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001596:	2300      	movs	r3, #0
 8001598:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800159a:	2303      	movs	r3, #3
 800159c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 800159e:	230c      	movs	r3, #12
 80015a0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80015a2:	1d3b      	adds	r3, r7, #4
 80015a4:	4619      	mov	r1, r3
 80015a6:	480a      	ldr	r0, [pc, #40]	; (80015d0 <HAL_FSMC_MspInit+0x100>)
 80015a8:	f001 fbfe 	bl	8002da8 <HAL_GPIO_Init>
 80015ac:	e000      	b.n	80015b0 <HAL_FSMC_MspInit+0xe0>
    return;
 80015ae:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 80015b0:	3718      	adds	r7, #24
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd80      	pop	{r7, pc}
 80015b6:	bf00      	nop
 80015b8:	200003fc 	.word	0x200003fc
 80015bc:	40023800 	.word	0x40023800
 80015c0:	40021000 	.word	0x40021000
 80015c4:	40020c00 	.word	0x40020c00
 80015c8:	40020400 	.word	0x40020400
 80015cc:	40021800 	.word	0x40021800
 80015d0:	40021400 	.word	0x40021400

080015d4 <HAL_NOR_MspInit>:

void HAL_NOR_MspInit(NOR_HandleTypeDef* hnor){
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b082      	sub	sp, #8
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN NOR_MspInit 0 */

  /* USER CODE END NOR_MspInit 0 */
  HAL_FSMC_MspInit();
 80015dc:	f7ff ff78 	bl	80014d0 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN NOR_MspInit 1 */

  /* USER CODE END NOR_MspInit 1 */
}
 80015e0:	bf00      	nop
 80015e2:	3708      	adds	r7, #8
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bd80      	pop	{r7, pc}

080015e8 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b082      	sub	sp, #8
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 80015f0:	f7ff ff6e 	bl	80014d0 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 80015f4:	bf00      	nop
 80015f6:	3708      	adds	r7, #8
 80015f8:	46bd      	mov	sp, r7
 80015fa:	bd80      	pop	{r7, pc}

080015fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015fc:	b480      	push	{r7}
 80015fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001600:	e7fe      	b.n	8001600 <NMI_Handler+0x4>

08001602 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001602:	b480      	push	{r7}
 8001604:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001606:	e7fe      	b.n	8001606 <HardFault_Handler+0x4>

08001608 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001608:	b480      	push	{r7}
 800160a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800160c:	e7fe      	b.n	800160c <MemManage_Handler+0x4>

0800160e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800160e:	b480      	push	{r7}
 8001610:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001612:	e7fe      	b.n	8001612 <BusFault_Handler+0x4>

08001614 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001614:	b480      	push	{r7}
 8001616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001618:	e7fe      	b.n	8001618 <UsageFault_Handler+0x4>

0800161a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800161a:	b480      	push	{r7}
 800161c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800161e:	bf00      	nop
 8001620:	46bd      	mov	sp, r7
 8001622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001626:	4770      	bx	lr

08001628 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001628:	b480      	push	{r7}
 800162a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800162c:	bf00      	nop
 800162e:	46bd      	mov	sp, r7
 8001630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001634:	4770      	bx	lr

08001636 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001636:	b480      	push	{r7}
 8001638:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800163a:	bf00      	nop
 800163c:	46bd      	mov	sp, r7
 800163e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001642:	4770      	bx	lr

08001644 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001648:	f000 ff18 	bl	800247c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800164c:	bf00      	nop
 800164e:	bd80      	pop	{r7, pc}

08001650 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001654:	4802      	ldr	r0, [pc, #8]	; (8001660 <OTG_FS_IRQHandler+0x10>)
 8001656:	f002 f915 	bl	8003884 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800165a:	bf00      	nop
 800165c:	bd80      	pop	{r7, pc}
 800165e:	bf00      	nop
 8001660:	20000b7c 	.word	0x20000b7c

08001664 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001664:	b480      	push	{r7}
 8001666:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001668:	4b06      	ldr	r3, [pc, #24]	; (8001684 <SystemInit+0x20>)
 800166a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800166e:	4a05      	ldr	r2, [pc, #20]	; (8001684 <SystemInit+0x20>)
 8001670:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001674:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001678:	bf00      	nop
 800167a:	46bd      	mov	sp, r7
 800167c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001680:	4770      	bx	lr
 8001682:	bf00      	nop
 8001684:	e000ed00 	.word	0xe000ed00

08001688 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001688:	f8df d034 	ldr.w	sp, [pc, #52]	; 80016c0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800168c:	480d      	ldr	r0, [pc, #52]	; (80016c4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800168e:	490e      	ldr	r1, [pc, #56]	; (80016c8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001690:	4a0e      	ldr	r2, [pc, #56]	; (80016cc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001692:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001694:	e002      	b.n	800169c <LoopCopyDataInit>

08001696 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001696:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001698:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800169a:	3304      	adds	r3, #4

0800169c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800169c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800169e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016a0:	d3f9      	bcc.n	8001696 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016a2:	4a0b      	ldr	r2, [pc, #44]	; (80016d0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80016a4:	4c0b      	ldr	r4, [pc, #44]	; (80016d4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80016a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016a8:	e001      	b.n	80016ae <LoopFillZerobss>

080016aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016ac:	3204      	adds	r2, #4

080016ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016b0:	d3fb      	bcc.n	80016aa <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80016b2:	f7ff ffd7 	bl	8001664 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80016b6:	f008 fb0d 	bl	8009cd4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80016ba:	f7fe ff07 	bl	80004cc <main>
  bx  lr    
 80016be:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80016c0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80016c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016c8:	2000016c 	.word	0x2000016c
  ldr r2, =_sidata
 80016cc:	0800b884 	.word	0x0800b884
  ldr r2, =_sbss
 80016d0:	2000016c 	.word	0x2000016c
  ldr r4, =_ebss
 80016d4:	2000109c 	.word	0x2000109c

080016d8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80016d8:	e7fe      	b.n	80016d8 <ADC_IRQHandler>

080016da <ili9325_Init>:
  * @brief  Initialize the ILI9325 LCD Component.
  * @param  None
  * @retval None
  */
void ili9325_Init(void)
{  
 80016da:	b580      	push	{r7, lr}
 80016dc:	af00      	add	r7, sp, #0
  /* Initialize ILI9325 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 80016de:	f000 fd2b 	bl	8002138 <LCD_IO_Init>
  
  /* Start Initial Sequence --------------------------------------------------*/
  ili9325_WriteReg(LCD_REG_0, 0x0001); /* Start internal OSC. */
 80016e2:	2101      	movs	r1, #1
 80016e4:	2000      	movs	r0, #0
 80016e6:	f000 f9a1 	bl	8001a2c <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_1, 0x0100); /* Set SS and SM bit */
 80016ea:	f44f 7180 	mov.w	r1, #256	; 0x100
 80016ee:	2001      	movs	r0, #1
 80016f0:	f000 f99c 	bl	8001a2c <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_2, 0x0700); /* Set 1 line inversion */
 80016f4:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 80016f8:	2002      	movs	r0, #2
 80016fa:	f000 f997 	bl	8001a2c <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_3, 0x1018); /* Set GRAM write direction and BGR=1. */
 80016fe:	f241 0118 	movw	r1, #4120	; 0x1018
 8001702:	2003      	movs	r0, #3
 8001704:	f000 f992 	bl	8001a2c <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_4, 0x0000); /* Resize register */
 8001708:	2100      	movs	r1, #0
 800170a:	2004      	movs	r0, #4
 800170c:	f000 f98e 	bl	8001a2c <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_8, 0x0202); /* Set the back porch and front porch */
 8001710:	f240 2102 	movw	r1, #514	; 0x202
 8001714:	2008      	movs	r0, #8
 8001716:	f000 f989 	bl	8001a2c <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_9, 0x0000); /* Set non-display area refresh cycle ISC[3:0] */
 800171a:	2100      	movs	r1, #0
 800171c:	2009      	movs	r0, #9
 800171e:	f000 f985 	bl	8001a2c <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_10, 0x0000); /* FMARK function */
 8001722:	2100      	movs	r1, #0
 8001724:	200a      	movs	r0, #10
 8001726:	f000 f981 	bl	8001a2c <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_12, 0x0000); /* RGB interface setting */
 800172a:	2100      	movs	r1, #0
 800172c:	200c      	movs	r0, #12
 800172e:	f000 f97d 	bl	8001a2c <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_13, 0x0000); /* Frame marker Position */
 8001732:	2100      	movs	r1, #0
 8001734:	200d      	movs	r0, #13
 8001736:	f000 f979 	bl	8001a2c <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_15, 0x0000); /* RGB interface polarity */
 800173a:	2100      	movs	r1, #0
 800173c:	200f      	movs	r0, #15
 800173e:	f000 f975 	bl	8001a2c <ili9325_WriteReg>
  
  /* Power On sequence -------------------------------------------------------*/
  ili9325_WriteReg(LCD_REG_16, 0x0000); /* SAP, BT[3:0], AP, DSTB, SLP, STB */
 8001742:	2100      	movs	r1, #0
 8001744:	2010      	movs	r0, #16
 8001746:	f000 f971 	bl	8001a2c <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_17, 0x0000); /* DC1[2:0], DC0[2:0], VC[2:0] */
 800174a:	2100      	movs	r1, #0
 800174c:	2011      	movs	r0, #17
 800174e:	f000 f96d 	bl	8001a2c <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_18, 0x0000); /* VREG1OUT voltage */
 8001752:	2100      	movs	r1, #0
 8001754:	2012      	movs	r0, #18
 8001756:	f000 f969 	bl	8001a2c <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_19, 0x0000); /* VDV[4:0] for VCOM amplitude */
 800175a:	2100      	movs	r1, #0
 800175c:	2013      	movs	r0, #19
 800175e:	f000 f965 	bl	8001a2c <ili9325_WriteReg>
  
  ili9325_WriteReg(LCD_REG_16, 0x17B0); /* SAP, BT[3:0], AP, DSTB, SLP, STB */
 8001762:	f241 71b0 	movw	r1, #6064	; 0x17b0
 8001766:	2010      	movs	r0, #16
 8001768:	f000 f960 	bl	8001a2c <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_17, 0x0137); /* DC1[2:0], DC0[2:0], VC[2:0] */
 800176c:	f240 1137 	movw	r1, #311	; 0x137
 8001770:	2011      	movs	r0, #17
 8001772:	f000 f95b 	bl	8001a2c <ili9325_WriteReg>
  
  ili9325_WriteReg(LCD_REG_18, 0x0139); /* VREG1OUT voltage */
 8001776:	f240 1139 	movw	r1, #313	; 0x139
 800177a:	2012      	movs	r0, #18
 800177c:	f000 f956 	bl	8001a2c <ili9325_WriteReg>
  
  ili9325_WriteReg(LCD_REG_19, 0x1d00); /* VDV[4:0] for VCOM amplitude */
 8001780:	f44f 51e8 	mov.w	r1, #7424	; 0x1d00
 8001784:	2013      	movs	r0, #19
 8001786:	f000 f951 	bl	8001a2c <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_41, 0x0013); /* VCM[4:0] for VCOMH */
 800178a:	2113      	movs	r1, #19
 800178c:	2029      	movs	r0, #41	; 0x29
 800178e:	f000 f94d 	bl	8001a2c <ili9325_WriteReg>
  
  ili9325_WriteReg(LCD_REG_32, 0x0000); /* GRAM horizontal Address */
 8001792:	2100      	movs	r1, #0
 8001794:	2020      	movs	r0, #32
 8001796:	f000 f949 	bl	8001a2c <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_33, 0x0000); /* GRAM Vertical Address */
 800179a:	2100      	movs	r1, #0
 800179c:	2021      	movs	r0, #33	; 0x21
 800179e:	f000 f945 	bl	8001a2c <ili9325_WriteReg>
  
  /* Adjust the Gamma Curve (ILI9325) ----------------------------------------*/
  ili9325_WriteReg(LCD_REG_48, 0x0007);
 80017a2:	2107      	movs	r1, #7
 80017a4:	2030      	movs	r0, #48	; 0x30
 80017a6:	f000 f941 	bl	8001a2c <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_49, 0x0302);
 80017aa:	f240 3102 	movw	r1, #770	; 0x302
 80017ae:	2031      	movs	r0, #49	; 0x31
 80017b0:	f000 f93c 	bl	8001a2c <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_50, 0x0105);
 80017b4:	f240 1105 	movw	r1, #261	; 0x105
 80017b8:	2032      	movs	r0, #50	; 0x32
 80017ba:	f000 f937 	bl	8001a2c <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_53, 0x0206);
 80017be:	f240 2106 	movw	r1, #518	; 0x206
 80017c2:	2035      	movs	r0, #53	; 0x35
 80017c4:	f000 f932 	bl	8001a2c <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_54, 0x0808);
 80017c8:	f640 0108 	movw	r1, #2056	; 0x808
 80017cc:	2036      	movs	r0, #54	; 0x36
 80017ce:	f000 f92d 	bl	8001a2c <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_55, 0x0206);
 80017d2:	f240 2106 	movw	r1, #518	; 0x206
 80017d6:	2037      	movs	r0, #55	; 0x37
 80017d8:	f000 f928 	bl	8001a2c <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_56, 0x0504);
 80017dc:	f240 5104 	movw	r1, #1284	; 0x504
 80017e0:	2038      	movs	r0, #56	; 0x38
 80017e2:	f000 f923 	bl	8001a2c <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_57, 0x0007);
 80017e6:	2107      	movs	r1, #7
 80017e8:	2039      	movs	r0, #57	; 0x39
 80017ea:	f000 f91f 	bl	8001a2c <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_60, 0x0105);
 80017ee:	f240 1105 	movw	r1, #261	; 0x105
 80017f2:	203c      	movs	r0, #60	; 0x3c
 80017f4:	f000 f91a 	bl	8001a2c <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_61, 0x0808);
 80017f8:	f640 0108 	movw	r1, #2056	; 0x808
 80017fc:	203d      	movs	r0, #61	; 0x3d
 80017fe:	f000 f915 	bl	8001a2c <ili9325_WriteReg>
  
  /* Set GRAM area -----------------------------------------------------------*/
  ili9325_WriteReg(LCD_REG_80, 0x0000); /* Horizontal GRAM Start Address */
 8001802:	2100      	movs	r1, #0
 8001804:	2050      	movs	r0, #80	; 0x50
 8001806:	f000 f911 	bl	8001a2c <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_81, 0x00EF); /* Horizontal GRAM End Address */
 800180a:	21ef      	movs	r1, #239	; 0xef
 800180c:	2051      	movs	r0, #81	; 0x51
 800180e:	f000 f90d 	bl	8001a2c <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_82, 0x0000); /* Vertical GRAM Start Address */
 8001812:	2100      	movs	r1, #0
 8001814:	2052      	movs	r0, #82	; 0x52
 8001816:	f000 f909 	bl	8001a2c <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_83, 0x013F); /* Vertical GRAM End Address */
 800181a:	f240 113f 	movw	r1, #319	; 0x13f
 800181e:	2053      	movs	r0, #83	; 0x53
 8001820:	f000 f904 	bl	8001a2c <ili9325_WriteReg>
  
  ili9325_WriteReg(LCD_REG_96,  0xA700); /* Gate Scan Line(GS=1, scan direction is G320~G1) */
 8001824:	f44f 4127 	mov.w	r1, #42752	; 0xa700
 8001828:	2060      	movs	r0, #96	; 0x60
 800182a:	f000 f8ff 	bl	8001a2c <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_97,  0x0001); /* NDL,VLE, REV */
 800182e:	2101      	movs	r1, #1
 8001830:	2061      	movs	r0, #97	; 0x61
 8001832:	f000 f8fb 	bl	8001a2c <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_106, 0x0000); /* set scrolling line */
 8001836:	2100      	movs	r1, #0
 8001838:	206a      	movs	r0, #106	; 0x6a
 800183a:	f000 f8f7 	bl	8001a2c <ili9325_WriteReg>
  
  /* Partial Display Control -------------------------------------------------*/
  ili9325_WriteReg(LCD_REG_128, 0x0000);
 800183e:	2100      	movs	r1, #0
 8001840:	2080      	movs	r0, #128	; 0x80
 8001842:	f000 f8f3 	bl	8001a2c <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_129, 0x0000);
 8001846:	2100      	movs	r1, #0
 8001848:	2081      	movs	r0, #129	; 0x81
 800184a:	f000 f8ef 	bl	8001a2c <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_130, 0x0000);
 800184e:	2100      	movs	r1, #0
 8001850:	2082      	movs	r0, #130	; 0x82
 8001852:	f000 f8eb 	bl	8001a2c <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_131, 0x0000);
 8001856:	2100      	movs	r1, #0
 8001858:	2083      	movs	r0, #131	; 0x83
 800185a:	f000 f8e7 	bl	8001a2c <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_132, 0x0000);
 800185e:	2100      	movs	r1, #0
 8001860:	2084      	movs	r0, #132	; 0x84
 8001862:	f000 f8e3 	bl	8001a2c <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_133, 0x0000);
 8001866:	2100      	movs	r1, #0
 8001868:	2085      	movs	r0, #133	; 0x85
 800186a:	f000 f8df 	bl	8001a2c <ili9325_WriteReg>
  
  /* Panel Control -----------------------------------------------------------*/
  ili9325_WriteReg(LCD_REG_144, 0x0010);
 800186e:	2110      	movs	r1, #16
 8001870:	2090      	movs	r0, #144	; 0x90
 8001872:	f000 f8db 	bl	8001a2c <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_146, 0x0000);
 8001876:	2100      	movs	r1, #0
 8001878:	2092      	movs	r0, #146	; 0x92
 800187a:	f000 f8d7 	bl	8001a2c <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_147, 0x0003);
 800187e:	2103      	movs	r1, #3
 8001880:	2093      	movs	r0, #147	; 0x93
 8001882:	f000 f8d3 	bl	8001a2c <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_149, 0x0110);
 8001886:	f44f 7188 	mov.w	r1, #272	; 0x110
 800188a:	2095      	movs	r0, #149	; 0x95
 800188c:	f000 f8ce 	bl	8001a2c <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_151, 0x0000);
 8001890:	2100      	movs	r1, #0
 8001892:	2097      	movs	r0, #151	; 0x97
 8001894:	f000 f8ca 	bl	8001a2c <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_152, 0x0000);
 8001898:	2100      	movs	r1, #0
 800189a:	2098      	movs	r0, #152	; 0x98
 800189c:	f000 f8c6 	bl	8001a2c <ili9325_WriteReg>
  
  /* set GRAM write direction and BGR = 1 */
  /* I/D=00 (Horizontal : increment, Vertical : decrement) */
  /* AM=1 (address is updated in vertical writing direction) */
  ili9325_WriteReg(LCD_REG_3, 0x1018);
 80018a0:	f241 0118 	movw	r1, #4120	; 0x1018
 80018a4:	2003      	movs	r0, #3
 80018a6:	f000 f8c1 	bl	8001a2c <ili9325_WriteReg>
  
  /* 262K color and display ON */ 
  ili9325_WriteReg(LCD_REG_7, 0x0173);    
 80018aa:	f240 1173 	movw	r1, #371	; 0x173
 80018ae:	2007      	movs	r0, #7
 80018b0:	f000 f8bc 	bl	8001a2c <ili9325_WriteReg>
  
  /* Set the Cursor */ 
  ili9325_SetCursor(0, 0);
 80018b4:	2100      	movs	r1, #0
 80018b6:	2000      	movs	r0, #0
 80018b8:	f000 f86d 	bl	8001996 <ili9325_SetCursor>
  
  /* Prepare to write GRAM */
  LCD_IO_WriteReg(LCD_REG_34);
 80018bc:	2022      	movs	r0, #34	; 0x22
 80018be:	f000 fc69 	bl	8002194 <LCD_IO_WriteReg>
}
 80018c2:	bf00      	nop
 80018c4:	bd80      	pop	{r7, pc}

080018c6 <ili9325_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ili9325_DisplayOn(void)
{
 80018c6:	b580      	push	{r7, lr}
 80018c8:	af00      	add	r7, sp, #0
  /* Power On sequence -------------------------------------------------------*/
  ili9325_WriteReg(LCD_REG_16, 0x0000); /* SAP, BT[3:0], AP, DSTB, SLP, STB */
 80018ca:	2100      	movs	r1, #0
 80018cc:	2010      	movs	r0, #16
 80018ce:	f000 f8ad 	bl	8001a2c <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_17, 0x0000); /* DC1[2:0], DC0[2:0], VC[2:0] */
 80018d2:	2100      	movs	r1, #0
 80018d4:	2011      	movs	r0, #17
 80018d6:	f000 f8a9 	bl	8001a2c <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_18, 0x0000); /* VREG1OUT voltage */
 80018da:	2100      	movs	r1, #0
 80018dc:	2012      	movs	r0, #18
 80018de:	f000 f8a5 	bl	8001a2c <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_19, 0x0000); /* VDV[4:0] for VCOM amplitude*/
 80018e2:	2100      	movs	r1, #0
 80018e4:	2013      	movs	r0, #19
 80018e6:	f000 f8a1 	bl	8001a2c <ili9325_WriteReg>

  ili9325_WriteReg(LCD_REG_16, 0x17B0); /* SAP, BT[3:0], AP, DSTB, SLP, STB */
 80018ea:	f241 71b0 	movw	r1, #6064	; 0x17b0
 80018ee:	2010      	movs	r0, #16
 80018f0:	f000 f89c 	bl	8001a2c <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_17, 0x0137); /* DC1[2:0], DC0[2:0], VC[2:0] */
 80018f4:	f240 1137 	movw	r1, #311	; 0x137
 80018f8:	2011      	movs	r0, #17
 80018fa:	f000 f897 	bl	8001a2c <ili9325_WriteReg>

  ili9325_WriteReg(LCD_REG_18, 0x0139); /* VREG1OUT voltage */
 80018fe:	f240 1139 	movw	r1, #313	; 0x139
 8001902:	2012      	movs	r0, #18
 8001904:	f000 f892 	bl	8001a2c <ili9325_WriteReg>

  ili9325_WriteReg(LCD_REG_19, 0x1d00); /* VDV[4:0] for VCOM amplitude */
 8001908:	f44f 51e8 	mov.w	r1, #7424	; 0x1d00
 800190c:	2013      	movs	r0, #19
 800190e:	f000 f88d 	bl	8001a2c <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_41, 0x0013); /* VCM[4:0] for VCOMH */
 8001912:	2113      	movs	r1, #19
 8001914:	2029      	movs	r0, #41	; 0x29
 8001916:	f000 f889 	bl	8001a2c <ili9325_WriteReg>
 
  /* Display On */
  ili9325_WriteReg(LCD_REG_7, 0x0173); /* 262K color and display ON */
 800191a:	f240 1173 	movw	r1, #371	; 0x173
 800191e:	2007      	movs	r0, #7
 8001920:	f000 f884 	bl	8001a2c <ili9325_WriteReg>
}
 8001924:	bf00      	nop
 8001926:	bd80      	pop	{r7, pc}

08001928 <ili9325_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void ili9325_DisplayOff(void)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	af00      	add	r7, sp, #0
  /* Power Off sequence ------------------------------------------------------*/
  ili9325_WriteReg(LCD_REG_16, 0x0000); /* SAP, BT[3:0], AP, DSTB, SLP, STB */
 800192c:	2100      	movs	r1, #0
 800192e:	2010      	movs	r0, #16
 8001930:	f000 f87c 	bl	8001a2c <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_17, 0x0000); /* DC1[2:0], DC0[2:0], VC[2:0] */
 8001934:	2100      	movs	r1, #0
 8001936:	2011      	movs	r0, #17
 8001938:	f000 f878 	bl	8001a2c <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_18, 0x0000); /* VREG1OUT voltage */
 800193c:	2100      	movs	r1, #0
 800193e:	2012      	movs	r0, #18
 8001940:	f000 f874 	bl	8001a2c <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_19, 0x0000); /* VDV[4:0] for VCOM amplitude*/
 8001944:	2100      	movs	r1, #0
 8001946:	2013      	movs	r0, #19
 8001948:	f000 f870 	bl	8001a2c <ili9325_WriteReg>
  
  ili9325_WriteReg(LCD_REG_41, 0x0000); /* VCM[4:0] for VCOMH */
 800194c:	2100      	movs	r1, #0
 800194e:	2029      	movs	r0, #41	; 0x29
 8001950:	f000 f86c 	bl	8001a2c <ili9325_WriteReg>
  
  /* Display Off */
  ili9325_WriteReg(LCD_REG_7, 0x0); 
 8001954:	2100      	movs	r1, #0
 8001956:	2007      	movs	r0, #7
 8001958:	f000 f868 	bl	8001a2c <ili9325_WriteReg>
}
 800195c:	bf00      	nop
 800195e:	bd80      	pop	{r7, pc}

08001960 <ili9325_GetLcdPixelWidth>:
  * @brief  Get the LCD pixel Width.
  * @param  None
  * @retval The Lcd Pixel Width
  */
uint16_t ili9325_GetLcdPixelWidth(void)
{
 8001960:	b480      	push	{r7}
 8001962:	af00      	add	r7, sp, #0
 return (uint16_t)320;
 8001964:	f44f 73a0 	mov.w	r3, #320	; 0x140
}
 8001968:	4618      	mov	r0, r3
 800196a:	46bd      	mov	sp, r7
 800196c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001970:	4770      	bx	lr

08001972 <ili9325_GetLcdPixelHeight>:
  * @brief  Get the LCD pixel Height.
  * @param  None
  * @retval The Lcd Pixel Height
  */
uint16_t ili9325_GetLcdPixelHeight(void)
{
 8001972:	b480      	push	{r7}
 8001974:	af00      	add	r7, sp, #0
 return (uint16_t)240;
 8001976:	23f0      	movs	r3, #240	; 0xf0
}
 8001978:	4618      	mov	r0, r3
 800197a:	46bd      	mov	sp, r7
 800197c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001980:	4770      	bx	lr

08001982 <ili9325_ReadID>:
  * @brief  Get the ILI9325 ID.
  * @param  None
  * @retval The ILI9325 ID 
  */
uint16_t ili9325_ReadID(void)
{
 8001982:	b580      	push	{r7, lr}
 8001984:	af00      	add	r7, sp, #0
  LCD_IO_Init(); 
 8001986:	f000 fbd7 	bl	8002138 <LCD_IO_Init>
  return (ili9325_ReadReg(0x00));
 800198a:	2000      	movs	r0, #0
 800198c:	f000 f863 	bl	8001a56 <ili9325_ReadReg>
 8001990:	4603      	mov	r3, r0
}
 8001992:	4618      	mov	r0, r3
 8001994:	bd80      	pop	{r7, pc}

08001996 <ili9325_SetCursor>:
  * @param  Xpos: specifies the X position.
  * @param  Ypos: specifies the Y position.
  * @retval None
  */
void ili9325_SetCursor(uint16_t Xpos, uint16_t Ypos)
{
 8001996:	b580      	push	{r7, lr}
 8001998:	b082      	sub	sp, #8
 800199a:	af00      	add	r7, sp, #0
 800199c:	4603      	mov	r3, r0
 800199e:	460a      	mov	r2, r1
 80019a0:	80fb      	strh	r3, [r7, #6]
 80019a2:	4613      	mov	r3, r2
 80019a4:	80bb      	strh	r3, [r7, #4]
  ili9325_WriteReg(LCD_REG_32, Ypos);
 80019a6:	88bb      	ldrh	r3, [r7, #4]
 80019a8:	4619      	mov	r1, r3
 80019aa:	2020      	movs	r0, #32
 80019ac:	f000 f83e 	bl	8001a2c <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_33, (ILI9325_LCD_PIXEL_WIDTH - 1 - Xpos));      
 80019b0:	88fb      	ldrh	r3, [r7, #6]
 80019b2:	f5c3 739f 	rsb	r3, r3, #318	; 0x13e
 80019b6:	3301      	adds	r3, #1
 80019b8:	b29b      	uxth	r3, r3
 80019ba:	4619      	mov	r1, r3
 80019bc:	2021      	movs	r0, #33	; 0x21
 80019be:	f000 f835 	bl	8001a2c <ili9325_WriteReg>
}
 80019c2:	bf00      	nop
 80019c4:	3708      	adds	r7, #8
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}

080019ca <ili9325_WritePixel>:
  * @param  Ypos: specifies the Y position.
  * @param  RGBCode: the RGB pixel color
  * @retval None
  */
void ili9325_WritePixel(uint16_t Xpos, uint16_t Ypos, uint16_t RGBCode)
{
 80019ca:	b580      	push	{r7, lr}
 80019cc:	b082      	sub	sp, #8
 80019ce:	af00      	add	r7, sp, #0
 80019d0:	4603      	mov	r3, r0
 80019d2:	80fb      	strh	r3, [r7, #6]
 80019d4:	460b      	mov	r3, r1
 80019d6:	80bb      	strh	r3, [r7, #4]
 80019d8:	4613      	mov	r3, r2
 80019da:	807b      	strh	r3, [r7, #2]
  /* Set Cursor */
  ili9325_SetCursor(Xpos, Ypos);
 80019dc:	88ba      	ldrh	r2, [r7, #4]
 80019de:	88fb      	ldrh	r3, [r7, #6]
 80019e0:	4611      	mov	r1, r2
 80019e2:	4618      	mov	r0, r3
 80019e4:	f7ff ffd7 	bl	8001996 <ili9325_SetCursor>
  
  /* Prepare to write GRAM */
  LCD_IO_WriteReg(LCD_REG_34);
 80019e8:	2022      	movs	r0, #34	; 0x22
 80019ea:	f000 fbd3 	bl	8002194 <LCD_IO_WriteReg>

  /* Write 16-bit GRAM Reg */
  LCD_IO_WriteMultipleData((uint8_t*)&RGBCode, 2);
 80019ee:	1cbb      	adds	r3, r7, #2
 80019f0:	2102      	movs	r1, #2
 80019f2:	4618      	mov	r0, r3
 80019f4:	f000 fbb0 	bl	8002158 <LCD_IO_WriteMultipleData>
}
 80019f8:	bf00      	nop
 80019fa:	3708      	adds	r7, #8
 80019fc:	46bd      	mov	sp, r7
 80019fe:	bd80      	pop	{r7, pc}

08001a00 <ili9325_ReadPixel>:
  * @brief  Read pixel.
  * @param  None
  * @retval The RGB pixel color
  */
uint16_t ili9325_ReadPixel(uint16_t Xpos, uint16_t Ypos)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b082      	sub	sp, #8
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	4603      	mov	r3, r0
 8001a08:	460a      	mov	r2, r1
 8001a0a:	80fb      	strh	r3, [r7, #6]
 8001a0c:	4613      	mov	r3, r2
 8001a0e:	80bb      	strh	r3, [r7, #4]
  /* Set Cursor */
  ili9325_SetCursor(Xpos, Ypos);
 8001a10:	88ba      	ldrh	r2, [r7, #4]
 8001a12:	88fb      	ldrh	r3, [r7, #6]
 8001a14:	4611      	mov	r1, r2
 8001a16:	4618      	mov	r0, r3
 8001a18:	f7ff ffbd 	bl	8001996 <ili9325_SetCursor>
  
  /* Read 16-bit Reg */
  return (LCD_IO_ReadData(LCD_REG_34));
 8001a1c:	2022      	movs	r0, #34	; 0x22
 8001a1e:	f000 fbc6 	bl	80021ae <LCD_IO_ReadData>
 8001a22:	4603      	mov	r3, r0
}
 8001a24:	4618      	mov	r0, r3
 8001a26:	3708      	adds	r7, #8
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bd80      	pop	{r7, pc}

08001a2c <ili9325_WriteReg>:
  * @param  LCDReg: Address of the selected register.
  * @param  LCDRegValue: Value to write to the selected register.
  * @retval None
  */
void ili9325_WriteReg(uint8_t LCDReg, uint16_t LCDRegValue)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b082      	sub	sp, #8
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	4603      	mov	r3, r0
 8001a34:	460a      	mov	r2, r1
 8001a36:	71fb      	strb	r3, [r7, #7]
 8001a38:	4613      	mov	r3, r2
 8001a3a:	80bb      	strh	r3, [r7, #4]
  LCD_IO_WriteReg(LCDReg);
 8001a3c:	79fb      	ldrb	r3, [r7, #7]
 8001a3e:	4618      	mov	r0, r3
 8001a40:	f000 fba8 	bl	8002194 <LCD_IO_WriteReg>
  
  /* Write 16-bit GRAM Reg */
  LCD_IO_WriteMultipleData((uint8_t*)&LCDRegValue, 2);
 8001a44:	1d3b      	adds	r3, r7, #4
 8001a46:	2102      	movs	r1, #2
 8001a48:	4618      	mov	r0, r3
 8001a4a:	f000 fb85 	bl	8002158 <LCD_IO_WriteMultipleData>
}
 8001a4e:	bf00      	nop
 8001a50:	3708      	adds	r7, #8
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}

08001a56 <ili9325_ReadReg>:
  * @brief  Reads the selected LCD Register.
  * @param  LCDReg: address of the selected register.
  * @retval LCD Register Value.
  */
uint16_t ili9325_ReadReg(uint8_t LCDReg)
{ 
 8001a56:	b580      	push	{r7, lr}
 8001a58:	b082      	sub	sp, #8
 8001a5a:	af00      	add	r7, sp, #0
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	71fb      	strb	r3, [r7, #7]
  /* Read 16-bit Reg */
  return (LCD_IO_ReadData(LCDReg));
 8001a60:	79fb      	ldrb	r3, [r7, #7]
 8001a62:	b29b      	uxth	r3, r3
 8001a64:	4618      	mov	r0, r3
 8001a66:	f000 fba2 	bl	80021ae <LCD_IO_ReadData>
 8001a6a:	4603      	mov	r3, r0
}
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	3708      	adds	r7, #8
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bd80      	pop	{r7, pc}

08001a74 <ili9325_SetDisplayWindow>:
  * @param  Height: display window height.
  * @param  Width:  display window width.
  * @retval None
  */
void ili9325_SetDisplayWindow(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8001a74:	b590      	push	{r4, r7, lr}
 8001a76:	b083      	sub	sp, #12
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	4604      	mov	r4, r0
 8001a7c:	4608      	mov	r0, r1
 8001a7e:	4611      	mov	r1, r2
 8001a80:	461a      	mov	r2, r3
 8001a82:	4623      	mov	r3, r4
 8001a84:	80fb      	strh	r3, [r7, #6]
 8001a86:	4603      	mov	r3, r0
 8001a88:	80bb      	strh	r3, [r7, #4]
 8001a8a:	460b      	mov	r3, r1
 8001a8c:	807b      	strh	r3, [r7, #2]
 8001a8e:	4613      	mov	r3, r2
 8001a90:	803b      	strh	r3, [r7, #0]
  /* Horizontal GRAM Start Address */
  ili9325_WriteReg(LCD_REG_80, (Ypos));
 8001a92:	88bb      	ldrh	r3, [r7, #4]
 8001a94:	4619      	mov	r1, r3
 8001a96:	2050      	movs	r0, #80	; 0x50
 8001a98:	f7ff ffc8 	bl	8001a2c <ili9325_WriteReg>
  /* Horizontal GRAM End Address */
  ili9325_WriteReg(LCD_REG_81, (Ypos + Height - 1));
 8001a9c:	88ba      	ldrh	r2, [r7, #4]
 8001a9e:	883b      	ldrh	r3, [r7, #0]
 8001aa0:	4413      	add	r3, r2
 8001aa2:	b29b      	uxth	r3, r3
 8001aa4:	3b01      	subs	r3, #1
 8001aa6:	b29b      	uxth	r3, r3
 8001aa8:	4619      	mov	r1, r3
 8001aaa:	2051      	movs	r0, #81	; 0x51
 8001aac:	f7ff ffbe 	bl	8001a2c <ili9325_WriteReg>
  
  /* Vertical GRAM Start Address */
  ili9325_WriteReg(LCD_REG_82, ILI9325_LCD_PIXEL_WIDTH - Xpos - Width);
 8001ab0:	88fa      	ldrh	r2, [r7, #6]
 8001ab2:	887b      	ldrh	r3, [r7, #2]
 8001ab4:	4413      	add	r3, r2
 8001ab6:	b29b      	uxth	r3, r3
 8001ab8:	f5c3 73a0 	rsb	r3, r3, #320	; 0x140
 8001abc:	b29b      	uxth	r3, r3
 8001abe:	4619      	mov	r1, r3
 8001ac0:	2052      	movs	r0, #82	; 0x52
 8001ac2:	f7ff ffb3 	bl	8001a2c <ili9325_WriteReg>
  /* Vertical GRAM End Address */
  ili9325_WriteReg(LCD_REG_83, ILI9325_LCD_PIXEL_WIDTH - Xpos - 1);  
 8001ac6:	88fb      	ldrh	r3, [r7, #6]
 8001ac8:	f5c3 739f 	rsb	r3, r3, #318	; 0x13e
 8001acc:	3301      	adds	r3, #1
 8001ace:	b29b      	uxth	r3, r3
 8001ad0:	4619      	mov	r1, r3
 8001ad2:	2053      	movs	r0, #83	; 0x53
 8001ad4:	f7ff ffaa 	bl	8001a2c <ili9325_WriteReg>
}
 8001ad8:	bf00      	nop
 8001ada:	370c      	adds	r7, #12
 8001adc:	46bd      	mov	sp, r7
 8001ade:	bd90      	pop	{r4, r7, pc}

08001ae0 <ili9325_DrawHLine>:
  * @param  Ypos:     specifies the Y position.
  * @param  Length:   specifies the Line length.  
  * @retval None
  */
void ili9325_DrawHLine(uint16_t RGBCode, uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8001ae0:	b590      	push	{r4, r7, lr}
 8001ae2:	b085      	sub	sp, #20
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	4604      	mov	r4, r0
 8001ae8:	4608      	mov	r0, r1
 8001aea:	4611      	mov	r1, r2
 8001aec:	461a      	mov	r2, r3
 8001aee:	4623      	mov	r3, r4
 8001af0:	80fb      	strh	r3, [r7, #6]
 8001af2:	4603      	mov	r3, r0
 8001af4:	80bb      	strh	r3, [r7, #4]
 8001af6:	460b      	mov	r3, r1
 8001af8:	807b      	strh	r3, [r7, #2]
 8001afa:	4613      	mov	r3, r2
 8001afc:	803b      	strh	r3, [r7, #0]
  uint16_t counter = 0;
 8001afe:	2300      	movs	r3, #0
 8001b00:	81fb      	strh	r3, [r7, #14]
  
  /* Set Cursor */
  ili9325_SetCursor(Xpos, Ypos); 
 8001b02:	887a      	ldrh	r2, [r7, #2]
 8001b04:	88bb      	ldrh	r3, [r7, #4]
 8001b06:	4611      	mov	r1, r2
 8001b08:	4618      	mov	r0, r3
 8001b0a:	f7ff ff44 	bl	8001996 <ili9325_SetCursor>
  
  /* Prepare to write GRAM */
  LCD_IO_WriteReg(LCD_REG_34);
 8001b0e:	2022      	movs	r0, #34	; 0x22
 8001b10:	f000 fb40 	bl	8002194 <LCD_IO_WriteReg>

  /* Sent a complete line */
  for(counter = 0; counter < Length; counter++)
 8001b14:	2300      	movs	r3, #0
 8001b16:	81fb      	strh	r3, [r7, #14]
 8001b18:	e007      	b.n	8001b2a <ili9325_DrawHLine+0x4a>
  {
    ArrayRGB[counter] = RGBCode;
 8001b1a:	89fb      	ldrh	r3, [r7, #14]
 8001b1c:	490a      	ldr	r1, [pc, #40]	; (8001b48 <ili9325_DrawHLine+0x68>)
 8001b1e:	88fa      	ldrh	r2, [r7, #6]
 8001b20:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
  for(counter = 0; counter < Length; counter++)
 8001b24:	89fb      	ldrh	r3, [r7, #14]
 8001b26:	3301      	adds	r3, #1
 8001b28:	81fb      	strh	r3, [r7, #14]
 8001b2a:	89fa      	ldrh	r2, [r7, #14]
 8001b2c:	883b      	ldrh	r3, [r7, #0]
 8001b2e:	429a      	cmp	r2, r3
 8001b30:	d3f3      	bcc.n	8001b1a <ili9325_DrawHLine+0x3a>
  }  

  LCD_IO_WriteMultipleData((uint8_t*)&ArrayRGB[0], Length * 2);
 8001b32:	883b      	ldrh	r3, [r7, #0]
 8001b34:	005b      	lsls	r3, r3, #1
 8001b36:	4619      	mov	r1, r3
 8001b38:	4803      	ldr	r0, [pc, #12]	; (8001b48 <ili9325_DrawHLine+0x68>)
 8001b3a:	f000 fb0d 	bl	8002158 <LCD_IO_WriteMultipleData>
}
 8001b3e:	bf00      	nop
 8001b40:	3714      	adds	r7, #20
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd90      	pop	{r4, r7, pc}
 8001b46:	bf00      	nop
 8001b48:	20000400 	.word	0x20000400

08001b4c <ili9325_DrawVLine>:
  * @param  Ypos:     specifies the Y position.
  * @param  Length:   specifies the Line length.  
  * @retval None
  */
void ili9325_DrawVLine(uint16_t RGBCode, uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8001b4c:	b590      	push	{r4, r7, lr}
 8001b4e:	b085      	sub	sp, #20
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	4604      	mov	r4, r0
 8001b54:	4608      	mov	r0, r1
 8001b56:	4611      	mov	r1, r2
 8001b58:	461a      	mov	r2, r3
 8001b5a:	4623      	mov	r3, r4
 8001b5c:	80fb      	strh	r3, [r7, #6]
 8001b5e:	4603      	mov	r3, r0
 8001b60:	80bb      	strh	r3, [r7, #4]
 8001b62:	460b      	mov	r3, r1
 8001b64:	807b      	strh	r3, [r7, #2]
 8001b66:	4613      	mov	r3, r2
 8001b68:	803b      	strh	r3, [r7, #0]
  uint16_t counter = 0;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	81fb      	strh	r3, [r7, #14]

  /* set GRAM write direction and BGR = 1 */
  /* I/D=00 (Horizontal : increment, Vertical : decrement) */
  /* AM=1 (address is updated in vertical writing direction) */
  ili9325_WriteReg(LCD_REG_3, 0x1010);
 8001b6e:	f241 0110 	movw	r1, #4112	; 0x1010
 8001b72:	2003      	movs	r0, #3
 8001b74:	f7ff ff5a 	bl	8001a2c <ili9325_WriteReg>
  
  /* Set Cursor */
  ili9325_SetCursor(Xpos, Ypos);
 8001b78:	887a      	ldrh	r2, [r7, #2]
 8001b7a:	88bb      	ldrh	r3, [r7, #4]
 8001b7c:	4611      	mov	r1, r2
 8001b7e:	4618      	mov	r0, r3
 8001b80:	f7ff ff09 	bl	8001996 <ili9325_SetCursor>
  
  /* Prepare to write GRAM */
  LCD_IO_WriteReg(LCD_REG_34);
 8001b84:	2022      	movs	r0, #34	; 0x22
 8001b86:	f000 fb05 	bl	8002194 <LCD_IO_WriteReg>

  /* Fill a complete vertical line */
  for(counter = 0; counter < Length; counter++)
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	81fb      	strh	r3, [r7, #14]
 8001b8e:	e007      	b.n	8001ba0 <ili9325_DrawVLine+0x54>
  {
    ArrayRGB[counter] = RGBCode;
 8001b90:	89fb      	ldrh	r3, [r7, #14]
 8001b92:	490d      	ldr	r1, [pc, #52]	; (8001bc8 <ili9325_DrawVLine+0x7c>)
 8001b94:	88fa      	ldrh	r2, [r7, #6]
 8001b96:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
  for(counter = 0; counter < Length; counter++)
 8001b9a:	89fb      	ldrh	r3, [r7, #14]
 8001b9c:	3301      	adds	r3, #1
 8001b9e:	81fb      	strh	r3, [r7, #14]
 8001ba0:	89fa      	ldrh	r2, [r7, #14]
 8001ba2:	883b      	ldrh	r3, [r7, #0]
 8001ba4:	429a      	cmp	r2, r3
 8001ba6:	d3f3      	bcc.n	8001b90 <ili9325_DrawVLine+0x44>
  }
  
  /* Write 16-bit GRAM Reg */
  LCD_IO_WriteMultipleData((uint8_t*)&ArrayRGB[0], Length * 2);
 8001ba8:	883b      	ldrh	r3, [r7, #0]
 8001baa:	005b      	lsls	r3, r3, #1
 8001bac:	4619      	mov	r1, r3
 8001bae:	4806      	ldr	r0, [pc, #24]	; (8001bc8 <ili9325_DrawVLine+0x7c>)
 8001bb0:	f000 fad2 	bl	8002158 <LCD_IO_WriteMultipleData>
  
  /* set GRAM write direction and BGR = 1 */
  /* I/D=00 (Horizontal : increment, Vertical : decrement) */
  /* AM=1 (address is updated in vertical writing direction) */
  ili9325_WriteReg(LCD_REG_3, 0x1018);  
 8001bb4:	f241 0118 	movw	r1, #4120	; 0x1018
 8001bb8:	2003      	movs	r0, #3
 8001bba:	f7ff ff37 	bl	8001a2c <ili9325_WriteReg>
}
 8001bbe:	bf00      	nop
 8001bc0:	3714      	adds	r7, #20
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd90      	pop	{r4, r7, pc}
 8001bc6:	bf00      	nop
 8001bc8:	20000400 	.word	0x20000400

08001bcc <ili9325_DrawBitmap>:
  * @param  Xpos: Bmp X position in the LCD
  * @param  Ypos: Bmp Y position in the LCD    
  * @retval None
  */
void ili9325_DrawBitmap(uint16_t Xpos, uint16_t Ypos, uint8_t *pbmp)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b084      	sub	sp, #16
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	603a      	str	r2, [r7, #0]
 8001bd6:	80fb      	strh	r3, [r7, #6]
 8001bd8:	460b      	mov	r3, r1
 8001bda:	80bb      	strh	r3, [r7, #4]
  uint32_t index = 0, size = 0;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	60fb      	str	r3, [r7, #12]
 8001be0:	2300      	movs	r3, #0
 8001be2:	60bb      	str	r3, [r7, #8]
  /* Read bitmap size */
  size = *(volatile uint16_t *) (pbmp + 2);
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	3302      	adds	r3, #2
 8001be8:	881b      	ldrh	r3, [r3, #0]
 8001bea:	b29b      	uxth	r3, r3
 8001bec:	60bb      	str	r3, [r7, #8]
  size |= (*(volatile uint16_t *) (pbmp + 4)) << 16;
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	3304      	adds	r3, #4
 8001bf2:	881b      	ldrh	r3, [r3, #0]
 8001bf4:	b29b      	uxth	r3, r3
 8001bf6:	041b      	lsls	r3, r3, #16
 8001bf8:	461a      	mov	r2, r3
 8001bfa:	68bb      	ldr	r3, [r7, #8]
 8001bfc:	4313      	orrs	r3, r2
 8001bfe:	60bb      	str	r3, [r7, #8]
  /* Get bitmap data address offset */
  index = *(volatile uint16_t *) (pbmp + 10);
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	330a      	adds	r3, #10
 8001c04:	881b      	ldrh	r3, [r3, #0]
 8001c06:	b29b      	uxth	r3, r3
 8001c08:	60fb      	str	r3, [r7, #12]
  index |= (*(volatile uint16_t *) (pbmp + 12)) << 16;
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	330c      	adds	r3, #12
 8001c0e:	881b      	ldrh	r3, [r3, #0]
 8001c10:	b29b      	uxth	r3, r3
 8001c12:	041b      	lsls	r3, r3, #16
 8001c14:	461a      	mov	r2, r3
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	4313      	orrs	r3, r2
 8001c1a:	60fb      	str	r3, [r7, #12]
  size = (size - index)/2;
 8001c1c:	68ba      	ldr	r2, [r7, #8]
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	1ad3      	subs	r3, r2, r3
 8001c22:	085b      	lsrs	r3, r3, #1
 8001c24:	60bb      	str	r3, [r7, #8]
  pbmp += index;
 8001c26:	683a      	ldr	r2, [r7, #0]
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	4413      	add	r3, r2
 8001c2c:	603b      	str	r3, [r7, #0]
  /* Set GRAM write direction and BGR = 1 */
  /* I/D=00 (Horizontal : decrement, Vertical : decrement) */
  /* AM=1 (address is updated in vertical writing direction) */
  ili9325_WriteReg(LCD_REG_3, 0x1008);
 8001c2e:	f241 0108 	movw	r1, #4104	; 0x1008
 8001c32:	2003      	movs	r0, #3
 8001c34:	f7ff fefa 	bl	8001a2c <ili9325_WriteReg>

  /* Set Cursor */
  ili9325_SetCursor(Xpos, Ypos);  
 8001c38:	88ba      	ldrh	r2, [r7, #4]
 8001c3a:	88fb      	ldrh	r3, [r7, #6]
 8001c3c:	4611      	mov	r1, r2
 8001c3e:	4618      	mov	r0, r3
 8001c40:	f7ff fea9 	bl	8001996 <ili9325_SetCursor>
  
  /* Prepare to write GRAM */
  LCD_IO_WriteReg(LCD_REG_34);
 8001c44:	2022      	movs	r0, #34	; 0x22
 8001c46:	f000 faa5 	bl	8002194 <LCD_IO_WriteReg>
 
  LCD_IO_WriteMultipleData((uint8_t*)pbmp, size*2);
 8001c4a:	68bb      	ldr	r3, [r7, #8]
 8001c4c:	005b      	lsls	r3, r3, #1
 8001c4e:	4619      	mov	r1, r3
 8001c50:	6838      	ldr	r0, [r7, #0]
 8001c52:	f000 fa81 	bl	8002158 <LCD_IO_WriteMultipleData>
 
  /* Set GRAM write direction and BGR = 1 */
  /* I/D = 01 (Horizontal : increment, Vertical : decrement) */
  /* AM = 1 (address is updated in vertical writing direction) */
  ili9325_WriteReg(LCD_REG_3, 0x1018);
 8001c56:	f241 0118 	movw	r1, #4120	; 0x1018
 8001c5a:	2003      	movs	r0, #3
 8001c5c:	f7ff fee6 	bl	8001a2c <ili9325_WriteReg>
}
 8001c60:	bf00      	nop
 8001c62:	3710      	adds	r7, #16
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bd80      	pop	{r7, pc}

08001c68 <ili9325_DrawRGBImage>:
  * @param  Xsize: Image X size in the LCD
  * @param  Ysize: Image Y size in the LCD
  * @retval None
  */
void ili9325_DrawRGBImage(uint16_t Xpos, uint16_t Ypos, uint16_t Xsize, uint16_t Ysize, uint8_t *pdata)
{
 8001c68:	b590      	push	{r4, r7, lr}
 8001c6a:	b085      	sub	sp, #20
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	4604      	mov	r4, r0
 8001c70:	4608      	mov	r0, r1
 8001c72:	4611      	mov	r1, r2
 8001c74:	461a      	mov	r2, r3
 8001c76:	4623      	mov	r3, r4
 8001c78:	80fb      	strh	r3, [r7, #6]
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	80bb      	strh	r3, [r7, #4]
 8001c7e:	460b      	mov	r3, r1
 8001c80:	807b      	strh	r3, [r7, #2]
 8001c82:	4613      	mov	r3, r2
 8001c84:	803b      	strh	r3, [r7, #0]
  uint32_t size = 0;
 8001c86:	2300      	movs	r3, #0
 8001c88:	60fb      	str	r3, [r7, #12]

  size = (Xsize * Ysize);
 8001c8a:	887b      	ldrh	r3, [r7, #2]
 8001c8c:	883a      	ldrh	r2, [r7, #0]
 8001c8e:	fb02 f303 	mul.w	r3, r2, r3
 8001c92:	60fb      	str	r3, [r7, #12]

  /* Set Cursor */
  ili9325_SetCursor(Xpos, Ypos);  
 8001c94:	88ba      	ldrh	r2, [r7, #4]
 8001c96:	88fb      	ldrh	r3, [r7, #6]
 8001c98:	4611      	mov	r1, r2
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	f7ff fe7b 	bl	8001996 <ili9325_SetCursor>
  
  /* Prepare to write GRAM */
  LCD_IO_WriteReg(LCD_REG_34);
 8001ca0:	2022      	movs	r0, #34	; 0x22
 8001ca2:	f000 fa77 	bl	8002194 <LCD_IO_WriteReg>
 
  LCD_IO_WriteMultipleData((uint8_t*)pdata, size*2);
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	005b      	lsls	r3, r3, #1
 8001caa:	4619      	mov	r1, r3
 8001cac:	6a38      	ldr	r0, [r7, #32]
 8001cae:	f000 fa53 	bl	8002158 <LCD_IO_WriteMultipleData>
}
 8001cb2:	bf00      	nop
 8001cb4:	3714      	adds	r7, #20
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bd90      	pop	{r4, r7, pc}
	...

08001cbc <BSP_LED_Init>:
  *            @arg  LED2
  *            @arg  LED3
  *            @arg  LED4
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b08c      	sub	sp, #48	; 0x30
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable the GPIO_LED clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 8001cc6:	79fb      	ldrb	r3, [r7, #7]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d10e      	bne.n	8001cea <BSP_LED_Init+0x2e>
 8001ccc:	2300      	movs	r3, #0
 8001cce:	61bb      	str	r3, [r7, #24]
 8001cd0:	4b2d      	ldr	r3, [pc, #180]	; (8001d88 <BSP_LED_Init+0xcc>)
 8001cd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cd4:	4a2c      	ldr	r2, [pc, #176]	; (8001d88 <BSP_LED_Init+0xcc>)
 8001cd6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001cda:	6313      	str	r3, [r2, #48]	; 0x30
 8001cdc:	4b2a      	ldr	r3, [pc, #168]	; (8001d88 <BSP_LED_Init+0xcc>)
 8001cde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ce0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ce4:	61bb      	str	r3, [r7, #24]
 8001ce6:	69bb      	ldr	r3, [r7, #24]
 8001ce8:	e034      	b.n	8001d54 <BSP_LED_Init+0x98>
 8001cea:	79fb      	ldrb	r3, [r7, #7]
 8001cec:	2b01      	cmp	r3, #1
 8001cee:	d10e      	bne.n	8001d0e <BSP_LED_Init+0x52>
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	617b      	str	r3, [r7, #20]
 8001cf4:	4b24      	ldr	r3, [pc, #144]	; (8001d88 <BSP_LED_Init+0xcc>)
 8001cf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cf8:	4a23      	ldr	r2, [pc, #140]	; (8001d88 <BSP_LED_Init+0xcc>)
 8001cfa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001cfe:	6313      	str	r3, [r2, #48]	; 0x30
 8001d00:	4b21      	ldr	r3, [pc, #132]	; (8001d88 <BSP_LED_Init+0xcc>)
 8001d02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d08:	617b      	str	r3, [r7, #20]
 8001d0a:	697b      	ldr	r3, [r7, #20]
 8001d0c:	e022      	b.n	8001d54 <BSP_LED_Init+0x98>
 8001d0e:	79fb      	ldrb	r3, [r7, #7]
 8001d10:	2b02      	cmp	r3, #2
 8001d12:	d10e      	bne.n	8001d32 <BSP_LED_Init+0x76>
 8001d14:	2300      	movs	r3, #0
 8001d16:	613b      	str	r3, [r7, #16]
 8001d18:	4b1b      	ldr	r3, [pc, #108]	; (8001d88 <BSP_LED_Init+0xcc>)
 8001d1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d1c:	4a1a      	ldr	r2, [pc, #104]	; (8001d88 <BSP_LED_Init+0xcc>)
 8001d1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d22:	6313      	str	r3, [r2, #48]	; 0x30
 8001d24:	4b18      	ldr	r3, [pc, #96]	; (8001d88 <BSP_LED_Init+0xcc>)
 8001d26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d2c:	613b      	str	r3, [r7, #16]
 8001d2e:	693b      	ldr	r3, [r7, #16]
 8001d30:	e010      	b.n	8001d54 <BSP_LED_Init+0x98>
 8001d32:	79fb      	ldrb	r3, [r7, #7]
 8001d34:	2b03      	cmp	r3, #3
 8001d36:	d10d      	bne.n	8001d54 <BSP_LED_Init+0x98>
 8001d38:	2300      	movs	r3, #0
 8001d3a:	60fb      	str	r3, [r7, #12]
 8001d3c:	4b12      	ldr	r3, [pc, #72]	; (8001d88 <BSP_LED_Init+0xcc>)
 8001d3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d40:	4a11      	ldr	r2, [pc, #68]	; (8001d88 <BSP_LED_Init+0xcc>)
 8001d42:	f043 0304 	orr.w	r3, r3, #4
 8001d46:	6313      	str	r3, [r2, #48]	; 0x30
 8001d48:	4b0f      	ldr	r3, [pc, #60]	; (8001d88 <BSP_LED_Init+0xcc>)
 8001d4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d4c:	f003 0304 	and.w	r3, r3, #4
 8001d50:	60fb      	str	r3, [r7, #12]
 8001d52:	68fb      	ldr	r3, [r7, #12]

  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 8001d54:	79fb      	ldrb	r3, [r7, #7]
 8001d56:	4a0d      	ldr	r2, [pc, #52]	; (8001d8c <BSP_LED_Init+0xd0>)
 8001d58:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001d5c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d5e:	2301      	movs	r3, #1
 8001d60:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d62:	2301      	movs	r3, #1
 8001d64:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8001d66:	2302      	movs	r3, #2
 8001d68:	62bb      	str	r3, [r7, #40]	; 0x28
  
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 8001d6a:	79fb      	ldrb	r3, [r7, #7]
 8001d6c:	4a08      	ldr	r2, [pc, #32]	; (8001d90 <BSP_LED_Init+0xd4>)
 8001d6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d72:	f107 021c 	add.w	r2, r7, #28
 8001d76:	4611      	mov	r1, r2
 8001d78:	4618      	mov	r0, r3
 8001d7a:	f001 f815 	bl	8002da8 <HAL_GPIO_Init>
}
 8001d7e:	bf00      	nop
 8001d80:	3730      	adds	r7, #48	; 0x30
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd80      	pop	{r7, pc}
 8001d86:	bf00      	nop
 8001d88:	40023800 	.word	0x40023800
 8001d8c:	08009da4 	.word	0x08009da4
 8001d90:	2000003c 	.word	0x2000003c

08001d94 <BSP_LED_On>:
  *            @arg  LED2
  *            @arg  LED3
  *            @arg  LED4
  */
void BSP_LED_On(Led_TypeDef Led)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b082      	sub	sp, #8
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET); 
 8001d9e:	79fb      	ldrb	r3, [r7, #7]
 8001da0:	4a07      	ldr	r2, [pc, #28]	; (8001dc0 <BSP_LED_On+0x2c>)
 8001da2:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001da6:	79fb      	ldrb	r3, [r7, #7]
 8001da8:	4a06      	ldr	r2, [pc, #24]	; (8001dc4 <BSP_LED_On+0x30>)
 8001daa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001dae:	2201      	movs	r2, #1
 8001db0:	4619      	mov	r1, r3
 8001db2:	f001 f9ad 	bl	8003110 <HAL_GPIO_WritePin>
}
 8001db6:	bf00      	nop
 8001db8:	3708      	adds	r7, #8
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bd80      	pop	{r7, pc}
 8001dbe:	bf00      	nop
 8001dc0:	2000003c 	.word	0x2000003c
 8001dc4:	08009da4 	.word	0x08009da4

08001dc8 <BSP_LED_Off>:
  *            @arg  LED2
  *            @arg  LED3
  *            @arg  LED4
  */
void BSP_LED_Off(Led_TypeDef Led)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b082      	sub	sp, #8
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	4603      	mov	r3, r0
 8001dd0:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 8001dd2:	79fb      	ldrb	r3, [r7, #7]
 8001dd4:	4a07      	ldr	r2, [pc, #28]	; (8001df4 <BSP_LED_Off+0x2c>)
 8001dd6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001dda:	79fb      	ldrb	r3, [r7, #7]
 8001ddc:	4a06      	ldr	r2, [pc, #24]	; (8001df8 <BSP_LED_Off+0x30>)
 8001dde:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001de2:	2200      	movs	r2, #0
 8001de4:	4619      	mov	r1, r3
 8001de6:	f001 f993 	bl	8003110 <HAL_GPIO_WritePin>
}
 8001dea:	bf00      	nop
 8001dec:	3708      	adds	r7, #8
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bd80      	pop	{r7, pc}
 8001df2:	bf00      	nop
 8001df4:	2000003c 	.word	0x2000003c
 8001df8:	08009da4 	.word	0x08009da4

08001dfc <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_GPIO: Button will be used as simple IO
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line 
  *                                    with interrupt generation capability  
  */
void BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef Button_Mode)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b08a      	sub	sp, #40	; 0x28
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	4603      	mov	r3, r0
 8001e04:	460a      	mov	r2, r1
 8001e06:	71fb      	strb	r3, [r7, #7]
 8001e08:	4613      	mov	r3, r2
 8001e0a:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef GPIO_InitStruct;
  
  /* Enable the BUTTON clock */
  BUTTONx_GPIO_CLK_ENABLE(Button);
 8001e0c:	79fb      	ldrb	r3, [r7, #7]
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d10e      	bne.n	8001e30 <BSP_PB_Init+0x34>
 8001e12:	2300      	movs	r3, #0
 8001e14:	613b      	str	r3, [r7, #16]
 8001e16:	4b3f      	ldr	r3, [pc, #252]	; (8001f14 <BSP_PB_Init+0x118>)
 8001e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e1a:	4a3e      	ldr	r2, [pc, #248]	; (8001f14 <BSP_PB_Init+0x118>)
 8001e1c:	f043 0301 	orr.w	r3, r3, #1
 8001e20:	6313      	str	r3, [r2, #48]	; 0x30
 8001e22:	4b3c      	ldr	r3, [pc, #240]	; (8001f14 <BSP_PB_Init+0x118>)
 8001e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e26:	f003 0301 	and.w	r3, r3, #1
 8001e2a:	613b      	str	r3, [r7, #16]
 8001e2c:	693b      	ldr	r3, [r7, #16]
 8001e2e:	e022      	b.n	8001e76 <BSP_PB_Init+0x7a>
 8001e30:	79fb      	ldrb	r3, [r7, #7]
 8001e32:	2b01      	cmp	r3, #1
 8001e34:	d10e      	bne.n	8001e54 <BSP_PB_Init+0x58>
 8001e36:	2300      	movs	r3, #0
 8001e38:	60fb      	str	r3, [r7, #12]
 8001e3a:	4b36      	ldr	r3, [pc, #216]	; (8001f14 <BSP_PB_Init+0x118>)
 8001e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e3e:	4a35      	ldr	r2, [pc, #212]	; (8001f14 <BSP_PB_Init+0x118>)
 8001e40:	f043 0304 	orr.w	r3, r3, #4
 8001e44:	6313      	str	r3, [r2, #48]	; 0x30
 8001e46:	4b33      	ldr	r3, [pc, #204]	; (8001f14 <BSP_PB_Init+0x118>)
 8001e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e4a:	f003 0304 	and.w	r3, r3, #4
 8001e4e:	60fb      	str	r3, [r7, #12]
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	e010      	b.n	8001e76 <BSP_PB_Init+0x7a>
 8001e54:	79fb      	ldrb	r3, [r7, #7]
 8001e56:	2b02      	cmp	r3, #2
 8001e58:	d10d      	bne.n	8001e76 <BSP_PB_Init+0x7a>
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	60bb      	str	r3, [r7, #8]
 8001e5e:	4b2d      	ldr	r3, [pc, #180]	; (8001f14 <BSP_PB_Init+0x118>)
 8001e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e62:	4a2c      	ldr	r2, [pc, #176]	; (8001f14 <BSP_PB_Init+0x118>)
 8001e64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001e68:	6313      	str	r3, [r2, #48]	; 0x30
 8001e6a:	4b2a      	ldr	r3, [pc, #168]	; (8001f14 <BSP_PB_Init+0x118>)
 8001e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e72:	60bb      	str	r3, [r7, #8]
 8001e74:	68bb      	ldr	r3, [r7, #8]
  
  if(Button_Mode == BUTTON_MODE_GPIO)
 8001e76:	79bb      	ldrb	r3, [r7, #6]
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d114      	bne.n	8001ea6 <BSP_PB_Init+0xaa>
  {
    /* Configure Button pin as input */
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 8001e7c:	79fb      	ldrb	r3, [r7, #7]
 8001e7e:	4a26      	ldr	r2, [pc, #152]	; (8001f18 <BSP_PB_Init+0x11c>)
 8001e80:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001e84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e86:	2300      	movs	r3, #0
 8001e88:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8001e8e:	2302      	movs	r3, #2
 8001e90:	623b      	str	r3, [r7, #32]
    
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 8001e92:	79fb      	ldrb	r3, [r7, #7]
 8001e94:	4a21      	ldr	r2, [pc, #132]	; (8001f1c <BSP_PB_Init+0x120>)
 8001e96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e9a:	f107 0214 	add.w	r2, r7, #20
 8001e9e:	4611      	mov	r1, r2
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	f000 ff81 	bl	8002da8 <HAL_GPIO_Init>
  }
  
  if(Button_Mode == BUTTON_MODE_EXTI)
 8001ea6:	79bb      	ldrb	r3, [r7, #6]
 8001ea8:	2b01      	cmp	r3, #1
 8001eaa:	d12e      	bne.n	8001f0a <BSP_PB_Init+0x10e>
  {
    /* Configure Button pin as input with External interrupt */
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 8001eac:	79fb      	ldrb	r3, [r7, #7]
 8001eae:	4a1a      	ldr	r2, [pc, #104]	; (8001f18 <BSP_PB_Init+0x11c>)
 8001eb0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001eb4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8001eba:	2302      	movs	r3, #2
 8001ebc:	623b      	str	r3, [r7, #32]
    
    if(Button != BUTTON_WAKEUP)
 8001ebe:	79fb      	ldrb	r3, [r7, #7]
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d003      	beq.n	8001ecc <BSP_PB_Init+0xd0>
    {
      GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING; 
 8001ec4:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001ec8:	61bb      	str	r3, [r7, #24]
 8001eca:	e002      	b.n	8001ed2 <BSP_PB_Init+0xd6>
    }
    else
    {
      GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001ecc:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001ed0:	61bb      	str	r3, [r7, #24]
    }
    
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 8001ed2:	79fb      	ldrb	r3, [r7, #7]
 8001ed4:	4a11      	ldr	r2, [pc, #68]	; (8001f1c <BSP_PB_Init+0x120>)
 8001ed6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001eda:	f107 0214 	add.w	r2, r7, #20
 8001ede:	4611      	mov	r1, r2
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	f000 ff61 	bl	8002da8 <HAL_GPIO_Init>
    
    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x0);
 8001ee6:	79fb      	ldrb	r3, [r7, #7]
 8001ee8:	4a0d      	ldr	r2, [pc, #52]	; (8001f20 <BSP_PB_Init+0x124>)
 8001eea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001eee:	b25b      	sxtb	r3, r3
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	210f      	movs	r1, #15
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	f000 fe42 	bl	8002b7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 8001efa:	79fb      	ldrb	r3, [r7, #7]
 8001efc:	4a08      	ldr	r2, [pc, #32]	; (8001f20 <BSP_PB_Init+0x124>)
 8001efe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001f02:	b25b      	sxtb	r3, r3
 8001f04:	4618      	mov	r0, r3
 8001f06:	f000 fe56 	bl	8002bb6 <HAL_NVIC_EnableIRQ>
  }
}
 8001f0a:	bf00      	nop
 8001f0c:	3728      	adds	r7, #40	; 0x28
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}
 8001f12:	bf00      	nop
 8001f14:	40023800 	.word	0x40023800
 8001f18:	08009dac 	.word	0x08009dac
 8001f1c:	2000004c 	.word	0x2000004c
 8001f20:	08009db4 	.word	0x08009db4

08001f24 <BSP_PB_GetState>:
  *            @arg BUTTON_DOWN: Joystick Down Push Button
  *            @arg BUTTON_SEL: Joystick Sel Push Button  
  * @retval The Button GPIO pin value
  */
uint32_t BSP_PB_GetState(Button_TypeDef Button)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b082      	sub	sp, #8
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	71fb      	strb	r3, [r7, #7]
  return HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]);
 8001f2e:	79fb      	ldrb	r3, [r7, #7]
 8001f30:	4a07      	ldr	r2, [pc, #28]	; (8001f50 <BSP_PB_GetState+0x2c>)
 8001f32:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001f36:	79fb      	ldrb	r3, [r7, #7]
 8001f38:	4906      	ldr	r1, [pc, #24]	; (8001f54 <BSP_PB_GetState+0x30>)
 8001f3a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001f3e:	4619      	mov	r1, r3
 8001f40:	4610      	mov	r0, r2
 8001f42:	f001 f8cd 	bl	80030e0 <HAL_GPIO_ReadPin>
 8001f46:	4603      	mov	r3, r0
}
 8001f48:	4618      	mov	r0, r3
 8001f4a:	3708      	adds	r7, #8
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	bd80      	pop	{r7, pc}
 8001f50:	2000004c 	.word	0x2000004c
 8001f54:	08009dac 	.word	0x08009dac

08001f58 <FSMC_BANK3_MspInit>:
/*************************** FSMC Routines ************************************/
/**
  * @brief  Initializes FSMC_BANK3 MSP.
  */
static void FSMC_BANK3_MspInit(void)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b08a      	sub	sp, #40	; 0x28
 8001f5c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_Init_Structure;
    
  /* Enable FSMC clock */
  __FSMC_CLK_ENABLE();
 8001f5e:	2300      	movs	r3, #0
 8001f60:	613b      	str	r3, [r7, #16]
 8001f62:	4b3a      	ldr	r3, [pc, #232]	; (800204c <FSMC_BANK3_MspInit+0xf4>)
 8001f64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f66:	4a39      	ldr	r2, [pc, #228]	; (800204c <FSMC_BANK3_MspInit+0xf4>)
 8001f68:	f043 0301 	orr.w	r3, r3, #1
 8001f6c:	6393      	str	r3, [r2, #56]	; 0x38
 8001f6e:	4b37      	ldr	r3, [pc, #220]	; (800204c <FSMC_BANK3_MspInit+0xf4>)
 8001f70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f72:	f003 0301 	and.w	r3, r3, #1
 8001f76:	613b      	str	r3, [r7, #16]
 8001f78:	693b      	ldr	r3, [r7, #16]

  /* Enable GPIOs clock */
  __GPIOD_CLK_ENABLE();
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	60fb      	str	r3, [r7, #12]
 8001f7e:	4b33      	ldr	r3, [pc, #204]	; (800204c <FSMC_BANK3_MspInit+0xf4>)
 8001f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f82:	4a32      	ldr	r2, [pc, #200]	; (800204c <FSMC_BANK3_MspInit+0xf4>)
 8001f84:	f043 0308 	orr.w	r3, r3, #8
 8001f88:	6313      	str	r3, [r2, #48]	; 0x30
 8001f8a:	4b30      	ldr	r3, [pc, #192]	; (800204c <FSMC_BANK3_MspInit+0xf4>)
 8001f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f8e:	f003 0308 	and.w	r3, r3, #8
 8001f92:	60fb      	str	r3, [r7, #12]
 8001f94:	68fb      	ldr	r3, [r7, #12]
  __GPIOE_CLK_ENABLE();
 8001f96:	2300      	movs	r3, #0
 8001f98:	60bb      	str	r3, [r7, #8]
 8001f9a:	4b2c      	ldr	r3, [pc, #176]	; (800204c <FSMC_BANK3_MspInit+0xf4>)
 8001f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f9e:	4a2b      	ldr	r2, [pc, #172]	; (800204c <FSMC_BANK3_MspInit+0xf4>)
 8001fa0:	f043 0310 	orr.w	r3, r3, #16
 8001fa4:	6313      	str	r3, [r2, #48]	; 0x30
 8001fa6:	4b29      	ldr	r3, [pc, #164]	; (800204c <FSMC_BANK3_MspInit+0xf4>)
 8001fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001faa:	f003 0310 	and.w	r3, r3, #16
 8001fae:	60bb      	str	r3, [r7, #8]
 8001fb0:	68bb      	ldr	r3, [r7, #8]
  __GPIOF_CLK_ENABLE();
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	607b      	str	r3, [r7, #4]
 8001fb6:	4b25      	ldr	r3, [pc, #148]	; (800204c <FSMC_BANK3_MspInit+0xf4>)
 8001fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fba:	4a24      	ldr	r2, [pc, #144]	; (800204c <FSMC_BANK3_MspInit+0xf4>)
 8001fbc:	f043 0320 	orr.w	r3, r3, #32
 8001fc0:	6313      	str	r3, [r2, #48]	; 0x30
 8001fc2:	4b22      	ldr	r3, [pc, #136]	; (800204c <FSMC_BANK3_MspInit+0xf4>)
 8001fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fc6:	f003 0320 	and.w	r3, r3, #32
 8001fca:	607b      	str	r3, [r7, #4]
 8001fcc:	687b      	ldr	r3, [r7, #4]
  __GPIOG_CLK_ENABLE();
 8001fce:	2300      	movs	r3, #0
 8001fd0:	603b      	str	r3, [r7, #0]
 8001fd2:	4b1e      	ldr	r3, [pc, #120]	; (800204c <FSMC_BANK3_MspInit+0xf4>)
 8001fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fd6:	4a1d      	ldr	r2, [pc, #116]	; (800204c <FSMC_BANK3_MspInit+0xf4>)
 8001fd8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001fdc:	6313      	str	r3, [r2, #48]	; 0x30
 8001fde:	4b1b      	ldr	r3, [pc, #108]	; (800204c <FSMC_BANK3_MspInit+0xf4>)
 8001fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fe2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fe6:	603b      	str	r3, [r7, #0]
 8001fe8:	683b      	ldr	r3, [r7, #0]
  
  /* Common GPIO configuration */
  GPIO_Init_Structure.Mode      = GPIO_MODE_AF_PP;
 8001fea:	2302      	movs	r3, #2
 8001fec:	61bb      	str	r3, [r7, #24]
  GPIO_Init_Structure.Pull      = GPIO_PULLUP;
 8001fee:	2301      	movs	r3, #1
 8001ff0:	61fb      	str	r3, [r7, #28]
  GPIO_Init_Structure.Speed     = GPIO_SPEED_HIGH;
 8001ff2:	2303      	movs	r3, #3
 8001ff4:	623b      	str	r3, [r7, #32]
  GPIO_Init_Structure.Alternate = GPIO_AF12_FSMC;
 8001ff6:	230c      	movs	r3, #12
 8001ff8:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* GPIOD configuration */
  GPIO_Init_Structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_8     |\
 8001ffa:	f64f 7333 	movw	r3, #65331	; 0xff33
 8001ffe:	617b      	str	r3, [r7, #20]
                              GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |\
                              GPIO_PIN_14 | GPIO_PIN_15;
   
  HAL_GPIO_Init(GPIOD, &GPIO_Init_Structure);
 8002000:	f107 0314 	add.w	r3, r7, #20
 8002004:	4619      	mov	r1, r3
 8002006:	4812      	ldr	r0, [pc, #72]	; (8002050 <FSMC_BANK3_MspInit+0xf8>)
 8002008:	f000 fece 	bl	8002da8 <HAL_GPIO_Init>

  /* GPIOE configuration */  
  GPIO_Init_Structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_3| GPIO_PIN_4 | GPIO_PIN_7     |\
 800200c:	f64f 739b 	movw	r3, #65435	; 0xff9b
 8002010:	617b      	str	r3, [r7, #20]
                              GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 |\
                              GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &GPIO_Init_Structure);
 8002012:	f107 0314 	add.w	r3, r7, #20
 8002016:	4619      	mov	r1, r3
 8002018:	480e      	ldr	r0, [pc, #56]	; (8002054 <FSMC_BANK3_MspInit+0xfc>)
 800201a:	f000 fec5 	bl	8002da8 <HAL_GPIO_Init>
  
  /* GPIOF configuration */  
  GPIO_Init_Structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4     |\
 800201e:	f24f 033f 	movw	r3, #61503	; 0xf03f
 8002022:	617b      	str	r3, [r7, #20]
                              GPIO_PIN_5 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &GPIO_Init_Structure);
 8002024:	f107 0314 	add.w	r3, r7, #20
 8002028:	4619      	mov	r1, r3
 800202a:	480b      	ldr	r0, [pc, #44]	; (8002058 <FSMC_BANK3_MspInit+0x100>)
 800202c:	f000 febc 	bl	8002da8 <HAL_GPIO_Init>
  
  /* GPIOG configuration */  
  GPIO_Init_Structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4     |\
 8002030:	f240 433f 	movw	r3, #1087	; 0x43f
 8002034:	617b      	str	r3, [r7, #20]
                              GPIO_PIN_5 | GPIO_PIN_10;
  
  HAL_GPIO_Init(GPIOG, &GPIO_Init_Structure);  
 8002036:	f107 0314 	add.w	r3, r7, #20
 800203a:	4619      	mov	r1, r3
 800203c:	4807      	ldr	r0, [pc, #28]	; (800205c <FSMC_BANK3_MspInit+0x104>)
 800203e:	f000 feb3 	bl	8002da8 <HAL_GPIO_Init>
}
 8002042:	bf00      	nop
 8002044:	3728      	adds	r7, #40	; 0x28
 8002046:	46bd      	mov	sp, r7
 8002048:	bd80      	pop	{r7, pc}
 800204a:	bf00      	nop
 800204c:	40023800 	.word	0x40023800
 8002050:	40020c00 	.word	0x40020c00
 8002054:	40021000 	.word	0x40021000
 8002058:	40021400 	.word	0x40021400
 800205c:	40021800 	.word	0x40021800

08002060 <FSMC_BANK3_Init>:

/**
  * @brief  Initializes LCD IO.
  */
static void FSMC_BANK3_Init(void) 
{  
 8002060:	b580      	push	{r7, lr}
 8002062:	b09c      	sub	sp, #112	; 0x70
 8002064:	af00      	add	r7, sp, #0
  SRAM_HandleTypeDef hsram;
  FSMC_NORSRAM_TimingTypeDef SRAM_Timing;
  
  /*** Configure the SRAM Bank 3 ***/  
  /* Configure IPs */
  hsram.Instance  = FMC_NORSRAM_DEVICE;
 8002066:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 800206a:	623b      	str	r3, [r7, #32]
  hsram.Extended  = FMC_NORSRAM_EXTENDED_DEVICE;
 800206c:	4b1c      	ldr	r3, [pc, #112]	; (80020e0 <FSMC_BANK3_Init+0x80>)
 800206e:	627b      	str	r3, [r7, #36]	; 0x24

  SRAM_Timing.AddressSetupTime      = 5;
 8002070:	2305      	movs	r3, #5
 8002072:	607b      	str	r3, [r7, #4]
  SRAM_Timing.AddressHoldTime       = 1;
 8002074:	2301      	movs	r3, #1
 8002076:	60bb      	str	r3, [r7, #8]
  SRAM_Timing.DataSetupTime         = 9;
 8002078:	2309      	movs	r3, #9
 800207a:	60fb      	str	r3, [r7, #12]
  SRAM_Timing.BusTurnAroundDuration = 0;
 800207c:	2300      	movs	r3, #0
 800207e:	613b      	str	r3, [r7, #16]
  SRAM_Timing.CLKDivision           = 2;
 8002080:	2302      	movs	r3, #2
 8002082:	617b      	str	r3, [r7, #20]
  SRAM_Timing.DataLatency           = 2;
 8002084:	2302      	movs	r3, #2
 8002086:	61bb      	str	r3, [r7, #24]
  SRAM_Timing.AccessMode            = FSMC_ACCESS_MODE_A;
 8002088:	2300      	movs	r3, #0
 800208a:	61fb      	str	r3, [r7, #28]
  
  hsram.Init.NSBank             = FSMC_NORSRAM_BANK3;
 800208c:	2304      	movs	r3, #4
 800208e:	62bb      	str	r3, [r7, #40]	; 0x28
  hsram.Init.DataAddressMux     = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8002090:	2300      	movs	r3, #0
 8002092:	62fb      	str	r3, [r7, #44]	; 0x2c
  hsram.Init.MemoryType         = FSMC_MEMORY_TYPE_SRAM;
 8002094:	2300      	movs	r3, #0
 8002096:	633b      	str	r3, [r7, #48]	; 0x30
  hsram.Init.MemoryDataWidth    = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8002098:	2310      	movs	r3, #16
 800209a:	637b      	str	r3, [r7, #52]	; 0x34
  hsram.Init.BurstAccessMode    = FSMC_BURST_ACCESS_MODE_DISABLE;
 800209c:	2300      	movs	r3, #0
 800209e:	63bb      	str	r3, [r7, #56]	; 0x38
  hsram.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 80020a0:	2300      	movs	r3, #0
 80020a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  hsram.Init.WrapMode           = FSMC_WRAP_MODE_DISABLE;
 80020a4:	2300      	movs	r3, #0
 80020a6:	643b      	str	r3, [r7, #64]	; 0x40
  hsram.Init.WaitSignalActive   = FSMC_WAIT_TIMING_BEFORE_WS;
 80020a8:	2300      	movs	r3, #0
 80020aa:	647b      	str	r3, [r7, #68]	; 0x44
  hsram.Init.WriteOperation     = FSMC_WRITE_OPERATION_ENABLE;
 80020ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80020b0:	64bb      	str	r3, [r7, #72]	; 0x48
  hsram.Init.WaitSignal         = FSMC_WAIT_SIGNAL_DISABLE;
 80020b2:	2300      	movs	r3, #0
 80020b4:	64fb      	str	r3, [r7, #76]	; 0x4c
  hsram.Init.ExtendedMode       = FSMC_EXTENDED_MODE_DISABLE;
 80020b6:	2300      	movs	r3, #0
 80020b8:	653b      	str	r3, [r7, #80]	; 0x50
  hsram.Init.AsynchronousWait   = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 80020ba:	2300      	movs	r3, #0
 80020bc:	657b      	str	r3, [r7, #84]	; 0x54
  hsram.Init.WriteBurst         = FSMC_WRITE_BURST_DISABLE;
 80020be:	2300      	movs	r3, #0
 80020c0:	65bb      	str	r3, [r7, #88]	; 0x58
  hsram.Init.PageSize           = FSMC_PAGE_SIZE_NONE;
 80020c2:	2300      	movs	r3, #0
 80020c4:	667b      	str	r3, [r7, #100]	; 0x64

  /* Initialize the SRAM controller */
  FSMC_BANK3_MspInit();
 80020c6:	f7ff ff47 	bl	8001f58 <FSMC_BANK3_MspInit>
  HAL_SRAM_Init(&hsram, &SRAM_Timing, &SRAM_Timing);   
 80020ca:	1d3a      	adds	r2, r7, #4
 80020cc:	1d39      	adds	r1, r7, #4
 80020ce:	f107 0320 	add.w	r3, r7, #32
 80020d2:	4618      	mov	r0, r3
 80020d4:	f003 f9ac 	bl	8005430 <HAL_SRAM_Init>
}
 80020d8:	bf00      	nop
 80020da:	3770      	adds	r7, #112	; 0x70
 80020dc:	46bd      	mov	sp, r7
 80020de:	bd80      	pop	{r7, pc}
 80020e0:	a0000104 	.word	0xa0000104

080020e4 <FSMC_BANK3_WriteData>:
/**
  * @brief  Writes register value.
  * @param  Data: Data to be written 
  */
static void FSMC_BANK3_WriteData(uint16_t Data) 
{
 80020e4:	b480      	push	{r7}
 80020e6:	b083      	sub	sp, #12
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	4603      	mov	r3, r0
 80020ec:	80fb      	strh	r3, [r7, #6]
  /* Write 16-bit Reg */
  FMC_BANK3->RAM = Data;
 80020ee:	f04f 42d0 	mov.w	r2, #1744830464	; 0x68000000
 80020f2:	88fb      	ldrh	r3, [r7, #6]
 80020f4:	8053      	strh	r3, [r2, #2]
}
 80020f6:	bf00      	nop
 80020f8:	370c      	adds	r7, #12
 80020fa:	46bd      	mov	sp, r7
 80020fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002100:	4770      	bx	lr

08002102 <FSMC_BANK3_WriteReg>:
/**
  * @brief  Writes register address.
  * @param  Reg: Register to be written
  */
static void FSMC_BANK3_WriteReg(uint8_t Reg) 
{
 8002102:	b480      	push	{r7}
 8002104:	b083      	sub	sp, #12
 8002106:	af00      	add	r7, sp, #0
 8002108:	4603      	mov	r3, r0
 800210a:	71fb      	strb	r3, [r7, #7]
  /* Write 16-bit Index, then write register */
  FMC_BANK3->REG = Reg;
 800210c:	f04f 43d0 	mov.w	r3, #1744830464	; 0x68000000
 8002110:	79fa      	ldrb	r2, [r7, #7]
 8002112:	b292      	uxth	r2, r2
 8002114:	801a      	strh	r2, [r3, #0]
}
 8002116:	bf00      	nop
 8002118:	370c      	adds	r7, #12
 800211a:	46bd      	mov	sp, r7
 800211c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002120:	4770      	bx	lr

08002122 <FSMC_BANK3_ReadData>:
/**
  * @brief  Reads register value.
  * @retval Read value
  */
static uint16_t FSMC_BANK3_ReadData(void) 
{
 8002122:	b480      	push	{r7}
 8002124:	af00      	add	r7, sp, #0
  return FMC_BANK3->RAM;
 8002126:	f04f 43d0 	mov.w	r3, #1744830464	; 0x68000000
 800212a:	885b      	ldrh	r3, [r3, #2]
 800212c:	b29b      	uxth	r3, r3
}
 800212e:	4618      	mov	r0, r3
 8002130:	46bd      	mov	sp, r7
 8002132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002136:	4770      	bx	lr

08002138 <LCD_IO_Init>:

/**
  * @brief  Initializes LCD low level.
  */
void LCD_IO_Init(void) 
{
 8002138:	b580      	push	{r7, lr}
 800213a:	af00      	add	r7, sp, #0
  if(Is_LCD_IO_Initialized == 0)
 800213c:	4b05      	ldr	r3, [pc, #20]	; (8002154 <LCD_IO_Init+0x1c>)
 800213e:	781b      	ldrb	r3, [r3, #0]
 8002140:	2b00      	cmp	r3, #0
 8002142:	d104      	bne.n	800214e <LCD_IO_Init+0x16>
  {
    Is_LCD_IO_Initialized = 1; 
 8002144:	4b03      	ldr	r3, [pc, #12]	; (8002154 <LCD_IO_Init+0x1c>)
 8002146:	2201      	movs	r2, #1
 8002148:	701a      	strb	r2, [r3, #0]
    FSMC_BANK3_Init();
 800214a:	f7ff ff89 	bl	8002060 <FSMC_BANK3_Init>
  }
}
 800214e:	bf00      	nop
 8002150:	bd80      	pop	{r7, pc}
 8002152:	bf00      	nop
 8002154:	20000680 	.word	0x20000680

08002158 <LCD_IO_WriteMultipleData>:
  * @brief  Write register value.
  * @param  pData Pointer on the register value
  * @param  Size Size of byte to transmit to the register
  */
void LCD_IO_WriteMultipleData(uint8_t *pData, uint32_t Size)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b084      	sub	sp, #16
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
 8002160:	6039      	str	r1, [r7, #0]
  uint32_t counter;
  uint16_t *ptr = (uint16_t *) pData;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	60bb      	str	r3, [r7, #8]
  
  for (counter = 0; counter < Size; counter+=2)
 8002166:	2300      	movs	r3, #0
 8002168:	60fb      	str	r3, [r7, #12]
 800216a:	e00a      	b.n	8002182 <LCD_IO_WriteMultipleData+0x2a>
  {  
    /* Write 16-bit Reg */
    FSMC_BANK3_WriteData(*ptr);
 800216c:	68bb      	ldr	r3, [r7, #8]
 800216e:	881b      	ldrh	r3, [r3, #0]
 8002170:	4618      	mov	r0, r3
 8002172:	f7ff ffb7 	bl	80020e4 <FSMC_BANK3_WriteData>
    ptr++;
 8002176:	68bb      	ldr	r3, [r7, #8]
 8002178:	3302      	adds	r3, #2
 800217a:	60bb      	str	r3, [r7, #8]
  for (counter = 0; counter < Size; counter+=2)
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	3302      	adds	r3, #2
 8002180:	60fb      	str	r3, [r7, #12]
 8002182:	68fa      	ldr	r2, [r7, #12]
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	429a      	cmp	r2, r3
 8002188:	d3f0      	bcc.n	800216c <LCD_IO_WriteMultipleData+0x14>
  }
}
 800218a:	bf00      	nop
 800218c:	bf00      	nop
 800218e:	3710      	adds	r7, #16
 8002190:	46bd      	mov	sp, r7
 8002192:	bd80      	pop	{r7, pc}

08002194 <LCD_IO_WriteReg>:
/**
  * @brief  Writes register on LCD register.
  * @param  Reg: Register to be written
  */
void LCD_IO_WriteReg(uint8_t Reg) 
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b082      	sub	sp, #8
 8002198:	af00      	add	r7, sp, #0
 800219a:	4603      	mov	r3, r0
 800219c:	71fb      	strb	r3, [r7, #7]
  /* Write 16-bit Index, then Write Reg */
  FSMC_BANK3_WriteReg(Reg);
 800219e:	79fb      	ldrb	r3, [r7, #7]
 80021a0:	4618      	mov	r0, r3
 80021a2:	f7ff ffae 	bl	8002102 <FSMC_BANK3_WriteReg>
}
 80021a6:	bf00      	nop
 80021a8:	3708      	adds	r7, #8
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bd80      	pop	{r7, pc}

080021ae <LCD_IO_ReadData>:
  * @brief  Reads data from LCD data register.
  * @param  Reg: Register to be read
  * @retval Read data.
  */
uint16_t LCD_IO_ReadData(uint16_t Reg)
{
 80021ae:	b580      	push	{r7, lr}
 80021b0:	b082      	sub	sp, #8
 80021b2:	af00      	add	r7, sp, #0
 80021b4:	4603      	mov	r3, r0
 80021b6:	80fb      	strh	r3, [r7, #6]
  FSMC_BANK3_WriteReg(Reg);
 80021b8:	88fb      	ldrh	r3, [r7, #6]
 80021ba:	b2db      	uxtb	r3, r3
 80021bc:	4618      	mov	r0, r3
 80021be:	f7ff ffa0 	bl	8002102 <FSMC_BANK3_WriteReg>
  
  /* Read 16-bit Reg */  
  return FSMC_BANK3_ReadData();
 80021c2:	f7ff ffae 	bl	8002122 <FSMC_BANK3_ReadData>
 80021c6:	4603      	mov	r3, r0
}
 80021c8:	4618      	mov	r0, r3
 80021ca:	3708      	adds	r7, #8
 80021cc:	46bd      	mov	sp, r7
 80021ce:	bd80      	pop	{r7, pc}

080021d0 <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{ 
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b082      	sub	sp, #8
 80021d4:	af00      	add	r7, sp, #0
  uint8_t ret = LCD_ERROR;
 80021d6:	2301      	movs	r3, #1
 80021d8:	71fb      	strb	r3, [r7, #7]
  
  /* Default value for draw propriety */
  DrawProp.BackColor = 0xFFFF;
 80021da:	4b12      	ldr	r3, [pc, #72]	; (8002224 <BSP_LCD_Init+0x54>)
 80021dc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80021e0:	605a      	str	r2, [r3, #4]
  DrawProp.pFont     = &Font24;
 80021e2:	4b10      	ldr	r3, [pc, #64]	; (8002224 <BSP_LCD_Init+0x54>)
 80021e4:	4a10      	ldr	r2, [pc, #64]	; (8002228 <BSP_LCD_Init+0x58>)
 80021e6:	609a      	str	r2, [r3, #8]
  DrawProp.TextColor = 0x0000;
 80021e8:	4b0e      	ldr	r3, [pc, #56]	; (8002224 <BSP_LCD_Init+0x54>)
 80021ea:	2200      	movs	r2, #0
 80021ec:	601a      	str	r2, [r3, #0]
  
  if(ili9325_drv.ReadID() == ILI9325_ID)
 80021ee:	4b0f      	ldr	r3, [pc, #60]	; (800222c <BSP_LCD_Init+0x5c>)
 80021f0:	685b      	ldr	r3, [r3, #4]
 80021f2:	4798      	blx	r3
 80021f4:	4603      	mov	r3, r0
 80021f6:	461a      	mov	r2, r3
 80021f8:	f249 3325 	movw	r3, #37669	; 0x9325
 80021fc:	429a      	cmp	r2, r3
 80021fe:	d10b      	bne.n	8002218 <BSP_LCD_Init+0x48>
  {
    lcd_drv = &ili9325_drv;
 8002200:	4b0b      	ldr	r3, [pc, #44]	; (8002230 <BSP_LCD_Init+0x60>)
 8002202:	4a0a      	ldr	r2, [pc, #40]	; (800222c <BSP_LCD_Init+0x5c>)
 8002204:	601a      	str	r2, [r3, #0]

    /* LCD Init */   
    lcd_drv->Init();
 8002206:	4b0a      	ldr	r3, [pc, #40]	; (8002230 <BSP_LCD_Init+0x60>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4798      	blx	r3
    
    /* Initialize the font */
    BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 800220e:	4806      	ldr	r0, [pc, #24]	; (8002228 <BSP_LCD_Init+0x58>)
 8002210:	f000 f848 	bl	80022a4 <BSP_LCD_SetFont>

    ret = LCD_OK;
 8002214:	2300      	movs	r3, #0
 8002216:	71fb      	strb	r3, [r7, #7]
  }
  
  return ret;
 8002218:	79fb      	ldrb	r3, [r7, #7]
}
 800221a:	4618      	mov	r0, r3
 800221c:	3708      	adds	r7, #8
 800221e:	46bd      	mov	sp, r7
 8002220:	bd80      	pop	{r7, pc}
 8002222:	bf00      	nop
 8002224:	20000684 	.word	0x20000684
 8002228:	20000058 	.word	0x20000058
 800222c:	20000004 	.word	0x20000004
 8002230:	20000690 	.word	0x20000690

08002234 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size. 
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	af00      	add	r7, sp, #0
  return(lcd_drv->GetLcdPixelWidth());
 8002238:	4b03      	ldr	r3, [pc, #12]	; (8002248 <BSP_LCD_GetXSize+0x14>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800223e:	4798      	blx	r3
 8002240:	4603      	mov	r3, r0
}
 8002242:	4618      	mov	r0, r3
 8002244:	bd80      	pop	{r7, pc}
 8002246:	bf00      	nop
 8002248:	20000690 	.word	0x20000690

0800224c <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.  
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	af00      	add	r7, sp, #0
  return(lcd_drv->GetLcdPixelHeight());
 8002250:	4b03      	ldr	r3, [pc, #12]	; (8002260 <BSP_LCD_GetYSize+0x14>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002256:	4798      	blx	r3
 8002258:	4603      	mov	r3, r0
}
 800225a:	4618      	mov	r0, r3
 800225c:	bd80      	pop	{r7, pc}
 800225e:	bf00      	nop
 8002260:	20000690 	.word	0x20000690

08002264 <BSP_LCD_SetTextColor>:
/**
  * @brief  Sets the LCD text color.
  * @param  Color: Text color code RGB(5-6-5)
  */
void BSP_LCD_SetTextColor(uint16_t Color)
{
 8002264:	b480      	push	{r7}
 8002266:	b083      	sub	sp, #12
 8002268:	af00      	add	r7, sp, #0
 800226a:	4603      	mov	r3, r0
 800226c:	80fb      	strh	r3, [r7, #6]
  DrawProp.TextColor = Color;
 800226e:	88fb      	ldrh	r3, [r7, #6]
 8002270:	4a03      	ldr	r2, [pc, #12]	; (8002280 <BSP_LCD_SetTextColor+0x1c>)
 8002272:	6013      	str	r3, [r2, #0]
}
 8002274:	bf00      	nop
 8002276:	370c      	adds	r7, #12
 8002278:	46bd      	mov	sp, r7
 800227a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227e:	4770      	bx	lr
 8002280:	20000684 	.word	0x20000684

08002284 <BSP_LCD_SetBackColor>:
/**
  * @brief  Sets the LCD background color.
  * @param  Color: Background color code RGB(5-6-5)
  */
void BSP_LCD_SetBackColor(uint16_t Color)
{
 8002284:	b480      	push	{r7}
 8002286:	b083      	sub	sp, #12
 8002288:	af00      	add	r7, sp, #0
 800228a:	4603      	mov	r3, r0
 800228c:	80fb      	strh	r3, [r7, #6]
  DrawProp.BackColor = Color;
 800228e:	88fb      	ldrh	r3, [r7, #6]
 8002290:	4a03      	ldr	r2, [pc, #12]	; (80022a0 <BSP_LCD_SetBackColor+0x1c>)
 8002292:	6053      	str	r3, [r2, #4]
}
 8002294:	bf00      	nop
 8002296:	370c      	adds	r7, #12
 8002298:	46bd      	mov	sp, r7
 800229a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229e:	4770      	bx	lr
 80022a0:	20000684 	.word	0x20000684

080022a4 <BSP_LCD_SetFont>:
/**
  * @brief  Sets the LCD text font.
  * @param  fonts: Font to be used
  */
void BSP_LCD_SetFont(sFONT *fonts)
{
 80022a4:	b480      	push	{r7}
 80022a6:	b083      	sub	sp, #12
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
  DrawProp.pFont = fonts;
 80022ac:	4a04      	ldr	r2, [pc, #16]	; (80022c0 <BSP_LCD_SetFont+0x1c>)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6093      	str	r3, [r2, #8]
}
 80022b2:	bf00      	nop
 80022b4:	370c      	adds	r7, #12
 80022b6:	46bd      	mov	sp, r7
 80022b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022bc:	4770      	bx	lr
 80022be:	bf00      	nop
 80022c0:	20000684 	.word	0x20000684

080022c4 <BSP_LCD_Clear>:
/**
  * @brief  Clears the hole LCD.
  * @param  Color: Color of the background
  */
void BSP_LCD_Clear(uint16_t Color)
{ 
 80022c4:	b590      	push	{r4, r7, lr}
 80022c6:	b085      	sub	sp, #20
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	4603      	mov	r3, r0
 80022cc:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 80022ce:	2300      	movs	r3, #0
 80022d0:	60fb      	str	r3, [r7, #12]
  uint32_t color_backup = DrawProp.TextColor; 
 80022d2:	4b15      	ldr	r3, [pc, #84]	; (8002328 <BSP_LCD_Clear+0x64>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	60bb      	str	r3, [r7, #8]
  DrawProp.TextColor = Color;
 80022d8:	88fb      	ldrh	r3, [r7, #6]
 80022da:	4a13      	ldr	r2, [pc, #76]	; (8002328 <BSP_LCD_Clear+0x64>)
 80022dc:	6013      	str	r3, [r2, #0]
  
  for(counter = 0; counter < BSP_LCD_GetYSize(); counter++)
 80022de:	2300      	movs	r3, #0
 80022e0:	60fb      	str	r3, [r7, #12]
 80022e2:	e00d      	b.n	8002300 <BSP_LCD_Clear+0x3c>
  {
    BSP_LCD_DrawHLine(0, counter, BSP_LCD_GetXSize());
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	b29c      	uxth	r4, r3
 80022e8:	f7ff ffa4 	bl	8002234 <BSP_LCD_GetXSize>
 80022ec:	4603      	mov	r3, r0
 80022ee:	b29b      	uxth	r3, r3
 80022f0:	461a      	mov	r2, r3
 80022f2:	4621      	mov	r1, r4
 80022f4:	2000      	movs	r0, #0
 80022f6:	f000 f835 	bl	8002364 <BSP_LCD_DrawHLine>
  for(counter = 0; counter < BSP_LCD_GetYSize(); counter++)
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	3301      	adds	r3, #1
 80022fe:	60fb      	str	r3, [r7, #12]
 8002300:	f7ff ffa4 	bl	800224c <BSP_LCD_GetYSize>
 8002304:	4602      	mov	r2, r0
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	4293      	cmp	r3, r2
 800230a:	d3eb      	bcc.n	80022e4 <BSP_LCD_Clear+0x20>
  }
  DrawProp.TextColor = color_backup; 
 800230c:	4a06      	ldr	r2, [pc, #24]	; (8002328 <BSP_LCD_Clear+0x64>)
 800230e:	68bb      	ldr	r3, [r7, #8]
 8002310:	6013      	str	r3, [r2, #0]
  BSP_LCD_SetTextColor(DrawProp.TextColor);
 8002312:	4b05      	ldr	r3, [pc, #20]	; (8002328 <BSP_LCD_Clear+0x64>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	b29b      	uxth	r3, r3
 8002318:	4618      	mov	r0, r3
 800231a:	f7ff ffa3 	bl	8002264 <BSP_LCD_SetTextColor>
}
 800231e:	bf00      	nop
 8002320:	3714      	adds	r7, #20
 8002322:	46bd      	mov	sp, r7
 8002324:	bd90      	pop	{r4, r7, pc}
 8002326:	bf00      	nop
 8002328:	20000684 	.word	0x20000684

0800232c <BSP_LCD_DrawPixel>:
  * @param  Xpos: X position 
  * @param  Ypos: Y position
  * @param  RGB_Code: Pixel color in RGB mode (5-6-5)  
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint16_t RGB_Code)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b082      	sub	sp, #8
 8002330:	af00      	add	r7, sp, #0
 8002332:	4603      	mov	r3, r0
 8002334:	80fb      	strh	r3, [r7, #6]
 8002336:	460b      	mov	r3, r1
 8002338:	80bb      	strh	r3, [r7, #4]
 800233a:	4613      	mov	r3, r2
 800233c:	807b      	strh	r3, [r7, #2]
  if(lcd_drv->WritePixel != NULL)
 800233e:	4b08      	ldr	r3, [pc, #32]	; (8002360 <BSP_LCD_DrawPixel+0x34>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	695b      	ldr	r3, [r3, #20]
 8002344:	2b00      	cmp	r3, #0
 8002346:	d006      	beq.n	8002356 <BSP_LCD_DrawPixel+0x2a>
  {
    lcd_drv->WritePixel(Xpos, Ypos, RGB_Code);
 8002348:	4b05      	ldr	r3, [pc, #20]	; (8002360 <BSP_LCD_DrawPixel+0x34>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	695b      	ldr	r3, [r3, #20]
 800234e:	887a      	ldrh	r2, [r7, #2]
 8002350:	88b9      	ldrh	r1, [r7, #4]
 8002352:	88f8      	ldrh	r0, [r7, #6]
 8002354:	4798      	blx	r3
  }
}
 8002356:	bf00      	nop
 8002358:	3708      	adds	r7, #8
 800235a:	46bd      	mov	sp, r7
 800235c:	bd80      	pop	{r7, pc}
 800235e:	bf00      	nop
 8002360:	20000690 	.word	0x20000690

08002364 <BSP_LCD_DrawHLine>:
  * @param  Xpos: X position
  * @param  Ypos: Y position
  * @param  Length: Line length
  */
void BSP_LCD_DrawHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8002364:	b590      	push	{r4, r7, lr}
 8002366:	b085      	sub	sp, #20
 8002368:	af00      	add	r7, sp, #0
 800236a:	4603      	mov	r3, r0
 800236c:	80fb      	strh	r3, [r7, #6]
 800236e:	460b      	mov	r3, r1
 8002370:	80bb      	strh	r3, [r7, #4]
 8002372:	4613      	mov	r3, r2
 8002374:	807b      	strh	r3, [r7, #2]
  uint32_t index = 0;
 8002376:	2300      	movs	r3, #0
 8002378:	60fb      	str	r3, [r7, #12]
  
  if(lcd_drv->DrawHLine != NULL)
 800237a:	4b15      	ldr	r3, [pc, #84]	; (80023d0 <BSP_LCD_DrawHLine+0x6c>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	6a1b      	ldr	r3, [r3, #32]
 8002380:	2b00      	cmp	r3, #0
 8002382:	d00a      	beq.n	800239a <BSP_LCD_DrawHLine+0x36>
  {
    lcd_drv->DrawHLine(DrawProp.TextColor, Xpos, Ypos, Length);
 8002384:	4b12      	ldr	r3, [pc, #72]	; (80023d0 <BSP_LCD_DrawHLine+0x6c>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	6a1c      	ldr	r4, [r3, #32]
 800238a:	4b12      	ldr	r3, [pc, #72]	; (80023d4 <BSP_LCD_DrawHLine+0x70>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	b298      	uxth	r0, r3
 8002390:	887b      	ldrh	r3, [r7, #2]
 8002392:	88ba      	ldrh	r2, [r7, #4]
 8002394:	88f9      	ldrh	r1, [r7, #6]
 8002396:	47a0      	blx	r4
    for(index = 0; index < Length; index++)
    {
      BSP_LCD_DrawPixel((Xpos + index), Ypos, DrawProp.TextColor);
    }
  }
}
 8002398:	e015      	b.n	80023c6 <BSP_LCD_DrawHLine+0x62>
    for(index = 0; index < Length; index++)
 800239a:	2300      	movs	r3, #0
 800239c:	60fb      	str	r3, [r7, #12]
 800239e:	e00e      	b.n	80023be <BSP_LCD_DrawHLine+0x5a>
      BSP_LCD_DrawPixel((Xpos + index), Ypos, DrawProp.TextColor);
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	b29a      	uxth	r2, r3
 80023a4:	88fb      	ldrh	r3, [r7, #6]
 80023a6:	4413      	add	r3, r2
 80023a8:	b29b      	uxth	r3, r3
 80023aa:	4a0a      	ldr	r2, [pc, #40]	; (80023d4 <BSP_LCD_DrawHLine+0x70>)
 80023ac:	6812      	ldr	r2, [r2, #0]
 80023ae:	b292      	uxth	r2, r2
 80023b0:	88b9      	ldrh	r1, [r7, #4]
 80023b2:	4618      	mov	r0, r3
 80023b4:	f7ff ffba 	bl	800232c <BSP_LCD_DrawPixel>
    for(index = 0; index < Length; index++)
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	3301      	adds	r3, #1
 80023bc:	60fb      	str	r3, [r7, #12]
 80023be:	887b      	ldrh	r3, [r7, #2]
 80023c0:	68fa      	ldr	r2, [r7, #12]
 80023c2:	429a      	cmp	r2, r3
 80023c4:	d3ec      	bcc.n	80023a0 <BSP_LCD_DrawHLine+0x3c>
}
 80023c6:	bf00      	nop
 80023c8:	3714      	adds	r7, #20
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bd90      	pop	{r4, r7, pc}
 80023ce:	bf00      	nop
 80023d0:	20000690 	.word	0x20000690
 80023d4:	20000684 	.word	0x20000684

080023d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80023dc:	4b0e      	ldr	r3, [pc, #56]	; (8002418 <HAL_Init+0x40>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	4a0d      	ldr	r2, [pc, #52]	; (8002418 <HAL_Init+0x40>)
 80023e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80023e6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80023e8:	4b0b      	ldr	r3, [pc, #44]	; (8002418 <HAL_Init+0x40>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	4a0a      	ldr	r2, [pc, #40]	; (8002418 <HAL_Init+0x40>)
 80023ee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80023f2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80023f4:	4b08      	ldr	r3, [pc, #32]	; (8002418 <HAL_Init+0x40>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	4a07      	ldr	r2, [pc, #28]	; (8002418 <HAL_Init+0x40>)
 80023fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023fe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002400:	2003      	movs	r0, #3
 8002402:	f000 fbb1 	bl	8002b68 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002406:	2000      	movs	r0, #0
 8002408:	f000 f808 	bl	800241c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800240c:	f7fe fe50 	bl	80010b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002410:	2300      	movs	r3, #0
}
 8002412:	4618      	mov	r0, r3
 8002414:	bd80      	pop	{r7, pc}
 8002416:	bf00      	nop
 8002418:	40023c00 	.word	0x40023c00

0800241c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b082      	sub	sp, #8
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002424:	4b12      	ldr	r3, [pc, #72]	; (8002470 <HAL_InitTick+0x54>)
 8002426:	681a      	ldr	r2, [r3, #0]
 8002428:	4b12      	ldr	r3, [pc, #72]	; (8002474 <HAL_InitTick+0x58>)
 800242a:	781b      	ldrb	r3, [r3, #0]
 800242c:	4619      	mov	r1, r3
 800242e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002432:	fbb3 f3f1 	udiv	r3, r3, r1
 8002436:	fbb2 f3f3 	udiv	r3, r2, r3
 800243a:	4618      	mov	r0, r3
 800243c:	f000 fbc9 	bl	8002bd2 <HAL_SYSTICK_Config>
 8002440:	4603      	mov	r3, r0
 8002442:	2b00      	cmp	r3, #0
 8002444:	d001      	beq.n	800244a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002446:	2301      	movs	r3, #1
 8002448:	e00e      	b.n	8002468 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	2b0f      	cmp	r3, #15
 800244e:	d80a      	bhi.n	8002466 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002450:	2200      	movs	r2, #0
 8002452:	6879      	ldr	r1, [r7, #4]
 8002454:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002458:	f000 fb91 	bl	8002b7e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800245c:	4a06      	ldr	r2, [pc, #24]	; (8002478 <HAL_InitTick+0x5c>)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002462:	2300      	movs	r3, #0
 8002464:	e000      	b.n	8002468 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002466:	2301      	movs	r3, #1
}
 8002468:	4618      	mov	r0, r3
 800246a:	3708      	adds	r7, #8
 800246c:	46bd      	mov	sp, r7
 800246e:	bd80      	pop	{r7, pc}
 8002470:	20000000 	.word	0x20000000
 8002474:	20000064 	.word	0x20000064
 8002478:	20000060 	.word	0x20000060

0800247c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800247c:	b480      	push	{r7}
 800247e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002480:	4b06      	ldr	r3, [pc, #24]	; (800249c <HAL_IncTick+0x20>)
 8002482:	781b      	ldrb	r3, [r3, #0]
 8002484:	461a      	mov	r2, r3
 8002486:	4b06      	ldr	r3, [pc, #24]	; (80024a0 <HAL_IncTick+0x24>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	4413      	add	r3, r2
 800248c:	4a04      	ldr	r2, [pc, #16]	; (80024a0 <HAL_IncTick+0x24>)
 800248e:	6013      	str	r3, [r2, #0]
}
 8002490:	bf00      	nop
 8002492:	46bd      	mov	sp, r7
 8002494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002498:	4770      	bx	lr
 800249a:	bf00      	nop
 800249c:	20000064 	.word	0x20000064
 80024a0:	20000694 	.word	0x20000694

080024a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80024a4:	b480      	push	{r7}
 80024a6:	af00      	add	r7, sp, #0
  return uwTick;
 80024a8:	4b03      	ldr	r3, [pc, #12]	; (80024b8 <HAL_GetTick+0x14>)
 80024aa:	681b      	ldr	r3, [r3, #0]
}
 80024ac:	4618      	mov	r0, r3
 80024ae:	46bd      	mov	sp, r7
 80024b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b4:	4770      	bx	lr
 80024b6:	bf00      	nop
 80024b8:	20000694 	.word	0x20000694

080024bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b084      	sub	sp, #16
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80024c4:	f7ff ffee 	bl	80024a4 <HAL_GetTick>
 80024c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80024d4:	d005      	beq.n	80024e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80024d6:	4b0a      	ldr	r3, [pc, #40]	; (8002500 <HAL_Delay+0x44>)
 80024d8:	781b      	ldrb	r3, [r3, #0]
 80024da:	461a      	mov	r2, r3
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	4413      	add	r3, r2
 80024e0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80024e2:	bf00      	nop
 80024e4:	f7ff ffde 	bl	80024a4 <HAL_GetTick>
 80024e8:	4602      	mov	r2, r0
 80024ea:	68bb      	ldr	r3, [r7, #8]
 80024ec:	1ad3      	subs	r3, r2, r3
 80024ee:	68fa      	ldr	r2, [r7, #12]
 80024f0:	429a      	cmp	r2, r3
 80024f2:	d8f7      	bhi.n	80024e4 <HAL_Delay+0x28>
  {
  }
}
 80024f4:	bf00      	nop
 80024f6:	bf00      	nop
 80024f8:	3710      	adds	r7, #16
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bd80      	pop	{r7, pc}
 80024fe:	bf00      	nop
 8002500:	20000064 	.word	0x20000064

08002504 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b084      	sub	sp, #16
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800250c:	2300      	movs	r3, #0
 800250e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2b00      	cmp	r3, #0
 8002514:	d101      	bne.n	800251a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002516:	2301      	movs	r3, #1
 8002518:	e033      	b.n	8002582 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800251e:	2b00      	cmp	r3, #0
 8002520:	d109      	bne.n	8002536 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002522:	6878      	ldr	r0, [r7, #4]
 8002524:	f7fe fdec 	bl	8001100 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2200      	movs	r2, #0
 800252c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	2200      	movs	r2, #0
 8002532:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800253a:	f003 0310 	and.w	r3, r3, #16
 800253e:	2b00      	cmp	r3, #0
 8002540:	d118      	bne.n	8002574 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002546:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800254a:	f023 0302 	bic.w	r3, r3, #2
 800254e:	f043 0202 	orr.w	r2, r3, #2
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002556:	6878      	ldr	r0, [r7, #4]
 8002558:	f000 f93a 	bl	80027d0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2200      	movs	r2, #0
 8002560:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002566:	f023 0303 	bic.w	r3, r3, #3
 800256a:	f043 0201 	orr.w	r2, r3, #1
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	641a      	str	r2, [r3, #64]	; 0x40
 8002572:	e001      	b.n	8002578 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002574:	2301      	movs	r3, #1
 8002576:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2200      	movs	r2, #0
 800257c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002580:	7bfb      	ldrb	r3, [r7, #15]
}
 8002582:	4618      	mov	r0, r3
 8002584:	3710      	adds	r7, #16
 8002586:	46bd      	mov	sp, r7
 8002588:	bd80      	pop	{r7, pc}
	...

0800258c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800258c:	b480      	push	{r7}
 800258e:	b085      	sub	sp, #20
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
 8002594:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002596:	2300      	movs	r3, #0
 8002598:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80025a0:	2b01      	cmp	r3, #1
 80025a2:	d101      	bne.n	80025a8 <HAL_ADC_ConfigChannel+0x1c>
 80025a4:	2302      	movs	r3, #2
 80025a6:	e105      	b.n	80027b4 <HAL_ADC_ConfigChannel+0x228>
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2201      	movs	r2, #1
 80025ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	2b09      	cmp	r3, #9
 80025b6:	d925      	bls.n	8002604 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	68d9      	ldr	r1, [r3, #12]
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	b29b      	uxth	r3, r3
 80025c4:	461a      	mov	r2, r3
 80025c6:	4613      	mov	r3, r2
 80025c8:	005b      	lsls	r3, r3, #1
 80025ca:	4413      	add	r3, r2
 80025cc:	3b1e      	subs	r3, #30
 80025ce:	2207      	movs	r2, #7
 80025d0:	fa02 f303 	lsl.w	r3, r2, r3
 80025d4:	43da      	mvns	r2, r3
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	400a      	ands	r2, r1
 80025dc:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	68d9      	ldr	r1, [r3, #12]
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	689a      	ldr	r2, [r3, #8]
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	b29b      	uxth	r3, r3
 80025ee:	4618      	mov	r0, r3
 80025f0:	4603      	mov	r3, r0
 80025f2:	005b      	lsls	r3, r3, #1
 80025f4:	4403      	add	r3, r0
 80025f6:	3b1e      	subs	r3, #30
 80025f8:	409a      	lsls	r2, r3
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	430a      	orrs	r2, r1
 8002600:	60da      	str	r2, [r3, #12]
 8002602:	e022      	b.n	800264a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	6919      	ldr	r1, [r3, #16]
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	b29b      	uxth	r3, r3
 8002610:	461a      	mov	r2, r3
 8002612:	4613      	mov	r3, r2
 8002614:	005b      	lsls	r3, r3, #1
 8002616:	4413      	add	r3, r2
 8002618:	2207      	movs	r2, #7
 800261a:	fa02 f303 	lsl.w	r3, r2, r3
 800261e:	43da      	mvns	r2, r3
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	400a      	ands	r2, r1
 8002626:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	6919      	ldr	r1, [r3, #16]
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	689a      	ldr	r2, [r3, #8]
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	b29b      	uxth	r3, r3
 8002638:	4618      	mov	r0, r3
 800263a:	4603      	mov	r3, r0
 800263c:	005b      	lsls	r3, r3, #1
 800263e:	4403      	add	r3, r0
 8002640:	409a      	lsls	r2, r3
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	430a      	orrs	r2, r1
 8002648:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	685b      	ldr	r3, [r3, #4]
 800264e:	2b06      	cmp	r3, #6
 8002650:	d824      	bhi.n	800269c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	685a      	ldr	r2, [r3, #4]
 800265c:	4613      	mov	r3, r2
 800265e:	009b      	lsls	r3, r3, #2
 8002660:	4413      	add	r3, r2
 8002662:	3b05      	subs	r3, #5
 8002664:	221f      	movs	r2, #31
 8002666:	fa02 f303 	lsl.w	r3, r2, r3
 800266a:	43da      	mvns	r2, r3
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	400a      	ands	r2, r1
 8002672:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	b29b      	uxth	r3, r3
 8002680:	4618      	mov	r0, r3
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	685a      	ldr	r2, [r3, #4]
 8002686:	4613      	mov	r3, r2
 8002688:	009b      	lsls	r3, r3, #2
 800268a:	4413      	add	r3, r2
 800268c:	3b05      	subs	r3, #5
 800268e:	fa00 f203 	lsl.w	r2, r0, r3
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	430a      	orrs	r2, r1
 8002698:	635a      	str	r2, [r3, #52]	; 0x34
 800269a:	e04c      	b.n	8002736 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	685b      	ldr	r3, [r3, #4]
 80026a0:	2b0c      	cmp	r3, #12
 80026a2:	d824      	bhi.n	80026ee <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	685a      	ldr	r2, [r3, #4]
 80026ae:	4613      	mov	r3, r2
 80026b0:	009b      	lsls	r3, r3, #2
 80026b2:	4413      	add	r3, r2
 80026b4:	3b23      	subs	r3, #35	; 0x23
 80026b6:	221f      	movs	r2, #31
 80026b8:	fa02 f303 	lsl.w	r3, r2, r3
 80026bc:	43da      	mvns	r2, r3
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	400a      	ands	r2, r1
 80026c4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	b29b      	uxth	r3, r3
 80026d2:	4618      	mov	r0, r3
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	685a      	ldr	r2, [r3, #4]
 80026d8:	4613      	mov	r3, r2
 80026da:	009b      	lsls	r3, r3, #2
 80026dc:	4413      	add	r3, r2
 80026de:	3b23      	subs	r3, #35	; 0x23
 80026e0:	fa00 f203 	lsl.w	r2, r0, r3
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	430a      	orrs	r2, r1
 80026ea:	631a      	str	r2, [r3, #48]	; 0x30
 80026ec:	e023      	b.n	8002736 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	685a      	ldr	r2, [r3, #4]
 80026f8:	4613      	mov	r3, r2
 80026fa:	009b      	lsls	r3, r3, #2
 80026fc:	4413      	add	r3, r2
 80026fe:	3b41      	subs	r3, #65	; 0x41
 8002700:	221f      	movs	r2, #31
 8002702:	fa02 f303 	lsl.w	r3, r2, r3
 8002706:	43da      	mvns	r2, r3
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	400a      	ands	r2, r1
 800270e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	b29b      	uxth	r3, r3
 800271c:	4618      	mov	r0, r3
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	685a      	ldr	r2, [r3, #4]
 8002722:	4613      	mov	r3, r2
 8002724:	009b      	lsls	r3, r3, #2
 8002726:	4413      	add	r3, r2
 8002728:	3b41      	subs	r3, #65	; 0x41
 800272a:	fa00 f203 	lsl.w	r2, r0, r3
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	430a      	orrs	r2, r1
 8002734:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002736:	4b22      	ldr	r3, [pc, #136]	; (80027c0 <HAL_ADC_ConfigChannel+0x234>)
 8002738:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	4a21      	ldr	r2, [pc, #132]	; (80027c4 <HAL_ADC_ConfigChannel+0x238>)
 8002740:	4293      	cmp	r3, r2
 8002742:	d109      	bne.n	8002758 <HAL_ADC_ConfigChannel+0x1cc>
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	2b12      	cmp	r3, #18
 800274a:	d105      	bne.n	8002758 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	4a19      	ldr	r2, [pc, #100]	; (80027c4 <HAL_ADC_ConfigChannel+0x238>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d123      	bne.n	80027aa <HAL_ADC_ConfigChannel+0x21e>
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	2b10      	cmp	r3, #16
 8002768:	d003      	beq.n	8002772 <HAL_ADC_ConfigChannel+0x1e6>
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	2b11      	cmp	r3, #17
 8002770:	d11b      	bne.n	80027aa <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	685b      	ldr	r3, [r3, #4]
 8002776:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	2b10      	cmp	r3, #16
 8002784:	d111      	bne.n	80027aa <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002786:	4b10      	ldr	r3, [pc, #64]	; (80027c8 <HAL_ADC_ConfigChannel+0x23c>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	4a10      	ldr	r2, [pc, #64]	; (80027cc <HAL_ADC_ConfigChannel+0x240>)
 800278c:	fba2 2303 	umull	r2, r3, r2, r3
 8002790:	0c9a      	lsrs	r2, r3, #18
 8002792:	4613      	mov	r3, r2
 8002794:	009b      	lsls	r3, r3, #2
 8002796:	4413      	add	r3, r2
 8002798:	005b      	lsls	r3, r3, #1
 800279a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800279c:	e002      	b.n	80027a4 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800279e:	68bb      	ldr	r3, [r7, #8]
 80027a0:	3b01      	subs	r3, #1
 80027a2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80027a4:	68bb      	ldr	r3, [r7, #8]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d1f9      	bne.n	800279e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	2200      	movs	r2, #0
 80027ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80027b2:	2300      	movs	r3, #0
}
 80027b4:	4618      	mov	r0, r3
 80027b6:	3714      	adds	r7, #20
 80027b8:	46bd      	mov	sp, r7
 80027ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027be:	4770      	bx	lr
 80027c0:	40012300 	.word	0x40012300
 80027c4:	40012000 	.word	0x40012000
 80027c8:	20000000 	.word	0x20000000
 80027cc:	431bde83 	.word	0x431bde83

080027d0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80027d0:	b480      	push	{r7}
 80027d2:	b085      	sub	sp, #20
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80027d8:	4b79      	ldr	r3, [pc, #484]	; (80029c0 <ADC_Init+0x1f0>)
 80027da:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	685b      	ldr	r3, [r3, #4]
 80027e0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	685a      	ldr	r2, [r3, #4]
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	431a      	orrs	r2, r3
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	685a      	ldr	r2, [r3, #4]
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002804:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	6859      	ldr	r1, [r3, #4]
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	691b      	ldr	r3, [r3, #16]
 8002810:	021a      	lsls	r2, r3, #8
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	430a      	orrs	r2, r1
 8002818:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	685a      	ldr	r2, [r3, #4]
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002828:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	6859      	ldr	r1, [r3, #4]
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	689a      	ldr	r2, [r3, #8]
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	430a      	orrs	r2, r1
 800283a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	689a      	ldr	r2, [r3, #8]
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800284a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	6899      	ldr	r1, [r3, #8]
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	68da      	ldr	r2, [r3, #12]
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	430a      	orrs	r2, r1
 800285c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002862:	4a58      	ldr	r2, [pc, #352]	; (80029c4 <ADC_Init+0x1f4>)
 8002864:	4293      	cmp	r3, r2
 8002866:	d022      	beq.n	80028ae <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	689a      	ldr	r2, [r3, #8]
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002876:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	6899      	ldr	r1, [r3, #8]
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	430a      	orrs	r2, r1
 8002888:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	689a      	ldr	r2, [r3, #8]
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002898:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	6899      	ldr	r1, [r3, #8]
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	430a      	orrs	r2, r1
 80028aa:	609a      	str	r2, [r3, #8]
 80028ac:	e00f      	b.n	80028ce <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	689a      	ldr	r2, [r3, #8]
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80028bc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	689a      	ldr	r2, [r3, #8]
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80028cc:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	689a      	ldr	r2, [r3, #8]
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f022 0202 	bic.w	r2, r2, #2
 80028dc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	6899      	ldr	r1, [r3, #8]
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	7e1b      	ldrb	r3, [r3, #24]
 80028e8:	005a      	lsls	r2, r3, #1
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	430a      	orrs	r2, r1
 80028f0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d01b      	beq.n	8002934 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	685a      	ldr	r2, [r3, #4]
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800290a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	685a      	ldr	r2, [r3, #4]
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800291a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	6859      	ldr	r1, [r3, #4]
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002926:	3b01      	subs	r3, #1
 8002928:	035a      	lsls	r2, r3, #13
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	430a      	orrs	r2, r1
 8002930:	605a      	str	r2, [r3, #4]
 8002932:	e007      	b.n	8002944 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	685a      	ldr	r2, [r3, #4]
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002942:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002952:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	69db      	ldr	r3, [r3, #28]
 800295e:	3b01      	subs	r3, #1
 8002960:	051a      	lsls	r2, r3, #20
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	430a      	orrs	r2, r1
 8002968:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	689a      	ldr	r2, [r3, #8]
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002978:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	6899      	ldr	r1, [r3, #8]
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002986:	025a      	lsls	r2, r3, #9
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	430a      	orrs	r2, r1
 800298e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	689a      	ldr	r2, [r3, #8]
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800299e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	6899      	ldr	r1, [r3, #8]
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	695b      	ldr	r3, [r3, #20]
 80029aa:	029a      	lsls	r2, r3, #10
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	430a      	orrs	r2, r1
 80029b2:	609a      	str	r2, [r3, #8]
}
 80029b4:	bf00      	nop
 80029b6:	3714      	adds	r7, #20
 80029b8:	46bd      	mov	sp, r7
 80029ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029be:	4770      	bx	lr
 80029c0:	40012300 	.word	0x40012300
 80029c4:	0f000001 	.word	0x0f000001

080029c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029c8:	b480      	push	{r7}
 80029ca:	b085      	sub	sp, #20
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	f003 0307 	and.w	r3, r3, #7
 80029d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80029d8:	4b0c      	ldr	r3, [pc, #48]	; (8002a0c <__NVIC_SetPriorityGrouping+0x44>)
 80029da:	68db      	ldr	r3, [r3, #12]
 80029dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80029de:	68ba      	ldr	r2, [r7, #8]
 80029e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80029e4:	4013      	ands	r3, r2
 80029e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80029ec:	68bb      	ldr	r3, [r7, #8]
 80029ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80029f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80029f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80029fa:	4a04      	ldr	r2, [pc, #16]	; (8002a0c <__NVIC_SetPriorityGrouping+0x44>)
 80029fc:	68bb      	ldr	r3, [r7, #8]
 80029fe:	60d3      	str	r3, [r2, #12]
}
 8002a00:	bf00      	nop
 8002a02:	3714      	adds	r7, #20
 8002a04:	46bd      	mov	sp, r7
 8002a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0a:	4770      	bx	lr
 8002a0c:	e000ed00 	.word	0xe000ed00

08002a10 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002a10:	b480      	push	{r7}
 8002a12:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a14:	4b04      	ldr	r3, [pc, #16]	; (8002a28 <__NVIC_GetPriorityGrouping+0x18>)
 8002a16:	68db      	ldr	r3, [r3, #12]
 8002a18:	0a1b      	lsrs	r3, r3, #8
 8002a1a:	f003 0307 	and.w	r3, r3, #7
}
 8002a1e:	4618      	mov	r0, r3
 8002a20:	46bd      	mov	sp, r7
 8002a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a26:	4770      	bx	lr
 8002a28:	e000ed00 	.word	0xe000ed00

08002a2c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	b083      	sub	sp, #12
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	4603      	mov	r3, r0
 8002a34:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	db0b      	blt.n	8002a56 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a3e:	79fb      	ldrb	r3, [r7, #7]
 8002a40:	f003 021f 	and.w	r2, r3, #31
 8002a44:	4907      	ldr	r1, [pc, #28]	; (8002a64 <__NVIC_EnableIRQ+0x38>)
 8002a46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a4a:	095b      	lsrs	r3, r3, #5
 8002a4c:	2001      	movs	r0, #1
 8002a4e:	fa00 f202 	lsl.w	r2, r0, r2
 8002a52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002a56:	bf00      	nop
 8002a58:	370c      	adds	r7, #12
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a60:	4770      	bx	lr
 8002a62:	bf00      	nop
 8002a64:	e000e100 	.word	0xe000e100

08002a68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002a68:	b480      	push	{r7}
 8002a6a:	b083      	sub	sp, #12
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	4603      	mov	r3, r0
 8002a70:	6039      	str	r1, [r7, #0]
 8002a72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	db0a      	blt.n	8002a92 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	b2da      	uxtb	r2, r3
 8002a80:	490c      	ldr	r1, [pc, #48]	; (8002ab4 <__NVIC_SetPriority+0x4c>)
 8002a82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a86:	0112      	lsls	r2, r2, #4
 8002a88:	b2d2      	uxtb	r2, r2
 8002a8a:	440b      	add	r3, r1
 8002a8c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002a90:	e00a      	b.n	8002aa8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	b2da      	uxtb	r2, r3
 8002a96:	4908      	ldr	r1, [pc, #32]	; (8002ab8 <__NVIC_SetPriority+0x50>)
 8002a98:	79fb      	ldrb	r3, [r7, #7]
 8002a9a:	f003 030f 	and.w	r3, r3, #15
 8002a9e:	3b04      	subs	r3, #4
 8002aa0:	0112      	lsls	r2, r2, #4
 8002aa2:	b2d2      	uxtb	r2, r2
 8002aa4:	440b      	add	r3, r1
 8002aa6:	761a      	strb	r2, [r3, #24]
}
 8002aa8:	bf00      	nop
 8002aaa:	370c      	adds	r7, #12
 8002aac:	46bd      	mov	sp, r7
 8002aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab2:	4770      	bx	lr
 8002ab4:	e000e100 	.word	0xe000e100
 8002ab8:	e000ed00 	.word	0xe000ed00

08002abc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002abc:	b480      	push	{r7}
 8002abe:	b089      	sub	sp, #36	; 0x24
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	60f8      	str	r0, [r7, #12]
 8002ac4:	60b9      	str	r1, [r7, #8]
 8002ac6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	f003 0307 	and.w	r3, r3, #7
 8002ace:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ad0:	69fb      	ldr	r3, [r7, #28]
 8002ad2:	f1c3 0307 	rsb	r3, r3, #7
 8002ad6:	2b04      	cmp	r3, #4
 8002ad8:	bf28      	it	cs
 8002ada:	2304      	movcs	r3, #4
 8002adc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002ade:	69fb      	ldr	r3, [r7, #28]
 8002ae0:	3304      	adds	r3, #4
 8002ae2:	2b06      	cmp	r3, #6
 8002ae4:	d902      	bls.n	8002aec <NVIC_EncodePriority+0x30>
 8002ae6:	69fb      	ldr	r3, [r7, #28]
 8002ae8:	3b03      	subs	r3, #3
 8002aea:	e000      	b.n	8002aee <NVIC_EncodePriority+0x32>
 8002aec:	2300      	movs	r3, #0
 8002aee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002af0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002af4:	69bb      	ldr	r3, [r7, #24]
 8002af6:	fa02 f303 	lsl.w	r3, r2, r3
 8002afa:	43da      	mvns	r2, r3
 8002afc:	68bb      	ldr	r3, [r7, #8]
 8002afe:	401a      	ands	r2, r3
 8002b00:	697b      	ldr	r3, [r7, #20]
 8002b02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b04:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002b08:	697b      	ldr	r3, [r7, #20]
 8002b0a:	fa01 f303 	lsl.w	r3, r1, r3
 8002b0e:	43d9      	mvns	r1, r3
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b14:	4313      	orrs	r3, r2
         );
}
 8002b16:	4618      	mov	r0, r3
 8002b18:	3724      	adds	r7, #36	; 0x24
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b20:	4770      	bx	lr
	...

08002b24 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b082      	sub	sp, #8
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	3b01      	subs	r3, #1
 8002b30:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002b34:	d301      	bcc.n	8002b3a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002b36:	2301      	movs	r3, #1
 8002b38:	e00f      	b.n	8002b5a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002b3a:	4a0a      	ldr	r2, [pc, #40]	; (8002b64 <SysTick_Config+0x40>)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	3b01      	subs	r3, #1
 8002b40:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002b42:	210f      	movs	r1, #15
 8002b44:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002b48:	f7ff ff8e 	bl	8002a68 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002b4c:	4b05      	ldr	r3, [pc, #20]	; (8002b64 <SysTick_Config+0x40>)
 8002b4e:	2200      	movs	r2, #0
 8002b50:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b52:	4b04      	ldr	r3, [pc, #16]	; (8002b64 <SysTick_Config+0x40>)
 8002b54:	2207      	movs	r2, #7
 8002b56:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002b58:	2300      	movs	r3, #0
}
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	3708      	adds	r7, #8
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	bd80      	pop	{r7, pc}
 8002b62:	bf00      	nop
 8002b64:	e000e010 	.word	0xe000e010

08002b68 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b082      	sub	sp, #8
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b70:	6878      	ldr	r0, [r7, #4]
 8002b72:	f7ff ff29 	bl	80029c8 <__NVIC_SetPriorityGrouping>
}
 8002b76:	bf00      	nop
 8002b78:	3708      	adds	r7, #8
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	bd80      	pop	{r7, pc}

08002b7e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002b7e:	b580      	push	{r7, lr}
 8002b80:	b086      	sub	sp, #24
 8002b82:	af00      	add	r7, sp, #0
 8002b84:	4603      	mov	r3, r0
 8002b86:	60b9      	str	r1, [r7, #8]
 8002b88:	607a      	str	r2, [r7, #4]
 8002b8a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002b90:	f7ff ff3e 	bl	8002a10 <__NVIC_GetPriorityGrouping>
 8002b94:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b96:	687a      	ldr	r2, [r7, #4]
 8002b98:	68b9      	ldr	r1, [r7, #8]
 8002b9a:	6978      	ldr	r0, [r7, #20]
 8002b9c:	f7ff ff8e 	bl	8002abc <NVIC_EncodePriority>
 8002ba0:	4602      	mov	r2, r0
 8002ba2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ba6:	4611      	mov	r1, r2
 8002ba8:	4618      	mov	r0, r3
 8002baa:	f7ff ff5d 	bl	8002a68 <__NVIC_SetPriority>
}
 8002bae:	bf00      	nop
 8002bb0:	3718      	adds	r7, #24
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	bd80      	pop	{r7, pc}

08002bb6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002bb6:	b580      	push	{r7, lr}
 8002bb8:	b082      	sub	sp, #8
 8002bba:	af00      	add	r7, sp, #0
 8002bbc:	4603      	mov	r3, r0
 8002bbe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002bc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	f7ff ff31 	bl	8002a2c <__NVIC_EnableIRQ>
}
 8002bca:	bf00      	nop
 8002bcc:	3708      	adds	r7, #8
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	bd80      	pop	{r7, pc}

08002bd2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002bd2:	b580      	push	{r7, lr}
 8002bd4:	b082      	sub	sp, #8
 8002bd6:	af00      	add	r7, sp, #0
 8002bd8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002bda:	6878      	ldr	r0, [r7, #4]
 8002bdc:	f7ff ffa2 	bl	8002b24 <SysTick_Config>
 8002be0:	4603      	mov	r3, r0
}
 8002be2:	4618      	mov	r0, r3
 8002be4:	3708      	adds	r7, #8
 8002be6:	46bd      	mov	sp, r7
 8002be8:	bd80      	pop	{r7, pc}

08002bea <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8002bea:	b580      	push	{r7, lr}
 8002bec:	b082      	sub	sp, #8
 8002bee:	af00      	add	r7, sp, #0
 8002bf0:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d101      	bne.n	8002bfc <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8002bf8:	2301      	movs	r3, #1
 8002bfa:	e014      	b.n	8002c26 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	791b      	ldrb	r3, [r3, #4]
 8002c00:	b2db      	uxtb	r3, r3
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d105      	bne.n	8002c12 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	2200      	movs	r2, #0
 8002c0a:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002c0c:	6878      	ldr	r0, [r7, #4]
 8002c0e:	f7fe fabb 	bl	8001188 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	2202      	movs	r2, #2
 8002c16:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	2201      	movs	r2, #1
 8002c22:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002c24:	2300      	movs	r3, #0
}
 8002c26:	4618      	mov	r0, r3
 8002c28:	3708      	adds	r7, #8
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bd80      	pop	{r7, pc}

08002c2e <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8002c2e:	b480      	push	{r7}
 8002c30:	b087      	sub	sp, #28
 8002c32:	af00      	add	r7, sp, #0
 8002c34:	60f8      	str	r0, [r7, #12]
 8002c36:	60b9      	str	r1, [r7, #8]
 8002c38:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	795b      	ldrb	r3, [r3, #5]
 8002c3e:	2b01      	cmp	r3, #1
 8002c40:	d101      	bne.n	8002c46 <HAL_DAC_ConfigChannel+0x18>
 8002c42:	2302      	movs	r3, #2
 8002c44:	e03c      	b.n	8002cc0 <HAL_DAC_ConfigChannel+0x92>
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	2201      	movs	r2, #1
 8002c4a:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	2202      	movs	r2, #2
 8002c50:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	f003 0310 	and.w	r3, r3, #16
 8002c60:	f640 72fe 	movw	r2, #4094	; 0xffe
 8002c64:	fa02 f303 	lsl.w	r3, r2, r3
 8002c68:	43db      	mvns	r3, r3
 8002c6a:	697a      	ldr	r2, [r7, #20]
 8002c6c:	4013      	ands	r3, r2
 8002c6e:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8002c70:	68bb      	ldr	r3, [r7, #8]
 8002c72:	681a      	ldr	r2, [r3, #0]
 8002c74:	68bb      	ldr	r3, [r7, #8]
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	4313      	orrs	r3, r2
 8002c7a:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	f003 0310 	and.w	r3, r3, #16
 8002c82:	693a      	ldr	r2, [r7, #16]
 8002c84:	fa02 f303 	lsl.w	r3, r2, r3
 8002c88:	697a      	ldr	r2, [r7, #20]
 8002c8a:	4313      	orrs	r3, r2
 8002c8c:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	697a      	ldr	r2, [r7, #20]
 8002c94:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	6819      	ldr	r1, [r3, #0]
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	f003 0310 	and.w	r3, r3, #16
 8002ca2:	22c0      	movs	r2, #192	; 0xc0
 8002ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca8:	43da      	mvns	r2, r3
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	400a      	ands	r2, r1
 8002cb0:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	2201      	movs	r2, #1
 8002cb6:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	2200      	movs	r2, #0
 8002cbc:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002cbe:	2300      	movs	r3, #0
}
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	371c      	adds	r7, #28
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cca:	4770      	bx	lr

08002ccc <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b082      	sub	sp, #8
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if(hdcmi == NULL)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d101      	bne.n	8002cde <HAL_DCMI_Init+0x12>
  {
     return HAL_ERROR;
 8002cda:	2301      	movs	r3, #1
 8002cdc:	e05f      	b.n	8002d9e <HAL_DCMI_Init+0xd2>
  assert_param(IS_DCMI_BYTE_SELECT_MODE(hdcmi->Init.ByteSelectMode));
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));
#endif /* STM32F446xx || STM32F469xx || STM32F479xx */
  if(hdcmi->State == HAL_DCMI_STATE_RESET)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002ce4:	b2db      	uxtb	r3, r3
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d109      	bne.n	8002cfe <HAL_DCMI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hdcmi->Lock = HAL_UNLOCKED;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	2200      	movs	r2, #0
 8002cee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 8002cf2:	6878      	ldr	r0, [r7, #4]
 8002cf4:	f7fe fa8c 	bl	8001210 <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
    HAL_DCMI_MspInit(hdcmi);
 8002cf8:	6878      	ldr	r0, [r7, #4]
 8002cfa:	f7fe fa89 	bl	8001210 <HAL_DCMI_MspInit>
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	2202      	movs	r2, #2
 8002d02:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
                          /* Configures the HS, VS, DE and PC polarity */
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 |\
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	687a      	ldr	r2, [r7, #4]
 8002d0e:	6812      	ldr	r2, [r2, #0]
 8002d10:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8002d14:	f023 0308 	bic.w	r3, r3, #8
 8002d18:	6013      	str	r3, [r2, #0]
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx)
                           | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS |\
                           DCMI_CR_LSM | DCMI_CR_OELS
#endif /* STM32F446xx || STM32F469xx || STM32F479xx */
                           );
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	6819      	ldr	r1, [r3, #0]
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	685a      	ldr	r2, [r3, #4]
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	695b      	ldr	r3, [r3, #20]
 8002d28:	431a      	orrs	r2, r3
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 8002d2e:	431a      	orrs	r2, r3
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	691b      	ldr	r3, [r3, #16]
 8002d34:	431a      	orrs	r2, r3
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	689b      	ldr	r3, [r3, #8]
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 8002d3a:	431a      	orrs	r2, r3
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	699b      	ldr	r3, [r3, #24]
 8002d40:	431a      	orrs	r2, r3
                                     hdcmi->Init.JPEGMode
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6a1b      	ldr	r3, [r3, #32]
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 8002d46:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	430a      	orrs	r2, r1
 8002d4e:	601a      	str	r2, [r3, #0]
                                     | hdcmi->Init.ByteSelectMode |\
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
                                     hdcmi->Init.LineSelectStart
#endif /* STM32F446xx || STM32F469xx || STM32F479xx */
                                     );
  if(hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	685b      	ldr	r3, [r3, #4]
 8002d54:	2b10      	cmp	r3, #16
 8002d56:	d112      	bne.n	8002d7e <HAL_DCMI_Init+0xb2>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	7f1b      	ldrb	r3, [r3, #28]
 8002d5c:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_POSITION_ESCR_LSC)|
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	7f5b      	ldrb	r3, [r3, #29]
 8002d62:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |
 8002d64:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_POSITION_ESCR_LEC) |
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	7f9b      	ldrb	r3, [r3, #30]
 8002d6a:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_POSITION_ESCR_LSC)|
 8002d6c:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_POSITION_ESCR_FEC));
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	7fdb      	ldrb	r3, [r3, #31]
 8002d74:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_POSITION_ESCR_LEC) |
 8002d7a:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |
 8002d7c:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	68da      	ldr	r2, [r3, #12]
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f042 021e 	orr.w	r2, r2, #30
 8002d8c:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2200      	movs	r2, #0
 8002d92:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2201      	movs	r2, #1
 8002d98:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  return HAL_OK;
 8002d9c:	2300      	movs	r3, #0
}
 8002d9e:	4618      	mov	r0, r3
 8002da0:	3708      	adds	r7, #8
 8002da2:	46bd      	mov	sp, r7
 8002da4:	bd80      	pop	{r7, pc}
	...

08002da8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002da8:	b480      	push	{r7}
 8002daa:	b089      	sub	sp, #36	; 0x24
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
 8002db0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002db2:	2300      	movs	r3, #0
 8002db4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002db6:	2300      	movs	r3, #0
 8002db8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002dba:	2300      	movs	r3, #0
 8002dbc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	61fb      	str	r3, [r7, #28]
 8002dc2:	e16b      	b.n	800309c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002dc4:	2201      	movs	r2, #1
 8002dc6:	69fb      	ldr	r3, [r7, #28]
 8002dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dcc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	697a      	ldr	r2, [r7, #20]
 8002dd4:	4013      	ands	r3, r2
 8002dd6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002dd8:	693a      	ldr	r2, [r7, #16]
 8002dda:	697b      	ldr	r3, [r7, #20]
 8002ddc:	429a      	cmp	r2, r3
 8002dde:	f040 815a 	bne.w	8003096 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	685b      	ldr	r3, [r3, #4]
 8002de6:	f003 0303 	and.w	r3, r3, #3
 8002dea:	2b01      	cmp	r3, #1
 8002dec:	d005      	beq.n	8002dfa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	685b      	ldr	r3, [r3, #4]
 8002df2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002df6:	2b02      	cmp	r3, #2
 8002df8:	d130      	bne.n	8002e5c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	689b      	ldr	r3, [r3, #8]
 8002dfe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002e00:	69fb      	ldr	r3, [r7, #28]
 8002e02:	005b      	lsls	r3, r3, #1
 8002e04:	2203      	movs	r2, #3
 8002e06:	fa02 f303 	lsl.w	r3, r2, r3
 8002e0a:	43db      	mvns	r3, r3
 8002e0c:	69ba      	ldr	r2, [r7, #24]
 8002e0e:	4013      	ands	r3, r2
 8002e10:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	68da      	ldr	r2, [r3, #12]
 8002e16:	69fb      	ldr	r3, [r7, #28]
 8002e18:	005b      	lsls	r3, r3, #1
 8002e1a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e1e:	69ba      	ldr	r2, [r7, #24]
 8002e20:	4313      	orrs	r3, r2
 8002e22:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	69ba      	ldr	r2, [r7, #24]
 8002e28:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	685b      	ldr	r3, [r3, #4]
 8002e2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002e30:	2201      	movs	r2, #1
 8002e32:	69fb      	ldr	r3, [r7, #28]
 8002e34:	fa02 f303 	lsl.w	r3, r2, r3
 8002e38:	43db      	mvns	r3, r3
 8002e3a:	69ba      	ldr	r2, [r7, #24]
 8002e3c:	4013      	ands	r3, r2
 8002e3e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	685b      	ldr	r3, [r3, #4]
 8002e44:	091b      	lsrs	r3, r3, #4
 8002e46:	f003 0201 	and.w	r2, r3, #1
 8002e4a:	69fb      	ldr	r3, [r7, #28]
 8002e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e50:	69ba      	ldr	r2, [r7, #24]
 8002e52:	4313      	orrs	r3, r2
 8002e54:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	69ba      	ldr	r2, [r7, #24]
 8002e5a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	685b      	ldr	r3, [r3, #4]
 8002e60:	f003 0303 	and.w	r3, r3, #3
 8002e64:	2b03      	cmp	r3, #3
 8002e66:	d017      	beq.n	8002e98 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	68db      	ldr	r3, [r3, #12]
 8002e6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002e6e:	69fb      	ldr	r3, [r7, #28]
 8002e70:	005b      	lsls	r3, r3, #1
 8002e72:	2203      	movs	r2, #3
 8002e74:	fa02 f303 	lsl.w	r3, r2, r3
 8002e78:	43db      	mvns	r3, r3
 8002e7a:	69ba      	ldr	r2, [r7, #24]
 8002e7c:	4013      	ands	r3, r2
 8002e7e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	689a      	ldr	r2, [r3, #8]
 8002e84:	69fb      	ldr	r3, [r7, #28]
 8002e86:	005b      	lsls	r3, r3, #1
 8002e88:	fa02 f303 	lsl.w	r3, r2, r3
 8002e8c:	69ba      	ldr	r2, [r7, #24]
 8002e8e:	4313      	orrs	r3, r2
 8002e90:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	69ba      	ldr	r2, [r7, #24]
 8002e96:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	685b      	ldr	r3, [r3, #4]
 8002e9c:	f003 0303 	and.w	r3, r3, #3
 8002ea0:	2b02      	cmp	r3, #2
 8002ea2:	d123      	bne.n	8002eec <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002ea4:	69fb      	ldr	r3, [r7, #28]
 8002ea6:	08da      	lsrs	r2, r3, #3
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	3208      	adds	r2, #8
 8002eac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002eb0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002eb2:	69fb      	ldr	r3, [r7, #28]
 8002eb4:	f003 0307 	and.w	r3, r3, #7
 8002eb8:	009b      	lsls	r3, r3, #2
 8002eba:	220f      	movs	r2, #15
 8002ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec0:	43db      	mvns	r3, r3
 8002ec2:	69ba      	ldr	r2, [r7, #24]
 8002ec4:	4013      	ands	r3, r2
 8002ec6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	691a      	ldr	r2, [r3, #16]
 8002ecc:	69fb      	ldr	r3, [r7, #28]
 8002ece:	f003 0307 	and.w	r3, r3, #7
 8002ed2:	009b      	lsls	r3, r3, #2
 8002ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ed8:	69ba      	ldr	r2, [r7, #24]
 8002eda:	4313      	orrs	r3, r2
 8002edc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002ede:	69fb      	ldr	r3, [r7, #28]
 8002ee0:	08da      	lsrs	r2, r3, #3
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	3208      	adds	r2, #8
 8002ee6:	69b9      	ldr	r1, [r7, #24]
 8002ee8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002ef2:	69fb      	ldr	r3, [r7, #28]
 8002ef4:	005b      	lsls	r3, r3, #1
 8002ef6:	2203      	movs	r2, #3
 8002ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8002efc:	43db      	mvns	r3, r3
 8002efe:	69ba      	ldr	r2, [r7, #24]
 8002f00:	4013      	ands	r3, r2
 8002f02:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	685b      	ldr	r3, [r3, #4]
 8002f08:	f003 0203 	and.w	r2, r3, #3
 8002f0c:	69fb      	ldr	r3, [r7, #28]
 8002f0e:	005b      	lsls	r3, r3, #1
 8002f10:	fa02 f303 	lsl.w	r3, r2, r3
 8002f14:	69ba      	ldr	r2, [r7, #24]
 8002f16:	4313      	orrs	r3, r2
 8002f18:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	69ba      	ldr	r2, [r7, #24]
 8002f1e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	685b      	ldr	r3, [r3, #4]
 8002f24:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	f000 80b4 	beq.w	8003096 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f2e:	2300      	movs	r3, #0
 8002f30:	60fb      	str	r3, [r7, #12]
 8002f32:	4b60      	ldr	r3, [pc, #384]	; (80030b4 <HAL_GPIO_Init+0x30c>)
 8002f34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f36:	4a5f      	ldr	r2, [pc, #380]	; (80030b4 <HAL_GPIO_Init+0x30c>)
 8002f38:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002f3c:	6453      	str	r3, [r2, #68]	; 0x44
 8002f3e:	4b5d      	ldr	r3, [pc, #372]	; (80030b4 <HAL_GPIO_Init+0x30c>)
 8002f40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f46:	60fb      	str	r3, [r7, #12]
 8002f48:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002f4a:	4a5b      	ldr	r2, [pc, #364]	; (80030b8 <HAL_GPIO_Init+0x310>)
 8002f4c:	69fb      	ldr	r3, [r7, #28]
 8002f4e:	089b      	lsrs	r3, r3, #2
 8002f50:	3302      	adds	r3, #2
 8002f52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f56:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002f58:	69fb      	ldr	r3, [r7, #28]
 8002f5a:	f003 0303 	and.w	r3, r3, #3
 8002f5e:	009b      	lsls	r3, r3, #2
 8002f60:	220f      	movs	r2, #15
 8002f62:	fa02 f303 	lsl.w	r3, r2, r3
 8002f66:	43db      	mvns	r3, r3
 8002f68:	69ba      	ldr	r2, [r7, #24]
 8002f6a:	4013      	ands	r3, r2
 8002f6c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	4a52      	ldr	r2, [pc, #328]	; (80030bc <HAL_GPIO_Init+0x314>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d02b      	beq.n	8002fce <HAL_GPIO_Init+0x226>
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	4a51      	ldr	r2, [pc, #324]	; (80030c0 <HAL_GPIO_Init+0x318>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d025      	beq.n	8002fca <HAL_GPIO_Init+0x222>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	4a50      	ldr	r2, [pc, #320]	; (80030c4 <HAL_GPIO_Init+0x31c>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d01f      	beq.n	8002fc6 <HAL_GPIO_Init+0x21e>
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	4a4f      	ldr	r2, [pc, #316]	; (80030c8 <HAL_GPIO_Init+0x320>)
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d019      	beq.n	8002fc2 <HAL_GPIO_Init+0x21a>
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	4a4e      	ldr	r2, [pc, #312]	; (80030cc <HAL_GPIO_Init+0x324>)
 8002f92:	4293      	cmp	r3, r2
 8002f94:	d013      	beq.n	8002fbe <HAL_GPIO_Init+0x216>
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	4a4d      	ldr	r2, [pc, #308]	; (80030d0 <HAL_GPIO_Init+0x328>)
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d00d      	beq.n	8002fba <HAL_GPIO_Init+0x212>
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	4a4c      	ldr	r2, [pc, #304]	; (80030d4 <HAL_GPIO_Init+0x32c>)
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d007      	beq.n	8002fb6 <HAL_GPIO_Init+0x20e>
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	4a4b      	ldr	r2, [pc, #300]	; (80030d8 <HAL_GPIO_Init+0x330>)
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d101      	bne.n	8002fb2 <HAL_GPIO_Init+0x20a>
 8002fae:	2307      	movs	r3, #7
 8002fb0:	e00e      	b.n	8002fd0 <HAL_GPIO_Init+0x228>
 8002fb2:	2308      	movs	r3, #8
 8002fb4:	e00c      	b.n	8002fd0 <HAL_GPIO_Init+0x228>
 8002fb6:	2306      	movs	r3, #6
 8002fb8:	e00a      	b.n	8002fd0 <HAL_GPIO_Init+0x228>
 8002fba:	2305      	movs	r3, #5
 8002fbc:	e008      	b.n	8002fd0 <HAL_GPIO_Init+0x228>
 8002fbe:	2304      	movs	r3, #4
 8002fc0:	e006      	b.n	8002fd0 <HAL_GPIO_Init+0x228>
 8002fc2:	2303      	movs	r3, #3
 8002fc4:	e004      	b.n	8002fd0 <HAL_GPIO_Init+0x228>
 8002fc6:	2302      	movs	r3, #2
 8002fc8:	e002      	b.n	8002fd0 <HAL_GPIO_Init+0x228>
 8002fca:	2301      	movs	r3, #1
 8002fcc:	e000      	b.n	8002fd0 <HAL_GPIO_Init+0x228>
 8002fce:	2300      	movs	r3, #0
 8002fd0:	69fa      	ldr	r2, [r7, #28]
 8002fd2:	f002 0203 	and.w	r2, r2, #3
 8002fd6:	0092      	lsls	r2, r2, #2
 8002fd8:	4093      	lsls	r3, r2
 8002fda:	69ba      	ldr	r2, [r7, #24]
 8002fdc:	4313      	orrs	r3, r2
 8002fde:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002fe0:	4935      	ldr	r1, [pc, #212]	; (80030b8 <HAL_GPIO_Init+0x310>)
 8002fe2:	69fb      	ldr	r3, [r7, #28]
 8002fe4:	089b      	lsrs	r3, r3, #2
 8002fe6:	3302      	adds	r3, #2
 8002fe8:	69ba      	ldr	r2, [r7, #24]
 8002fea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002fee:	4b3b      	ldr	r3, [pc, #236]	; (80030dc <HAL_GPIO_Init+0x334>)
 8002ff0:	689b      	ldr	r3, [r3, #8]
 8002ff2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ff4:	693b      	ldr	r3, [r7, #16]
 8002ff6:	43db      	mvns	r3, r3
 8002ff8:	69ba      	ldr	r2, [r7, #24]
 8002ffa:	4013      	ands	r3, r2
 8002ffc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	685b      	ldr	r3, [r3, #4]
 8003002:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003006:	2b00      	cmp	r3, #0
 8003008:	d003      	beq.n	8003012 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800300a:	69ba      	ldr	r2, [r7, #24]
 800300c:	693b      	ldr	r3, [r7, #16]
 800300e:	4313      	orrs	r3, r2
 8003010:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003012:	4a32      	ldr	r2, [pc, #200]	; (80030dc <HAL_GPIO_Init+0x334>)
 8003014:	69bb      	ldr	r3, [r7, #24]
 8003016:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003018:	4b30      	ldr	r3, [pc, #192]	; (80030dc <HAL_GPIO_Init+0x334>)
 800301a:	68db      	ldr	r3, [r3, #12]
 800301c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800301e:	693b      	ldr	r3, [r7, #16]
 8003020:	43db      	mvns	r3, r3
 8003022:	69ba      	ldr	r2, [r7, #24]
 8003024:	4013      	ands	r3, r2
 8003026:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	685b      	ldr	r3, [r3, #4]
 800302c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003030:	2b00      	cmp	r3, #0
 8003032:	d003      	beq.n	800303c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003034:	69ba      	ldr	r2, [r7, #24]
 8003036:	693b      	ldr	r3, [r7, #16]
 8003038:	4313      	orrs	r3, r2
 800303a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800303c:	4a27      	ldr	r2, [pc, #156]	; (80030dc <HAL_GPIO_Init+0x334>)
 800303e:	69bb      	ldr	r3, [r7, #24]
 8003040:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003042:	4b26      	ldr	r3, [pc, #152]	; (80030dc <HAL_GPIO_Init+0x334>)
 8003044:	685b      	ldr	r3, [r3, #4]
 8003046:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003048:	693b      	ldr	r3, [r7, #16]
 800304a:	43db      	mvns	r3, r3
 800304c:	69ba      	ldr	r2, [r7, #24]
 800304e:	4013      	ands	r3, r2
 8003050:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	685b      	ldr	r3, [r3, #4]
 8003056:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800305a:	2b00      	cmp	r3, #0
 800305c:	d003      	beq.n	8003066 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800305e:	69ba      	ldr	r2, [r7, #24]
 8003060:	693b      	ldr	r3, [r7, #16]
 8003062:	4313      	orrs	r3, r2
 8003064:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003066:	4a1d      	ldr	r2, [pc, #116]	; (80030dc <HAL_GPIO_Init+0x334>)
 8003068:	69bb      	ldr	r3, [r7, #24]
 800306a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800306c:	4b1b      	ldr	r3, [pc, #108]	; (80030dc <HAL_GPIO_Init+0x334>)
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003072:	693b      	ldr	r3, [r7, #16]
 8003074:	43db      	mvns	r3, r3
 8003076:	69ba      	ldr	r2, [r7, #24]
 8003078:	4013      	ands	r3, r2
 800307a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	685b      	ldr	r3, [r3, #4]
 8003080:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003084:	2b00      	cmp	r3, #0
 8003086:	d003      	beq.n	8003090 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003088:	69ba      	ldr	r2, [r7, #24]
 800308a:	693b      	ldr	r3, [r7, #16]
 800308c:	4313      	orrs	r3, r2
 800308e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003090:	4a12      	ldr	r2, [pc, #72]	; (80030dc <HAL_GPIO_Init+0x334>)
 8003092:	69bb      	ldr	r3, [r7, #24]
 8003094:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003096:	69fb      	ldr	r3, [r7, #28]
 8003098:	3301      	adds	r3, #1
 800309a:	61fb      	str	r3, [r7, #28]
 800309c:	69fb      	ldr	r3, [r7, #28]
 800309e:	2b0f      	cmp	r3, #15
 80030a0:	f67f ae90 	bls.w	8002dc4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80030a4:	bf00      	nop
 80030a6:	bf00      	nop
 80030a8:	3724      	adds	r7, #36	; 0x24
 80030aa:	46bd      	mov	sp, r7
 80030ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b0:	4770      	bx	lr
 80030b2:	bf00      	nop
 80030b4:	40023800 	.word	0x40023800
 80030b8:	40013800 	.word	0x40013800
 80030bc:	40020000 	.word	0x40020000
 80030c0:	40020400 	.word	0x40020400
 80030c4:	40020800 	.word	0x40020800
 80030c8:	40020c00 	.word	0x40020c00
 80030cc:	40021000 	.word	0x40021000
 80030d0:	40021400 	.word	0x40021400
 80030d4:	40021800 	.word	0x40021800
 80030d8:	40021c00 	.word	0x40021c00
 80030dc:	40013c00 	.word	0x40013c00

080030e0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80030e0:	b480      	push	{r7}
 80030e2:	b085      	sub	sp, #20
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
 80030e8:	460b      	mov	r3, r1
 80030ea:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	691a      	ldr	r2, [r3, #16]
 80030f0:	887b      	ldrh	r3, [r7, #2]
 80030f2:	4013      	ands	r3, r2
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d002      	beq.n	80030fe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80030f8:	2301      	movs	r3, #1
 80030fa:	73fb      	strb	r3, [r7, #15]
 80030fc:	e001      	b.n	8003102 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80030fe:	2300      	movs	r3, #0
 8003100:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003102:	7bfb      	ldrb	r3, [r7, #15]
}
 8003104:	4618      	mov	r0, r3
 8003106:	3714      	adds	r7, #20
 8003108:	46bd      	mov	sp, r7
 800310a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310e:	4770      	bx	lr

08003110 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003110:	b480      	push	{r7}
 8003112:	b083      	sub	sp, #12
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
 8003118:	460b      	mov	r3, r1
 800311a:	807b      	strh	r3, [r7, #2]
 800311c:	4613      	mov	r3, r2
 800311e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003120:	787b      	ldrb	r3, [r7, #1]
 8003122:	2b00      	cmp	r3, #0
 8003124:	d003      	beq.n	800312e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003126:	887a      	ldrh	r2, [r7, #2]
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800312c:	e003      	b.n	8003136 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800312e:	887b      	ldrh	r3, [r7, #2]
 8003130:	041a      	lsls	r2, r3, #16
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	619a      	str	r2, [r3, #24]
}
 8003136:	bf00      	nop
 8003138:	370c      	adds	r7, #12
 800313a:	46bd      	mov	sp, r7
 800313c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003140:	4770      	bx	lr
	...

08003144 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	b084      	sub	sp, #16
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2b00      	cmp	r3, #0
 8003150:	d101      	bne.n	8003156 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003152:	2301      	movs	r3, #1
 8003154:	e12b      	b.n	80033ae <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800315c:	b2db      	uxtb	r3, r3
 800315e:	2b00      	cmp	r3, #0
 8003160:	d106      	bne.n	8003170 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	2200      	movs	r2, #0
 8003166:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800316a:	6878      	ldr	r0, [r7, #4]
 800316c:	f7fe f8d8 	bl	8001320 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2224      	movs	r2, #36	; 0x24
 8003174:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	681a      	ldr	r2, [r3, #0]
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f022 0201 	bic.w	r2, r2, #1
 8003186:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	681a      	ldr	r2, [r3, #0]
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003196:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	681a      	ldr	r2, [r3, #0]
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80031a6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80031a8:	f002 f91a 	bl	80053e0 <HAL_RCC_GetPCLK1Freq>
 80031ac:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	685b      	ldr	r3, [r3, #4]
 80031b2:	4a81      	ldr	r2, [pc, #516]	; (80033b8 <HAL_I2C_Init+0x274>)
 80031b4:	4293      	cmp	r3, r2
 80031b6:	d807      	bhi.n	80031c8 <HAL_I2C_Init+0x84>
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	4a80      	ldr	r2, [pc, #512]	; (80033bc <HAL_I2C_Init+0x278>)
 80031bc:	4293      	cmp	r3, r2
 80031be:	bf94      	ite	ls
 80031c0:	2301      	movls	r3, #1
 80031c2:	2300      	movhi	r3, #0
 80031c4:	b2db      	uxtb	r3, r3
 80031c6:	e006      	b.n	80031d6 <HAL_I2C_Init+0x92>
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	4a7d      	ldr	r2, [pc, #500]	; (80033c0 <HAL_I2C_Init+0x27c>)
 80031cc:	4293      	cmp	r3, r2
 80031ce:	bf94      	ite	ls
 80031d0:	2301      	movls	r3, #1
 80031d2:	2300      	movhi	r3, #0
 80031d4:	b2db      	uxtb	r3, r3
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d001      	beq.n	80031de <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80031da:	2301      	movs	r3, #1
 80031dc:	e0e7      	b.n	80033ae <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	4a78      	ldr	r2, [pc, #480]	; (80033c4 <HAL_I2C_Init+0x280>)
 80031e2:	fba2 2303 	umull	r2, r3, r2, r3
 80031e6:	0c9b      	lsrs	r3, r3, #18
 80031e8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	685b      	ldr	r3, [r3, #4]
 80031f0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	68ba      	ldr	r2, [r7, #8]
 80031fa:	430a      	orrs	r2, r1
 80031fc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	6a1b      	ldr	r3, [r3, #32]
 8003204:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	4a6a      	ldr	r2, [pc, #424]	; (80033b8 <HAL_I2C_Init+0x274>)
 800320e:	4293      	cmp	r3, r2
 8003210:	d802      	bhi.n	8003218 <HAL_I2C_Init+0xd4>
 8003212:	68bb      	ldr	r3, [r7, #8]
 8003214:	3301      	adds	r3, #1
 8003216:	e009      	b.n	800322c <HAL_I2C_Init+0xe8>
 8003218:	68bb      	ldr	r3, [r7, #8]
 800321a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800321e:	fb02 f303 	mul.w	r3, r2, r3
 8003222:	4a69      	ldr	r2, [pc, #420]	; (80033c8 <HAL_I2C_Init+0x284>)
 8003224:	fba2 2303 	umull	r2, r3, r2, r3
 8003228:	099b      	lsrs	r3, r3, #6
 800322a:	3301      	adds	r3, #1
 800322c:	687a      	ldr	r2, [r7, #4]
 800322e:	6812      	ldr	r2, [r2, #0]
 8003230:	430b      	orrs	r3, r1
 8003232:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	69db      	ldr	r3, [r3, #28]
 800323a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800323e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	495c      	ldr	r1, [pc, #368]	; (80033b8 <HAL_I2C_Init+0x274>)
 8003248:	428b      	cmp	r3, r1
 800324a:	d819      	bhi.n	8003280 <HAL_I2C_Init+0x13c>
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	1e59      	subs	r1, r3, #1
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	685b      	ldr	r3, [r3, #4]
 8003254:	005b      	lsls	r3, r3, #1
 8003256:	fbb1 f3f3 	udiv	r3, r1, r3
 800325a:	1c59      	adds	r1, r3, #1
 800325c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003260:	400b      	ands	r3, r1
 8003262:	2b00      	cmp	r3, #0
 8003264:	d00a      	beq.n	800327c <HAL_I2C_Init+0x138>
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	1e59      	subs	r1, r3, #1
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	685b      	ldr	r3, [r3, #4]
 800326e:	005b      	lsls	r3, r3, #1
 8003270:	fbb1 f3f3 	udiv	r3, r1, r3
 8003274:	3301      	adds	r3, #1
 8003276:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800327a:	e051      	b.n	8003320 <HAL_I2C_Init+0x1dc>
 800327c:	2304      	movs	r3, #4
 800327e:	e04f      	b.n	8003320 <HAL_I2C_Init+0x1dc>
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	689b      	ldr	r3, [r3, #8]
 8003284:	2b00      	cmp	r3, #0
 8003286:	d111      	bne.n	80032ac <HAL_I2C_Init+0x168>
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	1e58      	subs	r0, r3, #1
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6859      	ldr	r1, [r3, #4]
 8003290:	460b      	mov	r3, r1
 8003292:	005b      	lsls	r3, r3, #1
 8003294:	440b      	add	r3, r1
 8003296:	fbb0 f3f3 	udiv	r3, r0, r3
 800329a:	3301      	adds	r3, #1
 800329c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	bf0c      	ite	eq
 80032a4:	2301      	moveq	r3, #1
 80032a6:	2300      	movne	r3, #0
 80032a8:	b2db      	uxtb	r3, r3
 80032aa:	e012      	b.n	80032d2 <HAL_I2C_Init+0x18e>
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	1e58      	subs	r0, r3, #1
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6859      	ldr	r1, [r3, #4]
 80032b4:	460b      	mov	r3, r1
 80032b6:	009b      	lsls	r3, r3, #2
 80032b8:	440b      	add	r3, r1
 80032ba:	0099      	lsls	r1, r3, #2
 80032bc:	440b      	add	r3, r1
 80032be:	fbb0 f3f3 	udiv	r3, r0, r3
 80032c2:	3301      	adds	r3, #1
 80032c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	bf0c      	ite	eq
 80032cc:	2301      	moveq	r3, #1
 80032ce:	2300      	movne	r3, #0
 80032d0:	b2db      	uxtb	r3, r3
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d001      	beq.n	80032da <HAL_I2C_Init+0x196>
 80032d6:	2301      	movs	r3, #1
 80032d8:	e022      	b.n	8003320 <HAL_I2C_Init+0x1dc>
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	689b      	ldr	r3, [r3, #8]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d10e      	bne.n	8003300 <HAL_I2C_Init+0x1bc>
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	1e58      	subs	r0, r3, #1
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6859      	ldr	r1, [r3, #4]
 80032ea:	460b      	mov	r3, r1
 80032ec:	005b      	lsls	r3, r3, #1
 80032ee:	440b      	add	r3, r1
 80032f0:	fbb0 f3f3 	udiv	r3, r0, r3
 80032f4:	3301      	adds	r3, #1
 80032f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80032fe:	e00f      	b.n	8003320 <HAL_I2C_Init+0x1dc>
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	1e58      	subs	r0, r3, #1
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6859      	ldr	r1, [r3, #4]
 8003308:	460b      	mov	r3, r1
 800330a:	009b      	lsls	r3, r3, #2
 800330c:	440b      	add	r3, r1
 800330e:	0099      	lsls	r1, r3, #2
 8003310:	440b      	add	r3, r1
 8003312:	fbb0 f3f3 	udiv	r3, r0, r3
 8003316:	3301      	adds	r3, #1
 8003318:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800331c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003320:	6879      	ldr	r1, [r7, #4]
 8003322:	6809      	ldr	r1, [r1, #0]
 8003324:	4313      	orrs	r3, r2
 8003326:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	69da      	ldr	r2, [r3, #28]
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6a1b      	ldr	r3, [r3, #32]
 800333a:	431a      	orrs	r2, r3
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	430a      	orrs	r2, r1
 8003342:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	689b      	ldr	r3, [r3, #8]
 800334a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800334e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003352:	687a      	ldr	r2, [r7, #4]
 8003354:	6911      	ldr	r1, [r2, #16]
 8003356:	687a      	ldr	r2, [r7, #4]
 8003358:	68d2      	ldr	r2, [r2, #12]
 800335a:	4311      	orrs	r1, r2
 800335c:	687a      	ldr	r2, [r7, #4]
 800335e:	6812      	ldr	r2, [r2, #0]
 8003360:	430b      	orrs	r3, r1
 8003362:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	68db      	ldr	r3, [r3, #12]
 800336a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	695a      	ldr	r2, [r3, #20]
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	699b      	ldr	r3, [r3, #24]
 8003376:	431a      	orrs	r2, r3
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	430a      	orrs	r2, r1
 800337e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	681a      	ldr	r2, [r3, #0]
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f042 0201 	orr.w	r2, r2, #1
 800338e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2200      	movs	r2, #0
 8003394:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	2220      	movs	r2, #32
 800339a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	2200      	movs	r2, #0
 80033a2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2200      	movs	r2, #0
 80033a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80033ac:	2300      	movs	r3, #0
}
 80033ae:	4618      	mov	r0, r3
 80033b0:	3710      	adds	r7, #16
 80033b2:	46bd      	mov	sp, r7
 80033b4:	bd80      	pop	{r7, pc}
 80033b6:	bf00      	nop
 80033b8:	000186a0 	.word	0x000186a0
 80033bc:	001e847f 	.word	0x001e847f
 80033c0:	003d08ff 	.word	0x003d08ff
 80033c4:	431bde83 	.word	0x431bde83
 80033c8:	10624dd3 	.word	0x10624dd3

080033cc <HAL_NOR_Init>:
  * @param  ExtTiming pointer to NOR extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_NOR_Init(NOR_HandleTypeDef *hnor, FMC_NORSRAM_TimingTypeDef *Timing,
                               FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b086      	sub	sp, #24
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	60f8      	str	r0, [r7, #12]
 80033d4:	60b9      	str	r1, [r7, #8]
 80033d6:	607a      	str	r2, [r7, #4]
  uint32_t deviceaddress;
  HAL_StatusTypeDef status = HAL_OK;
 80033d8:	2300      	movs	r3, #0
 80033da:	74fb      	strb	r3, [r7, #19]

  /* Check the NOR handle parameter */
  if (hnor == NULL)
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d101      	bne.n	80033e6 <HAL_NOR_Init+0x1a>
  {
    return HAL_ERROR;
 80033e2:	2301      	movs	r3, #1
 80033e4:	e090      	b.n	8003508 <HAL_NOR_Init+0x13c>
  }

  if (hnor->State == HAL_NOR_STATE_RESET)
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 80033ec:	b2db      	uxtb	r3, r3
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d106      	bne.n	8003400 <HAL_NOR_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hnor->Lock = HAL_UNLOCKED;
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	2200      	movs	r2, #0
 80033f6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hnor->MspInitCallback(hnor);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_NOR_MspInit(hnor);
 80033fa:	68f8      	ldr	r0, [r7, #12]
 80033fc:	f7fe f8ea 	bl	80015d4 <HAL_NOR_MspInit>
#endif /* (USE_HAL_NOR_REGISTER_CALLBACKS) */
  }

  /* Initialize NOR control Interface */
  (void)FMC_NORSRAM_Init(hnor->Instance, &(hnor->Init));
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	681a      	ldr	r2, [r3, #0]
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	3308      	adds	r3, #8
 8003408:	4619      	mov	r1, r3
 800340a:	4610      	mov	r0, r2
 800340c:	f002 fdb0 	bl	8005f70 <FSMC_NORSRAM_Init>

  /* Initialize NOR timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hnor->Instance, Timing, hnor->Init.NSBank);
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	6818      	ldr	r0, [r3, #0]
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	689b      	ldr	r3, [r3, #8]
 8003418:	461a      	mov	r2, r3
 800341a:	68b9      	ldr	r1, [r7, #8]
 800341c:	f002 fe12 	bl	8006044 <FSMC_NORSRAM_Timing_Init>

  /* Initialize NOR extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hnor->Extended, ExtTiming, hnor->Init.NSBank, hnor->Init.ExtendedMode);
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	6858      	ldr	r0, [r3, #4]
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	689a      	ldr	r2, [r3, #8]
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800342c:	6879      	ldr	r1, [r7, #4]
 800342e:	f002 fe3f 	bl	80060b0 <FSMC_NORSRAM_Extended_Timing_Init>

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hnor->Instance, hnor->Init.NSBank);
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	68fa      	ldr	r2, [r7, #12]
 8003438:	6892      	ldr	r2, [r2, #8]
 800343a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	68fa      	ldr	r2, [r7, #12]
 8003444:	6892      	ldr	r2, [r2, #8]
 8003446:	f041 0101 	orr.w	r1, r1, #1
 800344a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize NOR Memory Data Width*/
  if (hnor->Init.MemoryDataWidth == FMC_NORSRAM_MEM_BUS_WIDTH_8)
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	695b      	ldr	r3, [r3, #20]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d103      	bne.n	800345e <HAL_NOR_Init+0x92>
  {
    uwNORMemoryDataWidth = NOR_MEMORY_8B;
 8003456:	4b2e      	ldr	r3, [pc, #184]	; (8003510 <HAL_NOR_Init+0x144>)
 8003458:	2200      	movs	r2, #0
 800345a:	601a      	str	r2, [r3, #0]
 800345c:	e002      	b.n	8003464 <HAL_NOR_Init+0x98>
  }
  else
  {
    uwNORMemoryDataWidth = NOR_MEMORY_16B;
 800345e:	4b2c      	ldr	r3, [pc, #176]	; (8003510 <HAL_NOR_Init+0x144>)
 8003460:	2201      	movs	r2, #1
 8003462:	601a      	str	r2, [r3, #0]
  }

  /* Initialize the NOR controller state */
  hnor->State = HAL_NOR_STATE_READY;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	2201      	movs	r2, #1
 8003468:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

  /* Select the NOR device address */
  if (hnor->Init.NSBank == FMC_NORSRAM_BANK1)
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	689b      	ldr	r3, [r3, #8]
 8003470:	2b00      	cmp	r3, #0
 8003472:	d103      	bne.n	800347c <HAL_NOR_Init+0xb0>
  {
    deviceaddress = NOR_MEMORY_ADRESS1;
 8003474:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8003478:	617b      	str	r3, [r7, #20]
 800347a:	e012      	b.n	80034a2 <HAL_NOR_Init+0xd6>
  }
  else if (hnor->Init.NSBank == FMC_NORSRAM_BANK2)
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	689b      	ldr	r3, [r3, #8]
 8003480:	2b02      	cmp	r3, #2
 8003482:	d103      	bne.n	800348c <HAL_NOR_Init+0xc0>
  {
    deviceaddress = NOR_MEMORY_ADRESS2;
 8003484:	f04f 43c8 	mov.w	r3, #1677721600	; 0x64000000
 8003488:	617b      	str	r3, [r7, #20]
 800348a:	e00a      	b.n	80034a2 <HAL_NOR_Init+0xd6>
  }
  else if (hnor->Init.NSBank == FMC_NORSRAM_BANK3)
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	689b      	ldr	r3, [r3, #8]
 8003490:	2b04      	cmp	r3, #4
 8003492:	d103      	bne.n	800349c <HAL_NOR_Init+0xd0>
  {
    deviceaddress = NOR_MEMORY_ADRESS3;
 8003494:	f04f 43d0 	mov.w	r3, #1744830464	; 0x68000000
 8003498:	617b      	str	r3, [r7, #20]
 800349a:	e002      	b.n	80034a2 <HAL_NOR_Init+0xd6>
  }
  else /* FMC_NORSRAM_BANK4 */
  {
    deviceaddress = NOR_MEMORY_ADRESS4;
 800349c:	f04f 43d8 	mov.w	r3, #1811939328	; 0x6c000000
 80034a0:	617b      	str	r3, [r7, #20]
  }

  if (hnor->Init.WriteOperation == FMC_WRITE_OPERATION_DISABLE)
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d10c      	bne.n	80034c4 <HAL_NOR_Init+0xf8>
  {
    (void)FMC_NORSRAM_WriteOperation_Disable(hnor->Instance, hnor->Init.NSBank);
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	681a      	ldr	r2, [r3, #0]
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	689b      	ldr	r3, [r3, #8]
 80034b2:	4619      	mov	r1, r3
 80034b4:	4610      	mov	r0, r2
 80034b6:	f002 fe33 	bl	8006120 <FSMC_NORSRAM_WriteOperation_Disable>

    /* Update the NOR controller state */
    hnor->State = HAL_NOR_STATE_PROTECTED;
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	2204      	movs	r2, #4
 80034be:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
 80034c2:	e020      	b.n	8003506 <HAL_NOR_Init+0x13a>
  }
  else
  {
    /* Get the value of the command set */
    NOR_WRITE(NOR_ADDR_SHIFT(deviceaddress, uwNORMemoryDataWidth, NOR_CMD_ADDRESS_FIRST_CFI), NOR_CMD_DATA_CFI);
 80034c4:	4b12      	ldr	r3, [pc, #72]	; (8003510 <HAL_NOR_Init+0x144>)
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	2b01      	cmp	r3, #1
 80034ca:	d102      	bne.n	80034d2 <HAL_NOR_Init+0x106>
 80034cc:	697b      	ldr	r3, [r7, #20]
 80034ce:	33aa      	adds	r3, #170	; 0xaa
 80034d0:	e001      	b.n	80034d6 <HAL_NOR_Init+0x10a>
 80034d2:	697b      	ldr	r3, [r7, #20]
 80034d4:	3355      	adds	r3, #85	; 0x55
 80034d6:	2298      	movs	r2, #152	; 0x98
 80034d8:	801a      	strh	r2, [r3, #0]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80034da:	f3bf 8f4f 	dsb	sy
}
 80034de:	bf00      	nop
    hnor->CommandSet = *(__IO uint16_t *) NOR_ADDR_SHIFT(deviceaddress, uwNORMemoryDataWidth, NOR_ADDRESS_COMMAND_SET);
 80034e0:	4b0b      	ldr	r3, [pc, #44]	; (8003510 <HAL_NOR_Init+0x144>)
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	2b01      	cmp	r3, #1
 80034e6:	d102      	bne.n	80034ee <HAL_NOR_Init+0x122>
 80034e8:	697b      	ldr	r3, [r7, #20]
 80034ea:	3326      	adds	r3, #38	; 0x26
 80034ec:	e001      	b.n	80034f2 <HAL_NOR_Init+0x126>
 80034ee:	697b      	ldr	r3, [r7, #20]
 80034f0:	3313      	adds	r3, #19
 80034f2:	881b      	ldrh	r3, [r3, #0]
 80034f4:	b29b      	uxth	r3, r3
 80034f6:	461a      	mov	r2, r3
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	64da      	str	r2, [r3, #76]	; 0x4c

    status = HAL_NOR_ReturnToReadMode(hnor);
 80034fc:	68f8      	ldr	r0, [r7, #12]
 80034fe:	f000 f809 	bl	8003514 <HAL_NOR_ReturnToReadMode>
 8003502:	4603      	mov	r3, r0
 8003504:	74fb      	strb	r3, [r7, #19]
  }

  return status;
 8003506:	7cfb      	ldrb	r3, [r7, #19]
}
 8003508:	4618      	mov	r0, r3
 800350a:	3718      	adds	r7, #24
 800350c:	46bd      	mov	sp, r7
 800350e:	bd80      	pop	{r7, pc}
 8003510:	20000698 	.word	0x20000698

08003514 <HAL_NOR_ReturnToReadMode>:
  * @param  hnor pointer to a NOR_HandleTypeDef structure that contains
  *                the configuration information for NOR module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_NOR_ReturnToReadMode(NOR_HandleTypeDef *hnor)
{
 8003514:	b480      	push	{r7}
 8003516:	b085      	sub	sp, #20
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
  uint32_t deviceaddress;
  HAL_NOR_StateTypeDef state;
  HAL_StatusTypeDef status = HAL_OK;
 800351c:	2300      	movs	r3, #0
 800351e:	72fb      	strb	r3, [r7, #11]

  /* Check the NOR controller state */
  state = hnor->State;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8003526:	72bb      	strb	r3, [r7, #10]
  if (state == HAL_NOR_STATE_BUSY)
 8003528:	7abb      	ldrb	r3, [r7, #10]
 800352a:	2b02      	cmp	r3, #2
 800352c:	d101      	bne.n	8003532 <HAL_NOR_ReturnToReadMode+0x1e>
  {
    return HAL_BUSY;
 800352e:	2302      	movs	r3, #2
 8003530:	e052      	b.n	80035d8 <HAL_NOR_ReturnToReadMode+0xc4>
  }
  else if (state == HAL_NOR_STATE_PROTECTED)
 8003532:	7abb      	ldrb	r3, [r7, #10]
 8003534:	2b04      	cmp	r3, #4
 8003536:	d101      	bne.n	800353c <HAL_NOR_ReturnToReadMode+0x28>
  {
    return HAL_ERROR;
 8003538:	2301      	movs	r3, #1
 800353a:	e04d      	b.n	80035d8 <HAL_NOR_ReturnToReadMode+0xc4>
  }
  else if (state == HAL_NOR_STATE_READY)
 800353c:	7abb      	ldrb	r3, [r7, #10]
 800353e:	2b01      	cmp	r3, #1
 8003540:	d149      	bne.n	80035d6 <HAL_NOR_ReturnToReadMode+0xc2>
  {
    /* Process Locked */
    __HAL_LOCK(hnor);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8003548:	2b01      	cmp	r3, #1
 800354a:	d101      	bne.n	8003550 <HAL_NOR_ReturnToReadMode+0x3c>
 800354c:	2302      	movs	r3, #2
 800354e:	e043      	b.n	80035d8 <HAL_NOR_ReturnToReadMode+0xc4>
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2201      	movs	r2, #1
 8003554:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Update the NOR controller state */
    hnor->State = HAL_NOR_STATE_BUSY;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2202      	movs	r2, #2
 800355c:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

    /* Select the NOR device address */
    if (hnor->Init.NSBank == FMC_NORSRAM_BANK1)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	689b      	ldr	r3, [r3, #8]
 8003564:	2b00      	cmp	r3, #0
 8003566:	d103      	bne.n	8003570 <HAL_NOR_ReturnToReadMode+0x5c>
    {
      deviceaddress = NOR_MEMORY_ADRESS1;
 8003568:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 800356c:	60fb      	str	r3, [r7, #12]
 800356e:	e012      	b.n	8003596 <HAL_NOR_ReturnToReadMode+0x82>
    }
    else if (hnor->Init.NSBank == FMC_NORSRAM_BANK2)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	689b      	ldr	r3, [r3, #8]
 8003574:	2b02      	cmp	r3, #2
 8003576:	d103      	bne.n	8003580 <HAL_NOR_ReturnToReadMode+0x6c>
    {
      deviceaddress = NOR_MEMORY_ADRESS2;
 8003578:	f04f 43c8 	mov.w	r3, #1677721600	; 0x64000000
 800357c:	60fb      	str	r3, [r7, #12]
 800357e:	e00a      	b.n	8003596 <HAL_NOR_ReturnToReadMode+0x82>
    }
    else if (hnor->Init.NSBank == FMC_NORSRAM_BANK3)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	689b      	ldr	r3, [r3, #8]
 8003584:	2b04      	cmp	r3, #4
 8003586:	d103      	bne.n	8003590 <HAL_NOR_ReturnToReadMode+0x7c>
    {
      deviceaddress = NOR_MEMORY_ADRESS3;
 8003588:	f04f 43d0 	mov.w	r3, #1744830464	; 0x68000000
 800358c:	60fb      	str	r3, [r7, #12]
 800358e:	e002      	b.n	8003596 <HAL_NOR_ReturnToReadMode+0x82>
    }
    else /* FMC_NORSRAM_BANK4 */
    {
      deviceaddress = NOR_MEMORY_ADRESS4;
 8003590:	f04f 43d8 	mov.w	r3, #1811939328	; 0x6c000000
 8003594:	60fb      	str	r3, [r7, #12]
    }

    if (hnor->CommandSet == NOR_AMD_FUJITSU_COMMAND_SET)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800359a:	2b02      	cmp	r3, #2
 800359c:	d105      	bne.n	80035aa <HAL_NOR_ReturnToReadMode+0x96>
    {
      NOR_WRITE(deviceaddress, NOR_CMD_DATA_READ_RESET);
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	22f0      	movs	r2, #240	; 0xf0
 80035a2:	801a      	strh	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80035a4:	f3bf 8f4f 	dsb	sy
}
 80035a8:	e00b      	b.n	80035c2 <HAL_NOR_ReturnToReadMode+0xae>
    }
    else if (hnor->CommandSet == NOR_INTEL_SHARP_EXT_COMMAND_SET)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035ae:	2b01      	cmp	r3, #1
 80035b0:	d105      	bne.n	80035be <HAL_NOR_ReturnToReadMode+0xaa>
    {
      NOR_WRITE(deviceaddress, NOR_CMD_READ_ARRAY);
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	22ff      	movs	r2, #255	; 0xff
 80035b6:	801a      	strh	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80035b8:	f3bf 8f4f 	dsb	sy
}
 80035bc:	e001      	b.n	80035c2 <HAL_NOR_ReturnToReadMode+0xae>
    }
    else
    {
      /* Primary command set not supported by the driver */
      status = HAL_ERROR;
 80035be:	2301      	movs	r3, #1
 80035c0:	72fb      	strb	r3, [r7, #11]
    }

    /* Check the NOR controller state */
    hnor->State = state;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	7aba      	ldrb	r2, [r7, #10]
 80035c6:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

    /* Process unlocked */
    __HAL_UNLOCK(hnor);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	2200      	movs	r2, #0
 80035ce:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  else
  {
    return HAL_ERROR;
  }

  return status;
 80035d2:	7afb      	ldrb	r3, [r7, #11]
 80035d4:	e000      	b.n	80035d8 <HAL_NOR_ReturnToReadMode+0xc4>
    return HAL_ERROR;
 80035d6:	2301      	movs	r3, #1
}
 80035d8:	4618      	mov	r0, r3
 80035da:	3714      	adds	r7, #20
 80035dc:	46bd      	mov	sp, r7
 80035de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e2:	4770      	bx	lr

080035e4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80035e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80035e6:	b08f      	sub	sp, #60	; 0x3c
 80035e8:	af0a      	add	r7, sp, #40	; 0x28
 80035ea:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d101      	bne.n	80035f6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80035f2:	2301      	movs	r3, #1
 80035f4:	e10f      	b.n	8003816 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8003602:	b2db      	uxtb	r3, r3
 8003604:	2b00      	cmp	r3, #0
 8003606:	d106      	bne.n	8003616 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2200      	movs	r2, #0
 800360c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003610:	6878      	ldr	r0, [r7, #4]
 8003612:	f006 f84f 	bl	80096b4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	2203      	movs	r2, #3
 800361a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800361e:	68bb      	ldr	r3, [r7, #8]
 8003620:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003622:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003626:	2b00      	cmp	r3, #0
 8003628:	d102      	bne.n	8003630 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	2200      	movs	r2, #0
 800362e:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	4618      	mov	r0, r3
 8003636:	f002 fe9e 	bl	8006376 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	603b      	str	r3, [r7, #0]
 8003640:	687e      	ldr	r6, [r7, #4]
 8003642:	466d      	mov	r5, sp
 8003644:	f106 0410 	add.w	r4, r6, #16
 8003648:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800364a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800364c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800364e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003650:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003654:	e885 0003 	stmia.w	r5, {r0, r1}
 8003658:	1d33      	adds	r3, r6, #4
 800365a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800365c:	6838      	ldr	r0, [r7, #0]
 800365e:	f002 fd75 	bl	800614c <USB_CoreInit>
 8003662:	4603      	mov	r3, r0
 8003664:	2b00      	cmp	r3, #0
 8003666:	d005      	beq.n	8003674 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2202      	movs	r2, #2
 800366c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003670:	2301      	movs	r3, #1
 8003672:	e0d0      	b.n	8003816 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	2100      	movs	r1, #0
 800367a:	4618      	mov	r0, r3
 800367c:	f002 fe8c 	bl	8006398 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003680:	2300      	movs	r3, #0
 8003682:	73fb      	strb	r3, [r7, #15]
 8003684:	e04a      	b.n	800371c <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003686:	7bfa      	ldrb	r2, [r7, #15]
 8003688:	6879      	ldr	r1, [r7, #4]
 800368a:	4613      	mov	r3, r2
 800368c:	00db      	lsls	r3, r3, #3
 800368e:	4413      	add	r3, r2
 8003690:	009b      	lsls	r3, r3, #2
 8003692:	440b      	add	r3, r1
 8003694:	333d      	adds	r3, #61	; 0x3d
 8003696:	2201      	movs	r2, #1
 8003698:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800369a:	7bfa      	ldrb	r2, [r7, #15]
 800369c:	6879      	ldr	r1, [r7, #4]
 800369e:	4613      	mov	r3, r2
 80036a0:	00db      	lsls	r3, r3, #3
 80036a2:	4413      	add	r3, r2
 80036a4:	009b      	lsls	r3, r3, #2
 80036a6:	440b      	add	r3, r1
 80036a8:	333c      	adds	r3, #60	; 0x3c
 80036aa:	7bfa      	ldrb	r2, [r7, #15]
 80036ac:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80036ae:	7bfa      	ldrb	r2, [r7, #15]
 80036b0:	7bfb      	ldrb	r3, [r7, #15]
 80036b2:	b298      	uxth	r0, r3
 80036b4:	6879      	ldr	r1, [r7, #4]
 80036b6:	4613      	mov	r3, r2
 80036b8:	00db      	lsls	r3, r3, #3
 80036ba:	4413      	add	r3, r2
 80036bc:	009b      	lsls	r3, r3, #2
 80036be:	440b      	add	r3, r1
 80036c0:	3344      	adds	r3, #68	; 0x44
 80036c2:	4602      	mov	r2, r0
 80036c4:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80036c6:	7bfa      	ldrb	r2, [r7, #15]
 80036c8:	6879      	ldr	r1, [r7, #4]
 80036ca:	4613      	mov	r3, r2
 80036cc:	00db      	lsls	r3, r3, #3
 80036ce:	4413      	add	r3, r2
 80036d0:	009b      	lsls	r3, r3, #2
 80036d2:	440b      	add	r3, r1
 80036d4:	3340      	adds	r3, #64	; 0x40
 80036d6:	2200      	movs	r2, #0
 80036d8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80036da:	7bfa      	ldrb	r2, [r7, #15]
 80036dc:	6879      	ldr	r1, [r7, #4]
 80036de:	4613      	mov	r3, r2
 80036e0:	00db      	lsls	r3, r3, #3
 80036e2:	4413      	add	r3, r2
 80036e4:	009b      	lsls	r3, r3, #2
 80036e6:	440b      	add	r3, r1
 80036e8:	3348      	adds	r3, #72	; 0x48
 80036ea:	2200      	movs	r2, #0
 80036ec:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80036ee:	7bfa      	ldrb	r2, [r7, #15]
 80036f0:	6879      	ldr	r1, [r7, #4]
 80036f2:	4613      	mov	r3, r2
 80036f4:	00db      	lsls	r3, r3, #3
 80036f6:	4413      	add	r3, r2
 80036f8:	009b      	lsls	r3, r3, #2
 80036fa:	440b      	add	r3, r1
 80036fc:	334c      	adds	r3, #76	; 0x4c
 80036fe:	2200      	movs	r2, #0
 8003700:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003702:	7bfa      	ldrb	r2, [r7, #15]
 8003704:	6879      	ldr	r1, [r7, #4]
 8003706:	4613      	mov	r3, r2
 8003708:	00db      	lsls	r3, r3, #3
 800370a:	4413      	add	r3, r2
 800370c:	009b      	lsls	r3, r3, #2
 800370e:	440b      	add	r3, r1
 8003710:	3354      	adds	r3, #84	; 0x54
 8003712:	2200      	movs	r2, #0
 8003714:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003716:	7bfb      	ldrb	r3, [r7, #15]
 8003718:	3301      	adds	r3, #1
 800371a:	73fb      	strb	r3, [r7, #15]
 800371c:	7bfa      	ldrb	r2, [r7, #15]
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	685b      	ldr	r3, [r3, #4]
 8003722:	429a      	cmp	r2, r3
 8003724:	d3af      	bcc.n	8003686 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003726:	2300      	movs	r3, #0
 8003728:	73fb      	strb	r3, [r7, #15]
 800372a:	e044      	b.n	80037b6 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800372c:	7bfa      	ldrb	r2, [r7, #15]
 800372e:	6879      	ldr	r1, [r7, #4]
 8003730:	4613      	mov	r3, r2
 8003732:	00db      	lsls	r3, r3, #3
 8003734:	4413      	add	r3, r2
 8003736:	009b      	lsls	r3, r3, #2
 8003738:	440b      	add	r3, r1
 800373a:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800373e:	2200      	movs	r2, #0
 8003740:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003742:	7bfa      	ldrb	r2, [r7, #15]
 8003744:	6879      	ldr	r1, [r7, #4]
 8003746:	4613      	mov	r3, r2
 8003748:	00db      	lsls	r3, r3, #3
 800374a:	4413      	add	r3, r2
 800374c:	009b      	lsls	r3, r3, #2
 800374e:	440b      	add	r3, r1
 8003750:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8003754:	7bfa      	ldrb	r2, [r7, #15]
 8003756:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003758:	7bfa      	ldrb	r2, [r7, #15]
 800375a:	6879      	ldr	r1, [r7, #4]
 800375c:	4613      	mov	r3, r2
 800375e:	00db      	lsls	r3, r3, #3
 8003760:	4413      	add	r3, r2
 8003762:	009b      	lsls	r3, r3, #2
 8003764:	440b      	add	r3, r1
 8003766:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800376a:	2200      	movs	r2, #0
 800376c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800376e:	7bfa      	ldrb	r2, [r7, #15]
 8003770:	6879      	ldr	r1, [r7, #4]
 8003772:	4613      	mov	r3, r2
 8003774:	00db      	lsls	r3, r3, #3
 8003776:	4413      	add	r3, r2
 8003778:	009b      	lsls	r3, r3, #2
 800377a:	440b      	add	r3, r1
 800377c:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8003780:	2200      	movs	r2, #0
 8003782:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003784:	7bfa      	ldrb	r2, [r7, #15]
 8003786:	6879      	ldr	r1, [r7, #4]
 8003788:	4613      	mov	r3, r2
 800378a:	00db      	lsls	r3, r3, #3
 800378c:	4413      	add	r3, r2
 800378e:	009b      	lsls	r3, r3, #2
 8003790:	440b      	add	r3, r1
 8003792:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8003796:	2200      	movs	r2, #0
 8003798:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800379a:	7bfa      	ldrb	r2, [r7, #15]
 800379c:	6879      	ldr	r1, [r7, #4]
 800379e:	4613      	mov	r3, r2
 80037a0:	00db      	lsls	r3, r3, #3
 80037a2:	4413      	add	r3, r2
 80037a4:	009b      	lsls	r3, r3, #2
 80037a6:	440b      	add	r3, r1
 80037a8:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80037ac:	2200      	movs	r2, #0
 80037ae:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80037b0:	7bfb      	ldrb	r3, [r7, #15]
 80037b2:	3301      	adds	r3, #1
 80037b4:	73fb      	strb	r3, [r7, #15]
 80037b6:	7bfa      	ldrb	r2, [r7, #15]
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	685b      	ldr	r3, [r3, #4]
 80037bc:	429a      	cmp	r2, r3
 80037be:	d3b5      	bcc.n	800372c <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	603b      	str	r3, [r7, #0]
 80037c6:	687e      	ldr	r6, [r7, #4]
 80037c8:	466d      	mov	r5, sp
 80037ca:	f106 0410 	add.w	r4, r6, #16
 80037ce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80037d0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80037d2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80037d4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80037d6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80037da:	e885 0003 	stmia.w	r5, {r0, r1}
 80037de:	1d33      	adds	r3, r6, #4
 80037e0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80037e2:	6838      	ldr	r0, [r7, #0]
 80037e4:	f002 fe24 	bl	8006430 <USB_DevInit>
 80037e8:	4603      	mov	r3, r0
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d005      	beq.n	80037fa <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	2202      	movs	r2, #2
 80037f2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80037f6:	2301      	movs	r3, #1
 80037f8:	e00d      	b.n	8003816 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	2200      	movs	r2, #0
 80037fe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2201      	movs	r2, #1
 8003806:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	4618      	mov	r0, r3
 8003810:	f003 ff73 	bl	80076fa <USB_DevDisconnect>

  return HAL_OK;
 8003814:	2300      	movs	r3, #0
}
 8003816:	4618      	mov	r0, r3
 8003818:	3714      	adds	r7, #20
 800381a:	46bd      	mov	sp, r7
 800381c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800381e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800381e:	b580      	push	{r7, lr}
 8003820:	b084      	sub	sp, #16
 8003822:	af00      	add	r7, sp, #0
 8003824:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003832:	2b01      	cmp	r3, #1
 8003834:	d101      	bne.n	800383a <HAL_PCD_Start+0x1c>
 8003836:	2302      	movs	r3, #2
 8003838:	e020      	b.n	800387c <HAL_PCD_Start+0x5e>
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2201      	movs	r2, #1
 800383e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003846:	2b01      	cmp	r3, #1
 8003848:	d109      	bne.n	800385e <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800384e:	2b01      	cmp	r3, #1
 8003850:	d005      	beq.n	800385e <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003856:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	4618      	mov	r0, r3
 8003864:	f002 fd76 	bl	8006354 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	4618      	mov	r0, r3
 800386e:	f003 ff23 	bl	80076b8 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2200      	movs	r2, #0
 8003876:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800387a:	2300      	movs	r3, #0
}
 800387c:	4618      	mov	r0, r3
 800387e:	3710      	adds	r7, #16
 8003880:	46bd      	mov	sp, r7
 8003882:	bd80      	pop	{r7, pc}

08003884 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003884:	b590      	push	{r4, r7, lr}
 8003886:	b08d      	sub	sp, #52	; 0x34
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003892:	6a3b      	ldr	r3, [r7, #32]
 8003894:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	4618      	mov	r0, r3
 800389c:	f003 ffe1 	bl	8007862 <USB_GetMode>
 80038a0:	4603      	mov	r3, r0
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	f040 848a 	bne.w	80041bc <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	4618      	mov	r0, r3
 80038ae:	f003 ff45 	bl	800773c <USB_ReadInterrupts>
 80038b2:	4603      	mov	r3, r0
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	f000 8480 	beq.w	80041ba <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80038ba:	69fb      	ldr	r3, [r7, #28]
 80038bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038c0:	689b      	ldr	r3, [r3, #8]
 80038c2:	0a1b      	lsrs	r3, r3, #8
 80038c4:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	4618      	mov	r0, r3
 80038d4:	f003 ff32 	bl	800773c <USB_ReadInterrupts>
 80038d8:	4603      	mov	r3, r0
 80038da:	f003 0302 	and.w	r3, r3, #2
 80038de:	2b02      	cmp	r3, #2
 80038e0:	d107      	bne.n	80038f2 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	695a      	ldr	r2, [r3, #20]
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f002 0202 	and.w	r2, r2, #2
 80038f0:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4618      	mov	r0, r3
 80038f8:	f003 ff20 	bl	800773c <USB_ReadInterrupts>
 80038fc:	4603      	mov	r3, r0
 80038fe:	f003 0310 	and.w	r3, r3, #16
 8003902:	2b10      	cmp	r3, #16
 8003904:	d161      	bne.n	80039ca <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	699a      	ldr	r2, [r3, #24]
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f022 0210 	bic.w	r2, r2, #16
 8003914:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8003916:	6a3b      	ldr	r3, [r7, #32]
 8003918:	6a1b      	ldr	r3, [r3, #32]
 800391a:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800391c:	69bb      	ldr	r3, [r7, #24]
 800391e:	f003 020f 	and.w	r2, r3, #15
 8003922:	4613      	mov	r3, r2
 8003924:	00db      	lsls	r3, r3, #3
 8003926:	4413      	add	r3, r2
 8003928:	009b      	lsls	r3, r3, #2
 800392a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800392e:	687a      	ldr	r2, [r7, #4]
 8003930:	4413      	add	r3, r2
 8003932:	3304      	adds	r3, #4
 8003934:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003936:	69bb      	ldr	r3, [r7, #24]
 8003938:	0c5b      	lsrs	r3, r3, #17
 800393a:	f003 030f 	and.w	r3, r3, #15
 800393e:	2b02      	cmp	r3, #2
 8003940:	d124      	bne.n	800398c <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003942:	69ba      	ldr	r2, [r7, #24]
 8003944:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8003948:	4013      	ands	r3, r2
 800394a:	2b00      	cmp	r3, #0
 800394c:	d035      	beq.n	80039ba <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800394e:	697b      	ldr	r3, [r7, #20]
 8003950:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003952:	69bb      	ldr	r3, [r7, #24]
 8003954:	091b      	lsrs	r3, r3, #4
 8003956:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003958:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800395c:	b29b      	uxth	r3, r3
 800395e:	461a      	mov	r2, r3
 8003960:	6a38      	ldr	r0, [r7, #32]
 8003962:	f003 fd57 	bl	8007414 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003966:	697b      	ldr	r3, [r7, #20]
 8003968:	691a      	ldr	r2, [r3, #16]
 800396a:	69bb      	ldr	r3, [r7, #24]
 800396c:	091b      	lsrs	r3, r3, #4
 800396e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003972:	441a      	add	r2, r3
 8003974:	697b      	ldr	r3, [r7, #20]
 8003976:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003978:	697b      	ldr	r3, [r7, #20]
 800397a:	6a1a      	ldr	r2, [r3, #32]
 800397c:	69bb      	ldr	r3, [r7, #24]
 800397e:	091b      	lsrs	r3, r3, #4
 8003980:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003984:	441a      	add	r2, r3
 8003986:	697b      	ldr	r3, [r7, #20]
 8003988:	621a      	str	r2, [r3, #32]
 800398a:	e016      	b.n	80039ba <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800398c:	69bb      	ldr	r3, [r7, #24]
 800398e:	0c5b      	lsrs	r3, r3, #17
 8003990:	f003 030f 	and.w	r3, r3, #15
 8003994:	2b06      	cmp	r3, #6
 8003996:	d110      	bne.n	80039ba <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800399e:	2208      	movs	r2, #8
 80039a0:	4619      	mov	r1, r3
 80039a2:	6a38      	ldr	r0, [r7, #32]
 80039a4:	f003 fd36 	bl	8007414 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80039a8:	697b      	ldr	r3, [r7, #20]
 80039aa:	6a1a      	ldr	r2, [r3, #32]
 80039ac:	69bb      	ldr	r3, [r7, #24]
 80039ae:	091b      	lsrs	r3, r3, #4
 80039b0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80039b4:	441a      	add	r2, r3
 80039b6:	697b      	ldr	r3, [r7, #20]
 80039b8:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	699a      	ldr	r2, [r3, #24]
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f042 0210 	orr.w	r2, r2, #16
 80039c8:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	4618      	mov	r0, r3
 80039d0:	f003 feb4 	bl	800773c <USB_ReadInterrupts>
 80039d4:	4603      	mov	r3, r0
 80039d6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80039da:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80039de:	f040 80a7 	bne.w	8003b30 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80039e2:	2300      	movs	r3, #0
 80039e4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	4618      	mov	r0, r3
 80039ec:	f003 feb9 	bl	8007762 <USB_ReadDevAllOutEpInterrupt>
 80039f0:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80039f2:	e099      	b.n	8003b28 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80039f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039f6:	f003 0301 	and.w	r3, r3, #1
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	f000 808e 	beq.w	8003b1c <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a06:	b2d2      	uxtb	r2, r2
 8003a08:	4611      	mov	r1, r2
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	f003 fedd 	bl	80077ca <USB_ReadDevOutEPInterrupt>
 8003a10:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003a12:	693b      	ldr	r3, [r7, #16]
 8003a14:	f003 0301 	and.w	r3, r3, #1
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d00c      	beq.n	8003a36 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a1e:	015a      	lsls	r2, r3, #5
 8003a20:	69fb      	ldr	r3, [r7, #28]
 8003a22:	4413      	add	r3, r2
 8003a24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a28:	461a      	mov	r2, r3
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003a2e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003a30:	6878      	ldr	r0, [r7, #4]
 8003a32:	f000 feab 	bl	800478c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003a36:	693b      	ldr	r3, [r7, #16]
 8003a38:	f003 0308 	and.w	r3, r3, #8
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d00c      	beq.n	8003a5a <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a42:	015a      	lsls	r2, r3, #5
 8003a44:	69fb      	ldr	r3, [r7, #28]
 8003a46:	4413      	add	r3, r2
 8003a48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a4c:	461a      	mov	r2, r3
 8003a4e:	2308      	movs	r3, #8
 8003a50:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003a52:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003a54:	6878      	ldr	r0, [r7, #4]
 8003a56:	f000 ff81 	bl	800495c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003a5a:	693b      	ldr	r3, [r7, #16]
 8003a5c:	f003 0310 	and.w	r3, r3, #16
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d008      	beq.n	8003a76 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a66:	015a      	lsls	r2, r3, #5
 8003a68:	69fb      	ldr	r3, [r7, #28]
 8003a6a:	4413      	add	r3, r2
 8003a6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a70:	461a      	mov	r2, r3
 8003a72:	2310      	movs	r3, #16
 8003a74:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8003a76:	693b      	ldr	r3, [r7, #16]
 8003a78:	f003 0302 	and.w	r3, r3, #2
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d030      	beq.n	8003ae2 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8003a80:	6a3b      	ldr	r3, [r7, #32]
 8003a82:	695b      	ldr	r3, [r3, #20]
 8003a84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a88:	2b80      	cmp	r3, #128	; 0x80
 8003a8a:	d109      	bne.n	8003aa0 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8003a8c:	69fb      	ldr	r3, [r7, #28]
 8003a8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a92:	685b      	ldr	r3, [r3, #4]
 8003a94:	69fa      	ldr	r2, [r7, #28]
 8003a96:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003a9a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003a9e:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8003aa0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003aa2:	4613      	mov	r3, r2
 8003aa4:	00db      	lsls	r3, r3, #3
 8003aa6:	4413      	add	r3, r2
 8003aa8:	009b      	lsls	r3, r3, #2
 8003aaa:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003aae:	687a      	ldr	r2, [r7, #4]
 8003ab0:	4413      	add	r3, r2
 8003ab2:	3304      	adds	r3, #4
 8003ab4:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003ab6:	697b      	ldr	r3, [r7, #20]
 8003ab8:	78db      	ldrb	r3, [r3, #3]
 8003aba:	2b01      	cmp	r3, #1
 8003abc:	d108      	bne.n	8003ad0 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8003abe:	697b      	ldr	r3, [r7, #20]
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ac6:	b2db      	uxtb	r3, r3
 8003ac8:	4619      	mov	r1, r3
 8003aca:	6878      	ldr	r0, [r7, #4]
 8003acc:	f005 ff06 	bl	80098dc <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8003ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ad2:	015a      	lsls	r2, r3, #5
 8003ad4:	69fb      	ldr	r3, [r7, #28]
 8003ad6:	4413      	add	r3, r2
 8003ad8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003adc:	461a      	mov	r2, r3
 8003ade:	2302      	movs	r3, #2
 8003ae0:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003ae2:	693b      	ldr	r3, [r7, #16]
 8003ae4:	f003 0320 	and.w	r3, r3, #32
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d008      	beq.n	8003afe <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aee:	015a      	lsls	r2, r3, #5
 8003af0:	69fb      	ldr	r3, [r7, #28]
 8003af2:	4413      	add	r3, r2
 8003af4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003af8:	461a      	mov	r2, r3
 8003afa:	2320      	movs	r3, #32
 8003afc:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003afe:	693b      	ldr	r3, [r7, #16]
 8003b00:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d009      	beq.n	8003b1c <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b0a:	015a      	lsls	r2, r3, #5
 8003b0c:	69fb      	ldr	r3, [r7, #28]
 8003b0e:	4413      	add	r3, r2
 8003b10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b14:	461a      	mov	r2, r3
 8003b16:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003b1a:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b1e:	3301      	adds	r3, #1
 8003b20:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003b22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b24:	085b      	lsrs	r3, r3, #1
 8003b26:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003b28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	f47f af62 	bne.w	80039f4 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	4618      	mov	r0, r3
 8003b36:	f003 fe01 	bl	800773c <USB_ReadInterrupts>
 8003b3a:	4603      	mov	r3, r0
 8003b3c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003b40:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003b44:	f040 80db 	bne.w	8003cfe <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	f003 fe22 	bl	8007796 <USB_ReadDevAllInEpInterrupt>
 8003b52:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8003b54:	2300      	movs	r3, #0
 8003b56:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8003b58:	e0cd      	b.n	8003cf6 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003b5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b5c:	f003 0301 	and.w	r3, r3, #1
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	f000 80c2 	beq.w	8003cea <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b6c:	b2d2      	uxtb	r2, r2
 8003b6e:	4611      	mov	r1, r2
 8003b70:	4618      	mov	r0, r3
 8003b72:	f003 fe48 	bl	8007806 <USB_ReadDevInEPInterrupt>
 8003b76:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003b78:	693b      	ldr	r3, [r7, #16]
 8003b7a:	f003 0301 	and.w	r3, r3, #1
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d057      	beq.n	8003c32 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b84:	f003 030f 	and.w	r3, r3, #15
 8003b88:	2201      	movs	r2, #1
 8003b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b8e:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003b90:	69fb      	ldr	r3, [r7, #28]
 8003b92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b96:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	43db      	mvns	r3, r3
 8003b9c:	69f9      	ldr	r1, [r7, #28]
 8003b9e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003ba2:	4013      	ands	r3, r2
 8003ba4:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ba8:	015a      	lsls	r2, r3, #5
 8003baa:	69fb      	ldr	r3, [r7, #28]
 8003bac:	4413      	add	r3, r2
 8003bae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bb2:	461a      	mov	r2, r3
 8003bb4:	2301      	movs	r3, #1
 8003bb6:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	691b      	ldr	r3, [r3, #16]
 8003bbc:	2b01      	cmp	r3, #1
 8003bbe:	d132      	bne.n	8003c26 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003bc0:	6879      	ldr	r1, [r7, #4]
 8003bc2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bc4:	4613      	mov	r3, r2
 8003bc6:	00db      	lsls	r3, r3, #3
 8003bc8:	4413      	add	r3, r2
 8003bca:	009b      	lsls	r3, r3, #2
 8003bcc:	440b      	add	r3, r1
 8003bce:	334c      	adds	r3, #76	; 0x4c
 8003bd0:	6819      	ldr	r1, [r3, #0]
 8003bd2:	6878      	ldr	r0, [r7, #4]
 8003bd4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bd6:	4613      	mov	r3, r2
 8003bd8:	00db      	lsls	r3, r3, #3
 8003bda:	4413      	add	r3, r2
 8003bdc:	009b      	lsls	r3, r3, #2
 8003bde:	4403      	add	r3, r0
 8003be0:	3348      	adds	r3, #72	; 0x48
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	4419      	add	r1, r3
 8003be6:	6878      	ldr	r0, [r7, #4]
 8003be8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bea:	4613      	mov	r3, r2
 8003bec:	00db      	lsls	r3, r3, #3
 8003bee:	4413      	add	r3, r2
 8003bf0:	009b      	lsls	r3, r3, #2
 8003bf2:	4403      	add	r3, r0
 8003bf4:	334c      	adds	r3, #76	; 0x4c
 8003bf6:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d113      	bne.n	8003c26 <HAL_PCD_IRQHandler+0x3a2>
 8003bfe:	6879      	ldr	r1, [r7, #4]
 8003c00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c02:	4613      	mov	r3, r2
 8003c04:	00db      	lsls	r3, r3, #3
 8003c06:	4413      	add	r3, r2
 8003c08:	009b      	lsls	r3, r3, #2
 8003c0a:	440b      	add	r3, r1
 8003c0c:	3354      	adds	r3, #84	; 0x54
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d108      	bne.n	8003c26 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6818      	ldr	r0, [r3, #0]
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003c1e:	461a      	mov	r2, r3
 8003c20:	2101      	movs	r1, #1
 8003c22:	f003 fe4f 	bl	80078c4 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c28:	b2db      	uxtb	r3, r3
 8003c2a:	4619      	mov	r1, r3
 8003c2c:	6878      	ldr	r0, [r7, #4]
 8003c2e:	f005 fdd0 	bl	80097d2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003c32:	693b      	ldr	r3, [r7, #16]
 8003c34:	f003 0308 	and.w	r3, r3, #8
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d008      	beq.n	8003c4e <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c3e:	015a      	lsls	r2, r3, #5
 8003c40:	69fb      	ldr	r3, [r7, #28]
 8003c42:	4413      	add	r3, r2
 8003c44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c48:	461a      	mov	r2, r3
 8003c4a:	2308      	movs	r3, #8
 8003c4c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003c4e:	693b      	ldr	r3, [r7, #16]
 8003c50:	f003 0310 	and.w	r3, r3, #16
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d008      	beq.n	8003c6a <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c5a:	015a      	lsls	r2, r3, #5
 8003c5c:	69fb      	ldr	r3, [r7, #28]
 8003c5e:	4413      	add	r3, r2
 8003c60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c64:	461a      	mov	r2, r3
 8003c66:	2310      	movs	r3, #16
 8003c68:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003c6a:	693b      	ldr	r3, [r7, #16]
 8003c6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d008      	beq.n	8003c86 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c76:	015a      	lsls	r2, r3, #5
 8003c78:	69fb      	ldr	r3, [r7, #28]
 8003c7a:	4413      	add	r3, r2
 8003c7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c80:	461a      	mov	r2, r3
 8003c82:	2340      	movs	r3, #64	; 0x40
 8003c84:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003c86:	693b      	ldr	r3, [r7, #16]
 8003c88:	f003 0302 	and.w	r3, r3, #2
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d023      	beq.n	8003cd8 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8003c90:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003c92:	6a38      	ldr	r0, [r7, #32]
 8003c94:	f002 fd30 	bl	80066f8 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8003c98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c9a:	4613      	mov	r3, r2
 8003c9c:	00db      	lsls	r3, r3, #3
 8003c9e:	4413      	add	r3, r2
 8003ca0:	009b      	lsls	r3, r3, #2
 8003ca2:	3338      	adds	r3, #56	; 0x38
 8003ca4:	687a      	ldr	r2, [r7, #4]
 8003ca6:	4413      	add	r3, r2
 8003ca8:	3304      	adds	r3, #4
 8003caa:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003cac:	697b      	ldr	r3, [r7, #20]
 8003cae:	78db      	ldrb	r3, [r3, #3]
 8003cb0:	2b01      	cmp	r3, #1
 8003cb2:	d108      	bne.n	8003cc6 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8003cb4:	697b      	ldr	r3, [r7, #20]
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cbc:	b2db      	uxtb	r3, r3
 8003cbe:	4619      	mov	r1, r3
 8003cc0:	6878      	ldr	r0, [r7, #4]
 8003cc2:	f005 fe1d 	bl	8009900 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cc8:	015a      	lsls	r2, r3, #5
 8003cca:	69fb      	ldr	r3, [r7, #28]
 8003ccc:	4413      	add	r3, r2
 8003cce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003cd2:	461a      	mov	r2, r3
 8003cd4:	2302      	movs	r3, #2
 8003cd6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003cd8:	693b      	ldr	r3, [r7, #16]
 8003cda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d003      	beq.n	8003cea <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003ce2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003ce4:	6878      	ldr	r0, [r7, #4]
 8003ce6:	f000 fcc3 	bl	8004670 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cec:	3301      	adds	r3, #1
 8003cee:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003cf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cf2:	085b      	lsrs	r3, r3, #1
 8003cf4:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003cf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	f47f af2e 	bne.w	8003b5a <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	4618      	mov	r0, r3
 8003d04:	f003 fd1a 	bl	800773c <USB_ReadInterrupts>
 8003d08:	4603      	mov	r3, r0
 8003d0a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003d0e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003d12:	d122      	bne.n	8003d5a <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003d14:	69fb      	ldr	r3, [r7, #28]
 8003d16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d1a:	685b      	ldr	r3, [r3, #4]
 8003d1c:	69fa      	ldr	r2, [r7, #28]
 8003d1e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003d22:	f023 0301 	bic.w	r3, r3, #1
 8003d26:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8003d2e:	2b01      	cmp	r3, #1
 8003d30:	d108      	bne.n	8003d44 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	2200      	movs	r2, #0
 8003d36:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003d3a:	2100      	movs	r1, #0
 8003d3c:	6878      	ldr	r0, [r7, #4]
 8003d3e:	f000 feab 	bl	8004a98 <HAL_PCDEx_LPM_Callback>
 8003d42:	e002      	b.n	8003d4a <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003d44:	6878      	ldr	r0, [r7, #4]
 8003d46:	f005 fdbb 	bl	80098c0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	695a      	ldr	r2, [r3, #20]
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8003d58:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	4618      	mov	r0, r3
 8003d60:	f003 fcec 	bl	800773c <USB_ReadInterrupts>
 8003d64:	4603      	mov	r3, r0
 8003d66:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d6a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d6e:	d112      	bne.n	8003d96 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003d70:	69fb      	ldr	r3, [r7, #28]
 8003d72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d76:	689b      	ldr	r3, [r3, #8]
 8003d78:	f003 0301 	and.w	r3, r3, #1
 8003d7c:	2b01      	cmp	r3, #1
 8003d7e:	d102      	bne.n	8003d86 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003d80:	6878      	ldr	r0, [r7, #4]
 8003d82:	f005 fd77 	bl	8009874 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	695a      	ldr	r2, [r3, #20]
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8003d94:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	f003 fcce 	bl	800773c <USB_ReadInterrupts>
 8003da0:	4603      	mov	r3, r0
 8003da2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003da6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003daa:	f040 80b7 	bne.w	8003f1c <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003dae:	69fb      	ldr	r3, [r7, #28]
 8003db0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003db4:	685b      	ldr	r3, [r3, #4]
 8003db6:	69fa      	ldr	r2, [r7, #28]
 8003db8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003dbc:	f023 0301 	bic.w	r3, r3, #1
 8003dc0:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	2110      	movs	r1, #16
 8003dc8:	4618      	mov	r0, r3
 8003dca:	f002 fc95 	bl	80066f8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003dce:	2300      	movs	r3, #0
 8003dd0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003dd2:	e046      	b.n	8003e62 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003dd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dd6:	015a      	lsls	r2, r3, #5
 8003dd8:	69fb      	ldr	r3, [r7, #28]
 8003dda:	4413      	add	r3, r2
 8003ddc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003de0:	461a      	mov	r2, r3
 8003de2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003de6:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003de8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dea:	015a      	lsls	r2, r3, #5
 8003dec:	69fb      	ldr	r3, [r7, #28]
 8003dee:	4413      	add	r3, r2
 8003df0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003df8:	0151      	lsls	r1, r2, #5
 8003dfa:	69fa      	ldr	r2, [r7, #28]
 8003dfc:	440a      	add	r2, r1
 8003dfe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003e02:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003e06:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003e08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e0a:	015a      	lsls	r2, r3, #5
 8003e0c:	69fb      	ldr	r3, [r7, #28]
 8003e0e:	4413      	add	r3, r2
 8003e10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e14:	461a      	mov	r2, r3
 8003e16:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003e1a:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003e1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e1e:	015a      	lsls	r2, r3, #5
 8003e20:	69fb      	ldr	r3, [r7, #28]
 8003e22:	4413      	add	r3, r2
 8003e24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003e2c:	0151      	lsls	r1, r2, #5
 8003e2e:	69fa      	ldr	r2, [r7, #28]
 8003e30:	440a      	add	r2, r1
 8003e32:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003e36:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003e3a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003e3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e3e:	015a      	lsls	r2, r3, #5
 8003e40:	69fb      	ldr	r3, [r7, #28]
 8003e42:	4413      	add	r3, r2
 8003e44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003e4c:	0151      	lsls	r1, r2, #5
 8003e4e:	69fa      	ldr	r2, [r7, #28]
 8003e50:	440a      	add	r2, r1
 8003e52:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003e56:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003e5a:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003e5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e5e:	3301      	adds	r3, #1
 8003e60:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	685b      	ldr	r3, [r3, #4]
 8003e66:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003e68:	429a      	cmp	r2, r3
 8003e6a:	d3b3      	bcc.n	8003dd4 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003e6c:	69fb      	ldr	r3, [r7, #28]
 8003e6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e72:	69db      	ldr	r3, [r3, #28]
 8003e74:	69fa      	ldr	r2, [r7, #28]
 8003e76:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003e7a:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8003e7e:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d016      	beq.n	8003eb6 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003e88:	69fb      	ldr	r3, [r7, #28]
 8003e8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e8e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e92:	69fa      	ldr	r2, [r7, #28]
 8003e94:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003e98:	f043 030b 	orr.w	r3, r3, #11
 8003e9c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003ea0:	69fb      	ldr	r3, [r7, #28]
 8003ea2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ea6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ea8:	69fa      	ldr	r2, [r7, #28]
 8003eaa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003eae:	f043 030b 	orr.w	r3, r3, #11
 8003eb2:	6453      	str	r3, [r2, #68]	; 0x44
 8003eb4:	e015      	b.n	8003ee2 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003eb6:	69fb      	ldr	r3, [r7, #28]
 8003eb8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ebc:	695b      	ldr	r3, [r3, #20]
 8003ebe:	69fa      	ldr	r2, [r7, #28]
 8003ec0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003ec4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003ec8:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8003ecc:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003ece:	69fb      	ldr	r3, [r7, #28]
 8003ed0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ed4:	691b      	ldr	r3, [r3, #16]
 8003ed6:	69fa      	ldr	r2, [r7, #28]
 8003ed8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003edc:	f043 030b 	orr.w	r3, r3, #11
 8003ee0:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003ee2:	69fb      	ldr	r3, [r7, #28]
 8003ee4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	69fa      	ldr	r2, [r7, #28]
 8003eec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003ef0:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003ef4:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6818      	ldr	r0, [r3, #0]
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	691b      	ldr	r3, [r3, #16]
 8003efe:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003f06:	461a      	mov	r2, r3
 8003f08:	f003 fcdc 	bl	80078c4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	695a      	ldr	r2, [r3, #20]
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003f1a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	4618      	mov	r0, r3
 8003f22:	f003 fc0b 	bl	800773c <USB_ReadInterrupts>
 8003f26:	4603      	mov	r3, r0
 8003f28:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003f2c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f30:	d124      	bne.n	8003f7c <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	4618      	mov	r0, r3
 8003f38:	f003 fca1 	bl	800787e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	4618      	mov	r0, r3
 8003f42:	f002 fc56 	bl	80067f2 <USB_GetDevSpeed>
 8003f46:	4603      	mov	r3, r0
 8003f48:	461a      	mov	r2, r3
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681c      	ldr	r4, [r3, #0]
 8003f52:	f001 fa39 	bl	80053c8 <HAL_RCC_GetHCLKFreq>
 8003f56:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003f5c:	b2db      	uxtb	r3, r3
 8003f5e:	461a      	mov	r2, r3
 8003f60:	4620      	mov	r0, r4
 8003f62:	f002 f955 	bl	8006210 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003f66:	6878      	ldr	r0, [r7, #4]
 8003f68:	f005 fc5b 	bl	8009822 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	695a      	ldr	r2, [r3, #20]
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003f7a:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	4618      	mov	r0, r3
 8003f82:	f003 fbdb 	bl	800773c <USB_ReadInterrupts>
 8003f86:	4603      	mov	r3, r0
 8003f88:	f003 0308 	and.w	r3, r3, #8
 8003f8c:	2b08      	cmp	r3, #8
 8003f8e:	d10a      	bne.n	8003fa6 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003f90:	6878      	ldr	r0, [r7, #4]
 8003f92:	f005 fc38 	bl	8009806 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	695a      	ldr	r2, [r3, #20]
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f002 0208 	and.w	r2, r2, #8
 8003fa4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	4618      	mov	r0, r3
 8003fac:	f003 fbc6 	bl	800773c <USB_ReadInterrupts>
 8003fb0:	4603      	mov	r3, r0
 8003fb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fb6:	2b80      	cmp	r3, #128	; 0x80
 8003fb8:	d122      	bne.n	8004000 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8003fba:	6a3b      	ldr	r3, [r7, #32]
 8003fbc:	699b      	ldr	r3, [r3, #24]
 8003fbe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003fc2:	6a3b      	ldr	r3, [r7, #32]
 8003fc4:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003fc6:	2301      	movs	r3, #1
 8003fc8:	627b      	str	r3, [r7, #36]	; 0x24
 8003fca:	e014      	b.n	8003ff6 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003fcc:	6879      	ldr	r1, [r7, #4]
 8003fce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fd0:	4613      	mov	r3, r2
 8003fd2:	00db      	lsls	r3, r3, #3
 8003fd4:	4413      	add	r3, r2
 8003fd6:	009b      	lsls	r3, r3, #2
 8003fd8:	440b      	add	r3, r1
 8003fda:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003fde:	781b      	ldrb	r3, [r3, #0]
 8003fe0:	2b01      	cmp	r3, #1
 8003fe2:	d105      	bne.n	8003ff0 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8003fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fe6:	b2db      	uxtb	r3, r3
 8003fe8:	4619      	mov	r1, r3
 8003fea:	6878      	ldr	r0, [r7, #4]
 8003fec:	f000 fb0f 	bl	800460e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ff2:	3301      	adds	r3, #1
 8003ff4:	627b      	str	r3, [r7, #36]	; 0x24
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	685b      	ldr	r3, [r3, #4]
 8003ffa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ffc:	429a      	cmp	r2, r3
 8003ffe:	d3e5      	bcc.n	8003fcc <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	4618      	mov	r0, r3
 8004006:	f003 fb99 	bl	800773c <USB_ReadInterrupts>
 800400a:	4603      	mov	r3, r0
 800400c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004010:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004014:	d13b      	bne.n	800408e <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004016:	2301      	movs	r3, #1
 8004018:	627b      	str	r3, [r7, #36]	; 0x24
 800401a:	e02b      	b.n	8004074 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800401c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800401e:	015a      	lsls	r2, r3, #5
 8004020:	69fb      	ldr	r3, [r7, #28]
 8004022:	4413      	add	r3, r2
 8004024:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800402c:	6879      	ldr	r1, [r7, #4]
 800402e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004030:	4613      	mov	r3, r2
 8004032:	00db      	lsls	r3, r3, #3
 8004034:	4413      	add	r3, r2
 8004036:	009b      	lsls	r3, r3, #2
 8004038:	440b      	add	r3, r1
 800403a:	3340      	adds	r3, #64	; 0x40
 800403c:	781b      	ldrb	r3, [r3, #0]
 800403e:	2b01      	cmp	r3, #1
 8004040:	d115      	bne.n	800406e <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8004042:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004044:	2b00      	cmp	r3, #0
 8004046:	da12      	bge.n	800406e <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8004048:	6879      	ldr	r1, [r7, #4]
 800404a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800404c:	4613      	mov	r3, r2
 800404e:	00db      	lsls	r3, r3, #3
 8004050:	4413      	add	r3, r2
 8004052:	009b      	lsls	r3, r3, #2
 8004054:	440b      	add	r3, r1
 8004056:	333f      	adds	r3, #63	; 0x3f
 8004058:	2201      	movs	r2, #1
 800405a:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800405c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800405e:	b2db      	uxtb	r3, r3
 8004060:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004064:	b2db      	uxtb	r3, r3
 8004066:	4619      	mov	r1, r3
 8004068:	6878      	ldr	r0, [r7, #4]
 800406a:	f000 fad0 	bl	800460e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800406e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004070:	3301      	adds	r3, #1
 8004072:	627b      	str	r3, [r7, #36]	; 0x24
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	685b      	ldr	r3, [r3, #4]
 8004078:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800407a:	429a      	cmp	r2, r3
 800407c:	d3ce      	bcc.n	800401c <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	695a      	ldr	r2, [r3, #20]
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800408c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	4618      	mov	r0, r3
 8004094:	f003 fb52 	bl	800773c <USB_ReadInterrupts>
 8004098:	4603      	mov	r3, r0
 800409a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800409e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80040a2:	d155      	bne.n	8004150 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80040a4:	2301      	movs	r3, #1
 80040a6:	627b      	str	r3, [r7, #36]	; 0x24
 80040a8:	e045      	b.n	8004136 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80040aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ac:	015a      	lsls	r2, r3, #5
 80040ae:	69fb      	ldr	r3, [r7, #28]
 80040b0:	4413      	add	r3, r2
 80040b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80040ba:	6879      	ldr	r1, [r7, #4]
 80040bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040be:	4613      	mov	r3, r2
 80040c0:	00db      	lsls	r3, r3, #3
 80040c2:	4413      	add	r3, r2
 80040c4:	009b      	lsls	r3, r3, #2
 80040c6:	440b      	add	r3, r1
 80040c8:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80040cc:	781b      	ldrb	r3, [r3, #0]
 80040ce:	2b01      	cmp	r3, #1
 80040d0:	d12e      	bne.n	8004130 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80040d2:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	da2b      	bge.n	8004130 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80040d8:	69bb      	ldr	r3, [r7, #24]
 80040da:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80040e4:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80040e8:	429a      	cmp	r2, r3
 80040ea:	d121      	bne.n	8004130 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80040ec:	6879      	ldr	r1, [r7, #4]
 80040ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040f0:	4613      	mov	r3, r2
 80040f2:	00db      	lsls	r3, r3, #3
 80040f4:	4413      	add	r3, r2
 80040f6:	009b      	lsls	r3, r3, #2
 80040f8:	440b      	add	r3, r1
 80040fa:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80040fe:	2201      	movs	r2, #1
 8004100:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8004102:	6a3b      	ldr	r3, [r7, #32]
 8004104:	699b      	ldr	r3, [r3, #24]
 8004106:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800410a:	6a3b      	ldr	r3, [r7, #32]
 800410c:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800410e:	6a3b      	ldr	r3, [r7, #32]
 8004110:	695b      	ldr	r3, [r3, #20]
 8004112:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004116:	2b00      	cmp	r3, #0
 8004118:	d10a      	bne.n	8004130 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800411a:	69fb      	ldr	r3, [r7, #28]
 800411c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004120:	685b      	ldr	r3, [r3, #4]
 8004122:	69fa      	ldr	r2, [r7, #28]
 8004124:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004128:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800412c:	6053      	str	r3, [r2, #4]
            break;
 800412e:	e007      	b.n	8004140 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004132:	3301      	adds	r3, #1
 8004134:	627b      	str	r3, [r7, #36]	; 0x24
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	685b      	ldr	r3, [r3, #4]
 800413a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800413c:	429a      	cmp	r2, r3
 800413e:	d3b4      	bcc.n	80040aa <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	695a      	ldr	r2, [r3, #20]
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800414e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	4618      	mov	r0, r3
 8004156:	f003 faf1 	bl	800773c <USB_ReadInterrupts>
 800415a:	4603      	mov	r3, r0
 800415c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004160:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004164:	d10a      	bne.n	800417c <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8004166:	6878      	ldr	r0, [r7, #4]
 8004168:	f005 fbdc 	bl	8009924 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	695a      	ldr	r2, [r3, #20]
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800417a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	4618      	mov	r0, r3
 8004182:	f003 fadb 	bl	800773c <USB_ReadInterrupts>
 8004186:	4603      	mov	r3, r0
 8004188:	f003 0304 	and.w	r3, r3, #4
 800418c:	2b04      	cmp	r3, #4
 800418e:	d115      	bne.n	80041bc <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	685b      	ldr	r3, [r3, #4]
 8004196:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8004198:	69bb      	ldr	r3, [r7, #24]
 800419a:	f003 0304 	and.w	r3, r3, #4
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d002      	beq.n	80041a8 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80041a2:	6878      	ldr	r0, [r7, #4]
 80041a4:	f005 fbcc 	bl	8009940 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	6859      	ldr	r1, [r3, #4]
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	69ba      	ldr	r2, [r7, #24]
 80041b4:	430a      	orrs	r2, r1
 80041b6:	605a      	str	r2, [r3, #4]
 80041b8:	e000      	b.n	80041bc <HAL_PCD_IRQHandler+0x938>
      return;
 80041ba:	bf00      	nop
    }
  }
}
 80041bc:	3734      	adds	r7, #52	; 0x34
 80041be:	46bd      	mov	sp, r7
 80041c0:	bd90      	pop	{r4, r7, pc}

080041c2 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80041c2:	b580      	push	{r7, lr}
 80041c4:	b082      	sub	sp, #8
 80041c6:	af00      	add	r7, sp, #0
 80041c8:	6078      	str	r0, [r7, #4]
 80041ca:	460b      	mov	r3, r1
 80041cc:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80041d4:	2b01      	cmp	r3, #1
 80041d6:	d101      	bne.n	80041dc <HAL_PCD_SetAddress+0x1a>
 80041d8:	2302      	movs	r3, #2
 80041da:	e013      	b.n	8004204 <HAL_PCD_SetAddress+0x42>
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2201      	movs	r2, #1
 80041e0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	78fa      	ldrb	r2, [r7, #3]
 80041e8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	78fa      	ldrb	r2, [r7, #3]
 80041f2:	4611      	mov	r1, r2
 80041f4:	4618      	mov	r0, r3
 80041f6:	f003 fa39 	bl	800766c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	2200      	movs	r2, #0
 80041fe:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004202:	2300      	movs	r3, #0
}
 8004204:	4618      	mov	r0, r3
 8004206:	3708      	adds	r7, #8
 8004208:	46bd      	mov	sp, r7
 800420a:	bd80      	pop	{r7, pc}

0800420c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800420c:	b580      	push	{r7, lr}
 800420e:	b084      	sub	sp, #16
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
 8004214:	4608      	mov	r0, r1
 8004216:	4611      	mov	r1, r2
 8004218:	461a      	mov	r2, r3
 800421a:	4603      	mov	r3, r0
 800421c:	70fb      	strb	r3, [r7, #3]
 800421e:	460b      	mov	r3, r1
 8004220:	803b      	strh	r3, [r7, #0]
 8004222:	4613      	mov	r3, r2
 8004224:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8004226:	2300      	movs	r3, #0
 8004228:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800422a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800422e:	2b00      	cmp	r3, #0
 8004230:	da0f      	bge.n	8004252 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004232:	78fb      	ldrb	r3, [r7, #3]
 8004234:	f003 020f 	and.w	r2, r3, #15
 8004238:	4613      	mov	r3, r2
 800423a:	00db      	lsls	r3, r3, #3
 800423c:	4413      	add	r3, r2
 800423e:	009b      	lsls	r3, r3, #2
 8004240:	3338      	adds	r3, #56	; 0x38
 8004242:	687a      	ldr	r2, [r7, #4]
 8004244:	4413      	add	r3, r2
 8004246:	3304      	adds	r3, #4
 8004248:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	2201      	movs	r2, #1
 800424e:	705a      	strb	r2, [r3, #1]
 8004250:	e00f      	b.n	8004272 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004252:	78fb      	ldrb	r3, [r7, #3]
 8004254:	f003 020f 	and.w	r2, r3, #15
 8004258:	4613      	mov	r3, r2
 800425a:	00db      	lsls	r3, r3, #3
 800425c:	4413      	add	r3, r2
 800425e:	009b      	lsls	r3, r3, #2
 8004260:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004264:	687a      	ldr	r2, [r7, #4]
 8004266:	4413      	add	r3, r2
 8004268:	3304      	adds	r3, #4
 800426a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	2200      	movs	r2, #0
 8004270:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004272:	78fb      	ldrb	r3, [r7, #3]
 8004274:	f003 030f 	and.w	r3, r3, #15
 8004278:	b2da      	uxtb	r2, r3
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800427e:	883a      	ldrh	r2, [r7, #0]
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	78ba      	ldrb	r2, [r7, #2]
 8004288:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	785b      	ldrb	r3, [r3, #1]
 800428e:	2b00      	cmp	r3, #0
 8004290:	d004      	beq.n	800429c <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	781b      	ldrb	r3, [r3, #0]
 8004296:	b29a      	uxth	r2, r3
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800429c:	78bb      	ldrb	r3, [r7, #2]
 800429e:	2b02      	cmp	r3, #2
 80042a0:	d102      	bne.n	80042a8 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	2200      	movs	r2, #0
 80042a6:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80042ae:	2b01      	cmp	r3, #1
 80042b0:	d101      	bne.n	80042b6 <HAL_PCD_EP_Open+0xaa>
 80042b2:	2302      	movs	r3, #2
 80042b4:	e00e      	b.n	80042d4 <HAL_PCD_EP_Open+0xc8>
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	2201      	movs	r2, #1
 80042ba:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	68f9      	ldr	r1, [r7, #12]
 80042c4:	4618      	mov	r0, r3
 80042c6:	f002 fab9 	bl	800683c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	2200      	movs	r2, #0
 80042ce:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 80042d2:	7afb      	ldrb	r3, [r7, #11]
}
 80042d4:	4618      	mov	r0, r3
 80042d6:	3710      	adds	r7, #16
 80042d8:	46bd      	mov	sp, r7
 80042da:	bd80      	pop	{r7, pc}

080042dc <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80042dc:	b580      	push	{r7, lr}
 80042de:	b084      	sub	sp, #16
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
 80042e4:	460b      	mov	r3, r1
 80042e6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80042e8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	da0f      	bge.n	8004310 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80042f0:	78fb      	ldrb	r3, [r7, #3]
 80042f2:	f003 020f 	and.w	r2, r3, #15
 80042f6:	4613      	mov	r3, r2
 80042f8:	00db      	lsls	r3, r3, #3
 80042fa:	4413      	add	r3, r2
 80042fc:	009b      	lsls	r3, r3, #2
 80042fe:	3338      	adds	r3, #56	; 0x38
 8004300:	687a      	ldr	r2, [r7, #4]
 8004302:	4413      	add	r3, r2
 8004304:	3304      	adds	r3, #4
 8004306:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	2201      	movs	r2, #1
 800430c:	705a      	strb	r2, [r3, #1]
 800430e:	e00f      	b.n	8004330 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004310:	78fb      	ldrb	r3, [r7, #3]
 8004312:	f003 020f 	and.w	r2, r3, #15
 8004316:	4613      	mov	r3, r2
 8004318:	00db      	lsls	r3, r3, #3
 800431a:	4413      	add	r3, r2
 800431c:	009b      	lsls	r3, r3, #2
 800431e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004322:	687a      	ldr	r2, [r7, #4]
 8004324:	4413      	add	r3, r2
 8004326:	3304      	adds	r3, #4
 8004328:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	2200      	movs	r2, #0
 800432e:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8004330:	78fb      	ldrb	r3, [r7, #3]
 8004332:	f003 030f 	and.w	r3, r3, #15
 8004336:	b2da      	uxtb	r2, r3
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004342:	2b01      	cmp	r3, #1
 8004344:	d101      	bne.n	800434a <HAL_PCD_EP_Close+0x6e>
 8004346:	2302      	movs	r3, #2
 8004348:	e00e      	b.n	8004368 <HAL_PCD_EP_Close+0x8c>
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	2201      	movs	r2, #1
 800434e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	68f9      	ldr	r1, [r7, #12]
 8004358:	4618      	mov	r0, r3
 800435a:	f002 faf7 	bl	800694c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	2200      	movs	r2, #0
 8004362:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8004366:	2300      	movs	r3, #0
}
 8004368:	4618      	mov	r0, r3
 800436a:	3710      	adds	r7, #16
 800436c:	46bd      	mov	sp, r7
 800436e:	bd80      	pop	{r7, pc}

08004370 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004370:	b580      	push	{r7, lr}
 8004372:	b086      	sub	sp, #24
 8004374:	af00      	add	r7, sp, #0
 8004376:	60f8      	str	r0, [r7, #12]
 8004378:	607a      	str	r2, [r7, #4]
 800437a:	603b      	str	r3, [r7, #0]
 800437c:	460b      	mov	r3, r1
 800437e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004380:	7afb      	ldrb	r3, [r7, #11]
 8004382:	f003 020f 	and.w	r2, r3, #15
 8004386:	4613      	mov	r3, r2
 8004388:	00db      	lsls	r3, r3, #3
 800438a:	4413      	add	r3, r2
 800438c:	009b      	lsls	r3, r3, #2
 800438e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004392:	68fa      	ldr	r2, [r7, #12]
 8004394:	4413      	add	r3, r2
 8004396:	3304      	adds	r3, #4
 8004398:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800439a:	697b      	ldr	r3, [r7, #20]
 800439c:	687a      	ldr	r2, [r7, #4]
 800439e:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80043a0:	697b      	ldr	r3, [r7, #20]
 80043a2:	683a      	ldr	r2, [r7, #0]
 80043a4:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80043a6:	697b      	ldr	r3, [r7, #20]
 80043a8:	2200      	movs	r2, #0
 80043aa:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 80043ac:	697b      	ldr	r3, [r7, #20]
 80043ae:	2200      	movs	r2, #0
 80043b0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80043b2:	7afb      	ldrb	r3, [r7, #11]
 80043b4:	f003 030f 	and.w	r3, r3, #15
 80043b8:	b2da      	uxtb	r2, r3
 80043ba:	697b      	ldr	r3, [r7, #20]
 80043bc:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	691b      	ldr	r3, [r3, #16]
 80043c2:	2b01      	cmp	r3, #1
 80043c4:	d102      	bne.n	80043cc <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80043c6:	687a      	ldr	r2, [r7, #4]
 80043c8:	697b      	ldr	r3, [r7, #20]
 80043ca:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80043cc:	7afb      	ldrb	r3, [r7, #11]
 80043ce:	f003 030f 	and.w	r3, r3, #15
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d109      	bne.n	80043ea <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	6818      	ldr	r0, [r3, #0]
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	691b      	ldr	r3, [r3, #16]
 80043de:	b2db      	uxtb	r3, r3
 80043e0:	461a      	mov	r2, r3
 80043e2:	6979      	ldr	r1, [r7, #20]
 80043e4:	f002 fdd6 	bl	8006f94 <USB_EP0StartXfer>
 80043e8:	e008      	b.n	80043fc <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	6818      	ldr	r0, [r3, #0]
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	691b      	ldr	r3, [r3, #16]
 80043f2:	b2db      	uxtb	r3, r3
 80043f4:	461a      	mov	r2, r3
 80043f6:	6979      	ldr	r1, [r7, #20]
 80043f8:	f002 fb84 	bl	8006b04 <USB_EPStartXfer>
  }

  return HAL_OK;
 80043fc:	2300      	movs	r3, #0
}
 80043fe:	4618      	mov	r0, r3
 8004400:	3718      	adds	r7, #24
 8004402:	46bd      	mov	sp, r7
 8004404:	bd80      	pop	{r7, pc}

08004406 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004406:	b580      	push	{r7, lr}
 8004408:	b086      	sub	sp, #24
 800440a:	af00      	add	r7, sp, #0
 800440c:	60f8      	str	r0, [r7, #12]
 800440e:	607a      	str	r2, [r7, #4]
 8004410:	603b      	str	r3, [r7, #0]
 8004412:	460b      	mov	r3, r1
 8004414:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004416:	7afb      	ldrb	r3, [r7, #11]
 8004418:	f003 020f 	and.w	r2, r3, #15
 800441c:	4613      	mov	r3, r2
 800441e:	00db      	lsls	r3, r3, #3
 8004420:	4413      	add	r3, r2
 8004422:	009b      	lsls	r3, r3, #2
 8004424:	3338      	adds	r3, #56	; 0x38
 8004426:	68fa      	ldr	r2, [r7, #12]
 8004428:	4413      	add	r3, r2
 800442a:	3304      	adds	r3, #4
 800442c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800442e:	697b      	ldr	r3, [r7, #20]
 8004430:	687a      	ldr	r2, [r7, #4]
 8004432:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8004434:	697b      	ldr	r3, [r7, #20]
 8004436:	683a      	ldr	r2, [r7, #0]
 8004438:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800443a:	697b      	ldr	r3, [r7, #20]
 800443c:	2200      	movs	r2, #0
 800443e:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8004440:	697b      	ldr	r3, [r7, #20]
 8004442:	2201      	movs	r2, #1
 8004444:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004446:	7afb      	ldrb	r3, [r7, #11]
 8004448:	f003 030f 	and.w	r3, r3, #15
 800444c:	b2da      	uxtb	r2, r3
 800444e:	697b      	ldr	r3, [r7, #20]
 8004450:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	691b      	ldr	r3, [r3, #16]
 8004456:	2b01      	cmp	r3, #1
 8004458:	d102      	bne.n	8004460 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800445a:	687a      	ldr	r2, [r7, #4]
 800445c:	697b      	ldr	r3, [r7, #20]
 800445e:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004460:	7afb      	ldrb	r3, [r7, #11]
 8004462:	f003 030f 	and.w	r3, r3, #15
 8004466:	2b00      	cmp	r3, #0
 8004468:	d109      	bne.n	800447e <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	6818      	ldr	r0, [r3, #0]
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	691b      	ldr	r3, [r3, #16]
 8004472:	b2db      	uxtb	r3, r3
 8004474:	461a      	mov	r2, r3
 8004476:	6979      	ldr	r1, [r7, #20]
 8004478:	f002 fd8c 	bl	8006f94 <USB_EP0StartXfer>
 800447c:	e008      	b.n	8004490 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	6818      	ldr	r0, [r3, #0]
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	691b      	ldr	r3, [r3, #16]
 8004486:	b2db      	uxtb	r3, r3
 8004488:	461a      	mov	r2, r3
 800448a:	6979      	ldr	r1, [r7, #20]
 800448c:	f002 fb3a 	bl	8006b04 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004490:	2300      	movs	r3, #0
}
 8004492:	4618      	mov	r0, r3
 8004494:	3718      	adds	r7, #24
 8004496:	46bd      	mov	sp, r7
 8004498:	bd80      	pop	{r7, pc}

0800449a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800449a:	b580      	push	{r7, lr}
 800449c:	b084      	sub	sp, #16
 800449e:	af00      	add	r7, sp, #0
 80044a0:	6078      	str	r0, [r7, #4]
 80044a2:	460b      	mov	r3, r1
 80044a4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80044a6:	78fb      	ldrb	r3, [r7, #3]
 80044a8:	f003 020f 	and.w	r2, r3, #15
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	685b      	ldr	r3, [r3, #4]
 80044b0:	429a      	cmp	r2, r3
 80044b2:	d901      	bls.n	80044b8 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80044b4:	2301      	movs	r3, #1
 80044b6:	e050      	b.n	800455a <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80044b8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80044bc:	2b00      	cmp	r3, #0
 80044be:	da0f      	bge.n	80044e0 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80044c0:	78fb      	ldrb	r3, [r7, #3]
 80044c2:	f003 020f 	and.w	r2, r3, #15
 80044c6:	4613      	mov	r3, r2
 80044c8:	00db      	lsls	r3, r3, #3
 80044ca:	4413      	add	r3, r2
 80044cc:	009b      	lsls	r3, r3, #2
 80044ce:	3338      	adds	r3, #56	; 0x38
 80044d0:	687a      	ldr	r2, [r7, #4]
 80044d2:	4413      	add	r3, r2
 80044d4:	3304      	adds	r3, #4
 80044d6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	2201      	movs	r2, #1
 80044dc:	705a      	strb	r2, [r3, #1]
 80044de:	e00d      	b.n	80044fc <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80044e0:	78fa      	ldrb	r2, [r7, #3]
 80044e2:	4613      	mov	r3, r2
 80044e4:	00db      	lsls	r3, r3, #3
 80044e6:	4413      	add	r3, r2
 80044e8:	009b      	lsls	r3, r3, #2
 80044ea:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80044ee:	687a      	ldr	r2, [r7, #4]
 80044f0:	4413      	add	r3, r2
 80044f2:	3304      	adds	r3, #4
 80044f4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	2200      	movs	r2, #0
 80044fa:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	2201      	movs	r2, #1
 8004500:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004502:	78fb      	ldrb	r3, [r7, #3]
 8004504:	f003 030f 	and.w	r3, r3, #15
 8004508:	b2da      	uxtb	r2, r3
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004514:	2b01      	cmp	r3, #1
 8004516:	d101      	bne.n	800451c <HAL_PCD_EP_SetStall+0x82>
 8004518:	2302      	movs	r3, #2
 800451a:	e01e      	b.n	800455a <HAL_PCD_EP_SetStall+0xc0>
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2201      	movs	r2, #1
 8004520:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	68f9      	ldr	r1, [r7, #12]
 800452a:	4618      	mov	r0, r3
 800452c:	f002 ffca 	bl	80074c4 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004530:	78fb      	ldrb	r3, [r7, #3]
 8004532:	f003 030f 	and.w	r3, r3, #15
 8004536:	2b00      	cmp	r3, #0
 8004538:	d10a      	bne.n	8004550 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6818      	ldr	r0, [r3, #0]
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	691b      	ldr	r3, [r3, #16]
 8004542:	b2d9      	uxtb	r1, r3
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800454a:	461a      	mov	r2, r3
 800454c:	f003 f9ba 	bl	80078c4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2200      	movs	r2, #0
 8004554:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004558:	2300      	movs	r3, #0
}
 800455a:	4618      	mov	r0, r3
 800455c:	3710      	adds	r7, #16
 800455e:	46bd      	mov	sp, r7
 8004560:	bd80      	pop	{r7, pc}

08004562 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004562:	b580      	push	{r7, lr}
 8004564:	b084      	sub	sp, #16
 8004566:	af00      	add	r7, sp, #0
 8004568:	6078      	str	r0, [r7, #4]
 800456a:	460b      	mov	r3, r1
 800456c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800456e:	78fb      	ldrb	r3, [r7, #3]
 8004570:	f003 020f 	and.w	r2, r3, #15
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	685b      	ldr	r3, [r3, #4]
 8004578:	429a      	cmp	r2, r3
 800457a:	d901      	bls.n	8004580 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800457c:	2301      	movs	r3, #1
 800457e:	e042      	b.n	8004606 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004580:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004584:	2b00      	cmp	r3, #0
 8004586:	da0f      	bge.n	80045a8 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004588:	78fb      	ldrb	r3, [r7, #3]
 800458a:	f003 020f 	and.w	r2, r3, #15
 800458e:	4613      	mov	r3, r2
 8004590:	00db      	lsls	r3, r3, #3
 8004592:	4413      	add	r3, r2
 8004594:	009b      	lsls	r3, r3, #2
 8004596:	3338      	adds	r3, #56	; 0x38
 8004598:	687a      	ldr	r2, [r7, #4]
 800459a:	4413      	add	r3, r2
 800459c:	3304      	adds	r3, #4
 800459e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	2201      	movs	r2, #1
 80045a4:	705a      	strb	r2, [r3, #1]
 80045a6:	e00f      	b.n	80045c8 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80045a8:	78fb      	ldrb	r3, [r7, #3]
 80045aa:	f003 020f 	and.w	r2, r3, #15
 80045ae:	4613      	mov	r3, r2
 80045b0:	00db      	lsls	r3, r3, #3
 80045b2:	4413      	add	r3, r2
 80045b4:	009b      	lsls	r3, r3, #2
 80045b6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80045ba:	687a      	ldr	r2, [r7, #4]
 80045bc:	4413      	add	r3, r2
 80045be:	3304      	adds	r3, #4
 80045c0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	2200      	movs	r2, #0
 80045c6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	2200      	movs	r2, #0
 80045cc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80045ce:	78fb      	ldrb	r3, [r7, #3]
 80045d0:	f003 030f 	and.w	r3, r3, #15
 80045d4:	b2da      	uxtb	r2, r3
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80045e0:	2b01      	cmp	r3, #1
 80045e2:	d101      	bne.n	80045e8 <HAL_PCD_EP_ClrStall+0x86>
 80045e4:	2302      	movs	r3, #2
 80045e6:	e00e      	b.n	8004606 <HAL_PCD_EP_ClrStall+0xa4>
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2201      	movs	r2, #1
 80045ec:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	68f9      	ldr	r1, [r7, #12]
 80045f6:	4618      	mov	r0, r3
 80045f8:	f002 ffd2 	bl	80075a0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2200      	movs	r2, #0
 8004600:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004604:	2300      	movs	r3, #0
}
 8004606:	4618      	mov	r0, r3
 8004608:	3710      	adds	r7, #16
 800460a:	46bd      	mov	sp, r7
 800460c:	bd80      	pop	{r7, pc}

0800460e <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800460e:	b580      	push	{r7, lr}
 8004610:	b084      	sub	sp, #16
 8004612:	af00      	add	r7, sp, #0
 8004614:	6078      	str	r0, [r7, #4]
 8004616:	460b      	mov	r3, r1
 8004618:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800461a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800461e:	2b00      	cmp	r3, #0
 8004620:	da0c      	bge.n	800463c <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004622:	78fb      	ldrb	r3, [r7, #3]
 8004624:	f003 020f 	and.w	r2, r3, #15
 8004628:	4613      	mov	r3, r2
 800462a:	00db      	lsls	r3, r3, #3
 800462c:	4413      	add	r3, r2
 800462e:	009b      	lsls	r3, r3, #2
 8004630:	3338      	adds	r3, #56	; 0x38
 8004632:	687a      	ldr	r2, [r7, #4]
 8004634:	4413      	add	r3, r2
 8004636:	3304      	adds	r3, #4
 8004638:	60fb      	str	r3, [r7, #12]
 800463a:	e00c      	b.n	8004656 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800463c:	78fb      	ldrb	r3, [r7, #3]
 800463e:	f003 020f 	and.w	r2, r3, #15
 8004642:	4613      	mov	r3, r2
 8004644:	00db      	lsls	r3, r3, #3
 8004646:	4413      	add	r3, r2
 8004648:	009b      	lsls	r3, r3, #2
 800464a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800464e:	687a      	ldr	r2, [r7, #4]
 8004650:	4413      	add	r3, r2
 8004652:	3304      	adds	r3, #4
 8004654:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	68f9      	ldr	r1, [r7, #12]
 800465c:	4618      	mov	r0, r3
 800465e:	f002 fdf1 	bl	8007244 <USB_EPStopXfer>
 8004662:	4603      	mov	r3, r0
 8004664:	72fb      	strb	r3, [r7, #11]

  return ret;
 8004666:	7afb      	ldrb	r3, [r7, #11]
}
 8004668:	4618      	mov	r0, r3
 800466a:	3710      	adds	r7, #16
 800466c:	46bd      	mov	sp, r7
 800466e:	bd80      	pop	{r7, pc}

08004670 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004670:	b580      	push	{r7, lr}
 8004672:	b08a      	sub	sp, #40	; 0x28
 8004674:	af02      	add	r7, sp, #8
 8004676:	6078      	str	r0, [r7, #4]
 8004678:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004680:	697b      	ldr	r3, [r7, #20]
 8004682:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004684:	683a      	ldr	r2, [r7, #0]
 8004686:	4613      	mov	r3, r2
 8004688:	00db      	lsls	r3, r3, #3
 800468a:	4413      	add	r3, r2
 800468c:	009b      	lsls	r3, r3, #2
 800468e:	3338      	adds	r3, #56	; 0x38
 8004690:	687a      	ldr	r2, [r7, #4]
 8004692:	4413      	add	r3, r2
 8004694:	3304      	adds	r3, #4
 8004696:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	6a1a      	ldr	r2, [r3, #32]
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	699b      	ldr	r3, [r3, #24]
 80046a0:	429a      	cmp	r2, r3
 80046a2:	d901      	bls.n	80046a8 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80046a4:	2301      	movs	r3, #1
 80046a6:	e06c      	b.n	8004782 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	699a      	ldr	r2, [r3, #24]
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	6a1b      	ldr	r3, [r3, #32]
 80046b0:	1ad3      	subs	r3, r2, r3
 80046b2:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	68db      	ldr	r3, [r3, #12]
 80046b8:	69fa      	ldr	r2, [r7, #28]
 80046ba:	429a      	cmp	r2, r3
 80046bc:	d902      	bls.n	80046c4 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	68db      	ldr	r3, [r3, #12]
 80046c2:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80046c4:	69fb      	ldr	r3, [r7, #28]
 80046c6:	3303      	adds	r3, #3
 80046c8:	089b      	lsrs	r3, r3, #2
 80046ca:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80046cc:	e02b      	b.n	8004726 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	699a      	ldr	r2, [r3, #24]
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	6a1b      	ldr	r3, [r3, #32]
 80046d6:	1ad3      	subs	r3, r2, r3
 80046d8:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	68db      	ldr	r3, [r3, #12]
 80046de:	69fa      	ldr	r2, [r7, #28]
 80046e0:	429a      	cmp	r2, r3
 80046e2:	d902      	bls.n	80046ea <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	68db      	ldr	r3, [r3, #12]
 80046e8:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80046ea:	69fb      	ldr	r3, [r7, #28]
 80046ec:	3303      	adds	r3, #3
 80046ee:	089b      	lsrs	r3, r3, #2
 80046f0:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	6919      	ldr	r1, [r3, #16]
 80046f6:	683b      	ldr	r3, [r7, #0]
 80046f8:	b2da      	uxtb	r2, r3
 80046fa:	69fb      	ldr	r3, [r7, #28]
 80046fc:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004702:	b2db      	uxtb	r3, r3
 8004704:	9300      	str	r3, [sp, #0]
 8004706:	4603      	mov	r3, r0
 8004708:	6978      	ldr	r0, [r7, #20]
 800470a:	f002 fe45 	bl	8007398 <USB_WritePacket>

    ep->xfer_buff  += len;
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	691a      	ldr	r2, [r3, #16]
 8004712:	69fb      	ldr	r3, [r7, #28]
 8004714:	441a      	add	r2, r3
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	6a1a      	ldr	r2, [r3, #32]
 800471e:	69fb      	ldr	r3, [r7, #28]
 8004720:	441a      	add	r2, r3
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004726:	683b      	ldr	r3, [r7, #0]
 8004728:	015a      	lsls	r2, r3, #5
 800472a:	693b      	ldr	r3, [r7, #16]
 800472c:	4413      	add	r3, r2
 800472e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004732:	699b      	ldr	r3, [r3, #24]
 8004734:	b29b      	uxth	r3, r3
 8004736:	69ba      	ldr	r2, [r7, #24]
 8004738:	429a      	cmp	r2, r3
 800473a:	d809      	bhi.n	8004750 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	6a1a      	ldr	r2, [r3, #32]
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004744:	429a      	cmp	r2, r3
 8004746:	d203      	bcs.n	8004750 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	699b      	ldr	r3, [r3, #24]
 800474c:	2b00      	cmp	r3, #0
 800474e:	d1be      	bne.n	80046ce <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	699a      	ldr	r2, [r3, #24]
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	6a1b      	ldr	r3, [r3, #32]
 8004758:	429a      	cmp	r2, r3
 800475a:	d811      	bhi.n	8004780 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	f003 030f 	and.w	r3, r3, #15
 8004762:	2201      	movs	r2, #1
 8004764:	fa02 f303 	lsl.w	r3, r2, r3
 8004768:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800476a:	693b      	ldr	r3, [r7, #16]
 800476c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004770:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004772:	68bb      	ldr	r3, [r7, #8]
 8004774:	43db      	mvns	r3, r3
 8004776:	6939      	ldr	r1, [r7, #16]
 8004778:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800477c:	4013      	ands	r3, r2
 800477e:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8004780:	2300      	movs	r3, #0
}
 8004782:	4618      	mov	r0, r3
 8004784:	3720      	adds	r7, #32
 8004786:	46bd      	mov	sp, r7
 8004788:	bd80      	pop	{r7, pc}
	...

0800478c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800478c:	b580      	push	{r7, lr}
 800478e:	b088      	sub	sp, #32
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]
 8004794:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800479c:	69fb      	ldr	r3, [r7, #28]
 800479e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80047a0:	69fb      	ldr	r3, [r7, #28]
 80047a2:	333c      	adds	r3, #60	; 0x3c
 80047a4:	3304      	adds	r3, #4
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80047aa:	683b      	ldr	r3, [r7, #0]
 80047ac:	015a      	lsls	r2, r3, #5
 80047ae:	69bb      	ldr	r3, [r7, #24]
 80047b0:	4413      	add	r3, r2
 80047b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047b6:	689b      	ldr	r3, [r3, #8]
 80047b8:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	691b      	ldr	r3, [r3, #16]
 80047be:	2b01      	cmp	r3, #1
 80047c0:	d17b      	bne.n	80048ba <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80047c2:	693b      	ldr	r3, [r7, #16]
 80047c4:	f003 0308 	and.w	r3, r3, #8
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d015      	beq.n	80047f8 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80047cc:	697b      	ldr	r3, [r7, #20]
 80047ce:	4a61      	ldr	r2, [pc, #388]	; (8004954 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80047d0:	4293      	cmp	r3, r2
 80047d2:	f240 80b9 	bls.w	8004948 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80047d6:	693b      	ldr	r3, [r7, #16]
 80047d8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80047dc:	2b00      	cmp	r3, #0
 80047de:	f000 80b3 	beq.w	8004948 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80047e2:	683b      	ldr	r3, [r7, #0]
 80047e4:	015a      	lsls	r2, r3, #5
 80047e6:	69bb      	ldr	r3, [r7, #24]
 80047e8:	4413      	add	r3, r2
 80047ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047ee:	461a      	mov	r2, r3
 80047f0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80047f4:	6093      	str	r3, [r2, #8]
 80047f6:	e0a7      	b.n	8004948 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80047f8:	693b      	ldr	r3, [r7, #16]
 80047fa:	f003 0320 	and.w	r3, r3, #32
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d009      	beq.n	8004816 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	015a      	lsls	r2, r3, #5
 8004806:	69bb      	ldr	r3, [r7, #24]
 8004808:	4413      	add	r3, r2
 800480a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800480e:	461a      	mov	r2, r3
 8004810:	2320      	movs	r3, #32
 8004812:	6093      	str	r3, [r2, #8]
 8004814:	e098      	b.n	8004948 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8004816:	693b      	ldr	r3, [r7, #16]
 8004818:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800481c:	2b00      	cmp	r3, #0
 800481e:	f040 8093 	bne.w	8004948 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004822:	697b      	ldr	r3, [r7, #20]
 8004824:	4a4b      	ldr	r2, [pc, #300]	; (8004954 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004826:	4293      	cmp	r3, r2
 8004828:	d90f      	bls.n	800484a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800482a:	693b      	ldr	r3, [r7, #16]
 800482c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004830:	2b00      	cmp	r3, #0
 8004832:	d00a      	beq.n	800484a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	015a      	lsls	r2, r3, #5
 8004838:	69bb      	ldr	r3, [r7, #24]
 800483a:	4413      	add	r3, r2
 800483c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004840:	461a      	mov	r2, r3
 8004842:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004846:	6093      	str	r3, [r2, #8]
 8004848:	e07e      	b.n	8004948 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800484a:	683a      	ldr	r2, [r7, #0]
 800484c:	4613      	mov	r3, r2
 800484e:	00db      	lsls	r3, r3, #3
 8004850:	4413      	add	r3, r2
 8004852:	009b      	lsls	r3, r3, #2
 8004854:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004858:	687a      	ldr	r2, [r7, #4]
 800485a:	4413      	add	r3, r2
 800485c:	3304      	adds	r3, #4
 800485e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	69da      	ldr	r2, [r3, #28]
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	0159      	lsls	r1, r3, #5
 8004868:	69bb      	ldr	r3, [r7, #24]
 800486a:	440b      	add	r3, r1
 800486c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004870:	691b      	ldr	r3, [r3, #16]
 8004872:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004876:	1ad2      	subs	r2, r2, r3
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 800487c:	683b      	ldr	r3, [r7, #0]
 800487e:	2b00      	cmp	r3, #0
 8004880:	d114      	bne.n	80048ac <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	699b      	ldr	r3, [r3, #24]
 8004886:	2b00      	cmp	r3, #0
 8004888:	d109      	bne.n	800489e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6818      	ldr	r0, [r3, #0]
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004894:	461a      	mov	r2, r3
 8004896:	2101      	movs	r1, #1
 8004898:	f003 f814 	bl	80078c4 <USB_EP0_OutStart>
 800489c:	e006      	b.n	80048ac <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	691a      	ldr	r2, [r3, #16]
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	6a1b      	ldr	r3, [r3, #32]
 80048a6:	441a      	add	r2, r3
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	b2db      	uxtb	r3, r3
 80048b0:	4619      	mov	r1, r3
 80048b2:	6878      	ldr	r0, [r7, #4]
 80048b4:	f004 ff72 	bl	800979c <HAL_PCD_DataOutStageCallback>
 80048b8:	e046      	b.n	8004948 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80048ba:	697b      	ldr	r3, [r7, #20]
 80048bc:	4a26      	ldr	r2, [pc, #152]	; (8004958 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80048be:	4293      	cmp	r3, r2
 80048c0:	d124      	bne.n	800490c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80048c2:	693b      	ldr	r3, [r7, #16]
 80048c4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d00a      	beq.n	80048e2 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80048cc:	683b      	ldr	r3, [r7, #0]
 80048ce:	015a      	lsls	r2, r3, #5
 80048d0:	69bb      	ldr	r3, [r7, #24]
 80048d2:	4413      	add	r3, r2
 80048d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048d8:	461a      	mov	r2, r3
 80048da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80048de:	6093      	str	r3, [r2, #8]
 80048e0:	e032      	b.n	8004948 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80048e2:	693b      	ldr	r3, [r7, #16]
 80048e4:	f003 0320 	and.w	r3, r3, #32
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d008      	beq.n	80048fe <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80048ec:	683b      	ldr	r3, [r7, #0]
 80048ee:	015a      	lsls	r2, r3, #5
 80048f0:	69bb      	ldr	r3, [r7, #24]
 80048f2:	4413      	add	r3, r2
 80048f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048f8:	461a      	mov	r2, r3
 80048fa:	2320      	movs	r3, #32
 80048fc:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80048fe:	683b      	ldr	r3, [r7, #0]
 8004900:	b2db      	uxtb	r3, r3
 8004902:	4619      	mov	r1, r3
 8004904:	6878      	ldr	r0, [r7, #4]
 8004906:	f004 ff49 	bl	800979c <HAL_PCD_DataOutStageCallback>
 800490a:	e01d      	b.n	8004948 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800490c:	683b      	ldr	r3, [r7, #0]
 800490e:	2b00      	cmp	r3, #0
 8004910:	d114      	bne.n	800493c <PCD_EP_OutXfrComplete_int+0x1b0>
 8004912:	6879      	ldr	r1, [r7, #4]
 8004914:	683a      	ldr	r2, [r7, #0]
 8004916:	4613      	mov	r3, r2
 8004918:	00db      	lsls	r3, r3, #3
 800491a:	4413      	add	r3, r2
 800491c:	009b      	lsls	r3, r3, #2
 800491e:	440b      	add	r3, r1
 8004920:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	2b00      	cmp	r3, #0
 8004928:	d108      	bne.n	800493c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	6818      	ldr	r0, [r3, #0]
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004934:	461a      	mov	r2, r3
 8004936:	2100      	movs	r1, #0
 8004938:	f002 ffc4 	bl	80078c4 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800493c:	683b      	ldr	r3, [r7, #0]
 800493e:	b2db      	uxtb	r3, r3
 8004940:	4619      	mov	r1, r3
 8004942:	6878      	ldr	r0, [r7, #4]
 8004944:	f004 ff2a 	bl	800979c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004948:	2300      	movs	r3, #0
}
 800494a:	4618      	mov	r0, r3
 800494c:	3720      	adds	r7, #32
 800494e:	46bd      	mov	sp, r7
 8004950:	bd80      	pop	{r7, pc}
 8004952:	bf00      	nop
 8004954:	4f54300a 	.word	0x4f54300a
 8004958:	4f54310a 	.word	0x4f54310a

0800495c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800495c:	b580      	push	{r7, lr}
 800495e:	b086      	sub	sp, #24
 8004960:	af00      	add	r7, sp, #0
 8004962:	6078      	str	r0, [r7, #4]
 8004964:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800496c:	697b      	ldr	r3, [r7, #20]
 800496e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004970:	697b      	ldr	r3, [r7, #20]
 8004972:	333c      	adds	r3, #60	; 0x3c
 8004974:	3304      	adds	r3, #4
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800497a:	683b      	ldr	r3, [r7, #0]
 800497c:	015a      	lsls	r2, r3, #5
 800497e:	693b      	ldr	r3, [r7, #16]
 8004980:	4413      	add	r3, r2
 8004982:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004986:	689b      	ldr	r3, [r3, #8]
 8004988:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	4a15      	ldr	r2, [pc, #84]	; (80049e4 <PCD_EP_OutSetupPacket_int+0x88>)
 800498e:	4293      	cmp	r3, r2
 8004990:	d90e      	bls.n	80049b0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004992:	68bb      	ldr	r3, [r7, #8]
 8004994:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004998:	2b00      	cmp	r3, #0
 800499a:	d009      	beq.n	80049b0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800499c:	683b      	ldr	r3, [r7, #0]
 800499e:	015a      	lsls	r2, r3, #5
 80049a0:	693b      	ldr	r3, [r7, #16]
 80049a2:	4413      	add	r3, r2
 80049a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049a8:	461a      	mov	r2, r3
 80049aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80049ae:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80049b0:	6878      	ldr	r0, [r7, #4]
 80049b2:	f004 fee1 	bl	8009778 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	4a0a      	ldr	r2, [pc, #40]	; (80049e4 <PCD_EP_OutSetupPacket_int+0x88>)
 80049ba:	4293      	cmp	r3, r2
 80049bc:	d90c      	bls.n	80049d8 <PCD_EP_OutSetupPacket_int+0x7c>
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	691b      	ldr	r3, [r3, #16]
 80049c2:	2b01      	cmp	r3, #1
 80049c4:	d108      	bne.n	80049d8 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6818      	ldr	r0, [r3, #0]
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80049d0:	461a      	mov	r2, r3
 80049d2:	2101      	movs	r1, #1
 80049d4:	f002 ff76 	bl	80078c4 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80049d8:	2300      	movs	r3, #0
}
 80049da:	4618      	mov	r0, r3
 80049dc:	3718      	adds	r7, #24
 80049de:	46bd      	mov	sp, r7
 80049e0:	bd80      	pop	{r7, pc}
 80049e2:	bf00      	nop
 80049e4:	4f54300a 	.word	0x4f54300a

080049e8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80049e8:	b480      	push	{r7}
 80049ea:	b085      	sub	sp, #20
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]
 80049f0:	460b      	mov	r3, r1
 80049f2:	70fb      	strb	r3, [r7, #3]
 80049f4:	4613      	mov	r3, r2
 80049f6:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049fe:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004a00:	78fb      	ldrb	r3, [r7, #3]
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d107      	bne.n	8004a16 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004a06:	883b      	ldrh	r3, [r7, #0]
 8004a08:	0419      	lsls	r1, r3, #16
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	68ba      	ldr	r2, [r7, #8]
 8004a10:	430a      	orrs	r2, r1
 8004a12:	629a      	str	r2, [r3, #40]	; 0x28
 8004a14:	e028      	b.n	8004a68 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a1c:	0c1b      	lsrs	r3, r3, #16
 8004a1e:	68ba      	ldr	r2, [r7, #8]
 8004a20:	4413      	add	r3, r2
 8004a22:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004a24:	2300      	movs	r3, #0
 8004a26:	73fb      	strb	r3, [r7, #15]
 8004a28:	e00d      	b.n	8004a46 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681a      	ldr	r2, [r3, #0]
 8004a2e:	7bfb      	ldrb	r3, [r7, #15]
 8004a30:	3340      	adds	r3, #64	; 0x40
 8004a32:	009b      	lsls	r3, r3, #2
 8004a34:	4413      	add	r3, r2
 8004a36:	685b      	ldr	r3, [r3, #4]
 8004a38:	0c1b      	lsrs	r3, r3, #16
 8004a3a:	68ba      	ldr	r2, [r7, #8]
 8004a3c:	4413      	add	r3, r2
 8004a3e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004a40:	7bfb      	ldrb	r3, [r7, #15]
 8004a42:	3301      	adds	r3, #1
 8004a44:	73fb      	strb	r3, [r7, #15]
 8004a46:	7bfa      	ldrb	r2, [r7, #15]
 8004a48:	78fb      	ldrb	r3, [r7, #3]
 8004a4a:	3b01      	subs	r3, #1
 8004a4c:	429a      	cmp	r2, r3
 8004a4e:	d3ec      	bcc.n	8004a2a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004a50:	883b      	ldrh	r3, [r7, #0]
 8004a52:	0418      	lsls	r0, r3, #16
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	6819      	ldr	r1, [r3, #0]
 8004a58:	78fb      	ldrb	r3, [r7, #3]
 8004a5a:	3b01      	subs	r3, #1
 8004a5c:	68ba      	ldr	r2, [r7, #8]
 8004a5e:	4302      	orrs	r2, r0
 8004a60:	3340      	adds	r3, #64	; 0x40
 8004a62:	009b      	lsls	r3, r3, #2
 8004a64:	440b      	add	r3, r1
 8004a66:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004a68:	2300      	movs	r3, #0
}
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	3714      	adds	r7, #20
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a74:	4770      	bx	lr

08004a76 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004a76:	b480      	push	{r7}
 8004a78:	b083      	sub	sp, #12
 8004a7a:	af00      	add	r7, sp, #0
 8004a7c:	6078      	str	r0, [r7, #4]
 8004a7e:	460b      	mov	r3, r1
 8004a80:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	887a      	ldrh	r2, [r7, #2]
 8004a88:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004a8a:	2300      	movs	r3, #0
}
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	370c      	adds	r7, #12
 8004a90:	46bd      	mov	sp, r7
 8004a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a96:	4770      	bx	lr

08004a98 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004a98:	b480      	push	{r7}
 8004a9a:	b083      	sub	sp, #12
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]
 8004aa0:	460b      	mov	r3, r1
 8004aa2:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004aa4:	bf00      	nop
 8004aa6:	370c      	adds	r7, #12
 8004aa8:	46bd      	mov	sp, r7
 8004aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aae:	4770      	bx	lr

08004ab0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	b086      	sub	sp, #24
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d101      	bne.n	8004ac2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004abe:	2301      	movs	r3, #1
 8004ac0:	e267      	b.n	8004f92 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f003 0301 	and.w	r3, r3, #1
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d075      	beq.n	8004bba <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004ace:	4b88      	ldr	r3, [pc, #544]	; (8004cf0 <HAL_RCC_OscConfig+0x240>)
 8004ad0:	689b      	ldr	r3, [r3, #8]
 8004ad2:	f003 030c 	and.w	r3, r3, #12
 8004ad6:	2b04      	cmp	r3, #4
 8004ad8:	d00c      	beq.n	8004af4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004ada:	4b85      	ldr	r3, [pc, #532]	; (8004cf0 <HAL_RCC_OscConfig+0x240>)
 8004adc:	689b      	ldr	r3, [r3, #8]
 8004ade:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004ae2:	2b08      	cmp	r3, #8
 8004ae4:	d112      	bne.n	8004b0c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004ae6:	4b82      	ldr	r3, [pc, #520]	; (8004cf0 <HAL_RCC_OscConfig+0x240>)
 8004ae8:	685b      	ldr	r3, [r3, #4]
 8004aea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004aee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004af2:	d10b      	bne.n	8004b0c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004af4:	4b7e      	ldr	r3, [pc, #504]	; (8004cf0 <HAL_RCC_OscConfig+0x240>)
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d05b      	beq.n	8004bb8 <HAL_RCC_OscConfig+0x108>
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	685b      	ldr	r3, [r3, #4]
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d157      	bne.n	8004bb8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004b08:	2301      	movs	r3, #1
 8004b0a:	e242      	b.n	8004f92 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	685b      	ldr	r3, [r3, #4]
 8004b10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b14:	d106      	bne.n	8004b24 <HAL_RCC_OscConfig+0x74>
 8004b16:	4b76      	ldr	r3, [pc, #472]	; (8004cf0 <HAL_RCC_OscConfig+0x240>)
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	4a75      	ldr	r2, [pc, #468]	; (8004cf0 <HAL_RCC_OscConfig+0x240>)
 8004b1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b20:	6013      	str	r3, [r2, #0]
 8004b22:	e01d      	b.n	8004b60 <HAL_RCC_OscConfig+0xb0>
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	685b      	ldr	r3, [r3, #4]
 8004b28:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004b2c:	d10c      	bne.n	8004b48 <HAL_RCC_OscConfig+0x98>
 8004b2e:	4b70      	ldr	r3, [pc, #448]	; (8004cf0 <HAL_RCC_OscConfig+0x240>)
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	4a6f      	ldr	r2, [pc, #444]	; (8004cf0 <HAL_RCC_OscConfig+0x240>)
 8004b34:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004b38:	6013      	str	r3, [r2, #0]
 8004b3a:	4b6d      	ldr	r3, [pc, #436]	; (8004cf0 <HAL_RCC_OscConfig+0x240>)
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	4a6c      	ldr	r2, [pc, #432]	; (8004cf0 <HAL_RCC_OscConfig+0x240>)
 8004b40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b44:	6013      	str	r3, [r2, #0]
 8004b46:	e00b      	b.n	8004b60 <HAL_RCC_OscConfig+0xb0>
 8004b48:	4b69      	ldr	r3, [pc, #420]	; (8004cf0 <HAL_RCC_OscConfig+0x240>)
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	4a68      	ldr	r2, [pc, #416]	; (8004cf0 <HAL_RCC_OscConfig+0x240>)
 8004b4e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b52:	6013      	str	r3, [r2, #0]
 8004b54:	4b66      	ldr	r3, [pc, #408]	; (8004cf0 <HAL_RCC_OscConfig+0x240>)
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	4a65      	ldr	r2, [pc, #404]	; (8004cf0 <HAL_RCC_OscConfig+0x240>)
 8004b5a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004b5e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	685b      	ldr	r3, [r3, #4]
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d013      	beq.n	8004b90 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b68:	f7fd fc9c 	bl	80024a4 <HAL_GetTick>
 8004b6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b6e:	e008      	b.n	8004b82 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004b70:	f7fd fc98 	bl	80024a4 <HAL_GetTick>
 8004b74:	4602      	mov	r2, r0
 8004b76:	693b      	ldr	r3, [r7, #16]
 8004b78:	1ad3      	subs	r3, r2, r3
 8004b7a:	2b64      	cmp	r3, #100	; 0x64
 8004b7c:	d901      	bls.n	8004b82 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004b7e:	2303      	movs	r3, #3
 8004b80:	e207      	b.n	8004f92 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b82:	4b5b      	ldr	r3, [pc, #364]	; (8004cf0 <HAL_RCC_OscConfig+0x240>)
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d0f0      	beq.n	8004b70 <HAL_RCC_OscConfig+0xc0>
 8004b8e:	e014      	b.n	8004bba <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b90:	f7fd fc88 	bl	80024a4 <HAL_GetTick>
 8004b94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b96:	e008      	b.n	8004baa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004b98:	f7fd fc84 	bl	80024a4 <HAL_GetTick>
 8004b9c:	4602      	mov	r2, r0
 8004b9e:	693b      	ldr	r3, [r7, #16]
 8004ba0:	1ad3      	subs	r3, r2, r3
 8004ba2:	2b64      	cmp	r3, #100	; 0x64
 8004ba4:	d901      	bls.n	8004baa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004ba6:	2303      	movs	r3, #3
 8004ba8:	e1f3      	b.n	8004f92 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004baa:	4b51      	ldr	r3, [pc, #324]	; (8004cf0 <HAL_RCC_OscConfig+0x240>)
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d1f0      	bne.n	8004b98 <HAL_RCC_OscConfig+0xe8>
 8004bb6:	e000      	b.n	8004bba <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004bb8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f003 0302 	and.w	r3, r3, #2
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d063      	beq.n	8004c8e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004bc6:	4b4a      	ldr	r3, [pc, #296]	; (8004cf0 <HAL_RCC_OscConfig+0x240>)
 8004bc8:	689b      	ldr	r3, [r3, #8]
 8004bca:	f003 030c 	and.w	r3, r3, #12
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d00b      	beq.n	8004bea <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004bd2:	4b47      	ldr	r3, [pc, #284]	; (8004cf0 <HAL_RCC_OscConfig+0x240>)
 8004bd4:	689b      	ldr	r3, [r3, #8]
 8004bd6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004bda:	2b08      	cmp	r3, #8
 8004bdc:	d11c      	bne.n	8004c18 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004bde:	4b44      	ldr	r3, [pc, #272]	; (8004cf0 <HAL_RCC_OscConfig+0x240>)
 8004be0:	685b      	ldr	r3, [r3, #4]
 8004be2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d116      	bne.n	8004c18 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004bea:	4b41      	ldr	r3, [pc, #260]	; (8004cf0 <HAL_RCC_OscConfig+0x240>)
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f003 0302 	and.w	r3, r3, #2
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d005      	beq.n	8004c02 <HAL_RCC_OscConfig+0x152>
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	68db      	ldr	r3, [r3, #12]
 8004bfa:	2b01      	cmp	r3, #1
 8004bfc:	d001      	beq.n	8004c02 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004bfe:	2301      	movs	r3, #1
 8004c00:	e1c7      	b.n	8004f92 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c02:	4b3b      	ldr	r3, [pc, #236]	; (8004cf0 <HAL_RCC_OscConfig+0x240>)
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	691b      	ldr	r3, [r3, #16]
 8004c0e:	00db      	lsls	r3, r3, #3
 8004c10:	4937      	ldr	r1, [pc, #220]	; (8004cf0 <HAL_RCC_OscConfig+0x240>)
 8004c12:	4313      	orrs	r3, r2
 8004c14:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c16:	e03a      	b.n	8004c8e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	68db      	ldr	r3, [r3, #12]
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d020      	beq.n	8004c62 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004c20:	4b34      	ldr	r3, [pc, #208]	; (8004cf4 <HAL_RCC_OscConfig+0x244>)
 8004c22:	2201      	movs	r2, #1
 8004c24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c26:	f7fd fc3d 	bl	80024a4 <HAL_GetTick>
 8004c2a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c2c:	e008      	b.n	8004c40 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004c2e:	f7fd fc39 	bl	80024a4 <HAL_GetTick>
 8004c32:	4602      	mov	r2, r0
 8004c34:	693b      	ldr	r3, [r7, #16]
 8004c36:	1ad3      	subs	r3, r2, r3
 8004c38:	2b02      	cmp	r3, #2
 8004c3a:	d901      	bls.n	8004c40 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004c3c:	2303      	movs	r3, #3
 8004c3e:	e1a8      	b.n	8004f92 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c40:	4b2b      	ldr	r3, [pc, #172]	; (8004cf0 <HAL_RCC_OscConfig+0x240>)
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f003 0302 	and.w	r3, r3, #2
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d0f0      	beq.n	8004c2e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c4c:	4b28      	ldr	r3, [pc, #160]	; (8004cf0 <HAL_RCC_OscConfig+0x240>)
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	691b      	ldr	r3, [r3, #16]
 8004c58:	00db      	lsls	r3, r3, #3
 8004c5a:	4925      	ldr	r1, [pc, #148]	; (8004cf0 <HAL_RCC_OscConfig+0x240>)
 8004c5c:	4313      	orrs	r3, r2
 8004c5e:	600b      	str	r3, [r1, #0]
 8004c60:	e015      	b.n	8004c8e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004c62:	4b24      	ldr	r3, [pc, #144]	; (8004cf4 <HAL_RCC_OscConfig+0x244>)
 8004c64:	2200      	movs	r2, #0
 8004c66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c68:	f7fd fc1c 	bl	80024a4 <HAL_GetTick>
 8004c6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c6e:	e008      	b.n	8004c82 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004c70:	f7fd fc18 	bl	80024a4 <HAL_GetTick>
 8004c74:	4602      	mov	r2, r0
 8004c76:	693b      	ldr	r3, [r7, #16]
 8004c78:	1ad3      	subs	r3, r2, r3
 8004c7a:	2b02      	cmp	r3, #2
 8004c7c:	d901      	bls.n	8004c82 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004c7e:	2303      	movs	r3, #3
 8004c80:	e187      	b.n	8004f92 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c82:	4b1b      	ldr	r3, [pc, #108]	; (8004cf0 <HAL_RCC_OscConfig+0x240>)
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f003 0302 	and.w	r3, r3, #2
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d1f0      	bne.n	8004c70 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f003 0308 	and.w	r3, r3, #8
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d036      	beq.n	8004d08 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	695b      	ldr	r3, [r3, #20]
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d016      	beq.n	8004cd0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004ca2:	4b15      	ldr	r3, [pc, #84]	; (8004cf8 <HAL_RCC_OscConfig+0x248>)
 8004ca4:	2201      	movs	r2, #1
 8004ca6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ca8:	f7fd fbfc 	bl	80024a4 <HAL_GetTick>
 8004cac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004cae:	e008      	b.n	8004cc2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004cb0:	f7fd fbf8 	bl	80024a4 <HAL_GetTick>
 8004cb4:	4602      	mov	r2, r0
 8004cb6:	693b      	ldr	r3, [r7, #16]
 8004cb8:	1ad3      	subs	r3, r2, r3
 8004cba:	2b02      	cmp	r3, #2
 8004cbc:	d901      	bls.n	8004cc2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004cbe:	2303      	movs	r3, #3
 8004cc0:	e167      	b.n	8004f92 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004cc2:	4b0b      	ldr	r3, [pc, #44]	; (8004cf0 <HAL_RCC_OscConfig+0x240>)
 8004cc4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004cc6:	f003 0302 	and.w	r3, r3, #2
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d0f0      	beq.n	8004cb0 <HAL_RCC_OscConfig+0x200>
 8004cce:	e01b      	b.n	8004d08 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004cd0:	4b09      	ldr	r3, [pc, #36]	; (8004cf8 <HAL_RCC_OscConfig+0x248>)
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004cd6:	f7fd fbe5 	bl	80024a4 <HAL_GetTick>
 8004cda:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004cdc:	e00e      	b.n	8004cfc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004cde:	f7fd fbe1 	bl	80024a4 <HAL_GetTick>
 8004ce2:	4602      	mov	r2, r0
 8004ce4:	693b      	ldr	r3, [r7, #16]
 8004ce6:	1ad3      	subs	r3, r2, r3
 8004ce8:	2b02      	cmp	r3, #2
 8004cea:	d907      	bls.n	8004cfc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004cec:	2303      	movs	r3, #3
 8004cee:	e150      	b.n	8004f92 <HAL_RCC_OscConfig+0x4e2>
 8004cf0:	40023800 	.word	0x40023800
 8004cf4:	42470000 	.word	0x42470000
 8004cf8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004cfc:	4b88      	ldr	r3, [pc, #544]	; (8004f20 <HAL_RCC_OscConfig+0x470>)
 8004cfe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d00:	f003 0302 	and.w	r3, r3, #2
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d1ea      	bne.n	8004cde <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f003 0304 	and.w	r3, r3, #4
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	f000 8097 	beq.w	8004e44 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004d16:	2300      	movs	r3, #0
 8004d18:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004d1a:	4b81      	ldr	r3, [pc, #516]	; (8004f20 <HAL_RCC_OscConfig+0x470>)
 8004d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d10f      	bne.n	8004d46 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d26:	2300      	movs	r3, #0
 8004d28:	60bb      	str	r3, [r7, #8]
 8004d2a:	4b7d      	ldr	r3, [pc, #500]	; (8004f20 <HAL_RCC_OscConfig+0x470>)
 8004d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d2e:	4a7c      	ldr	r2, [pc, #496]	; (8004f20 <HAL_RCC_OscConfig+0x470>)
 8004d30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d34:	6413      	str	r3, [r2, #64]	; 0x40
 8004d36:	4b7a      	ldr	r3, [pc, #488]	; (8004f20 <HAL_RCC_OscConfig+0x470>)
 8004d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d3e:	60bb      	str	r3, [r7, #8]
 8004d40:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004d42:	2301      	movs	r3, #1
 8004d44:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d46:	4b77      	ldr	r3, [pc, #476]	; (8004f24 <HAL_RCC_OscConfig+0x474>)
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d118      	bne.n	8004d84 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004d52:	4b74      	ldr	r3, [pc, #464]	; (8004f24 <HAL_RCC_OscConfig+0x474>)
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	4a73      	ldr	r2, [pc, #460]	; (8004f24 <HAL_RCC_OscConfig+0x474>)
 8004d58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d5c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004d5e:	f7fd fba1 	bl	80024a4 <HAL_GetTick>
 8004d62:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d64:	e008      	b.n	8004d78 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d66:	f7fd fb9d 	bl	80024a4 <HAL_GetTick>
 8004d6a:	4602      	mov	r2, r0
 8004d6c:	693b      	ldr	r3, [r7, #16]
 8004d6e:	1ad3      	subs	r3, r2, r3
 8004d70:	2b02      	cmp	r3, #2
 8004d72:	d901      	bls.n	8004d78 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004d74:	2303      	movs	r3, #3
 8004d76:	e10c      	b.n	8004f92 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d78:	4b6a      	ldr	r3, [pc, #424]	; (8004f24 <HAL_RCC_OscConfig+0x474>)
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d0f0      	beq.n	8004d66 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	689b      	ldr	r3, [r3, #8]
 8004d88:	2b01      	cmp	r3, #1
 8004d8a:	d106      	bne.n	8004d9a <HAL_RCC_OscConfig+0x2ea>
 8004d8c:	4b64      	ldr	r3, [pc, #400]	; (8004f20 <HAL_RCC_OscConfig+0x470>)
 8004d8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d90:	4a63      	ldr	r2, [pc, #396]	; (8004f20 <HAL_RCC_OscConfig+0x470>)
 8004d92:	f043 0301 	orr.w	r3, r3, #1
 8004d96:	6713      	str	r3, [r2, #112]	; 0x70
 8004d98:	e01c      	b.n	8004dd4 <HAL_RCC_OscConfig+0x324>
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	689b      	ldr	r3, [r3, #8]
 8004d9e:	2b05      	cmp	r3, #5
 8004da0:	d10c      	bne.n	8004dbc <HAL_RCC_OscConfig+0x30c>
 8004da2:	4b5f      	ldr	r3, [pc, #380]	; (8004f20 <HAL_RCC_OscConfig+0x470>)
 8004da4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004da6:	4a5e      	ldr	r2, [pc, #376]	; (8004f20 <HAL_RCC_OscConfig+0x470>)
 8004da8:	f043 0304 	orr.w	r3, r3, #4
 8004dac:	6713      	str	r3, [r2, #112]	; 0x70
 8004dae:	4b5c      	ldr	r3, [pc, #368]	; (8004f20 <HAL_RCC_OscConfig+0x470>)
 8004db0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004db2:	4a5b      	ldr	r2, [pc, #364]	; (8004f20 <HAL_RCC_OscConfig+0x470>)
 8004db4:	f043 0301 	orr.w	r3, r3, #1
 8004db8:	6713      	str	r3, [r2, #112]	; 0x70
 8004dba:	e00b      	b.n	8004dd4 <HAL_RCC_OscConfig+0x324>
 8004dbc:	4b58      	ldr	r3, [pc, #352]	; (8004f20 <HAL_RCC_OscConfig+0x470>)
 8004dbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dc0:	4a57      	ldr	r2, [pc, #348]	; (8004f20 <HAL_RCC_OscConfig+0x470>)
 8004dc2:	f023 0301 	bic.w	r3, r3, #1
 8004dc6:	6713      	str	r3, [r2, #112]	; 0x70
 8004dc8:	4b55      	ldr	r3, [pc, #340]	; (8004f20 <HAL_RCC_OscConfig+0x470>)
 8004dca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dcc:	4a54      	ldr	r2, [pc, #336]	; (8004f20 <HAL_RCC_OscConfig+0x470>)
 8004dce:	f023 0304 	bic.w	r3, r3, #4
 8004dd2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	689b      	ldr	r3, [r3, #8]
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d015      	beq.n	8004e08 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ddc:	f7fd fb62 	bl	80024a4 <HAL_GetTick>
 8004de0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004de2:	e00a      	b.n	8004dfa <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004de4:	f7fd fb5e 	bl	80024a4 <HAL_GetTick>
 8004de8:	4602      	mov	r2, r0
 8004dea:	693b      	ldr	r3, [r7, #16]
 8004dec:	1ad3      	subs	r3, r2, r3
 8004dee:	f241 3288 	movw	r2, #5000	; 0x1388
 8004df2:	4293      	cmp	r3, r2
 8004df4:	d901      	bls.n	8004dfa <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004df6:	2303      	movs	r3, #3
 8004df8:	e0cb      	b.n	8004f92 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004dfa:	4b49      	ldr	r3, [pc, #292]	; (8004f20 <HAL_RCC_OscConfig+0x470>)
 8004dfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dfe:	f003 0302 	and.w	r3, r3, #2
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d0ee      	beq.n	8004de4 <HAL_RCC_OscConfig+0x334>
 8004e06:	e014      	b.n	8004e32 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e08:	f7fd fb4c 	bl	80024a4 <HAL_GetTick>
 8004e0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e0e:	e00a      	b.n	8004e26 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004e10:	f7fd fb48 	bl	80024a4 <HAL_GetTick>
 8004e14:	4602      	mov	r2, r0
 8004e16:	693b      	ldr	r3, [r7, #16]
 8004e18:	1ad3      	subs	r3, r2, r3
 8004e1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e1e:	4293      	cmp	r3, r2
 8004e20:	d901      	bls.n	8004e26 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004e22:	2303      	movs	r3, #3
 8004e24:	e0b5      	b.n	8004f92 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e26:	4b3e      	ldr	r3, [pc, #248]	; (8004f20 <HAL_RCC_OscConfig+0x470>)
 8004e28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e2a:	f003 0302 	and.w	r3, r3, #2
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d1ee      	bne.n	8004e10 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004e32:	7dfb      	ldrb	r3, [r7, #23]
 8004e34:	2b01      	cmp	r3, #1
 8004e36:	d105      	bne.n	8004e44 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e38:	4b39      	ldr	r3, [pc, #228]	; (8004f20 <HAL_RCC_OscConfig+0x470>)
 8004e3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e3c:	4a38      	ldr	r2, [pc, #224]	; (8004f20 <HAL_RCC_OscConfig+0x470>)
 8004e3e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e42:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	699b      	ldr	r3, [r3, #24]
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	f000 80a1 	beq.w	8004f90 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004e4e:	4b34      	ldr	r3, [pc, #208]	; (8004f20 <HAL_RCC_OscConfig+0x470>)
 8004e50:	689b      	ldr	r3, [r3, #8]
 8004e52:	f003 030c 	and.w	r3, r3, #12
 8004e56:	2b08      	cmp	r3, #8
 8004e58:	d05c      	beq.n	8004f14 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	699b      	ldr	r3, [r3, #24]
 8004e5e:	2b02      	cmp	r3, #2
 8004e60:	d141      	bne.n	8004ee6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e62:	4b31      	ldr	r3, [pc, #196]	; (8004f28 <HAL_RCC_OscConfig+0x478>)
 8004e64:	2200      	movs	r2, #0
 8004e66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e68:	f7fd fb1c 	bl	80024a4 <HAL_GetTick>
 8004e6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e6e:	e008      	b.n	8004e82 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004e70:	f7fd fb18 	bl	80024a4 <HAL_GetTick>
 8004e74:	4602      	mov	r2, r0
 8004e76:	693b      	ldr	r3, [r7, #16]
 8004e78:	1ad3      	subs	r3, r2, r3
 8004e7a:	2b02      	cmp	r3, #2
 8004e7c:	d901      	bls.n	8004e82 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004e7e:	2303      	movs	r3, #3
 8004e80:	e087      	b.n	8004f92 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e82:	4b27      	ldr	r3, [pc, #156]	; (8004f20 <HAL_RCC_OscConfig+0x470>)
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d1f0      	bne.n	8004e70 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	69da      	ldr	r2, [r3, #28]
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6a1b      	ldr	r3, [r3, #32]
 8004e96:	431a      	orrs	r2, r3
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e9c:	019b      	lsls	r3, r3, #6
 8004e9e:	431a      	orrs	r2, r3
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ea4:	085b      	lsrs	r3, r3, #1
 8004ea6:	3b01      	subs	r3, #1
 8004ea8:	041b      	lsls	r3, r3, #16
 8004eaa:	431a      	orrs	r2, r3
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004eb0:	061b      	lsls	r3, r3, #24
 8004eb2:	491b      	ldr	r1, [pc, #108]	; (8004f20 <HAL_RCC_OscConfig+0x470>)
 8004eb4:	4313      	orrs	r3, r2
 8004eb6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004eb8:	4b1b      	ldr	r3, [pc, #108]	; (8004f28 <HAL_RCC_OscConfig+0x478>)
 8004eba:	2201      	movs	r2, #1
 8004ebc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ebe:	f7fd faf1 	bl	80024a4 <HAL_GetTick>
 8004ec2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ec4:	e008      	b.n	8004ed8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ec6:	f7fd faed 	bl	80024a4 <HAL_GetTick>
 8004eca:	4602      	mov	r2, r0
 8004ecc:	693b      	ldr	r3, [r7, #16]
 8004ece:	1ad3      	subs	r3, r2, r3
 8004ed0:	2b02      	cmp	r3, #2
 8004ed2:	d901      	bls.n	8004ed8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004ed4:	2303      	movs	r3, #3
 8004ed6:	e05c      	b.n	8004f92 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ed8:	4b11      	ldr	r3, [pc, #68]	; (8004f20 <HAL_RCC_OscConfig+0x470>)
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d0f0      	beq.n	8004ec6 <HAL_RCC_OscConfig+0x416>
 8004ee4:	e054      	b.n	8004f90 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ee6:	4b10      	ldr	r3, [pc, #64]	; (8004f28 <HAL_RCC_OscConfig+0x478>)
 8004ee8:	2200      	movs	r2, #0
 8004eea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004eec:	f7fd fada 	bl	80024a4 <HAL_GetTick>
 8004ef0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ef2:	e008      	b.n	8004f06 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ef4:	f7fd fad6 	bl	80024a4 <HAL_GetTick>
 8004ef8:	4602      	mov	r2, r0
 8004efa:	693b      	ldr	r3, [r7, #16]
 8004efc:	1ad3      	subs	r3, r2, r3
 8004efe:	2b02      	cmp	r3, #2
 8004f00:	d901      	bls.n	8004f06 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004f02:	2303      	movs	r3, #3
 8004f04:	e045      	b.n	8004f92 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f06:	4b06      	ldr	r3, [pc, #24]	; (8004f20 <HAL_RCC_OscConfig+0x470>)
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d1f0      	bne.n	8004ef4 <HAL_RCC_OscConfig+0x444>
 8004f12:	e03d      	b.n	8004f90 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	699b      	ldr	r3, [r3, #24]
 8004f18:	2b01      	cmp	r3, #1
 8004f1a:	d107      	bne.n	8004f2c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004f1c:	2301      	movs	r3, #1
 8004f1e:	e038      	b.n	8004f92 <HAL_RCC_OscConfig+0x4e2>
 8004f20:	40023800 	.word	0x40023800
 8004f24:	40007000 	.word	0x40007000
 8004f28:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004f2c:	4b1b      	ldr	r3, [pc, #108]	; (8004f9c <HAL_RCC_OscConfig+0x4ec>)
 8004f2e:	685b      	ldr	r3, [r3, #4]
 8004f30:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	699b      	ldr	r3, [r3, #24]
 8004f36:	2b01      	cmp	r3, #1
 8004f38:	d028      	beq.n	8004f8c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004f44:	429a      	cmp	r2, r3
 8004f46:	d121      	bne.n	8004f8c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f52:	429a      	cmp	r2, r3
 8004f54:	d11a      	bne.n	8004f8c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004f56:	68fa      	ldr	r2, [r7, #12]
 8004f58:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004f5c:	4013      	ands	r3, r2
 8004f5e:	687a      	ldr	r2, [r7, #4]
 8004f60:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004f62:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004f64:	4293      	cmp	r3, r2
 8004f66:	d111      	bne.n	8004f8c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f72:	085b      	lsrs	r3, r3, #1
 8004f74:	3b01      	subs	r3, #1
 8004f76:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004f78:	429a      	cmp	r2, r3
 8004f7a:	d107      	bne.n	8004f8c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f86:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004f88:	429a      	cmp	r2, r3
 8004f8a:	d001      	beq.n	8004f90 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004f8c:	2301      	movs	r3, #1
 8004f8e:	e000      	b.n	8004f92 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004f90:	2300      	movs	r3, #0
}
 8004f92:	4618      	mov	r0, r3
 8004f94:	3718      	adds	r7, #24
 8004f96:	46bd      	mov	sp, r7
 8004f98:	bd80      	pop	{r7, pc}
 8004f9a:	bf00      	nop
 8004f9c:	40023800 	.word	0x40023800

08004fa0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004fa0:	b580      	push	{r7, lr}
 8004fa2:	b084      	sub	sp, #16
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	6078      	str	r0, [r7, #4]
 8004fa8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d101      	bne.n	8004fb4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004fb0:	2301      	movs	r3, #1
 8004fb2:	e0cc      	b.n	800514e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004fb4:	4b68      	ldr	r3, [pc, #416]	; (8005158 <HAL_RCC_ClockConfig+0x1b8>)
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f003 0307 	and.w	r3, r3, #7
 8004fbc:	683a      	ldr	r2, [r7, #0]
 8004fbe:	429a      	cmp	r2, r3
 8004fc0:	d90c      	bls.n	8004fdc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004fc2:	4b65      	ldr	r3, [pc, #404]	; (8005158 <HAL_RCC_ClockConfig+0x1b8>)
 8004fc4:	683a      	ldr	r2, [r7, #0]
 8004fc6:	b2d2      	uxtb	r2, r2
 8004fc8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004fca:	4b63      	ldr	r3, [pc, #396]	; (8005158 <HAL_RCC_ClockConfig+0x1b8>)
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f003 0307 	and.w	r3, r3, #7
 8004fd2:	683a      	ldr	r2, [r7, #0]
 8004fd4:	429a      	cmp	r2, r3
 8004fd6:	d001      	beq.n	8004fdc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004fd8:	2301      	movs	r3, #1
 8004fda:	e0b8      	b.n	800514e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f003 0302 	and.w	r3, r3, #2
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d020      	beq.n	800502a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f003 0304 	and.w	r3, r3, #4
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d005      	beq.n	8005000 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004ff4:	4b59      	ldr	r3, [pc, #356]	; (800515c <HAL_RCC_ClockConfig+0x1bc>)
 8004ff6:	689b      	ldr	r3, [r3, #8]
 8004ff8:	4a58      	ldr	r2, [pc, #352]	; (800515c <HAL_RCC_ClockConfig+0x1bc>)
 8004ffa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004ffe:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f003 0308 	and.w	r3, r3, #8
 8005008:	2b00      	cmp	r3, #0
 800500a:	d005      	beq.n	8005018 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800500c:	4b53      	ldr	r3, [pc, #332]	; (800515c <HAL_RCC_ClockConfig+0x1bc>)
 800500e:	689b      	ldr	r3, [r3, #8]
 8005010:	4a52      	ldr	r2, [pc, #328]	; (800515c <HAL_RCC_ClockConfig+0x1bc>)
 8005012:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005016:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005018:	4b50      	ldr	r3, [pc, #320]	; (800515c <HAL_RCC_ClockConfig+0x1bc>)
 800501a:	689b      	ldr	r3, [r3, #8]
 800501c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	689b      	ldr	r3, [r3, #8]
 8005024:	494d      	ldr	r1, [pc, #308]	; (800515c <HAL_RCC_ClockConfig+0x1bc>)
 8005026:	4313      	orrs	r3, r2
 8005028:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f003 0301 	and.w	r3, r3, #1
 8005032:	2b00      	cmp	r3, #0
 8005034:	d044      	beq.n	80050c0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	685b      	ldr	r3, [r3, #4]
 800503a:	2b01      	cmp	r3, #1
 800503c:	d107      	bne.n	800504e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800503e:	4b47      	ldr	r3, [pc, #284]	; (800515c <HAL_RCC_ClockConfig+0x1bc>)
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005046:	2b00      	cmp	r3, #0
 8005048:	d119      	bne.n	800507e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800504a:	2301      	movs	r3, #1
 800504c:	e07f      	b.n	800514e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	685b      	ldr	r3, [r3, #4]
 8005052:	2b02      	cmp	r3, #2
 8005054:	d003      	beq.n	800505e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800505a:	2b03      	cmp	r3, #3
 800505c:	d107      	bne.n	800506e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800505e:	4b3f      	ldr	r3, [pc, #252]	; (800515c <HAL_RCC_ClockConfig+0x1bc>)
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005066:	2b00      	cmp	r3, #0
 8005068:	d109      	bne.n	800507e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800506a:	2301      	movs	r3, #1
 800506c:	e06f      	b.n	800514e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800506e:	4b3b      	ldr	r3, [pc, #236]	; (800515c <HAL_RCC_ClockConfig+0x1bc>)
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f003 0302 	and.w	r3, r3, #2
 8005076:	2b00      	cmp	r3, #0
 8005078:	d101      	bne.n	800507e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800507a:	2301      	movs	r3, #1
 800507c:	e067      	b.n	800514e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800507e:	4b37      	ldr	r3, [pc, #220]	; (800515c <HAL_RCC_ClockConfig+0x1bc>)
 8005080:	689b      	ldr	r3, [r3, #8]
 8005082:	f023 0203 	bic.w	r2, r3, #3
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	685b      	ldr	r3, [r3, #4]
 800508a:	4934      	ldr	r1, [pc, #208]	; (800515c <HAL_RCC_ClockConfig+0x1bc>)
 800508c:	4313      	orrs	r3, r2
 800508e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005090:	f7fd fa08 	bl	80024a4 <HAL_GetTick>
 8005094:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005096:	e00a      	b.n	80050ae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005098:	f7fd fa04 	bl	80024a4 <HAL_GetTick>
 800509c:	4602      	mov	r2, r0
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	1ad3      	subs	r3, r2, r3
 80050a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80050a6:	4293      	cmp	r3, r2
 80050a8:	d901      	bls.n	80050ae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80050aa:	2303      	movs	r3, #3
 80050ac:	e04f      	b.n	800514e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80050ae:	4b2b      	ldr	r3, [pc, #172]	; (800515c <HAL_RCC_ClockConfig+0x1bc>)
 80050b0:	689b      	ldr	r3, [r3, #8]
 80050b2:	f003 020c 	and.w	r2, r3, #12
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	685b      	ldr	r3, [r3, #4]
 80050ba:	009b      	lsls	r3, r3, #2
 80050bc:	429a      	cmp	r2, r3
 80050be:	d1eb      	bne.n	8005098 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80050c0:	4b25      	ldr	r3, [pc, #148]	; (8005158 <HAL_RCC_ClockConfig+0x1b8>)
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f003 0307 	and.w	r3, r3, #7
 80050c8:	683a      	ldr	r2, [r7, #0]
 80050ca:	429a      	cmp	r2, r3
 80050cc:	d20c      	bcs.n	80050e8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80050ce:	4b22      	ldr	r3, [pc, #136]	; (8005158 <HAL_RCC_ClockConfig+0x1b8>)
 80050d0:	683a      	ldr	r2, [r7, #0]
 80050d2:	b2d2      	uxtb	r2, r2
 80050d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80050d6:	4b20      	ldr	r3, [pc, #128]	; (8005158 <HAL_RCC_ClockConfig+0x1b8>)
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f003 0307 	and.w	r3, r3, #7
 80050de:	683a      	ldr	r2, [r7, #0]
 80050e0:	429a      	cmp	r2, r3
 80050e2:	d001      	beq.n	80050e8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80050e4:	2301      	movs	r3, #1
 80050e6:	e032      	b.n	800514e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f003 0304 	and.w	r3, r3, #4
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d008      	beq.n	8005106 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80050f4:	4b19      	ldr	r3, [pc, #100]	; (800515c <HAL_RCC_ClockConfig+0x1bc>)
 80050f6:	689b      	ldr	r3, [r3, #8]
 80050f8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	68db      	ldr	r3, [r3, #12]
 8005100:	4916      	ldr	r1, [pc, #88]	; (800515c <HAL_RCC_ClockConfig+0x1bc>)
 8005102:	4313      	orrs	r3, r2
 8005104:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f003 0308 	and.w	r3, r3, #8
 800510e:	2b00      	cmp	r3, #0
 8005110:	d009      	beq.n	8005126 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005112:	4b12      	ldr	r3, [pc, #72]	; (800515c <HAL_RCC_ClockConfig+0x1bc>)
 8005114:	689b      	ldr	r3, [r3, #8]
 8005116:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	691b      	ldr	r3, [r3, #16]
 800511e:	00db      	lsls	r3, r3, #3
 8005120:	490e      	ldr	r1, [pc, #56]	; (800515c <HAL_RCC_ClockConfig+0x1bc>)
 8005122:	4313      	orrs	r3, r2
 8005124:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005126:	f000 f889 	bl	800523c <HAL_RCC_GetSysClockFreq>
 800512a:	4602      	mov	r2, r0
 800512c:	4b0b      	ldr	r3, [pc, #44]	; (800515c <HAL_RCC_ClockConfig+0x1bc>)
 800512e:	689b      	ldr	r3, [r3, #8]
 8005130:	091b      	lsrs	r3, r3, #4
 8005132:	f003 030f 	and.w	r3, r3, #15
 8005136:	490a      	ldr	r1, [pc, #40]	; (8005160 <HAL_RCC_ClockConfig+0x1c0>)
 8005138:	5ccb      	ldrb	r3, [r1, r3]
 800513a:	fa22 f303 	lsr.w	r3, r2, r3
 800513e:	4a09      	ldr	r2, [pc, #36]	; (8005164 <HAL_RCC_ClockConfig+0x1c4>)
 8005140:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005142:	4b09      	ldr	r3, [pc, #36]	; (8005168 <HAL_RCC_ClockConfig+0x1c8>)
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	4618      	mov	r0, r3
 8005148:	f7fd f968 	bl	800241c <HAL_InitTick>

  return HAL_OK;
 800514c:	2300      	movs	r3, #0
}
 800514e:	4618      	mov	r0, r3
 8005150:	3710      	adds	r7, #16
 8005152:	46bd      	mov	sp, r7
 8005154:	bd80      	pop	{r7, pc}
 8005156:	bf00      	nop
 8005158:	40023c00 	.word	0x40023c00
 800515c:	40023800 	.word	0x40023800
 8005160:	08009d8c 	.word	0x08009d8c
 8005164:	20000000 	.word	0x20000000
 8005168:	20000060 	.word	0x20000060

0800516c <HAL_RCC_MCOConfig>:
  * @note  For STM32F410Rx devices to output I2SCLK clock on MCO2 you should have
  *        at last one of the SPI clocks enabled (SPI1, SPI2 or SPI5).
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 800516c:	b580      	push	{r7, lr}
 800516e:	b08c      	sub	sp, #48	; 0x30
 8005170:	af00      	add	r7, sp, #0
 8005172:	60f8      	str	r0, [r7, #12]
 8005174:	60b9      	str	r1, [r7, #8]
 8005176:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if(RCC_MCOx == RCC_MCO1)
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	2b00      	cmp	r3, #0
 800517c:	d129      	bne.n	80051d2 <HAL_RCC_MCOConfig+0x66>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    __MCO1_CLK_ENABLE();
 800517e:	2300      	movs	r3, #0
 8005180:	61bb      	str	r3, [r7, #24]
 8005182:	4b2b      	ldr	r3, [pc, #172]	; (8005230 <HAL_RCC_MCOConfig+0xc4>)
 8005184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005186:	4a2a      	ldr	r2, [pc, #168]	; (8005230 <HAL_RCC_MCOConfig+0xc4>)
 8005188:	f043 0301 	orr.w	r3, r3, #1
 800518c:	6313      	str	r3, [r2, #48]	; 0x30
 800518e:	4b28      	ldr	r3, [pc, #160]	; (8005230 <HAL_RCC_MCOConfig+0xc4>)
 8005190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005192:	f003 0301 	and.w	r3, r3, #1
 8005196:	61bb      	str	r3, [r7, #24]
 8005198:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 800519a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800519e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80051a0:	2302      	movs	r3, #2
 80051a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80051a4:	2303      	movs	r3, #3
 80051a6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051a8:	2300      	movs	r3, #0
 80051aa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80051ac:	2300      	movs	r3, #0
 80051ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 80051b0:	f107 031c 	add.w	r3, r7, #28
 80051b4:	4619      	mov	r1, r3
 80051b6:	481f      	ldr	r0, [pc, #124]	; (8005234 <HAL_RCC_MCOConfig+0xc8>)
 80051b8:	f7fd fdf6 	bl	8002da8 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[2:0] bits then Select MCO1 clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 80051bc:	4b1c      	ldr	r3, [pc, #112]	; (8005230 <HAL_RCC_MCOConfig+0xc4>)
 80051be:	689b      	ldr	r3, [r3, #8]
 80051c0:	f023 62ec 	bic.w	r2, r3, #123731968	; 0x7600000
 80051c4:	68b9      	ldr	r1, [r7, #8]
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	430b      	orrs	r3, r1
 80051ca:	4919      	ldr	r1, [pc, #100]	; (8005230 <HAL_RCC_MCOConfig+0xc4>)
 80051cc:	4313      	orrs	r3, r2
 80051ce:	608b      	str	r3, [r1, #8]
#if defined(RCC_CFGR_MCO2EN)
    __HAL_RCC_MCO2_ENABLE();
#endif /* RCC_CFGR_MCO2EN */
  }
#endif /* RCC_CFGR_MCO2 */
}
 80051d0:	e029      	b.n	8005226 <HAL_RCC_MCOConfig+0xba>
    __MCO2_CLK_ENABLE();
 80051d2:	2300      	movs	r3, #0
 80051d4:	617b      	str	r3, [r7, #20]
 80051d6:	4b16      	ldr	r3, [pc, #88]	; (8005230 <HAL_RCC_MCOConfig+0xc4>)
 80051d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051da:	4a15      	ldr	r2, [pc, #84]	; (8005230 <HAL_RCC_MCOConfig+0xc4>)
 80051dc:	f043 0304 	orr.w	r3, r3, #4
 80051e0:	6313      	str	r3, [r2, #48]	; 0x30
 80051e2:	4b13      	ldr	r3, [pc, #76]	; (8005230 <HAL_RCC_MCOConfig+0xc4>)
 80051e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051e6:	f003 0304 	and.w	r3, r3, #4
 80051ea:	617b      	str	r3, [r7, #20]
 80051ec:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 80051ee:	f44f 7300 	mov.w	r3, #512	; 0x200
 80051f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80051f4:	2302      	movs	r3, #2
 80051f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80051f8:	2303      	movs	r3, #3
 80051fa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051fc:	2300      	movs	r3, #0
 80051fe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8005200:	2300      	movs	r3, #0
 8005202:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8005204:	f107 031c 	add.w	r3, r7, #28
 8005208:	4619      	mov	r1, r3
 800520a:	480b      	ldr	r0, [pc, #44]	; (8005238 <HAL_RCC_MCOConfig+0xcc>)
 800520c:	f7fd fdcc 	bl	8002da8 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3U)));
 8005210:	4b07      	ldr	r3, [pc, #28]	; (8005230 <HAL_RCC_MCOConfig+0xc4>)
 8005212:	689b      	ldr	r3, [r3, #8]
 8005214:	f023 4278 	bic.w	r2, r3, #4160749568	; 0xf8000000
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	00d9      	lsls	r1, r3, #3
 800521c:	68bb      	ldr	r3, [r7, #8]
 800521e:	430b      	orrs	r3, r1
 8005220:	4903      	ldr	r1, [pc, #12]	; (8005230 <HAL_RCC_MCOConfig+0xc4>)
 8005222:	4313      	orrs	r3, r2
 8005224:	608b      	str	r3, [r1, #8]
}
 8005226:	bf00      	nop
 8005228:	3730      	adds	r7, #48	; 0x30
 800522a:	46bd      	mov	sp, r7
 800522c:	bd80      	pop	{r7, pc}
 800522e:	bf00      	nop
 8005230:	40023800 	.word	0x40023800
 8005234:	40020000 	.word	0x40020000
 8005238:	40020800 	.word	0x40020800

0800523c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800523c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005240:	b090      	sub	sp, #64	; 0x40
 8005242:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005244:	2300      	movs	r3, #0
 8005246:	637b      	str	r3, [r7, #52]	; 0x34
 8005248:	2300      	movs	r3, #0
 800524a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800524c:	2300      	movs	r3, #0
 800524e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8005250:	2300      	movs	r3, #0
 8005252:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005254:	4b59      	ldr	r3, [pc, #356]	; (80053bc <HAL_RCC_GetSysClockFreq+0x180>)
 8005256:	689b      	ldr	r3, [r3, #8]
 8005258:	f003 030c 	and.w	r3, r3, #12
 800525c:	2b08      	cmp	r3, #8
 800525e:	d00d      	beq.n	800527c <HAL_RCC_GetSysClockFreq+0x40>
 8005260:	2b08      	cmp	r3, #8
 8005262:	f200 80a1 	bhi.w	80053a8 <HAL_RCC_GetSysClockFreq+0x16c>
 8005266:	2b00      	cmp	r3, #0
 8005268:	d002      	beq.n	8005270 <HAL_RCC_GetSysClockFreq+0x34>
 800526a:	2b04      	cmp	r3, #4
 800526c:	d003      	beq.n	8005276 <HAL_RCC_GetSysClockFreq+0x3a>
 800526e:	e09b      	b.n	80053a8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005270:	4b53      	ldr	r3, [pc, #332]	; (80053c0 <HAL_RCC_GetSysClockFreq+0x184>)
 8005272:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8005274:	e09b      	b.n	80053ae <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005276:	4b53      	ldr	r3, [pc, #332]	; (80053c4 <HAL_RCC_GetSysClockFreq+0x188>)
 8005278:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800527a:	e098      	b.n	80053ae <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800527c:	4b4f      	ldr	r3, [pc, #316]	; (80053bc <HAL_RCC_GetSysClockFreq+0x180>)
 800527e:	685b      	ldr	r3, [r3, #4]
 8005280:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005284:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005286:	4b4d      	ldr	r3, [pc, #308]	; (80053bc <HAL_RCC_GetSysClockFreq+0x180>)
 8005288:	685b      	ldr	r3, [r3, #4]
 800528a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800528e:	2b00      	cmp	r3, #0
 8005290:	d028      	beq.n	80052e4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005292:	4b4a      	ldr	r3, [pc, #296]	; (80053bc <HAL_RCC_GetSysClockFreq+0x180>)
 8005294:	685b      	ldr	r3, [r3, #4]
 8005296:	099b      	lsrs	r3, r3, #6
 8005298:	2200      	movs	r2, #0
 800529a:	623b      	str	r3, [r7, #32]
 800529c:	627a      	str	r2, [r7, #36]	; 0x24
 800529e:	6a3b      	ldr	r3, [r7, #32]
 80052a0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80052a4:	2100      	movs	r1, #0
 80052a6:	4b47      	ldr	r3, [pc, #284]	; (80053c4 <HAL_RCC_GetSysClockFreq+0x188>)
 80052a8:	fb03 f201 	mul.w	r2, r3, r1
 80052ac:	2300      	movs	r3, #0
 80052ae:	fb00 f303 	mul.w	r3, r0, r3
 80052b2:	4413      	add	r3, r2
 80052b4:	4a43      	ldr	r2, [pc, #268]	; (80053c4 <HAL_RCC_GetSysClockFreq+0x188>)
 80052b6:	fba0 1202 	umull	r1, r2, r0, r2
 80052ba:	62fa      	str	r2, [r7, #44]	; 0x2c
 80052bc:	460a      	mov	r2, r1
 80052be:	62ba      	str	r2, [r7, #40]	; 0x28
 80052c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80052c2:	4413      	add	r3, r2
 80052c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80052c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052c8:	2200      	movs	r2, #0
 80052ca:	61bb      	str	r3, [r7, #24]
 80052cc:	61fa      	str	r2, [r7, #28]
 80052ce:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80052d2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80052d6:	f7fa ff77 	bl	80001c8 <__aeabi_uldivmod>
 80052da:	4602      	mov	r2, r0
 80052dc:	460b      	mov	r3, r1
 80052de:	4613      	mov	r3, r2
 80052e0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80052e2:	e053      	b.n	800538c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80052e4:	4b35      	ldr	r3, [pc, #212]	; (80053bc <HAL_RCC_GetSysClockFreq+0x180>)
 80052e6:	685b      	ldr	r3, [r3, #4]
 80052e8:	099b      	lsrs	r3, r3, #6
 80052ea:	2200      	movs	r2, #0
 80052ec:	613b      	str	r3, [r7, #16]
 80052ee:	617a      	str	r2, [r7, #20]
 80052f0:	693b      	ldr	r3, [r7, #16]
 80052f2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80052f6:	f04f 0b00 	mov.w	fp, #0
 80052fa:	4652      	mov	r2, sl
 80052fc:	465b      	mov	r3, fp
 80052fe:	f04f 0000 	mov.w	r0, #0
 8005302:	f04f 0100 	mov.w	r1, #0
 8005306:	0159      	lsls	r1, r3, #5
 8005308:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800530c:	0150      	lsls	r0, r2, #5
 800530e:	4602      	mov	r2, r0
 8005310:	460b      	mov	r3, r1
 8005312:	ebb2 080a 	subs.w	r8, r2, sl
 8005316:	eb63 090b 	sbc.w	r9, r3, fp
 800531a:	f04f 0200 	mov.w	r2, #0
 800531e:	f04f 0300 	mov.w	r3, #0
 8005322:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8005326:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800532a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800532e:	ebb2 0408 	subs.w	r4, r2, r8
 8005332:	eb63 0509 	sbc.w	r5, r3, r9
 8005336:	f04f 0200 	mov.w	r2, #0
 800533a:	f04f 0300 	mov.w	r3, #0
 800533e:	00eb      	lsls	r3, r5, #3
 8005340:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005344:	00e2      	lsls	r2, r4, #3
 8005346:	4614      	mov	r4, r2
 8005348:	461d      	mov	r5, r3
 800534a:	eb14 030a 	adds.w	r3, r4, sl
 800534e:	603b      	str	r3, [r7, #0]
 8005350:	eb45 030b 	adc.w	r3, r5, fp
 8005354:	607b      	str	r3, [r7, #4]
 8005356:	f04f 0200 	mov.w	r2, #0
 800535a:	f04f 0300 	mov.w	r3, #0
 800535e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005362:	4629      	mov	r1, r5
 8005364:	028b      	lsls	r3, r1, #10
 8005366:	4621      	mov	r1, r4
 8005368:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800536c:	4621      	mov	r1, r4
 800536e:	028a      	lsls	r2, r1, #10
 8005370:	4610      	mov	r0, r2
 8005372:	4619      	mov	r1, r3
 8005374:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005376:	2200      	movs	r2, #0
 8005378:	60bb      	str	r3, [r7, #8]
 800537a:	60fa      	str	r2, [r7, #12]
 800537c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005380:	f7fa ff22 	bl	80001c8 <__aeabi_uldivmod>
 8005384:	4602      	mov	r2, r0
 8005386:	460b      	mov	r3, r1
 8005388:	4613      	mov	r3, r2
 800538a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800538c:	4b0b      	ldr	r3, [pc, #44]	; (80053bc <HAL_RCC_GetSysClockFreq+0x180>)
 800538e:	685b      	ldr	r3, [r3, #4]
 8005390:	0c1b      	lsrs	r3, r3, #16
 8005392:	f003 0303 	and.w	r3, r3, #3
 8005396:	3301      	adds	r3, #1
 8005398:	005b      	lsls	r3, r3, #1
 800539a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 800539c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800539e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80053a4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80053a6:	e002      	b.n	80053ae <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80053a8:	4b05      	ldr	r3, [pc, #20]	; (80053c0 <HAL_RCC_GetSysClockFreq+0x184>)
 80053aa:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80053ac:	bf00      	nop
    }
  }
  return sysclockfreq;
 80053ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80053b0:	4618      	mov	r0, r3
 80053b2:	3740      	adds	r7, #64	; 0x40
 80053b4:	46bd      	mov	sp, r7
 80053b6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80053ba:	bf00      	nop
 80053bc:	40023800 	.word	0x40023800
 80053c0:	00f42400 	.word	0x00f42400
 80053c4:	017d7840 	.word	0x017d7840

080053c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80053c8:	b480      	push	{r7}
 80053ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80053cc:	4b03      	ldr	r3, [pc, #12]	; (80053dc <HAL_RCC_GetHCLKFreq+0x14>)
 80053ce:	681b      	ldr	r3, [r3, #0]
}
 80053d0:	4618      	mov	r0, r3
 80053d2:	46bd      	mov	sp, r7
 80053d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d8:	4770      	bx	lr
 80053da:	bf00      	nop
 80053dc:	20000000 	.word	0x20000000

080053e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80053e0:	b580      	push	{r7, lr}
 80053e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80053e4:	f7ff fff0 	bl	80053c8 <HAL_RCC_GetHCLKFreq>
 80053e8:	4602      	mov	r2, r0
 80053ea:	4b05      	ldr	r3, [pc, #20]	; (8005400 <HAL_RCC_GetPCLK1Freq+0x20>)
 80053ec:	689b      	ldr	r3, [r3, #8]
 80053ee:	0a9b      	lsrs	r3, r3, #10
 80053f0:	f003 0307 	and.w	r3, r3, #7
 80053f4:	4903      	ldr	r1, [pc, #12]	; (8005404 <HAL_RCC_GetPCLK1Freq+0x24>)
 80053f6:	5ccb      	ldrb	r3, [r1, r3]
 80053f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80053fc:	4618      	mov	r0, r3
 80053fe:	bd80      	pop	{r7, pc}
 8005400:	40023800 	.word	0x40023800
 8005404:	08009d9c 	.word	0x08009d9c

08005408 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005408:	b580      	push	{r7, lr}
 800540a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800540c:	f7ff ffdc 	bl	80053c8 <HAL_RCC_GetHCLKFreq>
 8005410:	4602      	mov	r2, r0
 8005412:	4b05      	ldr	r3, [pc, #20]	; (8005428 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005414:	689b      	ldr	r3, [r3, #8]
 8005416:	0b5b      	lsrs	r3, r3, #13
 8005418:	f003 0307 	and.w	r3, r3, #7
 800541c:	4903      	ldr	r1, [pc, #12]	; (800542c <HAL_RCC_GetPCLK2Freq+0x24>)
 800541e:	5ccb      	ldrb	r3, [r1, r3]
 8005420:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005424:	4618      	mov	r0, r3
 8005426:	bd80      	pop	{r7, pc}
 8005428:	40023800 	.word	0x40023800
 800542c:	08009d9c 	.word	0x08009d9c

08005430 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 8005430:	b580      	push	{r7, lr}
 8005432:	b084      	sub	sp, #16
 8005434:	af00      	add	r7, sp, #0
 8005436:	60f8      	str	r0, [r7, #12]
 8005438:	60b9      	str	r1, [r7, #8]
 800543a:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	2b00      	cmp	r3, #0
 8005440:	d101      	bne.n	8005446 <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 8005442:	2301      	movs	r3, #1
 8005444:	e038      	b.n	80054b8 <HAL_SRAM_Init+0x88>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 800544c:	b2db      	uxtb	r3, r3
 800544e:	2b00      	cmp	r3, #0
 8005450:	d106      	bne.n	8005460 <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	2200      	movs	r2, #0
 8005456:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 800545a:	68f8      	ldr	r0, [r7, #12]
 800545c:	f7fc f8c4 	bl	80015e8 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	681a      	ldr	r2, [r3, #0]
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	3308      	adds	r3, #8
 8005468:	4619      	mov	r1, r3
 800546a:	4610      	mov	r0, r2
 800546c:	f000 fd80 	bl	8005f70 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	6818      	ldr	r0, [r3, #0]
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	689b      	ldr	r3, [r3, #8]
 8005478:	461a      	mov	r2, r3
 800547a:	68b9      	ldr	r1, [r7, #8]
 800547c:	f000 fde2 	bl	8006044 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	6858      	ldr	r0, [r3, #4]
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	689a      	ldr	r2, [r3, #8]
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800548c:	6879      	ldr	r1, [r7, #4]
 800548e:	f000 fe0f 	bl	80060b0 <FSMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	68fa      	ldr	r2, [r7, #12]
 8005498:	6892      	ldr	r2, [r2, #8]
 800549a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	68fa      	ldr	r2, [r7, #12]
 80054a4:	6892      	ldr	r2, [r2, #8]
 80054a6:	f041 0101 	orr.w	r1, r1, #1
 80054aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	2201      	movs	r2, #1
 80054b2:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

  return HAL_OK;
 80054b6:	2300      	movs	r3, #0
}
 80054b8:	4618      	mov	r0, r3
 80054ba:	3710      	adds	r7, #16
 80054bc:	46bd      	mov	sp, r7
 80054be:	bd80      	pop	{r7, pc}

080054c0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80054c0:	b580      	push	{r7, lr}
 80054c2:	b086      	sub	sp, #24
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	6078      	str	r0, [r7, #4]
 80054c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d101      	bne.n	80054d4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80054d0:	2301      	movs	r3, #1
 80054d2:	e097      	b.n	8005604 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054da:	b2db      	uxtb	r3, r3
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d106      	bne.n	80054ee <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2200      	movs	r2, #0
 80054e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80054e8:	6878      	ldr	r0, [r7, #4]
 80054ea:	f7fb ff61 	bl	80013b0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	2202      	movs	r2, #2
 80054f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	689b      	ldr	r3, [r3, #8]
 80054fc:	687a      	ldr	r2, [r7, #4]
 80054fe:	6812      	ldr	r2, [r2, #0]
 8005500:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005504:	f023 0307 	bic.w	r3, r3, #7
 8005508:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681a      	ldr	r2, [r3, #0]
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	3304      	adds	r3, #4
 8005512:	4619      	mov	r1, r3
 8005514:	4610      	mov	r0, r2
 8005516:	f000 f927 	bl	8005768 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	689b      	ldr	r3, [r3, #8]
 8005520:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	699b      	ldr	r3, [r3, #24]
 8005528:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	6a1b      	ldr	r3, [r3, #32]
 8005530:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005532:	683b      	ldr	r3, [r7, #0]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	697a      	ldr	r2, [r7, #20]
 8005538:	4313      	orrs	r3, r2
 800553a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800553c:	693b      	ldr	r3, [r7, #16]
 800553e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005542:	f023 0303 	bic.w	r3, r3, #3
 8005546:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005548:	683b      	ldr	r3, [r7, #0]
 800554a:	689a      	ldr	r2, [r3, #8]
 800554c:	683b      	ldr	r3, [r7, #0]
 800554e:	699b      	ldr	r3, [r3, #24]
 8005550:	021b      	lsls	r3, r3, #8
 8005552:	4313      	orrs	r3, r2
 8005554:	693a      	ldr	r2, [r7, #16]
 8005556:	4313      	orrs	r3, r2
 8005558:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800555a:	693b      	ldr	r3, [r7, #16]
 800555c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8005560:	f023 030c 	bic.w	r3, r3, #12
 8005564:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005566:	693b      	ldr	r3, [r7, #16]
 8005568:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800556c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005570:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005572:	683b      	ldr	r3, [r7, #0]
 8005574:	68da      	ldr	r2, [r3, #12]
 8005576:	683b      	ldr	r3, [r7, #0]
 8005578:	69db      	ldr	r3, [r3, #28]
 800557a:	021b      	lsls	r3, r3, #8
 800557c:	4313      	orrs	r3, r2
 800557e:	693a      	ldr	r2, [r7, #16]
 8005580:	4313      	orrs	r3, r2
 8005582:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005584:	683b      	ldr	r3, [r7, #0]
 8005586:	691b      	ldr	r3, [r3, #16]
 8005588:	011a      	lsls	r2, r3, #4
 800558a:	683b      	ldr	r3, [r7, #0]
 800558c:	6a1b      	ldr	r3, [r3, #32]
 800558e:	031b      	lsls	r3, r3, #12
 8005590:	4313      	orrs	r3, r2
 8005592:	693a      	ldr	r2, [r7, #16]
 8005594:	4313      	orrs	r3, r2
 8005596:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800559e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80055a6:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80055a8:	683b      	ldr	r3, [r7, #0]
 80055aa:	685a      	ldr	r2, [r3, #4]
 80055ac:	683b      	ldr	r3, [r7, #0]
 80055ae:	695b      	ldr	r3, [r3, #20]
 80055b0:	011b      	lsls	r3, r3, #4
 80055b2:	4313      	orrs	r3, r2
 80055b4:	68fa      	ldr	r2, [r7, #12]
 80055b6:	4313      	orrs	r3, r2
 80055b8:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	697a      	ldr	r2, [r7, #20]
 80055c0:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	693a      	ldr	r2, [r7, #16]
 80055c8:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	68fa      	ldr	r2, [r7, #12]
 80055d0:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	2201      	movs	r2, #1
 80055d6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	2201      	movs	r2, #1
 80055de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	2201      	movs	r2, #1
 80055e6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	2201      	movs	r2, #1
 80055ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	2201      	movs	r2, #1
 80055f6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	2201      	movs	r2, #1
 80055fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005602:	2300      	movs	r3, #0
}
 8005604:	4618      	mov	r0, r3
 8005606:	3718      	adds	r7, #24
 8005608:	46bd      	mov	sp, r7
 800560a:	bd80      	pop	{r7, pc}

0800560c <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800560c:	b580      	push	{r7, lr}
 800560e:	b084      	sub	sp, #16
 8005610:	af00      	add	r7, sp, #0
 8005612:	6078      	str	r0, [r7, #4]
 8005614:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800561c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005624:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800562c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005634:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8005636:	683b      	ldr	r3, [r7, #0]
 8005638:	2b00      	cmp	r3, #0
 800563a:	d110      	bne.n	800565e <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800563c:	7bfb      	ldrb	r3, [r7, #15]
 800563e:	2b01      	cmp	r3, #1
 8005640:	d102      	bne.n	8005648 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8005642:	7b7b      	ldrb	r3, [r7, #13]
 8005644:	2b01      	cmp	r3, #1
 8005646:	d001      	beq.n	800564c <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 8005648:	2301      	movs	r3, #1
 800564a:	e089      	b.n	8005760 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2202      	movs	r2, #2
 8005650:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	2202      	movs	r2, #2
 8005658:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800565c:	e031      	b.n	80056c2 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800565e:	683b      	ldr	r3, [r7, #0]
 8005660:	2b04      	cmp	r3, #4
 8005662:	d110      	bne.n	8005686 <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005664:	7bbb      	ldrb	r3, [r7, #14]
 8005666:	2b01      	cmp	r3, #1
 8005668:	d102      	bne.n	8005670 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800566a:	7b3b      	ldrb	r3, [r7, #12]
 800566c:	2b01      	cmp	r3, #1
 800566e:	d001      	beq.n	8005674 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 8005670:	2301      	movs	r3, #1
 8005672:	e075      	b.n	8005760 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2202      	movs	r2, #2
 8005678:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	2202      	movs	r2, #2
 8005680:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005684:	e01d      	b.n	80056c2 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005686:	7bfb      	ldrb	r3, [r7, #15]
 8005688:	2b01      	cmp	r3, #1
 800568a:	d108      	bne.n	800569e <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800568c:	7bbb      	ldrb	r3, [r7, #14]
 800568e:	2b01      	cmp	r3, #1
 8005690:	d105      	bne.n	800569e <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005692:	7b7b      	ldrb	r3, [r7, #13]
 8005694:	2b01      	cmp	r3, #1
 8005696:	d102      	bne.n	800569e <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005698:	7b3b      	ldrb	r3, [r7, #12]
 800569a:	2b01      	cmp	r3, #1
 800569c:	d001      	beq.n	80056a2 <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 800569e:	2301      	movs	r3, #1
 80056a0:	e05e      	b.n	8005760 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	2202      	movs	r2, #2
 80056a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	2202      	movs	r2, #2
 80056ae:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	2202      	movs	r2, #2
 80056b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	2202      	movs	r2, #2
 80056be:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 80056c2:	683b      	ldr	r3, [r7, #0]
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d003      	beq.n	80056d0 <HAL_TIM_Encoder_Start_IT+0xc4>
 80056c8:	683b      	ldr	r3, [r7, #0]
 80056ca:	2b04      	cmp	r3, #4
 80056cc:	d010      	beq.n	80056f0 <HAL_TIM_Encoder_Start_IT+0xe4>
 80056ce:	e01f      	b.n	8005710 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	2201      	movs	r2, #1
 80056d6:	2100      	movs	r1, #0
 80056d8:	4618      	mov	r0, r3
 80056da:	f000 f8e5 	bl	80058a8 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	68da      	ldr	r2, [r3, #12]
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	f042 0202 	orr.w	r2, r2, #2
 80056ec:	60da      	str	r2, [r3, #12]
      break;
 80056ee:	e02e      	b.n	800574e <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	2201      	movs	r2, #1
 80056f6:	2104      	movs	r1, #4
 80056f8:	4618      	mov	r0, r3
 80056fa:	f000 f8d5 	bl	80058a8 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	68da      	ldr	r2, [r3, #12]
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	f042 0204 	orr.w	r2, r2, #4
 800570c:	60da      	str	r2, [r3, #12]
      break;
 800570e:	e01e      	b.n	800574e <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	2201      	movs	r2, #1
 8005716:	2100      	movs	r1, #0
 8005718:	4618      	mov	r0, r3
 800571a:	f000 f8c5 	bl	80058a8 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	2201      	movs	r2, #1
 8005724:	2104      	movs	r1, #4
 8005726:	4618      	mov	r0, r3
 8005728:	f000 f8be 	bl	80058a8 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	68da      	ldr	r2, [r3, #12]
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	f042 0202 	orr.w	r2, r2, #2
 800573a:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	68da      	ldr	r2, [r3, #12]
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	f042 0204 	orr.w	r2, r2, #4
 800574a:	60da      	str	r2, [r3, #12]
      break;
 800574c:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	681a      	ldr	r2, [r3, #0]
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	f042 0201 	orr.w	r2, r2, #1
 800575c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800575e:	2300      	movs	r3, #0
}
 8005760:	4618      	mov	r0, r3
 8005762:	3710      	adds	r7, #16
 8005764:	46bd      	mov	sp, r7
 8005766:	bd80      	pop	{r7, pc}

08005768 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005768:	b480      	push	{r7}
 800576a:	b085      	sub	sp, #20
 800576c:	af00      	add	r7, sp, #0
 800576e:	6078      	str	r0, [r7, #4]
 8005770:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	4a40      	ldr	r2, [pc, #256]	; (800587c <TIM_Base_SetConfig+0x114>)
 800577c:	4293      	cmp	r3, r2
 800577e:	d013      	beq.n	80057a8 <TIM_Base_SetConfig+0x40>
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005786:	d00f      	beq.n	80057a8 <TIM_Base_SetConfig+0x40>
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	4a3d      	ldr	r2, [pc, #244]	; (8005880 <TIM_Base_SetConfig+0x118>)
 800578c:	4293      	cmp	r3, r2
 800578e:	d00b      	beq.n	80057a8 <TIM_Base_SetConfig+0x40>
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	4a3c      	ldr	r2, [pc, #240]	; (8005884 <TIM_Base_SetConfig+0x11c>)
 8005794:	4293      	cmp	r3, r2
 8005796:	d007      	beq.n	80057a8 <TIM_Base_SetConfig+0x40>
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	4a3b      	ldr	r2, [pc, #236]	; (8005888 <TIM_Base_SetConfig+0x120>)
 800579c:	4293      	cmp	r3, r2
 800579e:	d003      	beq.n	80057a8 <TIM_Base_SetConfig+0x40>
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	4a3a      	ldr	r2, [pc, #232]	; (800588c <TIM_Base_SetConfig+0x124>)
 80057a4:	4293      	cmp	r3, r2
 80057a6:	d108      	bne.n	80057ba <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057ae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80057b0:	683b      	ldr	r3, [r7, #0]
 80057b2:	685b      	ldr	r3, [r3, #4]
 80057b4:	68fa      	ldr	r2, [r7, #12]
 80057b6:	4313      	orrs	r3, r2
 80057b8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	4a2f      	ldr	r2, [pc, #188]	; (800587c <TIM_Base_SetConfig+0x114>)
 80057be:	4293      	cmp	r3, r2
 80057c0:	d02b      	beq.n	800581a <TIM_Base_SetConfig+0xb2>
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057c8:	d027      	beq.n	800581a <TIM_Base_SetConfig+0xb2>
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	4a2c      	ldr	r2, [pc, #176]	; (8005880 <TIM_Base_SetConfig+0x118>)
 80057ce:	4293      	cmp	r3, r2
 80057d0:	d023      	beq.n	800581a <TIM_Base_SetConfig+0xb2>
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	4a2b      	ldr	r2, [pc, #172]	; (8005884 <TIM_Base_SetConfig+0x11c>)
 80057d6:	4293      	cmp	r3, r2
 80057d8:	d01f      	beq.n	800581a <TIM_Base_SetConfig+0xb2>
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	4a2a      	ldr	r2, [pc, #168]	; (8005888 <TIM_Base_SetConfig+0x120>)
 80057de:	4293      	cmp	r3, r2
 80057e0:	d01b      	beq.n	800581a <TIM_Base_SetConfig+0xb2>
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	4a29      	ldr	r2, [pc, #164]	; (800588c <TIM_Base_SetConfig+0x124>)
 80057e6:	4293      	cmp	r3, r2
 80057e8:	d017      	beq.n	800581a <TIM_Base_SetConfig+0xb2>
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	4a28      	ldr	r2, [pc, #160]	; (8005890 <TIM_Base_SetConfig+0x128>)
 80057ee:	4293      	cmp	r3, r2
 80057f0:	d013      	beq.n	800581a <TIM_Base_SetConfig+0xb2>
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	4a27      	ldr	r2, [pc, #156]	; (8005894 <TIM_Base_SetConfig+0x12c>)
 80057f6:	4293      	cmp	r3, r2
 80057f8:	d00f      	beq.n	800581a <TIM_Base_SetConfig+0xb2>
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	4a26      	ldr	r2, [pc, #152]	; (8005898 <TIM_Base_SetConfig+0x130>)
 80057fe:	4293      	cmp	r3, r2
 8005800:	d00b      	beq.n	800581a <TIM_Base_SetConfig+0xb2>
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	4a25      	ldr	r2, [pc, #148]	; (800589c <TIM_Base_SetConfig+0x134>)
 8005806:	4293      	cmp	r3, r2
 8005808:	d007      	beq.n	800581a <TIM_Base_SetConfig+0xb2>
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	4a24      	ldr	r2, [pc, #144]	; (80058a0 <TIM_Base_SetConfig+0x138>)
 800580e:	4293      	cmp	r3, r2
 8005810:	d003      	beq.n	800581a <TIM_Base_SetConfig+0xb2>
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	4a23      	ldr	r2, [pc, #140]	; (80058a4 <TIM_Base_SetConfig+0x13c>)
 8005816:	4293      	cmp	r3, r2
 8005818:	d108      	bne.n	800582c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005820:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005822:	683b      	ldr	r3, [r7, #0]
 8005824:	68db      	ldr	r3, [r3, #12]
 8005826:	68fa      	ldr	r2, [r7, #12]
 8005828:	4313      	orrs	r3, r2
 800582a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005832:	683b      	ldr	r3, [r7, #0]
 8005834:	695b      	ldr	r3, [r3, #20]
 8005836:	4313      	orrs	r3, r2
 8005838:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	68fa      	ldr	r2, [r7, #12]
 800583e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005840:	683b      	ldr	r3, [r7, #0]
 8005842:	689a      	ldr	r2, [r3, #8]
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005848:	683b      	ldr	r3, [r7, #0]
 800584a:	681a      	ldr	r2, [r3, #0]
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	4a0a      	ldr	r2, [pc, #40]	; (800587c <TIM_Base_SetConfig+0x114>)
 8005854:	4293      	cmp	r3, r2
 8005856:	d003      	beq.n	8005860 <TIM_Base_SetConfig+0xf8>
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	4a0c      	ldr	r2, [pc, #48]	; (800588c <TIM_Base_SetConfig+0x124>)
 800585c:	4293      	cmp	r3, r2
 800585e:	d103      	bne.n	8005868 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005860:	683b      	ldr	r3, [r7, #0]
 8005862:	691a      	ldr	r2, [r3, #16]
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	2201      	movs	r2, #1
 800586c:	615a      	str	r2, [r3, #20]
}
 800586e:	bf00      	nop
 8005870:	3714      	adds	r7, #20
 8005872:	46bd      	mov	sp, r7
 8005874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005878:	4770      	bx	lr
 800587a:	bf00      	nop
 800587c:	40010000 	.word	0x40010000
 8005880:	40000400 	.word	0x40000400
 8005884:	40000800 	.word	0x40000800
 8005888:	40000c00 	.word	0x40000c00
 800588c:	40010400 	.word	0x40010400
 8005890:	40014000 	.word	0x40014000
 8005894:	40014400 	.word	0x40014400
 8005898:	40014800 	.word	0x40014800
 800589c:	40001800 	.word	0x40001800
 80058a0:	40001c00 	.word	0x40001c00
 80058a4:	40002000 	.word	0x40002000

080058a8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80058a8:	b480      	push	{r7}
 80058aa:	b087      	sub	sp, #28
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	60f8      	str	r0, [r7, #12]
 80058b0:	60b9      	str	r1, [r7, #8]
 80058b2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80058b4:	68bb      	ldr	r3, [r7, #8]
 80058b6:	f003 031f 	and.w	r3, r3, #31
 80058ba:	2201      	movs	r2, #1
 80058bc:	fa02 f303 	lsl.w	r3, r2, r3
 80058c0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	6a1a      	ldr	r2, [r3, #32]
 80058c6:	697b      	ldr	r3, [r7, #20]
 80058c8:	43db      	mvns	r3, r3
 80058ca:	401a      	ands	r2, r3
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	6a1a      	ldr	r2, [r3, #32]
 80058d4:	68bb      	ldr	r3, [r7, #8]
 80058d6:	f003 031f 	and.w	r3, r3, #31
 80058da:	6879      	ldr	r1, [r7, #4]
 80058dc:	fa01 f303 	lsl.w	r3, r1, r3
 80058e0:	431a      	orrs	r2, r3
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	621a      	str	r2, [r3, #32]
}
 80058e6:	bf00      	nop
 80058e8:	371c      	adds	r7, #28
 80058ea:	46bd      	mov	sp, r7
 80058ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f0:	4770      	bx	lr
	...

080058f4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80058f4:	b480      	push	{r7}
 80058f6:	b085      	sub	sp, #20
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	6078      	str	r0, [r7, #4]
 80058fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005904:	2b01      	cmp	r3, #1
 8005906:	d101      	bne.n	800590c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005908:	2302      	movs	r3, #2
 800590a:	e05a      	b.n	80059c2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	2201      	movs	r2, #1
 8005910:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	2202      	movs	r2, #2
 8005918:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	685b      	ldr	r3, [r3, #4]
 8005922:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	689b      	ldr	r3, [r3, #8]
 800592a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005932:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005934:	683b      	ldr	r3, [r7, #0]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	68fa      	ldr	r2, [r7, #12]
 800593a:	4313      	orrs	r3, r2
 800593c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	68fa      	ldr	r2, [r7, #12]
 8005944:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	4a21      	ldr	r2, [pc, #132]	; (80059d0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800594c:	4293      	cmp	r3, r2
 800594e:	d022      	beq.n	8005996 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005958:	d01d      	beq.n	8005996 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	4a1d      	ldr	r2, [pc, #116]	; (80059d4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005960:	4293      	cmp	r3, r2
 8005962:	d018      	beq.n	8005996 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	4a1b      	ldr	r2, [pc, #108]	; (80059d8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800596a:	4293      	cmp	r3, r2
 800596c:	d013      	beq.n	8005996 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	4a1a      	ldr	r2, [pc, #104]	; (80059dc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005974:	4293      	cmp	r3, r2
 8005976:	d00e      	beq.n	8005996 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	4a18      	ldr	r2, [pc, #96]	; (80059e0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800597e:	4293      	cmp	r3, r2
 8005980:	d009      	beq.n	8005996 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	4a17      	ldr	r2, [pc, #92]	; (80059e4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005988:	4293      	cmp	r3, r2
 800598a:	d004      	beq.n	8005996 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	4a15      	ldr	r2, [pc, #84]	; (80059e8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005992:	4293      	cmp	r3, r2
 8005994:	d10c      	bne.n	80059b0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005996:	68bb      	ldr	r3, [r7, #8]
 8005998:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800599c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800599e:	683b      	ldr	r3, [r7, #0]
 80059a0:	685b      	ldr	r3, [r3, #4]
 80059a2:	68ba      	ldr	r2, [r7, #8]
 80059a4:	4313      	orrs	r3, r2
 80059a6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	68ba      	ldr	r2, [r7, #8]
 80059ae:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2201      	movs	r2, #1
 80059b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	2200      	movs	r2, #0
 80059bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80059c0:	2300      	movs	r3, #0
}
 80059c2:	4618      	mov	r0, r3
 80059c4:	3714      	adds	r7, #20
 80059c6:	46bd      	mov	sp, r7
 80059c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059cc:	4770      	bx	lr
 80059ce:	bf00      	nop
 80059d0:	40010000 	.word	0x40010000
 80059d4:	40000400 	.word	0x40000400
 80059d8:	40000800 	.word	0x40000800
 80059dc:	40000c00 	.word	0x40000c00
 80059e0:	40010400 	.word	0x40010400
 80059e4:	40014000 	.word	0x40014000
 80059e8:	40001800 	.word	0x40001800

080059ec <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80059ec:	b580      	push	{r7, lr}
 80059ee:	b082      	sub	sp, #8
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d101      	bne.n	80059fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80059fa:	2301      	movs	r3, #1
 80059fc:	e03f      	b.n	8005a7e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a04:	b2db      	uxtb	r3, r3
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d106      	bne.n	8005a18 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	2200      	movs	r2, #0
 8005a0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005a12:	6878      	ldr	r0, [r7, #4]
 8005a14:	f7fb fd14 	bl	8001440 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	2224      	movs	r2, #36	; 0x24
 8005a1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	68da      	ldr	r2, [r3, #12]
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005a2e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005a30:	6878      	ldr	r0, [r7, #4]
 8005a32:	f000 f829 	bl	8005a88 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	691a      	ldr	r2, [r3, #16]
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005a44:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	695a      	ldr	r2, [r3, #20]
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005a54:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	68da      	ldr	r2, [r3, #12]
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005a64:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	2200      	movs	r2, #0
 8005a6a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	2220      	movs	r2, #32
 8005a70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	2220      	movs	r2, #32
 8005a78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005a7c:	2300      	movs	r3, #0
}
 8005a7e:	4618      	mov	r0, r3
 8005a80:	3708      	adds	r7, #8
 8005a82:	46bd      	mov	sp, r7
 8005a84:	bd80      	pop	{r7, pc}
	...

08005a88 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005a88:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005a8c:	b0c0      	sub	sp, #256	; 0x100
 8005a8e:	af00      	add	r7, sp, #0
 8005a90:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005a94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	691b      	ldr	r3, [r3, #16]
 8005a9c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005aa0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005aa4:	68d9      	ldr	r1, [r3, #12]
 8005aa6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005aaa:	681a      	ldr	r2, [r3, #0]
 8005aac:	ea40 0301 	orr.w	r3, r0, r1
 8005ab0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005ab2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ab6:	689a      	ldr	r2, [r3, #8]
 8005ab8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005abc:	691b      	ldr	r3, [r3, #16]
 8005abe:	431a      	orrs	r2, r3
 8005ac0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ac4:	695b      	ldr	r3, [r3, #20]
 8005ac6:	431a      	orrs	r2, r3
 8005ac8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005acc:	69db      	ldr	r3, [r3, #28]
 8005ace:	4313      	orrs	r3, r2
 8005ad0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005ad4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	68db      	ldr	r3, [r3, #12]
 8005adc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005ae0:	f021 010c 	bic.w	r1, r1, #12
 8005ae4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ae8:	681a      	ldr	r2, [r3, #0]
 8005aea:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005aee:	430b      	orrs	r3, r1
 8005af0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005af2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	695b      	ldr	r3, [r3, #20]
 8005afa:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005afe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b02:	6999      	ldr	r1, [r3, #24]
 8005b04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b08:	681a      	ldr	r2, [r3, #0]
 8005b0a:	ea40 0301 	orr.w	r3, r0, r1
 8005b0e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005b10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b14:	681a      	ldr	r2, [r3, #0]
 8005b16:	4b8f      	ldr	r3, [pc, #572]	; (8005d54 <UART_SetConfig+0x2cc>)
 8005b18:	429a      	cmp	r2, r3
 8005b1a:	d005      	beq.n	8005b28 <UART_SetConfig+0xa0>
 8005b1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b20:	681a      	ldr	r2, [r3, #0]
 8005b22:	4b8d      	ldr	r3, [pc, #564]	; (8005d58 <UART_SetConfig+0x2d0>)
 8005b24:	429a      	cmp	r2, r3
 8005b26:	d104      	bne.n	8005b32 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005b28:	f7ff fc6e 	bl	8005408 <HAL_RCC_GetPCLK2Freq>
 8005b2c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005b30:	e003      	b.n	8005b3a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005b32:	f7ff fc55 	bl	80053e0 <HAL_RCC_GetPCLK1Freq>
 8005b36:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005b3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b3e:	69db      	ldr	r3, [r3, #28]
 8005b40:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005b44:	f040 810c 	bne.w	8005d60 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005b48:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005b4c:	2200      	movs	r2, #0
 8005b4e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005b52:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005b56:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005b5a:	4622      	mov	r2, r4
 8005b5c:	462b      	mov	r3, r5
 8005b5e:	1891      	adds	r1, r2, r2
 8005b60:	65b9      	str	r1, [r7, #88]	; 0x58
 8005b62:	415b      	adcs	r3, r3
 8005b64:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005b66:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005b6a:	4621      	mov	r1, r4
 8005b6c:	eb12 0801 	adds.w	r8, r2, r1
 8005b70:	4629      	mov	r1, r5
 8005b72:	eb43 0901 	adc.w	r9, r3, r1
 8005b76:	f04f 0200 	mov.w	r2, #0
 8005b7a:	f04f 0300 	mov.w	r3, #0
 8005b7e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005b82:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005b86:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005b8a:	4690      	mov	r8, r2
 8005b8c:	4699      	mov	r9, r3
 8005b8e:	4623      	mov	r3, r4
 8005b90:	eb18 0303 	adds.w	r3, r8, r3
 8005b94:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005b98:	462b      	mov	r3, r5
 8005b9a:	eb49 0303 	adc.w	r3, r9, r3
 8005b9e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005ba2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ba6:	685b      	ldr	r3, [r3, #4]
 8005ba8:	2200      	movs	r2, #0
 8005baa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005bae:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005bb2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005bb6:	460b      	mov	r3, r1
 8005bb8:	18db      	adds	r3, r3, r3
 8005bba:	653b      	str	r3, [r7, #80]	; 0x50
 8005bbc:	4613      	mov	r3, r2
 8005bbe:	eb42 0303 	adc.w	r3, r2, r3
 8005bc2:	657b      	str	r3, [r7, #84]	; 0x54
 8005bc4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005bc8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005bcc:	f7fa fafc 	bl	80001c8 <__aeabi_uldivmod>
 8005bd0:	4602      	mov	r2, r0
 8005bd2:	460b      	mov	r3, r1
 8005bd4:	4b61      	ldr	r3, [pc, #388]	; (8005d5c <UART_SetConfig+0x2d4>)
 8005bd6:	fba3 2302 	umull	r2, r3, r3, r2
 8005bda:	095b      	lsrs	r3, r3, #5
 8005bdc:	011c      	lsls	r4, r3, #4
 8005bde:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005be2:	2200      	movs	r2, #0
 8005be4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005be8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005bec:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005bf0:	4642      	mov	r2, r8
 8005bf2:	464b      	mov	r3, r9
 8005bf4:	1891      	adds	r1, r2, r2
 8005bf6:	64b9      	str	r1, [r7, #72]	; 0x48
 8005bf8:	415b      	adcs	r3, r3
 8005bfa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005bfc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005c00:	4641      	mov	r1, r8
 8005c02:	eb12 0a01 	adds.w	sl, r2, r1
 8005c06:	4649      	mov	r1, r9
 8005c08:	eb43 0b01 	adc.w	fp, r3, r1
 8005c0c:	f04f 0200 	mov.w	r2, #0
 8005c10:	f04f 0300 	mov.w	r3, #0
 8005c14:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005c18:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005c1c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005c20:	4692      	mov	sl, r2
 8005c22:	469b      	mov	fp, r3
 8005c24:	4643      	mov	r3, r8
 8005c26:	eb1a 0303 	adds.w	r3, sl, r3
 8005c2a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005c2e:	464b      	mov	r3, r9
 8005c30:	eb4b 0303 	adc.w	r3, fp, r3
 8005c34:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005c38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c3c:	685b      	ldr	r3, [r3, #4]
 8005c3e:	2200      	movs	r2, #0
 8005c40:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005c44:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005c48:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005c4c:	460b      	mov	r3, r1
 8005c4e:	18db      	adds	r3, r3, r3
 8005c50:	643b      	str	r3, [r7, #64]	; 0x40
 8005c52:	4613      	mov	r3, r2
 8005c54:	eb42 0303 	adc.w	r3, r2, r3
 8005c58:	647b      	str	r3, [r7, #68]	; 0x44
 8005c5a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005c5e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005c62:	f7fa fab1 	bl	80001c8 <__aeabi_uldivmod>
 8005c66:	4602      	mov	r2, r0
 8005c68:	460b      	mov	r3, r1
 8005c6a:	4611      	mov	r1, r2
 8005c6c:	4b3b      	ldr	r3, [pc, #236]	; (8005d5c <UART_SetConfig+0x2d4>)
 8005c6e:	fba3 2301 	umull	r2, r3, r3, r1
 8005c72:	095b      	lsrs	r3, r3, #5
 8005c74:	2264      	movs	r2, #100	; 0x64
 8005c76:	fb02 f303 	mul.w	r3, r2, r3
 8005c7a:	1acb      	subs	r3, r1, r3
 8005c7c:	00db      	lsls	r3, r3, #3
 8005c7e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005c82:	4b36      	ldr	r3, [pc, #216]	; (8005d5c <UART_SetConfig+0x2d4>)
 8005c84:	fba3 2302 	umull	r2, r3, r3, r2
 8005c88:	095b      	lsrs	r3, r3, #5
 8005c8a:	005b      	lsls	r3, r3, #1
 8005c8c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005c90:	441c      	add	r4, r3
 8005c92:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005c96:	2200      	movs	r2, #0
 8005c98:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005c9c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005ca0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005ca4:	4642      	mov	r2, r8
 8005ca6:	464b      	mov	r3, r9
 8005ca8:	1891      	adds	r1, r2, r2
 8005caa:	63b9      	str	r1, [r7, #56]	; 0x38
 8005cac:	415b      	adcs	r3, r3
 8005cae:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005cb0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005cb4:	4641      	mov	r1, r8
 8005cb6:	1851      	adds	r1, r2, r1
 8005cb8:	6339      	str	r1, [r7, #48]	; 0x30
 8005cba:	4649      	mov	r1, r9
 8005cbc:	414b      	adcs	r3, r1
 8005cbe:	637b      	str	r3, [r7, #52]	; 0x34
 8005cc0:	f04f 0200 	mov.w	r2, #0
 8005cc4:	f04f 0300 	mov.w	r3, #0
 8005cc8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005ccc:	4659      	mov	r1, fp
 8005cce:	00cb      	lsls	r3, r1, #3
 8005cd0:	4651      	mov	r1, sl
 8005cd2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005cd6:	4651      	mov	r1, sl
 8005cd8:	00ca      	lsls	r2, r1, #3
 8005cda:	4610      	mov	r0, r2
 8005cdc:	4619      	mov	r1, r3
 8005cde:	4603      	mov	r3, r0
 8005ce0:	4642      	mov	r2, r8
 8005ce2:	189b      	adds	r3, r3, r2
 8005ce4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005ce8:	464b      	mov	r3, r9
 8005cea:	460a      	mov	r2, r1
 8005cec:	eb42 0303 	adc.w	r3, r2, r3
 8005cf0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005cf4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005cf8:	685b      	ldr	r3, [r3, #4]
 8005cfa:	2200      	movs	r2, #0
 8005cfc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005d00:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005d04:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005d08:	460b      	mov	r3, r1
 8005d0a:	18db      	adds	r3, r3, r3
 8005d0c:	62bb      	str	r3, [r7, #40]	; 0x28
 8005d0e:	4613      	mov	r3, r2
 8005d10:	eb42 0303 	adc.w	r3, r2, r3
 8005d14:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005d16:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005d1a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005d1e:	f7fa fa53 	bl	80001c8 <__aeabi_uldivmod>
 8005d22:	4602      	mov	r2, r0
 8005d24:	460b      	mov	r3, r1
 8005d26:	4b0d      	ldr	r3, [pc, #52]	; (8005d5c <UART_SetConfig+0x2d4>)
 8005d28:	fba3 1302 	umull	r1, r3, r3, r2
 8005d2c:	095b      	lsrs	r3, r3, #5
 8005d2e:	2164      	movs	r1, #100	; 0x64
 8005d30:	fb01 f303 	mul.w	r3, r1, r3
 8005d34:	1ad3      	subs	r3, r2, r3
 8005d36:	00db      	lsls	r3, r3, #3
 8005d38:	3332      	adds	r3, #50	; 0x32
 8005d3a:	4a08      	ldr	r2, [pc, #32]	; (8005d5c <UART_SetConfig+0x2d4>)
 8005d3c:	fba2 2303 	umull	r2, r3, r2, r3
 8005d40:	095b      	lsrs	r3, r3, #5
 8005d42:	f003 0207 	and.w	r2, r3, #7
 8005d46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	4422      	add	r2, r4
 8005d4e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005d50:	e105      	b.n	8005f5e <UART_SetConfig+0x4d6>
 8005d52:	bf00      	nop
 8005d54:	40011000 	.word	0x40011000
 8005d58:	40011400 	.word	0x40011400
 8005d5c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005d60:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005d64:	2200      	movs	r2, #0
 8005d66:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005d6a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005d6e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005d72:	4642      	mov	r2, r8
 8005d74:	464b      	mov	r3, r9
 8005d76:	1891      	adds	r1, r2, r2
 8005d78:	6239      	str	r1, [r7, #32]
 8005d7a:	415b      	adcs	r3, r3
 8005d7c:	627b      	str	r3, [r7, #36]	; 0x24
 8005d7e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005d82:	4641      	mov	r1, r8
 8005d84:	1854      	adds	r4, r2, r1
 8005d86:	4649      	mov	r1, r9
 8005d88:	eb43 0501 	adc.w	r5, r3, r1
 8005d8c:	f04f 0200 	mov.w	r2, #0
 8005d90:	f04f 0300 	mov.w	r3, #0
 8005d94:	00eb      	lsls	r3, r5, #3
 8005d96:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005d9a:	00e2      	lsls	r2, r4, #3
 8005d9c:	4614      	mov	r4, r2
 8005d9e:	461d      	mov	r5, r3
 8005da0:	4643      	mov	r3, r8
 8005da2:	18e3      	adds	r3, r4, r3
 8005da4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005da8:	464b      	mov	r3, r9
 8005daa:	eb45 0303 	adc.w	r3, r5, r3
 8005dae:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005db2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005db6:	685b      	ldr	r3, [r3, #4]
 8005db8:	2200      	movs	r2, #0
 8005dba:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005dbe:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005dc2:	f04f 0200 	mov.w	r2, #0
 8005dc6:	f04f 0300 	mov.w	r3, #0
 8005dca:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005dce:	4629      	mov	r1, r5
 8005dd0:	008b      	lsls	r3, r1, #2
 8005dd2:	4621      	mov	r1, r4
 8005dd4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005dd8:	4621      	mov	r1, r4
 8005dda:	008a      	lsls	r2, r1, #2
 8005ddc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005de0:	f7fa f9f2 	bl	80001c8 <__aeabi_uldivmod>
 8005de4:	4602      	mov	r2, r0
 8005de6:	460b      	mov	r3, r1
 8005de8:	4b60      	ldr	r3, [pc, #384]	; (8005f6c <UART_SetConfig+0x4e4>)
 8005dea:	fba3 2302 	umull	r2, r3, r3, r2
 8005dee:	095b      	lsrs	r3, r3, #5
 8005df0:	011c      	lsls	r4, r3, #4
 8005df2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005df6:	2200      	movs	r2, #0
 8005df8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005dfc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005e00:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005e04:	4642      	mov	r2, r8
 8005e06:	464b      	mov	r3, r9
 8005e08:	1891      	adds	r1, r2, r2
 8005e0a:	61b9      	str	r1, [r7, #24]
 8005e0c:	415b      	adcs	r3, r3
 8005e0e:	61fb      	str	r3, [r7, #28]
 8005e10:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005e14:	4641      	mov	r1, r8
 8005e16:	1851      	adds	r1, r2, r1
 8005e18:	6139      	str	r1, [r7, #16]
 8005e1a:	4649      	mov	r1, r9
 8005e1c:	414b      	adcs	r3, r1
 8005e1e:	617b      	str	r3, [r7, #20]
 8005e20:	f04f 0200 	mov.w	r2, #0
 8005e24:	f04f 0300 	mov.w	r3, #0
 8005e28:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005e2c:	4659      	mov	r1, fp
 8005e2e:	00cb      	lsls	r3, r1, #3
 8005e30:	4651      	mov	r1, sl
 8005e32:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005e36:	4651      	mov	r1, sl
 8005e38:	00ca      	lsls	r2, r1, #3
 8005e3a:	4610      	mov	r0, r2
 8005e3c:	4619      	mov	r1, r3
 8005e3e:	4603      	mov	r3, r0
 8005e40:	4642      	mov	r2, r8
 8005e42:	189b      	adds	r3, r3, r2
 8005e44:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005e48:	464b      	mov	r3, r9
 8005e4a:	460a      	mov	r2, r1
 8005e4c:	eb42 0303 	adc.w	r3, r2, r3
 8005e50:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005e54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e58:	685b      	ldr	r3, [r3, #4]
 8005e5a:	2200      	movs	r2, #0
 8005e5c:	67bb      	str	r3, [r7, #120]	; 0x78
 8005e5e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005e60:	f04f 0200 	mov.w	r2, #0
 8005e64:	f04f 0300 	mov.w	r3, #0
 8005e68:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005e6c:	4649      	mov	r1, r9
 8005e6e:	008b      	lsls	r3, r1, #2
 8005e70:	4641      	mov	r1, r8
 8005e72:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005e76:	4641      	mov	r1, r8
 8005e78:	008a      	lsls	r2, r1, #2
 8005e7a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005e7e:	f7fa f9a3 	bl	80001c8 <__aeabi_uldivmod>
 8005e82:	4602      	mov	r2, r0
 8005e84:	460b      	mov	r3, r1
 8005e86:	4b39      	ldr	r3, [pc, #228]	; (8005f6c <UART_SetConfig+0x4e4>)
 8005e88:	fba3 1302 	umull	r1, r3, r3, r2
 8005e8c:	095b      	lsrs	r3, r3, #5
 8005e8e:	2164      	movs	r1, #100	; 0x64
 8005e90:	fb01 f303 	mul.w	r3, r1, r3
 8005e94:	1ad3      	subs	r3, r2, r3
 8005e96:	011b      	lsls	r3, r3, #4
 8005e98:	3332      	adds	r3, #50	; 0x32
 8005e9a:	4a34      	ldr	r2, [pc, #208]	; (8005f6c <UART_SetConfig+0x4e4>)
 8005e9c:	fba2 2303 	umull	r2, r3, r2, r3
 8005ea0:	095b      	lsrs	r3, r3, #5
 8005ea2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005ea6:	441c      	add	r4, r3
 8005ea8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005eac:	2200      	movs	r2, #0
 8005eae:	673b      	str	r3, [r7, #112]	; 0x70
 8005eb0:	677a      	str	r2, [r7, #116]	; 0x74
 8005eb2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005eb6:	4642      	mov	r2, r8
 8005eb8:	464b      	mov	r3, r9
 8005eba:	1891      	adds	r1, r2, r2
 8005ebc:	60b9      	str	r1, [r7, #8]
 8005ebe:	415b      	adcs	r3, r3
 8005ec0:	60fb      	str	r3, [r7, #12]
 8005ec2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005ec6:	4641      	mov	r1, r8
 8005ec8:	1851      	adds	r1, r2, r1
 8005eca:	6039      	str	r1, [r7, #0]
 8005ecc:	4649      	mov	r1, r9
 8005ece:	414b      	adcs	r3, r1
 8005ed0:	607b      	str	r3, [r7, #4]
 8005ed2:	f04f 0200 	mov.w	r2, #0
 8005ed6:	f04f 0300 	mov.w	r3, #0
 8005eda:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005ede:	4659      	mov	r1, fp
 8005ee0:	00cb      	lsls	r3, r1, #3
 8005ee2:	4651      	mov	r1, sl
 8005ee4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005ee8:	4651      	mov	r1, sl
 8005eea:	00ca      	lsls	r2, r1, #3
 8005eec:	4610      	mov	r0, r2
 8005eee:	4619      	mov	r1, r3
 8005ef0:	4603      	mov	r3, r0
 8005ef2:	4642      	mov	r2, r8
 8005ef4:	189b      	adds	r3, r3, r2
 8005ef6:	66bb      	str	r3, [r7, #104]	; 0x68
 8005ef8:	464b      	mov	r3, r9
 8005efa:	460a      	mov	r2, r1
 8005efc:	eb42 0303 	adc.w	r3, r2, r3
 8005f00:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005f02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f06:	685b      	ldr	r3, [r3, #4]
 8005f08:	2200      	movs	r2, #0
 8005f0a:	663b      	str	r3, [r7, #96]	; 0x60
 8005f0c:	667a      	str	r2, [r7, #100]	; 0x64
 8005f0e:	f04f 0200 	mov.w	r2, #0
 8005f12:	f04f 0300 	mov.w	r3, #0
 8005f16:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005f1a:	4649      	mov	r1, r9
 8005f1c:	008b      	lsls	r3, r1, #2
 8005f1e:	4641      	mov	r1, r8
 8005f20:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005f24:	4641      	mov	r1, r8
 8005f26:	008a      	lsls	r2, r1, #2
 8005f28:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005f2c:	f7fa f94c 	bl	80001c8 <__aeabi_uldivmod>
 8005f30:	4602      	mov	r2, r0
 8005f32:	460b      	mov	r3, r1
 8005f34:	4b0d      	ldr	r3, [pc, #52]	; (8005f6c <UART_SetConfig+0x4e4>)
 8005f36:	fba3 1302 	umull	r1, r3, r3, r2
 8005f3a:	095b      	lsrs	r3, r3, #5
 8005f3c:	2164      	movs	r1, #100	; 0x64
 8005f3e:	fb01 f303 	mul.w	r3, r1, r3
 8005f42:	1ad3      	subs	r3, r2, r3
 8005f44:	011b      	lsls	r3, r3, #4
 8005f46:	3332      	adds	r3, #50	; 0x32
 8005f48:	4a08      	ldr	r2, [pc, #32]	; (8005f6c <UART_SetConfig+0x4e4>)
 8005f4a:	fba2 2303 	umull	r2, r3, r2, r3
 8005f4e:	095b      	lsrs	r3, r3, #5
 8005f50:	f003 020f 	and.w	r2, r3, #15
 8005f54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	4422      	add	r2, r4
 8005f5c:	609a      	str	r2, [r3, #8]
}
 8005f5e:	bf00      	nop
 8005f60:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005f64:	46bd      	mov	sp, r7
 8005f66:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005f6a:	bf00      	nop
 8005f6c:	51eb851f 	.word	0x51eb851f

08005f70 <FSMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device,
                                    FSMC_NORSRAM_InitTypeDef *Init)
{
 8005f70:	b480      	push	{r7}
 8005f72:	b087      	sub	sp, #28
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	6078      	str	r0, [r7, #4]
 8005f78:	6039      	str	r1, [r7, #0]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
#endif /* FSMC_BCR1_WFDIS */
  assert_param(IS_FSMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 8005f7a:	683b      	ldr	r3, [r7, #0]
 8005f7c:	681a      	ldr	r2, [r3, #0]
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f84:	683a      	ldr	r2, [r7, #0]
 8005f86:	6812      	ldr	r2, [r2, #0]
 8005f88:	f023 0101 	bic.w	r1, r3, #1
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8005f92:	683b      	ldr	r3, [r7, #0]
 8005f94:	689b      	ldr	r3, [r3, #8]
 8005f96:	2b08      	cmp	r3, #8
 8005f98:	d102      	bne.n	8005fa0 <FSMC_NORSRAM_Init+0x30>
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8005f9a:	2340      	movs	r3, #64	; 0x40
 8005f9c:	617b      	str	r3, [r7, #20]
 8005f9e:	e001      	b.n	8005fa4 <FSMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_DISABLE;
 8005fa0:	2300      	movs	r3, #0
 8005fa2:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 8005fa4:	683b      	ldr	r3, [r7, #0]
 8005fa6:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 8005fa8:	697b      	ldr	r3, [r7, #20]
 8005faa:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 8005fac:	683b      	ldr	r3, [r7, #0]
 8005fae:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 8005fb0:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 8005fb2:	683b      	ldr	r3, [r7, #0]
 8005fb4:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 8005fb6:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 8005fb8:	683b      	ldr	r3, [r7, #0]
 8005fba:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 8005fbc:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 8005fbe:	683b      	ldr	r3, [r7, #0]
 8005fc0:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 8005fc2:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 8005fc4:	683b      	ldr	r3, [r7, #0]
 8005fc6:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalPolarity      | \
 8005fc8:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 8005fca:	683b      	ldr	r3, [r7, #0]
 8005fcc:	6a1b      	ldr	r3, [r3, #32]
              Init->WaitSignalActive        | \
 8005fce:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 8005fd0:	683b      	ldr	r3, [r7, #0]
 8005fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WriteOperation          | \
 8005fd4:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 8005fd6:	683b      	ldr	r3, [r7, #0]
 8005fd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->WaitSignal              | \
 8005fda:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 8005fdc:	683b      	ldr	r3, [r7, #0]
 8005fde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
              Init->ExtendedMode            | \
 8005fe0:	431a      	orrs	r2, r3
              Init->WriteBurst);
 8005fe2:	683b      	ldr	r3, [r7, #0]
 8005fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  btcr_reg = (flashaccess                   | \
 8005fe6:	4313      	orrs	r3, r2
 8005fe8:	613b      	str	r3, [r7, #16]

#if defined(FSMC_BCR1_WRAPMOD)
  btcr_reg |= Init->WrapMode;
 8005fea:	683b      	ldr	r3, [r7, #0]
 8005fec:	699b      	ldr	r3, [r3, #24]
 8005fee:	693a      	ldr	r2, [r7, #16]
 8005ff0:	4313      	orrs	r3, r2
 8005ff2:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->ContinuousClock;
#endif /* FSMC_BCR1_CCLKEN */
#if defined(FSMC_BCR1_WFDIS)
  btcr_reg |= Init->WriteFifo;
#endif /* FSMC_BCR1_WFDIS */
  btcr_reg |= Init->PageSize;
 8005ff4:	683b      	ldr	r3, [r7, #0]
 8005ff6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ff8:	693a      	ldr	r2, [r7, #16]
 8005ffa:	4313      	orrs	r3, r2
 8005ffc:	613b      	str	r3, [r7, #16]

  mask = (FSMC_BCR1_MBKEN                |
 8005ffe:	4b10      	ldr	r3, [pc, #64]	; (8006040 <FSMC_NORSRAM_Init+0xd0>)
 8006000:	60fb      	str	r3, [r7, #12]
          FSMC_BCR1_EXTMOD               |
          FSMC_BCR1_ASYNCWAIT            |
          FSMC_BCR1_CBURSTRW);

#if defined(FSMC_BCR1_WRAPMOD)
  mask |= FSMC_BCR1_WRAPMOD;
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006008:	60fb      	str	r3, [r7, #12]
  mask |= FSMC_BCR1_CCLKEN;
#endif
#if defined(FSMC_BCR1_WFDIS)
  mask |= FSMC_BCR1_WFDIS;
#endif /* FSMC_BCR1_WFDIS */
  mask |= FSMC_BCR1_CPSIZE;
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 8006010:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 8006012:	683b      	ldr	r3, [r7, #0]
 8006014:	681a      	ldr	r2, [r3, #0]
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	43db      	mvns	r3, r3
 8006020:	ea02 0103 	and.w	r1, r2, r3
 8006024:	683b      	ldr	r3, [r7, #0]
 8006026:	681a      	ldr	r2, [r3, #0]
 8006028:	693b      	ldr	r3, [r7, #16]
 800602a:	4319      	orrs	r1, r3
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FSMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
  }
#endif /* FSMC_BCR1_WFDIS */

  return HAL_OK;
 8006032:	2300      	movs	r3, #0
}
 8006034:	4618      	mov	r0, r3
 8006036:	371c      	adds	r7, #28
 8006038:	46bd      	mov	sp, r7
 800603a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603e:	4770      	bx	lr
 8006040:	0008fb7f 	.word	0x0008fb7f

08006044 <FSMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device,
                                          FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8006044:	b480      	push	{r7}
 8006046:	b085      	sub	sp, #20
 8006048:	af00      	add	r7, sp, #0
 800604a:	60f8      	str	r0, [r7, #12]
 800604c:	60b9      	str	r1, [r7, #8]
 800604e:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Set FSMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	1c5a      	adds	r2, r3, #1
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800605a:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 800605e:	68bb      	ldr	r3, [r7, #8]
 8006060:	681a      	ldr	r2, [r3, #0]
 8006062:	68bb      	ldr	r3, [r7, #8]
 8006064:	685b      	ldr	r3, [r3, #4]
 8006066:	011b      	lsls	r3, r3, #4
 8006068:	431a      	orrs	r2, r3
 800606a:	68bb      	ldr	r3, [r7, #8]
 800606c:	689b      	ldr	r3, [r3, #8]
 800606e:	021b      	lsls	r3, r3, #8
 8006070:	431a      	orrs	r2, r3
 8006072:	68bb      	ldr	r3, [r7, #8]
 8006074:	68db      	ldr	r3, [r3, #12]
 8006076:	041b      	lsls	r3, r3, #16
 8006078:	431a      	orrs	r2, r3
 800607a:	68bb      	ldr	r3, [r7, #8]
 800607c:	691b      	ldr	r3, [r3, #16]
 800607e:	3b01      	subs	r3, #1
 8006080:	051b      	lsls	r3, r3, #20
 8006082:	431a      	orrs	r2, r3
 8006084:	68bb      	ldr	r3, [r7, #8]
 8006086:	695b      	ldr	r3, [r3, #20]
 8006088:	3b02      	subs	r3, #2
 800608a:	061b      	lsls	r3, r3, #24
 800608c:	431a      	orrs	r2, r3
 800608e:	68bb      	ldr	r3, [r7, #8]
 8006090:	699b      	ldr	r3, [r3, #24]
 8006092:	4313      	orrs	r3, r2
 8006094:	687a      	ldr	r2, [r7, #4]
 8006096:	3201      	adds	r2, #1
 8006098:	4319      	orrs	r1, r3
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FSMC_BTR1_CLKDIV_Pos);
    MODIFY_REG(Device->BTCR[FSMC_NORSRAM_BANK1 + 1U], FSMC_BTR1_CLKDIV, tmpr);
  }

#endif
  return HAL_OK;
 80060a0:	2300      	movs	r3, #0
}
 80060a2:	4618      	mov	r0, r3
 80060a4:	3714      	adds	r7, #20
 80060a6:	46bd      	mov	sp, r7
 80060a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ac:	4770      	bx	lr
	...

080060b0 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 80060b0:	b480      	push	{r7}
 80060b2:	b085      	sub	sp, #20
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	60f8      	str	r0, [r7, #12]
 80060b8:	60b9      	str	r1, [r7, #8]
 80060ba:	607a      	str	r2, [r7, #4]
 80060bc:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 80060be:	683b      	ldr	r3, [r7, #0]
 80060c0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80060c4:	d11d      	bne.n	8006102 <FSMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	687a      	ldr	r2, [r7, #4]
 80060ca:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80060ce:	4b13      	ldr	r3, [pc, #76]	; (800611c <FSMC_NORSRAM_Extended_Timing_Init+0x6c>)
 80060d0:	4013      	ands	r3, r2
 80060d2:	68ba      	ldr	r2, [r7, #8]
 80060d4:	6811      	ldr	r1, [r2, #0]
 80060d6:	68ba      	ldr	r2, [r7, #8]
 80060d8:	6852      	ldr	r2, [r2, #4]
 80060da:	0112      	lsls	r2, r2, #4
 80060dc:	4311      	orrs	r1, r2
 80060de:	68ba      	ldr	r2, [r7, #8]
 80060e0:	6892      	ldr	r2, [r2, #8]
 80060e2:	0212      	lsls	r2, r2, #8
 80060e4:	4311      	orrs	r1, r2
 80060e6:	68ba      	ldr	r2, [r7, #8]
 80060e8:	6992      	ldr	r2, [r2, #24]
 80060ea:	4311      	orrs	r1, r2
 80060ec:	68ba      	ldr	r2, [r7, #8]
 80060ee:	68d2      	ldr	r2, [r2, #12]
 80060f0:	0412      	lsls	r2, r2, #16
 80060f2:	430a      	orrs	r2, r1
 80060f4:	ea43 0102 	orr.w	r1, r3, r2
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	687a      	ldr	r2, [r7, #4]
 80060fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8006100:	e005      	b.n	800610e <FSMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FSMC_BWTR1_BUSTURN_Pos)));
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	687a      	ldr	r2, [r7, #4]
 8006106:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800610a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 800610e:	2300      	movs	r3, #0
}
 8006110:	4618      	mov	r0, r3
 8006112:	3714      	adds	r7, #20
 8006114:	46bd      	mov	sp, r7
 8006116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611a:	4770      	bx	lr
 800611c:	cff00000 	.word	0xcff00000

08006120 <FSMC_NORSRAM_WriteOperation_Disable>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_WriteOperation_Disable(FSMC_NORSRAM_TypeDef *Device, uint32_t Bank)
{
 8006120:	b480      	push	{r7}
 8006122:	b083      	sub	sp, #12
 8006124:	af00      	add	r7, sp, #0
 8006126:	6078      	str	r0, [r7, #4]
 8006128:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_NORSRAM_DEVICE(Device));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Disable write operation */
  CLEAR_BIT(Device->BTCR[Bank], FSMC_WRITE_OPERATION_ENABLE);
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	683a      	ldr	r2, [r7, #0]
 800612e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006132:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	683a      	ldr	r2, [r7, #0]
 800613a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  return HAL_OK;
 800613e:	2300      	movs	r3, #0
}
 8006140:	4618      	mov	r0, r3
 8006142:	370c      	adds	r7, #12
 8006144:	46bd      	mov	sp, r7
 8006146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800614a:	4770      	bx	lr

0800614c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800614c:	b084      	sub	sp, #16
 800614e:	b580      	push	{r7, lr}
 8006150:	b084      	sub	sp, #16
 8006152:	af00      	add	r7, sp, #0
 8006154:	6078      	str	r0, [r7, #4]
 8006156:	f107 001c 	add.w	r0, r7, #28
 800615a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800615e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006160:	2b01      	cmp	r3, #1
 8006162:	d122      	bne.n	80061aa <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006168:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	68db      	ldr	r3, [r3, #12]
 8006174:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8006178:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800617c:	687a      	ldr	r2, [r7, #4]
 800617e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	68db      	ldr	r3, [r3, #12]
 8006184:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800618c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800618e:	2b01      	cmp	r3, #1
 8006190:	d105      	bne.n	800619e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	68db      	ldr	r3, [r3, #12]
 8006196:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800619e:	6878      	ldr	r0, [r7, #4]
 80061a0:	f001 fbee 	bl	8007980 <USB_CoreReset>
 80061a4:	4603      	mov	r3, r0
 80061a6:	73fb      	strb	r3, [r7, #15]
 80061a8:	e01a      	b.n	80061e0 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	68db      	ldr	r3, [r3, #12]
 80061ae:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80061b6:	6878      	ldr	r0, [r7, #4]
 80061b8:	f001 fbe2 	bl	8007980 <USB_CoreReset>
 80061bc:	4603      	mov	r3, r0
 80061be:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80061c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d106      	bne.n	80061d4 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061ca:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	639a      	str	r2, [r3, #56]	; 0x38
 80061d2:	e005      	b.n	80061e0 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061d8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80061e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061e2:	2b01      	cmp	r3, #1
 80061e4:	d10b      	bne.n	80061fe <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	689b      	ldr	r3, [r3, #8]
 80061ea:	f043 0206 	orr.w	r2, r3, #6
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	689b      	ldr	r3, [r3, #8]
 80061f6:	f043 0220 	orr.w	r2, r3, #32
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80061fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8006200:	4618      	mov	r0, r3
 8006202:	3710      	adds	r7, #16
 8006204:	46bd      	mov	sp, r7
 8006206:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800620a:	b004      	add	sp, #16
 800620c:	4770      	bx	lr
	...

08006210 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8006210:	b480      	push	{r7}
 8006212:	b087      	sub	sp, #28
 8006214:	af00      	add	r7, sp, #0
 8006216:	60f8      	str	r0, [r7, #12]
 8006218:	60b9      	str	r1, [r7, #8]
 800621a:	4613      	mov	r3, r2
 800621c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800621e:	79fb      	ldrb	r3, [r7, #7]
 8006220:	2b02      	cmp	r3, #2
 8006222:	d165      	bne.n	80062f0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8006224:	68bb      	ldr	r3, [r7, #8]
 8006226:	4a41      	ldr	r2, [pc, #260]	; (800632c <USB_SetTurnaroundTime+0x11c>)
 8006228:	4293      	cmp	r3, r2
 800622a:	d906      	bls.n	800623a <USB_SetTurnaroundTime+0x2a>
 800622c:	68bb      	ldr	r3, [r7, #8]
 800622e:	4a40      	ldr	r2, [pc, #256]	; (8006330 <USB_SetTurnaroundTime+0x120>)
 8006230:	4293      	cmp	r3, r2
 8006232:	d202      	bcs.n	800623a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8006234:	230f      	movs	r3, #15
 8006236:	617b      	str	r3, [r7, #20]
 8006238:	e062      	b.n	8006300 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800623a:	68bb      	ldr	r3, [r7, #8]
 800623c:	4a3c      	ldr	r2, [pc, #240]	; (8006330 <USB_SetTurnaroundTime+0x120>)
 800623e:	4293      	cmp	r3, r2
 8006240:	d306      	bcc.n	8006250 <USB_SetTurnaroundTime+0x40>
 8006242:	68bb      	ldr	r3, [r7, #8]
 8006244:	4a3b      	ldr	r2, [pc, #236]	; (8006334 <USB_SetTurnaroundTime+0x124>)
 8006246:	4293      	cmp	r3, r2
 8006248:	d202      	bcs.n	8006250 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800624a:	230e      	movs	r3, #14
 800624c:	617b      	str	r3, [r7, #20]
 800624e:	e057      	b.n	8006300 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8006250:	68bb      	ldr	r3, [r7, #8]
 8006252:	4a38      	ldr	r2, [pc, #224]	; (8006334 <USB_SetTurnaroundTime+0x124>)
 8006254:	4293      	cmp	r3, r2
 8006256:	d306      	bcc.n	8006266 <USB_SetTurnaroundTime+0x56>
 8006258:	68bb      	ldr	r3, [r7, #8]
 800625a:	4a37      	ldr	r2, [pc, #220]	; (8006338 <USB_SetTurnaroundTime+0x128>)
 800625c:	4293      	cmp	r3, r2
 800625e:	d202      	bcs.n	8006266 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8006260:	230d      	movs	r3, #13
 8006262:	617b      	str	r3, [r7, #20]
 8006264:	e04c      	b.n	8006300 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8006266:	68bb      	ldr	r3, [r7, #8]
 8006268:	4a33      	ldr	r2, [pc, #204]	; (8006338 <USB_SetTurnaroundTime+0x128>)
 800626a:	4293      	cmp	r3, r2
 800626c:	d306      	bcc.n	800627c <USB_SetTurnaroundTime+0x6c>
 800626e:	68bb      	ldr	r3, [r7, #8]
 8006270:	4a32      	ldr	r2, [pc, #200]	; (800633c <USB_SetTurnaroundTime+0x12c>)
 8006272:	4293      	cmp	r3, r2
 8006274:	d802      	bhi.n	800627c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8006276:	230c      	movs	r3, #12
 8006278:	617b      	str	r3, [r7, #20]
 800627a:	e041      	b.n	8006300 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800627c:	68bb      	ldr	r3, [r7, #8]
 800627e:	4a2f      	ldr	r2, [pc, #188]	; (800633c <USB_SetTurnaroundTime+0x12c>)
 8006280:	4293      	cmp	r3, r2
 8006282:	d906      	bls.n	8006292 <USB_SetTurnaroundTime+0x82>
 8006284:	68bb      	ldr	r3, [r7, #8]
 8006286:	4a2e      	ldr	r2, [pc, #184]	; (8006340 <USB_SetTurnaroundTime+0x130>)
 8006288:	4293      	cmp	r3, r2
 800628a:	d802      	bhi.n	8006292 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800628c:	230b      	movs	r3, #11
 800628e:	617b      	str	r3, [r7, #20]
 8006290:	e036      	b.n	8006300 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8006292:	68bb      	ldr	r3, [r7, #8]
 8006294:	4a2a      	ldr	r2, [pc, #168]	; (8006340 <USB_SetTurnaroundTime+0x130>)
 8006296:	4293      	cmp	r3, r2
 8006298:	d906      	bls.n	80062a8 <USB_SetTurnaroundTime+0x98>
 800629a:	68bb      	ldr	r3, [r7, #8]
 800629c:	4a29      	ldr	r2, [pc, #164]	; (8006344 <USB_SetTurnaroundTime+0x134>)
 800629e:	4293      	cmp	r3, r2
 80062a0:	d802      	bhi.n	80062a8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80062a2:	230a      	movs	r3, #10
 80062a4:	617b      	str	r3, [r7, #20]
 80062a6:	e02b      	b.n	8006300 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80062a8:	68bb      	ldr	r3, [r7, #8]
 80062aa:	4a26      	ldr	r2, [pc, #152]	; (8006344 <USB_SetTurnaroundTime+0x134>)
 80062ac:	4293      	cmp	r3, r2
 80062ae:	d906      	bls.n	80062be <USB_SetTurnaroundTime+0xae>
 80062b0:	68bb      	ldr	r3, [r7, #8]
 80062b2:	4a25      	ldr	r2, [pc, #148]	; (8006348 <USB_SetTurnaroundTime+0x138>)
 80062b4:	4293      	cmp	r3, r2
 80062b6:	d202      	bcs.n	80062be <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80062b8:	2309      	movs	r3, #9
 80062ba:	617b      	str	r3, [r7, #20]
 80062bc:	e020      	b.n	8006300 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80062be:	68bb      	ldr	r3, [r7, #8]
 80062c0:	4a21      	ldr	r2, [pc, #132]	; (8006348 <USB_SetTurnaroundTime+0x138>)
 80062c2:	4293      	cmp	r3, r2
 80062c4:	d306      	bcc.n	80062d4 <USB_SetTurnaroundTime+0xc4>
 80062c6:	68bb      	ldr	r3, [r7, #8]
 80062c8:	4a20      	ldr	r2, [pc, #128]	; (800634c <USB_SetTurnaroundTime+0x13c>)
 80062ca:	4293      	cmp	r3, r2
 80062cc:	d802      	bhi.n	80062d4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80062ce:	2308      	movs	r3, #8
 80062d0:	617b      	str	r3, [r7, #20]
 80062d2:	e015      	b.n	8006300 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80062d4:	68bb      	ldr	r3, [r7, #8]
 80062d6:	4a1d      	ldr	r2, [pc, #116]	; (800634c <USB_SetTurnaroundTime+0x13c>)
 80062d8:	4293      	cmp	r3, r2
 80062da:	d906      	bls.n	80062ea <USB_SetTurnaroundTime+0xda>
 80062dc:	68bb      	ldr	r3, [r7, #8]
 80062de:	4a1c      	ldr	r2, [pc, #112]	; (8006350 <USB_SetTurnaroundTime+0x140>)
 80062e0:	4293      	cmp	r3, r2
 80062e2:	d202      	bcs.n	80062ea <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80062e4:	2307      	movs	r3, #7
 80062e6:	617b      	str	r3, [r7, #20]
 80062e8:	e00a      	b.n	8006300 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80062ea:	2306      	movs	r3, #6
 80062ec:	617b      	str	r3, [r7, #20]
 80062ee:	e007      	b.n	8006300 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80062f0:	79fb      	ldrb	r3, [r7, #7]
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d102      	bne.n	80062fc <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80062f6:	2309      	movs	r3, #9
 80062f8:	617b      	str	r3, [r7, #20]
 80062fa:	e001      	b.n	8006300 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80062fc:	2309      	movs	r3, #9
 80062fe:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	68db      	ldr	r3, [r3, #12]
 8006304:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	68da      	ldr	r2, [r3, #12]
 8006310:	697b      	ldr	r3, [r7, #20]
 8006312:	029b      	lsls	r3, r3, #10
 8006314:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8006318:	431a      	orrs	r2, r3
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800631e:	2300      	movs	r3, #0
}
 8006320:	4618      	mov	r0, r3
 8006322:	371c      	adds	r7, #28
 8006324:	46bd      	mov	sp, r7
 8006326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632a:	4770      	bx	lr
 800632c:	00d8acbf 	.word	0x00d8acbf
 8006330:	00e4e1c0 	.word	0x00e4e1c0
 8006334:	00f42400 	.word	0x00f42400
 8006338:	01067380 	.word	0x01067380
 800633c:	011a499f 	.word	0x011a499f
 8006340:	01312cff 	.word	0x01312cff
 8006344:	014ca43f 	.word	0x014ca43f
 8006348:	016e3600 	.word	0x016e3600
 800634c:	01a6ab1f 	.word	0x01a6ab1f
 8006350:	01e84800 	.word	0x01e84800

08006354 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006354:	b480      	push	{r7}
 8006356:	b083      	sub	sp, #12
 8006358:	af00      	add	r7, sp, #0
 800635a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	689b      	ldr	r3, [r3, #8]
 8006360:	f043 0201 	orr.w	r2, r3, #1
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006368:	2300      	movs	r3, #0
}
 800636a:	4618      	mov	r0, r3
 800636c:	370c      	adds	r7, #12
 800636e:	46bd      	mov	sp, r7
 8006370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006374:	4770      	bx	lr

08006376 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006376:	b480      	push	{r7}
 8006378:	b083      	sub	sp, #12
 800637a:	af00      	add	r7, sp, #0
 800637c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	689b      	ldr	r3, [r3, #8]
 8006382:	f023 0201 	bic.w	r2, r3, #1
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800638a:	2300      	movs	r3, #0
}
 800638c:	4618      	mov	r0, r3
 800638e:	370c      	adds	r7, #12
 8006390:	46bd      	mov	sp, r7
 8006392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006396:	4770      	bx	lr

08006398 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006398:	b580      	push	{r7, lr}
 800639a:	b084      	sub	sp, #16
 800639c:	af00      	add	r7, sp, #0
 800639e:	6078      	str	r0, [r7, #4]
 80063a0:	460b      	mov	r3, r1
 80063a2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80063a4:	2300      	movs	r3, #0
 80063a6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	68db      	ldr	r3, [r3, #12]
 80063ac:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80063b4:	78fb      	ldrb	r3, [r7, #3]
 80063b6:	2b01      	cmp	r3, #1
 80063b8:	d115      	bne.n	80063e6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	68db      	ldr	r3, [r3, #12]
 80063be:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80063c6:	2001      	movs	r0, #1
 80063c8:	f7fc f878 	bl	80024bc <HAL_Delay>
      ms++;
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	3301      	adds	r3, #1
 80063d0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80063d2:	6878      	ldr	r0, [r7, #4]
 80063d4:	f001 fa45 	bl	8007862 <USB_GetMode>
 80063d8:	4603      	mov	r3, r0
 80063da:	2b01      	cmp	r3, #1
 80063dc:	d01e      	beq.n	800641c <USB_SetCurrentMode+0x84>
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	2b31      	cmp	r3, #49	; 0x31
 80063e2:	d9f0      	bls.n	80063c6 <USB_SetCurrentMode+0x2e>
 80063e4:	e01a      	b.n	800641c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80063e6:	78fb      	ldrb	r3, [r7, #3]
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d115      	bne.n	8006418 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	68db      	ldr	r3, [r3, #12]
 80063f0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80063f8:	2001      	movs	r0, #1
 80063fa:	f7fc f85f 	bl	80024bc <HAL_Delay>
      ms++;
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	3301      	adds	r3, #1
 8006402:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8006404:	6878      	ldr	r0, [r7, #4]
 8006406:	f001 fa2c 	bl	8007862 <USB_GetMode>
 800640a:	4603      	mov	r3, r0
 800640c:	2b00      	cmp	r3, #0
 800640e:	d005      	beq.n	800641c <USB_SetCurrentMode+0x84>
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	2b31      	cmp	r3, #49	; 0x31
 8006414:	d9f0      	bls.n	80063f8 <USB_SetCurrentMode+0x60>
 8006416:	e001      	b.n	800641c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006418:	2301      	movs	r3, #1
 800641a:	e005      	b.n	8006428 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	2b32      	cmp	r3, #50	; 0x32
 8006420:	d101      	bne.n	8006426 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006422:	2301      	movs	r3, #1
 8006424:	e000      	b.n	8006428 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006426:	2300      	movs	r3, #0
}
 8006428:	4618      	mov	r0, r3
 800642a:	3710      	adds	r7, #16
 800642c:	46bd      	mov	sp, r7
 800642e:	bd80      	pop	{r7, pc}

08006430 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006430:	b084      	sub	sp, #16
 8006432:	b580      	push	{r7, lr}
 8006434:	b086      	sub	sp, #24
 8006436:	af00      	add	r7, sp, #0
 8006438:	6078      	str	r0, [r7, #4]
 800643a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800643e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006442:	2300      	movs	r3, #0
 8006444:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800644a:	2300      	movs	r3, #0
 800644c:	613b      	str	r3, [r7, #16]
 800644e:	e009      	b.n	8006464 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006450:	687a      	ldr	r2, [r7, #4]
 8006452:	693b      	ldr	r3, [r7, #16]
 8006454:	3340      	adds	r3, #64	; 0x40
 8006456:	009b      	lsls	r3, r3, #2
 8006458:	4413      	add	r3, r2
 800645a:	2200      	movs	r2, #0
 800645c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800645e:	693b      	ldr	r3, [r7, #16]
 8006460:	3301      	adds	r3, #1
 8006462:	613b      	str	r3, [r7, #16]
 8006464:	693b      	ldr	r3, [r7, #16]
 8006466:	2b0e      	cmp	r3, #14
 8006468:	d9f2      	bls.n	8006450 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800646a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800646c:	2b00      	cmp	r3, #0
 800646e:	d11c      	bne.n	80064aa <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006476:	685b      	ldr	r3, [r3, #4]
 8006478:	68fa      	ldr	r2, [r7, #12]
 800647a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800647e:	f043 0302 	orr.w	r3, r3, #2
 8006482:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006488:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006494:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064a0:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	639a      	str	r2, [r3, #56]	; 0x38
 80064a8:	e00b      	b.n	80064c2 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064ae:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064ba:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80064c8:	461a      	mov	r2, r3
 80064ca:	2300      	movs	r3, #0
 80064cc:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064d4:	4619      	mov	r1, r3
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064dc:	461a      	mov	r2, r3
 80064de:	680b      	ldr	r3, [r1, #0]
 80064e0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80064e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064e4:	2b01      	cmp	r3, #1
 80064e6:	d10c      	bne.n	8006502 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80064e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d104      	bne.n	80064f8 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80064ee:	2100      	movs	r1, #0
 80064f0:	6878      	ldr	r0, [r7, #4]
 80064f2:	f000 f965 	bl	80067c0 <USB_SetDevSpeed>
 80064f6:	e008      	b.n	800650a <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80064f8:	2101      	movs	r1, #1
 80064fa:	6878      	ldr	r0, [r7, #4]
 80064fc:	f000 f960 	bl	80067c0 <USB_SetDevSpeed>
 8006500:	e003      	b.n	800650a <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006502:	2103      	movs	r1, #3
 8006504:	6878      	ldr	r0, [r7, #4]
 8006506:	f000 f95b 	bl	80067c0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800650a:	2110      	movs	r1, #16
 800650c:	6878      	ldr	r0, [r7, #4]
 800650e:	f000 f8f3 	bl	80066f8 <USB_FlushTxFifo>
 8006512:	4603      	mov	r3, r0
 8006514:	2b00      	cmp	r3, #0
 8006516:	d001      	beq.n	800651c <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8006518:	2301      	movs	r3, #1
 800651a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800651c:	6878      	ldr	r0, [r7, #4]
 800651e:	f000 f91f 	bl	8006760 <USB_FlushRxFifo>
 8006522:	4603      	mov	r3, r0
 8006524:	2b00      	cmp	r3, #0
 8006526:	d001      	beq.n	800652c <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8006528:	2301      	movs	r3, #1
 800652a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006532:	461a      	mov	r2, r3
 8006534:	2300      	movs	r3, #0
 8006536:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800653e:	461a      	mov	r2, r3
 8006540:	2300      	movs	r3, #0
 8006542:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800654a:	461a      	mov	r2, r3
 800654c:	2300      	movs	r3, #0
 800654e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006550:	2300      	movs	r3, #0
 8006552:	613b      	str	r3, [r7, #16]
 8006554:	e043      	b.n	80065de <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006556:	693b      	ldr	r3, [r7, #16]
 8006558:	015a      	lsls	r2, r3, #5
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	4413      	add	r3, r2
 800655e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006568:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800656c:	d118      	bne.n	80065a0 <USB_DevInit+0x170>
    {
      if (i == 0U)
 800656e:	693b      	ldr	r3, [r7, #16]
 8006570:	2b00      	cmp	r3, #0
 8006572:	d10a      	bne.n	800658a <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006574:	693b      	ldr	r3, [r7, #16]
 8006576:	015a      	lsls	r2, r3, #5
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	4413      	add	r3, r2
 800657c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006580:	461a      	mov	r2, r3
 8006582:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006586:	6013      	str	r3, [r2, #0]
 8006588:	e013      	b.n	80065b2 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800658a:	693b      	ldr	r3, [r7, #16]
 800658c:	015a      	lsls	r2, r3, #5
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	4413      	add	r3, r2
 8006592:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006596:	461a      	mov	r2, r3
 8006598:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800659c:	6013      	str	r3, [r2, #0]
 800659e:	e008      	b.n	80065b2 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80065a0:	693b      	ldr	r3, [r7, #16]
 80065a2:	015a      	lsls	r2, r3, #5
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	4413      	add	r3, r2
 80065a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065ac:	461a      	mov	r2, r3
 80065ae:	2300      	movs	r3, #0
 80065b0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80065b2:	693b      	ldr	r3, [r7, #16]
 80065b4:	015a      	lsls	r2, r3, #5
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	4413      	add	r3, r2
 80065ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065be:	461a      	mov	r2, r3
 80065c0:	2300      	movs	r3, #0
 80065c2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80065c4:	693b      	ldr	r3, [r7, #16]
 80065c6:	015a      	lsls	r2, r3, #5
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	4413      	add	r3, r2
 80065cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065d0:	461a      	mov	r2, r3
 80065d2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80065d6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80065d8:	693b      	ldr	r3, [r7, #16]
 80065da:	3301      	adds	r3, #1
 80065dc:	613b      	str	r3, [r7, #16]
 80065de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065e0:	693a      	ldr	r2, [r7, #16]
 80065e2:	429a      	cmp	r2, r3
 80065e4:	d3b7      	bcc.n	8006556 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80065e6:	2300      	movs	r3, #0
 80065e8:	613b      	str	r3, [r7, #16]
 80065ea:	e043      	b.n	8006674 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80065ec:	693b      	ldr	r3, [r7, #16]
 80065ee:	015a      	lsls	r2, r3, #5
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	4413      	add	r3, r2
 80065f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80065fe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006602:	d118      	bne.n	8006636 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8006604:	693b      	ldr	r3, [r7, #16]
 8006606:	2b00      	cmp	r3, #0
 8006608:	d10a      	bne.n	8006620 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800660a:	693b      	ldr	r3, [r7, #16]
 800660c:	015a      	lsls	r2, r3, #5
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	4413      	add	r3, r2
 8006612:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006616:	461a      	mov	r2, r3
 8006618:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800661c:	6013      	str	r3, [r2, #0]
 800661e:	e013      	b.n	8006648 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006620:	693b      	ldr	r3, [r7, #16]
 8006622:	015a      	lsls	r2, r3, #5
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	4413      	add	r3, r2
 8006628:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800662c:	461a      	mov	r2, r3
 800662e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006632:	6013      	str	r3, [r2, #0]
 8006634:	e008      	b.n	8006648 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006636:	693b      	ldr	r3, [r7, #16]
 8006638:	015a      	lsls	r2, r3, #5
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	4413      	add	r3, r2
 800663e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006642:	461a      	mov	r2, r3
 8006644:	2300      	movs	r3, #0
 8006646:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006648:	693b      	ldr	r3, [r7, #16]
 800664a:	015a      	lsls	r2, r3, #5
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	4413      	add	r3, r2
 8006650:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006654:	461a      	mov	r2, r3
 8006656:	2300      	movs	r3, #0
 8006658:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800665a:	693b      	ldr	r3, [r7, #16]
 800665c:	015a      	lsls	r2, r3, #5
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	4413      	add	r3, r2
 8006662:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006666:	461a      	mov	r2, r3
 8006668:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800666c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800666e:	693b      	ldr	r3, [r7, #16]
 8006670:	3301      	adds	r3, #1
 8006672:	613b      	str	r3, [r7, #16]
 8006674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006676:	693a      	ldr	r2, [r7, #16]
 8006678:	429a      	cmp	r2, r3
 800667a:	d3b7      	bcc.n	80065ec <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006682:	691b      	ldr	r3, [r3, #16]
 8006684:	68fa      	ldr	r2, [r7, #12]
 8006686:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800668a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800668e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	2200      	movs	r2, #0
 8006694:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800669c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800669e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d105      	bne.n	80066b0 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	699b      	ldr	r3, [r3, #24]
 80066a8:	f043 0210 	orr.w	r2, r3, #16
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	699a      	ldr	r2, [r3, #24]
 80066b4:	4b0f      	ldr	r3, [pc, #60]	; (80066f4 <USB_DevInit+0x2c4>)
 80066b6:	4313      	orrs	r3, r2
 80066b8:	687a      	ldr	r2, [r7, #4]
 80066ba:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80066bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d005      	beq.n	80066ce <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	699b      	ldr	r3, [r3, #24]
 80066c6:	f043 0208 	orr.w	r2, r3, #8
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80066ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80066d0:	2b01      	cmp	r3, #1
 80066d2:	d107      	bne.n	80066e4 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	699b      	ldr	r3, [r3, #24]
 80066d8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80066dc:	f043 0304 	orr.w	r3, r3, #4
 80066e0:	687a      	ldr	r2, [r7, #4]
 80066e2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80066e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80066e6:	4618      	mov	r0, r3
 80066e8:	3718      	adds	r7, #24
 80066ea:	46bd      	mov	sp, r7
 80066ec:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80066f0:	b004      	add	sp, #16
 80066f2:	4770      	bx	lr
 80066f4:	803c3800 	.word	0x803c3800

080066f8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80066f8:	b480      	push	{r7}
 80066fa:	b085      	sub	sp, #20
 80066fc:	af00      	add	r7, sp, #0
 80066fe:	6078      	str	r0, [r7, #4]
 8006700:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006702:	2300      	movs	r3, #0
 8006704:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	3301      	adds	r3, #1
 800670a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	4a13      	ldr	r2, [pc, #76]	; (800675c <USB_FlushTxFifo+0x64>)
 8006710:	4293      	cmp	r3, r2
 8006712:	d901      	bls.n	8006718 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006714:	2303      	movs	r3, #3
 8006716:	e01b      	b.n	8006750 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	691b      	ldr	r3, [r3, #16]
 800671c:	2b00      	cmp	r3, #0
 800671e:	daf2      	bge.n	8006706 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006720:	2300      	movs	r3, #0
 8006722:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006724:	683b      	ldr	r3, [r7, #0]
 8006726:	019b      	lsls	r3, r3, #6
 8006728:	f043 0220 	orr.w	r2, r3, #32
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	3301      	adds	r3, #1
 8006734:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	4a08      	ldr	r2, [pc, #32]	; (800675c <USB_FlushTxFifo+0x64>)
 800673a:	4293      	cmp	r3, r2
 800673c:	d901      	bls.n	8006742 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800673e:	2303      	movs	r3, #3
 8006740:	e006      	b.n	8006750 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	691b      	ldr	r3, [r3, #16]
 8006746:	f003 0320 	and.w	r3, r3, #32
 800674a:	2b20      	cmp	r3, #32
 800674c:	d0f0      	beq.n	8006730 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800674e:	2300      	movs	r3, #0
}
 8006750:	4618      	mov	r0, r3
 8006752:	3714      	adds	r7, #20
 8006754:	46bd      	mov	sp, r7
 8006756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800675a:	4770      	bx	lr
 800675c:	00030d40 	.word	0x00030d40

08006760 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006760:	b480      	push	{r7}
 8006762:	b085      	sub	sp, #20
 8006764:	af00      	add	r7, sp, #0
 8006766:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006768:	2300      	movs	r3, #0
 800676a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	3301      	adds	r3, #1
 8006770:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	4a11      	ldr	r2, [pc, #68]	; (80067bc <USB_FlushRxFifo+0x5c>)
 8006776:	4293      	cmp	r3, r2
 8006778:	d901      	bls.n	800677e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800677a:	2303      	movs	r3, #3
 800677c:	e018      	b.n	80067b0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	691b      	ldr	r3, [r3, #16]
 8006782:	2b00      	cmp	r3, #0
 8006784:	daf2      	bge.n	800676c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006786:	2300      	movs	r3, #0
 8006788:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	2210      	movs	r2, #16
 800678e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	3301      	adds	r3, #1
 8006794:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	4a08      	ldr	r2, [pc, #32]	; (80067bc <USB_FlushRxFifo+0x5c>)
 800679a:	4293      	cmp	r3, r2
 800679c:	d901      	bls.n	80067a2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800679e:	2303      	movs	r3, #3
 80067a0:	e006      	b.n	80067b0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	691b      	ldr	r3, [r3, #16]
 80067a6:	f003 0310 	and.w	r3, r3, #16
 80067aa:	2b10      	cmp	r3, #16
 80067ac:	d0f0      	beq.n	8006790 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80067ae:	2300      	movs	r3, #0
}
 80067b0:	4618      	mov	r0, r3
 80067b2:	3714      	adds	r7, #20
 80067b4:	46bd      	mov	sp, r7
 80067b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ba:	4770      	bx	lr
 80067bc:	00030d40 	.word	0x00030d40

080067c0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80067c0:	b480      	push	{r7}
 80067c2:	b085      	sub	sp, #20
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	6078      	str	r0, [r7, #4]
 80067c8:	460b      	mov	r3, r1
 80067ca:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067d6:	681a      	ldr	r2, [r3, #0]
 80067d8:	78fb      	ldrb	r3, [r7, #3]
 80067da:	68f9      	ldr	r1, [r7, #12]
 80067dc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80067e0:	4313      	orrs	r3, r2
 80067e2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80067e4:	2300      	movs	r3, #0
}
 80067e6:	4618      	mov	r0, r3
 80067e8:	3714      	adds	r7, #20
 80067ea:	46bd      	mov	sp, r7
 80067ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f0:	4770      	bx	lr

080067f2 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80067f2:	b480      	push	{r7}
 80067f4:	b087      	sub	sp, #28
 80067f6:	af00      	add	r7, sp, #0
 80067f8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80067fe:	693b      	ldr	r3, [r7, #16]
 8006800:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006804:	689b      	ldr	r3, [r3, #8]
 8006806:	f003 0306 	and.w	r3, r3, #6
 800680a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	2b00      	cmp	r3, #0
 8006810:	d102      	bne.n	8006818 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8006812:	2300      	movs	r3, #0
 8006814:	75fb      	strb	r3, [r7, #23]
 8006816:	e00a      	b.n	800682e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	2b02      	cmp	r3, #2
 800681c:	d002      	beq.n	8006824 <USB_GetDevSpeed+0x32>
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	2b06      	cmp	r3, #6
 8006822:	d102      	bne.n	800682a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8006824:	2302      	movs	r3, #2
 8006826:	75fb      	strb	r3, [r7, #23]
 8006828:	e001      	b.n	800682e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800682a:	230f      	movs	r3, #15
 800682c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800682e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006830:	4618      	mov	r0, r3
 8006832:	371c      	adds	r7, #28
 8006834:	46bd      	mov	sp, r7
 8006836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800683a:	4770      	bx	lr

0800683c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800683c:	b480      	push	{r7}
 800683e:	b085      	sub	sp, #20
 8006840:	af00      	add	r7, sp, #0
 8006842:	6078      	str	r0, [r7, #4]
 8006844:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800684a:	683b      	ldr	r3, [r7, #0]
 800684c:	781b      	ldrb	r3, [r3, #0]
 800684e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006850:	683b      	ldr	r3, [r7, #0]
 8006852:	785b      	ldrb	r3, [r3, #1]
 8006854:	2b01      	cmp	r3, #1
 8006856:	d13a      	bne.n	80068ce <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800685e:	69da      	ldr	r2, [r3, #28]
 8006860:	683b      	ldr	r3, [r7, #0]
 8006862:	781b      	ldrb	r3, [r3, #0]
 8006864:	f003 030f 	and.w	r3, r3, #15
 8006868:	2101      	movs	r1, #1
 800686a:	fa01 f303 	lsl.w	r3, r1, r3
 800686e:	b29b      	uxth	r3, r3
 8006870:	68f9      	ldr	r1, [r7, #12]
 8006872:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006876:	4313      	orrs	r3, r2
 8006878:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800687a:	68bb      	ldr	r3, [r7, #8]
 800687c:	015a      	lsls	r2, r3, #5
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	4413      	add	r3, r2
 8006882:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800688c:	2b00      	cmp	r3, #0
 800688e:	d155      	bne.n	800693c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006890:	68bb      	ldr	r3, [r7, #8]
 8006892:	015a      	lsls	r2, r3, #5
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	4413      	add	r3, r2
 8006898:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800689c:	681a      	ldr	r2, [r3, #0]
 800689e:	683b      	ldr	r3, [r7, #0]
 80068a0:	68db      	ldr	r3, [r3, #12]
 80068a2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80068a6:	683b      	ldr	r3, [r7, #0]
 80068a8:	791b      	ldrb	r3, [r3, #4]
 80068aa:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80068ac:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80068ae:	68bb      	ldr	r3, [r7, #8]
 80068b0:	059b      	lsls	r3, r3, #22
 80068b2:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80068b4:	4313      	orrs	r3, r2
 80068b6:	68ba      	ldr	r2, [r7, #8]
 80068b8:	0151      	lsls	r1, r2, #5
 80068ba:	68fa      	ldr	r2, [r7, #12]
 80068bc:	440a      	add	r2, r1
 80068be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80068c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80068c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80068ca:	6013      	str	r3, [r2, #0]
 80068cc:	e036      	b.n	800693c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068d4:	69da      	ldr	r2, [r3, #28]
 80068d6:	683b      	ldr	r3, [r7, #0]
 80068d8:	781b      	ldrb	r3, [r3, #0]
 80068da:	f003 030f 	and.w	r3, r3, #15
 80068de:	2101      	movs	r1, #1
 80068e0:	fa01 f303 	lsl.w	r3, r1, r3
 80068e4:	041b      	lsls	r3, r3, #16
 80068e6:	68f9      	ldr	r1, [r7, #12]
 80068e8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80068ec:	4313      	orrs	r3, r2
 80068ee:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80068f0:	68bb      	ldr	r3, [r7, #8]
 80068f2:	015a      	lsls	r2, r3, #5
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	4413      	add	r3, r2
 80068f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006902:	2b00      	cmp	r3, #0
 8006904:	d11a      	bne.n	800693c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006906:	68bb      	ldr	r3, [r7, #8]
 8006908:	015a      	lsls	r2, r3, #5
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	4413      	add	r3, r2
 800690e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006912:	681a      	ldr	r2, [r3, #0]
 8006914:	683b      	ldr	r3, [r7, #0]
 8006916:	68db      	ldr	r3, [r3, #12]
 8006918:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800691c:	683b      	ldr	r3, [r7, #0]
 800691e:	791b      	ldrb	r3, [r3, #4]
 8006920:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006922:	430b      	orrs	r3, r1
 8006924:	4313      	orrs	r3, r2
 8006926:	68ba      	ldr	r2, [r7, #8]
 8006928:	0151      	lsls	r1, r2, #5
 800692a:	68fa      	ldr	r2, [r7, #12]
 800692c:	440a      	add	r2, r1
 800692e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006932:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006936:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800693a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800693c:	2300      	movs	r3, #0
}
 800693e:	4618      	mov	r0, r3
 8006940:	3714      	adds	r7, #20
 8006942:	46bd      	mov	sp, r7
 8006944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006948:	4770      	bx	lr
	...

0800694c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800694c:	b480      	push	{r7}
 800694e:	b085      	sub	sp, #20
 8006950:	af00      	add	r7, sp, #0
 8006952:	6078      	str	r0, [r7, #4]
 8006954:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800695a:	683b      	ldr	r3, [r7, #0]
 800695c:	781b      	ldrb	r3, [r3, #0]
 800695e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8006960:	683b      	ldr	r3, [r7, #0]
 8006962:	785b      	ldrb	r3, [r3, #1]
 8006964:	2b01      	cmp	r3, #1
 8006966:	d161      	bne.n	8006a2c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006968:	68bb      	ldr	r3, [r7, #8]
 800696a:	015a      	lsls	r2, r3, #5
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	4413      	add	r3, r2
 8006970:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800697a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800697e:	d11f      	bne.n	80069c0 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8006980:	68bb      	ldr	r3, [r7, #8]
 8006982:	015a      	lsls	r2, r3, #5
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	4413      	add	r3, r2
 8006988:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	68ba      	ldr	r2, [r7, #8]
 8006990:	0151      	lsls	r1, r2, #5
 8006992:	68fa      	ldr	r2, [r7, #12]
 8006994:	440a      	add	r2, r1
 8006996:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800699a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800699e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80069a0:	68bb      	ldr	r3, [r7, #8]
 80069a2:	015a      	lsls	r2, r3, #5
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	4413      	add	r3, r2
 80069a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	68ba      	ldr	r2, [r7, #8]
 80069b0:	0151      	lsls	r1, r2, #5
 80069b2:	68fa      	ldr	r2, [r7, #12]
 80069b4:	440a      	add	r2, r1
 80069b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80069ba:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80069be:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80069c6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80069c8:	683b      	ldr	r3, [r7, #0]
 80069ca:	781b      	ldrb	r3, [r3, #0]
 80069cc:	f003 030f 	and.w	r3, r3, #15
 80069d0:	2101      	movs	r1, #1
 80069d2:	fa01 f303 	lsl.w	r3, r1, r3
 80069d6:	b29b      	uxth	r3, r3
 80069d8:	43db      	mvns	r3, r3
 80069da:	68f9      	ldr	r1, [r7, #12]
 80069dc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80069e0:	4013      	ands	r3, r2
 80069e2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80069ea:	69da      	ldr	r2, [r3, #28]
 80069ec:	683b      	ldr	r3, [r7, #0]
 80069ee:	781b      	ldrb	r3, [r3, #0]
 80069f0:	f003 030f 	and.w	r3, r3, #15
 80069f4:	2101      	movs	r1, #1
 80069f6:	fa01 f303 	lsl.w	r3, r1, r3
 80069fa:	b29b      	uxth	r3, r3
 80069fc:	43db      	mvns	r3, r3
 80069fe:	68f9      	ldr	r1, [r7, #12]
 8006a00:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006a04:	4013      	ands	r3, r2
 8006a06:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8006a08:	68bb      	ldr	r3, [r7, #8]
 8006a0a:	015a      	lsls	r2, r3, #5
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	4413      	add	r3, r2
 8006a10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a14:	681a      	ldr	r2, [r3, #0]
 8006a16:	68bb      	ldr	r3, [r7, #8]
 8006a18:	0159      	lsls	r1, r3, #5
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	440b      	add	r3, r1
 8006a1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a22:	4619      	mov	r1, r3
 8006a24:	4b35      	ldr	r3, [pc, #212]	; (8006afc <USB_DeactivateEndpoint+0x1b0>)
 8006a26:	4013      	ands	r3, r2
 8006a28:	600b      	str	r3, [r1, #0]
 8006a2a:	e060      	b.n	8006aee <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006a2c:	68bb      	ldr	r3, [r7, #8]
 8006a2e:	015a      	lsls	r2, r3, #5
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	4413      	add	r3, r2
 8006a34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006a3e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006a42:	d11f      	bne.n	8006a84 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006a44:	68bb      	ldr	r3, [r7, #8]
 8006a46:	015a      	lsls	r2, r3, #5
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	4413      	add	r3, r2
 8006a4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	68ba      	ldr	r2, [r7, #8]
 8006a54:	0151      	lsls	r1, r2, #5
 8006a56:	68fa      	ldr	r2, [r7, #12]
 8006a58:	440a      	add	r2, r1
 8006a5a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006a5e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006a62:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8006a64:	68bb      	ldr	r3, [r7, #8]
 8006a66:	015a      	lsls	r2, r3, #5
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	4413      	add	r3, r2
 8006a6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	68ba      	ldr	r2, [r7, #8]
 8006a74:	0151      	lsls	r1, r2, #5
 8006a76:	68fa      	ldr	r2, [r7, #12]
 8006a78:	440a      	add	r2, r1
 8006a7a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006a7e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006a82:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a8a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006a8c:	683b      	ldr	r3, [r7, #0]
 8006a8e:	781b      	ldrb	r3, [r3, #0]
 8006a90:	f003 030f 	and.w	r3, r3, #15
 8006a94:	2101      	movs	r1, #1
 8006a96:	fa01 f303 	lsl.w	r3, r1, r3
 8006a9a:	041b      	lsls	r3, r3, #16
 8006a9c:	43db      	mvns	r3, r3
 8006a9e:	68f9      	ldr	r1, [r7, #12]
 8006aa0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006aa4:	4013      	ands	r3, r2
 8006aa6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006aae:	69da      	ldr	r2, [r3, #28]
 8006ab0:	683b      	ldr	r3, [r7, #0]
 8006ab2:	781b      	ldrb	r3, [r3, #0]
 8006ab4:	f003 030f 	and.w	r3, r3, #15
 8006ab8:	2101      	movs	r1, #1
 8006aba:	fa01 f303 	lsl.w	r3, r1, r3
 8006abe:	041b      	lsls	r3, r3, #16
 8006ac0:	43db      	mvns	r3, r3
 8006ac2:	68f9      	ldr	r1, [r7, #12]
 8006ac4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006ac8:	4013      	ands	r3, r2
 8006aca:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8006acc:	68bb      	ldr	r3, [r7, #8]
 8006ace:	015a      	lsls	r2, r3, #5
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	4413      	add	r3, r2
 8006ad4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ad8:	681a      	ldr	r2, [r3, #0]
 8006ada:	68bb      	ldr	r3, [r7, #8]
 8006adc:	0159      	lsls	r1, r3, #5
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	440b      	add	r3, r1
 8006ae2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ae6:	4619      	mov	r1, r3
 8006ae8:	4b05      	ldr	r3, [pc, #20]	; (8006b00 <USB_DeactivateEndpoint+0x1b4>)
 8006aea:	4013      	ands	r3, r2
 8006aec:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8006aee:	2300      	movs	r3, #0
}
 8006af0:	4618      	mov	r0, r3
 8006af2:	3714      	adds	r7, #20
 8006af4:	46bd      	mov	sp, r7
 8006af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006afa:	4770      	bx	lr
 8006afc:	ec337800 	.word	0xec337800
 8006b00:	eff37800 	.word	0xeff37800

08006b04 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006b04:	b580      	push	{r7, lr}
 8006b06:	b08a      	sub	sp, #40	; 0x28
 8006b08:	af02      	add	r7, sp, #8
 8006b0a:	60f8      	str	r0, [r7, #12]
 8006b0c:	60b9      	str	r1, [r7, #8]
 8006b0e:	4613      	mov	r3, r2
 8006b10:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8006b16:	68bb      	ldr	r3, [r7, #8]
 8006b18:	781b      	ldrb	r3, [r3, #0]
 8006b1a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006b1c:	68bb      	ldr	r3, [r7, #8]
 8006b1e:	785b      	ldrb	r3, [r3, #1]
 8006b20:	2b01      	cmp	r3, #1
 8006b22:	f040 815c 	bne.w	8006dde <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006b26:	68bb      	ldr	r3, [r7, #8]
 8006b28:	699b      	ldr	r3, [r3, #24]
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d132      	bne.n	8006b94 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006b2e:	69bb      	ldr	r3, [r7, #24]
 8006b30:	015a      	lsls	r2, r3, #5
 8006b32:	69fb      	ldr	r3, [r7, #28]
 8006b34:	4413      	add	r3, r2
 8006b36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b3a:	691b      	ldr	r3, [r3, #16]
 8006b3c:	69ba      	ldr	r2, [r7, #24]
 8006b3e:	0151      	lsls	r1, r2, #5
 8006b40:	69fa      	ldr	r2, [r7, #28]
 8006b42:	440a      	add	r2, r1
 8006b44:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006b48:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006b4c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006b50:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006b52:	69bb      	ldr	r3, [r7, #24]
 8006b54:	015a      	lsls	r2, r3, #5
 8006b56:	69fb      	ldr	r3, [r7, #28]
 8006b58:	4413      	add	r3, r2
 8006b5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b5e:	691b      	ldr	r3, [r3, #16]
 8006b60:	69ba      	ldr	r2, [r7, #24]
 8006b62:	0151      	lsls	r1, r2, #5
 8006b64:	69fa      	ldr	r2, [r7, #28]
 8006b66:	440a      	add	r2, r1
 8006b68:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006b6c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006b70:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006b72:	69bb      	ldr	r3, [r7, #24]
 8006b74:	015a      	lsls	r2, r3, #5
 8006b76:	69fb      	ldr	r3, [r7, #28]
 8006b78:	4413      	add	r3, r2
 8006b7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b7e:	691b      	ldr	r3, [r3, #16]
 8006b80:	69ba      	ldr	r2, [r7, #24]
 8006b82:	0151      	lsls	r1, r2, #5
 8006b84:	69fa      	ldr	r2, [r7, #28]
 8006b86:	440a      	add	r2, r1
 8006b88:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006b8c:	0cdb      	lsrs	r3, r3, #19
 8006b8e:	04db      	lsls	r3, r3, #19
 8006b90:	6113      	str	r3, [r2, #16]
 8006b92:	e074      	b.n	8006c7e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006b94:	69bb      	ldr	r3, [r7, #24]
 8006b96:	015a      	lsls	r2, r3, #5
 8006b98:	69fb      	ldr	r3, [r7, #28]
 8006b9a:	4413      	add	r3, r2
 8006b9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ba0:	691b      	ldr	r3, [r3, #16]
 8006ba2:	69ba      	ldr	r2, [r7, #24]
 8006ba4:	0151      	lsls	r1, r2, #5
 8006ba6:	69fa      	ldr	r2, [r7, #28]
 8006ba8:	440a      	add	r2, r1
 8006baa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006bae:	0cdb      	lsrs	r3, r3, #19
 8006bb0:	04db      	lsls	r3, r3, #19
 8006bb2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006bb4:	69bb      	ldr	r3, [r7, #24]
 8006bb6:	015a      	lsls	r2, r3, #5
 8006bb8:	69fb      	ldr	r3, [r7, #28]
 8006bba:	4413      	add	r3, r2
 8006bbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006bc0:	691b      	ldr	r3, [r3, #16]
 8006bc2:	69ba      	ldr	r2, [r7, #24]
 8006bc4:	0151      	lsls	r1, r2, #5
 8006bc6:	69fa      	ldr	r2, [r7, #28]
 8006bc8:	440a      	add	r2, r1
 8006bca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006bce:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006bd2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006bd6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8006bd8:	69bb      	ldr	r3, [r7, #24]
 8006bda:	015a      	lsls	r2, r3, #5
 8006bdc:	69fb      	ldr	r3, [r7, #28]
 8006bde:	4413      	add	r3, r2
 8006be0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006be4:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8006be6:	68bb      	ldr	r3, [r7, #8]
 8006be8:	6999      	ldr	r1, [r3, #24]
 8006bea:	68bb      	ldr	r3, [r7, #8]
 8006bec:	68db      	ldr	r3, [r3, #12]
 8006bee:	440b      	add	r3, r1
 8006bf0:	1e59      	subs	r1, r3, #1
 8006bf2:	68bb      	ldr	r3, [r7, #8]
 8006bf4:	68db      	ldr	r3, [r3, #12]
 8006bf6:	fbb1 f3f3 	udiv	r3, r1, r3
 8006bfa:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8006bfc:	4b9d      	ldr	r3, [pc, #628]	; (8006e74 <USB_EPStartXfer+0x370>)
 8006bfe:	400b      	ands	r3, r1
 8006c00:	69b9      	ldr	r1, [r7, #24]
 8006c02:	0148      	lsls	r0, r1, #5
 8006c04:	69f9      	ldr	r1, [r7, #28]
 8006c06:	4401      	add	r1, r0
 8006c08:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006c0c:	4313      	orrs	r3, r2
 8006c0e:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006c10:	69bb      	ldr	r3, [r7, #24]
 8006c12:	015a      	lsls	r2, r3, #5
 8006c14:	69fb      	ldr	r3, [r7, #28]
 8006c16:	4413      	add	r3, r2
 8006c18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c1c:	691a      	ldr	r2, [r3, #16]
 8006c1e:	68bb      	ldr	r3, [r7, #8]
 8006c20:	699b      	ldr	r3, [r3, #24]
 8006c22:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006c26:	69b9      	ldr	r1, [r7, #24]
 8006c28:	0148      	lsls	r0, r1, #5
 8006c2a:	69f9      	ldr	r1, [r7, #28]
 8006c2c:	4401      	add	r1, r0
 8006c2e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006c32:	4313      	orrs	r3, r2
 8006c34:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8006c36:	68bb      	ldr	r3, [r7, #8]
 8006c38:	791b      	ldrb	r3, [r3, #4]
 8006c3a:	2b01      	cmp	r3, #1
 8006c3c:	d11f      	bne.n	8006c7e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8006c3e:	69bb      	ldr	r3, [r7, #24]
 8006c40:	015a      	lsls	r2, r3, #5
 8006c42:	69fb      	ldr	r3, [r7, #28]
 8006c44:	4413      	add	r3, r2
 8006c46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c4a:	691b      	ldr	r3, [r3, #16]
 8006c4c:	69ba      	ldr	r2, [r7, #24]
 8006c4e:	0151      	lsls	r1, r2, #5
 8006c50:	69fa      	ldr	r2, [r7, #28]
 8006c52:	440a      	add	r2, r1
 8006c54:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c58:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8006c5c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8006c5e:	69bb      	ldr	r3, [r7, #24]
 8006c60:	015a      	lsls	r2, r3, #5
 8006c62:	69fb      	ldr	r3, [r7, #28]
 8006c64:	4413      	add	r3, r2
 8006c66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c6a:	691b      	ldr	r3, [r3, #16]
 8006c6c:	69ba      	ldr	r2, [r7, #24]
 8006c6e:	0151      	lsls	r1, r2, #5
 8006c70:	69fa      	ldr	r2, [r7, #28]
 8006c72:	440a      	add	r2, r1
 8006c74:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c78:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006c7c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8006c7e:	79fb      	ldrb	r3, [r7, #7]
 8006c80:	2b01      	cmp	r3, #1
 8006c82:	d14b      	bne.n	8006d1c <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006c84:	68bb      	ldr	r3, [r7, #8]
 8006c86:	695b      	ldr	r3, [r3, #20]
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d009      	beq.n	8006ca0 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006c8c:	69bb      	ldr	r3, [r7, #24]
 8006c8e:	015a      	lsls	r2, r3, #5
 8006c90:	69fb      	ldr	r3, [r7, #28]
 8006c92:	4413      	add	r3, r2
 8006c94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c98:	461a      	mov	r2, r3
 8006c9a:	68bb      	ldr	r3, [r7, #8]
 8006c9c:	695b      	ldr	r3, [r3, #20]
 8006c9e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8006ca0:	68bb      	ldr	r3, [r7, #8]
 8006ca2:	791b      	ldrb	r3, [r3, #4]
 8006ca4:	2b01      	cmp	r3, #1
 8006ca6:	d128      	bne.n	8006cfa <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006ca8:	69fb      	ldr	r3, [r7, #28]
 8006caa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006cae:	689b      	ldr	r3, [r3, #8]
 8006cb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d110      	bne.n	8006cda <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006cb8:	69bb      	ldr	r3, [r7, #24]
 8006cba:	015a      	lsls	r2, r3, #5
 8006cbc:	69fb      	ldr	r3, [r7, #28]
 8006cbe:	4413      	add	r3, r2
 8006cc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	69ba      	ldr	r2, [r7, #24]
 8006cc8:	0151      	lsls	r1, r2, #5
 8006cca:	69fa      	ldr	r2, [r7, #28]
 8006ccc:	440a      	add	r2, r1
 8006cce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006cd2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006cd6:	6013      	str	r3, [r2, #0]
 8006cd8:	e00f      	b.n	8006cfa <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006cda:	69bb      	ldr	r3, [r7, #24]
 8006cdc:	015a      	lsls	r2, r3, #5
 8006cde:	69fb      	ldr	r3, [r7, #28]
 8006ce0:	4413      	add	r3, r2
 8006ce2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	69ba      	ldr	r2, [r7, #24]
 8006cea:	0151      	lsls	r1, r2, #5
 8006cec:	69fa      	ldr	r2, [r7, #28]
 8006cee:	440a      	add	r2, r1
 8006cf0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006cf4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006cf8:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006cfa:	69bb      	ldr	r3, [r7, #24]
 8006cfc:	015a      	lsls	r2, r3, #5
 8006cfe:	69fb      	ldr	r3, [r7, #28]
 8006d00:	4413      	add	r3, r2
 8006d02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	69ba      	ldr	r2, [r7, #24]
 8006d0a:	0151      	lsls	r1, r2, #5
 8006d0c:	69fa      	ldr	r2, [r7, #28]
 8006d0e:	440a      	add	r2, r1
 8006d10:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d14:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006d18:	6013      	str	r3, [r2, #0]
 8006d1a:	e133      	b.n	8006f84 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006d1c:	69bb      	ldr	r3, [r7, #24]
 8006d1e:	015a      	lsls	r2, r3, #5
 8006d20:	69fb      	ldr	r3, [r7, #28]
 8006d22:	4413      	add	r3, r2
 8006d24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	69ba      	ldr	r2, [r7, #24]
 8006d2c:	0151      	lsls	r1, r2, #5
 8006d2e:	69fa      	ldr	r2, [r7, #28]
 8006d30:	440a      	add	r2, r1
 8006d32:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d36:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006d3a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006d3c:	68bb      	ldr	r3, [r7, #8]
 8006d3e:	791b      	ldrb	r3, [r3, #4]
 8006d40:	2b01      	cmp	r3, #1
 8006d42:	d015      	beq.n	8006d70 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8006d44:	68bb      	ldr	r3, [r7, #8]
 8006d46:	699b      	ldr	r3, [r3, #24]
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	f000 811b 	beq.w	8006f84 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006d4e:	69fb      	ldr	r3, [r7, #28]
 8006d50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d54:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006d56:	68bb      	ldr	r3, [r7, #8]
 8006d58:	781b      	ldrb	r3, [r3, #0]
 8006d5a:	f003 030f 	and.w	r3, r3, #15
 8006d5e:	2101      	movs	r1, #1
 8006d60:	fa01 f303 	lsl.w	r3, r1, r3
 8006d64:	69f9      	ldr	r1, [r7, #28]
 8006d66:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006d6a:	4313      	orrs	r3, r2
 8006d6c:	634b      	str	r3, [r1, #52]	; 0x34
 8006d6e:	e109      	b.n	8006f84 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006d70:	69fb      	ldr	r3, [r7, #28]
 8006d72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d76:	689b      	ldr	r3, [r3, #8]
 8006d78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d110      	bne.n	8006da2 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006d80:	69bb      	ldr	r3, [r7, #24]
 8006d82:	015a      	lsls	r2, r3, #5
 8006d84:	69fb      	ldr	r3, [r7, #28]
 8006d86:	4413      	add	r3, r2
 8006d88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	69ba      	ldr	r2, [r7, #24]
 8006d90:	0151      	lsls	r1, r2, #5
 8006d92:	69fa      	ldr	r2, [r7, #28]
 8006d94:	440a      	add	r2, r1
 8006d96:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d9a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006d9e:	6013      	str	r3, [r2, #0]
 8006da0:	e00f      	b.n	8006dc2 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006da2:	69bb      	ldr	r3, [r7, #24]
 8006da4:	015a      	lsls	r2, r3, #5
 8006da6:	69fb      	ldr	r3, [r7, #28]
 8006da8:	4413      	add	r3, r2
 8006daa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	69ba      	ldr	r2, [r7, #24]
 8006db2:	0151      	lsls	r1, r2, #5
 8006db4:	69fa      	ldr	r2, [r7, #28]
 8006db6:	440a      	add	r2, r1
 8006db8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006dbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006dc0:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8006dc2:	68bb      	ldr	r3, [r7, #8]
 8006dc4:	6919      	ldr	r1, [r3, #16]
 8006dc6:	68bb      	ldr	r3, [r7, #8]
 8006dc8:	781a      	ldrb	r2, [r3, #0]
 8006dca:	68bb      	ldr	r3, [r7, #8]
 8006dcc:	699b      	ldr	r3, [r3, #24]
 8006dce:	b298      	uxth	r0, r3
 8006dd0:	79fb      	ldrb	r3, [r7, #7]
 8006dd2:	9300      	str	r3, [sp, #0]
 8006dd4:	4603      	mov	r3, r0
 8006dd6:	68f8      	ldr	r0, [r7, #12]
 8006dd8:	f000 fade 	bl	8007398 <USB_WritePacket>
 8006ddc:	e0d2      	b.n	8006f84 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006dde:	69bb      	ldr	r3, [r7, #24]
 8006de0:	015a      	lsls	r2, r3, #5
 8006de2:	69fb      	ldr	r3, [r7, #28]
 8006de4:	4413      	add	r3, r2
 8006de6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006dea:	691b      	ldr	r3, [r3, #16]
 8006dec:	69ba      	ldr	r2, [r7, #24]
 8006dee:	0151      	lsls	r1, r2, #5
 8006df0:	69fa      	ldr	r2, [r7, #28]
 8006df2:	440a      	add	r2, r1
 8006df4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006df8:	0cdb      	lsrs	r3, r3, #19
 8006dfa:	04db      	lsls	r3, r3, #19
 8006dfc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006dfe:	69bb      	ldr	r3, [r7, #24]
 8006e00:	015a      	lsls	r2, r3, #5
 8006e02:	69fb      	ldr	r3, [r7, #28]
 8006e04:	4413      	add	r3, r2
 8006e06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e0a:	691b      	ldr	r3, [r3, #16]
 8006e0c:	69ba      	ldr	r2, [r7, #24]
 8006e0e:	0151      	lsls	r1, r2, #5
 8006e10:	69fa      	ldr	r2, [r7, #28]
 8006e12:	440a      	add	r2, r1
 8006e14:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006e18:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006e1c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006e20:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8006e22:	68bb      	ldr	r3, [r7, #8]
 8006e24:	699b      	ldr	r3, [r3, #24]
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d126      	bne.n	8006e78 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8006e2a:	69bb      	ldr	r3, [r7, #24]
 8006e2c:	015a      	lsls	r2, r3, #5
 8006e2e:	69fb      	ldr	r3, [r7, #28]
 8006e30:	4413      	add	r3, r2
 8006e32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e36:	691a      	ldr	r2, [r3, #16]
 8006e38:	68bb      	ldr	r3, [r7, #8]
 8006e3a:	68db      	ldr	r3, [r3, #12]
 8006e3c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006e40:	69b9      	ldr	r1, [r7, #24]
 8006e42:	0148      	lsls	r0, r1, #5
 8006e44:	69f9      	ldr	r1, [r7, #28]
 8006e46:	4401      	add	r1, r0
 8006e48:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006e4c:	4313      	orrs	r3, r2
 8006e4e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006e50:	69bb      	ldr	r3, [r7, #24]
 8006e52:	015a      	lsls	r2, r3, #5
 8006e54:	69fb      	ldr	r3, [r7, #28]
 8006e56:	4413      	add	r3, r2
 8006e58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e5c:	691b      	ldr	r3, [r3, #16]
 8006e5e:	69ba      	ldr	r2, [r7, #24]
 8006e60:	0151      	lsls	r1, r2, #5
 8006e62:	69fa      	ldr	r2, [r7, #28]
 8006e64:	440a      	add	r2, r1
 8006e66:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006e6a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006e6e:	6113      	str	r3, [r2, #16]
 8006e70:	e03a      	b.n	8006ee8 <USB_EPStartXfer+0x3e4>
 8006e72:	bf00      	nop
 8006e74:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006e78:	68bb      	ldr	r3, [r7, #8]
 8006e7a:	699a      	ldr	r2, [r3, #24]
 8006e7c:	68bb      	ldr	r3, [r7, #8]
 8006e7e:	68db      	ldr	r3, [r3, #12]
 8006e80:	4413      	add	r3, r2
 8006e82:	1e5a      	subs	r2, r3, #1
 8006e84:	68bb      	ldr	r3, [r7, #8]
 8006e86:	68db      	ldr	r3, [r3, #12]
 8006e88:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e8c:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8006e8e:	68bb      	ldr	r3, [r7, #8]
 8006e90:	68db      	ldr	r3, [r3, #12]
 8006e92:	8afa      	ldrh	r2, [r7, #22]
 8006e94:	fb03 f202 	mul.w	r2, r3, r2
 8006e98:	68bb      	ldr	r3, [r7, #8]
 8006e9a:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8006e9c:	69bb      	ldr	r3, [r7, #24]
 8006e9e:	015a      	lsls	r2, r3, #5
 8006ea0:	69fb      	ldr	r3, [r7, #28]
 8006ea2:	4413      	add	r3, r2
 8006ea4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ea8:	691a      	ldr	r2, [r3, #16]
 8006eaa:	8afb      	ldrh	r3, [r7, #22]
 8006eac:	04d9      	lsls	r1, r3, #19
 8006eae:	4b38      	ldr	r3, [pc, #224]	; (8006f90 <USB_EPStartXfer+0x48c>)
 8006eb0:	400b      	ands	r3, r1
 8006eb2:	69b9      	ldr	r1, [r7, #24]
 8006eb4:	0148      	lsls	r0, r1, #5
 8006eb6:	69f9      	ldr	r1, [r7, #28]
 8006eb8:	4401      	add	r1, r0
 8006eba:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006ebe:	4313      	orrs	r3, r2
 8006ec0:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8006ec2:	69bb      	ldr	r3, [r7, #24]
 8006ec4:	015a      	lsls	r2, r3, #5
 8006ec6:	69fb      	ldr	r3, [r7, #28]
 8006ec8:	4413      	add	r3, r2
 8006eca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ece:	691a      	ldr	r2, [r3, #16]
 8006ed0:	68bb      	ldr	r3, [r7, #8]
 8006ed2:	69db      	ldr	r3, [r3, #28]
 8006ed4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006ed8:	69b9      	ldr	r1, [r7, #24]
 8006eda:	0148      	lsls	r0, r1, #5
 8006edc:	69f9      	ldr	r1, [r7, #28]
 8006ede:	4401      	add	r1, r0
 8006ee0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006ee4:	4313      	orrs	r3, r2
 8006ee6:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006ee8:	79fb      	ldrb	r3, [r7, #7]
 8006eea:	2b01      	cmp	r3, #1
 8006eec:	d10d      	bne.n	8006f0a <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006eee:	68bb      	ldr	r3, [r7, #8]
 8006ef0:	691b      	ldr	r3, [r3, #16]
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d009      	beq.n	8006f0a <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006ef6:	68bb      	ldr	r3, [r7, #8]
 8006ef8:	6919      	ldr	r1, [r3, #16]
 8006efa:	69bb      	ldr	r3, [r7, #24]
 8006efc:	015a      	lsls	r2, r3, #5
 8006efe:	69fb      	ldr	r3, [r7, #28]
 8006f00:	4413      	add	r3, r2
 8006f02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f06:	460a      	mov	r2, r1
 8006f08:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8006f0a:	68bb      	ldr	r3, [r7, #8]
 8006f0c:	791b      	ldrb	r3, [r3, #4]
 8006f0e:	2b01      	cmp	r3, #1
 8006f10:	d128      	bne.n	8006f64 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006f12:	69fb      	ldr	r3, [r7, #28]
 8006f14:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f18:	689b      	ldr	r3, [r3, #8]
 8006f1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d110      	bne.n	8006f44 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8006f22:	69bb      	ldr	r3, [r7, #24]
 8006f24:	015a      	lsls	r2, r3, #5
 8006f26:	69fb      	ldr	r3, [r7, #28]
 8006f28:	4413      	add	r3, r2
 8006f2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	69ba      	ldr	r2, [r7, #24]
 8006f32:	0151      	lsls	r1, r2, #5
 8006f34:	69fa      	ldr	r2, [r7, #28]
 8006f36:	440a      	add	r2, r1
 8006f38:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006f3c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006f40:	6013      	str	r3, [r2, #0]
 8006f42:	e00f      	b.n	8006f64 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8006f44:	69bb      	ldr	r3, [r7, #24]
 8006f46:	015a      	lsls	r2, r3, #5
 8006f48:	69fb      	ldr	r3, [r7, #28]
 8006f4a:	4413      	add	r3, r2
 8006f4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	69ba      	ldr	r2, [r7, #24]
 8006f54:	0151      	lsls	r1, r2, #5
 8006f56:	69fa      	ldr	r2, [r7, #28]
 8006f58:	440a      	add	r2, r1
 8006f5a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006f5e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006f62:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006f64:	69bb      	ldr	r3, [r7, #24]
 8006f66:	015a      	lsls	r2, r3, #5
 8006f68:	69fb      	ldr	r3, [r7, #28]
 8006f6a:	4413      	add	r3, r2
 8006f6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	69ba      	ldr	r2, [r7, #24]
 8006f74:	0151      	lsls	r1, r2, #5
 8006f76:	69fa      	ldr	r2, [r7, #28]
 8006f78:	440a      	add	r2, r1
 8006f7a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006f7e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006f82:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006f84:	2300      	movs	r3, #0
}
 8006f86:	4618      	mov	r0, r3
 8006f88:	3720      	adds	r7, #32
 8006f8a:	46bd      	mov	sp, r7
 8006f8c:	bd80      	pop	{r7, pc}
 8006f8e:	bf00      	nop
 8006f90:	1ff80000 	.word	0x1ff80000

08006f94 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006f94:	b480      	push	{r7}
 8006f96:	b087      	sub	sp, #28
 8006f98:	af00      	add	r7, sp, #0
 8006f9a:	60f8      	str	r0, [r7, #12]
 8006f9c:	60b9      	str	r1, [r7, #8]
 8006f9e:	4613      	mov	r3, r2
 8006fa0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8006fa6:	68bb      	ldr	r3, [r7, #8]
 8006fa8:	781b      	ldrb	r3, [r3, #0]
 8006faa:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006fac:	68bb      	ldr	r3, [r7, #8]
 8006fae:	785b      	ldrb	r3, [r3, #1]
 8006fb0:	2b01      	cmp	r3, #1
 8006fb2:	f040 80ce 	bne.w	8007152 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006fb6:	68bb      	ldr	r3, [r7, #8]
 8006fb8:	699b      	ldr	r3, [r3, #24]
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d132      	bne.n	8007024 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006fbe:	693b      	ldr	r3, [r7, #16]
 8006fc0:	015a      	lsls	r2, r3, #5
 8006fc2:	697b      	ldr	r3, [r7, #20]
 8006fc4:	4413      	add	r3, r2
 8006fc6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fca:	691b      	ldr	r3, [r3, #16]
 8006fcc:	693a      	ldr	r2, [r7, #16]
 8006fce:	0151      	lsls	r1, r2, #5
 8006fd0:	697a      	ldr	r2, [r7, #20]
 8006fd2:	440a      	add	r2, r1
 8006fd4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006fd8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006fdc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006fe0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006fe2:	693b      	ldr	r3, [r7, #16]
 8006fe4:	015a      	lsls	r2, r3, #5
 8006fe6:	697b      	ldr	r3, [r7, #20]
 8006fe8:	4413      	add	r3, r2
 8006fea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fee:	691b      	ldr	r3, [r3, #16]
 8006ff0:	693a      	ldr	r2, [r7, #16]
 8006ff2:	0151      	lsls	r1, r2, #5
 8006ff4:	697a      	ldr	r2, [r7, #20]
 8006ff6:	440a      	add	r2, r1
 8006ff8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006ffc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007000:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007002:	693b      	ldr	r3, [r7, #16]
 8007004:	015a      	lsls	r2, r3, #5
 8007006:	697b      	ldr	r3, [r7, #20]
 8007008:	4413      	add	r3, r2
 800700a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800700e:	691b      	ldr	r3, [r3, #16]
 8007010:	693a      	ldr	r2, [r7, #16]
 8007012:	0151      	lsls	r1, r2, #5
 8007014:	697a      	ldr	r2, [r7, #20]
 8007016:	440a      	add	r2, r1
 8007018:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800701c:	0cdb      	lsrs	r3, r3, #19
 800701e:	04db      	lsls	r3, r3, #19
 8007020:	6113      	str	r3, [r2, #16]
 8007022:	e04e      	b.n	80070c2 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007024:	693b      	ldr	r3, [r7, #16]
 8007026:	015a      	lsls	r2, r3, #5
 8007028:	697b      	ldr	r3, [r7, #20]
 800702a:	4413      	add	r3, r2
 800702c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007030:	691b      	ldr	r3, [r3, #16]
 8007032:	693a      	ldr	r2, [r7, #16]
 8007034:	0151      	lsls	r1, r2, #5
 8007036:	697a      	ldr	r2, [r7, #20]
 8007038:	440a      	add	r2, r1
 800703a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800703e:	0cdb      	lsrs	r3, r3, #19
 8007040:	04db      	lsls	r3, r3, #19
 8007042:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007044:	693b      	ldr	r3, [r7, #16]
 8007046:	015a      	lsls	r2, r3, #5
 8007048:	697b      	ldr	r3, [r7, #20]
 800704a:	4413      	add	r3, r2
 800704c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007050:	691b      	ldr	r3, [r3, #16]
 8007052:	693a      	ldr	r2, [r7, #16]
 8007054:	0151      	lsls	r1, r2, #5
 8007056:	697a      	ldr	r2, [r7, #20]
 8007058:	440a      	add	r2, r1
 800705a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800705e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007062:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007066:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8007068:	68bb      	ldr	r3, [r7, #8]
 800706a:	699a      	ldr	r2, [r3, #24]
 800706c:	68bb      	ldr	r3, [r7, #8]
 800706e:	68db      	ldr	r3, [r3, #12]
 8007070:	429a      	cmp	r2, r3
 8007072:	d903      	bls.n	800707c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8007074:	68bb      	ldr	r3, [r7, #8]
 8007076:	68da      	ldr	r2, [r3, #12]
 8007078:	68bb      	ldr	r3, [r7, #8]
 800707a:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800707c:	693b      	ldr	r3, [r7, #16]
 800707e:	015a      	lsls	r2, r3, #5
 8007080:	697b      	ldr	r3, [r7, #20]
 8007082:	4413      	add	r3, r2
 8007084:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007088:	691b      	ldr	r3, [r3, #16]
 800708a:	693a      	ldr	r2, [r7, #16]
 800708c:	0151      	lsls	r1, r2, #5
 800708e:	697a      	ldr	r2, [r7, #20]
 8007090:	440a      	add	r2, r1
 8007092:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007096:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800709a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800709c:	693b      	ldr	r3, [r7, #16]
 800709e:	015a      	lsls	r2, r3, #5
 80070a0:	697b      	ldr	r3, [r7, #20]
 80070a2:	4413      	add	r3, r2
 80070a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070a8:	691a      	ldr	r2, [r3, #16]
 80070aa:	68bb      	ldr	r3, [r7, #8]
 80070ac:	699b      	ldr	r3, [r3, #24]
 80070ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80070b2:	6939      	ldr	r1, [r7, #16]
 80070b4:	0148      	lsls	r0, r1, #5
 80070b6:	6979      	ldr	r1, [r7, #20]
 80070b8:	4401      	add	r1, r0
 80070ba:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80070be:	4313      	orrs	r3, r2
 80070c0:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80070c2:	79fb      	ldrb	r3, [r7, #7]
 80070c4:	2b01      	cmp	r3, #1
 80070c6:	d11e      	bne.n	8007106 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80070c8:	68bb      	ldr	r3, [r7, #8]
 80070ca:	695b      	ldr	r3, [r3, #20]
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d009      	beq.n	80070e4 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80070d0:	693b      	ldr	r3, [r7, #16]
 80070d2:	015a      	lsls	r2, r3, #5
 80070d4:	697b      	ldr	r3, [r7, #20]
 80070d6:	4413      	add	r3, r2
 80070d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070dc:	461a      	mov	r2, r3
 80070de:	68bb      	ldr	r3, [r7, #8]
 80070e0:	695b      	ldr	r3, [r3, #20]
 80070e2:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80070e4:	693b      	ldr	r3, [r7, #16]
 80070e6:	015a      	lsls	r2, r3, #5
 80070e8:	697b      	ldr	r3, [r7, #20]
 80070ea:	4413      	add	r3, r2
 80070ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	693a      	ldr	r2, [r7, #16]
 80070f4:	0151      	lsls	r1, r2, #5
 80070f6:	697a      	ldr	r2, [r7, #20]
 80070f8:	440a      	add	r2, r1
 80070fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80070fe:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007102:	6013      	str	r3, [r2, #0]
 8007104:	e097      	b.n	8007236 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007106:	693b      	ldr	r3, [r7, #16]
 8007108:	015a      	lsls	r2, r3, #5
 800710a:	697b      	ldr	r3, [r7, #20]
 800710c:	4413      	add	r3, r2
 800710e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	693a      	ldr	r2, [r7, #16]
 8007116:	0151      	lsls	r1, r2, #5
 8007118:	697a      	ldr	r2, [r7, #20]
 800711a:	440a      	add	r2, r1
 800711c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007120:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007124:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8007126:	68bb      	ldr	r3, [r7, #8]
 8007128:	699b      	ldr	r3, [r3, #24]
 800712a:	2b00      	cmp	r3, #0
 800712c:	f000 8083 	beq.w	8007236 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007130:	697b      	ldr	r3, [r7, #20]
 8007132:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007136:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007138:	68bb      	ldr	r3, [r7, #8]
 800713a:	781b      	ldrb	r3, [r3, #0]
 800713c:	f003 030f 	and.w	r3, r3, #15
 8007140:	2101      	movs	r1, #1
 8007142:	fa01 f303 	lsl.w	r3, r1, r3
 8007146:	6979      	ldr	r1, [r7, #20]
 8007148:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800714c:	4313      	orrs	r3, r2
 800714e:	634b      	str	r3, [r1, #52]	; 0x34
 8007150:	e071      	b.n	8007236 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007152:	693b      	ldr	r3, [r7, #16]
 8007154:	015a      	lsls	r2, r3, #5
 8007156:	697b      	ldr	r3, [r7, #20]
 8007158:	4413      	add	r3, r2
 800715a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800715e:	691b      	ldr	r3, [r3, #16]
 8007160:	693a      	ldr	r2, [r7, #16]
 8007162:	0151      	lsls	r1, r2, #5
 8007164:	697a      	ldr	r2, [r7, #20]
 8007166:	440a      	add	r2, r1
 8007168:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800716c:	0cdb      	lsrs	r3, r3, #19
 800716e:	04db      	lsls	r3, r3, #19
 8007170:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007172:	693b      	ldr	r3, [r7, #16]
 8007174:	015a      	lsls	r2, r3, #5
 8007176:	697b      	ldr	r3, [r7, #20]
 8007178:	4413      	add	r3, r2
 800717a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800717e:	691b      	ldr	r3, [r3, #16]
 8007180:	693a      	ldr	r2, [r7, #16]
 8007182:	0151      	lsls	r1, r2, #5
 8007184:	697a      	ldr	r2, [r7, #20]
 8007186:	440a      	add	r2, r1
 8007188:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800718c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007190:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007194:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8007196:	68bb      	ldr	r3, [r7, #8]
 8007198:	699b      	ldr	r3, [r3, #24]
 800719a:	2b00      	cmp	r3, #0
 800719c:	d003      	beq.n	80071a6 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800719e:	68bb      	ldr	r3, [r7, #8]
 80071a0:	68da      	ldr	r2, [r3, #12]
 80071a2:	68bb      	ldr	r3, [r7, #8]
 80071a4:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 80071a6:	68bb      	ldr	r3, [r7, #8]
 80071a8:	68da      	ldr	r2, [r3, #12]
 80071aa:	68bb      	ldr	r3, [r7, #8]
 80071ac:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80071ae:	693b      	ldr	r3, [r7, #16]
 80071b0:	015a      	lsls	r2, r3, #5
 80071b2:	697b      	ldr	r3, [r7, #20]
 80071b4:	4413      	add	r3, r2
 80071b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071ba:	691b      	ldr	r3, [r3, #16]
 80071bc:	693a      	ldr	r2, [r7, #16]
 80071be:	0151      	lsls	r1, r2, #5
 80071c0:	697a      	ldr	r2, [r7, #20]
 80071c2:	440a      	add	r2, r1
 80071c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80071c8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80071cc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80071ce:	693b      	ldr	r3, [r7, #16]
 80071d0:	015a      	lsls	r2, r3, #5
 80071d2:	697b      	ldr	r3, [r7, #20]
 80071d4:	4413      	add	r3, r2
 80071d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071da:	691a      	ldr	r2, [r3, #16]
 80071dc:	68bb      	ldr	r3, [r7, #8]
 80071de:	69db      	ldr	r3, [r3, #28]
 80071e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80071e4:	6939      	ldr	r1, [r7, #16]
 80071e6:	0148      	lsls	r0, r1, #5
 80071e8:	6979      	ldr	r1, [r7, #20]
 80071ea:	4401      	add	r1, r0
 80071ec:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80071f0:	4313      	orrs	r3, r2
 80071f2:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80071f4:	79fb      	ldrb	r3, [r7, #7]
 80071f6:	2b01      	cmp	r3, #1
 80071f8:	d10d      	bne.n	8007216 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80071fa:	68bb      	ldr	r3, [r7, #8]
 80071fc:	691b      	ldr	r3, [r3, #16]
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d009      	beq.n	8007216 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8007202:	68bb      	ldr	r3, [r7, #8]
 8007204:	6919      	ldr	r1, [r3, #16]
 8007206:	693b      	ldr	r3, [r7, #16]
 8007208:	015a      	lsls	r2, r3, #5
 800720a:	697b      	ldr	r3, [r7, #20]
 800720c:	4413      	add	r3, r2
 800720e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007212:	460a      	mov	r2, r1
 8007214:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007216:	693b      	ldr	r3, [r7, #16]
 8007218:	015a      	lsls	r2, r3, #5
 800721a:	697b      	ldr	r3, [r7, #20]
 800721c:	4413      	add	r3, r2
 800721e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	693a      	ldr	r2, [r7, #16]
 8007226:	0151      	lsls	r1, r2, #5
 8007228:	697a      	ldr	r2, [r7, #20]
 800722a:	440a      	add	r2, r1
 800722c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007230:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007234:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007236:	2300      	movs	r3, #0
}
 8007238:	4618      	mov	r0, r3
 800723a:	371c      	adds	r7, #28
 800723c:	46bd      	mov	sp, r7
 800723e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007242:	4770      	bx	lr

08007244 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007244:	b480      	push	{r7}
 8007246:	b087      	sub	sp, #28
 8007248:	af00      	add	r7, sp, #0
 800724a:	6078      	str	r0, [r7, #4]
 800724c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800724e:	2300      	movs	r3, #0
 8007250:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8007252:	2300      	movs	r3, #0
 8007254:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800725a:	683b      	ldr	r3, [r7, #0]
 800725c:	785b      	ldrb	r3, [r3, #1]
 800725e:	2b01      	cmp	r3, #1
 8007260:	d14a      	bne.n	80072f8 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007262:	683b      	ldr	r3, [r7, #0]
 8007264:	781b      	ldrb	r3, [r3, #0]
 8007266:	015a      	lsls	r2, r3, #5
 8007268:	693b      	ldr	r3, [r7, #16]
 800726a:	4413      	add	r3, r2
 800726c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007276:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800727a:	f040 8086 	bne.w	800738a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800727e:	683b      	ldr	r3, [r7, #0]
 8007280:	781b      	ldrb	r3, [r3, #0]
 8007282:	015a      	lsls	r2, r3, #5
 8007284:	693b      	ldr	r3, [r7, #16]
 8007286:	4413      	add	r3, r2
 8007288:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	683a      	ldr	r2, [r7, #0]
 8007290:	7812      	ldrb	r2, [r2, #0]
 8007292:	0151      	lsls	r1, r2, #5
 8007294:	693a      	ldr	r2, [r7, #16]
 8007296:	440a      	add	r2, r1
 8007298:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800729c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80072a0:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80072a2:	683b      	ldr	r3, [r7, #0]
 80072a4:	781b      	ldrb	r3, [r3, #0]
 80072a6:	015a      	lsls	r2, r3, #5
 80072a8:	693b      	ldr	r3, [r7, #16]
 80072aa:	4413      	add	r3, r2
 80072ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	683a      	ldr	r2, [r7, #0]
 80072b4:	7812      	ldrb	r2, [r2, #0]
 80072b6:	0151      	lsls	r1, r2, #5
 80072b8:	693a      	ldr	r2, [r7, #16]
 80072ba:	440a      	add	r2, r1
 80072bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80072c0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80072c4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	3301      	adds	r3, #1
 80072ca:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	f242 7210 	movw	r2, #10000	; 0x2710
 80072d2:	4293      	cmp	r3, r2
 80072d4:	d902      	bls.n	80072dc <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80072d6:	2301      	movs	r3, #1
 80072d8:	75fb      	strb	r3, [r7, #23]
          break;
 80072da:	e056      	b.n	800738a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80072dc:	683b      	ldr	r3, [r7, #0]
 80072de:	781b      	ldrb	r3, [r3, #0]
 80072e0:	015a      	lsls	r2, r3, #5
 80072e2:	693b      	ldr	r3, [r7, #16]
 80072e4:	4413      	add	r3, r2
 80072e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80072f0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80072f4:	d0e7      	beq.n	80072c6 <USB_EPStopXfer+0x82>
 80072f6:	e048      	b.n	800738a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80072f8:	683b      	ldr	r3, [r7, #0]
 80072fa:	781b      	ldrb	r3, [r3, #0]
 80072fc:	015a      	lsls	r2, r3, #5
 80072fe:	693b      	ldr	r3, [r7, #16]
 8007300:	4413      	add	r3, r2
 8007302:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800730c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007310:	d13b      	bne.n	800738a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8007312:	683b      	ldr	r3, [r7, #0]
 8007314:	781b      	ldrb	r3, [r3, #0]
 8007316:	015a      	lsls	r2, r3, #5
 8007318:	693b      	ldr	r3, [r7, #16]
 800731a:	4413      	add	r3, r2
 800731c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	683a      	ldr	r2, [r7, #0]
 8007324:	7812      	ldrb	r2, [r2, #0]
 8007326:	0151      	lsls	r1, r2, #5
 8007328:	693a      	ldr	r2, [r7, #16]
 800732a:	440a      	add	r2, r1
 800732c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007330:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007334:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8007336:	683b      	ldr	r3, [r7, #0]
 8007338:	781b      	ldrb	r3, [r3, #0]
 800733a:	015a      	lsls	r2, r3, #5
 800733c:	693b      	ldr	r3, [r7, #16]
 800733e:	4413      	add	r3, r2
 8007340:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	683a      	ldr	r2, [r7, #0]
 8007348:	7812      	ldrb	r2, [r2, #0]
 800734a:	0151      	lsls	r1, r2, #5
 800734c:	693a      	ldr	r2, [r7, #16]
 800734e:	440a      	add	r2, r1
 8007350:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007354:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007358:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	3301      	adds	r3, #1
 800735e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	f242 7210 	movw	r2, #10000	; 0x2710
 8007366:	4293      	cmp	r3, r2
 8007368:	d902      	bls.n	8007370 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800736a:	2301      	movs	r3, #1
 800736c:	75fb      	strb	r3, [r7, #23]
          break;
 800736e:	e00c      	b.n	800738a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8007370:	683b      	ldr	r3, [r7, #0]
 8007372:	781b      	ldrb	r3, [r3, #0]
 8007374:	015a      	lsls	r2, r3, #5
 8007376:	693b      	ldr	r3, [r7, #16]
 8007378:	4413      	add	r3, r2
 800737a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007384:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007388:	d0e7      	beq.n	800735a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800738a:	7dfb      	ldrb	r3, [r7, #23]
}
 800738c:	4618      	mov	r0, r3
 800738e:	371c      	adds	r7, #28
 8007390:	46bd      	mov	sp, r7
 8007392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007396:	4770      	bx	lr

08007398 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007398:	b480      	push	{r7}
 800739a:	b089      	sub	sp, #36	; 0x24
 800739c:	af00      	add	r7, sp, #0
 800739e:	60f8      	str	r0, [r7, #12]
 80073a0:	60b9      	str	r1, [r7, #8]
 80073a2:	4611      	mov	r1, r2
 80073a4:	461a      	mov	r2, r3
 80073a6:	460b      	mov	r3, r1
 80073a8:	71fb      	strb	r3, [r7, #7]
 80073aa:	4613      	mov	r3, r2
 80073ac:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80073b2:	68bb      	ldr	r3, [r7, #8]
 80073b4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80073b6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d123      	bne.n	8007406 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80073be:	88bb      	ldrh	r3, [r7, #4]
 80073c0:	3303      	adds	r3, #3
 80073c2:	089b      	lsrs	r3, r3, #2
 80073c4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80073c6:	2300      	movs	r3, #0
 80073c8:	61bb      	str	r3, [r7, #24]
 80073ca:	e018      	b.n	80073fe <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80073cc:	79fb      	ldrb	r3, [r7, #7]
 80073ce:	031a      	lsls	r2, r3, #12
 80073d0:	697b      	ldr	r3, [r7, #20]
 80073d2:	4413      	add	r3, r2
 80073d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80073d8:	461a      	mov	r2, r3
 80073da:	69fb      	ldr	r3, [r7, #28]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	6013      	str	r3, [r2, #0]
      pSrc++;
 80073e0:	69fb      	ldr	r3, [r7, #28]
 80073e2:	3301      	adds	r3, #1
 80073e4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80073e6:	69fb      	ldr	r3, [r7, #28]
 80073e8:	3301      	adds	r3, #1
 80073ea:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80073ec:	69fb      	ldr	r3, [r7, #28]
 80073ee:	3301      	adds	r3, #1
 80073f0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80073f2:	69fb      	ldr	r3, [r7, #28]
 80073f4:	3301      	adds	r3, #1
 80073f6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80073f8:	69bb      	ldr	r3, [r7, #24]
 80073fa:	3301      	adds	r3, #1
 80073fc:	61bb      	str	r3, [r7, #24]
 80073fe:	69ba      	ldr	r2, [r7, #24]
 8007400:	693b      	ldr	r3, [r7, #16]
 8007402:	429a      	cmp	r2, r3
 8007404:	d3e2      	bcc.n	80073cc <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8007406:	2300      	movs	r3, #0
}
 8007408:	4618      	mov	r0, r3
 800740a:	3724      	adds	r7, #36	; 0x24
 800740c:	46bd      	mov	sp, r7
 800740e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007412:	4770      	bx	lr

08007414 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007414:	b480      	push	{r7}
 8007416:	b08b      	sub	sp, #44	; 0x2c
 8007418:	af00      	add	r7, sp, #0
 800741a:	60f8      	str	r0, [r7, #12]
 800741c:	60b9      	str	r1, [r7, #8]
 800741e:	4613      	mov	r3, r2
 8007420:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8007426:	68bb      	ldr	r3, [r7, #8]
 8007428:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800742a:	88fb      	ldrh	r3, [r7, #6]
 800742c:	089b      	lsrs	r3, r3, #2
 800742e:	b29b      	uxth	r3, r3
 8007430:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8007432:	88fb      	ldrh	r3, [r7, #6]
 8007434:	f003 0303 	and.w	r3, r3, #3
 8007438:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800743a:	2300      	movs	r3, #0
 800743c:	623b      	str	r3, [r7, #32]
 800743e:	e014      	b.n	800746a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007440:	69bb      	ldr	r3, [r7, #24]
 8007442:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007446:	681a      	ldr	r2, [r3, #0]
 8007448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800744a:	601a      	str	r2, [r3, #0]
    pDest++;
 800744c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800744e:	3301      	adds	r3, #1
 8007450:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007454:	3301      	adds	r3, #1
 8007456:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800745a:	3301      	adds	r3, #1
 800745c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800745e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007460:	3301      	adds	r3, #1
 8007462:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8007464:	6a3b      	ldr	r3, [r7, #32]
 8007466:	3301      	adds	r3, #1
 8007468:	623b      	str	r3, [r7, #32]
 800746a:	6a3a      	ldr	r2, [r7, #32]
 800746c:	697b      	ldr	r3, [r7, #20]
 800746e:	429a      	cmp	r2, r3
 8007470:	d3e6      	bcc.n	8007440 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8007472:	8bfb      	ldrh	r3, [r7, #30]
 8007474:	2b00      	cmp	r3, #0
 8007476:	d01e      	beq.n	80074b6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8007478:	2300      	movs	r3, #0
 800747a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800747c:	69bb      	ldr	r3, [r7, #24]
 800747e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007482:	461a      	mov	r2, r3
 8007484:	f107 0310 	add.w	r3, r7, #16
 8007488:	6812      	ldr	r2, [r2, #0]
 800748a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800748c:	693a      	ldr	r2, [r7, #16]
 800748e:	6a3b      	ldr	r3, [r7, #32]
 8007490:	b2db      	uxtb	r3, r3
 8007492:	00db      	lsls	r3, r3, #3
 8007494:	fa22 f303 	lsr.w	r3, r2, r3
 8007498:	b2da      	uxtb	r2, r3
 800749a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800749c:	701a      	strb	r2, [r3, #0]
      i++;
 800749e:	6a3b      	ldr	r3, [r7, #32]
 80074a0:	3301      	adds	r3, #1
 80074a2:	623b      	str	r3, [r7, #32]
      pDest++;
 80074a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074a6:	3301      	adds	r3, #1
 80074a8:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80074aa:	8bfb      	ldrh	r3, [r7, #30]
 80074ac:	3b01      	subs	r3, #1
 80074ae:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80074b0:	8bfb      	ldrh	r3, [r7, #30]
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d1ea      	bne.n	800748c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80074b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80074b8:	4618      	mov	r0, r3
 80074ba:	372c      	adds	r7, #44	; 0x2c
 80074bc:	46bd      	mov	sp, r7
 80074be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c2:	4770      	bx	lr

080074c4 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80074c4:	b480      	push	{r7}
 80074c6:	b085      	sub	sp, #20
 80074c8:	af00      	add	r7, sp, #0
 80074ca:	6078      	str	r0, [r7, #4]
 80074cc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80074d2:	683b      	ldr	r3, [r7, #0]
 80074d4:	781b      	ldrb	r3, [r3, #0]
 80074d6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80074d8:	683b      	ldr	r3, [r7, #0]
 80074da:	785b      	ldrb	r3, [r3, #1]
 80074dc:	2b01      	cmp	r3, #1
 80074de:	d12c      	bne.n	800753a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80074e0:	68bb      	ldr	r3, [r7, #8]
 80074e2:	015a      	lsls	r2, r3, #5
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	4413      	add	r3, r2
 80074e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	db12      	blt.n	8007518 <USB_EPSetStall+0x54>
 80074f2:	68bb      	ldr	r3, [r7, #8]
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d00f      	beq.n	8007518 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80074f8:	68bb      	ldr	r3, [r7, #8]
 80074fa:	015a      	lsls	r2, r3, #5
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	4413      	add	r3, r2
 8007500:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	68ba      	ldr	r2, [r7, #8]
 8007508:	0151      	lsls	r1, r2, #5
 800750a:	68fa      	ldr	r2, [r7, #12]
 800750c:	440a      	add	r2, r1
 800750e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007512:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007516:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8007518:	68bb      	ldr	r3, [r7, #8]
 800751a:	015a      	lsls	r2, r3, #5
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	4413      	add	r3, r2
 8007520:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	68ba      	ldr	r2, [r7, #8]
 8007528:	0151      	lsls	r1, r2, #5
 800752a:	68fa      	ldr	r2, [r7, #12]
 800752c:	440a      	add	r2, r1
 800752e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007532:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007536:	6013      	str	r3, [r2, #0]
 8007538:	e02b      	b.n	8007592 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800753a:	68bb      	ldr	r3, [r7, #8]
 800753c:	015a      	lsls	r2, r3, #5
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	4413      	add	r3, r2
 8007542:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	2b00      	cmp	r3, #0
 800754a:	db12      	blt.n	8007572 <USB_EPSetStall+0xae>
 800754c:	68bb      	ldr	r3, [r7, #8]
 800754e:	2b00      	cmp	r3, #0
 8007550:	d00f      	beq.n	8007572 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8007552:	68bb      	ldr	r3, [r7, #8]
 8007554:	015a      	lsls	r2, r3, #5
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	4413      	add	r3, r2
 800755a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	68ba      	ldr	r2, [r7, #8]
 8007562:	0151      	lsls	r1, r2, #5
 8007564:	68fa      	ldr	r2, [r7, #12]
 8007566:	440a      	add	r2, r1
 8007568:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800756c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007570:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8007572:	68bb      	ldr	r3, [r7, #8]
 8007574:	015a      	lsls	r2, r3, #5
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	4413      	add	r3, r2
 800757a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	68ba      	ldr	r2, [r7, #8]
 8007582:	0151      	lsls	r1, r2, #5
 8007584:	68fa      	ldr	r2, [r7, #12]
 8007586:	440a      	add	r2, r1
 8007588:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800758c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007590:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007592:	2300      	movs	r3, #0
}
 8007594:	4618      	mov	r0, r3
 8007596:	3714      	adds	r7, #20
 8007598:	46bd      	mov	sp, r7
 800759a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800759e:	4770      	bx	lr

080075a0 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80075a0:	b480      	push	{r7}
 80075a2:	b085      	sub	sp, #20
 80075a4:	af00      	add	r7, sp, #0
 80075a6:	6078      	str	r0, [r7, #4]
 80075a8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80075ae:	683b      	ldr	r3, [r7, #0]
 80075b0:	781b      	ldrb	r3, [r3, #0]
 80075b2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80075b4:	683b      	ldr	r3, [r7, #0]
 80075b6:	785b      	ldrb	r3, [r3, #1]
 80075b8:	2b01      	cmp	r3, #1
 80075ba:	d128      	bne.n	800760e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80075bc:	68bb      	ldr	r3, [r7, #8]
 80075be:	015a      	lsls	r2, r3, #5
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	4413      	add	r3, r2
 80075c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	68ba      	ldr	r2, [r7, #8]
 80075cc:	0151      	lsls	r1, r2, #5
 80075ce:	68fa      	ldr	r2, [r7, #12]
 80075d0:	440a      	add	r2, r1
 80075d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80075d6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80075da:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80075dc:	683b      	ldr	r3, [r7, #0]
 80075de:	791b      	ldrb	r3, [r3, #4]
 80075e0:	2b03      	cmp	r3, #3
 80075e2:	d003      	beq.n	80075ec <USB_EPClearStall+0x4c>
 80075e4:	683b      	ldr	r3, [r7, #0]
 80075e6:	791b      	ldrb	r3, [r3, #4]
 80075e8:	2b02      	cmp	r3, #2
 80075ea:	d138      	bne.n	800765e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80075ec:	68bb      	ldr	r3, [r7, #8]
 80075ee:	015a      	lsls	r2, r3, #5
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	4413      	add	r3, r2
 80075f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	68ba      	ldr	r2, [r7, #8]
 80075fc:	0151      	lsls	r1, r2, #5
 80075fe:	68fa      	ldr	r2, [r7, #12]
 8007600:	440a      	add	r2, r1
 8007602:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007606:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800760a:	6013      	str	r3, [r2, #0]
 800760c:	e027      	b.n	800765e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800760e:	68bb      	ldr	r3, [r7, #8]
 8007610:	015a      	lsls	r2, r3, #5
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	4413      	add	r3, r2
 8007616:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	68ba      	ldr	r2, [r7, #8]
 800761e:	0151      	lsls	r1, r2, #5
 8007620:	68fa      	ldr	r2, [r7, #12]
 8007622:	440a      	add	r2, r1
 8007624:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007628:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800762c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800762e:	683b      	ldr	r3, [r7, #0]
 8007630:	791b      	ldrb	r3, [r3, #4]
 8007632:	2b03      	cmp	r3, #3
 8007634:	d003      	beq.n	800763e <USB_EPClearStall+0x9e>
 8007636:	683b      	ldr	r3, [r7, #0]
 8007638:	791b      	ldrb	r3, [r3, #4]
 800763a:	2b02      	cmp	r3, #2
 800763c:	d10f      	bne.n	800765e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800763e:	68bb      	ldr	r3, [r7, #8]
 8007640:	015a      	lsls	r2, r3, #5
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	4413      	add	r3, r2
 8007646:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	68ba      	ldr	r2, [r7, #8]
 800764e:	0151      	lsls	r1, r2, #5
 8007650:	68fa      	ldr	r2, [r7, #12]
 8007652:	440a      	add	r2, r1
 8007654:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007658:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800765c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800765e:	2300      	movs	r3, #0
}
 8007660:	4618      	mov	r0, r3
 8007662:	3714      	adds	r7, #20
 8007664:	46bd      	mov	sp, r7
 8007666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800766a:	4770      	bx	lr

0800766c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800766c:	b480      	push	{r7}
 800766e:	b085      	sub	sp, #20
 8007670:	af00      	add	r7, sp, #0
 8007672:	6078      	str	r0, [r7, #4]
 8007674:	460b      	mov	r3, r1
 8007676:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	68fa      	ldr	r2, [r7, #12]
 8007686:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800768a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800768e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007696:	681a      	ldr	r2, [r3, #0]
 8007698:	78fb      	ldrb	r3, [r7, #3]
 800769a:	011b      	lsls	r3, r3, #4
 800769c:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80076a0:	68f9      	ldr	r1, [r7, #12]
 80076a2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80076a6:	4313      	orrs	r3, r2
 80076a8:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80076aa:	2300      	movs	r3, #0
}
 80076ac:	4618      	mov	r0, r3
 80076ae:	3714      	adds	r7, #20
 80076b0:	46bd      	mov	sp, r7
 80076b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b6:	4770      	bx	lr

080076b8 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80076b8:	b480      	push	{r7}
 80076ba:	b085      	sub	sp, #20
 80076bc:	af00      	add	r7, sp, #0
 80076be:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	68fa      	ldr	r2, [r7, #12]
 80076ce:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80076d2:	f023 0303 	bic.w	r3, r3, #3
 80076d6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80076de:	685b      	ldr	r3, [r3, #4]
 80076e0:	68fa      	ldr	r2, [r7, #12]
 80076e2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80076e6:	f023 0302 	bic.w	r3, r3, #2
 80076ea:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80076ec:	2300      	movs	r3, #0
}
 80076ee:	4618      	mov	r0, r3
 80076f0:	3714      	adds	r7, #20
 80076f2:	46bd      	mov	sp, r7
 80076f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f8:	4770      	bx	lr

080076fa <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80076fa:	b480      	push	{r7}
 80076fc:	b085      	sub	sp, #20
 80076fe:	af00      	add	r7, sp, #0
 8007700:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	68fa      	ldr	r2, [r7, #12]
 8007710:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007714:	f023 0303 	bic.w	r3, r3, #3
 8007718:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007720:	685b      	ldr	r3, [r3, #4]
 8007722:	68fa      	ldr	r2, [r7, #12]
 8007724:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007728:	f043 0302 	orr.w	r3, r3, #2
 800772c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800772e:	2300      	movs	r3, #0
}
 8007730:	4618      	mov	r0, r3
 8007732:	3714      	adds	r7, #20
 8007734:	46bd      	mov	sp, r7
 8007736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800773a:	4770      	bx	lr

0800773c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800773c:	b480      	push	{r7}
 800773e:	b085      	sub	sp, #20
 8007740:	af00      	add	r7, sp, #0
 8007742:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	695b      	ldr	r3, [r3, #20]
 8007748:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	699b      	ldr	r3, [r3, #24]
 800774e:	68fa      	ldr	r2, [r7, #12]
 8007750:	4013      	ands	r3, r2
 8007752:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007754:	68fb      	ldr	r3, [r7, #12]
}
 8007756:	4618      	mov	r0, r3
 8007758:	3714      	adds	r7, #20
 800775a:	46bd      	mov	sp, r7
 800775c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007760:	4770      	bx	lr

08007762 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007762:	b480      	push	{r7}
 8007764:	b085      	sub	sp, #20
 8007766:	af00      	add	r7, sp, #0
 8007768:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007774:	699b      	ldr	r3, [r3, #24]
 8007776:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800777e:	69db      	ldr	r3, [r3, #28]
 8007780:	68ba      	ldr	r2, [r7, #8]
 8007782:	4013      	ands	r3, r2
 8007784:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8007786:	68bb      	ldr	r3, [r7, #8]
 8007788:	0c1b      	lsrs	r3, r3, #16
}
 800778a:	4618      	mov	r0, r3
 800778c:	3714      	adds	r7, #20
 800778e:	46bd      	mov	sp, r7
 8007790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007794:	4770      	bx	lr

08007796 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007796:	b480      	push	{r7}
 8007798:	b085      	sub	sp, #20
 800779a:	af00      	add	r7, sp, #0
 800779c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80077a8:	699b      	ldr	r3, [r3, #24]
 80077aa:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80077b2:	69db      	ldr	r3, [r3, #28]
 80077b4:	68ba      	ldr	r2, [r7, #8]
 80077b6:	4013      	ands	r3, r2
 80077b8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80077ba:	68bb      	ldr	r3, [r7, #8]
 80077bc:	b29b      	uxth	r3, r3
}
 80077be:	4618      	mov	r0, r3
 80077c0:	3714      	adds	r7, #20
 80077c2:	46bd      	mov	sp, r7
 80077c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c8:	4770      	bx	lr

080077ca <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80077ca:	b480      	push	{r7}
 80077cc:	b085      	sub	sp, #20
 80077ce:	af00      	add	r7, sp, #0
 80077d0:	6078      	str	r0, [r7, #4]
 80077d2:	460b      	mov	r3, r1
 80077d4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80077da:	78fb      	ldrb	r3, [r7, #3]
 80077dc:	015a      	lsls	r2, r3, #5
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	4413      	add	r3, r2
 80077e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077e6:	689b      	ldr	r3, [r3, #8]
 80077e8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80077f0:	695b      	ldr	r3, [r3, #20]
 80077f2:	68ba      	ldr	r2, [r7, #8]
 80077f4:	4013      	ands	r3, r2
 80077f6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80077f8:	68bb      	ldr	r3, [r7, #8]
}
 80077fa:	4618      	mov	r0, r3
 80077fc:	3714      	adds	r7, #20
 80077fe:	46bd      	mov	sp, r7
 8007800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007804:	4770      	bx	lr

08007806 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007806:	b480      	push	{r7}
 8007808:	b087      	sub	sp, #28
 800780a:	af00      	add	r7, sp, #0
 800780c:	6078      	str	r0, [r7, #4]
 800780e:	460b      	mov	r3, r1
 8007810:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8007816:	697b      	ldr	r3, [r7, #20]
 8007818:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800781c:	691b      	ldr	r3, [r3, #16]
 800781e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8007820:	697b      	ldr	r3, [r7, #20]
 8007822:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007826:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007828:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800782a:	78fb      	ldrb	r3, [r7, #3]
 800782c:	f003 030f 	and.w	r3, r3, #15
 8007830:	68fa      	ldr	r2, [r7, #12]
 8007832:	fa22 f303 	lsr.w	r3, r2, r3
 8007836:	01db      	lsls	r3, r3, #7
 8007838:	b2db      	uxtb	r3, r3
 800783a:	693a      	ldr	r2, [r7, #16]
 800783c:	4313      	orrs	r3, r2
 800783e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8007840:	78fb      	ldrb	r3, [r7, #3]
 8007842:	015a      	lsls	r2, r3, #5
 8007844:	697b      	ldr	r3, [r7, #20]
 8007846:	4413      	add	r3, r2
 8007848:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800784c:	689b      	ldr	r3, [r3, #8]
 800784e:	693a      	ldr	r2, [r7, #16]
 8007850:	4013      	ands	r3, r2
 8007852:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007854:	68bb      	ldr	r3, [r7, #8]
}
 8007856:	4618      	mov	r0, r3
 8007858:	371c      	adds	r7, #28
 800785a:	46bd      	mov	sp, r7
 800785c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007860:	4770      	bx	lr

08007862 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007862:	b480      	push	{r7}
 8007864:	b083      	sub	sp, #12
 8007866:	af00      	add	r7, sp, #0
 8007868:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	695b      	ldr	r3, [r3, #20]
 800786e:	f003 0301 	and.w	r3, r3, #1
}
 8007872:	4618      	mov	r0, r3
 8007874:	370c      	adds	r7, #12
 8007876:	46bd      	mov	sp, r7
 8007878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800787c:	4770      	bx	lr

0800787e <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800787e:	b480      	push	{r7}
 8007880:	b085      	sub	sp, #20
 8007882:	af00      	add	r7, sp, #0
 8007884:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	68fa      	ldr	r2, [r7, #12]
 8007894:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007898:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800789c:	f023 0307 	bic.w	r3, r3, #7
 80078a0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80078a8:	685b      	ldr	r3, [r3, #4]
 80078aa:	68fa      	ldr	r2, [r7, #12]
 80078ac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80078b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80078b4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80078b6:	2300      	movs	r3, #0
}
 80078b8:	4618      	mov	r0, r3
 80078ba:	3714      	adds	r7, #20
 80078bc:	46bd      	mov	sp, r7
 80078be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c2:	4770      	bx	lr

080078c4 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80078c4:	b480      	push	{r7}
 80078c6:	b087      	sub	sp, #28
 80078c8:	af00      	add	r7, sp, #0
 80078ca:	60f8      	str	r0, [r7, #12]
 80078cc:	460b      	mov	r3, r1
 80078ce:	607a      	str	r2, [r7, #4]
 80078d0:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	333c      	adds	r3, #60	; 0x3c
 80078da:	3304      	adds	r3, #4
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80078e0:	693b      	ldr	r3, [r7, #16]
 80078e2:	4a26      	ldr	r2, [pc, #152]	; (800797c <USB_EP0_OutStart+0xb8>)
 80078e4:	4293      	cmp	r3, r2
 80078e6:	d90a      	bls.n	80078fe <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80078e8:	697b      	ldr	r3, [r7, #20]
 80078ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80078f4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80078f8:	d101      	bne.n	80078fe <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80078fa:	2300      	movs	r3, #0
 80078fc:	e037      	b.n	800796e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80078fe:	697b      	ldr	r3, [r7, #20]
 8007900:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007904:	461a      	mov	r2, r3
 8007906:	2300      	movs	r3, #0
 8007908:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800790a:	697b      	ldr	r3, [r7, #20]
 800790c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007910:	691b      	ldr	r3, [r3, #16]
 8007912:	697a      	ldr	r2, [r7, #20]
 8007914:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007918:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800791c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800791e:	697b      	ldr	r3, [r7, #20]
 8007920:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007924:	691b      	ldr	r3, [r3, #16]
 8007926:	697a      	ldr	r2, [r7, #20]
 8007928:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800792c:	f043 0318 	orr.w	r3, r3, #24
 8007930:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8007932:	697b      	ldr	r3, [r7, #20]
 8007934:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007938:	691b      	ldr	r3, [r3, #16]
 800793a:	697a      	ldr	r2, [r7, #20]
 800793c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007940:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8007944:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8007946:	7afb      	ldrb	r3, [r7, #11]
 8007948:	2b01      	cmp	r3, #1
 800794a:	d10f      	bne.n	800796c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800794c:	697b      	ldr	r3, [r7, #20]
 800794e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007952:	461a      	mov	r2, r3
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8007958:	697b      	ldr	r3, [r7, #20]
 800795a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	697a      	ldr	r2, [r7, #20]
 8007962:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007966:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800796a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800796c:	2300      	movs	r3, #0
}
 800796e:	4618      	mov	r0, r3
 8007970:	371c      	adds	r7, #28
 8007972:	46bd      	mov	sp, r7
 8007974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007978:	4770      	bx	lr
 800797a:	bf00      	nop
 800797c:	4f54300a 	.word	0x4f54300a

08007980 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007980:	b480      	push	{r7}
 8007982:	b085      	sub	sp, #20
 8007984:	af00      	add	r7, sp, #0
 8007986:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007988:	2300      	movs	r3, #0
 800798a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	3301      	adds	r3, #1
 8007990:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	4a13      	ldr	r2, [pc, #76]	; (80079e4 <USB_CoreReset+0x64>)
 8007996:	4293      	cmp	r3, r2
 8007998:	d901      	bls.n	800799e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800799a:	2303      	movs	r3, #3
 800799c:	e01b      	b.n	80079d6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	691b      	ldr	r3, [r3, #16]
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	daf2      	bge.n	800798c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80079a6:	2300      	movs	r3, #0
 80079a8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	691b      	ldr	r3, [r3, #16]
 80079ae:	f043 0201 	orr.w	r2, r3, #1
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	3301      	adds	r3, #1
 80079ba:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	4a09      	ldr	r2, [pc, #36]	; (80079e4 <USB_CoreReset+0x64>)
 80079c0:	4293      	cmp	r3, r2
 80079c2:	d901      	bls.n	80079c8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80079c4:	2303      	movs	r3, #3
 80079c6:	e006      	b.n	80079d6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	691b      	ldr	r3, [r3, #16]
 80079cc:	f003 0301 	and.w	r3, r3, #1
 80079d0:	2b01      	cmp	r3, #1
 80079d2:	d0f0      	beq.n	80079b6 <USB_CoreReset+0x36>

  return HAL_OK;
 80079d4:	2300      	movs	r3, #0
}
 80079d6:	4618      	mov	r0, r3
 80079d8:	3714      	adds	r7, #20
 80079da:	46bd      	mov	sp, r7
 80079dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e0:	4770      	bx	lr
 80079e2:	bf00      	nop
 80079e4:	00030d40 	.word	0x00030d40

080079e8 <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80079e8:	b580      	push	{r7, lr}
 80079ea:	b084      	sub	sp, #16
 80079ec:	af00      	add	r7, sp, #0
 80079ee:	6078      	str	r0, [r7, #4]
 80079f0:	460b      	mov	r3, r1
 80079f2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_HID_HandleTypeDef *hhid;

  hhid = (USBD_HID_HandleTypeDef *)USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 80079f4:	2010      	movs	r0, #16
 80079f6:	f002 f929 	bl	8009c4c <USBD_static_malloc>
 80079fa:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d109      	bne.n	8007a16 <USBD_HID_Init+0x2e>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	32b0      	adds	r2, #176	; 0xb0
 8007a0c:	2100      	movs	r1, #0
 8007a0e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8007a12:	2302      	movs	r3, #2
 8007a14:	e048      	b.n	8007aa8 <USBD_HID_Init+0xc0>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hhid;
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	32b0      	adds	r2, #176	; 0xb0
 8007a20:	68f9      	ldr	r1, [r7, #12]
 8007a22:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	32b0      	adds	r2, #176	; 0xb0
 8007a30:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	7c1b      	ldrb	r3, [r3, #16]
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d10d      	bne.n	8007a5e <USBD_HID_Init+0x76>
  {
    pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = HID_HS_BINTERVAL;
 8007a42:	4b1b      	ldr	r3, [pc, #108]	; (8007ab0 <USBD_HID_Init+0xc8>)
 8007a44:	781b      	ldrb	r3, [r3, #0]
 8007a46:	f003 020f 	and.w	r2, r3, #15
 8007a4a:	6879      	ldr	r1, [r7, #4]
 8007a4c:	4613      	mov	r3, r2
 8007a4e:	009b      	lsls	r3, r3, #2
 8007a50:	4413      	add	r3, r2
 8007a52:	009b      	lsls	r3, r3, #2
 8007a54:	440b      	add	r3, r1
 8007a56:	3326      	adds	r3, #38	; 0x26
 8007a58:	2207      	movs	r2, #7
 8007a5a:	801a      	strh	r2, [r3, #0]
 8007a5c:	e00c      	b.n	8007a78 <USBD_HID_Init+0x90>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = HID_FS_BINTERVAL;
 8007a5e:	4b14      	ldr	r3, [pc, #80]	; (8007ab0 <USBD_HID_Init+0xc8>)
 8007a60:	781b      	ldrb	r3, [r3, #0]
 8007a62:	f003 020f 	and.w	r2, r3, #15
 8007a66:	6879      	ldr	r1, [r7, #4]
 8007a68:	4613      	mov	r3, r2
 8007a6a:	009b      	lsls	r3, r3, #2
 8007a6c:	4413      	add	r3, r2
 8007a6e:	009b      	lsls	r3, r3, #2
 8007a70:	440b      	add	r3, r1
 8007a72:	3326      	adds	r3, #38	; 0x26
 8007a74:	220a      	movs	r2, #10
 8007a76:	801a      	strh	r2, [r3, #0]
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, HIDInEpAdd, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 8007a78:	4b0d      	ldr	r3, [pc, #52]	; (8007ab0 <USBD_HID_Init+0xc8>)
 8007a7a:	7819      	ldrb	r1, [r3, #0]
 8007a7c:	2304      	movs	r3, #4
 8007a7e:	2203      	movs	r2, #3
 8007a80:	6878      	ldr	r0, [r7, #4]
 8007a82:	f001 ffd2 	bl	8009a2a <USBD_LL_OpenEP>
  pdev->ep_in[HIDInEpAdd & 0xFU].is_used = 1U;
 8007a86:	4b0a      	ldr	r3, [pc, #40]	; (8007ab0 <USBD_HID_Init+0xc8>)
 8007a88:	781b      	ldrb	r3, [r3, #0]
 8007a8a:	f003 020f 	and.w	r2, r3, #15
 8007a8e:	6879      	ldr	r1, [r7, #4]
 8007a90:	4613      	mov	r3, r2
 8007a92:	009b      	lsls	r3, r3, #2
 8007a94:	4413      	add	r3, r2
 8007a96:	009b      	lsls	r3, r3, #2
 8007a98:	440b      	add	r3, r1
 8007a9a:	3324      	adds	r3, #36	; 0x24
 8007a9c:	2201      	movs	r2, #1
 8007a9e:	801a      	strh	r2, [r3, #0]

  hhid->state = HID_IDLE;
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	2200      	movs	r2, #0
 8007aa4:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 8007aa6:	2300      	movs	r3, #0
}
 8007aa8:	4618      	mov	r0, r3
 8007aaa:	3710      	adds	r7, #16
 8007aac:	46bd      	mov	sp, r7
 8007aae:	bd80      	pop	{r7, pc}
 8007ab0:	2000011b 	.word	0x2000011b

08007ab4 <USBD_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007ab4:	b580      	push	{r7, lr}
 8007ab6:	b082      	sub	sp, #8
 8007ab8:	af00      	add	r7, sp, #0
 8007aba:	6078      	str	r0, [r7, #4]
 8007abc:	460b      	mov	r3, r1
 8007abe:	70fb      	strb	r3, [r7, #3]
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close HID EPs */
  (void)USBD_LL_CloseEP(pdev, HIDInEpAdd);
 8007ac0:	4b1f      	ldr	r3, [pc, #124]	; (8007b40 <USBD_HID_DeInit+0x8c>)
 8007ac2:	781b      	ldrb	r3, [r3, #0]
 8007ac4:	4619      	mov	r1, r3
 8007ac6:	6878      	ldr	r0, [r7, #4]
 8007ac8:	f001 ffd5 	bl	8009a76 <USBD_LL_CloseEP>
  pdev->ep_in[HIDInEpAdd & 0xFU].is_used = 0U;
 8007acc:	4b1c      	ldr	r3, [pc, #112]	; (8007b40 <USBD_HID_DeInit+0x8c>)
 8007ace:	781b      	ldrb	r3, [r3, #0]
 8007ad0:	f003 020f 	and.w	r2, r3, #15
 8007ad4:	6879      	ldr	r1, [r7, #4]
 8007ad6:	4613      	mov	r3, r2
 8007ad8:	009b      	lsls	r3, r3, #2
 8007ada:	4413      	add	r3, r2
 8007adc:	009b      	lsls	r3, r3, #2
 8007ade:	440b      	add	r3, r1
 8007ae0:	3324      	adds	r3, #36	; 0x24
 8007ae2:	2200      	movs	r2, #0
 8007ae4:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = 0U;
 8007ae6:	4b16      	ldr	r3, [pc, #88]	; (8007b40 <USBD_HID_DeInit+0x8c>)
 8007ae8:	781b      	ldrb	r3, [r3, #0]
 8007aea:	f003 020f 	and.w	r2, r3, #15
 8007aee:	6879      	ldr	r1, [r7, #4]
 8007af0:	4613      	mov	r3, r2
 8007af2:	009b      	lsls	r3, r3, #2
 8007af4:	4413      	add	r3, r2
 8007af6:	009b      	lsls	r3, r3, #2
 8007af8:	440b      	add	r3, r1
 8007afa:	3326      	adds	r3, #38	; 0x26
 8007afc:	2200      	movs	r2, #0
 8007afe:	801a      	strh	r2, [r3, #0]

  /* Free allocated memory */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	32b0      	adds	r2, #176	; 0xb0
 8007b0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d011      	beq.n	8007b36 <USBD_HID_DeInit+0x82>
  {
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	32b0      	adds	r2, #176	; 0xb0
 8007b1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b20:	4618      	mov	r0, r3
 8007b22:	f002 f8a1 	bl	8009c68 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	32b0      	adds	r2, #176	; 0xb0
 8007b30:	2100      	movs	r1, #0
 8007b32:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return (uint8_t)USBD_OK;
 8007b36:	2300      	movs	r3, #0
}
 8007b38:	4618      	mov	r0, r3
 8007b3a:	3708      	adds	r7, #8
 8007b3c:	46bd      	mov	sp, r7
 8007b3e:	bd80      	pop	{r7, pc}
 8007b40:	2000011b 	.word	0x2000011b

08007b44 <USBD_HID_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_HID_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007b44:	b580      	push	{r7, lr}
 8007b46:	b086      	sub	sp, #24
 8007b48:	af00      	add	r7, sp, #0
 8007b4a:	6078      	str	r0, [r7, #4]
 8007b4c:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	32b0      	adds	r2, #176	; 0xb0
 8007b58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b5c:	60fb      	str	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 8007b5e:	2300      	movs	r3, #0
 8007b60:	75fb      	strb	r3, [r7, #23]
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 8007b62:	2300      	movs	r3, #0
 8007b64:	817b      	strh	r3, [r7, #10]

  if (hhid == NULL)
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d101      	bne.n	8007b70 <USBD_HID_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 8007b6c:	2303      	movs	r3, #3
 8007b6e:	e0e8      	b.n	8007d42 <USBD_HID_Setup+0x1fe>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007b70:	683b      	ldr	r3, [r7, #0]
 8007b72:	781b      	ldrb	r3, [r3, #0]
 8007b74:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d046      	beq.n	8007c0a <USBD_HID_Setup+0xc6>
 8007b7c:	2b20      	cmp	r3, #32
 8007b7e:	f040 80d8 	bne.w	8007d32 <USBD_HID_Setup+0x1ee>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 8007b82:	683b      	ldr	r3, [r7, #0]
 8007b84:	785b      	ldrb	r3, [r3, #1]
 8007b86:	3b02      	subs	r3, #2
 8007b88:	2b09      	cmp	r3, #9
 8007b8a:	d836      	bhi.n	8007bfa <USBD_HID_Setup+0xb6>
 8007b8c:	a201      	add	r2, pc, #4	; (adr r2, 8007b94 <USBD_HID_Setup+0x50>)
 8007b8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b92:	bf00      	nop
 8007b94:	08007beb 	.word	0x08007beb
 8007b98:	08007bcb 	.word	0x08007bcb
 8007b9c:	08007bfb 	.word	0x08007bfb
 8007ba0:	08007bfb 	.word	0x08007bfb
 8007ba4:	08007bfb 	.word	0x08007bfb
 8007ba8:	08007bfb 	.word	0x08007bfb
 8007bac:	08007bfb 	.word	0x08007bfb
 8007bb0:	08007bfb 	.word	0x08007bfb
 8007bb4:	08007bd9 	.word	0x08007bd9
 8007bb8:	08007bbd 	.word	0x08007bbd
      {
        case HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8007bbc:	683b      	ldr	r3, [r7, #0]
 8007bbe:	885b      	ldrh	r3, [r3, #2]
 8007bc0:	b2db      	uxtb	r3, r3
 8007bc2:	461a      	mov	r2, r3
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	601a      	str	r2, [r3, #0]
          break;
 8007bc8:	e01e      	b.n	8007c08 <USBD_HID_Setup+0xc4>

        case HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	2201      	movs	r2, #1
 8007bce:	4619      	mov	r1, r3
 8007bd0:	6878      	ldr	r0, [r7, #4]
 8007bd2:	f001 fbd5 	bl	8009380 <USBD_CtlSendData>
          break;
 8007bd6:	e017      	b.n	8007c08 <USBD_HID_Setup+0xc4>

        case HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8007bd8:	683b      	ldr	r3, [r7, #0]
 8007bda:	885b      	ldrh	r3, [r3, #2]
 8007bdc:	0a1b      	lsrs	r3, r3, #8
 8007bde:	b29b      	uxth	r3, r3
 8007be0:	b2db      	uxtb	r3, r3
 8007be2:	461a      	mov	r2, r3
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	605a      	str	r2, [r3, #4]
          break;
 8007be8:	e00e      	b.n	8007c08 <USBD_HID_Setup+0xc4>

        case HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	3304      	adds	r3, #4
 8007bee:	2201      	movs	r2, #1
 8007bf0:	4619      	mov	r1, r3
 8007bf2:	6878      	ldr	r0, [r7, #4]
 8007bf4:	f001 fbc4 	bl	8009380 <USBD_CtlSendData>
          break;
 8007bf8:	e006      	b.n	8007c08 <USBD_HID_Setup+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8007bfa:	6839      	ldr	r1, [r7, #0]
 8007bfc:	6878      	ldr	r0, [r7, #4]
 8007bfe:	f001 fb4e 	bl	800929e <USBD_CtlError>
          ret = USBD_FAIL;
 8007c02:	2303      	movs	r3, #3
 8007c04:	75fb      	strb	r3, [r7, #23]
          break;
 8007c06:	bf00      	nop
      }
      break;
 8007c08:	e09a      	b.n	8007d40 <USBD_HID_Setup+0x1fc>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007c0a:	683b      	ldr	r3, [r7, #0]
 8007c0c:	785b      	ldrb	r3, [r3, #1]
 8007c0e:	2b0b      	cmp	r3, #11
 8007c10:	f200 8086 	bhi.w	8007d20 <USBD_HID_Setup+0x1dc>
 8007c14:	a201      	add	r2, pc, #4	; (adr r2, 8007c1c <USBD_HID_Setup+0xd8>)
 8007c16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c1a:	bf00      	nop
 8007c1c:	08007c4d 	.word	0x08007c4d
 8007c20:	08007d2f 	.word	0x08007d2f
 8007c24:	08007d21 	.word	0x08007d21
 8007c28:	08007d21 	.word	0x08007d21
 8007c2c:	08007d21 	.word	0x08007d21
 8007c30:	08007d21 	.word	0x08007d21
 8007c34:	08007c77 	.word	0x08007c77
 8007c38:	08007d21 	.word	0x08007d21
 8007c3c:	08007d21 	.word	0x08007d21
 8007c40:	08007d21 	.word	0x08007d21
 8007c44:	08007ccf 	.word	0x08007ccf
 8007c48:	08007cf9 	.word	0x08007cf9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c52:	b2db      	uxtb	r3, r3
 8007c54:	2b03      	cmp	r3, #3
 8007c56:	d107      	bne.n	8007c68 <USBD_HID_Setup+0x124>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007c58:	f107 030a 	add.w	r3, r7, #10
 8007c5c:	2202      	movs	r2, #2
 8007c5e:	4619      	mov	r1, r3
 8007c60:	6878      	ldr	r0, [r7, #4]
 8007c62:	f001 fb8d 	bl	8009380 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007c66:	e063      	b.n	8007d30 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 8007c68:	6839      	ldr	r1, [r7, #0]
 8007c6a:	6878      	ldr	r0, [r7, #4]
 8007c6c:	f001 fb17 	bl	800929e <USBD_CtlError>
            ret = USBD_FAIL;
 8007c70:	2303      	movs	r3, #3
 8007c72:	75fb      	strb	r3, [r7, #23]
          break;
 8007c74:	e05c      	b.n	8007d30 <USBD_HID_Setup+0x1ec>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == HID_REPORT_DESC)
 8007c76:	683b      	ldr	r3, [r7, #0]
 8007c78:	885b      	ldrh	r3, [r3, #2]
 8007c7a:	0a1b      	lsrs	r3, r3, #8
 8007c7c:	b29b      	uxth	r3, r3
 8007c7e:	2b22      	cmp	r3, #34	; 0x22
 8007c80:	d108      	bne.n	8007c94 <USBD_HID_Setup+0x150>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 8007c82:	683b      	ldr	r3, [r7, #0]
 8007c84:	88db      	ldrh	r3, [r3, #6]
 8007c86:	2b3f      	cmp	r3, #63	; 0x3f
 8007c88:	bf28      	it	cs
 8007c8a:	233f      	movcs	r3, #63	; 0x3f
 8007c8c:	82bb      	strh	r3, [r7, #20]
            pbuf = HID_MOUSE_ReportDesc;
 8007c8e:	4b2f      	ldr	r3, [pc, #188]	; (8007d4c <USBD_HID_Setup+0x208>)
 8007c90:	613b      	str	r3, [r7, #16]
 8007c92:	e015      	b.n	8007cc0 <USBD_HID_Setup+0x17c>
          }
          else if ((req->wValue >> 8) == HID_DESCRIPTOR_TYPE)
 8007c94:	683b      	ldr	r3, [r7, #0]
 8007c96:	885b      	ldrh	r3, [r3, #2]
 8007c98:	0a1b      	lsrs	r3, r3, #8
 8007c9a:	b29b      	uxth	r3, r3
 8007c9c:	2b21      	cmp	r3, #33	; 0x21
 8007c9e:	d108      	bne.n	8007cb2 <USBD_HID_Setup+0x16e>
          {
            pbuf = USBD_HID_Desc;
 8007ca0:	4b2b      	ldr	r3, [pc, #172]	; (8007d50 <USBD_HID_Setup+0x20c>)
 8007ca2:	613b      	str	r3, [r7, #16]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 8007ca4:	683b      	ldr	r3, [r7, #0]
 8007ca6:	88db      	ldrh	r3, [r3, #6]
 8007ca8:	2b09      	cmp	r3, #9
 8007caa:	bf28      	it	cs
 8007cac:	2309      	movcs	r3, #9
 8007cae:	82bb      	strh	r3, [r7, #20]
 8007cb0:	e006      	b.n	8007cc0 <USBD_HID_Setup+0x17c>
          }
          else
          {
            USBD_CtlError(pdev, req);
 8007cb2:	6839      	ldr	r1, [r7, #0]
 8007cb4:	6878      	ldr	r0, [r7, #4]
 8007cb6:	f001 faf2 	bl	800929e <USBD_CtlError>
            ret = USBD_FAIL;
 8007cba:	2303      	movs	r3, #3
 8007cbc:	75fb      	strb	r3, [r7, #23]
            break;
 8007cbe:	e037      	b.n	8007d30 <USBD_HID_Setup+0x1ec>
          }
          (void)USBD_CtlSendData(pdev, pbuf, len);
 8007cc0:	8abb      	ldrh	r3, [r7, #20]
 8007cc2:	461a      	mov	r2, r3
 8007cc4:	6939      	ldr	r1, [r7, #16]
 8007cc6:	6878      	ldr	r0, [r7, #4]
 8007cc8:	f001 fb5a 	bl	8009380 <USBD_CtlSendData>
          break;
 8007ccc:	e030      	b.n	8007d30 <USBD_HID_Setup+0x1ec>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007cd4:	b2db      	uxtb	r3, r3
 8007cd6:	2b03      	cmp	r3, #3
 8007cd8:	d107      	bne.n	8007cea <USBD_HID_Setup+0x1a6>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	3308      	adds	r3, #8
 8007cde:	2201      	movs	r2, #1
 8007ce0:	4619      	mov	r1, r3
 8007ce2:	6878      	ldr	r0, [r7, #4]
 8007ce4:	f001 fb4c 	bl	8009380 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007ce8:	e022      	b.n	8007d30 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 8007cea:	6839      	ldr	r1, [r7, #0]
 8007cec:	6878      	ldr	r0, [r7, #4]
 8007cee:	f001 fad6 	bl	800929e <USBD_CtlError>
            ret = USBD_FAIL;
 8007cf2:	2303      	movs	r3, #3
 8007cf4:	75fb      	strb	r3, [r7, #23]
          break;
 8007cf6:	e01b      	b.n	8007d30 <USBD_HID_Setup+0x1ec>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007cfe:	b2db      	uxtb	r3, r3
 8007d00:	2b03      	cmp	r3, #3
 8007d02:	d106      	bne.n	8007d12 <USBD_HID_Setup+0x1ce>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8007d04:	683b      	ldr	r3, [r7, #0]
 8007d06:	885b      	ldrh	r3, [r3, #2]
 8007d08:	b2db      	uxtb	r3, r3
 8007d0a:	461a      	mov	r2, r3
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007d10:	e00e      	b.n	8007d30 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 8007d12:	6839      	ldr	r1, [r7, #0]
 8007d14:	6878      	ldr	r0, [r7, #4]
 8007d16:	f001 fac2 	bl	800929e <USBD_CtlError>
            ret = USBD_FAIL;
 8007d1a:	2303      	movs	r3, #3
 8007d1c:	75fb      	strb	r3, [r7, #23]
          break;
 8007d1e:	e007      	b.n	8007d30 <USBD_HID_Setup+0x1ec>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8007d20:	6839      	ldr	r1, [r7, #0]
 8007d22:	6878      	ldr	r0, [r7, #4]
 8007d24:	f001 fabb 	bl	800929e <USBD_CtlError>
          ret = USBD_FAIL;
 8007d28:	2303      	movs	r3, #3
 8007d2a:	75fb      	strb	r3, [r7, #23]
          break;
 8007d2c:	e000      	b.n	8007d30 <USBD_HID_Setup+0x1ec>
          break;
 8007d2e:	bf00      	nop
      }
      break;
 8007d30:	e006      	b.n	8007d40 <USBD_HID_Setup+0x1fc>

    default:
      USBD_CtlError(pdev, req);
 8007d32:	6839      	ldr	r1, [r7, #0]
 8007d34:	6878      	ldr	r0, [r7, #4]
 8007d36:	f001 fab2 	bl	800929e <USBD_CtlError>
      ret = USBD_FAIL;
 8007d3a:	2303      	movs	r3, #3
 8007d3c:	75fb      	strb	r3, [r7, #23]
      break;
 8007d3e:	bf00      	nop
  }

  return (uint8_t)ret;
 8007d40:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d42:	4618      	mov	r0, r3
 8007d44:	3718      	adds	r7, #24
 8007d46:	46bd      	mov	sp, r7
 8007d48:	bd80      	pop	{r7, pc}
 8007d4a:	bf00      	nop
 8007d4c:	200000dc 	.word	0x200000dc
 8007d50:	200000c4 	.word	0x200000c4

08007d54 <USBD_HID_SendReport>:
  * @param  pdev: device instance
  * @param  buff: pointer to report
  * @retval status
  */
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef *pdev, uint8_t *report, uint16_t len)
{
 8007d54:	b580      	push	{r7, lr}
 8007d56:	b086      	sub	sp, #24
 8007d58:	af00      	add	r7, sp, #0
 8007d5a:	60f8      	str	r0, [r7, #12]
 8007d5c:	60b9      	str	r1, [r7, #8]
 8007d5e:	4613      	mov	r3, r2
 8007d60:	80fb      	strh	r3, [r7, #6]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	32b0      	adds	r2, #176	; 0xb0
 8007d6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d70:	617b      	str	r3, [r7, #20]

  if (hhid == NULL)
 8007d72:	697b      	ldr	r3, [r7, #20]
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d101      	bne.n	8007d7c <USBD_HID_SendReport+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8007d78:	2303      	movs	r3, #3
 8007d7a:	e014      	b.n	8007da6 <USBD_HID_SendReport+0x52>
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d82:	b2db      	uxtb	r3, r3
 8007d84:	2b03      	cmp	r3, #3
 8007d86:	d10d      	bne.n	8007da4 <USBD_HID_SendReport+0x50>
  {
    if (hhid->state == HID_IDLE)
 8007d88:	697b      	ldr	r3, [r7, #20]
 8007d8a:	7b1b      	ldrb	r3, [r3, #12]
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d109      	bne.n	8007da4 <USBD_HID_SendReport+0x50>
    {
      hhid->state = HID_BUSY;
 8007d90:	697b      	ldr	r3, [r7, #20]
 8007d92:	2201      	movs	r2, #1
 8007d94:	731a      	strb	r2, [r3, #12]
      (void)USBD_LL_Transmit(pdev, HIDInEpAdd, report, len);
 8007d96:	4b06      	ldr	r3, [pc, #24]	; (8007db0 <USBD_HID_SendReport+0x5c>)
 8007d98:	7819      	ldrb	r1, [r3, #0]
 8007d9a:	88fb      	ldrh	r3, [r7, #6]
 8007d9c:	68ba      	ldr	r2, [r7, #8]
 8007d9e:	68f8      	ldr	r0, [r7, #12]
 8007da0:	f001 ff11 	bl	8009bc6 <USBD_LL_Transmit>
    }
  }

  return (uint8_t)USBD_OK;
 8007da4:	2300      	movs	r3, #0
}
 8007da6:	4618      	mov	r0, r3
 8007da8:	3718      	adds	r7, #24
 8007daa:	46bd      	mov	sp, r7
 8007dac:	bd80      	pop	{r7, pc}
 8007dae:	bf00      	nop
 8007db0:	2000011b 	.word	0x2000011b

08007db4 <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 8007db4:	b580      	push	{r7, lr}
 8007db6:	b084      	sub	sp, #16
 8007db8:	af00      	add	r7, sp, #0
 8007dba:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 8007dbc:	2181      	movs	r1, #129	; 0x81
 8007dbe:	4809      	ldr	r0, [pc, #36]	; (8007de4 <USBD_HID_GetFSCfgDesc+0x30>)
 8007dc0:	f000 fc35 	bl	800862e <USBD_GetEpDesc>
 8007dc4:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d002      	beq.n	8007dd2 <USBD_HID_GetFSCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_FS_BINTERVAL;
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	220a      	movs	r2, #10
 8007dd0:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	2222      	movs	r2, #34	; 0x22
 8007dd6:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 8007dd8:	4b02      	ldr	r3, [pc, #8]	; (8007de4 <USBD_HID_GetFSCfgDesc+0x30>)
}
 8007dda:	4618      	mov	r0, r3
 8007ddc:	3710      	adds	r7, #16
 8007dde:	46bd      	mov	sp, r7
 8007de0:	bd80      	pop	{r7, pc}
 8007de2:	bf00      	nop
 8007de4:	200000a0 	.word	0x200000a0

08007de8 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 8007de8:	b580      	push	{r7, lr}
 8007dea:	b084      	sub	sp, #16
 8007dec:	af00      	add	r7, sp, #0
 8007dee:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 8007df0:	2181      	movs	r1, #129	; 0x81
 8007df2:	4809      	ldr	r0, [pc, #36]	; (8007e18 <USBD_HID_GetHSCfgDesc+0x30>)
 8007df4:	f000 fc1b 	bl	800862e <USBD_GetEpDesc>
 8007df8:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d002      	beq.n	8007e06 <USBD_HID_GetHSCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_HS_BINTERVAL;
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	2207      	movs	r2, #7
 8007e04:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	2222      	movs	r2, #34	; 0x22
 8007e0a:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 8007e0c:	4b02      	ldr	r3, [pc, #8]	; (8007e18 <USBD_HID_GetHSCfgDesc+0x30>)
}
 8007e0e:	4618      	mov	r0, r3
 8007e10:	3710      	adds	r7, #16
 8007e12:	46bd      	mov	sp, r7
 8007e14:	bd80      	pop	{r7, pc}
 8007e16:	bf00      	nop
 8007e18:	200000a0 	.word	0x200000a0

08007e1c <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007e1c:	b580      	push	{r7, lr}
 8007e1e:	b084      	sub	sp, #16
 8007e20:	af00      	add	r7, sp, #0
 8007e22:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 8007e24:	2181      	movs	r1, #129	; 0x81
 8007e26:	4809      	ldr	r0, [pc, #36]	; (8007e4c <USBD_HID_GetOtherSpeedCfgDesc+0x30>)
 8007e28:	f000 fc01 	bl	800862e <USBD_GetEpDesc>
 8007e2c:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d002      	beq.n	8007e3a <USBD_HID_GetOtherSpeedCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_FS_BINTERVAL;
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	220a      	movs	r2, #10
 8007e38:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	2222      	movs	r2, #34	; 0x22
 8007e3e:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 8007e40:	4b02      	ldr	r3, [pc, #8]	; (8007e4c <USBD_HID_GetOtherSpeedCfgDesc+0x30>)
}
 8007e42:	4618      	mov	r0, r3
 8007e44:	3710      	adds	r7, #16
 8007e46:	46bd      	mov	sp, r7
 8007e48:	bd80      	pop	{r7, pc}
 8007e4a:	bf00      	nop
 8007e4c:	200000a0 	.word	0x200000a0

08007e50 <USBD_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007e50:	b480      	push	{r7}
 8007e52:	b083      	sub	sp, #12
 8007e54:	af00      	add	r7, sp, #0
 8007e56:	6078      	str	r0, [r7, #4]
 8007e58:	460b      	mov	r3, r1
 8007e5a:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId])->state = HID_IDLE;
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	32b0      	adds	r2, #176	; 0xb0
 8007e66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e6a:	2200      	movs	r2, #0
 8007e6c:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 8007e6e:	2300      	movs	r3, #0
}
 8007e70:	4618      	mov	r0, r3
 8007e72:	370c      	adds	r7, #12
 8007e74:	46bd      	mov	sp, r7
 8007e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e7a:	4770      	bx	lr

08007e7c <USBD_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8007e7c:	b480      	push	{r7}
 8007e7e:	b083      	sub	sp, #12
 8007e80:	af00      	add	r7, sp, #0
 8007e82:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_DeviceQualifierDesc);
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	220a      	movs	r2, #10
 8007e88:	801a      	strh	r2, [r3, #0]

  return USBD_HID_DeviceQualifierDesc;
 8007e8a:	4b03      	ldr	r3, [pc, #12]	; (8007e98 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 8007e8c:	4618      	mov	r0, r3
 8007e8e:	370c      	adds	r7, #12
 8007e90:	46bd      	mov	sp, r7
 8007e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e96:	4770      	bx	lr
 8007e98:	200000d0 	.word	0x200000d0

08007e9c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007e9c:	b580      	push	{r7, lr}
 8007e9e:	b086      	sub	sp, #24
 8007ea0:	af00      	add	r7, sp, #0
 8007ea2:	60f8      	str	r0, [r7, #12]
 8007ea4:	60b9      	str	r1, [r7, #8]
 8007ea6:	4613      	mov	r3, r2
 8007ea8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d101      	bne.n	8007eb4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007eb0:	2303      	movs	r3, #3
 8007eb2:	e01f      	b.n	8007ef4 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	2200      	movs	r2, #0
 8007eb8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	2200      	movs	r2, #0
 8007ec0:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	2200      	movs	r2, #0
 8007ec8:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007ecc:	68bb      	ldr	r3, [r7, #8]
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d003      	beq.n	8007eda <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	68ba      	ldr	r2, [r7, #8]
 8007ed6:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	2201      	movs	r2, #1
 8007ede:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	79fa      	ldrb	r2, [r7, #7]
 8007ee6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007ee8:	68f8      	ldr	r0, [r7, #12]
 8007eea:	f001 fd37 	bl	800995c <USBD_LL_Init>
 8007eee:	4603      	mov	r3, r0
 8007ef0:	75fb      	strb	r3, [r7, #23]

  return ret;
 8007ef2:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ef4:	4618      	mov	r0, r3
 8007ef6:	3718      	adds	r7, #24
 8007ef8:	46bd      	mov	sp, r7
 8007efa:	bd80      	pop	{r7, pc}

08007efc <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007efc:	b580      	push	{r7, lr}
 8007efe:	b084      	sub	sp, #16
 8007f00:	af00      	add	r7, sp, #0
 8007f02:	6078      	str	r0, [r7, #4]
 8007f04:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007f06:	2300      	movs	r3, #0
 8007f08:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8007f0a:	683b      	ldr	r3, [r7, #0]
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d101      	bne.n	8007f14 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007f10:	2303      	movs	r3, #3
 8007f12:	e025      	b.n	8007f60 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	683a      	ldr	r2, [r7, #0]
 8007f18:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	32ae      	adds	r2, #174	; 0xae
 8007f26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d00f      	beq.n	8007f50 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	32ae      	adds	r2, #174	; 0xae
 8007f3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f40:	f107 020e 	add.w	r2, r7, #14
 8007f44:	4610      	mov	r0, r2
 8007f46:	4798      	blx	r3
 8007f48:	4602      	mov	r2, r0
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8007f56:	1c5a      	adds	r2, r3, #1
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8007f5e:	2300      	movs	r3, #0
}
 8007f60:	4618      	mov	r0, r3
 8007f62:	3710      	adds	r7, #16
 8007f64:	46bd      	mov	sp, r7
 8007f66:	bd80      	pop	{r7, pc}

08007f68 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007f68:	b580      	push	{r7, lr}
 8007f6a:	b082      	sub	sp, #8
 8007f6c:	af00      	add	r7, sp, #0
 8007f6e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007f70:	6878      	ldr	r0, [r7, #4]
 8007f72:	f001 fd3f 	bl	80099f4 <USBD_LL_Start>
 8007f76:	4603      	mov	r3, r0
}
 8007f78:	4618      	mov	r0, r3
 8007f7a:	3708      	adds	r7, #8
 8007f7c:	46bd      	mov	sp, r7
 8007f7e:	bd80      	pop	{r7, pc}

08007f80 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8007f80:	b480      	push	{r7}
 8007f82:	b083      	sub	sp, #12
 8007f84:	af00      	add	r7, sp, #0
 8007f86:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007f88:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8007f8a:	4618      	mov	r0, r3
 8007f8c:	370c      	adds	r7, #12
 8007f8e:	46bd      	mov	sp, r7
 8007f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f94:	4770      	bx	lr

08007f96 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007f96:	b580      	push	{r7, lr}
 8007f98:	b084      	sub	sp, #16
 8007f9a:	af00      	add	r7, sp, #0
 8007f9c:	6078      	str	r0, [r7, #4]
 8007f9e:	460b      	mov	r3, r1
 8007fa0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007fa2:	2300      	movs	r3, #0
 8007fa4:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d009      	beq.n	8007fc4 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	78fa      	ldrb	r2, [r7, #3]
 8007fba:	4611      	mov	r1, r2
 8007fbc:	6878      	ldr	r0, [r7, #4]
 8007fbe:	4798      	blx	r3
 8007fc0:	4603      	mov	r3, r0
 8007fc2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007fc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fc6:	4618      	mov	r0, r3
 8007fc8:	3710      	adds	r7, #16
 8007fca:	46bd      	mov	sp, r7
 8007fcc:	bd80      	pop	{r7, pc}

08007fce <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007fce:	b580      	push	{r7, lr}
 8007fd0:	b084      	sub	sp, #16
 8007fd2:	af00      	add	r7, sp, #0
 8007fd4:	6078      	str	r0, [r7, #4]
 8007fd6:	460b      	mov	r3, r1
 8007fd8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007fda:	2300      	movs	r3, #0
 8007fdc:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007fe4:	685b      	ldr	r3, [r3, #4]
 8007fe6:	78fa      	ldrb	r2, [r7, #3]
 8007fe8:	4611      	mov	r1, r2
 8007fea:	6878      	ldr	r0, [r7, #4]
 8007fec:	4798      	blx	r3
 8007fee:	4603      	mov	r3, r0
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d001      	beq.n	8007ff8 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8007ff4:	2303      	movs	r3, #3
 8007ff6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007ff8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ffa:	4618      	mov	r0, r3
 8007ffc:	3710      	adds	r7, #16
 8007ffe:	46bd      	mov	sp, r7
 8008000:	bd80      	pop	{r7, pc}

08008002 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008002:	b580      	push	{r7, lr}
 8008004:	b084      	sub	sp, #16
 8008006:	af00      	add	r7, sp, #0
 8008008:	6078      	str	r0, [r7, #4]
 800800a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008012:	6839      	ldr	r1, [r7, #0]
 8008014:	4618      	mov	r0, r3
 8008016:	f001 f908 	bl	800922a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	2201      	movs	r2, #1
 800801e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8008028:	461a      	mov	r2, r3
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008036:	f003 031f 	and.w	r3, r3, #31
 800803a:	2b02      	cmp	r3, #2
 800803c:	d01a      	beq.n	8008074 <USBD_LL_SetupStage+0x72>
 800803e:	2b02      	cmp	r3, #2
 8008040:	d822      	bhi.n	8008088 <USBD_LL_SetupStage+0x86>
 8008042:	2b00      	cmp	r3, #0
 8008044:	d002      	beq.n	800804c <USBD_LL_SetupStage+0x4a>
 8008046:	2b01      	cmp	r3, #1
 8008048:	d00a      	beq.n	8008060 <USBD_LL_SetupStage+0x5e>
 800804a:	e01d      	b.n	8008088 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008052:	4619      	mov	r1, r3
 8008054:	6878      	ldr	r0, [r7, #4]
 8008056:	f000 fb5f 	bl	8008718 <USBD_StdDevReq>
 800805a:	4603      	mov	r3, r0
 800805c:	73fb      	strb	r3, [r7, #15]
      break;
 800805e:	e020      	b.n	80080a2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008066:	4619      	mov	r1, r3
 8008068:	6878      	ldr	r0, [r7, #4]
 800806a:	f000 fbc7 	bl	80087fc <USBD_StdItfReq>
 800806e:	4603      	mov	r3, r0
 8008070:	73fb      	strb	r3, [r7, #15]
      break;
 8008072:	e016      	b.n	80080a2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800807a:	4619      	mov	r1, r3
 800807c:	6878      	ldr	r0, [r7, #4]
 800807e:	f000 fc29 	bl	80088d4 <USBD_StdEPReq>
 8008082:	4603      	mov	r3, r0
 8008084:	73fb      	strb	r3, [r7, #15]
      break;
 8008086:	e00c      	b.n	80080a2 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800808e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008092:	b2db      	uxtb	r3, r3
 8008094:	4619      	mov	r1, r3
 8008096:	6878      	ldr	r0, [r7, #4]
 8008098:	f001 fd0c 	bl	8009ab4 <USBD_LL_StallEP>
 800809c:	4603      	mov	r3, r0
 800809e:	73fb      	strb	r3, [r7, #15]
      break;
 80080a0:	bf00      	nop
  }

  return ret;
 80080a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80080a4:	4618      	mov	r0, r3
 80080a6:	3710      	adds	r7, #16
 80080a8:	46bd      	mov	sp, r7
 80080aa:	bd80      	pop	{r7, pc}

080080ac <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80080ac:	b580      	push	{r7, lr}
 80080ae:	b086      	sub	sp, #24
 80080b0:	af00      	add	r7, sp, #0
 80080b2:	60f8      	str	r0, [r7, #12]
 80080b4:	460b      	mov	r3, r1
 80080b6:	607a      	str	r2, [r7, #4]
 80080b8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80080ba:	2300      	movs	r3, #0
 80080bc:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80080be:	7afb      	ldrb	r3, [r7, #11]
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d16e      	bne.n	80081a2 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80080ca:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80080d2:	2b03      	cmp	r3, #3
 80080d4:	f040 8098 	bne.w	8008208 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80080d8:	693b      	ldr	r3, [r7, #16]
 80080da:	689a      	ldr	r2, [r3, #8]
 80080dc:	693b      	ldr	r3, [r7, #16]
 80080de:	68db      	ldr	r3, [r3, #12]
 80080e0:	429a      	cmp	r2, r3
 80080e2:	d913      	bls.n	800810c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80080e4:	693b      	ldr	r3, [r7, #16]
 80080e6:	689a      	ldr	r2, [r3, #8]
 80080e8:	693b      	ldr	r3, [r7, #16]
 80080ea:	68db      	ldr	r3, [r3, #12]
 80080ec:	1ad2      	subs	r2, r2, r3
 80080ee:	693b      	ldr	r3, [r7, #16]
 80080f0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80080f2:	693b      	ldr	r3, [r7, #16]
 80080f4:	68da      	ldr	r2, [r3, #12]
 80080f6:	693b      	ldr	r3, [r7, #16]
 80080f8:	689b      	ldr	r3, [r3, #8]
 80080fa:	4293      	cmp	r3, r2
 80080fc:	bf28      	it	cs
 80080fe:	4613      	movcs	r3, r2
 8008100:	461a      	mov	r2, r3
 8008102:	6879      	ldr	r1, [r7, #4]
 8008104:	68f8      	ldr	r0, [r7, #12]
 8008106:	f001 f967 	bl	80093d8 <USBD_CtlContinueRx>
 800810a:	e07d      	b.n	8008208 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008112:	f003 031f 	and.w	r3, r3, #31
 8008116:	2b02      	cmp	r3, #2
 8008118:	d014      	beq.n	8008144 <USBD_LL_DataOutStage+0x98>
 800811a:	2b02      	cmp	r3, #2
 800811c:	d81d      	bhi.n	800815a <USBD_LL_DataOutStage+0xae>
 800811e:	2b00      	cmp	r3, #0
 8008120:	d002      	beq.n	8008128 <USBD_LL_DataOutStage+0x7c>
 8008122:	2b01      	cmp	r3, #1
 8008124:	d003      	beq.n	800812e <USBD_LL_DataOutStage+0x82>
 8008126:	e018      	b.n	800815a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8008128:	2300      	movs	r3, #0
 800812a:	75bb      	strb	r3, [r7, #22]
            break;
 800812c:	e018      	b.n	8008160 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8008134:	b2db      	uxtb	r3, r3
 8008136:	4619      	mov	r1, r3
 8008138:	68f8      	ldr	r0, [r7, #12]
 800813a:	f000 fa5e 	bl	80085fa <USBD_CoreFindIF>
 800813e:	4603      	mov	r3, r0
 8008140:	75bb      	strb	r3, [r7, #22]
            break;
 8008142:	e00d      	b.n	8008160 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800814a:	b2db      	uxtb	r3, r3
 800814c:	4619      	mov	r1, r3
 800814e:	68f8      	ldr	r0, [r7, #12]
 8008150:	f000 fa60 	bl	8008614 <USBD_CoreFindEP>
 8008154:	4603      	mov	r3, r0
 8008156:	75bb      	strb	r3, [r7, #22]
            break;
 8008158:	e002      	b.n	8008160 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800815a:	2300      	movs	r3, #0
 800815c:	75bb      	strb	r3, [r7, #22]
            break;
 800815e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8008160:	7dbb      	ldrb	r3, [r7, #22]
 8008162:	2b00      	cmp	r3, #0
 8008164:	d119      	bne.n	800819a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800816c:	b2db      	uxtb	r3, r3
 800816e:	2b03      	cmp	r3, #3
 8008170:	d113      	bne.n	800819a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8008172:	7dba      	ldrb	r2, [r7, #22]
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	32ae      	adds	r2, #174	; 0xae
 8008178:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800817c:	691b      	ldr	r3, [r3, #16]
 800817e:	2b00      	cmp	r3, #0
 8008180:	d00b      	beq.n	800819a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8008182:	7dba      	ldrb	r2, [r7, #22]
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800818a:	7dba      	ldrb	r2, [r7, #22]
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	32ae      	adds	r2, #174	; 0xae
 8008190:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008194:	691b      	ldr	r3, [r3, #16]
 8008196:	68f8      	ldr	r0, [r7, #12]
 8008198:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800819a:	68f8      	ldr	r0, [r7, #12]
 800819c:	f001 f92d 	bl	80093fa <USBD_CtlSendStatus>
 80081a0:	e032      	b.n	8008208 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80081a2:	7afb      	ldrb	r3, [r7, #11]
 80081a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80081a8:	b2db      	uxtb	r3, r3
 80081aa:	4619      	mov	r1, r3
 80081ac:	68f8      	ldr	r0, [r7, #12]
 80081ae:	f000 fa31 	bl	8008614 <USBD_CoreFindEP>
 80081b2:	4603      	mov	r3, r0
 80081b4:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80081b6:	7dbb      	ldrb	r3, [r7, #22]
 80081b8:	2bff      	cmp	r3, #255	; 0xff
 80081ba:	d025      	beq.n	8008208 <USBD_LL_DataOutStage+0x15c>
 80081bc:	7dbb      	ldrb	r3, [r7, #22]
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d122      	bne.n	8008208 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80081c8:	b2db      	uxtb	r3, r3
 80081ca:	2b03      	cmp	r3, #3
 80081cc:	d117      	bne.n	80081fe <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80081ce:	7dba      	ldrb	r2, [r7, #22]
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	32ae      	adds	r2, #174	; 0xae
 80081d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80081d8:	699b      	ldr	r3, [r3, #24]
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d00f      	beq.n	80081fe <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80081de:	7dba      	ldrb	r2, [r7, #22]
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80081e6:	7dba      	ldrb	r2, [r7, #22]
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	32ae      	adds	r2, #174	; 0xae
 80081ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80081f0:	699b      	ldr	r3, [r3, #24]
 80081f2:	7afa      	ldrb	r2, [r7, #11]
 80081f4:	4611      	mov	r1, r2
 80081f6:	68f8      	ldr	r0, [r7, #12]
 80081f8:	4798      	blx	r3
 80081fa:	4603      	mov	r3, r0
 80081fc:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80081fe:	7dfb      	ldrb	r3, [r7, #23]
 8008200:	2b00      	cmp	r3, #0
 8008202:	d001      	beq.n	8008208 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8008204:	7dfb      	ldrb	r3, [r7, #23]
 8008206:	e000      	b.n	800820a <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8008208:	2300      	movs	r3, #0
}
 800820a:	4618      	mov	r0, r3
 800820c:	3718      	adds	r7, #24
 800820e:	46bd      	mov	sp, r7
 8008210:	bd80      	pop	{r7, pc}

08008212 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008212:	b580      	push	{r7, lr}
 8008214:	b086      	sub	sp, #24
 8008216:	af00      	add	r7, sp, #0
 8008218:	60f8      	str	r0, [r7, #12]
 800821a:	460b      	mov	r3, r1
 800821c:	607a      	str	r2, [r7, #4]
 800821e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8008220:	7afb      	ldrb	r3, [r7, #11]
 8008222:	2b00      	cmp	r3, #0
 8008224:	d16f      	bne.n	8008306 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	3314      	adds	r3, #20
 800822a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008232:	2b02      	cmp	r3, #2
 8008234:	d15a      	bne.n	80082ec <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8008236:	693b      	ldr	r3, [r7, #16]
 8008238:	689a      	ldr	r2, [r3, #8]
 800823a:	693b      	ldr	r3, [r7, #16]
 800823c:	68db      	ldr	r3, [r3, #12]
 800823e:	429a      	cmp	r2, r3
 8008240:	d914      	bls.n	800826c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008242:	693b      	ldr	r3, [r7, #16]
 8008244:	689a      	ldr	r2, [r3, #8]
 8008246:	693b      	ldr	r3, [r7, #16]
 8008248:	68db      	ldr	r3, [r3, #12]
 800824a:	1ad2      	subs	r2, r2, r3
 800824c:	693b      	ldr	r3, [r7, #16]
 800824e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8008250:	693b      	ldr	r3, [r7, #16]
 8008252:	689b      	ldr	r3, [r3, #8]
 8008254:	461a      	mov	r2, r3
 8008256:	6879      	ldr	r1, [r7, #4]
 8008258:	68f8      	ldr	r0, [r7, #12]
 800825a:	f001 f8ac 	bl	80093b6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800825e:	2300      	movs	r3, #0
 8008260:	2200      	movs	r2, #0
 8008262:	2100      	movs	r1, #0
 8008264:	68f8      	ldr	r0, [r7, #12]
 8008266:	f001 fccf 	bl	8009c08 <USBD_LL_PrepareReceive>
 800826a:	e03f      	b.n	80082ec <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800826c:	693b      	ldr	r3, [r7, #16]
 800826e:	68da      	ldr	r2, [r3, #12]
 8008270:	693b      	ldr	r3, [r7, #16]
 8008272:	689b      	ldr	r3, [r3, #8]
 8008274:	429a      	cmp	r2, r3
 8008276:	d11c      	bne.n	80082b2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8008278:	693b      	ldr	r3, [r7, #16]
 800827a:	685a      	ldr	r2, [r3, #4]
 800827c:	693b      	ldr	r3, [r7, #16]
 800827e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8008280:	429a      	cmp	r2, r3
 8008282:	d316      	bcc.n	80082b2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8008284:	693b      	ldr	r3, [r7, #16]
 8008286:	685a      	ldr	r2, [r3, #4]
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800828e:	429a      	cmp	r2, r3
 8008290:	d20f      	bcs.n	80082b2 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008292:	2200      	movs	r2, #0
 8008294:	2100      	movs	r1, #0
 8008296:	68f8      	ldr	r0, [r7, #12]
 8008298:	f001 f88d 	bl	80093b6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	2200      	movs	r2, #0
 80082a0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80082a4:	2300      	movs	r3, #0
 80082a6:	2200      	movs	r2, #0
 80082a8:	2100      	movs	r1, #0
 80082aa:	68f8      	ldr	r0, [r7, #12]
 80082ac:	f001 fcac 	bl	8009c08 <USBD_LL_PrepareReceive>
 80082b0:	e01c      	b.n	80082ec <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80082b8:	b2db      	uxtb	r3, r3
 80082ba:	2b03      	cmp	r3, #3
 80082bc:	d10f      	bne.n	80082de <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80082c4:	68db      	ldr	r3, [r3, #12]
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d009      	beq.n	80082de <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	2200      	movs	r2, #0
 80082ce:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80082d8:	68db      	ldr	r3, [r3, #12]
 80082da:	68f8      	ldr	r0, [r7, #12]
 80082dc:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80082de:	2180      	movs	r1, #128	; 0x80
 80082e0:	68f8      	ldr	r0, [r7, #12]
 80082e2:	f001 fbe7 	bl	8009ab4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80082e6:	68f8      	ldr	r0, [r7, #12]
 80082e8:	f001 f89a 	bl	8009420 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d03a      	beq.n	800836c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80082f6:	68f8      	ldr	r0, [r7, #12]
 80082f8:	f7ff fe42 	bl	8007f80 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	2200      	movs	r2, #0
 8008300:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8008304:	e032      	b.n	800836c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8008306:	7afb      	ldrb	r3, [r7, #11]
 8008308:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800830c:	b2db      	uxtb	r3, r3
 800830e:	4619      	mov	r1, r3
 8008310:	68f8      	ldr	r0, [r7, #12]
 8008312:	f000 f97f 	bl	8008614 <USBD_CoreFindEP>
 8008316:	4603      	mov	r3, r0
 8008318:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800831a:	7dfb      	ldrb	r3, [r7, #23]
 800831c:	2bff      	cmp	r3, #255	; 0xff
 800831e:	d025      	beq.n	800836c <USBD_LL_DataInStage+0x15a>
 8008320:	7dfb      	ldrb	r3, [r7, #23]
 8008322:	2b00      	cmp	r3, #0
 8008324:	d122      	bne.n	800836c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800832c:	b2db      	uxtb	r3, r3
 800832e:	2b03      	cmp	r3, #3
 8008330:	d11c      	bne.n	800836c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8008332:	7dfa      	ldrb	r2, [r7, #23]
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	32ae      	adds	r2, #174	; 0xae
 8008338:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800833c:	695b      	ldr	r3, [r3, #20]
 800833e:	2b00      	cmp	r3, #0
 8008340:	d014      	beq.n	800836c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8008342:	7dfa      	ldrb	r2, [r7, #23]
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800834a:	7dfa      	ldrb	r2, [r7, #23]
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	32ae      	adds	r2, #174	; 0xae
 8008350:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008354:	695b      	ldr	r3, [r3, #20]
 8008356:	7afa      	ldrb	r2, [r7, #11]
 8008358:	4611      	mov	r1, r2
 800835a:	68f8      	ldr	r0, [r7, #12]
 800835c:	4798      	blx	r3
 800835e:	4603      	mov	r3, r0
 8008360:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8008362:	7dbb      	ldrb	r3, [r7, #22]
 8008364:	2b00      	cmp	r3, #0
 8008366:	d001      	beq.n	800836c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8008368:	7dbb      	ldrb	r3, [r7, #22]
 800836a:	e000      	b.n	800836e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800836c:	2300      	movs	r3, #0
}
 800836e:	4618      	mov	r0, r3
 8008370:	3718      	adds	r7, #24
 8008372:	46bd      	mov	sp, r7
 8008374:	bd80      	pop	{r7, pc}

08008376 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008376:	b580      	push	{r7, lr}
 8008378:	b084      	sub	sp, #16
 800837a:	af00      	add	r7, sp, #0
 800837c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800837e:	2300      	movs	r3, #0
 8008380:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	2201      	movs	r2, #1
 8008386:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	2200      	movs	r2, #0
 800838e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	2200      	movs	r2, #0
 8008396:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	2200      	movs	r2, #0
 800839c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	2200      	movs	r2, #0
 80083a4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d014      	beq.n	80083dc <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80083b8:	685b      	ldr	r3, [r3, #4]
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d00e      	beq.n	80083dc <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80083c4:	685b      	ldr	r3, [r3, #4]
 80083c6:	687a      	ldr	r2, [r7, #4]
 80083c8:	6852      	ldr	r2, [r2, #4]
 80083ca:	b2d2      	uxtb	r2, r2
 80083cc:	4611      	mov	r1, r2
 80083ce:	6878      	ldr	r0, [r7, #4]
 80083d0:	4798      	blx	r3
 80083d2:	4603      	mov	r3, r0
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d001      	beq.n	80083dc <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80083d8:	2303      	movs	r3, #3
 80083da:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80083dc:	2340      	movs	r3, #64	; 0x40
 80083de:	2200      	movs	r2, #0
 80083e0:	2100      	movs	r1, #0
 80083e2:	6878      	ldr	r0, [r7, #4]
 80083e4:	f001 fb21 	bl	8009a2a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	2201      	movs	r2, #1
 80083ec:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	2240      	movs	r2, #64	; 0x40
 80083f4:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80083f8:	2340      	movs	r3, #64	; 0x40
 80083fa:	2200      	movs	r2, #0
 80083fc:	2180      	movs	r1, #128	; 0x80
 80083fe:	6878      	ldr	r0, [r7, #4]
 8008400:	f001 fb13 	bl	8009a2a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	2201      	movs	r2, #1
 8008408:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	2240      	movs	r2, #64	; 0x40
 800840e:	621a      	str	r2, [r3, #32]

  return ret;
 8008410:	7bfb      	ldrb	r3, [r7, #15]
}
 8008412:	4618      	mov	r0, r3
 8008414:	3710      	adds	r7, #16
 8008416:	46bd      	mov	sp, r7
 8008418:	bd80      	pop	{r7, pc}

0800841a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800841a:	b480      	push	{r7}
 800841c:	b083      	sub	sp, #12
 800841e:	af00      	add	r7, sp, #0
 8008420:	6078      	str	r0, [r7, #4]
 8008422:	460b      	mov	r3, r1
 8008424:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	78fa      	ldrb	r2, [r7, #3]
 800842a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800842c:	2300      	movs	r3, #0
}
 800842e:	4618      	mov	r0, r3
 8008430:	370c      	adds	r7, #12
 8008432:	46bd      	mov	sp, r7
 8008434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008438:	4770      	bx	lr

0800843a <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800843a:	b480      	push	{r7}
 800843c:	b083      	sub	sp, #12
 800843e:	af00      	add	r7, sp, #0
 8008440:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008448:	b2da      	uxtb	r2, r3
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	2204      	movs	r2, #4
 8008454:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8008458:	2300      	movs	r3, #0
}
 800845a:	4618      	mov	r0, r3
 800845c:	370c      	adds	r7, #12
 800845e:	46bd      	mov	sp, r7
 8008460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008464:	4770      	bx	lr

08008466 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008466:	b480      	push	{r7}
 8008468:	b083      	sub	sp, #12
 800846a:	af00      	add	r7, sp, #0
 800846c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008474:	b2db      	uxtb	r3, r3
 8008476:	2b04      	cmp	r3, #4
 8008478:	d106      	bne.n	8008488 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8008480:	b2da      	uxtb	r2, r3
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8008488:	2300      	movs	r3, #0
}
 800848a:	4618      	mov	r0, r3
 800848c:	370c      	adds	r7, #12
 800848e:	46bd      	mov	sp, r7
 8008490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008494:	4770      	bx	lr

08008496 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008496:	b580      	push	{r7, lr}
 8008498:	b082      	sub	sp, #8
 800849a:	af00      	add	r7, sp, #0
 800849c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80084a4:	b2db      	uxtb	r3, r3
 80084a6:	2b03      	cmp	r3, #3
 80084a8:	d110      	bne.n	80084cc <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d00b      	beq.n	80084cc <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80084ba:	69db      	ldr	r3, [r3, #28]
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d005      	beq.n	80084cc <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80084c6:	69db      	ldr	r3, [r3, #28]
 80084c8:	6878      	ldr	r0, [r7, #4]
 80084ca:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80084cc:	2300      	movs	r3, #0
}
 80084ce:	4618      	mov	r0, r3
 80084d0:	3708      	adds	r7, #8
 80084d2:	46bd      	mov	sp, r7
 80084d4:	bd80      	pop	{r7, pc}

080084d6 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80084d6:	b580      	push	{r7, lr}
 80084d8:	b082      	sub	sp, #8
 80084da:	af00      	add	r7, sp, #0
 80084dc:	6078      	str	r0, [r7, #4]
 80084de:	460b      	mov	r3, r1
 80084e0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	32ae      	adds	r2, #174	; 0xae
 80084ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d101      	bne.n	80084f8 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80084f4:	2303      	movs	r3, #3
 80084f6:	e01c      	b.n	8008532 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80084fe:	b2db      	uxtb	r3, r3
 8008500:	2b03      	cmp	r3, #3
 8008502:	d115      	bne.n	8008530 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	32ae      	adds	r2, #174	; 0xae
 800850e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008512:	6a1b      	ldr	r3, [r3, #32]
 8008514:	2b00      	cmp	r3, #0
 8008516:	d00b      	beq.n	8008530 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	32ae      	adds	r2, #174	; 0xae
 8008522:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008526:	6a1b      	ldr	r3, [r3, #32]
 8008528:	78fa      	ldrb	r2, [r7, #3]
 800852a:	4611      	mov	r1, r2
 800852c:	6878      	ldr	r0, [r7, #4]
 800852e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008530:	2300      	movs	r3, #0
}
 8008532:	4618      	mov	r0, r3
 8008534:	3708      	adds	r7, #8
 8008536:	46bd      	mov	sp, r7
 8008538:	bd80      	pop	{r7, pc}

0800853a <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800853a:	b580      	push	{r7, lr}
 800853c:	b082      	sub	sp, #8
 800853e:	af00      	add	r7, sp, #0
 8008540:	6078      	str	r0, [r7, #4]
 8008542:	460b      	mov	r3, r1
 8008544:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	32ae      	adds	r2, #174	; 0xae
 8008550:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008554:	2b00      	cmp	r3, #0
 8008556:	d101      	bne.n	800855c <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8008558:	2303      	movs	r3, #3
 800855a:	e01c      	b.n	8008596 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008562:	b2db      	uxtb	r3, r3
 8008564:	2b03      	cmp	r3, #3
 8008566:	d115      	bne.n	8008594 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	32ae      	adds	r2, #174	; 0xae
 8008572:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008578:	2b00      	cmp	r3, #0
 800857a:	d00b      	beq.n	8008594 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	32ae      	adds	r2, #174	; 0xae
 8008586:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800858a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800858c:	78fa      	ldrb	r2, [r7, #3]
 800858e:	4611      	mov	r1, r2
 8008590:	6878      	ldr	r0, [r7, #4]
 8008592:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008594:	2300      	movs	r3, #0
}
 8008596:	4618      	mov	r0, r3
 8008598:	3708      	adds	r7, #8
 800859a:	46bd      	mov	sp, r7
 800859c:	bd80      	pop	{r7, pc}

0800859e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800859e:	b480      	push	{r7}
 80085a0:	b083      	sub	sp, #12
 80085a2:	af00      	add	r7, sp, #0
 80085a4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80085a6:	2300      	movs	r3, #0
}
 80085a8:	4618      	mov	r0, r3
 80085aa:	370c      	adds	r7, #12
 80085ac:	46bd      	mov	sp, r7
 80085ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b2:	4770      	bx	lr

080085b4 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80085b4:	b580      	push	{r7, lr}
 80085b6:	b084      	sub	sp, #16
 80085b8:	af00      	add	r7, sp, #0
 80085ba:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80085bc:	2300      	movs	r3, #0
 80085be:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	2201      	movs	r2, #1
 80085c4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d00e      	beq.n	80085f0 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80085d8:	685b      	ldr	r3, [r3, #4]
 80085da:	687a      	ldr	r2, [r7, #4]
 80085dc:	6852      	ldr	r2, [r2, #4]
 80085de:	b2d2      	uxtb	r2, r2
 80085e0:	4611      	mov	r1, r2
 80085e2:	6878      	ldr	r0, [r7, #4]
 80085e4:	4798      	blx	r3
 80085e6:	4603      	mov	r3, r0
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d001      	beq.n	80085f0 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80085ec:	2303      	movs	r3, #3
 80085ee:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80085f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80085f2:	4618      	mov	r0, r3
 80085f4:	3710      	adds	r7, #16
 80085f6:	46bd      	mov	sp, r7
 80085f8:	bd80      	pop	{r7, pc}

080085fa <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80085fa:	b480      	push	{r7}
 80085fc:	b083      	sub	sp, #12
 80085fe:	af00      	add	r7, sp, #0
 8008600:	6078      	str	r0, [r7, #4]
 8008602:	460b      	mov	r3, r1
 8008604:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008606:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008608:	4618      	mov	r0, r3
 800860a:	370c      	adds	r7, #12
 800860c:	46bd      	mov	sp, r7
 800860e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008612:	4770      	bx	lr

08008614 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008614:	b480      	push	{r7}
 8008616:	b083      	sub	sp, #12
 8008618:	af00      	add	r7, sp, #0
 800861a:	6078      	str	r0, [r7, #4]
 800861c:	460b      	mov	r3, r1
 800861e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008620:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008622:	4618      	mov	r0, r3
 8008624:	370c      	adds	r7, #12
 8008626:	46bd      	mov	sp, r7
 8008628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800862c:	4770      	bx	lr

0800862e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800862e:	b580      	push	{r7, lr}
 8008630:	b086      	sub	sp, #24
 8008632:	af00      	add	r7, sp, #0
 8008634:	6078      	str	r0, [r7, #4]
 8008636:	460b      	mov	r3, r1
 8008638:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8008642:	2300      	movs	r3, #0
 8008644:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	885b      	ldrh	r3, [r3, #2]
 800864a:	b29a      	uxth	r2, r3
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	781b      	ldrb	r3, [r3, #0]
 8008650:	b29b      	uxth	r3, r3
 8008652:	429a      	cmp	r2, r3
 8008654:	d920      	bls.n	8008698 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	781b      	ldrb	r3, [r3, #0]
 800865a:	b29b      	uxth	r3, r3
 800865c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800865e:	e013      	b.n	8008688 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8008660:	f107 030a 	add.w	r3, r7, #10
 8008664:	4619      	mov	r1, r3
 8008666:	6978      	ldr	r0, [r7, #20]
 8008668:	f000 f81b 	bl	80086a2 <USBD_GetNextDesc>
 800866c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800866e:	697b      	ldr	r3, [r7, #20]
 8008670:	785b      	ldrb	r3, [r3, #1]
 8008672:	2b05      	cmp	r3, #5
 8008674:	d108      	bne.n	8008688 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8008676:	697b      	ldr	r3, [r7, #20]
 8008678:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800867a:	693b      	ldr	r3, [r7, #16]
 800867c:	789b      	ldrb	r3, [r3, #2]
 800867e:	78fa      	ldrb	r2, [r7, #3]
 8008680:	429a      	cmp	r2, r3
 8008682:	d008      	beq.n	8008696 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8008684:	2300      	movs	r3, #0
 8008686:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	885b      	ldrh	r3, [r3, #2]
 800868c:	b29a      	uxth	r2, r3
 800868e:	897b      	ldrh	r3, [r7, #10]
 8008690:	429a      	cmp	r2, r3
 8008692:	d8e5      	bhi.n	8008660 <USBD_GetEpDesc+0x32>
 8008694:	e000      	b.n	8008698 <USBD_GetEpDesc+0x6a>
          break;
 8008696:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8008698:	693b      	ldr	r3, [r7, #16]
}
 800869a:	4618      	mov	r0, r3
 800869c:	3718      	adds	r7, #24
 800869e:	46bd      	mov	sp, r7
 80086a0:	bd80      	pop	{r7, pc}

080086a2 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80086a2:	b480      	push	{r7}
 80086a4:	b085      	sub	sp, #20
 80086a6:	af00      	add	r7, sp, #0
 80086a8:	6078      	str	r0, [r7, #4]
 80086aa:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80086b0:	683b      	ldr	r3, [r7, #0]
 80086b2:	881a      	ldrh	r2, [r3, #0]
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	781b      	ldrb	r3, [r3, #0]
 80086b8:	b29b      	uxth	r3, r3
 80086ba:	4413      	add	r3, r2
 80086bc:	b29a      	uxth	r2, r3
 80086be:	683b      	ldr	r3, [r7, #0]
 80086c0:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	781b      	ldrb	r3, [r3, #0]
 80086c6:	461a      	mov	r2, r3
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	4413      	add	r3, r2
 80086cc:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80086ce:	68fb      	ldr	r3, [r7, #12]
}
 80086d0:	4618      	mov	r0, r3
 80086d2:	3714      	adds	r7, #20
 80086d4:	46bd      	mov	sp, r7
 80086d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086da:	4770      	bx	lr

080086dc <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80086dc:	b480      	push	{r7}
 80086de:	b087      	sub	sp, #28
 80086e0:	af00      	add	r7, sp, #0
 80086e2:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80086e8:	697b      	ldr	r3, [r7, #20]
 80086ea:	781b      	ldrb	r3, [r3, #0]
 80086ec:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80086ee:	697b      	ldr	r3, [r7, #20]
 80086f0:	3301      	adds	r3, #1
 80086f2:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80086f4:	697b      	ldr	r3, [r7, #20]
 80086f6:	781b      	ldrb	r3, [r3, #0]
 80086f8:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80086fa:	8a3b      	ldrh	r3, [r7, #16]
 80086fc:	021b      	lsls	r3, r3, #8
 80086fe:	b21a      	sxth	r2, r3
 8008700:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008704:	4313      	orrs	r3, r2
 8008706:	b21b      	sxth	r3, r3
 8008708:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800870a:	89fb      	ldrh	r3, [r7, #14]
}
 800870c:	4618      	mov	r0, r3
 800870e:	371c      	adds	r7, #28
 8008710:	46bd      	mov	sp, r7
 8008712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008716:	4770      	bx	lr

08008718 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008718:	b580      	push	{r7, lr}
 800871a:	b084      	sub	sp, #16
 800871c:	af00      	add	r7, sp, #0
 800871e:	6078      	str	r0, [r7, #4]
 8008720:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008722:	2300      	movs	r3, #0
 8008724:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008726:	683b      	ldr	r3, [r7, #0]
 8008728:	781b      	ldrb	r3, [r3, #0]
 800872a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800872e:	2b40      	cmp	r3, #64	; 0x40
 8008730:	d005      	beq.n	800873e <USBD_StdDevReq+0x26>
 8008732:	2b40      	cmp	r3, #64	; 0x40
 8008734:	d857      	bhi.n	80087e6 <USBD_StdDevReq+0xce>
 8008736:	2b00      	cmp	r3, #0
 8008738:	d00f      	beq.n	800875a <USBD_StdDevReq+0x42>
 800873a:	2b20      	cmp	r3, #32
 800873c:	d153      	bne.n	80087e6 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	32ae      	adds	r2, #174	; 0xae
 8008748:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800874c:	689b      	ldr	r3, [r3, #8]
 800874e:	6839      	ldr	r1, [r7, #0]
 8008750:	6878      	ldr	r0, [r7, #4]
 8008752:	4798      	blx	r3
 8008754:	4603      	mov	r3, r0
 8008756:	73fb      	strb	r3, [r7, #15]
      break;
 8008758:	e04a      	b.n	80087f0 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800875a:	683b      	ldr	r3, [r7, #0]
 800875c:	785b      	ldrb	r3, [r3, #1]
 800875e:	2b09      	cmp	r3, #9
 8008760:	d83b      	bhi.n	80087da <USBD_StdDevReq+0xc2>
 8008762:	a201      	add	r2, pc, #4	; (adr r2, 8008768 <USBD_StdDevReq+0x50>)
 8008764:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008768:	080087bd 	.word	0x080087bd
 800876c:	080087d1 	.word	0x080087d1
 8008770:	080087db 	.word	0x080087db
 8008774:	080087c7 	.word	0x080087c7
 8008778:	080087db 	.word	0x080087db
 800877c:	0800879b 	.word	0x0800879b
 8008780:	08008791 	.word	0x08008791
 8008784:	080087db 	.word	0x080087db
 8008788:	080087b3 	.word	0x080087b3
 800878c:	080087a5 	.word	0x080087a5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008790:	6839      	ldr	r1, [r7, #0]
 8008792:	6878      	ldr	r0, [r7, #4]
 8008794:	f000 fa3c 	bl	8008c10 <USBD_GetDescriptor>
          break;
 8008798:	e024      	b.n	80087e4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800879a:	6839      	ldr	r1, [r7, #0]
 800879c:	6878      	ldr	r0, [r7, #4]
 800879e:	f000 fba1 	bl	8008ee4 <USBD_SetAddress>
          break;
 80087a2:	e01f      	b.n	80087e4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80087a4:	6839      	ldr	r1, [r7, #0]
 80087a6:	6878      	ldr	r0, [r7, #4]
 80087a8:	f000 fbe0 	bl	8008f6c <USBD_SetConfig>
 80087ac:	4603      	mov	r3, r0
 80087ae:	73fb      	strb	r3, [r7, #15]
          break;
 80087b0:	e018      	b.n	80087e4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80087b2:	6839      	ldr	r1, [r7, #0]
 80087b4:	6878      	ldr	r0, [r7, #4]
 80087b6:	f000 fc83 	bl	80090c0 <USBD_GetConfig>
          break;
 80087ba:	e013      	b.n	80087e4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80087bc:	6839      	ldr	r1, [r7, #0]
 80087be:	6878      	ldr	r0, [r7, #4]
 80087c0:	f000 fcb4 	bl	800912c <USBD_GetStatus>
          break;
 80087c4:	e00e      	b.n	80087e4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80087c6:	6839      	ldr	r1, [r7, #0]
 80087c8:	6878      	ldr	r0, [r7, #4]
 80087ca:	f000 fce3 	bl	8009194 <USBD_SetFeature>
          break;
 80087ce:	e009      	b.n	80087e4 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80087d0:	6839      	ldr	r1, [r7, #0]
 80087d2:	6878      	ldr	r0, [r7, #4]
 80087d4:	f000 fd07 	bl	80091e6 <USBD_ClrFeature>
          break;
 80087d8:	e004      	b.n	80087e4 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80087da:	6839      	ldr	r1, [r7, #0]
 80087dc:	6878      	ldr	r0, [r7, #4]
 80087de:	f000 fd5e 	bl	800929e <USBD_CtlError>
          break;
 80087e2:	bf00      	nop
      }
      break;
 80087e4:	e004      	b.n	80087f0 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80087e6:	6839      	ldr	r1, [r7, #0]
 80087e8:	6878      	ldr	r0, [r7, #4]
 80087ea:	f000 fd58 	bl	800929e <USBD_CtlError>
      break;
 80087ee:	bf00      	nop
  }

  return ret;
 80087f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80087f2:	4618      	mov	r0, r3
 80087f4:	3710      	adds	r7, #16
 80087f6:	46bd      	mov	sp, r7
 80087f8:	bd80      	pop	{r7, pc}
 80087fa:	bf00      	nop

080087fc <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80087fc:	b580      	push	{r7, lr}
 80087fe:	b084      	sub	sp, #16
 8008800:	af00      	add	r7, sp, #0
 8008802:	6078      	str	r0, [r7, #4]
 8008804:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008806:	2300      	movs	r3, #0
 8008808:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800880a:	683b      	ldr	r3, [r7, #0]
 800880c:	781b      	ldrb	r3, [r3, #0]
 800880e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008812:	2b40      	cmp	r3, #64	; 0x40
 8008814:	d005      	beq.n	8008822 <USBD_StdItfReq+0x26>
 8008816:	2b40      	cmp	r3, #64	; 0x40
 8008818:	d852      	bhi.n	80088c0 <USBD_StdItfReq+0xc4>
 800881a:	2b00      	cmp	r3, #0
 800881c:	d001      	beq.n	8008822 <USBD_StdItfReq+0x26>
 800881e:	2b20      	cmp	r3, #32
 8008820:	d14e      	bne.n	80088c0 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008828:	b2db      	uxtb	r3, r3
 800882a:	3b01      	subs	r3, #1
 800882c:	2b02      	cmp	r3, #2
 800882e:	d840      	bhi.n	80088b2 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008830:	683b      	ldr	r3, [r7, #0]
 8008832:	889b      	ldrh	r3, [r3, #4]
 8008834:	b2db      	uxtb	r3, r3
 8008836:	2b01      	cmp	r3, #1
 8008838:	d836      	bhi.n	80088a8 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800883a:	683b      	ldr	r3, [r7, #0]
 800883c:	889b      	ldrh	r3, [r3, #4]
 800883e:	b2db      	uxtb	r3, r3
 8008840:	4619      	mov	r1, r3
 8008842:	6878      	ldr	r0, [r7, #4]
 8008844:	f7ff fed9 	bl	80085fa <USBD_CoreFindIF>
 8008848:	4603      	mov	r3, r0
 800884a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800884c:	7bbb      	ldrb	r3, [r7, #14]
 800884e:	2bff      	cmp	r3, #255	; 0xff
 8008850:	d01d      	beq.n	800888e <USBD_StdItfReq+0x92>
 8008852:	7bbb      	ldrb	r3, [r7, #14]
 8008854:	2b00      	cmp	r3, #0
 8008856:	d11a      	bne.n	800888e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8008858:	7bba      	ldrb	r2, [r7, #14]
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	32ae      	adds	r2, #174	; 0xae
 800885e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008862:	689b      	ldr	r3, [r3, #8]
 8008864:	2b00      	cmp	r3, #0
 8008866:	d00f      	beq.n	8008888 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8008868:	7bba      	ldrb	r2, [r7, #14]
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008870:	7bba      	ldrb	r2, [r7, #14]
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	32ae      	adds	r2, #174	; 0xae
 8008876:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800887a:	689b      	ldr	r3, [r3, #8]
 800887c:	6839      	ldr	r1, [r7, #0]
 800887e:	6878      	ldr	r0, [r7, #4]
 8008880:	4798      	blx	r3
 8008882:	4603      	mov	r3, r0
 8008884:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008886:	e004      	b.n	8008892 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8008888:	2303      	movs	r3, #3
 800888a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800888c:	e001      	b.n	8008892 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800888e:	2303      	movs	r3, #3
 8008890:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008892:	683b      	ldr	r3, [r7, #0]
 8008894:	88db      	ldrh	r3, [r3, #6]
 8008896:	2b00      	cmp	r3, #0
 8008898:	d110      	bne.n	80088bc <USBD_StdItfReq+0xc0>
 800889a:	7bfb      	ldrb	r3, [r7, #15]
 800889c:	2b00      	cmp	r3, #0
 800889e:	d10d      	bne.n	80088bc <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80088a0:	6878      	ldr	r0, [r7, #4]
 80088a2:	f000 fdaa 	bl	80093fa <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80088a6:	e009      	b.n	80088bc <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80088a8:	6839      	ldr	r1, [r7, #0]
 80088aa:	6878      	ldr	r0, [r7, #4]
 80088ac:	f000 fcf7 	bl	800929e <USBD_CtlError>
          break;
 80088b0:	e004      	b.n	80088bc <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80088b2:	6839      	ldr	r1, [r7, #0]
 80088b4:	6878      	ldr	r0, [r7, #4]
 80088b6:	f000 fcf2 	bl	800929e <USBD_CtlError>
          break;
 80088ba:	e000      	b.n	80088be <USBD_StdItfReq+0xc2>
          break;
 80088bc:	bf00      	nop
      }
      break;
 80088be:	e004      	b.n	80088ca <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80088c0:	6839      	ldr	r1, [r7, #0]
 80088c2:	6878      	ldr	r0, [r7, #4]
 80088c4:	f000 fceb 	bl	800929e <USBD_CtlError>
      break;
 80088c8:	bf00      	nop
  }

  return ret;
 80088ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80088cc:	4618      	mov	r0, r3
 80088ce:	3710      	adds	r7, #16
 80088d0:	46bd      	mov	sp, r7
 80088d2:	bd80      	pop	{r7, pc}

080088d4 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80088d4:	b580      	push	{r7, lr}
 80088d6:	b084      	sub	sp, #16
 80088d8:	af00      	add	r7, sp, #0
 80088da:	6078      	str	r0, [r7, #4]
 80088dc:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80088de:	2300      	movs	r3, #0
 80088e0:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80088e2:	683b      	ldr	r3, [r7, #0]
 80088e4:	889b      	ldrh	r3, [r3, #4]
 80088e6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80088e8:	683b      	ldr	r3, [r7, #0]
 80088ea:	781b      	ldrb	r3, [r3, #0]
 80088ec:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80088f0:	2b40      	cmp	r3, #64	; 0x40
 80088f2:	d007      	beq.n	8008904 <USBD_StdEPReq+0x30>
 80088f4:	2b40      	cmp	r3, #64	; 0x40
 80088f6:	f200 817f 	bhi.w	8008bf8 <USBD_StdEPReq+0x324>
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d02a      	beq.n	8008954 <USBD_StdEPReq+0x80>
 80088fe:	2b20      	cmp	r3, #32
 8008900:	f040 817a 	bne.w	8008bf8 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8008904:	7bbb      	ldrb	r3, [r7, #14]
 8008906:	4619      	mov	r1, r3
 8008908:	6878      	ldr	r0, [r7, #4]
 800890a:	f7ff fe83 	bl	8008614 <USBD_CoreFindEP>
 800890e:	4603      	mov	r3, r0
 8008910:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008912:	7b7b      	ldrb	r3, [r7, #13]
 8008914:	2bff      	cmp	r3, #255	; 0xff
 8008916:	f000 8174 	beq.w	8008c02 <USBD_StdEPReq+0x32e>
 800891a:	7b7b      	ldrb	r3, [r7, #13]
 800891c:	2b00      	cmp	r3, #0
 800891e:	f040 8170 	bne.w	8008c02 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8008922:	7b7a      	ldrb	r2, [r7, #13]
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800892a:	7b7a      	ldrb	r2, [r7, #13]
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	32ae      	adds	r2, #174	; 0xae
 8008930:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008934:	689b      	ldr	r3, [r3, #8]
 8008936:	2b00      	cmp	r3, #0
 8008938:	f000 8163 	beq.w	8008c02 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800893c:	7b7a      	ldrb	r2, [r7, #13]
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	32ae      	adds	r2, #174	; 0xae
 8008942:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008946:	689b      	ldr	r3, [r3, #8]
 8008948:	6839      	ldr	r1, [r7, #0]
 800894a:	6878      	ldr	r0, [r7, #4]
 800894c:	4798      	blx	r3
 800894e:	4603      	mov	r3, r0
 8008950:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8008952:	e156      	b.n	8008c02 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008954:	683b      	ldr	r3, [r7, #0]
 8008956:	785b      	ldrb	r3, [r3, #1]
 8008958:	2b03      	cmp	r3, #3
 800895a:	d008      	beq.n	800896e <USBD_StdEPReq+0x9a>
 800895c:	2b03      	cmp	r3, #3
 800895e:	f300 8145 	bgt.w	8008bec <USBD_StdEPReq+0x318>
 8008962:	2b00      	cmp	r3, #0
 8008964:	f000 809b 	beq.w	8008a9e <USBD_StdEPReq+0x1ca>
 8008968:	2b01      	cmp	r3, #1
 800896a:	d03c      	beq.n	80089e6 <USBD_StdEPReq+0x112>
 800896c:	e13e      	b.n	8008bec <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008974:	b2db      	uxtb	r3, r3
 8008976:	2b02      	cmp	r3, #2
 8008978:	d002      	beq.n	8008980 <USBD_StdEPReq+0xac>
 800897a:	2b03      	cmp	r3, #3
 800897c:	d016      	beq.n	80089ac <USBD_StdEPReq+0xd8>
 800897e:	e02c      	b.n	80089da <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008980:	7bbb      	ldrb	r3, [r7, #14]
 8008982:	2b00      	cmp	r3, #0
 8008984:	d00d      	beq.n	80089a2 <USBD_StdEPReq+0xce>
 8008986:	7bbb      	ldrb	r3, [r7, #14]
 8008988:	2b80      	cmp	r3, #128	; 0x80
 800898a:	d00a      	beq.n	80089a2 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800898c:	7bbb      	ldrb	r3, [r7, #14]
 800898e:	4619      	mov	r1, r3
 8008990:	6878      	ldr	r0, [r7, #4]
 8008992:	f001 f88f 	bl	8009ab4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008996:	2180      	movs	r1, #128	; 0x80
 8008998:	6878      	ldr	r0, [r7, #4]
 800899a:	f001 f88b 	bl	8009ab4 <USBD_LL_StallEP>
 800899e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80089a0:	e020      	b.n	80089e4 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80089a2:	6839      	ldr	r1, [r7, #0]
 80089a4:	6878      	ldr	r0, [r7, #4]
 80089a6:	f000 fc7a 	bl	800929e <USBD_CtlError>
              break;
 80089aa:	e01b      	b.n	80089e4 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80089ac:	683b      	ldr	r3, [r7, #0]
 80089ae:	885b      	ldrh	r3, [r3, #2]
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d10e      	bne.n	80089d2 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80089b4:	7bbb      	ldrb	r3, [r7, #14]
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d00b      	beq.n	80089d2 <USBD_StdEPReq+0xfe>
 80089ba:	7bbb      	ldrb	r3, [r7, #14]
 80089bc:	2b80      	cmp	r3, #128	; 0x80
 80089be:	d008      	beq.n	80089d2 <USBD_StdEPReq+0xfe>
 80089c0:	683b      	ldr	r3, [r7, #0]
 80089c2:	88db      	ldrh	r3, [r3, #6]
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d104      	bne.n	80089d2 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80089c8:	7bbb      	ldrb	r3, [r7, #14]
 80089ca:	4619      	mov	r1, r3
 80089cc:	6878      	ldr	r0, [r7, #4]
 80089ce:	f001 f871 	bl	8009ab4 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80089d2:	6878      	ldr	r0, [r7, #4]
 80089d4:	f000 fd11 	bl	80093fa <USBD_CtlSendStatus>

              break;
 80089d8:	e004      	b.n	80089e4 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80089da:	6839      	ldr	r1, [r7, #0]
 80089dc:	6878      	ldr	r0, [r7, #4]
 80089de:	f000 fc5e 	bl	800929e <USBD_CtlError>
              break;
 80089e2:	bf00      	nop
          }
          break;
 80089e4:	e107      	b.n	8008bf6 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80089ec:	b2db      	uxtb	r3, r3
 80089ee:	2b02      	cmp	r3, #2
 80089f0:	d002      	beq.n	80089f8 <USBD_StdEPReq+0x124>
 80089f2:	2b03      	cmp	r3, #3
 80089f4:	d016      	beq.n	8008a24 <USBD_StdEPReq+0x150>
 80089f6:	e04b      	b.n	8008a90 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80089f8:	7bbb      	ldrb	r3, [r7, #14]
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d00d      	beq.n	8008a1a <USBD_StdEPReq+0x146>
 80089fe:	7bbb      	ldrb	r3, [r7, #14]
 8008a00:	2b80      	cmp	r3, #128	; 0x80
 8008a02:	d00a      	beq.n	8008a1a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008a04:	7bbb      	ldrb	r3, [r7, #14]
 8008a06:	4619      	mov	r1, r3
 8008a08:	6878      	ldr	r0, [r7, #4]
 8008a0a:	f001 f853 	bl	8009ab4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008a0e:	2180      	movs	r1, #128	; 0x80
 8008a10:	6878      	ldr	r0, [r7, #4]
 8008a12:	f001 f84f 	bl	8009ab4 <USBD_LL_StallEP>
 8008a16:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008a18:	e040      	b.n	8008a9c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8008a1a:	6839      	ldr	r1, [r7, #0]
 8008a1c:	6878      	ldr	r0, [r7, #4]
 8008a1e:	f000 fc3e 	bl	800929e <USBD_CtlError>
              break;
 8008a22:	e03b      	b.n	8008a9c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008a24:	683b      	ldr	r3, [r7, #0]
 8008a26:	885b      	ldrh	r3, [r3, #2]
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d136      	bne.n	8008a9a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008a2c:	7bbb      	ldrb	r3, [r7, #14]
 8008a2e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d004      	beq.n	8008a40 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8008a36:	7bbb      	ldrb	r3, [r7, #14]
 8008a38:	4619      	mov	r1, r3
 8008a3a:	6878      	ldr	r0, [r7, #4]
 8008a3c:	f001 f859 	bl	8009af2 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8008a40:	6878      	ldr	r0, [r7, #4]
 8008a42:	f000 fcda 	bl	80093fa <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8008a46:	7bbb      	ldrb	r3, [r7, #14]
 8008a48:	4619      	mov	r1, r3
 8008a4a:	6878      	ldr	r0, [r7, #4]
 8008a4c:	f7ff fde2 	bl	8008614 <USBD_CoreFindEP>
 8008a50:	4603      	mov	r3, r0
 8008a52:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008a54:	7b7b      	ldrb	r3, [r7, #13]
 8008a56:	2bff      	cmp	r3, #255	; 0xff
 8008a58:	d01f      	beq.n	8008a9a <USBD_StdEPReq+0x1c6>
 8008a5a:	7b7b      	ldrb	r3, [r7, #13]
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d11c      	bne.n	8008a9a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8008a60:	7b7a      	ldrb	r2, [r7, #13]
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8008a68:	7b7a      	ldrb	r2, [r7, #13]
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	32ae      	adds	r2, #174	; 0xae
 8008a6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a72:	689b      	ldr	r3, [r3, #8]
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d010      	beq.n	8008a9a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008a78:	7b7a      	ldrb	r2, [r7, #13]
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	32ae      	adds	r2, #174	; 0xae
 8008a7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a82:	689b      	ldr	r3, [r3, #8]
 8008a84:	6839      	ldr	r1, [r7, #0]
 8008a86:	6878      	ldr	r0, [r7, #4]
 8008a88:	4798      	blx	r3
 8008a8a:	4603      	mov	r3, r0
 8008a8c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8008a8e:	e004      	b.n	8008a9a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8008a90:	6839      	ldr	r1, [r7, #0]
 8008a92:	6878      	ldr	r0, [r7, #4]
 8008a94:	f000 fc03 	bl	800929e <USBD_CtlError>
              break;
 8008a98:	e000      	b.n	8008a9c <USBD_StdEPReq+0x1c8>
              break;
 8008a9a:	bf00      	nop
          }
          break;
 8008a9c:	e0ab      	b.n	8008bf6 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008aa4:	b2db      	uxtb	r3, r3
 8008aa6:	2b02      	cmp	r3, #2
 8008aa8:	d002      	beq.n	8008ab0 <USBD_StdEPReq+0x1dc>
 8008aaa:	2b03      	cmp	r3, #3
 8008aac:	d032      	beq.n	8008b14 <USBD_StdEPReq+0x240>
 8008aae:	e097      	b.n	8008be0 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008ab0:	7bbb      	ldrb	r3, [r7, #14]
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d007      	beq.n	8008ac6 <USBD_StdEPReq+0x1f2>
 8008ab6:	7bbb      	ldrb	r3, [r7, #14]
 8008ab8:	2b80      	cmp	r3, #128	; 0x80
 8008aba:	d004      	beq.n	8008ac6 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8008abc:	6839      	ldr	r1, [r7, #0]
 8008abe:	6878      	ldr	r0, [r7, #4]
 8008ac0:	f000 fbed 	bl	800929e <USBD_CtlError>
                break;
 8008ac4:	e091      	b.n	8008bea <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008ac6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	da0b      	bge.n	8008ae6 <USBD_StdEPReq+0x212>
 8008ace:	7bbb      	ldrb	r3, [r7, #14]
 8008ad0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008ad4:	4613      	mov	r3, r2
 8008ad6:	009b      	lsls	r3, r3, #2
 8008ad8:	4413      	add	r3, r2
 8008ada:	009b      	lsls	r3, r3, #2
 8008adc:	3310      	adds	r3, #16
 8008ade:	687a      	ldr	r2, [r7, #4]
 8008ae0:	4413      	add	r3, r2
 8008ae2:	3304      	adds	r3, #4
 8008ae4:	e00b      	b.n	8008afe <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008ae6:	7bbb      	ldrb	r3, [r7, #14]
 8008ae8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008aec:	4613      	mov	r3, r2
 8008aee:	009b      	lsls	r3, r3, #2
 8008af0:	4413      	add	r3, r2
 8008af2:	009b      	lsls	r3, r3, #2
 8008af4:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008af8:	687a      	ldr	r2, [r7, #4]
 8008afa:	4413      	add	r3, r2
 8008afc:	3304      	adds	r3, #4
 8008afe:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008b00:	68bb      	ldr	r3, [r7, #8]
 8008b02:	2200      	movs	r2, #0
 8008b04:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008b06:	68bb      	ldr	r3, [r7, #8]
 8008b08:	2202      	movs	r2, #2
 8008b0a:	4619      	mov	r1, r3
 8008b0c:	6878      	ldr	r0, [r7, #4]
 8008b0e:	f000 fc37 	bl	8009380 <USBD_CtlSendData>
              break;
 8008b12:	e06a      	b.n	8008bea <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008b14:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	da11      	bge.n	8008b40 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008b1c:	7bbb      	ldrb	r3, [r7, #14]
 8008b1e:	f003 020f 	and.w	r2, r3, #15
 8008b22:	6879      	ldr	r1, [r7, #4]
 8008b24:	4613      	mov	r3, r2
 8008b26:	009b      	lsls	r3, r3, #2
 8008b28:	4413      	add	r3, r2
 8008b2a:	009b      	lsls	r3, r3, #2
 8008b2c:	440b      	add	r3, r1
 8008b2e:	3324      	adds	r3, #36	; 0x24
 8008b30:	881b      	ldrh	r3, [r3, #0]
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d117      	bne.n	8008b66 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8008b36:	6839      	ldr	r1, [r7, #0]
 8008b38:	6878      	ldr	r0, [r7, #4]
 8008b3a:	f000 fbb0 	bl	800929e <USBD_CtlError>
                  break;
 8008b3e:	e054      	b.n	8008bea <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008b40:	7bbb      	ldrb	r3, [r7, #14]
 8008b42:	f003 020f 	and.w	r2, r3, #15
 8008b46:	6879      	ldr	r1, [r7, #4]
 8008b48:	4613      	mov	r3, r2
 8008b4a:	009b      	lsls	r3, r3, #2
 8008b4c:	4413      	add	r3, r2
 8008b4e:	009b      	lsls	r3, r3, #2
 8008b50:	440b      	add	r3, r1
 8008b52:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008b56:	881b      	ldrh	r3, [r3, #0]
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d104      	bne.n	8008b66 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8008b5c:	6839      	ldr	r1, [r7, #0]
 8008b5e:	6878      	ldr	r0, [r7, #4]
 8008b60:	f000 fb9d 	bl	800929e <USBD_CtlError>
                  break;
 8008b64:	e041      	b.n	8008bea <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008b66:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	da0b      	bge.n	8008b86 <USBD_StdEPReq+0x2b2>
 8008b6e:	7bbb      	ldrb	r3, [r7, #14]
 8008b70:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008b74:	4613      	mov	r3, r2
 8008b76:	009b      	lsls	r3, r3, #2
 8008b78:	4413      	add	r3, r2
 8008b7a:	009b      	lsls	r3, r3, #2
 8008b7c:	3310      	adds	r3, #16
 8008b7e:	687a      	ldr	r2, [r7, #4]
 8008b80:	4413      	add	r3, r2
 8008b82:	3304      	adds	r3, #4
 8008b84:	e00b      	b.n	8008b9e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008b86:	7bbb      	ldrb	r3, [r7, #14]
 8008b88:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008b8c:	4613      	mov	r3, r2
 8008b8e:	009b      	lsls	r3, r3, #2
 8008b90:	4413      	add	r3, r2
 8008b92:	009b      	lsls	r3, r3, #2
 8008b94:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008b98:	687a      	ldr	r2, [r7, #4]
 8008b9a:	4413      	add	r3, r2
 8008b9c:	3304      	adds	r3, #4
 8008b9e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008ba0:	7bbb      	ldrb	r3, [r7, #14]
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d002      	beq.n	8008bac <USBD_StdEPReq+0x2d8>
 8008ba6:	7bbb      	ldrb	r3, [r7, #14]
 8008ba8:	2b80      	cmp	r3, #128	; 0x80
 8008baa:	d103      	bne.n	8008bb4 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8008bac:	68bb      	ldr	r3, [r7, #8]
 8008bae:	2200      	movs	r2, #0
 8008bb0:	601a      	str	r2, [r3, #0]
 8008bb2:	e00e      	b.n	8008bd2 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008bb4:	7bbb      	ldrb	r3, [r7, #14]
 8008bb6:	4619      	mov	r1, r3
 8008bb8:	6878      	ldr	r0, [r7, #4]
 8008bba:	f000 ffb9 	bl	8009b30 <USBD_LL_IsStallEP>
 8008bbe:	4603      	mov	r3, r0
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d003      	beq.n	8008bcc <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8008bc4:	68bb      	ldr	r3, [r7, #8]
 8008bc6:	2201      	movs	r2, #1
 8008bc8:	601a      	str	r2, [r3, #0]
 8008bca:	e002      	b.n	8008bd2 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8008bcc:	68bb      	ldr	r3, [r7, #8]
 8008bce:	2200      	movs	r2, #0
 8008bd0:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008bd2:	68bb      	ldr	r3, [r7, #8]
 8008bd4:	2202      	movs	r2, #2
 8008bd6:	4619      	mov	r1, r3
 8008bd8:	6878      	ldr	r0, [r7, #4]
 8008bda:	f000 fbd1 	bl	8009380 <USBD_CtlSendData>
              break;
 8008bde:	e004      	b.n	8008bea <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8008be0:	6839      	ldr	r1, [r7, #0]
 8008be2:	6878      	ldr	r0, [r7, #4]
 8008be4:	f000 fb5b 	bl	800929e <USBD_CtlError>
              break;
 8008be8:	bf00      	nop
          }
          break;
 8008bea:	e004      	b.n	8008bf6 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8008bec:	6839      	ldr	r1, [r7, #0]
 8008bee:	6878      	ldr	r0, [r7, #4]
 8008bf0:	f000 fb55 	bl	800929e <USBD_CtlError>
          break;
 8008bf4:	bf00      	nop
      }
      break;
 8008bf6:	e005      	b.n	8008c04 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8008bf8:	6839      	ldr	r1, [r7, #0]
 8008bfa:	6878      	ldr	r0, [r7, #4]
 8008bfc:	f000 fb4f 	bl	800929e <USBD_CtlError>
      break;
 8008c00:	e000      	b.n	8008c04 <USBD_StdEPReq+0x330>
      break;
 8008c02:	bf00      	nop
  }

  return ret;
 8008c04:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c06:	4618      	mov	r0, r3
 8008c08:	3710      	adds	r7, #16
 8008c0a:	46bd      	mov	sp, r7
 8008c0c:	bd80      	pop	{r7, pc}
	...

08008c10 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008c10:	b580      	push	{r7, lr}
 8008c12:	b084      	sub	sp, #16
 8008c14:	af00      	add	r7, sp, #0
 8008c16:	6078      	str	r0, [r7, #4]
 8008c18:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008c1a:	2300      	movs	r3, #0
 8008c1c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008c1e:	2300      	movs	r3, #0
 8008c20:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008c22:	2300      	movs	r3, #0
 8008c24:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008c26:	683b      	ldr	r3, [r7, #0]
 8008c28:	885b      	ldrh	r3, [r3, #2]
 8008c2a:	0a1b      	lsrs	r3, r3, #8
 8008c2c:	b29b      	uxth	r3, r3
 8008c2e:	3b01      	subs	r3, #1
 8008c30:	2b06      	cmp	r3, #6
 8008c32:	f200 8128 	bhi.w	8008e86 <USBD_GetDescriptor+0x276>
 8008c36:	a201      	add	r2, pc, #4	; (adr r2, 8008c3c <USBD_GetDescriptor+0x2c>)
 8008c38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c3c:	08008c59 	.word	0x08008c59
 8008c40:	08008c71 	.word	0x08008c71
 8008c44:	08008cb1 	.word	0x08008cb1
 8008c48:	08008e87 	.word	0x08008e87
 8008c4c:	08008e87 	.word	0x08008e87
 8008c50:	08008e27 	.word	0x08008e27
 8008c54:	08008e53 	.word	0x08008e53
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	687a      	ldr	r2, [r7, #4]
 8008c62:	7c12      	ldrb	r2, [r2, #16]
 8008c64:	f107 0108 	add.w	r1, r7, #8
 8008c68:	4610      	mov	r0, r2
 8008c6a:	4798      	blx	r3
 8008c6c:	60f8      	str	r0, [r7, #12]
      break;
 8008c6e:	e112      	b.n	8008e96 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	7c1b      	ldrb	r3, [r3, #16]
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d10d      	bne.n	8008c94 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008c7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c80:	f107 0208 	add.w	r2, r7, #8
 8008c84:	4610      	mov	r0, r2
 8008c86:	4798      	blx	r3
 8008c88:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	3301      	adds	r3, #1
 8008c8e:	2202      	movs	r2, #2
 8008c90:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008c92:	e100      	b.n	8008e96 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008c9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c9c:	f107 0208 	add.w	r2, r7, #8
 8008ca0:	4610      	mov	r0, r2
 8008ca2:	4798      	blx	r3
 8008ca4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	3301      	adds	r3, #1
 8008caa:	2202      	movs	r2, #2
 8008cac:	701a      	strb	r2, [r3, #0]
      break;
 8008cae:	e0f2      	b.n	8008e96 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008cb0:	683b      	ldr	r3, [r7, #0]
 8008cb2:	885b      	ldrh	r3, [r3, #2]
 8008cb4:	b2db      	uxtb	r3, r3
 8008cb6:	2b05      	cmp	r3, #5
 8008cb8:	f200 80ac 	bhi.w	8008e14 <USBD_GetDescriptor+0x204>
 8008cbc:	a201      	add	r2, pc, #4	; (adr r2, 8008cc4 <USBD_GetDescriptor+0xb4>)
 8008cbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cc2:	bf00      	nop
 8008cc4:	08008cdd 	.word	0x08008cdd
 8008cc8:	08008d11 	.word	0x08008d11
 8008ccc:	08008d45 	.word	0x08008d45
 8008cd0:	08008d79 	.word	0x08008d79
 8008cd4:	08008dad 	.word	0x08008dad
 8008cd8:	08008de1 	.word	0x08008de1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008ce2:	685b      	ldr	r3, [r3, #4]
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d00b      	beq.n	8008d00 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008cee:	685b      	ldr	r3, [r3, #4]
 8008cf0:	687a      	ldr	r2, [r7, #4]
 8008cf2:	7c12      	ldrb	r2, [r2, #16]
 8008cf4:	f107 0108 	add.w	r1, r7, #8
 8008cf8:	4610      	mov	r0, r2
 8008cfa:	4798      	blx	r3
 8008cfc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008cfe:	e091      	b.n	8008e24 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008d00:	6839      	ldr	r1, [r7, #0]
 8008d02:	6878      	ldr	r0, [r7, #4]
 8008d04:	f000 facb 	bl	800929e <USBD_CtlError>
            err++;
 8008d08:	7afb      	ldrb	r3, [r7, #11]
 8008d0a:	3301      	adds	r3, #1
 8008d0c:	72fb      	strb	r3, [r7, #11]
          break;
 8008d0e:	e089      	b.n	8008e24 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008d16:	689b      	ldr	r3, [r3, #8]
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d00b      	beq.n	8008d34 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008d22:	689b      	ldr	r3, [r3, #8]
 8008d24:	687a      	ldr	r2, [r7, #4]
 8008d26:	7c12      	ldrb	r2, [r2, #16]
 8008d28:	f107 0108 	add.w	r1, r7, #8
 8008d2c:	4610      	mov	r0, r2
 8008d2e:	4798      	blx	r3
 8008d30:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008d32:	e077      	b.n	8008e24 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008d34:	6839      	ldr	r1, [r7, #0]
 8008d36:	6878      	ldr	r0, [r7, #4]
 8008d38:	f000 fab1 	bl	800929e <USBD_CtlError>
            err++;
 8008d3c:	7afb      	ldrb	r3, [r7, #11]
 8008d3e:	3301      	adds	r3, #1
 8008d40:	72fb      	strb	r3, [r7, #11]
          break;
 8008d42:	e06f      	b.n	8008e24 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008d4a:	68db      	ldr	r3, [r3, #12]
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d00b      	beq.n	8008d68 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008d56:	68db      	ldr	r3, [r3, #12]
 8008d58:	687a      	ldr	r2, [r7, #4]
 8008d5a:	7c12      	ldrb	r2, [r2, #16]
 8008d5c:	f107 0108 	add.w	r1, r7, #8
 8008d60:	4610      	mov	r0, r2
 8008d62:	4798      	blx	r3
 8008d64:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008d66:	e05d      	b.n	8008e24 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008d68:	6839      	ldr	r1, [r7, #0]
 8008d6a:	6878      	ldr	r0, [r7, #4]
 8008d6c:	f000 fa97 	bl	800929e <USBD_CtlError>
            err++;
 8008d70:	7afb      	ldrb	r3, [r7, #11]
 8008d72:	3301      	adds	r3, #1
 8008d74:	72fb      	strb	r3, [r7, #11]
          break;
 8008d76:	e055      	b.n	8008e24 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008d7e:	691b      	ldr	r3, [r3, #16]
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d00b      	beq.n	8008d9c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008d8a:	691b      	ldr	r3, [r3, #16]
 8008d8c:	687a      	ldr	r2, [r7, #4]
 8008d8e:	7c12      	ldrb	r2, [r2, #16]
 8008d90:	f107 0108 	add.w	r1, r7, #8
 8008d94:	4610      	mov	r0, r2
 8008d96:	4798      	blx	r3
 8008d98:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008d9a:	e043      	b.n	8008e24 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008d9c:	6839      	ldr	r1, [r7, #0]
 8008d9e:	6878      	ldr	r0, [r7, #4]
 8008da0:	f000 fa7d 	bl	800929e <USBD_CtlError>
            err++;
 8008da4:	7afb      	ldrb	r3, [r7, #11]
 8008da6:	3301      	adds	r3, #1
 8008da8:	72fb      	strb	r3, [r7, #11]
          break;
 8008daa:	e03b      	b.n	8008e24 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008db2:	695b      	ldr	r3, [r3, #20]
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d00b      	beq.n	8008dd0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008dbe:	695b      	ldr	r3, [r3, #20]
 8008dc0:	687a      	ldr	r2, [r7, #4]
 8008dc2:	7c12      	ldrb	r2, [r2, #16]
 8008dc4:	f107 0108 	add.w	r1, r7, #8
 8008dc8:	4610      	mov	r0, r2
 8008dca:	4798      	blx	r3
 8008dcc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008dce:	e029      	b.n	8008e24 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008dd0:	6839      	ldr	r1, [r7, #0]
 8008dd2:	6878      	ldr	r0, [r7, #4]
 8008dd4:	f000 fa63 	bl	800929e <USBD_CtlError>
            err++;
 8008dd8:	7afb      	ldrb	r3, [r7, #11]
 8008dda:	3301      	adds	r3, #1
 8008ddc:	72fb      	strb	r3, [r7, #11]
          break;
 8008dde:	e021      	b.n	8008e24 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008de6:	699b      	ldr	r3, [r3, #24]
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d00b      	beq.n	8008e04 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008df2:	699b      	ldr	r3, [r3, #24]
 8008df4:	687a      	ldr	r2, [r7, #4]
 8008df6:	7c12      	ldrb	r2, [r2, #16]
 8008df8:	f107 0108 	add.w	r1, r7, #8
 8008dfc:	4610      	mov	r0, r2
 8008dfe:	4798      	blx	r3
 8008e00:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008e02:	e00f      	b.n	8008e24 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008e04:	6839      	ldr	r1, [r7, #0]
 8008e06:	6878      	ldr	r0, [r7, #4]
 8008e08:	f000 fa49 	bl	800929e <USBD_CtlError>
            err++;
 8008e0c:	7afb      	ldrb	r3, [r7, #11]
 8008e0e:	3301      	adds	r3, #1
 8008e10:	72fb      	strb	r3, [r7, #11]
          break;
 8008e12:	e007      	b.n	8008e24 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8008e14:	6839      	ldr	r1, [r7, #0]
 8008e16:	6878      	ldr	r0, [r7, #4]
 8008e18:	f000 fa41 	bl	800929e <USBD_CtlError>
          err++;
 8008e1c:	7afb      	ldrb	r3, [r7, #11]
 8008e1e:	3301      	adds	r3, #1
 8008e20:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8008e22:	bf00      	nop
      }
      break;
 8008e24:	e037      	b.n	8008e96 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	7c1b      	ldrb	r3, [r3, #16]
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d109      	bne.n	8008e42 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008e34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e36:	f107 0208 	add.w	r2, r7, #8
 8008e3a:	4610      	mov	r0, r2
 8008e3c:	4798      	blx	r3
 8008e3e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008e40:	e029      	b.n	8008e96 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008e42:	6839      	ldr	r1, [r7, #0]
 8008e44:	6878      	ldr	r0, [r7, #4]
 8008e46:	f000 fa2a 	bl	800929e <USBD_CtlError>
        err++;
 8008e4a:	7afb      	ldrb	r3, [r7, #11]
 8008e4c:	3301      	adds	r3, #1
 8008e4e:	72fb      	strb	r3, [r7, #11]
      break;
 8008e50:	e021      	b.n	8008e96 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	7c1b      	ldrb	r3, [r3, #16]
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d10d      	bne.n	8008e76 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e62:	f107 0208 	add.w	r2, r7, #8
 8008e66:	4610      	mov	r0, r2
 8008e68:	4798      	blx	r3
 8008e6a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	3301      	adds	r3, #1
 8008e70:	2207      	movs	r2, #7
 8008e72:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008e74:	e00f      	b.n	8008e96 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008e76:	6839      	ldr	r1, [r7, #0]
 8008e78:	6878      	ldr	r0, [r7, #4]
 8008e7a:	f000 fa10 	bl	800929e <USBD_CtlError>
        err++;
 8008e7e:	7afb      	ldrb	r3, [r7, #11]
 8008e80:	3301      	adds	r3, #1
 8008e82:	72fb      	strb	r3, [r7, #11]
      break;
 8008e84:	e007      	b.n	8008e96 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8008e86:	6839      	ldr	r1, [r7, #0]
 8008e88:	6878      	ldr	r0, [r7, #4]
 8008e8a:	f000 fa08 	bl	800929e <USBD_CtlError>
      err++;
 8008e8e:	7afb      	ldrb	r3, [r7, #11]
 8008e90:	3301      	adds	r3, #1
 8008e92:	72fb      	strb	r3, [r7, #11]
      break;
 8008e94:	bf00      	nop
  }

  if (err != 0U)
 8008e96:	7afb      	ldrb	r3, [r7, #11]
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d11e      	bne.n	8008eda <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8008e9c:	683b      	ldr	r3, [r7, #0]
 8008e9e:	88db      	ldrh	r3, [r3, #6]
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d016      	beq.n	8008ed2 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8008ea4:	893b      	ldrh	r3, [r7, #8]
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d00e      	beq.n	8008ec8 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8008eaa:	683b      	ldr	r3, [r7, #0]
 8008eac:	88da      	ldrh	r2, [r3, #6]
 8008eae:	893b      	ldrh	r3, [r7, #8]
 8008eb0:	4293      	cmp	r3, r2
 8008eb2:	bf28      	it	cs
 8008eb4:	4613      	movcs	r3, r2
 8008eb6:	b29b      	uxth	r3, r3
 8008eb8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008eba:	893b      	ldrh	r3, [r7, #8]
 8008ebc:	461a      	mov	r2, r3
 8008ebe:	68f9      	ldr	r1, [r7, #12]
 8008ec0:	6878      	ldr	r0, [r7, #4]
 8008ec2:	f000 fa5d 	bl	8009380 <USBD_CtlSendData>
 8008ec6:	e009      	b.n	8008edc <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8008ec8:	6839      	ldr	r1, [r7, #0]
 8008eca:	6878      	ldr	r0, [r7, #4]
 8008ecc:	f000 f9e7 	bl	800929e <USBD_CtlError>
 8008ed0:	e004      	b.n	8008edc <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8008ed2:	6878      	ldr	r0, [r7, #4]
 8008ed4:	f000 fa91 	bl	80093fa <USBD_CtlSendStatus>
 8008ed8:	e000      	b.n	8008edc <USBD_GetDescriptor+0x2cc>
    return;
 8008eda:	bf00      	nop
  }
}
 8008edc:	3710      	adds	r7, #16
 8008ede:	46bd      	mov	sp, r7
 8008ee0:	bd80      	pop	{r7, pc}
 8008ee2:	bf00      	nop

08008ee4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008ee4:	b580      	push	{r7, lr}
 8008ee6:	b084      	sub	sp, #16
 8008ee8:	af00      	add	r7, sp, #0
 8008eea:	6078      	str	r0, [r7, #4]
 8008eec:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008eee:	683b      	ldr	r3, [r7, #0]
 8008ef0:	889b      	ldrh	r3, [r3, #4]
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d131      	bne.n	8008f5a <USBD_SetAddress+0x76>
 8008ef6:	683b      	ldr	r3, [r7, #0]
 8008ef8:	88db      	ldrh	r3, [r3, #6]
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d12d      	bne.n	8008f5a <USBD_SetAddress+0x76>
 8008efe:	683b      	ldr	r3, [r7, #0]
 8008f00:	885b      	ldrh	r3, [r3, #2]
 8008f02:	2b7f      	cmp	r3, #127	; 0x7f
 8008f04:	d829      	bhi.n	8008f5a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008f06:	683b      	ldr	r3, [r7, #0]
 8008f08:	885b      	ldrh	r3, [r3, #2]
 8008f0a:	b2db      	uxtb	r3, r3
 8008f0c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008f10:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008f18:	b2db      	uxtb	r3, r3
 8008f1a:	2b03      	cmp	r3, #3
 8008f1c:	d104      	bne.n	8008f28 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8008f1e:	6839      	ldr	r1, [r7, #0]
 8008f20:	6878      	ldr	r0, [r7, #4]
 8008f22:	f000 f9bc 	bl	800929e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008f26:	e01d      	b.n	8008f64 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	7bfa      	ldrb	r2, [r7, #15]
 8008f2c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008f30:	7bfb      	ldrb	r3, [r7, #15]
 8008f32:	4619      	mov	r1, r3
 8008f34:	6878      	ldr	r0, [r7, #4]
 8008f36:	f000 fe27 	bl	8009b88 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8008f3a:	6878      	ldr	r0, [r7, #4]
 8008f3c:	f000 fa5d 	bl	80093fa <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008f40:	7bfb      	ldrb	r3, [r7, #15]
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d004      	beq.n	8008f50 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	2202      	movs	r2, #2
 8008f4a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008f4e:	e009      	b.n	8008f64 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	2201      	movs	r2, #1
 8008f54:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008f58:	e004      	b.n	8008f64 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008f5a:	6839      	ldr	r1, [r7, #0]
 8008f5c:	6878      	ldr	r0, [r7, #4]
 8008f5e:	f000 f99e 	bl	800929e <USBD_CtlError>
  }
}
 8008f62:	bf00      	nop
 8008f64:	bf00      	nop
 8008f66:	3710      	adds	r7, #16
 8008f68:	46bd      	mov	sp, r7
 8008f6a:	bd80      	pop	{r7, pc}

08008f6c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008f6c:	b580      	push	{r7, lr}
 8008f6e:	b084      	sub	sp, #16
 8008f70:	af00      	add	r7, sp, #0
 8008f72:	6078      	str	r0, [r7, #4]
 8008f74:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008f76:	2300      	movs	r3, #0
 8008f78:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008f7a:	683b      	ldr	r3, [r7, #0]
 8008f7c:	885b      	ldrh	r3, [r3, #2]
 8008f7e:	b2da      	uxtb	r2, r3
 8008f80:	4b4e      	ldr	r3, [pc, #312]	; (80090bc <USBD_SetConfig+0x150>)
 8008f82:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008f84:	4b4d      	ldr	r3, [pc, #308]	; (80090bc <USBD_SetConfig+0x150>)
 8008f86:	781b      	ldrb	r3, [r3, #0]
 8008f88:	2b01      	cmp	r3, #1
 8008f8a:	d905      	bls.n	8008f98 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008f8c:	6839      	ldr	r1, [r7, #0]
 8008f8e:	6878      	ldr	r0, [r7, #4]
 8008f90:	f000 f985 	bl	800929e <USBD_CtlError>
    return USBD_FAIL;
 8008f94:	2303      	movs	r3, #3
 8008f96:	e08c      	b.n	80090b2 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008f9e:	b2db      	uxtb	r3, r3
 8008fa0:	2b02      	cmp	r3, #2
 8008fa2:	d002      	beq.n	8008faa <USBD_SetConfig+0x3e>
 8008fa4:	2b03      	cmp	r3, #3
 8008fa6:	d029      	beq.n	8008ffc <USBD_SetConfig+0x90>
 8008fa8:	e075      	b.n	8009096 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8008faa:	4b44      	ldr	r3, [pc, #272]	; (80090bc <USBD_SetConfig+0x150>)
 8008fac:	781b      	ldrb	r3, [r3, #0]
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d020      	beq.n	8008ff4 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8008fb2:	4b42      	ldr	r3, [pc, #264]	; (80090bc <USBD_SetConfig+0x150>)
 8008fb4:	781b      	ldrb	r3, [r3, #0]
 8008fb6:	461a      	mov	r2, r3
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008fbc:	4b3f      	ldr	r3, [pc, #252]	; (80090bc <USBD_SetConfig+0x150>)
 8008fbe:	781b      	ldrb	r3, [r3, #0]
 8008fc0:	4619      	mov	r1, r3
 8008fc2:	6878      	ldr	r0, [r7, #4]
 8008fc4:	f7fe ffe7 	bl	8007f96 <USBD_SetClassConfig>
 8008fc8:	4603      	mov	r3, r0
 8008fca:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8008fcc:	7bfb      	ldrb	r3, [r7, #15]
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d008      	beq.n	8008fe4 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8008fd2:	6839      	ldr	r1, [r7, #0]
 8008fd4:	6878      	ldr	r0, [r7, #4]
 8008fd6:	f000 f962 	bl	800929e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	2202      	movs	r2, #2
 8008fde:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008fe2:	e065      	b.n	80090b0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008fe4:	6878      	ldr	r0, [r7, #4]
 8008fe6:	f000 fa08 	bl	80093fa <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	2203      	movs	r2, #3
 8008fee:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008ff2:	e05d      	b.n	80090b0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008ff4:	6878      	ldr	r0, [r7, #4]
 8008ff6:	f000 fa00 	bl	80093fa <USBD_CtlSendStatus>
      break;
 8008ffa:	e059      	b.n	80090b0 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8008ffc:	4b2f      	ldr	r3, [pc, #188]	; (80090bc <USBD_SetConfig+0x150>)
 8008ffe:	781b      	ldrb	r3, [r3, #0]
 8009000:	2b00      	cmp	r3, #0
 8009002:	d112      	bne.n	800902a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	2202      	movs	r2, #2
 8009008:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800900c:	4b2b      	ldr	r3, [pc, #172]	; (80090bc <USBD_SetConfig+0x150>)
 800900e:	781b      	ldrb	r3, [r3, #0]
 8009010:	461a      	mov	r2, r3
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009016:	4b29      	ldr	r3, [pc, #164]	; (80090bc <USBD_SetConfig+0x150>)
 8009018:	781b      	ldrb	r3, [r3, #0]
 800901a:	4619      	mov	r1, r3
 800901c:	6878      	ldr	r0, [r7, #4]
 800901e:	f7fe ffd6 	bl	8007fce <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8009022:	6878      	ldr	r0, [r7, #4]
 8009024:	f000 f9e9 	bl	80093fa <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009028:	e042      	b.n	80090b0 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800902a:	4b24      	ldr	r3, [pc, #144]	; (80090bc <USBD_SetConfig+0x150>)
 800902c:	781b      	ldrb	r3, [r3, #0]
 800902e:	461a      	mov	r2, r3
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	685b      	ldr	r3, [r3, #4]
 8009034:	429a      	cmp	r2, r3
 8009036:	d02a      	beq.n	800908e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	685b      	ldr	r3, [r3, #4]
 800903c:	b2db      	uxtb	r3, r3
 800903e:	4619      	mov	r1, r3
 8009040:	6878      	ldr	r0, [r7, #4]
 8009042:	f7fe ffc4 	bl	8007fce <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8009046:	4b1d      	ldr	r3, [pc, #116]	; (80090bc <USBD_SetConfig+0x150>)
 8009048:	781b      	ldrb	r3, [r3, #0]
 800904a:	461a      	mov	r2, r3
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009050:	4b1a      	ldr	r3, [pc, #104]	; (80090bc <USBD_SetConfig+0x150>)
 8009052:	781b      	ldrb	r3, [r3, #0]
 8009054:	4619      	mov	r1, r3
 8009056:	6878      	ldr	r0, [r7, #4]
 8009058:	f7fe ff9d 	bl	8007f96 <USBD_SetClassConfig>
 800905c:	4603      	mov	r3, r0
 800905e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8009060:	7bfb      	ldrb	r3, [r7, #15]
 8009062:	2b00      	cmp	r3, #0
 8009064:	d00f      	beq.n	8009086 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8009066:	6839      	ldr	r1, [r7, #0]
 8009068:	6878      	ldr	r0, [r7, #4]
 800906a:	f000 f918 	bl	800929e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	685b      	ldr	r3, [r3, #4]
 8009072:	b2db      	uxtb	r3, r3
 8009074:	4619      	mov	r1, r3
 8009076:	6878      	ldr	r0, [r7, #4]
 8009078:	f7fe ffa9 	bl	8007fce <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	2202      	movs	r2, #2
 8009080:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8009084:	e014      	b.n	80090b0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8009086:	6878      	ldr	r0, [r7, #4]
 8009088:	f000 f9b7 	bl	80093fa <USBD_CtlSendStatus>
      break;
 800908c:	e010      	b.n	80090b0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800908e:	6878      	ldr	r0, [r7, #4]
 8009090:	f000 f9b3 	bl	80093fa <USBD_CtlSendStatus>
      break;
 8009094:	e00c      	b.n	80090b0 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8009096:	6839      	ldr	r1, [r7, #0]
 8009098:	6878      	ldr	r0, [r7, #4]
 800909a:	f000 f900 	bl	800929e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800909e:	4b07      	ldr	r3, [pc, #28]	; (80090bc <USBD_SetConfig+0x150>)
 80090a0:	781b      	ldrb	r3, [r3, #0]
 80090a2:	4619      	mov	r1, r3
 80090a4:	6878      	ldr	r0, [r7, #4]
 80090a6:	f7fe ff92 	bl	8007fce <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80090aa:	2303      	movs	r3, #3
 80090ac:	73fb      	strb	r3, [r7, #15]
      break;
 80090ae:	bf00      	nop
  }

  return ret;
 80090b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80090b2:	4618      	mov	r0, r3
 80090b4:	3710      	adds	r7, #16
 80090b6:	46bd      	mov	sp, r7
 80090b8:	bd80      	pop	{r7, pc}
 80090ba:	bf00      	nop
 80090bc:	2000069c 	.word	0x2000069c

080090c0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80090c0:	b580      	push	{r7, lr}
 80090c2:	b082      	sub	sp, #8
 80090c4:	af00      	add	r7, sp, #0
 80090c6:	6078      	str	r0, [r7, #4]
 80090c8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80090ca:	683b      	ldr	r3, [r7, #0]
 80090cc:	88db      	ldrh	r3, [r3, #6]
 80090ce:	2b01      	cmp	r3, #1
 80090d0:	d004      	beq.n	80090dc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80090d2:	6839      	ldr	r1, [r7, #0]
 80090d4:	6878      	ldr	r0, [r7, #4]
 80090d6:	f000 f8e2 	bl	800929e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80090da:	e023      	b.n	8009124 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80090e2:	b2db      	uxtb	r3, r3
 80090e4:	2b02      	cmp	r3, #2
 80090e6:	dc02      	bgt.n	80090ee <USBD_GetConfig+0x2e>
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	dc03      	bgt.n	80090f4 <USBD_GetConfig+0x34>
 80090ec:	e015      	b.n	800911a <USBD_GetConfig+0x5a>
 80090ee:	2b03      	cmp	r3, #3
 80090f0:	d00b      	beq.n	800910a <USBD_GetConfig+0x4a>
 80090f2:	e012      	b.n	800911a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	2200      	movs	r2, #0
 80090f8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	3308      	adds	r3, #8
 80090fe:	2201      	movs	r2, #1
 8009100:	4619      	mov	r1, r3
 8009102:	6878      	ldr	r0, [r7, #4]
 8009104:	f000 f93c 	bl	8009380 <USBD_CtlSendData>
        break;
 8009108:	e00c      	b.n	8009124 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	3304      	adds	r3, #4
 800910e:	2201      	movs	r2, #1
 8009110:	4619      	mov	r1, r3
 8009112:	6878      	ldr	r0, [r7, #4]
 8009114:	f000 f934 	bl	8009380 <USBD_CtlSendData>
        break;
 8009118:	e004      	b.n	8009124 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800911a:	6839      	ldr	r1, [r7, #0]
 800911c:	6878      	ldr	r0, [r7, #4]
 800911e:	f000 f8be 	bl	800929e <USBD_CtlError>
        break;
 8009122:	bf00      	nop
}
 8009124:	bf00      	nop
 8009126:	3708      	adds	r7, #8
 8009128:	46bd      	mov	sp, r7
 800912a:	bd80      	pop	{r7, pc}

0800912c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800912c:	b580      	push	{r7, lr}
 800912e:	b082      	sub	sp, #8
 8009130:	af00      	add	r7, sp, #0
 8009132:	6078      	str	r0, [r7, #4]
 8009134:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800913c:	b2db      	uxtb	r3, r3
 800913e:	3b01      	subs	r3, #1
 8009140:	2b02      	cmp	r3, #2
 8009142:	d81e      	bhi.n	8009182 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009144:	683b      	ldr	r3, [r7, #0]
 8009146:	88db      	ldrh	r3, [r3, #6]
 8009148:	2b02      	cmp	r3, #2
 800914a:	d004      	beq.n	8009156 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800914c:	6839      	ldr	r1, [r7, #0]
 800914e:	6878      	ldr	r0, [r7, #4]
 8009150:	f000 f8a5 	bl	800929e <USBD_CtlError>
        break;
 8009154:	e01a      	b.n	800918c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	2201      	movs	r2, #1
 800915a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8009162:	2b00      	cmp	r3, #0
 8009164:	d005      	beq.n	8009172 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	68db      	ldr	r3, [r3, #12]
 800916a:	f043 0202 	orr.w	r2, r3, #2
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	330c      	adds	r3, #12
 8009176:	2202      	movs	r2, #2
 8009178:	4619      	mov	r1, r3
 800917a:	6878      	ldr	r0, [r7, #4]
 800917c:	f000 f900 	bl	8009380 <USBD_CtlSendData>
      break;
 8009180:	e004      	b.n	800918c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8009182:	6839      	ldr	r1, [r7, #0]
 8009184:	6878      	ldr	r0, [r7, #4]
 8009186:	f000 f88a 	bl	800929e <USBD_CtlError>
      break;
 800918a:	bf00      	nop
  }
}
 800918c:	bf00      	nop
 800918e:	3708      	adds	r7, #8
 8009190:	46bd      	mov	sp, r7
 8009192:	bd80      	pop	{r7, pc}

08009194 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009194:	b580      	push	{r7, lr}
 8009196:	b082      	sub	sp, #8
 8009198:	af00      	add	r7, sp, #0
 800919a:	6078      	str	r0, [r7, #4]
 800919c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800919e:	683b      	ldr	r3, [r7, #0]
 80091a0:	885b      	ldrh	r3, [r3, #2]
 80091a2:	2b01      	cmp	r3, #1
 80091a4:	d107      	bne.n	80091b6 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	2201      	movs	r2, #1
 80091aa:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80091ae:	6878      	ldr	r0, [r7, #4]
 80091b0:	f000 f923 	bl	80093fa <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80091b4:	e013      	b.n	80091de <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80091b6:	683b      	ldr	r3, [r7, #0]
 80091b8:	885b      	ldrh	r3, [r3, #2]
 80091ba:	2b02      	cmp	r3, #2
 80091bc:	d10b      	bne.n	80091d6 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 80091be:	683b      	ldr	r3, [r7, #0]
 80091c0:	889b      	ldrh	r3, [r3, #4]
 80091c2:	0a1b      	lsrs	r3, r3, #8
 80091c4:	b29b      	uxth	r3, r3
 80091c6:	b2da      	uxtb	r2, r3
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80091ce:	6878      	ldr	r0, [r7, #4]
 80091d0:	f000 f913 	bl	80093fa <USBD_CtlSendStatus>
}
 80091d4:	e003      	b.n	80091de <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80091d6:	6839      	ldr	r1, [r7, #0]
 80091d8:	6878      	ldr	r0, [r7, #4]
 80091da:	f000 f860 	bl	800929e <USBD_CtlError>
}
 80091de:	bf00      	nop
 80091e0:	3708      	adds	r7, #8
 80091e2:	46bd      	mov	sp, r7
 80091e4:	bd80      	pop	{r7, pc}

080091e6 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80091e6:	b580      	push	{r7, lr}
 80091e8:	b082      	sub	sp, #8
 80091ea:	af00      	add	r7, sp, #0
 80091ec:	6078      	str	r0, [r7, #4]
 80091ee:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80091f6:	b2db      	uxtb	r3, r3
 80091f8:	3b01      	subs	r3, #1
 80091fa:	2b02      	cmp	r3, #2
 80091fc:	d80b      	bhi.n	8009216 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80091fe:	683b      	ldr	r3, [r7, #0]
 8009200:	885b      	ldrh	r3, [r3, #2]
 8009202:	2b01      	cmp	r3, #1
 8009204:	d10c      	bne.n	8009220 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	2200      	movs	r2, #0
 800920a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800920e:	6878      	ldr	r0, [r7, #4]
 8009210:	f000 f8f3 	bl	80093fa <USBD_CtlSendStatus>
      }
      break;
 8009214:	e004      	b.n	8009220 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8009216:	6839      	ldr	r1, [r7, #0]
 8009218:	6878      	ldr	r0, [r7, #4]
 800921a:	f000 f840 	bl	800929e <USBD_CtlError>
      break;
 800921e:	e000      	b.n	8009222 <USBD_ClrFeature+0x3c>
      break;
 8009220:	bf00      	nop
  }
}
 8009222:	bf00      	nop
 8009224:	3708      	adds	r7, #8
 8009226:	46bd      	mov	sp, r7
 8009228:	bd80      	pop	{r7, pc}

0800922a <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800922a:	b580      	push	{r7, lr}
 800922c:	b084      	sub	sp, #16
 800922e:	af00      	add	r7, sp, #0
 8009230:	6078      	str	r0, [r7, #4]
 8009232:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8009234:	683b      	ldr	r3, [r7, #0]
 8009236:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	781a      	ldrb	r2, [r3, #0]
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	3301      	adds	r3, #1
 8009244:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	781a      	ldrb	r2, [r3, #0]
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	3301      	adds	r3, #1
 8009252:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8009254:	68f8      	ldr	r0, [r7, #12]
 8009256:	f7ff fa41 	bl	80086dc <SWAPBYTE>
 800925a:	4603      	mov	r3, r0
 800925c:	461a      	mov	r2, r3
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	3301      	adds	r3, #1
 8009266:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	3301      	adds	r3, #1
 800926c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800926e:	68f8      	ldr	r0, [r7, #12]
 8009270:	f7ff fa34 	bl	80086dc <SWAPBYTE>
 8009274:	4603      	mov	r3, r0
 8009276:	461a      	mov	r2, r3
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	3301      	adds	r3, #1
 8009280:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	3301      	adds	r3, #1
 8009286:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8009288:	68f8      	ldr	r0, [r7, #12]
 800928a:	f7ff fa27 	bl	80086dc <SWAPBYTE>
 800928e:	4603      	mov	r3, r0
 8009290:	461a      	mov	r2, r3
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	80da      	strh	r2, [r3, #6]
}
 8009296:	bf00      	nop
 8009298:	3710      	adds	r7, #16
 800929a:	46bd      	mov	sp, r7
 800929c:	bd80      	pop	{r7, pc}

0800929e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800929e:	b580      	push	{r7, lr}
 80092a0:	b082      	sub	sp, #8
 80092a2:	af00      	add	r7, sp, #0
 80092a4:	6078      	str	r0, [r7, #4]
 80092a6:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80092a8:	2180      	movs	r1, #128	; 0x80
 80092aa:	6878      	ldr	r0, [r7, #4]
 80092ac:	f000 fc02 	bl	8009ab4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80092b0:	2100      	movs	r1, #0
 80092b2:	6878      	ldr	r0, [r7, #4]
 80092b4:	f000 fbfe 	bl	8009ab4 <USBD_LL_StallEP>
}
 80092b8:	bf00      	nop
 80092ba:	3708      	adds	r7, #8
 80092bc:	46bd      	mov	sp, r7
 80092be:	bd80      	pop	{r7, pc}

080092c0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80092c0:	b580      	push	{r7, lr}
 80092c2:	b086      	sub	sp, #24
 80092c4:	af00      	add	r7, sp, #0
 80092c6:	60f8      	str	r0, [r7, #12]
 80092c8:	60b9      	str	r1, [r7, #8]
 80092ca:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80092cc:	2300      	movs	r3, #0
 80092ce:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d036      	beq.n	8009344 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80092da:	6938      	ldr	r0, [r7, #16]
 80092dc:	f000 f836 	bl	800934c <USBD_GetLen>
 80092e0:	4603      	mov	r3, r0
 80092e2:	3301      	adds	r3, #1
 80092e4:	b29b      	uxth	r3, r3
 80092e6:	005b      	lsls	r3, r3, #1
 80092e8:	b29a      	uxth	r2, r3
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80092ee:	7dfb      	ldrb	r3, [r7, #23]
 80092f0:	68ba      	ldr	r2, [r7, #8]
 80092f2:	4413      	add	r3, r2
 80092f4:	687a      	ldr	r2, [r7, #4]
 80092f6:	7812      	ldrb	r2, [r2, #0]
 80092f8:	701a      	strb	r2, [r3, #0]
  idx++;
 80092fa:	7dfb      	ldrb	r3, [r7, #23]
 80092fc:	3301      	adds	r3, #1
 80092fe:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8009300:	7dfb      	ldrb	r3, [r7, #23]
 8009302:	68ba      	ldr	r2, [r7, #8]
 8009304:	4413      	add	r3, r2
 8009306:	2203      	movs	r2, #3
 8009308:	701a      	strb	r2, [r3, #0]
  idx++;
 800930a:	7dfb      	ldrb	r3, [r7, #23]
 800930c:	3301      	adds	r3, #1
 800930e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8009310:	e013      	b.n	800933a <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8009312:	7dfb      	ldrb	r3, [r7, #23]
 8009314:	68ba      	ldr	r2, [r7, #8]
 8009316:	4413      	add	r3, r2
 8009318:	693a      	ldr	r2, [r7, #16]
 800931a:	7812      	ldrb	r2, [r2, #0]
 800931c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800931e:	693b      	ldr	r3, [r7, #16]
 8009320:	3301      	adds	r3, #1
 8009322:	613b      	str	r3, [r7, #16]
    idx++;
 8009324:	7dfb      	ldrb	r3, [r7, #23]
 8009326:	3301      	adds	r3, #1
 8009328:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800932a:	7dfb      	ldrb	r3, [r7, #23]
 800932c:	68ba      	ldr	r2, [r7, #8]
 800932e:	4413      	add	r3, r2
 8009330:	2200      	movs	r2, #0
 8009332:	701a      	strb	r2, [r3, #0]
    idx++;
 8009334:	7dfb      	ldrb	r3, [r7, #23]
 8009336:	3301      	adds	r3, #1
 8009338:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800933a:	693b      	ldr	r3, [r7, #16]
 800933c:	781b      	ldrb	r3, [r3, #0]
 800933e:	2b00      	cmp	r3, #0
 8009340:	d1e7      	bne.n	8009312 <USBD_GetString+0x52>
 8009342:	e000      	b.n	8009346 <USBD_GetString+0x86>
    return;
 8009344:	bf00      	nop
  }
}
 8009346:	3718      	adds	r7, #24
 8009348:	46bd      	mov	sp, r7
 800934a:	bd80      	pop	{r7, pc}

0800934c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800934c:	b480      	push	{r7}
 800934e:	b085      	sub	sp, #20
 8009350:	af00      	add	r7, sp, #0
 8009352:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009354:	2300      	movs	r3, #0
 8009356:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800935c:	e005      	b.n	800936a <USBD_GetLen+0x1e>
  {
    len++;
 800935e:	7bfb      	ldrb	r3, [r7, #15]
 8009360:	3301      	adds	r3, #1
 8009362:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8009364:	68bb      	ldr	r3, [r7, #8]
 8009366:	3301      	adds	r3, #1
 8009368:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800936a:	68bb      	ldr	r3, [r7, #8]
 800936c:	781b      	ldrb	r3, [r3, #0]
 800936e:	2b00      	cmp	r3, #0
 8009370:	d1f5      	bne.n	800935e <USBD_GetLen+0x12>
  }

  return len;
 8009372:	7bfb      	ldrb	r3, [r7, #15]
}
 8009374:	4618      	mov	r0, r3
 8009376:	3714      	adds	r7, #20
 8009378:	46bd      	mov	sp, r7
 800937a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800937e:	4770      	bx	lr

08009380 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8009380:	b580      	push	{r7, lr}
 8009382:	b084      	sub	sp, #16
 8009384:	af00      	add	r7, sp, #0
 8009386:	60f8      	str	r0, [r7, #12]
 8009388:	60b9      	str	r1, [r7, #8]
 800938a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	2202      	movs	r2, #2
 8009390:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	687a      	ldr	r2, [r7, #4]
 8009398:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	687a      	ldr	r2, [r7, #4]
 800939e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	68ba      	ldr	r2, [r7, #8]
 80093a4:	2100      	movs	r1, #0
 80093a6:	68f8      	ldr	r0, [r7, #12]
 80093a8:	f000 fc0d 	bl	8009bc6 <USBD_LL_Transmit>

  return USBD_OK;
 80093ac:	2300      	movs	r3, #0
}
 80093ae:	4618      	mov	r0, r3
 80093b0:	3710      	adds	r7, #16
 80093b2:	46bd      	mov	sp, r7
 80093b4:	bd80      	pop	{r7, pc}

080093b6 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80093b6:	b580      	push	{r7, lr}
 80093b8:	b084      	sub	sp, #16
 80093ba:	af00      	add	r7, sp, #0
 80093bc:	60f8      	str	r0, [r7, #12]
 80093be:	60b9      	str	r1, [r7, #8]
 80093c0:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	68ba      	ldr	r2, [r7, #8]
 80093c6:	2100      	movs	r1, #0
 80093c8:	68f8      	ldr	r0, [r7, #12]
 80093ca:	f000 fbfc 	bl	8009bc6 <USBD_LL_Transmit>

  return USBD_OK;
 80093ce:	2300      	movs	r3, #0
}
 80093d0:	4618      	mov	r0, r3
 80093d2:	3710      	adds	r7, #16
 80093d4:	46bd      	mov	sp, r7
 80093d6:	bd80      	pop	{r7, pc}

080093d8 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80093d8:	b580      	push	{r7, lr}
 80093da:	b084      	sub	sp, #16
 80093dc:	af00      	add	r7, sp, #0
 80093de:	60f8      	str	r0, [r7, #12]
 80093e0:	60b9      	str	r1, [r7, #8]
 80093e2:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	68ba      	ldr	r2, [r7, #8]
 80093e8:	2100      	movs	r1, #0
 80093ea:	68f8      	ldr	r0, [r7, #12]
 80093ec:	f000 fc0c 	bl	8009c08 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80093f0:	2300      	movs	r3, #0
}
 80093f2:	4618      	mov	r0, r3
 80093f4:	3710      	adds	r7, #16
 80093f6:	46bd      	mov	sp, r7
 80093f8:	bd80      	pop	{r7, pc}

080093fa <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80093fa:	b580      	push	{r7, lr}
 80093fc:	b082      	sub	sp, #8
 80093fe:	af00      	add	r7, sp, #0
 8009400:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	2204      	movs	r2, #4
 8009406:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800940a:	2300      	movs	r3, #0
 800940c:	2200      	movs	r2, #0
 800940e:	2100      	movs	r1, #0
 8009410:	6878      	ldr	r0, [r7, #4]
 8009412:	f000 fbd8 	bl	8009bc6 <USBD_LL_Transmit>

  return USBD_OK;
 8009416:	2300      	movs	r3, #0
}
 8009418:	4618      	mov	r0, r3
 800941a:	3708      	adds	r7, #8
 800941c:	46bd      	mov	sp, r7
 800941e:	bd80      	pop	{r7, pc}

08009420 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009420:	b580      	push	{r7, lr}
 8009422:	b082      	sub	sp, #8
 8009424:	af00      	add	r7, sp, #0
 8009426:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	2205      	movs	r2, #5
 800942c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009430:	2300      	movs	r3, #0
 8009432:	2200      	movs	r2, #0
 8009434:	2100      	movs	r1, #0
 8009436:	6878      	ldr	r0, [r7, #4]
 8009438:	f000 fbe6 	bl	8009c08 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800943c:	2300      	movs	r3, #0
}
 800943e:	4618      	mov	r0, r3
 8009440:	3708      	adds	r7, #8
 8009442:	46bd      	mov	sp, r7
 8009444:	bd80      	pop	{r7, pc}
	...

08009448 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009448:	b580      	push	{r7, lr}
 800944a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800944c:	2200      	movs	r2, #0
 800944e:	490e      	ldr	r1, [pc, #56]	; (8009488 <MX_USB_DEVICE_Init+0x40>)
 8009450:	480e      	ldr	r0, [pc, #56]	; (800948c <MX_USB_DEVICE_Init+0x44>)
 8009452:	f7fe fd23 	bl	8007e9c <USBD_Init>
 8009456:	4603      	mov	r3, r0
 8009458:	2b00      	cmp	r3, #0
 800945a:	d001      	beq.n	8009460 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800945c:	f7f7 fe22 	bl	80010a4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 8009460:	490b      	ldr	r1, [pc, #44]	; (8009490 <MX_USB_DEVICE_Init+0x48>)
 8009462:	480a      	ldr	r0, [pc, #40]	; (800948c <MX_USB_DEVICE_Init+0x44>)
 8009464:	f7fe fd4a 	bl	8007efc <USBD_RegisterClass>
 8009468:	4603      	mov	r3, r0
 800946a:	2b00      	cmp	r3, #0
 800946c:	d001      	beq.n	8009472 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800946e:	f7f7 fe19 	bl	80010a4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8009472:	4806      	ldr	r0, [pc, #24]	; (800948c <MX_USB_DEVICE_Init+0x44>)
 8009474:	f7fe fd78 	bl	8007f68 <USBD_Start>
 8009478:	4603      	mov	r3, r0
 800947a:	2b00      	cmp	r3, #0
 800947c:	d001      	beq.n	8009482 <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 800947e:	f7f7 fe11 	bl	80010a4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009482:	bf00      	nop
 8009484:	bd80      	pop	{r7, pc}
 8009486:	bf00      	nop
 8009488:	2000011c 	.word	0x2000011c
 800948c:	200006a0 	.word	0x200006a0
 8009490:	20000068 	.word	0x20000068

08009494 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009494:	b480      	push	{r7}
 8009496:	b083      	sub	sp, #12
 8009498:	af00      	add	r7, sp, #0
 800949a:	4603      	mov	r3, r0
 800949c:	6039      	str	r1, [r7, #0]
 800949e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80094a0:	683b      	ldr	r3, [r7, #0]
 80094a2:	2212      	movs	r2, #18
 80094a4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80094a6:	4b03      	ldr	r3, [pc, #12]	; (80094b4 <USBD_FS_DeviceDescriptor+0x20>)
}
 80094a8:	4618      	mov	r0, r3
 80094aa:	370c      	adds	r7, #12
 80094ac:	46bd      	mov	sp, r7
 80094ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094b2:	4770      	bx	lr
 80094b4:	20000138 	.word	0x20000138

080094b8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80094b8:	b480      	push	{r7}
 80094ba:	b083      	sub	sp, #12
 80094bc:	af00      	add	r7, sp, #0
 80094be:	4603      	mov	r3, r0
 80094c0:	6039      	str	r1, [r7, #0]
 80094c2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80094c4:	683b      	ldr	r3, [r7, #0]
 80094c6:	2204      	movs	r2, #4
 80094c8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80094ca:	4b03      	ldr	r3, [pc, #12]	; (80094d8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80094cc:	4618      	mov	r0, r3
 80094ce:	370c      	adds	r7, #12
 80094d0:	46bd      	mov	sp, r7
 80094d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094d6:	4770      	bx	lr
 80094d8:	2000014c 	.word	0x2000014c

080094dc <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80094dc:	b580      	push	{r7, lr}
 80094de:	b082      	sub	sp, #8
 80094e0:	af00      	add	r7, sp, #0
 80094e2:	4603      	mov	r3, r0
 80094e4:	6039      	str	r1, [r7, #0]
 80094e6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80094e8:	79fb      	ldrb	r3, [r7, #7]
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d105      	bne.n	80094fa <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80094ee:	683a      	ldr	r2, [r7, #0]
 80094f0:	4907      	ldr	r1, [pc, #28]	; (8009510 <USBD_FS_ProductStrDescriptor+0x34>)
 80094f2:	4808      	ldr	r0, [pc, #32]	; (8009514 <USBD_FS_ProductStrDescriptor+0x38>)
 80094f4:	f7ff fee4 	bl	80092c0 <USBD_GetString>
 80094f8:	e004      	b.n	8009504 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80094fa:	683a      	ldr	r2, [r7, #0]
 80094fc:	4904      	ldr	r1, [pc, #16]	; (8009510 <USBD_FS_ProductStrDescriptor+0x34>)
 80094fe:	4805      	ldr	r0, [pc, #20]	; (8009514 <USBD_FS_ProductStrDescriptor+0x38>)
 8009500:	f7ff fede 	bl	80092c0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009504:	4b02      	ldr	r3, [pc, #8]	; (8009510 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8009506:	4618      	mov	r0, r3
 8009508:	3708      	adds	r7, #8
 800950a:	46bd      	mov	sp, r7
 800950c:	bd80      	pop	{r7, pc}
 800950e:	bf00      	nop
 8009510:	2000097c 	.word	0x2000097c
 8009514:	08009d44 	.word	0x08009d44

08009518 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009518:	b580      	push	{r7, lr}
 800951a:	b082      	sub	sp, #8
 800951c:	af00      	add	r7, sp, #0
 800951e:	4603      	mov	r3, r0
 8009520:	6039      	str	r1, [r7, #0]
 8009522:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009524:	683a      	ldr	r2, [r7, #0]
 8009526:	4904      	ldr	r1, [pc, #16]	; (8009538 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009528:	4804      	ldr	r0, [pc, #16]	; (800953c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800952a:	f7ff fec9 	bl	80092c0 <USBD_GetString>
  return USBD_StrDesc;
 800952e:	4b02      	ldr	r3, [pc, #8]	; (8009538 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009530:	4618      	mov	r0, r3
 8009532:	3708      	adds	r7, #8
 8009534:	46bd      	mov	sp, r7
 8009536:	bd80      	pop	{r7, pc}
 8009538:	2000097c 	.word	0x2000097c
 800953c:	08009d5c 	.word	0x08009d5c

08009540 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009540:	b580      	push	{r7, lr}
 8009542:	b082      	sub	sp, #8
 8009544:	af00      	add	r7, sp, #0
 8009546:	4603      	mov	r3, r0
 8009548:	6039      	str	r1, [r7, #0]
 800954a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800954c:	683b      	ldr	r3, [r7, #0]
 800954e:	221a      	movs	r2, #26
 8009550:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009552:	f000 f843 	bl	80095dc <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8009556:	4b02      	ldr	r3, [pc, #8]	; (8009560 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8009558:	4618      	mov	r0, r3
 800955a:	3708      	adds	r7, #8
 800955c:	46bd      	mov	sp, r7
 800955e:	bd80      	pop	{r7, pc}
 8009560:	20000150 	.word	0x20000150

08009564 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009564:	b580      	push	{r7, lr}
 8009566:	b082      	sub	sp, #8
 8009568:	af00      	add	r7, sp, #0
 800956a:	4603      	mov	r3, r0
 800956c:	6039      	str	r1, [r7, #0]
 800956e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009570:	79fb      	ldrb	r3, [r7, #7]
 8009572:	2b00      	cmp	r3, #0
 8009574:	d105      	bne.n	8009582 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009576:	683a      	ldr	r2, [r7, #0]
 8009578:	4907      	ldr	r1, [pc, #28]	; (8009598 <USBD_FS_ConfigStrDescriptor+0x34>)
 800957a:	4808      	ldr	r0, [pc, #32]	; (800959c <USBD_FS_ConfigStrDescriptor+0x38>)
 800957c:	f7ff fea0 	bl	80092c0 <USBD_GetString>
 8009580:	e004      	b.n	800958c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009582:	683a      	ldr	r2, [r7, #0]
 8009584:	4904      	ldr	r1, [pc, #16]	; (8009598 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009586:	4805      	ldr	r0, [pc, #20]	; (800959c <USBD_FS_ConfigStrDescriptor+0x38>)
 8009588:	f7ff fe9a 	bl	80092c0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800958c:	4b02      	ldr	r3, [pc, #8]	; (8009598 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800958e:	4618      	mov	r0, r3
 8009590:	3708      	adds	r7, #8
 8009592:	46bd      	mov	sp, r7
 8009594:	bd80      	pop	{r7, pc}
 8009596:	bf00      	nop
 8009598:	2000097c 	.word	0x2000097c
 800959c:	08009d70 	.word	0x08009d70

080095a0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80095a0:	b580      	push	{r7, lr}
 80095a2:	b082      	sub	sp, #8
 80095a4:	af00      	add	r7, sp, #0
 80095a6:	4603      	mov	r3, r0
 80095a8:	6039      	str	r1, [r7, #0]
 80095aa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80095ac:	79fb      	ldrb	r3, [r7, #7]
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d105      	bne.n	80095be <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80095b2:	683a      	ldr	r2, [r7, #0]
 80095b4:	4907      	ldr	r1, [pc, #28]	; (80095d4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80095b6:	4808      	ldr	r0, [pc, #32]	; (80095d8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80095b8:	f7ff fe82 	bl	80092c0 <USBD_GetString>
 80095bc:	e004      	b.n	80095c8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80095be:	683a      	ldr	r2, [r7, #0]
 80095c0:	4904      	ldr	r1, [pc, #16]	; (80095d4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80095c2:	4805      	ldr	r0, [pc, #20]	; (80095d8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80095c4:	f7ff fe7c 	bl	80092c0 <USBD_GetString>
  }
  return USBD_StrDesc;
 80095c8:	4b02      	ldr	r3, [pc, #8]	; (80095d4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80095ca:	4618      	mov	r0, r3
 80095cc:	3708      	adds	r7, #8
 80095ce:	46bd      	mov	sp, r7
 80095d0:	bd80      	pop	{r7, pc}
 80095d2:	bf00      	nop
 80095d4:	2000097c 	.word	0x2000097c
 80095d8:	08009d7c 	.word	0x08009d7c

080095dc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80095dc:	b580      	push	{r7, lr}
 80095de:	b084      	sub	sp, #16
 80095e0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80095e2:	4b0f      	ldr	r3, [pc, #60]	; (8009620 <Get_SerialNum+0x44>)
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80095e8:	4b0e      	ldr	r3, [pc, #56]	; (8009624 <Get_SerialNum+0x48>)
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80095ee:	4b0e      	ldr	r3, [pc, #56]	; (8009628 <Get_SerialNum+0x4c>)
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80095f4:	68fa      	ldr	r2, [r7, #12]
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	4413      	add	r3, r2
 80095fa:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d009      	beq.n	8009616 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009602:	2208      	movs	r2, #8
 8009604:	4909      	ldr	r1, [pc, #36]	; (800962c <Get_SerialNum+0x50>)
 8009606:	68f8      	ldr	r0, [r7, #12]
 8009608:	f000 f814 	bl	8009634 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800960c:	2204      	movs	r2, #4
 800960e:	4908      	ldr	r1, [pc, #32]	; (8009630 <Get_SerialNum+0x54>)
 8009610:	68b8      	ldr	r0, [r7, #8]
 8009612:	f000 f80f 	bl	8009634 <IntToUnicode>
  }
}
 8009616:	bf00      	nop
 8009618:	3710      	adds	r7, #16
 800961a:	46bd      	mov	sp, r7
 800961c:	bd80      	pop	{r7, pc}
 800961e:	bf00      	nop
 8009620:	1fff7a10 	.word	0x1fff7a10
 8009624:	1fff7a14 	.word	0x1fff7a14
 8009628:	1fff7a18 	.word	0x1fff7a18
 800962c:	20000152 	.word	0x20000152
 8009630:	20000162 	.word	0x20000162

08009634 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009634:	b480      	push	{r7}
 8009636:	b087      	sub	sp, #28
 8009638:	af00      	add	r7, sp, #0
 800963a:	60f8      	str	r0, [r7, #12]
 800963c:	60b9      	str	r1, [r7, #8]
 800963e:	4613      	mov	r3, r2
 8009640:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009642:	2300      	movs	r3, #0
 8009644:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009646:	2300      	movs	r3, #0
 8009648:	75fb      	strb	r3, [r7, #23]
 800964a:	e027      	b.n	800969c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	0f1b      	lsrs	r3, r3, #28
 8009650:	2b09      	cmp	r3, #9
 8009652:	d80b      	bhi.n	800966c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	0f1b      	lsrs	r3, r3, #28
 8009658:	b2da      	uxtb	r2, r3
 800965a:	7dfb      	ldrb	r3, [r7, #23]
 800965c:	005b      	lsls	r3, r3, #1
 800965e:	4619      	mov	r1, r3
 8009660:	68bb      	ldr	r3, [r7, #8]
 8009662:	440b      	add	r3, r1
 8009664:	3230      	adds	r2, #48	; 0x30
 8009666:	b2d2      	uxtb	r2, r2
 8009668:	701a      	strb	r2, [r3, #0]
 800966a:	e00a      	b.n	8009682 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	0f1b      	lsrs	r3, r3, #28
 8009670:	b2da      	uxtb	r2, r3
 8009672:	7dfb      	ldrb	r3, [r7, #23]
 8009674:	005b      	lsls	r3, r3, #1
 8009676:	4619      	mov	r1, r3
 8009678:	68bb      	ldr	r3, [r7, #8]
 800967a:	440b      	add	r3, r1
 800967c:	3237      	adds	r2, #55	; 0x37
 800967e:	b2d2      	uxtb	r2, r2
 8009680:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	011b      	lsls	r3, r3, #4
 8009686:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009688:	7dfb      	ldrb	r3, [r7, #23]
 800968a:	005b      	lsls	r3, r3, #1
 800968c:	3301      	adds	r3, #1
 800968e:	68ba      	ldr	r2, [r7, #8]
 8009690:	4413      	add	r3, r2
 8009692:	2200      	movs	r2, #0
 8009694:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009696:	7dfb      	ldrb	r3, [r7, #23]
 8009698:	3301      	adds	r3, #1
 800969a:	75fb      	strb	r3, [r7, #23]
 800969c:	7dfa      	ldrb	r2, [r7, #23]
 800969e:	79fb      	ldrb	r3, [r7, #7]
 80096a0:	429a      	cmp	r2, r3
 80096a2:	d3d3      	bcc.n	800964c <IntToUnicode+0x18>
  }
}
 80096a4:	bf00      	nop
 80096a6:	bf00      	nop
 80096a8:	371c      	adds	r7, #28
 80096aa:	46bd      	mov	sp, r7
 80096ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096b0:	4770      	bx	lr
	...

080096b4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80096b4:	b580      	push	{r7, lr}
 80096b6:	b08a      	sub	sp, #40	; 0x28
 80096b8:	af00      	add	r7, sp, #0
 80096ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80096bc:	f107 0314 	add.w	r3, r7, #20
 80096c0:	2200      	movs	r2, #0
 80096c2:	601a      	str	r2, [r3, #0]
 80096c4:	605a      	str	r2, [r3, #4]
 80096c6:	609a      	str	r2, [r3, #8]
 80096c8:	60da      	str	r2, [r3, #12]
 80096ca:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80096d4:	d147      	bne.n	8009766 <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80096d6:	2300      	movs	r3, #0
 80096d8:	613b      	str	r3, [r7, #16]
 80096da:	4b25      	ldr	r3, [pc, #148]	; (8009770 <HAL_PCD_MspInit+0xbc>)
 80096dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096de:	4a24      	ldr	r2, [pc, #144]	; (8009770 <HAL_PCD_MspInit+0xbc>)
 80096e0:	f043 0301 	orr.w	r3, r3, #1
 80096e4:	6313      	str	r3, [r2, #48]	; 0x30
 80096e6:	4b22      	ldr	r3, [pc, #136]	; (8009770 <HAL_PCD_MspInit+0xbc>)
 80096e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096ea:	f003 0301 	and.w	r3, r3, #1
 80096ee:	613b      	str	r3, [r7, #16]
 80096f0:	693b      	ldr	r3, [r7, #16]
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    PA10     ------> USB_OTG_FS_ID
    PA9     ------> USB_OTG_FS_VBUS
    */
    GPIO_InitStruct.Pin = USB_FS_DP_Pin|USB_FS_DM_Pin|USB_FS_ID_Pin;
 80096f2:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80096f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80096f8:	2302      	movs	r3, #2
 80096fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80096fc:	2300      	movs	r3, #0
 80096fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009700:	2300      	movs	r3, #0
 8009702:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8009704:	230a      	movs	r3, #10
 8009706:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009708:	f107 0314 	add.w	r3, r7, #20
 800970c:	4619      	mov	r1, r3
 800970e:	4819      	ldr	r0, [pc, #100]	; (8009774 <HAL_PCD_MspInit+0xc0>)
 8009710:	f7f9 fb4a 	bl	8002da8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8009714:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009718:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800971a:	2300      	movs	r3, #0
 800971c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800971e:	2300      	movs	r3, #0
 8009720:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8009722:	f107 0314 	add.w	r3, r7, #20
 8009726:	4619      	mov	r1, r3
 8009728:	4812      	ldr	r0, [pc, #72]	; (8009774 <HAL_PCD_MspInit+0xc0>)
 800972a:	f7f9 fb3d 	bl	8002da8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800972e:	4b10      	ldr	r3, [pc, #64]	; (8009770 <HAL_PCD_MspInit+0xbc>)
 8009730:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009732:	4a0f      	ldr	r2, [pc, #60]	; (8009770 <HAL_PCD_MspInit+0xbc>)
 8009734:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009738:	6353      	str	r3, [r2, #52]	; 0x34
 800973a:	2300      	movs	r3, #0
 800973c:	60fb      	str	r3, [r7, #12]
 800973e:	4b0c      	ldr	r3, [pc, #48]	; (8009770 <HAL_PCD_MspInit+0xbc>)
 8009740:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009742:	4a0b      	ldr	r2, [pc, #44]	; (8009770 <HAL_PCD_MspInit+0xbc>)
 8009744:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009748:	6453      	str	r3, [r2, #68]	; 0x44
 800974a:	4b09      	ldr	r3, [pc, #36]	; (8009770 <HAL_PCD_MspInit+0xbc>)
 800974c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800974e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009752:	60fb      	str	r3, [r7, #12]
 8009754:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8009756:	2200      	movs	r2, #0
 8009758:	2100      	movs	r1, #0
 800975a:	2043      	movs	r0, #67	; 0x43
 800975c:	f7f9 fa0f 	bl	8002b7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8009760:	2043      	movs	r0, #67	; 0x43
 8009762:	f7f9 fa28 	bl	8002bb6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8009766:	bf00      	nop
 8009768:	3728      	adds	r7, #40	; 0x28
 800976a:	46bd      	mov	sp, r7
 800976c:	bd80      	pop	{r7, pc}
 800976e:	bf00      	nop
 8009770:	40023800 	.word	0x40023800
 8009774:	40020000 	.word	0x40020000

08009778 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009778:	b580      	push	{r7, lr}
 800977a:	b082      	sub	sp, #8
 800977c:	af00      	add	r7, sp, #0
 800977e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800978c:	4619      	mov	r1, r3
 800978e:	4610      	mov	r0, r2
 8009790:	f7fe fc37 	bl	8008002 <USBD_LL_SetupStage>
}
 8009794:	bf00      	nop
 8009796:	3708      	adds	r7, #8
 8009798:	46bd      	mov	sp, r7
 800979a:	bd80      	pop	{r7, pc}

0800979c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800979c:	b580      	push	{r7, lr}
 800979e:	b082      	sub	sp, #8
 80097a0:	af00      	add	r7, sp, #0
 80097a2:	6078      	str	r0, [r7, #4]
 80097a4:	460b      	mov	r3, r1
 80097a6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 80097ae:	78fa      	ldrb	r2, [r7, #3]
 80097b0:	6879      	ldr	r1, [r7, #4]
 80097b2:	4613      	mov	r3, r2
 80097b4:	00db      	lsls	r3, r3, #3
 80097b6:	4413      	add	r3, r2
 80097b8:	009b      	lsls	r3, r3, #2
 80097ba:	440b      	add	r3, r1
 80097bc:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80097c0:	681a      	ldr	r2, [r3, #0]
 80097c2:	78fb      	ldrb	r3, [r7, #3]
 80097c4:	4619      	mov	r1, r3
 80097c6:	f7fe fc71 	bl	80080ac <USBD_LL_DataOutStage>
}
 80097ca:	bf00      	nop
 80097cc:	3708      	adds	r7, #8
 80097ce:	46bd      	mov	sp, r7
 80097d0:	bd80      	pop	{r7, pc}

080097d2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80097d2:	b580      	push	{r7, lr}
 80097d4:	b082      	sub	sp, #8
 80097d6:	af00      	add	r7, sp, #0
 80097d8:	6078      	str	r0, [r7, #4]
 80097da:	460b      	mov	r3, r1
 80097dc:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 80097e4:	78fa      	ldrb	r2, [r7, #3]
 80097e6:	6879      	ldr	r1, [r7, #4]
 80097e8:	4613      	mov	r3, r2
 80097ea:	00db      	lsls	r3, r3, #3
 80097ec:	4413      	add	r3, r2
 80097ee:	009b      	lsls	r3, r3, #2
 80097f0:	440b      	add	r3, r1
 80097f2:	334c      	adds	r3, #76	; 0x4c
 80097f4:	681a      	ldr	r2, [r3, #0]
 80097f6:	78fb      	ldrb	r3, [r7, #3]
 80097f8:	4619      	mov	r1, r3
 80097fa:	f7fe fd0a 	bl	8008212 <USBD_LL_DataInStage>
}
 80097fe:	bf00      	nop
 8009800:	3708      	adds	r7, #8
 8009802:	46bd      	mov	sp, r7
 8009804:	bd80      	pop	{r7, pc}

08009806 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009806:	b580      	push	{r7, lr}
 8009808:	b082      	sub	sp, #8
 800980a:	af00      	add	r7, sp, #0
 800980c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009814:	4618      	mov	r0, r3
 8009816:	f7fe fe3e 	bl	8008496 <USBD_LL_SOF>
}
 800981a:	bf00      	nop
 800981c:	3708      	adds	r7, #8
 800981e:	46bd      	mov	sp, r7
 8009820:	bd80      	pop	{r7, pc}

08009822 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009822:	b580      	push	{r7, lr}
 8009824:	b084      	sub	sp, #16
 8009826:	af00      	add	r7, sp, #0
 8009828:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800982a:	2301      	movs	r3, #1
 800982c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	68db      	ldr	r3, [r3, #12]
 8009832:	2b00      	cmp	r3, #0
 8009834:	d102      	bne.n	800983c <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8009836:	2300      	movs	r3, #0
 8009838:	73fb      	strb	r3, [r7, #15]
 800983a:	e008      	b.n	800984e <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	68db      	ldr	r3, [r3, #12]
 8009840:	2b02      	cmp	r3, #2
 8009842:	d102      	bne.n	800984a <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8009844:	2301      	movs	r3, #1
 8009846:	73fb      	strb	r3, [r7, #15]
 8009848:	e001      	b.n	800984e <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800984a:	f7f7 fc2b 	bl	80010a4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009854:	7bfa      	ldrb	r2, [r7, #15]
 8009856:	4611      	mov	r1, r2
 8009858:	4618      	mov	r0, r3
 800985a:	f7fe fdde 	bl	800841a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009864:	4618      	mov	r0, r3
 8009866:	f7fe fd86 	bl	8008376 <USBD_LL_Reset>
}
 800986a:	bf00      	nop
 800986c:	3710      	adds	r7, #16
 800986e:	46bd      	mov	sp, r7
 8009870:	bd80      	pop	{r7, pc}
	...

08009874 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009874:	b580      	push	{r7, lr}
 8009876:	b082      	sub	sp, #8
 8009878:	af00      	add	r7, sp, #0
 800987a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009882:	4618      	mov	r0, r3
 8009884:	f7fe fdd9 	bl	800843a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	687a      	ldr	r2, [r7, #4]
 8009894:	6812      	ldr	r2, [r2, #0]
 8009896:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800989a:	f043 0301 	orr.w	r3, r3, #1
 800989e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	6a1b      	ldr	r3, [r3, #32]
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d005      	beq.n	80098b4 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80098a8:	4b04      	ldr	r3, [pc, #16]	; (80098bc <HAL_PCD_SuspendCallback+0x48>)
 80098aa:	691b      	ldr	r3, [r3, #16]
 80098ac:	4a03      	ldr	r2, [pc, #12]	; (80098bc <HAL_PCD_SuspendCallback+0x48>)
 80098ae:	f043 0306 	orr.w	r3, r3, #6
 80098b2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80098b4:	bf00      	nop
 80098b6:	3708      	adds	r7, #8
 80098b8:	46bd      	mov	sp, r7
 80098ba:	bd80      	pop	{r7, pc}
 80098bc:	e000ed00 	.word	0xe000ed00

080098c0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80098c0:	b580      	push	{r7, lr}
 80098c2:	b082      	sub	sp, #8
 80098c4:	af00      	add	r7, sp, #0
 80098c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80098ce:	4618      	mov	r0, r3
 80098d0:	f7fe fdc9 	bl	8008466 <USBD_LL_Resume>
}
 80098d4:	bf00      	nop
 80098d6:	3708      	adds	r7, #8
 80098d8:	46bd      	mov	sp, r7
 80098da:	bd80      	pop	{r7, pc}

080098dc <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80098dc:	b580      	push	{r7, lr}
 80098de:	b082      	sub	sp, #8
 80098e0:	af00      	add	r7, sp, #0
 80098e2:	6078      	str	r0, [r7, #4]
 80098e4:	460b      	mov	r3, r1
 80098e6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80098ee:	78fa      	ldrb	r2, [r7, #3]
 80098f0:	4611      	mov	r1, r2
 80098f2:	4618      	mov	r0, r3
 80098f4:	f7fe fe21 	bl	800853a <USBD_LL_IsoOUTIncomplete>
}
 80098f8:	bf00      	nop
 80098fa:	3708      	adds	r7, #8
 80098fc:	46bd      	mov	sp, r7
 80098fe:	bd80      	pop	{r7, pc}

08009900 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009900:	b580      	push	{r7, lr}
 8009902:	b082      	sub	sp, #8
 8009904:	af00      	add	r7, sp, #0
 8009906:	6078      	str	r0, [r7, #4]
 8009908:	460b      	mov	r3, r1
 800990a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009912:	78fa      	ldrb	r2, [r7, #3]
 8009914:	4611      	mov	r1, r2
 8009916:	4618      	mov	r0, r3
 8009918:	f7fe fddd 	bl	80084d6 <USBD_LL_IsoINIncomplete>
}
 800991c:	bf00      	nop
 800991e:	3708      	adds	r7, #8
 8009920:	46bd      	mov	sp, r7
 8009922:	bd80      	pop	{r7, pc}

08009924 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009924:	b580      	push	{r7, lr}
 8009926:	b082      	sub	sp, #8
 8009928:	af00      	add	r7, sp, #0
 800992a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009932:	4618      	mov	r0, r3
 8009934:	f7fe fe33 	bl	800859e <USBD_LL_DevConnected>
}
 8009938:	bf00      	nop
 800993a:	3708      	adds	r7, #8
 800993c:	46bd      	mov	sp, r7
 800993e:	bd80      	pop	{r7, pc}

08009940 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009940:	b580      	push	{r7, lr}
 8009942:	b082      	sub	sp, #8
 8009944:	af00      	add	r7, sp, #0
 8009946:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800994e:	4618      	mov	r0, r3
 8009950:	f7fe fe30 	bl	80085b4 <USBD_LL_DevDisconnected>
}
 8009954:	bf00      	nop
 8009956:	3708      	adds	r7, #8
 8009958:	46bd      	mov	sp, r7
 800995a:	bd80      	pop	{r7, pc}

0800995c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800995c:	b580      	push	{r7, lr}
 800995e:	b082      	sub	sp, #8
 8009960:	af00      	add	r7, sp, #0
 8009962:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	781b      	ldrb	r3, [r3, #0]
 8009968:	2b00      	cmp	r3, #0
 800996a:	d13c      	bne.n	80099e6 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800996c:	4a20      	ldr	r2, [pc, #128]	; (80099f0 <USBD_LL_Init+0x94>)
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	4a1e      	ldr	r2, [pc, #120]	; (80099f0 <USBD_LL_Init+0x94>)
 8009978:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800997c:	4b1c      	ldr	r3, [pc, #112]	; (80099f0 <USBD_LL_Init+0x94>)
 800997e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8009982:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8009984:	4b1a      	ldr	r3, [pc, #104]	; (80099f0 <USBD_LL_Init+0x94>)
 8009986:	2204      	movs	r2, #4
 8009988:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800998a:	4b19      	ldr	r3, [pc, #100]	; (80099f0 <USBD_LL_Init+0x94>)
 800998c:	2202      	movs	r2, #2
 800998e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8009990:	4b17      	ldr	r3, [pc, #92]	; (80099f0 <USBD_LL_Init+0x94>)
 8009992:	2200      	movs	r2, #0
 8009994:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8009996:	4b16      	ldr	r3, [pc, #88]	; (80099f0 <USBD_LL_Init+0x94>)
 8009998:	2202      	movs	r2, #2
 800999a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800999c:	4b14      	ldr	r3, [pc, #80]	; (80099f0 <USBD_LL_Init+0x94>)
 800999e:	2200      	movs	r2, #0
 80099a0:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80099a2:	4b13      	ldr	r3, [pc, #76]	; (80099f0 <USBD_LL_Init+0x94>)
 80099a4:	2200      	movs	r2, #0
 80099a6:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80099a8:	4b11      	ldr	r3, [pc, #68]	; (80099f0 <USBD_LL_Init+0x94>)
 80099aa:	2200      	movs	r2, #0
 80099ac:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80099ae:	4b10      	ldr	r3, [pc, #64]	; (80099f0 <USBD_LL_Init+0x94>)
 80099b0:	2201      	movs	r2, #1
 80099b2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80099b4:	4b0e      	ldr	r3, [pc, #56]	; (80099f0 <USBD_LL_Init+0x94>)
 80099b6:	2200      	movs	r2, #0
 80099b8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80099ba:	480d      	ldr	r0, [pc, #52]	; (80099f0 <USBD_LL_Init+0x94>)
 80099bc:	f7f9 fe12 	bl	80035e4 <HAL_PCD_Init>
 80099c0:	4603      	mov	r3, r0
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	d001      	beq.n	80099ca <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80099c6:	f7f7 fb6d 	bl	80010a4 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80099ca:	2180      	movs	r1, #128	; 0x80
 80099cc:	4808      	ldr	r0, [pc, #32]	; (80099f0 <USBD_LL_Init+0x94>)
 80099ce:	f7fb f852 	bl	8004a76 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80099d2:	2240      	movs	r2, #64	; 0x40
 80099d4:	2100      	movs	r1, #0
 80099d6:	4806      	ldr	r0, [pc, #24]	; (80099f0 <USBD_LL_Init+0x94>)
 80099d8:	f7fb f806 	bl	80049e8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80099dc:	2280      	movs	r2, #128	; 0x80
 80099de:	2101      	movs	r1, #1
 80099e0:	4803      	ldr	r0, [pc, #12]	; (80099f0 <USBD_LL_Init+0x94>)
 80099e2:	f7fb f801 	bl	80049e8 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80099e6:	2300      	movs	r3, #0
}
 80099e8:	4618      	mov	r0, r3
 80099ea:	3708      	adds	r7, #8
 80099ec:	46bd      	mov	sp, r7
 80099ee:	bd80      	pop	{r7, pc}
 80099f0:	20000b7c 	.word	0x20000b7c

080099f4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80099f4:	b580      	push	{r7, lr}
 80099f6:	b084      	sub	sp, #16
 80099f8:	af00      	add	r7, sp, #0
 80099fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80099fc:	2300      	movs	r3, #0
 80099fe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009a00:	2300      	movs	r3, #0
 8009a02:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009a0a:	4618      	mov	r0, r3
 8009a0c:	f7f9 ff07 	bl	800381e <HAL_PCD_Start>
 8009a10:	4603      	mov	r3, r0
 8009a12:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009a14:	7bfb      	ldrb	r3, [r7, #15]
 8009a16:	4618      	mov	r0, r3
 8009a18:	f000 f930 	bl	8009c7c <USBD_Get_USB_Status>
 8009a1c:	4603      	mov	r3, r0
 8009a1e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009a20:	7bbb      	ldrb	r3, [r7, #14]
}
 8009a22:	4618      	mov	r0, r3
 8009a24:	3710      	adds	r7, #16
 8009a26:	46bd      	mov	sp, r7
 8009a28:	bd80      	pop	{r7, pc}

08009a2a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009a2a:	b580      	push	{r7, lr}
 8009a2c:	b084      	sub	sp, #16
 8009a2e:	af00      	add	r7, sp, #0
 8009a30:	6078      	str	r0, [r7, #4]
 8009a32:	4608      	mov	r0, r1
 8009a34:	4611      	mov	r1, r2
 8009a36:	461a      	mov	r2, r3
 8009a38:	4603      	mov	r3, r0
 8009a3a:	70fb      	strb	r3, [r7, #3]
 8009a3c:	460b      	mov	r3, r1
 8009a3e:	70bb      	strb	r3, [r7, #2]
 8009a40:	4613      	mov	r3, r2
 8009a42:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009a44:	2300      	movs	r3, #0
 8009a46:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009a48:	2300      	movs	r3, #0
 8009a4a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8009a52:	78bb      	ldrb	r3, [r7, #2]
 8009a54:	883a      	ldrh	r2, [r7, #0]
 8009a56:	78f9      	ldrb	r1, [r7, #3]
 8009a58:	f7fa fbd8 	bl	800420c <HAL_PCD_EP_Open>
 8009a5c:	4603      	mov	r3, r0
 8009a5e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009a60:	7bfb      	ldrb	r3, [r7, #15]
 8009a62:	4618      	mov	r0, r3
 8009a64:	f000 f90a 	bl	8009c7c <USBD_Get_USB_Status>
 8009a68:	4603      	mov	r3, r0
 8009a6a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009a6c:	7bbb      	ldrb	r3, [r7, #14]
}
 8009a6e:	4618      	mov	r0, r3
 8009a70:	3710      	adds	r7, #16
 8009a72:	46bd      	mov	sp, r7
 8009a74:	bd80      	pop	{r7, pc}

08009a76 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009a76:	b580      	push	{r7, lr}
 8009a78:	b084      	sub	sp, #16
 8009a7a:	af00      	add	r7, sp, #0
 8009a7c:	6078      	str	r0, [r7, #4]
 8009a7e:	460b      	mov	r3, r1
 8009a80:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009a82:	2300      	movs	r3, #0
 8009a84:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009a86:	2300      	movs	r3, #0
 8009a88:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009a90:	78fa      	ldrb	r2, [r7, #3]
 8009a92:	4611      	mov	r1, r2
 8009a94:	4618      	mov	r0, r3
 8009a96:	f7fa fc21 	bl	80042dc <HAL_PCD_EP_Close>
 8009a9a:	4603      	mov	r3, r0
 8009a9c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009a9e:	7bfb      	ldrb	r3, [r7, #15]
 8009aa0:	4618      	mov	r0, r3
 8009aa2:	f000 f8eb 	bl	8009c7c <USBD_Get_USB_Status>
 8009aa6:	4603      	mov	r3, r0
 8009aa8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009aaa:	7bbb      	ldrb	r3, [r7, #14]
}
 8009aac:	4618      	mov	r0, r3
 8009aae:	3710      	adds	r7, #16
 8009ab0:	46bd      	mov	sp, r7
 8009ab2:	bd80      	pop	{r7, pc}

08009ab4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009ab4:	b580      	push	{r7, lr}
 8009ab6:	b084      	sub	sp, #16
 8009ab8:	af00      	add	r7, sp, #0
 8009aba:	6078      	str	r0, [r7, #4]
 8009abc:	460b      	mov	r3, r1
 8009abe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009ac0:	2300      	movs	r3, #0
 8009ac2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009ac4:	2300      	movs	r3, #0
 8009ac6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009ace:	78fa      	ldrb	r2, [r7, #3]
 8009ad0:	4611      	mov	r1, r2
 8009ad2:	4618      	mov	r0, r3
 8009ad4:	f7fa fce1 	bl	800449a <HAL_PCD_EP_SetStall>
 8009ad8:	4603      	mov	r3, r0
 8009ada:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009adc:	7bfb      	ldrb	r3, [r7, #15]
 8009ade:	4618      	mov	r0, r3
 8009ae0:	f000 f8cc 	bl	8009c7c <USBD_Get_USB_Status>
 8009ae4:	4603      	mov	r3, r0
 8009ae6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009ae8:	7bbb      	ldrb	r3, [r7, #14]
}
 8009aea:	4618      	mov	r0, r3
 8009aec:	3710      	adds	r7, #16
 8009aee:	46bd      	mov	sp, r7
 8009af0:	bd80      	pop	{r7, pc}

08009af2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009af2:	b580      	push	{r7, lr}
 8009af4:	b084      	sub	sp, #16
 8009af6:	af00      	add	r7, sp, #0
 8009af8:	6078      	str	r0, [r7, #4]
 8009afa:	460b      	mov	r3, r1
 8009afc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009afe:	2300      	movs	r3, #0
 8009b00:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009b02:	2300      	movs	r3, #0
 8009b04:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009b0c:	78fa      	ldrb	r2, [r7, #3]
 8009b0e:	4611      	mov	r1, r2
 8009b10:	4618      	mov	r0, r3
 8009b12:	f7fa fd26 	bl	8004562 <HAL_PCD_EP_ClrStall>
 8009b16:	4603      	mov	r3, r0
 8009b18:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009b1a:	7bfb      	ldrb	r3, [r7, #15]
 8009b1c:	4618      	mov	r0, r3
 8009b1e:	f000 f8ad 	bl	8009c7c <USBD_Get_USB_Status>
 8009b22:	4603      	mov	r3, r0
 8009b24:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009b26:	7bbb      	ldrb	r3, [r7, #14]
}
 8009b28:	4618      	mov	r0, r3
 8009b2a:	3710      	adds	r7, #16
 8009b2c:	46bd      	mov	sp, r7
 8009b2e:	bd80      	pop	{r7, pc}

08009b30 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009b30:	b480      	push	{r7}
 8009b32:	b085      	sub	sp, #20
 8009b34:	af00      	add	r7, sp, #0
 8009b36:	6078      	str	r0, [r7, #4]
 8009b38:	460b      	mov	r3, r1
 8009b3a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009b42:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009b44:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	da0b      	bge.n	8009b64 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009b4c:	78fb      	ldrb	r3, [r7, #3]
 8009b4e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009b52:	68f9      	ldr	r1, [r7, #12]
 8009b54:	4613      	mov	r3, r2
 8009b56:	00db      	lsls	r3, r3, #3
 8009b58:	4413      	add	r3, r2
 8009b5a:	009b      	lsls	r3, r3, #2
 8009b5c:	440b      	add	r3, r1
 8009b5e:	333e      	adds	r3, #62	; 0x3e
 8009b60:	781b      	ldrb	r3, [r3, #0]
 8009b62:	e00b      	b.n	8009b7c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009b64:	78fb      	ldrb	r3, [r7, #3]
 8009b66:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009b6a:	68f9      	ldr	r1, [r7, #12]
 8009b6c:	4613      	mov	r3, r2
 8009b6e:	00db      	lsls	r3, r3, #3
 8009b70:	4413      	add	r3, r2
 8009b72:	009b      	lsls	r3, r3, #2
 8009b74:	440b      	add	r3, r1
 8009b76:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8009b7a:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009b7c:	4618      	mov	r0, r3
 8009b7e:	3714      	adds	r7, #20
 8009b80:	46bd      	mov	sp, r7
 8009b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b86:	4770      	bx	lr

08009b88 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009b88:	b580      	push	{r7, lr}
 8009b8a:	b084      	sub	sp, #16
 8009b8c:	af00      	add	r7, sp, #0
 8009b8e:	6078      	str	r0, [r7, #4]
 8009b90:	460b      	mov	r3, r1
 8009b92:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009b94:	2300      	movs	r3, #0
 8009b96:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009b98:	2300      	movs	r3, #0
 8009b9a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009ba2:	78fa      	ldrb	r2, [r7, #3]
 8009ba4:	4611      	mov	r1, r2
 8009ba6:	4618      	mov	r0, r3
 8009ba8:	f7fa fb0b 	bl	80041c2 <HAL_PCD_SetAddress>
 8009bac:	4603      	mov	r3, r0
 8009bae:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009bb0:	7bfb      	ldrb	r3, [r7, #15]
 8009bb2:	4618      	mov	r0, r3
 8009bb4:	f000 f862 	bl	8009c7c <USBD_Get_USB_Status>
 8009bb8:	4603      	mov	r3, r0
 8009bba:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009bbc:	7bbb      	ldrb	r3, [r7, #14]
}
 8009bbe:	4618      	mov	r0, r3
 8009bc0:	3710      	adds	r7, #16
 8009bc2:	46bd      	mov	sp, r7
 8009bc4:	bd80      	pop	{r7, pc}

08009bc6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009bc6:	b580      	push	{r7, lr}
 8009bc8:	b086      	sub	sp, #24
 8009bca:	af00      	add	r7, sp, #0
 8009bcc:	60f8      	str	r0, [r7, #12]
 8009bce:	607a      	str	r2, [r7, #4]
 8009bd0:	603b      	str	r3, [r7, #0]
 8009bd2:	460b      	mov	r3, r1
 8009bd4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009bd6:	2300      	movs	r3, #0
 8009bd8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009bda:	2300      	movs	r3, #0
 8009bdc:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8009be4:	7af9      	ldrb	r1, [r7, #11]
 8009be6:	683b      	ldr	r3, [r7, #0]
 8009be8:	687a      	ldr	r2, [r7, #4]
 8009bea:	f7fa fc0c 	bl	8004406 <HAL_PCD_EP_Transmit>
 8009bee:	4603      	mov	r3, r0
 8009bf0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009bf2:	7dfb      	ldrb	r3, [r7, #23]
 8009bf4:	4618      	mov	r0, r3
 8009bf6:	f000 f841 	bl	8009c7c <USBD_Get_USB_Status>
 8009bfa:	4603      	mov	r3, r0
 8009bfc:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009bfe:	7dbb      	ldrb	r3, [r7, #22]
}
 8009c00:	4618      	mov	r0, r3
 8009c02:	3718      	adds	r7, #24
 8009c04:	46bd      	mov	sp, r7
 8009c06:	bd80      	pop	{r7, pc}

08009c08 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009c08:	b580      	push	{r7, lr}
 8009c0a:	b086      	sub	sp, #24
 8009c0c:	af00      	add	r7, sp, #0
 8009c0e:	60f8      	str	r0, [r7, #12]
 8009c10:	607a      	str	r2, [r7, #4]
 8009c12:	603b      	str	r3, [r7, #0]
 8009c14:	460b      	mov	r3, r1
 8009c16:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009c18:	2300      	movs	r3, #0
 8009c1a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009c1c:	2300      	movs	r3, #0
 8009c1e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8009c26:	7af9      	ldrb	r1, [r7, #11]
 8009c28:	683b      	ldr	r3, [r7, #0]
 8009c2a:	687a      	ldr	r2, [r7, #4]
 8009c2c:	f7fa fba0 	bl	8004370 <HAL_PCD_EP_Receive>
 8009c30:	4603      	mov	r3, r0
 8009c32:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009c34:	7dfb      	ldrb	r3, [r7, #23]
 8009c36:	4618      	mov	r0, r3
 8009c38:	f000 f820 	bl	8009c7c <USBD_Get_USB_Status>
 8009c3c:	4603      	mov	r3, r0
 8009c3e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009c40:	7dbb      	ldrb	r3, [r7, #22]
}
 8009c42:	4618      	mov	r0, r3
 8009c44:	3718      	adds	r7, #24
 8009c46:	46bd      	mov	sp, r7
 8009c48:	bd80      	pop	{r7, pc}
	...

08009c4c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009c4c:	b480      	push	{r7}
 8009c4e:	b083      	sub	sp, #12
 8009c50:	af00      	add	r7, sp, #0
 8009c52:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009c54:	4b03      	ldr	r3, [pc, #12]	; (8009c64 <USBD_static_malloc+0x18>)
}
 8009c56:	4618      	mov	r0, r3
 8009c58:	370c      	adds	r7, #12
 8009c5a:	46bd      	mov	sp, r7
 8009c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c60:	4770      	bx	lr
 8009c62:	bf00      	nop
 8009c64:	20001088 	.word	0x20001088

08009c68 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009c68:	b480      	push	{r7}
 8009c6a:	b083      	sub	sp, #12
 8009c6c:	af00      	add	r7, sp, #0
 8009c6e:	6078      	str	r0, [r7, #4]

}
 8009c70:	bf00      	nop
 8009c72:	370c      	adds	r7, #12
 8009c74:	46bd      	mov	sp, r7
 8009c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c7a:	4770      	bx	lr

08009c7c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009c7c:	b480      	push	{r7}
 8009c7e:	b085      	sub	sp, #20
 8009c80:	af00      	add	r7, sp, #0
 8009c82:	4603      	mov	r3, r0
 8009c84:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009c86:	2300      	movs	r3, #0
 8009c88:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009c8a:	79fb      	ldrb	r3, [r7, #7]
 8009c8c:	2b03      	cmp	r3, #3
 8009c8e:	d817      	bhi.n	8009cc0 <USBD_Get_USB_Status+0x44>
 8009c90:	a201      	add	r2, pc, #4	; (adr r2, 8009c98 <USBD_Get_USB_Status+0x1c>)
 8009c92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c96:	bf00      	nop
 8009c98:	08009ca9 	.word	0x08009ca9
 8009c9c:	08009caf 	.word	0x08009caf
 8009ca0:	08009cb5 	.word	0x08009cb5
 8009ca4:	08009cbb 	.word	0x08009cbb
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009ca8:	2300      	movs	r3, #0
 8009caa:	73fb      	strb	r3, [r7, #15]
    break;
 8009cac:	e00b      	b.n	8009cc6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009cae:	2303      	movs	r3, #3
 8009cb0:	73fb      	strb	r3, [r7, #15]
    break;
 8009cb2:	e008      	b.n	8009cc6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009cb4:	2301      	movs	r3, #1
 8009cb6:	73fb      	strb	r3, [r7, #15]
    break;
 8009cb8:	e005      	b.n	8009cc6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009cba:	2303      	movs	r3, #3
 8009cbc:	73fb      	strb	r3, [r7, #15]
    break;
 8009cbe:	e002      	b.n	8009cc6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009cc0:	2303      	movs	r3, #3
 8009cc2:	73fb      	strb	r3, [r7, #15]
    break;
 8009cc4:	bf00      	nop
  }
  return usb_status;
 8009cc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8009cc8:	4618      	mov	r0, r3
 8009cca:	3714      	adds	r7, #20
 8009ccc:	46bd      	mov	sp, r7
 8009cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cd2:	4770      	bx	lr

08009cd4 <__libc_init_array>:
 8009cd4:	b570      	push	{r4, r5, r6, lr}
 8009cd6:	4d0d      	ldr	r5, [pc, #52]	; (8009d0c <__libc_init_array+0x38>)
 8009cd8:	4c0d      	ldr	r4, [pc, #52]	; (8009d10 <__libc_init_array+0x3c>)
 8009cda:	1b64      	subs	r4, r4, r5
 8009cdc:	10a4      	asrs	r4, r4, #2
 8009cde:	2600      	movs	r6, #0
 8009ce0:	42a6      	cmp	r6, r4
 8009ce2:	d109      	bne.n	8009cf8 <__libc_init_array+0x24>
 8009ce4:	4d0b      	ldr	r5, [pc, #44]	; (8009d14 <__libc_init_array+0x40>)
 8009ce6:	4c0c      	ldr	r4, [pc, #48]	; (8009d18 <__libc_init_array+0x44>)
 8009ce8:	f000 f820 	bl	8009d2c <_init>
 8009cec:	1b64      	subs	r4, r4, r5
 8009cee:	10a4      	asrs	r4, r4, #2
 8009cf0:	2600      	movs	r6, #0
 8009cf2:	42a6      	cmp	r6, r4
 8009cf4:	d105      	bne.n	8009d02 <__libc_init_array+0x2e>
 8009cf6:	bd70      	pop	{r4, r5, r6, pc}
 8009cf8:	f855 3b04 	ldr.w	r3, [r5], #4
 8009cfc:	4798      	blx	r3
 8009cfe:	3601      	adds	r6, #1
 8009d00:	e7ee      	b.n	8009ce0 <__libc_init_array+0xc>
 8009d02:	f855 3b04 	ldr.w	r3, [r5], #4
 8009d06:	4798      	blx	r3
 8009d08:	3601      	adds	r6, #1
 8009d0a:	e7f2      	b.n	8009cf2 <__libc_init_array+0x1e>
 8009d0c:	0800b87c 	.word	0x0800b87c
 8009d10:	0800b87c 	.word	0x0800b87c
 8009d14:	0800b87c 	.word	0x0800b87c
 8009d18:	0800b880 	.word	0x0800b880

08009d1c <memset>:
 8009d1c:	4402      	add	r2, r0
 8009d1e:	4603      	mov	r3, r0
 8009d20:	4293      	cmp	r3, r2
 8009d22:	d100      	bne.n	8009d26 <memset+0xa>
 8009d24:	4770      	bx	lr
 8009d26:	f803 1b01 	strb.w	r1, [r3], #1
 8009d2a:	e7f9      	b.n	8009d20 <memset+0x4>

08009d2c <_init>:
 8009d2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d2e:	bf00      	nop
 8009d30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009d32:	bc08      	pop	{r3}
 8009d34:	469e      	mov	lr, r3
 8009d36:	4770      	bx	lr

08009d38 <_fini>:
 8009d38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d3a:	bf00      	nop
 8009d3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009d3e:	bc08      	pop	{r3}
 8009d40:	469e      	mov	lr, r3
 8009d42:	4770      	bx	lr
