
whaat.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a2f0  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001b8c  0800a478  0800a478  0001a478  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c004  0800c004  00020208  2**0
                  CONTENTS
  4 .ARM          00000008  0800c004  0800c004  0001c004  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c00c  0800c00c  00020208  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c00c  0800c00c  0001c00c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c010  0800c010  0001c010  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000208  20000000  0800c014  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020208  2**0
                  CONTENTS
 10 .bss          00000f34  20000208  20000208  00020208  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000113c  2000113c  00020208  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY
 13 .debug_info   00022b52  00000000  00000000  00020238  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000047a3  00000000  00000000  00042d8a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001cf8  00000000  00000000  00047530  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001b28  00000000  00000000  00049228  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002a0da  00000000  00000000  0004ad50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00026d25  00000000  00000000  00074e2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e9ce3  00000000  00000000  0009bb4f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00185832  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007aa4  00000000  00000000  00185884  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000208 	.word	0x20000208
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800a460 	.word	0x0800a460

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000020c 	.word	0x2000020c
 80001c4:	0800a460 	.word	0x0800a460

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <get_caps>:
#include "caps_lock.h"

uint8_t get_caps (){
 80004cc:	b480      	push	{r7}
 80004ce:	af00      	add	r7, sp, #0
	return caps_lock;
 80004d0:	4b03      	ldr	r3, [pc, #12]	; (80004e0 <get_caps+0x14>)
 80004d2:	781b      	ldrb	r3, [r3, #0]
}
 80004d4:	4618      	mov	r0, r3
 80004d6:	46bd      	mov	sp, r7
 80004d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004dc:	4770      	bx	lr
 80004de:	bf00      	nop
 80004e0:	20000224 	.word	0x20000224

080004e4 <set_caps>:
void set_caps (uint8_t new_caps){
 80004e4:	b480      	push	{r7}
 80004e6:	b083      	sub	sp, #12
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	4603      	mov	r3, r0
 80004ec:	71fb      	strb	r3, [r7, #7]
	caps_lock = new_caps;
 80004ee:	4a04      	ldr	r2, [pc, #16]	; (8000500 <set_caps+0x1c>)
 80004f0:	79fb      	ldrb	r3, [r7, #7]
 80004f2:	7013      	strb	r3, [r2, #0]
}
 80004f4:	bf00      	nop
 80004f6:	370c      	adds	r7, #12
 80004f8:	46bd      	mov	sp, r7
 80004fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004fe:	4770      	bx	lr
 8000500:	20000224 	.word	0x20000224

08000504 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b082      	sub	sp, #8
 8000508:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800050a:	f002 f93b 	bl	8002784 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800050e:	f000 f929 	bl	8000764 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000512:	f000 fae7 	bl	8000ae4 <MX_GPIO_Init>
  MX_ADC3_Init();
 8000516:	f000 f995 	bl	8000844 <MX_ADC3_Init>
  MX_DAC_Init();
 800051a:	f000 f9e5 	bl	80008e8 <MX_DAC_Init>
  MX_DCMI_Init();
 800051e:	f000 fa0d 	bl	800093c <MX_DCMI_Init>
  MX_FSMC_Init();
 8000522:	f000 fd4d 	bl	8000fc0 <MX_FSMC_Init>
  MX_USART3_UART_Init();
 8000526:	f000 fab3 	bl	8000a90 <MX_USART3_UART_Init>
  MX_TIM3_Init();
 800052a:	f000 fa5d 	bl	80009e8 <MX_TIM3_Init>
  MX_USB_DEVICE_Init();
 800052e:	f009 fae7 	bl	8009b00 <MX_USB_DEVICE_Init>
  MX_I2C1_Init();
 8000532:	f000 fa2b 	bl	800098c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
	BSP_LCD_Init();
 8000536:	f001 fecf 	bl	80022d8 <BSP_LCD_Init>
	BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 800053a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800053e:	f001 ff25 	bl	800238c <BSP_LCD_SetBackColor>
	BSP_LCD_Clear(LCD_COLOR_WHITE);
 8000542:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000546:	f001 ff41 	bl	80023cc <BSP_LCD_Clear>
	BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 800054a:	2000      	movs	r0, #0
 800054c:	f001 ff0e 	bl	800236c <BSP_LCD_SetTextColor>
	BSP_LCD_SetFont(&Font24);
 8000550:	4877      	ldr	r0, [pc, #476]	; (8000730 <main+0x22c>)
 8000552:	f001 ff2b 	bl	80023ac <BSP_LCD_SetFont>
	BSP_LCD_DisplayStringAt(0, 0, (uint8_t *)"LCD", CENTER_MODE);
 8000556:	2301      	movs	r3, #1
 8000558:	4a76      	ldr	r2, [pc, #472]	; (8000734 <main+0x230>)
 800055a:	2100      	movs	r1, #0
 800055c:	2000      	movs	r0, #0
 800055e:	f001 ff93 	bl	8002488 <BSP_LCD_DisplayStringAt>
	BSP_LCD_DisplayStringAt(0, 30, (uint8_t *)"Volume control", CENTER_MODE);
 8000562:	2301      	movs	r3, #1
 8000564:	4a74      	ldr	r2, [pc, #464]	; (8000738 <main+0x234>)
 8000566:	211e      	movs	r1, #30
 8000568:	2000      	movs	r0, #0
 800056a:	f001 ff8d 	bl	8002488 <BSP_LCD_DisplayStringAt>
	BSP_PB_Init(BUTTON_KEY, BUTTON_MODE_GPIO);
 800056e:	2100      	movs	r1, #0
 8000570:	2002      	movs	r0, #2
 8000572:	f001 fcc7 	bl	8001f04 <BSP_PB_Init>
	BSP_LED_Init(LED1);
 8000576:	2000      	movs	r0, #0
 8000578:	f001 fc24 	bl	8001dc4 <BSP_LED_Init>


	HAL_TIM_Encoder_Start_IT(&htim3, TIM_CHANNEL_ALL);
 800057c:	213c      	movs	r1, #60	; 0x3c
 800057e:	486f      	ldr	r0, [pc, #444]	; (800073c <main+0x238>)
 8000580:	f005 fa1a 	bl	80059b8 <HAL_TIM_Encoder_Start_IT>
	HAL_GetTick();
 8000584:	f002 f964 	bl	8002850 <HAL_GetTick>
	TIM3->CNT = 30000;
 8000588:	4b6d      	ldr	r3, [pc, #436]	; (8000740 <main+0x23c>)
 800058a:	f247 5230 	movw	r2, #30000	; 0x7530
 800058e:	625a      	str	r2, [r3, #36]	; 0x24
	uint32_t rot_count = TIM3->CNT;
 8000590:	4b6b      	ldr	r3, [pc, #428]	; (8000740 <main+0x23c>)
 8000592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000594:	607b      	str	r3, [r7, #4]

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	uint8_t usage_switch = 0;
 8000596:	2300      	movs	r3, #0
 8000598:	70fb      	strb	r3, [r7, #3]
	while (1)
	{
		if(BSP_PB_GetState(BUTTON_KEY) == RESET){
 800059a:	2002      	movs	r0, #2
 800059c:	f001 fd46 	bl	800202c <BSP_PB_GetState>
 80005a0:	4603      	mov	r3, r0
 80005a2:	2b00      	cmp	r3, #0
 80005a4:	d122      	bne.n	80005ec <main+0xe8>
			BSP_LED_On(LED1);
 80005a6:	2000      	movs	r0, #0
 80005a8:	f001 fc78 	bl	8001e9c <BSP_LED_On>
			while(BSP_PB_GetState(BUTTON_KEY) == RESET) continue;
 80005ac:	e000      	b.n	80005b0 <main+0xac>
 80005ae:	bf00      	nop
 80005b0:	2002      	movs	r0, #2
 80005b2:	f001 fd3b 	bl	800202c <BSP_PB_GetState>
 80005b6:	4603      	mov	r3, r0
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d0f8      	beq.n	80005ae <main+0xaa>
			usage_switch = !usage_switch;
 80005bc:	78fb      	ldrb	r3, [r7, #3]
 80005be:	2b00      	cmp	r3, #0
 80005c0:	bf0c      	ite	eq
 80005c2:	2301      	moveq	r3, #1
 80005c4:	2300      	movne	r3, #0
 80005c6:	b2db      	uxtb	r3, r3
 80005c8:	70fb      	strb	r3, [r7, #3]
			if(usage_switch == 0) {
 80005ca:	78fb      	ldrb	r3, [r7, #3]
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d106      	bne.n	80005de <main+0xda>
				BSP_LCD_DisplayStringAt(0, 30, (uint8_t *)"Volume control", CENTER_MODE);
 80005d0:	2301      	movs	r3, #1
 80005d2:	4a59      	ldr	r2, [pc, #356]	; (8000738 <main+0x234>)
 80005d4:	211e      	movs	r1, #30
 80005d6:	2000      	movs	r0, #0
 80005d8:	f001 ff56 	bl	8002488 <BSP_LCD_DisplayStringAt>
 80005dc:	e009      	b.n	80005f2 <main+0xee>
			} else {
				BSP_LCD_DisplayStringAt(0, 30, (uint8_t *)"Scroll control", CENTER_MODE);
 80005de:	2301      	movs	r3, #1
 80005e0:	4a58      	ldr	r2, [pc, #352]	; (8000744 <main+0x240>)
 80005e2:	211e      	movs	r1, #30
 80005e4:	2000      	movs	r0, #0
 80005e6:	f001 ff4f 	bl	8002488 <BSP_LCD_DisplayStringAt>
 80005ea:	e002      	b.n	80005f2 <main+0xee>
			}
		} else {
			BSP_LED_Off(LED1);
 80005ec:	2000      	movs	r0, #0
 80005ee:	f001 fc6f 	bl	8001ed0 <BSP_LED_Off>
		}
		/// VOLUME control
		if(usage_switch == 0) {
 80005f2:	78fb      	ldrb	r3, [r7, #3]
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d146      	bne.n	8000686 <main+0x182>
			if (rot_count != TIM3->CNT) {
 80005f8:	4b51      	ldr	r3, [pc, #324]	; (8000740 <main+0x23c>)
 80005fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80005fc:	687a      	ldr	r2, [r7, #4]
 80005fe:	429a      	cmp	r2, r3
 8000600:	d01e      	beq.n	8000640 <main+0x13c>
				if (rot_count > TIM3->CNT) {
 8000602:	4b4f      	ldr	r3, [pc, #316]	; (8000740 <main+0x23c>)
 8000604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000606:	687a      	ldr	r2, [r7, #4]
 8000608:	429a      	cmp	r2, r3
 800060a:	d903      	bls.n	8000614 <main+0x110>
					volume_message.volume = 0b0010000;		// increment volume
 800060c:	4b4e      	ldr	r3, [pc, #312]	; (8000748 <main+0x244>)
 800060e:	2210      	movs	r2, #16
 8000610:	705a      	strb	r2, [r3, #1]
 8000612:	e002      	b.n	800061a <main+0x116>
				} else {
					volume_message.volume = 0b0100000;		// decrement volume
 8000614:	4b4c      	ldr	r3, [pc, #304]	; (8000748 <main+0x244>)
 8000616:	2220      	movs	r2, #32
 8000618:	705a      	strb	r2, [r3, #1]
				}
				USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS,&volume_message,sizeof(volume_message));
 800061a:	2202      	movs	r2, #2
 800061c:	494a      	ldr	r1, [pc, #296]	; (8000748 <main+0x244>)
 800061e:	484b      	ldr	r0, [pc, #300]	; (800074c <main+0x248>)
 8000620:	f007 fdee 	bl	8008200 <USBD_CUSTOM_HID_SendReport>
				HAL_Delay(30);
 8000624:	201e      	movs	r0, #30
 8000626:	f002 f91f 	bl	8002868 <HAL_Delay>
				volume_message.volume = 0b00000000;
 800062a:	4b47      	ldr	r3, [pc, #284]	; (8000748 <main+0x244>)
 800062c:	2200      	movs	r2, #0
 800062e:	705a      	strb	r2, [r3, #1]
				USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS,&volume_message,sizeof(volume_message));
 8000630:	2202      	movs	r2, #2
 8000632:	4945      	ldr	r1, [pc, #276]	; (8000748 <main+0x244>)
 8000634:	4845      	ldr	r0, [pc, #276]	; (800074c <main+0x248>)
 8000636:	f007 fde3 	bl	8008200 <USBD_CUSTOM_HID_SendReport>
				rot_count = TIM3->CNT;
 800063a:	4b41      	ldr	r3, [pc, #260]	; (8000740 <main+0x23c>)
 800063c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800063e:	607b      	str	r3, [r7, #4]
			}
			if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) == 0){
 8000640:	2140      	movs	r1, #64	; 0x40
 8000642:	4843      	ldr	r0, [pc, #268]	; (8000750 <main+0x24c>)
 8000644:	f002 ff22 	bl	800348c <HAL_GPIO_ReadPin>
 8000648:	4603      	mov	r3, r0
 800064a:	2b00      	cmp	r3, #0
 800064c:	d11b      	bne.n	8000686 <main+0x182>
				while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) == 0) continue;
 800064e:	e000      	b.n	8000652 <main+0x14e>
 8000650:	bf00      	nop
 8000652:	2140      	movs	r1, #64	; 0x40
 8000654:	483e      	ldr	r0, [pc, #248]	; (8000750 <main+0x24c>)
 8000656:	f002 ff19 	bl	800348c <HAL_GPIO_ReadPin>
 800065a:	4603      	mov	r3, r0
 800065c:	2b00      	cmp	r3, #0
 800065e:	d0f7      	beq.n	8000650 <main+0x14c>
				volume_message.volume = 0b1000000;			// mute
 8000660:	4b39      	ldr	r3, [pc, #228]	; (8000748 <main+0x244>)
 8000662:	2240      	movs	r2, #64	; 0x40
 8000664:	705a      	strb	r2, [r3, #1]
				USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS,&volume_message,sizeof(volume_message));
 8000666:	2202      	movs	r2, #2
 8000668:	4937      	ldr	r1, [pc, #220]	; (8000748 <main+0x244>)
 800066a:	4838      	ldr	r0, [pc, #224]	; (800074c <main+0x248>)
 800066c:	f007 fdc8 	bl	8008200 <USBD_CUSTOM_HID_SendReport>
				HAL_Delay(10);
 8000670:	200a      	movs	r0, #10
 8000672:	f002 f8f9 	bl	8002868 <HAL_Delay>
				volume_message.volume = 0b00000000;
 8000676:	4b34      	ldr	r3, [pc, #208]	; (8000748 <main+0x244>)
 8000678:	2200      	movs	r2, #0
 800067a:	705a      	strb	r2, [r3, #1]
				USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS,&volume_message,sizeof(volume_message));
 800067c:	2202      	movs	r2, #2
 800067e:	4932      	ldr	r1, [pc, #200]	; (8000748 <main+0x244>)
 8000680:	4832      	ldr	r0, [pc, #200]	; (800074c <main+0x248>)
 8000682:	f007 fdbd 	bl	8008200 <USBD_CUSTOM_HID_SendReport>
			}
		}
		// SCROLL control
		if(usage_switch == 1){
 8000686:	78fb      	ldrb	r3, [r7, #3]
 8000688:	2b01      	cmp	r3, #1
 800068a:	d138      	bne.n	80006fe <main+0x1fa>
			if (rot_count != TIM3->CNT) {
 800068c:	4b2c      	ldr	r3, [pc, #176]	; (8000740 <main+0x23c>)
 800068e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000690:	687a      	ldr	r2, [r7, #4]
 8000692:	429a      	cmp	r2, r3
 8000694:	d010      	beq.n	80006b8 <main+0x1b4>
				mouse_message.wheel = TIM3->CNT-rot_count;
 8000696:	4b2a      	ldr	r3, [pc, #168]	; (8000740 <main+0x23c>)
 8000698:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800069a:	b2da      	uxtb	r2, r3
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	b2db      	uxtb	r3, r3
 80006a0:	1ad3      	subs	r3, r2, r3
 80006a2:	b2da      	uxtb	r2, r3
 80006a4:	4b2b      	ldr	r3, [pc, #172]	; (8000754 <main+0x250>)
 80006a6:	711a      	strb	r2, [r3, #4]
				USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS,&mouse_message,sizeof(mouse_message));
 80006a8:	2205      	movs	r2, #5
 80006aa:	492a      	ldr	r1, [pc, #168]	; (8000754 <main+0x250>)
 80006ac:	4827      	ldr	r0, [pc, #156]	; (800074c <main+0x248>)
 80006ae:	f007 fda7 	bl	8008200 <USBD_CUSTOM_HID_SendReport>
				rot_count = TIM3->CNT;
 80006b2:	4b23      	ldr	r3, [pc, #140]	; (8000740 <main+0x23c>)
 80006b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006b6:	607b      	str	r3, [r7, #4]
			}
			if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) == 0){
 80006b8:	2140      	movs	r1, #64	; 0x40
 80006ba:	4825      	ldr	r0, [pc, #148]	; (8000750 <main+0x24c>)
 80006bc:	f002 fee6 	bl	800348c <HAL_GPIO_ReadPin>
 80006c0:	4603      	mov	r3, r0
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d11b      	bne.n	80006fe <main+0x1fa>
				while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) == 0) continue;
 80006c6:	e000      	b.n	80006ca <main+0x1c6>
 80006c8:	bf00      	nop
 80006ca:	2140      	movs	r1, #64	; 0x40
 80006cc:	4820      	ldr	r0, [pc, #128]	; (8000750 <main+0x24c>)
 80006ce:	f002 fedd 	bl	800348c <HAL_GPIO_ReadPin>
 80006d2:	4603      	mov	r3, r0
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d0f7      	beq.n	80006c8 <main+0x1c4>
				keyBoardHIDsub.KEYCODE1 = 0x39;			// CAPS LOCK
 80006d8:	4b1f      	ldr	r3, [pc, #124]	; (8000758 <main+0x254>)
 80006da:	2239      	movs	r2, #57	; 0x39
 80006dc:	70da      	strb	r2, [r3, #3]
				USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS,&keyBoardHIDsub,sizeof(keyBoardHIDsub));
 80006de:	2209      	movs	r2, #9
 80006e0:	491d      	ldr	r1, [pc, #116]	; (8000758 <main+0x254>)
 80006e2:	481a      	ldr	r0, [pc, #104]	; (800074c <main+0x248>)
 80006e4:	f007 fd8c 	bl	8008200 <USBD_CUSTOM_HID_SendReport>
				HAL_Delay(10);
 80006e8:	200a      	movs	r0, #10
 80006ea:	f002 f8bd 	bl	8002868 <HAL_Delay>
				keyBoardHIDsub.KEYCODE1 = 0;
 80006ee:	4b1a      	ldr	r3, [pc, #104]	; (8000758 <main+0x254>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	70da      	strb	r2, [r3, #3]
				USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS,&keyBoardHIDsub,sizeof(keyBoardHIDsub));
 80006f4:	2209      	movs	r2, #9
 80006f6:	4918      	ldr	r1, [pc, #96]	; (8000758 <main+0x254>)
 80006f8:	4814      	ldr	r0, [pc, #80]	; (800074c <main+0x248>)
 80006fa:	f007 fd81 	bl	8008200 <USBD_CUSTOM_HID_SendReport>
			}

		}
		if (get_caps() == 0) {
 80006fe:	f7ff fee5 	bl	80004cc <get_caps>
 8000702:	4603      	mov	r3, r0
 8000704:	2b00      	cmp	r3, #0
 8000706:	d105      	bne.n	8000714 <main+0x210>
			BSP_LCD_DisplayStringAt(0, 60, (uint8_t *)"caps lock off", CENTER_MODE);
 8000708:	2301      	movs	r3, #1
 800070a:	4a14      	ldr	r2, [pc, #80]	; (800075c <main+0x258>)
 800070c:	213c      	movs	r1, #60	; 0x3c
 800070e:	2000      	movs	r0, #0
 8000710:	f001 feba 	bl	8002488 <BSP_LCD_DisplayStringAt>
		}
		if (get_caps() == 1) {
 8000714:	f7ff feda 	bl	80004cc <get_caps>
 8000718:	4603      	mov	r3, r0
 800071a:	2b01      	cmp	r3, #1
 800071c:	f47f af3d 	bne.w	800059a <main+0x96>
			BSP_LCD_DisplayStringAt(0, 60, (uint8_t *)"CAPS LOCK ON!", CENTER_MODE);
 8000720:	2301      	movs	r3, #1
 8000722:	4a0f      	ldr	r2, [pc, #60]	; (8000760 <main+0x25c>)
 8000724:	213c      	movs	r1, #60	; 0x3c
 8000726:	2000      	movs	r0, #0
 8000728:	f001 feae 	bl	8002488 <BSP_LCD_DisplayStringAt>
		if(BSP_PB_GetState(BUTTON_KEY) == RESET){
 800072c:	e735      	b.n	800059a <main+0x96>
 800072e:	bf00      	nop
 8000730:	20000070 	.word	0x20000070
 8000734:	0800a478 	.word	0x0800a478
 8000738:	0800a47c 	.word	0x0800a47c
 800073c:	20000318 	.word	0x20000318
 8000740:	40000400 	.word	0x40000400
 8000744:	0800a48c 	.word	0x0800a48c
 8000748:	20000014 	.word	0x20000014
 800074c:	20000738 	.word	0x20000738
 8000750:	40020400 	.word	0x40020400
 8000754:	2000000c 	.word	0x2000000c
 8000758:	20000000 	.word	0x20000000
 800075c:	0800a49c 	.word	0x0800a49c
 8000760:	0800a4ac 	.word	0x0800a4ac

08000764 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b094      	sub	sp, #80	; 0x50
 8000768:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800076a:	f107 0320 	add.w	r3, r7, #32
 800076e:	2230      	movs	r2, #48	; 0x30
 8000770:	2100      	movs	r1, #0
 8000772:	4618      	mov	r0, r3
 8000774:	f009 fe6c 	bl	800a450 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000778:	f107 030c 	add.w	r3, r7, #12
 800077c:	2200      	movs	r2, #0
 800077e:	601a      	str	r2, [r3, #0]
 8000780:	605a      	str	r2, [r3, #4]
 8000782:	609a      	str	r2, [r3, #8]
 8000784:	60da      	str	r2, [r3, #12]
 8000786:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000788:	2300      	movs	r3, #0
 800078a:	60bb      	str	r3, [r7, #8]
 800078c:	4b2b      	ldr	r3, [pc, #172]	; (800083c <SystemClock_Config+0xd8>)
 800078e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000790:	4a2a      	ldr	r2, [pc, #168]	; (800083c <SystemClock_Config+0xd8>)
 8000792:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000796:	6413      	str	r3, [r2, #64]	; 0x40
 8000798:	4b28      	ldr	r3, [pc, #160]	; (800083c <SystemClock_Config+0xd8>)
 800079a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800079c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007a0:	60bb      	str	r3, [r7, #8]
 80007a2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007a4:	2300      	movs	r3, #0
 80007a6:	607b      	str	r3, [r7, #4]
 80007a8:	4b25      	ldr	r3, [pc, #148]	; (8000840 <SystemClock_Config+0xdc>)
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	4a24      	ldr	r2, [pc, #144]	; (8000840 <SystemClock_Config+0xdc>)
 80007ae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007b2:	6013      	str	r3, [r2, #0]
 80007b4:	4b22      	ldr	r3, [pc, #136]	; (8000840 <SystemClock_Config+0xdc>)
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007bc:	607b      	str	r3, [r7, #4]
 80007be:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007c0:	2301      	movs	r3, #1
 80007c2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007c4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80007c8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007ca:	2302      	movs	r3, #2
 80007cc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007ce:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80007d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80007d4:	2319      	movs	r3, #25
 80007d6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80007d8:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80007dc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007de:	2302      	movs	r3, #2
 80007e0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80007e2:	2307      	movs	r3, #7
 80007e4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007e6:	f107 0320 	add.w	r3, r7, #32
 80007ea:	4618      	mov	r0, r3
 80007ec:	f004 fb36 	bl	8004e5c <HAL_RCC_OscConfig>
 80007f0:	4603      	mov	r3, r0
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d001      	beq.n	80007fa <SystemClock_Config+0x96>
  {
    Error_Handler();
 80007f6:	f000 fcd9 	bl	80011ac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007fa:	230f      	movs	r3, #15
 80007fc:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007fe:	2302      	movs	r3, #2
 8000800:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000802:	2300      	movs	r3, #0
 8000804:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000806:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800080a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800080c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000810:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000812:	f107 030c 	add.w	r3, r7, #12
 8000816:	2105      	movs	r1, #5
 8000818:	4618      	mov	r0, r3
 800081a:	f004 fd97 	bl	800534c <HAL_RCC_ClockConfig>
 800081e:	4603      	mov	r3, r0
 8000820:	2b00      	cmp	r3, #0
 8000822:	d001      	beq.n	8000828 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000824:	f000 fcc2 	bl	80011ac <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSE, RCC_MCODIV_1);
 8000828:	2200      	movs	r2, #0
 800082a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800082e:	2000      	movs	r0, #0
 8000830:	f004 fe72 	bl	8005518 <HAL_RCC_MCOConfig>
}
 8000834:	bf00      	nop
 8000836:	3750      	adds	r7, #80	; 0x50
 8000838:	46bd      	mov	sp, r7
 800083a:	bd80      	pop	{r7, pc}
 800083c:	40023800 	.word	0x40023800
 8000840:	40007000 	.word	0x40007000

08000844 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b084      	sub	sp, #16
 8000848:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800084a:	463b      	mov	r3, r7
 800084c:	2200      	movs	r2, #0
 800084e:	601a      	str	r2, [r3, #0]
 8000850:	605a      	str	r2, [r3, #4]
 8000852:	609a      	str	r2, [r3, #8]
 8000854:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8000856:	4b21      	ldr	r3, [pc, #132]	; (80008dc <MX_ADC3_Init+0x98>)
 8000858:	4a21      	ldr	r2, [pc, #132]	; (80008e0 <MX_ADC3_Init+0x9c>)
 800085a:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800085c:	4b1f      	ldr	r3, [pc, #124]	; (80008dc <MX_ADC3_Init+0x98>)
 800085e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000862:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000864:	4b1d      	ldr	r3, [pc, #116]	; (80008dc <MX_ADC3_Init+0x98>)
 8000866:	2200      	movs	r2, #0
 8000868:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = DISABLE;
 800086a:	4b1c      	ldr	r3, [pc, #112]	; (80008dc <MX_ADC3_Init+0x98>)
 800086c:	2200      	movs	r2, #0
 800086e:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000870:	4b1a      	ldr	r3, [pc, #104]	; (80008dc <MX_ADC3_Init+0x98>)
 8000872:	2200      	movs	r2, #0
 8000874:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000876:	4b19      	ldr	r3, [pc, #100]	; (80008dc <MX_ADC3_Init+0x98>)
 8000878:	2200      	movs	r2, #0
 800087a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800087e:	4b17      	ldr	r3, [pc, #92]	; (80008dc <MX_ADC3_Init+0x98>)
 8000880:	2200      	movs	r2, #0
 8000882:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000884:	4b15      	ldr	r3, [pc, #84]	; (80008dc <MX_ADC3_Init+0x98>)
 8000886:	4a17      	ldr	r2, [pc, #92]	; (80008e4 <MX_ADC3_Init+0xa0>)
 8000888:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800088a:	4b14      	ldr	r3, [pc, #80]	; (80008dc <MX_ADC3_Init+0x98>)
 800088c:	2200      	movs	r2, #0
 800088e:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8000890:	4b12      	ldr	r3, [pc, #72]	; (80008dc <MX_ADC3_Init+0x98>)
 8000892:	2201      	movs	r2, #1
 8000894:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000896:	4b11      	ldr	r3, [pc, #68]	; (80008dc <MX_ADC3_Init+0x98>)
 8000898:	2200      	movs	r2, #0
 800089a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800089e:	4b0f      	ldr	r3, [pc, #60]	; (80008dc <MX_ADC3_Init+0x98>)
 80008a0:	2201      	movs	r2, #1
 80008a2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80008a4:	480d      	ldr	r0, [pc, #52]	; (80008dc <MX_ADC3_Init+0x98>)
 80008a6:	f002 f803 	bl	80028b0 <HAL_ADC_Init>
 80008aa:	4603      	mov	r3, r0
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d001      	beq.n	80008b4 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 80008b0:	f000 fc7c 	bl	80011ac <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80008b4:	2307      	movs	r3, #7
 80008b6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80008b8:	2301      	movs	r3, #1
 80008ba:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80008bc:	2300      	movs	r3, #0
 80008be:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80008c0:	463b      	mov	r3, r7
 80008c2:	4619      	mov	r1, r3
 80008c4:	4805      	ldr	r0, [pc, #20]	; (80008dc <MX_ADC3_Init+0x98>)
 80008c6:	f002 f837 	bl	8002938 <HAL_ADC_ConfigChannel>
 80008ca:	4603      	mov	r3, r0
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d001      	beq.n	80008d4 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 80008d0:	f000 fc6c 	bl	80011ac <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80008d4:	bf00      	nop
 80008d6:	3710      	adds	r7, #16
 80008d8:	46bd      	mov	sp, r7
 80008da:	bd80      	pop	{r7, pc}
 80008dc:	20000228 	.word	0x20000228
 80008e0:	40012200 	.word	0x40012200
 80008e4:	0f000001 	.word	0x0f000001

080008e8 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b082      	sub	sp, #8
 80008ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80008ee:	463b      	mov	r3, r7
 80008f0:	2200      	movs	r2, #0
 80008f2:	601a      	str	r2, [r3, #0]
 80008f4:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 80008f6:	4b0f      	ldr	r3, [pc, #60]	; (8000934 <MX_DAC_Init+0x4c>)
 80008f8:	4a0f      	ldr	r2, [pc, #60]	; (8000938 <MX_DAC_Init+0x50>)
 80008fa:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 80008fc:	480d      	ldr	r0, [pc, #52]	; (8000934 <MX_DAC_Init+0x4c>)
 80008fe:	f002 fb4a 	bl	8002f96 <HAL_DAC_Init>
 8000902:	4603      	mov	r3, r0
 8000904:	2b00      	cmp	r3, #0
 8000906:	d001      	beq.n	800090c <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8000908:	f000 fc50 	bl	80011ac <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 800090c:	2300      	movs	r3, #0
 800090e:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000910:	2300      	movs	r3, #0
 8000912:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000914:	463b      	mov	r3, r7
 8000916:	2200      	movs	r2, #0
 8000918:	4619      	mov	r1, r3
 800091a:	4806      	ldr	r0, [pc, #24]	; (8000934 <MX_DAC_Init+0x4c>)
 800091c:	f002 fb5d 	bl	8002fda <HAL_DAC_ConfigChannel>
 8000920:	4603      	mov	r3, r0
 8000922:	2b00      	cmp	r3, #0
 8000924:	d001      	beq.n	800092a <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8000926:	f000 fc41 	bl	80011ac <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 800092a:	bf00      	nop
 800092c:	3708      	adds	r7, #8
 800092e:	46bd      	mov	sp, r7
 8000930:	bd80      	pop	{r7, pc}
 8000932:	bf00      	nop
 8000934:	20000270 	.word	0x20000270
 8000938:	40007400 	.word	0x40007400

0800093c <MX_DCMI_Init>:
  * @brief DCMI Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCMI_Init(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 8000940:	4b10      	ldr	r3, [pc, #64]	; (8000984 <MX_DCMI_Init+0x48>)
 8000942:	4a11      	ldr	r2, [pc, #68]	; (8000988 <MX_DCMI_Init+0x4c>)
 8000944:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 8000946:	4b0f      	ldr	r3, [pc, #60]	; (8000984 <MX_DCMI_Init+0x48>)
 8000948:	2200      	movs	r2, #0
 800094a:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_FALLING;
 800094c:	4b0d      	ldr	r3, [pc, #52]	; (8000984 <MX_DCMI_Init+0x48>)
 800094e:	2200      	movs	r2, #0
 8000950:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_LOW;
 8000952:	4b0c      	ldr	r3, [pc, #48]	; (8000984 <MX_DCMI_Init+0x48>)
 8000954:	2200      	movs	r2, #0
 8000956:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 8000958:	4b0a      	ldr	r3, [pc, #40]	; (8000984 <MX_DCMI_Init+0x48>)
 800095a:	2200      	movs	r2, #0
 800095c:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 800095e:	4b09      	ldr	r3, [pc, #36]	; (8000984 <MX_DCMI_Init+0x48>)
 8000960:	2200      	movs	r2, #0
 8000962:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 8000964:	4b07      	ldr	r3, [pc, #28]	; (8000984 <MX_DCMI_Init+0x48>)
 8000966:	2200      	movs	r2, #0
 8000968:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 800096a:	4b06      	ldr	r3, [pc, #24]	; (8000984 <MX_DCMI_Init+0x48>)
 800096c:	2200      	movs	r2, #0
 800096e:	621a      	str	r2, [r3, #32]
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 8000970:	4804      	ldr	r0, [pc, #16]	; (8000984 <MX_DCMI_Init+0x48>)
 8000972:	f002 fb81 	bl	8003078 <HAL_DCMI_Init>
 8000976:	4603      	mov	r3, r0
 8000978:	2b00      	cmp	r3, #0
 800097a:	d001      	beq.n	8000980 <MX_DCMI_Init+0x44>
  {
    Error_Handler();
 800097c:	f000 fc16 	bl	80011ac <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 8000980:	bf00      	nop
 8000982:	bd80      	pop	{r7, pc}
 8000984:	20000284 	.word	0x20000284
 8000988:	50050000 	.word	0x50050000

0800098c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000990:	4b12      	ldr	r3, [pc, #72]	; (80009dc <MX_I2C1_Init+0x50>)
 8000992:	4a13      	ldr	r2, [pc, #76]	; (80009e0 <MX_I2C1_Init+0x54>)
 8000994:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000996:	4b11      	ldr	r3, [pc, #68]	; (80009dc <MX_I2C1_Init+0x50>)
 8000998:	4a12      	ldr	r2, [pc, #72]	; (80009e4 <MX_I2C1_Init+0x58>)
 800099a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800099c:	4b0f      	ldr	r3, [pc, #60]	; (80009dc <MX_I2C1_Init+0x50>)
 800099e:	2200      	movs	r2, #0
 80009a0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80009a2:	4b0e      	ldr	r3, [pc, #56]	; (80009dc <MX_I2C1_Init+0x50>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009a8:	4b0c      	ldr	r3, [pc, #48]	; (80009dc <MX_I2C1_Init+0x50>)
 80009aa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80009ae:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80009b0:	4b0a      	ldr	r3, [pc, #40]	; (80009dc <MX_I2C1_Init+0x50>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80009b6:	4b09      	ldr	r3, [pc, #36]	; (80009dc <MX_I2C1_Init+0x50>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80009bc:	4b07      	ldr	r3, [pc, #28]	; (80009dc <MX_I2C1_Init+0x50>)
 80009be:	2200      	movs	r2, #0
 80009c0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80009c2:	4b06      	ldr	r3, [pc, #24]	; (80009dc <MX_I2C1_Init+0x50>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80009c8:	4804      	ldr	r0, [pc, #16]	; (80009dc <MX_I2C1_Init+0x50>)
 80009ca:	f002 fd91 	bl	80034f0 <HAL_I2C_Init>
 80009ce:	4603      	mov	r3, r0
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d001      	beq.n	80009d8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80009d4:	f000 fbea 	bl	80011ac <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80009d8:	bf00      	nop
 80009da:	bd80      	pop	{r7, pc}
 80009dc:	200002c4 	.word	0x200002c4
 80009e0:	40005400 	.word	0x40005400
 80009e4:	000186a0 	.word	0x000186a0

080009e8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b08c      	sub	sp, #48	; 0x30
 80009ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80009ee:	f107 030c 	add.w	r3, r7, #12
 80009f2:	2224      	movs	r2, #36	; 0x24
 80009f4:	2100      	movs	r1, #0
 80009f6:	4618      	mov	r0, r3
 80009f8:	f009 fd2a 	bl	800a450 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009fc:	1d3b      	adds	r3, r7, #4
 80009fe:	2200      	movs	r2, #0
 8000a00:	601a      	str	r2, [r3, #0]
 8000a02:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000a04:	4b20      	ldr	r3, [pc, #128]	; (8000a88 <MX_TIM3_Init+0xa0>)
 8000a06:	4a21      	ldr	r2, [pc, #132]	; (8000a8c <MX_TIM3_Init+0xa4>)
 8000a08:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000a0a:	4b1f      	ldr	r3, [pc, #124]	; (8000a88 <MX_TIM3_Init+0xa0>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a10:	4b1d      	ldr	r3, [pc, #116]	; (8000a88 <MX_TIM3_Init+0xa0>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000a16:	4b1c      	ldr	r3, [pc, #112]	; (8000a88 <MX_TIM3_Init+0xa0>)
 8000a18:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000a1c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a1e:	4b1a      	ldr	r3, [pc, #104]	; (8000a88 <MX_TIM3_Init+0xa0>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a24:	4b18      	ldr	r3, [pc, #96]	; (8000a88 <MX_TIM3_Init+0xa0>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000a2a:	2301      	movs	r3, #1
 8000a2c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000a32:	2301      	movs	r3, #1
 8000a34:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000a36:	2300      	movs	r3, #0
 8000a38:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000a42:	2301      	movs	r3, #1
 8000a44:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000a46:	2300      	movs	r3, #0
 8000a48:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8000a4e:	f107 030c 	add.w	r3, r7, #12
 8000a52:	4619      	mov	r1, r3
 8000a54:	480c      	ldr	r0, [pc, #48]	; (8000a88 <MX_TIM3_Init+0xa0>)
 8000a56:	f004 ff09 	bl	800586c <HAL_TIM_Encoder_Init>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d001      	beq.n	8000a64 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8000a60:	f000 fba4 	bl	80011ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a64:	2300      	movs	r3, #0
 8000a66:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000a6c:	1d3b      	adds	r3, r7, #4
 8000a6e:	4619      	mov	r1, r3
 8000a70:	4805      	ldr	r0, [pc, #20]	; (8000a88 <MX_TIM3_Init+0xa0>)
 8000a72:	f005 f915 	bl	8005ca0 <HAL_TIMEx_MasterConfigSynchronization>
 8000a76:	4603      	mov	r3, r0
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d001      	beq.n	8000a80 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8000a7c:	f000 fb96 	bl	80011ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000a80:	bf00      	nop
 8000a82:	3730      	adds	r7, #48	; 0x30
 8000a84:	46bd      	mov	sp, r7
 8000a86:	bd80      	pop	{r7, pc}
 8000a88:	20000318 	.word	0x20000318
 8000a8c:	40000400 	.word	0x40000400

08000a90 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000a94:	4b11      	ldr	r3, [pc, #68]	; (8000adc <MX_USART3_UART_Init+0x4c>)
 8000a96:	4a12      	ldr	r2, [pc, #72]	; (8000ae0 <MX_USART3_UART_Init+0x50>)
 8000a98:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000a9a:	4b10      	ldr	r3, [pc, #64]	; (8000adc <MX_USART3_UART_Init+0x4c>)
 8000a9c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000aa0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000aa2:	4b0e      	ldr	r3, [pc, #56]	; (8000adc <MX_USART3_UART_Init+0x4c>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000aa8:	4b0c      	ldr	r3, [pc, #48]	; (8000adc <MX_USART3_UART_Init+0x4c>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000aae:	4b0b      	ldr	r3, [pc, #44]	; (8000adc <MX_USART3_UART_Init+0x4c>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000ab4:	4b09      	ldr	r3, [pc, #36]	; (8000adc <MX_USART3_UART_Init+0x4c>)
 8000ab6:	220c      	movs	r2, #12
 8000ab8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000aba:	4b08      	ldr	r3, [pc, #32]	; (8000adc <MX_USART3_UART_Init+0x4c>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ac0:	4b06      	ldr	r3, [pc, #24]	; (8000adc <MX_USART3_UART_Init+0x4c>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000ac6:	4805      	ldr	r0, [pc, #20]	; (8000adc <MX_USART3_UART_Init+0x4c>)
 8000ac8:	f005 f966 	bl	8005d98 <HAL_UART_Init>
 8000acc:	4603      	mov	r3, r0
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d001      	beq.n	8000ad6 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000ad2:	f000 fb6b 	bl	80011ac <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000ad6:	bf00      	nop
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	bf00      	nop
 8000adc:	20000360 	.word	0x20000360
 8000ae0:	40004800 	.word	0x40004800

08000ae4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b08e      	sub	sp, #56	; 0x38
 8000ae8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000aee:	2200      	movs	r2, #0
 8000af0:	601a      	str	r2, [r3, #0]
 8000af2:	605a      	str	r2, [r3, #4]
 8000af4:	609a      	str	r2, [r3, #8]
 8000af6:	60da      	str	r2, [r3, #12]
 8000af8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000afa:	2300      	movs	r3, #0
 8000afc:	623b      	str	r3, [r7, #32]
 8000afe:	4bb1      	ldr	r3, [pc, #708]	; (8000dc4 <MX_GPIO_Init+0x2e0>)
 8000b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b02:	4ab0      	ldr	r2, [pc, #704]	; (8000dc4 <MX_GPIO_Init+0x2e0>)
 8000b04:	f043 0310 	orr.w	r3, r3, #16
 8000b08:	6313      	str	r3, [r2, #48]	; 0x30
 8000b0a:	4bae      	ldr	r3, [pc, #696]	; (8000dc4 <MX_GPIO_Init+0x2e0>)
 8000b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b0e:	f003 0310 	and.w	r3, r3, #16
 8000b12:	623b      	str	r3, [r7, #32]
 8000b14:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b16:	2300      	movs	r3, #0
 8000b18:	61fb      	str	r3, [r7, #28]
 8000b1a:	4baa      	ldr	r3, [pc, #680]	; (8000dc4 <MX_GPIO_Init+0x2e0>)
 8000b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b1e:	4aa9      	ldr	r2, [pc, #676]	; (8000dc4 <MX_GPIO_Init+0x2e0>)
 8000b20:	f043 0302 	orr.w	r3, r3, #2
 8000b24:	6313      	str	r3, [r2, #48]	; 0x30
 8000b26:	4ba7      	ldr	r3, [pc, #668]	; (8000dc4 <MX_GPIO_Init+0x2e0>)
 8000b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2a:	f003 0302 	and.w	r3, r3, #2
 8000b2e:	61fb      	str	r3, [r7, #28]
 8000b30:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b32:	2300      	movs	r3, #0
 8000b34:	61bb      	str	r3, [r7, #24]
 8000b36:	4ba3      	ldr	r3, [pc, #652]	; (8000dc4 <MX_GPIO_Init+0x2e0>)
 8000b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3a:	4aa2      	ldr	r2, [pc, #648]	; (8000dc4 <MX_GPIO_Init+0x2e0>)
 8000b3c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b40:	6313      	str	r3, [r2, #48]	; 0x30
 8000b42:	4ba0      	ldr	r3, [pc, #640]	; (8000dc4 <MX_GPIO_Init+0x2e0>)
 8000b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b4a:	61bb      	str	r3, [r7, #24]
 8000b4c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b4e:	2300      	movs	r3, #0
 8000b50:	617b      	str	r3, [r7, #20]
 8000b52:	4b9c      	ldr	r3, [pc, #624]	; (8000dc4 <MX_GPIO_Init+0x2e0>)
 8000b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b56:	4a9b      	ldr	r2, [pc, #620]	; (8000dc4 <MX_GPIO_Init+0x2e0>)
 8000b58:	f043 0308 	orr.w	r3, r3, #8
 8000b5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b5e:	4b99      	ldr	r3, [pc, #612]	; (8000dc4 <MX_GPIO_Init+0x2e0>)
 8000b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b62:	f003 0308 	and.w	r3, r3, #8
 8000b66:	617b      	str	r3, [r7, #20]
 8000b68:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	613b      	str	r3, [r7, #16]
 8000b6e:	4b95      	ldr	r3, [pc, #596]	; (8000dc4 <MX_GPIO_Init+0x2e0>)
 8000b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b72:	4a94      	ldr	r2, [pc, #592]	; (8000dc4 <MX_GPIO_Init+0x2e0>)
 8000b74:	f043 0304 	orr.w	r3, r3, #4
 8000b78:	6313      	str	r3, [r2, #48]	; 0x30
 8000b7a:	4b92      	ldr	r3, [pc, #584]	; (8000dc4 <MX_GPIO_Init+0x2e0>)
 8000b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b7e:	f003 0304 	and.w	r3, r3, #4
 8000b82:	613b      	str	r3, [r7, #16]
 8000b84:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b86:	2300      	movs	r3, #0
 8000b88:	60fb      	str	r3, [r7, #12]
 8000b8a:	4b8e      	ldr	r3, [pc, #568]	; (8000dc4 <MX_GPIO_Init+0x2e0>)
 8000b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8e:	4a8d      	ldr	r2, [pc, #564]	; (8000dc4 <MX_GPIO_Init+0x2e0>)
 8000b90:	f043 0301 	orr.w	r3, r3, #1
 8000b94:	6313      	str	r3, [r2, #48]	; 0x30
 8000b96:	4b8b      	ldr	r3, [pc, #556]	; (8000dc4 <MX_GPIO_Init+0x2e0>)
 8000b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9a:	f003 0301 	and.w	r3, r3, #1
 8000b9e:	60fb      	str	r3, [r7, #12]
 8000ba0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	60bb      	str	r3, [r7, #8]
 8000ba6:	4b87      	ldr	r3, [pc, #540]	; (8000dc4 <MX_GPIO_Init+0x2e0>)
 8000ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000baa:	4a86      	ldr	r2, [pc, #536]	; (8000dc4 <MX_GPIO_Init+0x2e0>)
 8000bac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000bb0:	6313      	str	r3, [r2, #48]	; 0x30
 8000bb2:	4b84      	ldr	r3, [pc, #528]	; (8000dc4 <MX_GPIO_Init+0x2e0>)
 8000bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000bba:	60bb      	str	r3, [r7, #8]
 8000bbc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	607b      	str	r3, [r7, #4]
 8000bc2:	4b80      	ldr	r3, [pc, #512]	; (8000dc4 <MX_GPIO_Init+0x2e0>)
 8000bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc6:	4a7f      	ldr	r2, [pc, #508]	; (8000dc4 <MX_GPIO_Init+0x2e0>)
 8000bc8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000bcc:	6313      	str	r3, [r2, #48]	; 0x30
 8000bce:	4b7d      	ldr	r3, [pc, #500]	; (8000dc4 <MX_GPIO_Init+0x2e0>)
 8000bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000bd6:	607b      	str	r3, [r7, #4]
 8000bd8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000bda:	2300      	movs	r3, #0
 8000bdc:	603b      	str	r3, [r7, #0]
 8000bde:	4b79      	ldr	r3, [pc, #484]	; (8000dc4 <MX_GPIO_Init+0x2e0>)
 8000be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be2:	4a78      	ldr	r2, [pc, #480]	; (8000dc4 <MX_GPIO_Init+0x2e0>)
 8000be4:	f043 0320 	orr.w	r3, r3, #32
 8000be8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bea:	4b76      	ldr	r3, [pc, #472]	; (8000dc4 <MX_GPIO_Init+0x2e0>)
 8000bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bee:	f003 0320 	and.w	r3, r3, #32
 8000bf2:	603b      	str	r3, [r7, #0]
 8000bf4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, SmartCard_CMDVCC_Pin|LED2_Pin|LED1_Pin, GPIO_PIN_RESET);
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	f44f 518a 	mov.w	r1, #4416	; 0x1140
 8000bfc:	4872      	ldr	r0, [pc, #456]	; (8000dc8 <MX_GPIO_Init+0x2e4>)
 8000bfe:	f002 fc5d 	bl	80034bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
 8000c02:	2200      	movs	r2, #0
 8000c04:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c08:	4870      	ldr	r0, [pc, #448]	; (8000dcc <MX_GPIO_Init+0x2e8>)
 8000c0a:	f002 fc57 	bl	80034bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, SmartCard_3_5V_Pin|OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000c0e:	2200      	movs	r2, #0
 8000c10:	f248 0120 	movw	r1, #32800	; 0x8020
 8000c14:	486e      	ldr	r0, [pc, #440]	; (8000dd0 <MX_GPIO_Init+0x2ec>)
 8000c16:	f002 fc51 	bl	80034bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, GPIO_PIN_RESET);
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	2180      	movs	r1, #128	; 0x80
 8000c1e:	486d      	ldr	r0, [pc, #436]	; (8000dd4 <MX_GPIO_Init+0x2f0>)
 8000c20:	f002 fc4c 	bl	80034bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SmartCard_RST_GPIO_Port, SmartCard_RST_Pin, GPIO_PIN_RESET);
 8000c24:	2200      	movs	r2, #0
 8000c26:	2180      	movs	r1, #128	; 0x80
 8000c28:	486b      	ldr	r0, [pc, #428]	; (8000dd8 <MX_GPIO_Init+0x2f4>)
 8000c2a:	f002 fc47 	bl	80034bc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : MII_TXD1_Pin MII_TXD0_Pin MII_TX_EN_Pin */
  GPIO_InitStruct.Pin = MII_TXD1_Pin|MII_TXD0_Pin|MII_TX_EN_Pin;
 8000c2e:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 8000c32:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c34:	2302      	movs	r3, #2
 8000c36:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c40:	230b      	movs	r3, #11
 8000c42:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c44:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c48:	4619      	mov	r1, r3
 8000c4a:	485f      	ldr	r0, [pc, #380]	; (8000dc8 <MX_GPIO_Init+0x2e4>)
 8000c4c:	f002 fa82 	bl	8003154 <HAL_GPIO_Init>

  /*Configure GPIO pins : MicroSDCard_CLK_Pin MicroSDCard_D1_Pin MicroSDCard_D0_Pin */
  GPIO_InitStruct.Pin = MicroSDCard_CLK_Pin|MicroSDCard_D1_Pin|MicroSDCard_D0_Pin;
 8000c50:	f44f 5398 	mov.w	r3, #4864	; 0x1300
 8000c54:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c56:	2302      	movs	r3, #2
 8000c58:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c5e:	2303      	movs	r3, #3
 8000c60:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000c62:	230c      	movs	r3, #12
 8000c64:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c6a:	4619      	mov	r1, r3
 8000c6c:	4859      	ldr	r0, [pc, #356]	; (8000dd4 <MX_GPIO_Init+0x2f0>)
 8000c6e:	f002 fa71 	bl	8003154 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000c72:	2340      	movs	r3, #64	; 0x40
 8000c74:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c76:	2300      	movs	r3, #0
 8000c78:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000c7a:	2302      	movs	r3, #2
 8000c7c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c82:	4619      	mov	r1, r3
 8000c84:	4855      	ldr	r0, [pc, #340]	; (8000ddc <MX_GPIO_Init+0x2f8>)
 8000c86:	f002 fa65 	bl	8003154 <HAL_GPIO_Init>

  /*Configure GPIO pin : User_Button_Pin */
  GPIO_InitStruct.Pin = User_Button_Pin;
 8000c8a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000c8e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000c90:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000c94:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c96:	2300      	movs	r3, #0
 8000c98:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(User_Button_GPIO_Port, &GPIO_InitStruct);
 8000c9a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c9e:	4619      	mov	r1, r3
 8000ca0:	4849      	ldr	r0, [pc, #292]	; (8000dc8 <MX_GPIO_Init+0x2e4>)
 8000ca2:	f002 fa57 	bl	8003154 <HAL_GPIO_Init>

  /*Configure GPIO pins : SmartCard_CMDVCC_Pin LED2_Pin LED1_Pin */
  GPIO_InitStruct.Pin = SmartCard_CMDVCC_Pin|LED2_Pin|LED1_Pin;
 8000ca6:	f44f 538a 	mov.w	r3, #4416	; 0x1140
 8000caa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cac:	2301      	movs	r3, #1
 8000cae:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000cb8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cbc:	4619      	mov	r1, r3
 8000cbe:	4842      	ldr	r0, [pc, #264]	; (8000dc8 <MX_GPIO_Init+0x2e4>)
 8000cc0:	f002 fa48 	bl	8003154 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S_SD_Pin I2S_WS_Pin */
  GPIO_InitStruct.Pin = I2S_SD_Pin|I2S_WS_Pin;
 8000cc4:	2309      	movs	r3, #9
 8000cc6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cc8:	2302      	movs	r3, #2
 8000cca:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000cd4:	2305      	movs	r3, #5
 8000cd6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000cd8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cdc:	4619      	mov	r1, r3
 8000cde:	483b      	ldr	r0, [pc, #236]	; (8000dcc <MX_GPIO_Init+0x2e8>)
 8000ce0:	f002 fa38 	bl	8003154 <HAL_GPIO_Init>

  /*Configure GPIO pin : IO_Expander_INT_Pin */
  GPIO_InitStruct.Pin = IO_Expander_INT_Pin;
 8000ce4:	2304      	movs	r3, #4
 8000ce6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000ce8:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000cec:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(IO_Expander_INT_GPIO_Port, &GPIO_InitStruct);
 8000cf2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cf6:	4619      	mov	r1, r3
 8000cf8:	4834      	ldr	r0, [pc, #208]	; (8000dcc <MX_GPIO_Init+0x2e8>)
 8000cfa:	f002 fa2b 	bl	8003154 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED3_Pin */
  GPIO_InitStruct.Pin = LED3_Pin;
 8000cfe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d02:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d04:	2301      	movs	r3, #1
 8000d06:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LED3_GPIO_Port, &GPIO_InitStruct);
 8000d10:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d14:	4619      	mov	r1, r3
 8000d16:	482d      	ldr	r0, [pc, #180]	; (8000dcc <MX_GPIO_Init+0x2e8>)
 8000d18:	f002 fa1c 	bl	8003154 <HAL_GPIO_Init>

  /*Configure GPIO pin : MicroSDCard_CMD_Pin */
  GPIO_InitStruct.Pin = MicroSDCard_CMD_Pin;
 8000d1c:	2304      	movs	r3, #4
 8000d1e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d20:	2302      	movs	r3, #2
 8000d22:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d24:	2300      	movs	r3, #0
 8000d26:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d28:	2303      	movs	r3, #3
 8000d2a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000d2c:	230c      	movs	r3, #12
 8000d2e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(MicroSDCard_CMD_GPIO_Port, &GPIO_InitStruct);
 8000d30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d34:	4619      	mov	r1, r3
 8000d36:	482a      	ldr	r0, [pc, #168]	; (8000de0 <MX_GPIO_Init+0x2fc>)
 8000d38:	f002 fa0c 	bl	8003154 <HAL_GPIO_Init>

  /*Configure GPIO pins : SmartCard_3_5V_Pin OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = SmartCard_3_5V_Pin|OTG_FS_PowerSwitchOn_Pin;
 8000d3c:	f248 0320 	movw	r3, #32800	; 0x8020
 8000d40:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d42:	2301      	movs	r3, #1
 8000d44:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d46:	2300      	movs	r3, #0
 8000d48:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000d4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d52:	4619      	mov	r1, r3
 8000d54:	481e      	ldr	r0, [pc, #120]	; (8000dd0 <MX_GPIO_Init+0x2ec>)
 8000d56:	f002 f9fd 	bl	8003154 <HAL_GPIO_Init>

  /*Configure GPIO pin : MII_RX_ER_Pin */
  GPIO_InitStruct.Pin = MII_RX_ER_Pin;
 8000d5a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d5e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d60:	2302      	movs	r3, #2
 8000d62:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d64:	2300      	movs	r3, #0
 8000d66:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d6c:	230b      	movs	r3, #11
 8000d6e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(MII_RX_ER_GPIO_Port, &GPIO_InitStruct);
 8000d70:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d74:	4619      	mov	r1, r3
 8000d76:	4815      	ldr	r0, [pc, #84]	; (8000dcc <MX_GPIO_Init+0x2e8>)
 8000d78:	f002 f9ec 	bl	8003154 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_DIR_Pin;
 8000d7c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000d80:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d82:	2302      	movs	r3, #2
 8000d84:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d86:	2300      	movs	r3, #0
 8000d88:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d8a:	2303      	movs	r3, #3
 8000d8c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000d8e:	230a      	movs	r3, #10
 8000d90:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ULPI_DIR_GPIO_Port, &GPIO_InitStruct);
 8000d92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d96:	4619      	mov	r1, r3
 8000d98:	480c      	ldr	r0, [pc, #48]	; (8000dcc <MX_GPIO_Init+0x2e8>)
 8000d9a:	f002 f9db 	bl	8003154 <HAL_GPIO_Init>

  /*Configure GPIO pin : MicroSDCard_Detect_Pin */
  GPIO_InitStruct.Pin = MicroSDCard_Detect_Pin;
 8000d9e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000da2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000da4:	2300      	movs	r3, #0
 8000da6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000da8:	2301      	movs	r3, #1
 8000daa:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(MicroSDCard_Detect_GPIO_Port, &GPIO_InitStruct);
 8000dac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000db0:	4619      	mov	r1, r3
 8000db2:	4807      	ldr	r0, [pc, #28]	; (8000dd0 <MX_GPIO_Init+0x2ec>)
 8000db4:	f002 f9ce 	bl	8003154 <HAL_GPIO_Init>

  /*Configure GPIO pins : MII_CRS_Pin MII_COL_Pin MII_RXD2_Pin MII_RXD3_Pin */
  GPIO_InitStruct.Pin = MII_CRS_Pin|MII_COL_Pin|MII_RXD2_Pin|MII_RXD3_Pin;
 8000db8:	23cc      	movs	r3, #204	; 0xcc
 8000dba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dbc:	2302      	movs	r3, #2
 8000dbe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	e00f      	b.n	8000de4 <MX_GPIO_Init+0x300>
 8000dc4:	40023800 	.word	0x40023800
 8000dc8:	40021800 	.word	0x40021800
 8000dcc:	40022000 	.word	0x40022000
 8000dd0:	40021c00 	.word	0x40021c00
 8000dd4:	40020800 	.word	0x40020800
 8000dd8:	40021400 	.word	0x40021400
 8000ddc:	40020400 	.word	0x40020400
 8000de0:	40020c00 	.word	0x40020c00
 8000de4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000de6:	2300      	movs	r3, #0
 8000de8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000dea:	230b      	movs	r3, #11
 8000dec:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000dee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000df2:	4619      	mov	r1, r3
 8000df4:	486c      	ldr	r0, [pc, #432]	; (8000fa8 <MX_GPIO_Init+0x4c4>)
 8000df6:	f002 f9ad 	bl	8003154 <HAL_GPIO_Init>

  /*Configure GPIO pin : MCO_Pin */
  GPIO_InitStruct.Pin = MCO_Pin;
 8000dfa:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000dfe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e00:	2302      	movs	r3, #2
 8000e02:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e04:	2300      	movs	r3, #0
 8000e06:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(MCO_GPIO_Port, &GPIO_InitStruct);
 8000e10:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e14:	4619      	mov	r1, r3
 8000e16:	4865      	ldr	r0, [pc, #404]	; (8000fac <MX_GPIO_Init+0x4c8>)
 8000e18:	f002 f99c 	bl	8003154 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED4_Pin */
  GPIO_InitStruct.Pin = LED4_Pin;
 8000e1c:	2380      	movs	r3, #128	; 0x80
 8000e1e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e20:	2301      	movs	r3, #1
 8000e22:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e24:	2300      	movs	r3, #0
 8000e26:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LED4_GPIO_Port, &GPIO_InitStruct);
 8000e2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e30:	4619      	mov	r1, r3
 8000e32:	485f      	ldr	r0, [pc, #380]	; (8000fb0 <MX_GPIO_Init+0x4cc>)
 8000e34:	f002 f98e 	bl	8003154 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8000e38:	2310      	movs	r3, #16
 8000e3a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e3c:	2302      	movs	r3, #2
 8000e3e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e40:	2300      	movs	r3, #0
 8000e42:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e44:	2303      	movs	r3, #3
 8000e46:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000e48:	230a      	movs	r3, #10
 8000e4a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8000e4c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e50:	4619      	mov	r1, r3
 8000e52:	4855      	ldr	r0, [pc, #340]	; (8000fa8 <MX_GPIO_Init+0x4c4>)
 8000e54:	f002 f97e 	bl	8003154 <HAL_GPIO_Init>

  /*Configure GPIO pin : SmartCard_CLK_Pin */
  GPIO_InitStruct.Pin = SmartCard_CLK_Pin;
 8000e58:	2380      	movs	r3, #128	; 0x80
 8000e5a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e5c:	2302      	movs	r3, #2
 8000e5e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e60:	2300      	movs	r3, #0
 8000e62:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e64:	2300      	movs	r3, #0
 8000e66:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8000e68:	2308      	movs	r3, #8
 8000e6a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(SmartCard_CLK_GPIO_Port, &GPIO_InitStruct);
 8000e6c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e70:	4619      	mov	r1, r3
 8000e72:	4850      	ldr	r0, [pc, #320]	; (8000fb4 <MX_GPIO_Init+0x4d0>)
 8000e74:	f002 f96e 	bl	8003154 <HAL_GPIO_Init>

  /*Configure GPIO pin : SmartCard_RST_Pin */
  GPIO_InitStruct.Pin = SmartCard_RST_Pin;
 8000e78:	2380      	movs	r3, #128	; 0x80
 8000e7a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e7c:	2301      	movs	r3, #1
 8000e7e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e80:	2300      	movs	r3, #0
 8000e82:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e84:	2300      	movs	r3, #0
 8000e86:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(SmartCard_RST_GPIO_Port, &GPIO_InitStruct);
 8000e88:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e8c:	4619      	mov	r1, r3
 8000e8e:	484a      	ldr	r0, [pc, #296]	; (8000fb8 <MX_GPIO_Init+0x4d4>)
 8000e90:	f002 f960 	bl	8003154 <HAL_GPIO_Init>

  /*Configure GPIO pin : SmartCard_OFF_Pin */
  GPIO_InitStruct.Pin = SmartCard_OFF_Pin;
 8000e94:	2340      	movs	r3, #64	; 0x40
 8000e96:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(SmartCard_OFF_GPIO_Port, &GPIO_InitStruct);
 8000ea0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ea4:	4619      	mov	r1, r3
 8000ea6:	4844      	ldr	r0, [pc, #272]	; (8000fb8 <MX_GPIO_Init+0x4d4>)
 8000ea8:	f002 f954 	bl	8003154 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_STP_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin;
 8000eac:	2301      	movs	r3, #1
 8000eae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eb0:	2302      	movs	r3, #2
 8000eb2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eb8:	2303      	movs	r3, #3
 8000eba:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000ebc:	230a      	movs	r3, #10
 8000ebe:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ULPI_STP_GPIO_Port, &GPIO_InitStruct);
 8000ec0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ec4:	4619      	mov	r1, r3
 8000ec6:	483a      	ldr	r0, [pc, #232]	; (8000fb0 <MX_GPIO_Init+0x4cc>)
 8000ec8:	f002 f944 	bl	8003154 <HAL_GPIO_Init>

  /*Configure GPIO pins : MII_MDC_Pin MII_TXD2_Pin MII_TX_CLK_Pin MII_RXD0_Pin
                           MII_RXD1_Pin */
  GPIO_InitStruct.Pin = MII_MDC_Pin|MII_TXD2_Pin|MII_TX_CLK_Pin|MII_RXD0_Pin
 8000ecc:	233e      	movs	r3, #62	; 0x3e
 8000ece:	627b      	str	r3, [r7, #36]	; 0x24
                          |MII_RXD1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ed0:	2302      	movs	r3, #2
 8000ed2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000edc:	230b      	movs	r3, #11
 8000ede:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ee0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ee4:	4619      	mov	r1, r3
 8000ee6:	4832      	ldr	r0, [pc, #200]	; (8000fb0 <MX_GPIO_Init+0x4cc>)
 8000ee8:	f002 f934 	bl	8003154 <HAL_GPIO_Init>

  /*Configure GPIO pin : SW1_Pin */
  GPIO_InitStruct.Pin = SW1_Pin;
 8000eec:	2304      	movs	r3, #4
 8000eee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(SW1_GPIO_Port, &GPIO_InitStruct);
 8000ef8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000efc:	4619      	mov	r1, r3
 8000efe:	482f      	ldr	r0, [pc, #188]	; (8000fbc <MX_GPIO_Init+0x4d8>)
 8000f00:	f002 f928 	bl	8003154 <HAL_GPIO_Init>

  /*Configure GPIO pins : MII_RX_CLK_RMII_REF_CLK_Pin MII_MDIO_Pin MII_RX_DV_RMII_CRSDV_Pin */
  GPIO_InitStruct.Pin = MII_RX_CLK_RMII_REF_CLK_Pin|MII_MDIO_Pin|MII_RX_DV_RMII_CRSDV_Pin;
 8000f04:	2386      	movs	r3, #134	; 0x86
 8000f06:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f08:	2302      	movs	r3, #2
 8000f0a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f10:	2300      	movs	r3, #0
 8000f12:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f14:	230b      	movs	r3, #11
 8000f16:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f18:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f1c:	4619      	mov	r1, r3
 8000f1e:	4823      	ldr	r0, [pc, #140]	; (8000fac <MX_GPIO_Init+0x4c8>)
 8000f20:	f002 f918 	bl	8003154 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 8000f24:	2328      	movs	r3, #40	; 0x28
 8000f26:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f28:	2302      	movs	r3, #2
 8000f2a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f30:	2303      	movs	r3, #3
 8000f32:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000f34:	230a      	movs	r3, #10
 8000f36:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f38:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f3c:	4619      	mov	r1, r3
 8000f3e:	481b      	ldr	r0, [pc, #108]	; (8000fac <MX_GPIO_Init+0x4c8>)
 8000f40:	f002 f908 	bl	8003154 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D5_Pin ULPI_D6_Pin ULPI_D2_Pin ULPI_D1_Pin
                           ULPI_D3_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D5_Pin|ULPI_D6_Pin|ULPI_D2_Pin|ULPI_D1_Pin
 8000f44:	f643 4303 	movw	r3, #15363	; 0x3c03
 8000f48:	627b      	str	r3, [r7, #36]	; 0x24
                          |ULPI_D3_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f4a:	2302      	movs	r3, #2
 8000f4c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f52:	2303      	movs	r3, #3
 8000f54:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000f56:	230a      	movs	r3, #10
 8000f58:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f5e:	4619      	mov	r1, r3
 8000f60:	4816      	ldr	r0, [pc, #88]	; (8000fbc <MX_GPIO_Init+0x4d8>)
 8000f62:	f002 f8f7 	bl	8003154 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000f66:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000f6a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000f6c:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000f70:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f72:	2300      	movs	r3, #0
 8000f74:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000f76:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f7a:	4619      	mov	r1, r3
 8000f7c:	480e      	ldr	r0, [pc, #56]	; (8000fb8 <MX_GPIO_Init+0x4d4>)
 8000f7e:	f002 f8e9 	bl	8003154 <HAL_GPIO_Init>

  /*Configure GPIO pin : MII_INT_Pin */
  GPIO_InitStruct.Pin = MII_INT_Pin;
 8000f82:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000f86:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000f88:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000f8c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(MII_INT_GPIO_Port, &GPIO_InitStruct);
 8000f92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f96:	4619      	mov	r1, r3
 8000f98:	4808      	ldr	r0, [pc, #32]	; (8000fbc <MX_GPIO_Init+0x4d8>)
 8000f9a:	f002 f8db 	bl	8003154 <HAL_GPIO_Init>

}
 8000f9e:	bf00      	nop
 8000fa0:	3738      	adds	r7, #56	; 0x38
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	40021c00 	.word	0x40021c00
 8000fac:	40020000 	.word	0x40020000
 8000fb0:	40020800 	.word	0x40020800
 8000fb4:	40021800 	.word	0x40021800
 8000fb8:	40021400 	.word	0x40021400
 8000fbc:	40020400 	.word	0x40020400

08000fc0 <MX_FSMC_Init>:

/* FSMC initialization function */
static void MX_FSMC_Init(void)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b088      	sub	sp, #32
 8000fc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 8000fc6:	1d3b      	adds	r3, r7, #4
 8000fc8:	2200      	movs	r2, #0
 8000fca:	601a      	str	r2, [r3, #0]
 8000fcc:	605a      	str	r2, [r3, #4]
 8000fce:	609a      	str	r2, [r3, #8]
 8000fd0:	60da      	str	r2, [r3, #12]
 8000fd2:	611a      	str	r2, [r3, #16]
 8000fd4:	615a      	str	r2, [r3, #20]
 8000fd6:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the NOR1 memory initialization sequence
  */
  hnor1.Instance = FSMC_NORSRAM_DEVICE;
 8000fd8:	4b70      	ldr	r3, [pc, #448]	; (800119c <MX_FSMC_Init+0x1dc>)
 8000fda:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8000fde:	601a      	str	r2, [r3, #0]
  hnor1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8000fe0:	4b6e      	ldr	r3, [pc, #440]	; (800119c <MX_FSMC_Init+0x1dc>)
 8000fe2:	4a6f      	ldr	r2, [pc, #444]	; (80011a0 <MX_FSMC_Init+0x1e0>)
 8000fe4:	605a      	str	r2, [r3, #4]
  /* hnor1.Init */
  hnor1.Init.NSBank = FSMC_NORSRAM_BANK1;
 8000fe6:	4b6d      	ldr	r3, [pc, #436]	; (800119c <MX_FSMC_Init+0x1dc>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	609a      	str	r2, [r3, #8]
  hnor1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8000fec:	4b6b      	ldr	r3, [pc, #428]	; (800119c <MX_FSMC_Init+0x1dc>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	60da      	str	r2, [r3, #12]
  hnor1.Init.MemoryType = FSMC_MEMORY_TYPE_NOR;
 8000ff2:	4b6a      	ldr	r3, [pc, #424]	; (800119c <MX_FSMC_Init+0x1dc>)
 8000ff4:	2208      	movs	r2, #8
 8000ff6:	611a      	str	r2, [r3, #16]
  hnor1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8000ff8:	4b68      	ldr	r3, [pc, #416]	; (800119c <MX_FSMC_Init+0x1dc>)
 8000ffa:	2210      	movs	r2, #16
 8000ffc:	615a      	str	r2, [r3, #20]
  hnor1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8000ffe:	4b67      	ldr	r3, [pc, #412]	; (800119c <MX_FSMC_Init+0x1dc>)
 8001000:	2200      	movs	r2, #0
 8001002:	619a      	str	r2, [r3, #24]
  hnor1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8001004:	4b65      	ldr	r3, [pc, #404]	; (800119c <MX_FSMC_Init+0x1dc>)
 8001006:	2200      	movs	r2, #0
 8001008:	61da      	str	r2, [r3, #28]
  hnor1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 800100a:	4b64      	ldr	r3, [pc, #400]	; (800119c <MX_FSMC_Init+0x1dc>)
 800100c:	2200      	movs	r2, #0
 800100e:	621a      	str	r2, [r3, #32]
  hnor1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8001010:	4b62      	ldr	r3, [pc, #392]	; (800119c <MX_FSMC_Init+0x1dc>)
 8001012:	2200      	movs	r2, #0
 8001014:	625a      	str	r2, [r3, #36]	; 0x24
  hnor1.Init.WriteOperation = FSMC_WRITE_OPERATION_DISABLE;
 8001016:	4b61      	ldr	r3, [pc, #388]	; (800119c <MX_FSMC_Init+0x1dc>)
 8001018:	2200      	movs	r2, #0
 800101a:	629a      	str	r2, [r3, #40]	; 0x28
  hnor1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 800101c:	4b5f      	ldr	r3, [pc, #380]	; (800119c <MX_FSMC_Init+0x1dc>)
 800101e:	2200      	movs	r2, #0
 8001020:	62da      	str	r2, [r3, #44]	; 0x2c
  hnor1.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 8001022:	4b5e      	ldr	r3, [pc, #376]	; (800119c <MX_FSMC_Init+0x1dc>)
 8001024:	2200      	movs	r2, #0
 8001026:	631a      	str	r2, [r3, #48]	; 0x30
  hnor1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8001028:	4b5c      	ldr	r3, [pc, #368]	; (800119c <MX_FSMC_Init+0x1dc>)
 800102a:	2200      	movs	r2, #0
 800102c:	635a      	str	r2, [r3, #52]	; 0x34
  hnor1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 800102e:	4b5b      	ldr	r3, [pc, #364]	; (800119c <MX_FSMC_Init+0x1dc>)
 8001030:	2200      	movs	r2, #0
 8001032:	639a      	str	r2, [r3, #56]	; 0x38
  hnor1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 8001034:	4b59      	ldr	r3, [pc, #356]	; (800119c <MX_FSMC_Init+0x1dc>)
 8001036:	2200      	movs	r2, #0
 8001038:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 15;
 800103a:	230f      	movs	r3, #15
 800103c:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 800103e:	230f      	movs	r3, #15
 8001040:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 255;
 8001042:	23ff      	movs	r3, #255	; 0xff
 8001044:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 8001046:	230f      	movs	r3, #15
 8001048:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 800104a:	2310      	movs	r3, #16
 800104c:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 800104e:	2311      	movs	r3, #17
 8001050:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8001052:	2300      	movs	r3, #0
 8001054:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_NOR_Init(&hnor1, &Timing, NULL) != HAL_OK)
 8001056:	1d3b      	adds	r3, r7, #4
 8001058:	2200      	movs	r2, #0
 800105a:	4619      	mov	r1, r3
 800105c:	484f      	ldr	r0, [pc, #316]	; (800119c <MX_FSMC_Init+0x1dc>)
 800105e:	f002 fb8b 	bl	8003778 <HAL_NOR_Init>
 8001062:	4603      	mov	r3, r0
 8001064:	2b00      	cmp	r3, #0
 8001066:	d001      	beq.n	800106c <MX_FSMC_Init+0xac>
  {
    Error_Handler( );
 8001068:	f000 f8a0 	bl	80011ac <Error_Handler>
  }

  /** Perform the SRAM2 memory initialization sequence
  */
  hsram2.Instance = FSMC_NORSRAM_DEVICE;
 800106c:	4b4d      	ldr	r3, [pc, #308]	; (80011a4 <MX_FSMC_Init+0x1e4>)
 800106e:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8001072:	601a      	str	r2, [r3, #0]
  hsram2.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8001074:	4b4b      	ldr	r3, [pc, #300]	; (80011a4 <MX_FSMC_Init+0x1e4>)
 8001076:	4a4a      	ldr	r2, [pc, #296]	; (80011a0 <MX_FSMC_Init+0x1e0>)
 8001078:	605a      	str	r2, [r3, #4]
  /* hsram2.Init */
  hsram2.Init.NSBank = FSMC_NORSRAM_BANK2;
 800107a:	4b4a      	ldr	r3, [pc, #296]	; (80011a4 <MX_FSMC_Init+0x1e4>)
 800107c:	2202      	movs	r2, #2
 800107e:	609a      	str	r2, [r3, #8]
  hsram2.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8001080:	4b48      	ldr	r3, [pc, #288]	; (80011a4 <MX_FSMC_Init+0x1e4>)
 8001082:	2200      	movs	r2, #0
 8001084:	60da      	str	r2, [r3, #12]
  hsram2.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8001086:	4b47      	ldr	r3, [pc, #284]	; (80011a4 <MX_FSMC_Init+0x1e4>)
 8001088:	2200      	movs	r2, #0
 800108a:	611a      	str	r2, [r3, #16]
  hsram2.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 800108c:	4b45      	ldr	r3, [pc, #276]	; (80011a4 <MX_FSMC_Init+0x1e4>)
 800108e:	2210      	movs	r2, #16
 8001090:	615a      	str	r2, [r3, #20]
  hsram2.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8001092:	4b44      	ldr	r3, [pc, #272]	; (80011a4 <MX_FSMC_Init+0x1e4>)
 8001094:	2200      	movs	r2, #0
 8001096:	619a      	str	r2, [r3, #24]
  hsram2.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8001098:	4b42      	ldr	r3, [pc, #264]	; (80011a4 <MX_FSMC_Init+0x1e4>)
 800109a:	2200      	movs	r2, #0
 800109c:	61da      	str	r2, [r3, #28]
  hsram2.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 800109e:	4b41      	ldr	r3, [pc, #260]	; (80011a4 <MX_FSMC_Init+0x1e4>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	621a      	str	r2, [r3, #32]
  hsram2.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 80010a4:	4b3f      	ldr	r3, [pc, #252]	; (80011a4 <MX_FSMC_Init+0x1e4>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	625a      	str	r2, [r3, #36]	; 0x24
  hsram2.Init.WriteOperation = FSMC_WRITE_OPERATION_DISABLE;
 80010aa:	4b3e      	ldr	r3, [pc, #248]	; (80011a4 <MX_FSMC_Init+0x1e4>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	629a      	str	r2, [r3, #40]	; 0x28
  hsram2.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 80010b0:	4b3c      	ldr	r3, [pc, #240]	; (80011a4 <MX_FSMC_Init+0x1e4>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram2.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 80010b6:	4b3b      	ldr	r3, [pc, #236]	; (80011a4 <MX_FSMC_Init+0x1e4>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	631a      	str	r2, [r3, #48]	; 0x30
  hsram2.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 80010bc:	4b39      	ldr	r3, [pc, #228]	; (80011a4 <MX_FSMC_Init+0x1e4>)
 80010be:	2200      	movs	r2, #0
 80010c0:	635a      	str	r2, [r3, #52]	; 0x34
  hsram2.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 80010c2:	4b38      	ldr	r3, [pc, #224]	; (80011a4 <MX_FSMC_Init+0x1e4>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	639a      	str	r2, [r3, #56]	; 0x38
  hsram2.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 80010c8:	4b36      	ldr	r3, [pc, #216]	; (80011a4 <MX_FSMC_Init+0x1e4>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 15;
 80010ce:	230f      	movs	r3, #15
 80010d0:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 80010d2:	230f      	movs	r3, #15
 80010d4:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 255;
 80010d6:	23ff      	movs	r3, #255	; 0xff
 80010d8:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 80010da:	230f      	movs	r3, #15
 80010dc:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 80010de:	2310      	movs	r3, #16
 80010e0:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 80010e2:	2311      	movs	r3, #17
 80010e4:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 80010e6:	2300      	movs	r3, #0
 80010e8:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram2, &Timing, NULL) != HAL_OK)
 80010ea:	1d3b      	adds	r3, r7, #4
 80010ec:	2200      	movs	r2, #0
 80010ee:	4619      	mov	r1, r3
 80010f0:	482c      	ldr	r0, [pc, #176]	; (80011a4 <MX_FSMC_Init+0x1e4>)
 80010f2:	f004 fb73 	bl	80057dc <HAL_SRAM_Init>
 80010f6:	4603      	mov	r3, r0
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d001      	beq.n	8001100 <MX_FSMC_Init+0x140>
  {
    Error_Handler( );
 80010fc:	f000 f856 	bl	80011ac <Error_Handler>
  }

  /** Perform the SRAM3 memory initialization sequence
  */
  hsram3.Instance = FSMC_NORSRAM_DEVICE;
 8001100:	4b29      	ldr	r3, [pc, #164]	; (80011a8 <MX_FSMC_Init+0x1e8>)
 8001102:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8001106:	601a      	str	r2, [r3, #0]
  hsram3.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8001108:	4b27      	ldr	r3, [pc, #156]	; (80011a8 <MX_FSMC_Init+0x1e8>)
 800110a:	4a25      	ldr	r2, [pc, #148]	; (80011a0 <MX_FSMC_Init+0x1e0>)
 800110c:	605a      	str	r2, [r3, #4]
  /* hsram3.Init */
  hsram3.Init.NSBank = FSMC_NORSRAM_BANK3;
 800110e:	4b26      	ldr	r3, [pc, #152]	; (80011a8 <MX_FSMC_Init+0x1e8>)
 8001110:	2204      	movs	r2, #4
 8001112:	609a      	str	r2, [r3, #8]
  hsram3.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8001114:	4b24      	ldr	r3, [pc, #144]	; (80011a8 <MX_FSMC_Init+0x1e8>)
 8001116:	2200      	movs	r2, #0
 8001118:	60da      	str	r2, [r3, #12]
  hsram3.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 800111a:	4b23      	ldr	r3, [pc, #140]	; (80011a8 <MX_FSMC_Init+0x1e8>)
 800111c:	2200      	movs	r2, #0
 800111e:	611a      	str	r2, [r3, #16]
  hsram3.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8001120:	4b21      	ldr	r3, [pc, #132]	; (80011a8 <MX_FSMC_Init+0x1e8>)
 8001122:	2210      	movs	r2, #16
 8001124:	615a      	str	r2, [r3, #20]
  hsram3.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8001126:	4b20      	ldr	r3, [pc, #128]	; (80011a8 <MX_FSMC_Init+0x1e8>)
 8001128:	2200      	movs	r2, #0
 800112a:	619a      	str	r2, [r3, #24]
  hsram3.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 800112c:	4b1e      	ldr	r3, [pc, #120]	; (80011a8 <MX_FSMC_Init+0x1e8>)
 800112e:	2200      	movs	r2, #0
 8001130:	61da      	str	r2, [r3, #28]
  hsram3.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 8001132:	4b1d      	ldr	r3, [pc, #116]	; (80011a8 <MX_FSMC_Init+0x1e8>)
 8001134:	2200      	movs	r2, #0
 8001136:	621a      	str	r2, [r3, #32]
  hsram3.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8001138:	4b1b      	ldr	r3, [pc, #108]	; (80011a8 <MX_FSMC_Init+0x1e8>)
 800113a:	2200      	movs	r2, #0
 800113c:	625a      	str	r2, [r3, #36]	; 0x24
  hsram3.Init.WriteOperation = FSMC_WRITE_OPERATION_DISABLE;
 800113e:	4b1a      	ldr	r3, [pc, #104]	; (80011a8 <MX_FSMC_Init+0x1e8>)
 8001140:	2200      	movs	r2, #0
 8001142:	629a      	str	r2, [r3, #40]	; 0x28
  hsram3.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8001144:	4b18      	ldr	r3, [pc, #96]	; (80011a8 <MX_FSMC_Init+0x1e8>)
 8001146:	2200      	movs	r2, #0
 8001148:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram3.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 800114a:	4b17      	ldr	r3, [pc, #92]	; (80011a8 <MX_FSMC_Init+0x1e8>)
 800114c:	2200      	movs	r2, #0
 800114e:	631a      	str	r2, [r3, #48]	; 0x30
  hsram3.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8001150:	4b15      	ldr	r3, [pc, #84]	; (80011a8 <MX_FSMC_Init+0x1e8>)
 8001152:	2200      	movs	r2, #0
 8001154:	635a      	str	r2, [r3, #52]	; 0x34
  hsram3.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8001156:	4b14      	ldr	r3, [pc, #80]	; (80011a8 <MX_FSMC_Init+0x1e8>)
 8001158:	2200      	movs	r2, #0
 800115a:	639a      	str	r2, [r3, #56]	; 0x38
  hsram3.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 800115c:	4b12      	ldr	r3, [pc, #72]	; (80011a8 <MX_FSMC_Init+0x1e8>)
 800115e:	2200      	movs	r2, #0
 8001160:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 15;
 8001162:	230f      	movs	r3, #15
 8001164:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 8001166:	230f      	movs	r3, #15
 8001168:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 255;
 800116a:	23ff      	movs	r3, #255	; 0xff
 800116c:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 800116e:	230f      	movs	r3, #15
 8001170:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8001172:	2310      	movs	r3, #16
 8001174:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 8001176:	2311      	movs	r3, #17
 8001178:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 800117a:	2300      	movs	r3, #0
 800117c:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram3, &Timing, NULL) != HAL_OK)
 800117e:	1d3b      	adds	r3, r7, #4
 8001180:	2200      	movs	r2, #0
 8001182:	4619      	mov	r1, r3
 8001184:	4808      	ldr	r0, [pc, #32]	; (80011a8 <MX_FSMC_Init+0x1e8>)
 8001186:	f004 fb29 	bl	80057dc <HAL_SRAM_Init>
 800118a:	4603      	mov	r3, r0
 800118c:	2b00      	cmp	r3, #0
 800118e:	d001      	beq.n	8001194 <MX_FSMC_Init+0x1d4>
  {
    Error_Handler( );
 8001190:	f000 f80c 	bl	80011ac <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 8001194:	bf00      	nop
 8001196:	3720      	adds	r7, #32
 8001198:	46bd      	mov	sp, r7
 800119a:	bd80      	pop	{r7, pc}
 800119c:	200003a4 	.word	0x200003a4
 80011a0:	a0000104 	.word	0xa0000104
 80011a4:	200003f4 	.word	0x200003f4
 80011a8:	20000444 	.word	0x20000444

080011ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011ac:	b480      	push	{r7}
 80011ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011b0:	b672      	cpsid	i
}
 80011b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80011b4:	e7fe      	b.n	80011b4 <Error_Handler+0x8>
	...

080011b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b082      	sub	sp, #8
 80011bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011be:	2300      	movs	r3, #0
 80011c0:	607b      	str	r3, [r7, #4]
 80011c2:	4b10      	ldr	r3, [pc, #64]	; (8001204 <HAL_MspInit+0x4c>)
 80011c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011c6:	4a0f      	ldr	r2, [pc, #60]	; (8001204 <HAL_MspInit+0x4c>)
 80011c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011cc:	6453      	str	r3, [r2, #68]	; 0x44
 80011ce:	4b0d      	ldr	r3, [pc, #52]	; (8001204 <HAL_MspInit+0x4c>)
 80011d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011d6:	607b      	str	r3, [r7, #4]
 80011d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011da:	2300      	movs	r3, #0
 80011dc:	603b      	str	r3, [r7, #0]
 80011de:	4b09      	ldr	r3, [pc, #36]	; (8001204 <HAL_MspInit+0x4c>)
 80011e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011e2:	4a08      	ldr	r2, [pc, #32]	; (8001204 <HAL_MspInit+0x4c>)
 80011e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011e8:	6413      	str	r3, [r2, #64]	; 0x40
 80011ea:	4b06      	ldr	r3, [pc, #24]	; (8001204 <HAL_MspInit+0x4c>)
 80011ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011f2:	603b      	str	r3, [r7, #0]
 80011f4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80011f6:	2007      	movs	r0, #7
 80011f8:	f001 fe8c 	bl	8002f14 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011fc:	bf00      	nop
 80011fe:	3708      	adds	r7, #8
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}
 8001204:	40023800 	.word	0x40023800

08001208 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b08a      	sub	sp, #40	; 0x28
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001210:	f107 0314 	add.w	r3, r7, #20
 8001214:	2200      	movs	r2, #0
 8001216:	601a      	str	r2, [r3, #0]
 8001218:	605a      	str	r2, [r3, #4]
 800121a:	609a      	str	r2, [r3, #8]
 800121c:	60da      	str	r2, [r3, #12]
 800121e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC3)
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	4a17      	ldr	r2, [pc, #92]	; (8001284 <HAL_ADC_MspInit+0x7c>)
 8001226:	4293      	cmp	r3, r2
 8001228:	d128      	bne.n	800127c <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 800122a:	2300      	movs	r3, #0
 800122c:	613b      	str	r3, [r7, #16]
 800122e:	4b16      	ldr	r3, [pc, #88]	; (8001288 <HAL_ADC_MspInit+0x80>)
 8001230:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001232:	4a15      	ldr	r2, [pc, #84]	; (8001288 <HAL_ADC_MspInit+0x80>)
 8001234:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001238:	6453      	str	r3, [r2, #68]	; 0x44
 800123a:	4b13      	ldr	r3, [pc, #76]	; (8001288 <HAL_ADC_MspInit+0x80>)
 800123c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800123e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001242:	613b      	str	r3, [r7, #16]
 8001244:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001246:	2300      	movs	r3, #0
 8001248:	60fb      	str	r3, [r7, #12]
 800124a:	4b0f      	ldr	r3, [pc, #60]	; (8001288 <HAL_ADC_MspInit+0x80>)
 800124c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800124e:	4a0e      	ldr	r2, [pc, #56]	; (8001288 <HAL_ADC_MspInit+0x80>)
 8001250:	f043 0320 	orr.w	r3, r3, #32
 8001254:	6313      	str	r3, [r2, #48]	; 0x30
 8001256:	4b0c      	ldr	r3, [pc, #48]	; (8001288 <HAL_ADC_MspInit+0x80>)
 8001258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800125a:	f003 0320 	and.w	r3, r3, #32
 800125e:	60fb      	str	r3, [r7, #12]
 8001260:	68fb      	ldr	r3, [r7, #12]
    /**ADC3 GPIO Configuration
    PF10     ------> ADC3_IN8
    PF9     ------> ADC3_IN7
    */
    GPIO_InitStruct.Pin = Audio_IN_Pin|Potentiometer_Pin;
 8001262:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001266:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001268:	2303      	movs	r3, #3
 800126a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800126c:	2300      	movs	r3, #0
 800126e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001270:	f107 0314 	add.w	r3, r7, #20
 8001274:	4619      	mov	r1, r3
 8001276:	4805      	ldr	r0, [pc, #20]	; (800128c <HAL_ADC_MspInit+0x84>)
 8001278:	f001 ff6c 	bl	8003154 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 800127c:	bf00      	nop
 800127e:	3728      	adds	r7, #40	; 0x28
 8001280:	46bd      	mov	sp, r7
 8001282:	bd80      	pop	{r7, pc}
 8001284:	40012200 	.word	0x40012200
 8001288:	40023800 	.word	0x40023800
 800128c:	40021400 	.word	0x40021400

08001290 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b08a      	sub	sp, #40	; 0x28
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001298:	f107 0314 	add.w	r3, r7, #20
 800129c:	2200      	movs	r2, #0
 800129e:	601a      	str	r2, [r3, #0]
 80012a0:	605a      	str	r2, [r3, #4]
 80012a2:	609a      	str	r2, [r3, #8]
 80012a4:	60da      	str	r2, [r3, #12]
 80012a6:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	4a17      	ldr	r2, [pc, #92]	; (800130c <HAL_DAC_MspInit+0x7c>)
 80012ae:	4293      	cmp	r3, r2
 80012b0:	d127      	bne.n	8001302 <HAL_DAC_MspInit+0x72>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 80012b2:	2300      	movs	r3, #0
 80012b4:	613b      	str	r3, [r7, #16]
 80012b6:	4b16      	ldr	r3, [pc, #88]	; (8001310 <HAL_DAC_MspInit+0x80>)
 80012b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ba:	4a15      	ldr	r2, [pc, #84]	; (8001310 <HAL_DAC_MspInit+0x80>)
 80012bc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80012c0:	6413      	str	r3, [r2, #64]	; 0x40
 80012c2:	4b13      	ldr	r3, [pc, #76]	; (8001310 <HAL_DAC_MspInit+0x80>)
 80012c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012c6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80012ca:	613b      	str	r3, [r7, #16]
 80012cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012ce:	2300      	movs	r3, #0
 80012d0:	60fb      	str	r3, [r7, #12]
 80012d2:	4b0f      	ldr	r3, [pc, #60]	; (8001310 <HAL_DAC_MspInit+0x80>)
 80012d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d6:	4a0e      	ldr	r2, [pc, #56]	; (8001310 <HAL_DAC_MspInit+0x80>)
 80012d8:	f043 0301 	orr.w	r3, r3, #1
 80012dc:	6313      	str	r3, [r2, #48]	; 0x30
 80012de:	4b0c      	ldr	r3, [pc, #48]	; (8001310 <HAL_DAC_MspInit+0x80>)
 80012e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e2:	f003 0301 	and.w	r3, r3, #1
 80012e6:	60fb      	str	r3, [r7, #12]
 80012e8:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = Audio_DAC_OUT_Pin;
 80012ea:	2310      	movs	r3, #16
 80012ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012ee:	2303      	movs	r3, #3
 80012f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f2:	2300      	movs	r3, #0
 80012f4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Audio_DAC_OUT_GPIO_Port, &GPIO_InitStruct);
 80012f6:	f107 0314 	add.w	r3, r7, #20
 80012fa:	4619      	mov	r1, r3
 80012fc:	4805      	ldr	r0, [pc, #20]	; (8001314 <HAL_DAC_MspInit+0x84>)
 80012fe:	f001 ff29 	bl	8003154 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8001302:	bf00      	nop
 8001304:	3728      	adds	r7, #40	; 0x28
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	40007400 	.word	0x40007400
 8001310:	40023800 	.word	0x40023800
 8001314:	40020000 	.word	0x40020000

08001318 <HAL_DCMI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdcmi: DCMI handle pointer
* @retval None
*/
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b08c      	sub	sp, #48	; 0x30
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001320:	f107 031c 	add.w	r3, r7, #28
 8001324:	2200      	movs	r2, #0
 8001326:	601a      	str	r2, [r3, #0]
 8001328:	605a      	str	r2, [r3, #4]
 800132a:	609a      	str	r2, [r3, #8]
 800132c:	60da      	str	r2, [r3, #12]
 800132e:	611a      	str	r2, [r3, #16]
  if(hdcmi->Instance==DCMI)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	4a37      	ldr	r2, [pc, #220]	; (8001414 <HAL_DCMI_MspInit+0xfc>)
 8001336:	4293      	cmp	r3, r2
 8001338:	d168      	bne.n	800140c <HAL_DCMI_MspInit+0xf4>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 800133a:	2300      	movs	r3, #0
 800133c:	61bb      	str	r3, [r7, #24]
 800133e:	4b36      	ldr	r3, [pc, #216]	; (8001418 <HAL_DCMI_MspInit+0x100>)
 8001340:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001342:	4a35      	ldr	r2, [pc, #212]	; (8001418 <HAL_DCMI_MspInit+0x100>)
 8001344:	f043 0301 	orr.w	r3, r3, #1
 8001348:	6353      	str	r3, [r2, #52]	; 0x34
 800134a:	4b33      	ldr	r3, [pc, #204]	; (8001418 <HAL_DCMI_MspInit+0x100>)
 800134c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800134e:	f003 0301 	and.w	r3, r3, #1
 8001352:	61bb      	str	r3, [r7, #24]
 8001354:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOI_CLK_ENABLE();
 8001356:	2300      	movs	r3, #0
 8001358:	617b      	str	r3, [r7, #20]
 800135a:	4b2f      	ldr	r3, [pc, #188]	; (8001418 <HAL_DCMI_MspInit+0x100>)
 800135c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800135e:	4a2e      	ldr	r2, [pc, #184]	; (8001418 <HAL_DCMI_MspInit+0x100>)
 8001360:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001364:	6313      	str	r3, [r2, #48]	; 0x30
 8001366:	4b2c      	ldr	r3, [pc, #176]	; (8001418 <HAL_DCMI_MspInit+0x100>)
 8001368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800136a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800136e:	617b      	str	r3, [r7, #20]
 8001370:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001372:	2300      	movs	r3, #0
 8001374:	613b      	str	r3, [r7, #16]
 8001376:	4b28      	ldr	r3, [pc, #160]	; (8001418 <HAL_DCMI_MspInit+0x100>)
 8001378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800137a:	4a27      	ldr	r2, [pc, #156]	; (8001418 <HAL_DCMI_MspInit+0x100>)
 800137c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001380:	6313      	str	r3, [r2, #48]	; 0x30
 8001382:	4b25      	ldr	r3, [pc, #148]	; (8001418 <HAL_DCMI_MspInit+0x100>)
 8001384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001386:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800138a:	613b      	str	r3, [r7, #16]
 800138c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800138e:	2300      	movs	r3, #0
 8001390:	60fb      	str	r3, [r7, #12]
 8001392:	4b21      	ldr	r3, [pc, #132]	; (8001418 <HAL_DCMI_MspInit+0x100>)
 8001394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001396:	4a20      	ldr	r2, [pc, #128]	; (8001418 <HAL_DCMI_MspInit+0x100>)
 8001398:	f043 0301 	orr.w	r3, r3, #1
 800139c:	6313      	str	r3, [r2, #48]	; 0x30
 800139e:	4b1e      	ldr	r3, [pc, #120]	; (8001418 <HAL_DCMI_MspInit+0x100>)
 80013a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013a2:	f003 0301 	and.w	r3, r3, #1
 80013a6:	60fb      	str	r3, [r7, #12]
 80013a8:	68fb      	ldr	r3, [r7, #12]
    PH10     ------> DCMI_D1
    PH8     ------> DCMI_HSYNC
    PH9     ------> DCMI_D0
    PA6     ------> DCMI_PIXCLK
    */
    GPIO_InitStruct.Pin = DCMI_D7_Pin|DCMI_D6_Pin|DCMI_VSYNC_Pin|DCMI_D5_Pin;
 80013aa:	23f0      	movs	r3, #240	; 0xf0
 80013ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ae:	2302      	movs	r3, #2
 80013b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b2:	2300      	movs	r3, #0
 80013b4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013b6:	2300      	movs	r3, #0
 80013b8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80013ba:	230d      	movs	r3, #13
 80013bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80013be:	f107 031c 	add.w	r3, r7, #28
 80013c2:	4619      	mov	r1, r3
 80013c4:	4815      	ldr	r0, [pc, #84]	; (800141c <HAL_DCMI_MspInit+0x104>)
 80013c6:	f001 fec5 	bl	8003154 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D2_Pin|DCMI_D1_Pin
 80013ca:	f44f 43be 	mov.w	r3, #24320	; 0x5f00
 80013ce:	61fb      	str	r3, [r7, #28]
                          |DCMI_HSYNC_Pin|DCMI_D0_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013d0:	2302      	movs	r3, #2
 80013d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d4:	2300      	movs	r3, #0
 80013d6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013d8:	2300      	movs	r3, #0
 80013da:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80013dc:	230d      	movs	r3, #13
 80013de:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80013e0:	f107 031c 	add.w	r3, r7, #28
 80013e4:	4619      	mov	r1, r3
 80013e6:	480e      	ldr	r0, [pc, #56]	; (8001420 <HAL_DCMI_MspInit+0x108>)
 80013e8:	f001 feb4 	bl	8003154 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_PIXCK_Pin;
 80013ec:	2340      	movs	r3, #64	; 0x40
 80013ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013f0:	2302      	movs	r3, #2
 80013f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f4:	2300      	movs	r3, #0
 80013f6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013f8:	2300      	movs	r3, #0
 80013fa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80013fc:	230d      	movs	r3, #13
 80013fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DCMI_PIXCK_GPIO_Port, &GPIO_InitStruct);
 8001400:	f107 031c 	add.w	r3, r7, #28
 8001404:	4619      	mov	r1, r3
 8001406:	4807      	ldr	r0, [pc, #28]	; (8001424 <HAL_DCMI_MspInit+0x10c>)
 8001408:	f001 fea4 	bl	8003154 <HAL_GPIO_Init>
  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }

}
 800140c:	bf00      	nop
 800140e:	3730      	adds	r7, #48	; 0x30
 8001410:	46bd      	mov	sp, r7
 8001412:	bd80      	pop	{r7, pc}
 8001414:	50050000 	.word	0x50050000
 8001418:	40023800 	.word	0x40023800
 800141c:	40022000 	.word	0x40022000
 8001420:	40021c00 	.word	0x40021c00
 8001424:	40020000 	.word	0x40020000

08001428 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b08a      	sub	sp, #40	; 0x28
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001430:	f107 0314 	add.w	r3, r7, #20
 8001434:	2200      	movs	r2, #0
 8001436:	601a      	str	r2, [r3, #0]
 8001438:	605a      	str	r2, [r3, #4]
 800143a:	609a      	str	r2, [r3, #8]
 800143c:	60da      	str	r2, [r3, #12]
 800143e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	4a19      	ldr	r2, [pc, #100]	; (80014ac <HAL_I2C_MspInit+0x84>)
 8001446:	4293      	cmp	r3, r2
 8001448:	d12c      	bne.n	80014a4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800144a:	2300      	movs	r3, #0
 800144c:	613b      	str	r3, [r7, #16]
 800144e:	4b18      	ldr	r3, [pc, #96]	; (80014b0 <HAL_I2C_MspInit+0x88>)
 8001450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001452:	4a17      	ldr	r2, [pc, #92]	; (80014b0 <HAL_I2C_MspInit+0x88>)
 8001454:	f043 0302 	orr.w	r3, r3, #2
 8001458:	6313      	str	r3, [r2, #48]	; 0x30
 800145a:	4b15      	ldr	r3, [pc, #84]	; (80014b0 <HAL_I2C_MspInit+0x88>)
 800145c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800145e:	f003 0302 	and.w	r3, r3, #2
 8001462:	613b      	str	r3, [r7, #16]
 8001464:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001466:	f44f 7340 	mov.w	r3, #768	; 0x300
 800146a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800146c:	2312      	movs	r3, #18
 800146e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001470:	2300      	movs	r3, #0
 8001472:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001474:	2303      	movs	r3, #3
 8001476:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001478:	2304      	movs	r3, #4
 800147a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800147c:	f107 0314 	add.w	r3, r7, #20
 8001480:	4619      	mov	r1, r3
 8001482:	480c      	ldr	r0, [pc, #48]	; (80014b4 <HAL_I2C_MspInit+0x8c>)
 8001484:	f001 fe66 	bl	8003154 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001488:	2300      	movs	r3, #0
 800148a:	60fb      	str	r3, [r7, #12]
 800148c:	4b08      	ldr	r3, [pc, #32]	; (80014b0 <HAL_I2C_MspInit+0x88>)
 800148e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001490:	4a07      	ldr	r2, [pc, #28]	; (80014b0 <HAL_I2C_MspInit+0x88>)
 8001492:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001496:	6413      	str	r3, [r2, #64]	; 0x40
 8001498:	4b05      	ldr	r3, [pc, #20]	; (80014b0 <HAL_I2C_MspInit+0x88>)
 800149a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800149c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014a0:	60fb      	str	r3, [r7, #12]
 80014a2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80014a4:	bf00      	nop
 80014a6:	3728      	adds	r7, #40	; 0x28
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bd80      	pop	{r7, pc}
 80014ac:	40005400 	.word	0x40005400
 80014b0:	40023800 	.word	0x40023800
 80014b4:	40020400 	.word	0x40020400

080014b8 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b08a      	sub	sp, #40	; 0x28
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014c0:	f107 0314 	add.w	r3, r7, #20
 80014c4:	2200      	movs	r2, #0
 80014c6:	601a      	str	r2, [r3, #0]
 80014c8:	605a      	str	r2, [r3, #4]
 80014ca:	609a      	str	r2, [r3, #8]
 80014cc:	60da      	str	r2, [r3, #12]
 80014ce:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	4a19      	ldr	r2, [pc, #100]	; (800153c <HAL_TIM_Encoder_MspInit+0x84>)
 80014d6:	4293      	cmp	r3, r2
 80014d8:	d12b      	bne.n	8001532 <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80014da:	2300      	movs	r3, #0
 80014dc:	613b      	str	r3, [r7, #16]
 80014de:	4b18      	ldr	r3, [pc, #96]	; (8001540 <HAL_TIM_Encoder_MspInit+0x88>)
 80014e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014e2:	4a17      	ldr	r2, [pc, #92]	; (8001540 <HAL_TIM_Encoder_MspInit+0x88>)
 80014e4:	f043 0302 	orr.w	r3, r3, #2
 80014e8:	6413      	str	r3, [r2, #64]	; 0x40
 80014ea:	4b15      	ldr	r3, [pc, #84]	; (8001540 <HAL_TIM_Encoder_MspInit+0x88>)
 80014ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ee:	f003 0302 	and.w	r3, r3, #2
 80014f2:	613b      	str	r3, [r7, #16]
 80014f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014f6:	2300      	movs	r3, #0
 80014f8:	60fb      	str	r3, [r7, #12]
 80014fa:	4b11      	ldr	r3, [pc, #68]	; (8001540 <HAL_TIM_Encoder_MspInit+0x88>)
 80014fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014fe:	4a10      	ldr	r2, [pc, #64]	; (8001540 <HAL_TIM_Encoder_MspInit+0x88>)
 8001500:	f043 0302 	orr.w	r3, r3, #2
 8001504:	6313      	str	r3, [r2, #48]	; 0x30
 8001506:	4b0e      	ldr	r3, [pc, #56]	; (8001540 <HAL_TIM_Encoder_MspInit+0x88>)
 8001508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800150a:	f003 0302 	and.w	r3, r3, #2
 800150e:	60fb      	str	r3, [r7, #12]
 8001510:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PB5     ------> TIM3_CH2
    PB4     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4;
 8001512:	2330      	movs	r3, #48	; 0x30
 8001514:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001516:	2302      	movs	r3, #2
 8001518:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800151a:	2300      	movs	r3, #0
 800151c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800151e:	2300      	movs	r3, #0
 8001520:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001522:	2302      	movs	r3, #2
 8001524:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001526:	f107 0314 	add.w	r3, r7, #20
 800152a:	4619      	mov	r1, r3
 800152c:	4805      	ldr	r0, [pc, #20]	; (8001544 <HAL_TIM_Encoder_MspInit+0x8c>)
 800152e:	f001 fe11 	bl	8003154 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001532:	bf00      	nop
 8001534:	3728      	adds	r7, #40	; 0x28
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}
 800153a:	bf00      	nop
 800153c:	40000400 	.word	0x40000400
 8001540:	40023800 	.word	0x40023800
 8001544:	40020400 	.word	0x40020400

08001548 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b08a      	sub	sp, #40	; 0x28
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001550:	f107 0314 	add.w	r3, r7, #20
 8001554:	2200      	movs	r2, #0
 8001556:	601a      	str	r2, [r3, #0]
 8001558:	605a      	str	r2, [r3, #4]
 800155a:	609a      	str	r2, [r3, #8]
 800155c:	60da      	str	r2, [r3, #12]
 800155e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	4a19      	ldr	r2, [pc, #100]	; (80015cc <HAL_UART_MspInit+0x84>)
 8001566:	4293      	cmp	r3, r2
 8001568:	d12c      	bne.n	80015c4 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800156a:	2300      	movs	r3, #0
 800156c:	613b      	str	r3, [r7, #16]
 800156e:	4b18      	ldr	r3, [pc, #96]	; (80015d0 <HAL_UART_MspInit+0x88>)
 8001570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001572:	4a17      	ldr	r2, [pc, #92]	; (80015d0 <HAL_UART_MspInit+0x88>)
 8001574:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001578:	6413      	str	r3, [r2, #64]	; 0x40
 800157a:	4b15      	ldr	r3, [pc, #84]	; (80015d0 <HAL_UART_MspInit+0x88>)
 800157c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800157e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001582:	613b      	str	r3, [r7, #16]
 8001584:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001586:	2300      	movs	r3, #0
 8001588:	60fb      	str	r3, [r7, #12]
 800158a:	4b11      	ldr	r3, [pc, #68]	; (80015d0 <HAL_UART_MspInit+0x88>)
 800158c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800158e:	4a10      	ldr	r2, [pc, #64]	; (80015d0 <HAL_UART_MspInit+0x88>)
 8001590:	f043 0304 	orr.w	r3, r3, #4
 8001594:	6313      	str	r3, [r2, #48]	; 0x30
 8001596:	4b0e      	ldr	r3, [pc, #56]	; (80015d0 <HAL_UART_MspInit+0x88>)
 8001598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800159a:	f003 0304 	and.w	r3, r3, #4
 800159e:	60fb      	str	r3, [r7, #12]
 80015a0:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PC11     ------> USART3_RX
    PC10     ------> USART3_TX
    */
    GPIO_InitStruct.Pin = MicroSDCard_D3_Pin|MicroSDCard_D2_Pin;
 80015a2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80015a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015a8:	2302      	movs	r3, #2
 80015aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ac:	2300      	movs	r3, #0
 80015ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015b0:	2300      	movs	r3, #0
 80015b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80015b4:	2307      	movs	r3, #7
 80015b6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015b8:	f107 0314 	add.w	r3, r7, #20
 80015bc:	4619      	mov	r1, r3
 80015be:	4805      	ldr	r0, [pc, #20]	; (80015d4 <HAL_UART_MspInit+0x8c>)
 80015c0:	f001 fdc8 	bl	8003154 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80015c4:	bf00      	nop
 80015c6:	3728      	adds	r7, #40	; 0x28
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bd80      	pop	{r7, pc}
 80015cc:	40004800 	.word	0x40004800
 80015d0:	40023800 	.word	0x40023800
 80015d4:	40020800 	.word	0x40020800

080015d8 <HAL_FSMC_MspInit>:

}

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 80015d8:	b580      	push	{r7, lr}
 80015da:	b086      	sub	sp, #24
 80015dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80015de:	1d3b      	adds	r3, r7, #4
 80015e0:	2200      	movs	r2, #0
 80015e2:	601a      	str	r2, [r3, #0]
 80015e4:	605a      	str	r2, [r3, #4]
 80015e6:	609a      	str	r2, [r3, #8]
 80015e8:	60da      	str	r2, [r3, #12]
 80015ea:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 80015ec:	4b34      	ldr	r3, [pc, #208]	; (80016c0 <HAL_FSMC_MspInit+0xe8>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d160      	bne.n	80016b6 <HAL_FSMC_MspInit+0xde>
    return;
  }
  FSMC_Initialized = 1;
 80015f4:	4b32      	ldr	r3, [pc, #200]	; (80016c0 <HAL_FSMC_MspInit+0xe8>)
 80015f6:	2201      	movs	r2, #1
 80015f8:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 80015fa:	2300      	movs	r3, #0
 80015fc:	603b      	str	r3, [r7, #0]
 80015fe:	4b31      	ldr	r3, [pc, #196]	; (80016c4 <HAL_FSMC_MspInit+0xec>)
 8001600:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001602:	4a30      	ldr	r2, [pc, #192]	; (80016c4 <HAL_FSMC_MspInit+0xec>)
 8001604:	f043 0301 	orr.w	r3, r3, #1
 8001608:	6393      	str	r3, [r2, #56]	; 0x38
 800160a:	4b2e      	ldr	r3, [pc, #184]	; (80016c4 <HAL_FSMC_MspInit+0xec>)
 800160c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800160e:	f003 0301 	and.w	r3, r3, #1
 8001612:	603b      	str	r3, [r7, #0]
 8001614:	683b      	ldr	r3, [r7, #0]
  PE7   ------> FSMC_D4
  PE10   ------> FSMC_D7
  PE12   ------> FSMC_D9
  PE15   ------> FSMC_D12
  */
  GPIO_InitStruct.Pin = A19_Pin|FSMC_NBL1_Pin|FSMC_NBL0_Pin|A20_Pin
 8001616:	f64f 739b 	movw	r3, #65435	; 0xff9b
 800161a:	607b      	str	r3, [r7, #4]
                          |D10_Pin|D5_Pin|D6_Pin|D8_Pin
                          |D11_Pin|D4_Pin|D7_Pin|D9_Pin
                          |D12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800161c:	2302      	movs	r3, #2
 800161e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001620:	2300      	movs	r3, #0
 8001622:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001624:	2303      	movs	r3, #3
 8001626:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8001628:	230c      	movs	r3, #12
 800162a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800162c:	1d3b      	adds	r3, r7, #4
 800162e:	4619      	mov	r1, r3
 8001630:	4825      	ldr	r0, [pc, #148]	; (80016c8 <HAL_FSMC_MspInit+0xf0>)
 8001632:	f001 fd8f 	bl	8003154 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FSMC_NE1_Pin|FSMC_NWAIT_Pin|D2_Pin|FSMC_NWE_Pin
 8001636:	f64f 73fb 	movw	r3, #65531	; 0xfffb
 800163a:	607b      	str	r3, [r7, #4]
                          |D3_Pin|FSMC_NOE_Pin|FSMC_CLK_Pin|D1_Pin
                          |D0_Pin|A18_Pin|A17_Pin|A16_Pin
                          |D15_Pin|D14_Pin|D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800163c:	2302      	movs	r3, #2
 800163e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001640:	2300      	movs	r3, #0
 8001642:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001644:	2303      	movs	r3, #3
 8001646:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8001648:	230c      	movs	r3, #12
 800164a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800164c:	1d3b      	adds	r3, r7, #4
 800164e:	4619      	mov	r1, r3
 8001650:	481e      	ldr	r0, [pc, #120]	; (80016cc <HAL_FSMC_MspInit+0xf4>)
 8001652:	f001 fd7f 	bl	8003154 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FSMC_NL_Pin;
 8001656:	2380      	movs	r3, #128	; 0x80
 8001658:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800165a:	2302      	movs	r3, #2
 800165c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800165e:	2300      	movs	r3, #0
 8001660:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001662:	2303      	movs	r3, #3
 8001664:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8001666:	230c      	movs	r3, #12
 8001668:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(FSMC_NL_GPIO_Port, &GPIO_InitStruct);
 800166a:	1d3b      	adds	r3, r7, #4
 800166c:	4619      	mov	r1, r3
 800166e:	4818      	ldr	r0, [pc, #96]	; (80016d0 <HAL_FSMC_MspInit+0xf8>)
 8001670:	f001 fd70 	bl	8003154 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FSMC_NE3_Pin|FSMC_NE2_Pin|A15_Pin|A14_Pin
 8001674:	f240 633f 	movw	r3, #1599	; 0x63f
 8001678:	607b      	str	r3, [r7, #4]
                          |A13_Pin|A12_Pin|A11_Pin|A10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800167a:	2302      	movs	r3, #2
 800167c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800167e:	2300      	movs	r3, #0
 8001680:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001682:	2303      	movs	r3, #3
 8001684:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8001686:	230c      	movs	r3, #12
 8001688:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800168a:	1d3b      	adds	r3, r7, #4
 800168c:	4619      	mov	r1, r3
 800168e:	4811      	ldr	r0, [pc, #68]	; (80016d4 <HAL_FSMC_MspInit+0xfc>)
 8001690:	f001 fd60 	bl	8003154 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = A0_Pin|A2_Pin|A1_Pin|A3_Pin
 8001694:	f24f 033f 	movw	r3, #61503	; 0xf03f
 8001698:	607b      	str	r3, [r7, #4]
                          |A4_Pin|A5_Pin|A7_Pin|A6_Pin
                          |A9_Pin|A8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800169a:	2302      	movs	r3, #2
 800169c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800169e:	2300      	movs	r3, #0
 80016a0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016a2:	2303      	movs	r3, #3
 80016a4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 80016a6:	230c      	movs	r3, #12
 80016a8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80016aa:	1d3b      	adds	r3, r7, #4
 80016ac:	4619      	mov	r1, r3
 80016ae:	480a      	ldr	r0, [pc, #40]	; (80016d8 <HAL_FSMC_MspInit+0x100>)
 80016b0:	f001 fd50 	bl	8003154 <HAL_GPIO_Init>
 80016b4:	e000      	b.n	80016b8 <HAL_FSMC_MspInit+0xe0>
    return;
 80016b6:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 80016b8:	3718      	adds	r7, #24
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd80      	pop	{r7, pc}
 80016be:	bf00      	nop
 80016c0:	20000494 	.word	0x20000494
 80016c4:	40023800 	.word	0x40023800
 80016c8:	40021000 	.word	0x40021000
 80016cc:	40020c00 	.word	0x40020c00
 80016d0:	40020400 	.word	0x40020400
 80016d4:	40021800 	.word	0x40021800
 80016d8:	40021400 	.word	0x40021400

080016dc <HAL_NOR_MspInit>:

void HAL_NOR_MspInit(NOR_HandleTypeDef* hnor){
 80016dc:	b580      	push	{r7, lr}
 80016de:	b082      	sub	sp, #8
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN NOR_MspInit 0 */

  /* USER CODE END NOR_MspInit 0 */
  HAL_FSMC_MspInit();
 80016e4:	f7ff ff78 	bl	80015d8 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN NOR_MspInit 1 */

  /* USER CODE END NOR_MspInit 1 */
}
 80016e8:	bf00      	nop
 80016ea:	3708      	adds	r7, #8
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bd80      	pop	{r7, pc}

080016f0 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b082      	sub	sp, #8
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 80016f8:	f7ff ff6e 	bl	80015d8 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 80016fc:	bf00      	nop
 80016fe:	3708      	adds	r7, #8
 8001700:	46bd      	mov	sp, r7
 8001702:	bd80      	pop	{r7, pc}

08001704 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001704:	b480      	push	{r7}
 8001706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001708:	e7fe      	b.n	8001708 <NMI_Handler+0x4>

0800170a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800170a:	b480      	push	{r7}
 800170c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800170e:	e7fe      	b.n	800170e <HardFault_Handler+0x4>

08001710 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001710:	b480      	push	{r7}
 8001712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001714:	e7fe      	b.n	8001714 <MemManage_Handler+0x4>

08001716 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001716:	b480      	push	{r7}
 8001718:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800171a:	e7fe      	b.n	800171a <BusFault_Handler+0x4>

0800171c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800171c:	b480      	push	{r7}
 800171e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001720:	e7fe      	b.n	8001720 <UsageFault_Handler+0x4>

08001722 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001722:	b480      	push	{r7}
 8001724:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001726:	bf00      	nop
 8001728:	46bd      	mov	sp, r7
 800172a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172e:	4770      	bx	lr

08001730 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001730:	b480      	push	{r7}
 8001732:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001734:	bf00      	nop
 8001736:	46bd      	mov	sp, r7
 8001738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173c:	4770      	bx	lr

0800173e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800173e:	b480      	push	{r7}
 8001740:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001742:	bf00      	nop
 8001744:	46bd      	mov	sp, r7
 8001746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174a:	4770      	bx	lr

0800174c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001750:	f001 f86a 	bl	8002828 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001754:	bf00      	nop
 8001756:	bd80      	pop	{r7, pc}

08001758 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800175c:	4802      	ldr	r0, [pc, #8]	; (8001768 <OTG_FS_IRQHandler+0x10>)
 800175e:	f002 fa67 	bl	8003c30 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001762:	bf00      	nop
 8001764:	bd80      	pop	{r7, pc}
 8001766:	bf00      	nop
 8001768:	20000c14 	.word	0x20000c14

0800176c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800176c:	b480      	push	{r7}
 800176e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001770:	4b06      	ldr	r3, [pc, #24]	; (800178c <SystemInit+0x20>)
 8001772:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001776:	4a05      	ldr	r2, [pc, #20]	; (800178c <SystemInit+0x20>)
 8001778:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800177c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001780:	bf00      	nop
 8001782:	46bd      	mov	sp, r7
 8001784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001788:	4770      	bx	lr
 800178a:	bf00      	nop
 800178c:	e000ed00 	.word	0xe000ed00

08001790 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001790:	f8df d034 	ldr.w	sp, [pc, #52]	; 80017c8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001794:	480d      	ldr	r0, [pc, #52]	; (80017cc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001796:	490e      	ldr	r1, [pc, #56]	; (80017d0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001798:	4a0e      	ldr	r2, [pc, #56]	; (80017d4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800179a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800179c:	e002      	b.n	80017a4 <LoopCopyDataInit>

0800179e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800179e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017a2:	3304      	adds	r3, #4

080017a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017a8:	d3f9      	bcc.n	800179e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017aa:	4a0b      	ldr	r2, [pc, #44]	; (80017d8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80017ac:	4c0b      	ldr	r4, [pc, #44]	; (80017dc <LoopFillZerobss+0x26>)
  movs r3, #0
 80017ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017b0:	e001      	b.n	80017b6 <LoopFillZerobss>

080017b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017b4:	3204      	adds	r2, #4

080017b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017b8:	d3fb      	bcc.n	80017b2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80017ba:	f7ff ffd7 	bl	800176c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80017be:	f008 fe23 	bl	800a408 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80017c2:	f7fe fe9f 	bl	8000504 <main>
  bx  lr    
 80017c6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80017c8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80017cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017d0:	20000208 	.word	0x20000208
  ldr r2, =_sidata
 80017d4:	0800c014 	.word	0x0800c014
  ldr r2, =_sbss
 80017d8:	20000208 	.word	0x20000208
  ldr r4, =_ebss
 80017dc:	2000113c 	.word	0x2000113c

080017e0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80017e0:	e7fe      	b.n	80017e0 <ADC_IRQHandler>

080017e2 <ili9325_Init>:
  * @brief  Initialize the ILI9325 LCD Component.
  * @param  None
  * @retval None
  */
void ili9325_Init(void)
{  
 80017e2:	b580      	push	{r7, lr}
 80017e4:	af00      	add	r7, sp, #0
  /* Initialize ILI9325 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 80017e6:	f000 fd2b 	bl	8002240 <LCD_IO_Init>
  
  /* Start Initial Sequence --------------------------------------------------*/
  ili9325_WriteReg(LCD_REG_0, 0x0001); /* Start internal OSC. */
 80017ea:	2101      	movs	r1, #1
 80017ec:	2000      	movs	r0, #0
 80017ee:	f000 f9a1 	bl	8001b34 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_1, 0x0100); /* Set SS and SM bit */
 80017f2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80017f6:	2001      	movs	r0, #1
 80017f8:	f000 f99c 	bl	8001b34 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_2, 0x0700); /* Set 1 line inversion */
 80017fc:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8001800:	2002      	movs	r0, #2
 8001802:	f000 f997 	bl	8001b34 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_3, 0x1018); /* Set GRAM write direction and BGR=1. */
 8001806:	f241 0118 	movw	r1, #4120	; 0x1018
 800180a:	2003      	movs	r0, #3
 800180c:	f000 f992 	bl	8001b34 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_4, 0x0000); /* Resize register */
 8001810:	2100      	movs	r1, #0
 8001812:	2004      	movs	r0, #4
 8001814:	f000 f98e 	bl	8001b34 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_8, 0x0202); /* Set the back porch and front porch */
 8001818:	f240 2102 	movw	r1, #514	; 0x202
 800181c:	2008      	movs	r0, #8
 800181e:	f000 f989 	bl	8001b34 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_9, 0x0000); /* Set non-display area refresh cycle ISC[3:0] */
 8001822:	2100      	movs	r1, #0
 8001824:	2009      	movs	r0, #9
 8001826:	f000 f985 	bl	8001b34 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_10, 0x0000); /* FMARK function */
 800182a:	2100      	movs	r1, #0
 800182c:	200a      	movs	r0, #10
 800182e:	f000 f981 	bl	8001b34 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_12, 0x0000); /* RGB interface setting */
 8001832:	2100      	movs	r1, #0
 8001834:	200c      	movs	r0, #12
 8001836:	f000 f97d 	bl	8001b34 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_13, 0x0000); /* Frame marker Position */
 800183a:	2100      	movs	r1, #0
 800183c:	200d      	movs	r0, #13
 800183e:	f000 f979 	bl	8001b34 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_15, 0x0000); /* RGB interface polarity */
 8001842:	2100      	movs	r1, #0
 8001844:	200f      	movs	r0, #15
 8001846:	f000 f975 	bl	8001b34 <ili9325_WriteReg>
  
  /* Power On sequence -------------------------------------------------------*/
  ili9325_WriteReg(LCD_REG_16, 0x0000); /* SAP, BT[3:0], AP, DSTB, SLP, STB */
 800184a:	2100      	movs	r1, #0
 800184c:	2010      	movs	r0, #16
 800184e:	f000 f971 	bl	8001b34 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_17, 0x0000); /* DC1[2:0], DC0[2:0], VC[2:0] */
 8001852:	2100      	movs	r1, #0
 8001854:	2011      	movs	r0, #17
 8001856:	f000 f96d 	bl	8001b34 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_18, 0x0000); /* VREG1OUT voltage */
 800185a:	2100      	movs	r1, #0
 800185c:	2012      	movs	r0, #18
 800185e:	f000 f969 	bl	8001b34 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_19, 0x0000); /* VDV[4:0] for VCOM amplitude */
 8001862:	2100      	movs	r1, #0
 8001864:	2013      	movs	r0, #19
 8001866:	f000 f965 	bl	8001b34 <ili9325_WriteReg>
  
  ili9325_WriteReg(LCD_REG_16, 0x17B0); /* SAP, BT[3:0], AP, DSTB, SLP, STB */
 800186a:	f241 71b0 	movw	r1, #6064	; 0x17b0
 800186e:	2010      	movs	r0, #16
 8001870:	f000 f960 	bl	8001b34 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_17, 0x0137); /* DC1[2:0], DC0[2:0], VC[2:0] */
 8001874:	f240 1137 	movw	r1, #311	; 0x137
 8001878:	2011      	movs	r0, #17
 800187a:	f000 f95b 	bl	8001b34 <ili9325_WriteReg>
  
  ili9325_WriteReg(LCD_REG_18, 0x0139); /* VREG1OUT voltage */
 800187e:	f240 1139 	movw	r1, #313	; 0x139
 8001882:	2012      	movs	r0, #18
 8001884:	f000 f956 	bl	8001b34 <ili9325_WriteReg>
  
  ili9325_WriteReg(LCD_REG_19, 0x1d00); /* VDV[4:0] for VCOM amplitude */
 8001888:	f44f 51e8 	mov.w	r1, #7424	; 0x1d00
 800188c:	2013      	movs	r0, #19
 800188e:	f000 f951 	bl	8001b34 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_41, 0x0013); /* VCM[4:0] for VCOMH */
 8001892:	2113      	movs	r1, #19
 8001894:	2029      	movs	r0, #41	; 0x29
 8001896:	f000 f94d 	bl	8001b34 <ili9325_WriteReg>
  
  ili9325_WriteReg(LCD_REG_32, 0x0000); /* GRAM horizontal Address */
 800189a:	2100      	movs	r1, #0
 800189c:	2020      	movs	r0, #32
 800189e:	f000 f949 	bl	8001b34 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_33, 0x0000); /* GRAM Vertical Address */
 80018a2:	2100      	movs	r1, #0
 80018a4:	2021      	movs	r0, #33	; 0x21
 80018a6:	f000 f945 	bl	8001b34 <ili9325_WriteReg>
  
  /* Adjust the Gamma Curve (ILI9325) ----------------------------------------*/
  ili9325_WriteReg(LCD_REG_48, 0x0007);
 80018aa:	2107      	movs	r1, #7
 80018ac:	2030      	movs	r0, #48	; 0x30
 80018ae:	f000 f941 	bl	8001b34 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_49, 0x0302);
 80018b2:	f240 3102 	movw	r1, #770	; 0x302
 80018b6:	2031      	movs	r0, #49	; 0x31
 80018b8:	f000 f93c 	bl	8001b34 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_50, 0x0105);
 80018bc:	f240 1105 	movw	r1, #261	; 0x105
 80018c0:	2032      	movs	r0, #50	; 0x32
 80018c2:	f000 f937 	bl	8001b34 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_53, 0x0206);
 80018c6:	f240 2106 	movw	r1, #518	; 0x206
 80018ca:	2035      	movs	r0, #53	; 0x35
 80018cc:	f000 f932 	bl	8001b34 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_54, 0x0808);
 80018d0:	f640 0108 	movw	r1, #2056	; 0x808
 80018d4:	2036      	movs	r0, #54	; 0x36
 80018d6:	f000 f92d 	bl	8001b34 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_55, 0x0206);
 80018da:	f240 2106 	movw	r1, #518	; 0x206
 80018de:	2037      	movs	r0, #55	; 0x37
 80018e0:	f000 f928 	bl	8001b34 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_56, 0x0504);
 80018e4:	f240 5104 	movw	r1, #1284	; 0x504
 80018e8:	2038      	movs	r0, #56	; 0x38
 80018ea:	f000 f923 	bl	8001b34 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_57, 0x0007);
 80018ee:	2107      	movs	r1, #7
 80018f0:	2039      	movs	r0, #57	; 0x39
 80018f2:	f000 f91f 	bl	8001b34 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_60, 0x0105);
 80018f6:	f240 1105 	movw	r1, #261	; 0x105
 80018fa:	203c      	movs	r0, #60	; 0x3c
 80018fc:	f000 f91a 	bl	8001b34 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_61, 0x0808);
 8001900:	f640 0108 	movw	r1, #2056	; 0x808
 8001904:	203d      	movs	r0, #61	; 0x3d
 8001906:	f000 f915 	bl	8001b34 <ili9325_WriteReg>
  
  /* Set GRAM area -----------------------------------------------------------*/
  ili9325_WriteReg(LCD_REG_80, 0x0000); /* Horizontal GRAM Start Address */
 800190a:	2100      	movs	r1, #0
 800190c:	2050      	movs	r0, #80	; 0x50
 800190e:	f000 f911 	bl	8001b34 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_81, 0x00EF); /* Horizontal GRAM End Address */
 8001912:	21ef      	movs	r1, #239	; 0xef
 8001914:	2051      	movs	r0, #81	; 0x51
 8001916:	f000 f90d 	bl	8001b34 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_82, 0x0000); /* Vertical GRAM Start Address */
 800191a:	2100      	movs	r1, #0
 800191c:	2052      	movs	r0, #82	; 0x52
 800191e:	f000 f909 	bl	8001b34 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_83, 0x013F); /* Vertical GRAM End Address */
 8001922:	f240 113f 	movw	r1, #319	; 0x13f
 8001926:	2053      	movs	r0, #83	; 0x53
 8001928:	f000 f904 	bl	8001b34 <ili9325_WriteReg>
  
  ili9325_WriteReg(LCD_REG_96,  0xA700); /* Gate Scan Line(GS=1, scan direction is G320~G1) */
 800192c:	f44f 4127 	mov.w	r1, #42752	; 0xa700
 8001930:	2060      	movs	r0, #96	; 0x60
 8001932:	f000 f8ff 	bl	8001b34 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_97,  0x0001); /* NDL,VLE, REV */
 8001936:	2101      	movs	r1, #1
 8001938:	2061      	movs	r0, #97	; 0x61
 800193a:	f000 f8fb 	bl	8001b34 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_106, 0x0000); /* set scrolling line */
 800193e:	2100      	movs	r1, #0
 8001940:	206a      	movs	r0, #106	; 0x6a
 8001942:	f000 f8f7 	bl	8001b34 <ili9325_WriteReg>
  
  /* Partial Display Control -------------------------------------------------*/
  ili9325_WriteReg(LCD_REG_128, 0x0000);
 8001946:	2100      	movs	r1, #0
 8001948:	2080      	movs	r0, #128	; 0x80
 800194a:	f000 f8f3 	bl	8001b34 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_129, 0x0000);
 800194e:	2100      	movs	r1, #0
 8001950:	2081      	movs	r0, #129	; 0x81
 8001952:	f000 f8ef 	bl	8001b34 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_130, 0x0000);
 8001956:	2100      	movs	r1, #0
 8001958:	2082      	movs	r0, #130	; 0x82
 800195a:	f000 f8eb 	bl	8001b34 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_131, 0x0000);
 800195e:	2100      	movs	r1, #0
 8001960:	2083      	movs	r0, #131	; 0x83
 8001962:	f000 f8e7 	bl	8001b34 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_132, 0x0000);
 8001966:	2100      	movs	r1, #0
 8001968:	2084      	movs	r0, #132	; 0x84
 800196a:	f000 f8e3 	bl	8001b34 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_133, 0x0000);
 800196e:	2100      	movs	r1, #0
 8001970:	2085      	movs	r0, #133	; 0x85
 8001972:	f000 f8df 	bl	8001b34 <ili9325_WriteReg>
  
  /* Panel Control -----------------------------------------------------------*/
  ili9325_WriteReg(LCD_REG_144, 0x0010);
 8001976:	2110      	movs	r1, #16
 8001978:	2090      	movs	r0, #144	; 0x90
 800197a:	f000 f8db 	bl	8001b34 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_146, 0x0000);
 800197e:	2100      	movs	r1, #0
 8001980:	2092      	movs	r0, #146	; 0x92
 8001982:	f000 f8d7 	bl	8001b34 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_147, 0x0003);
 8001986:	2103      	movs	r1, #3
 8001988:	2093      	movs	r0, #147	; 0x93
 800198a:	f000 f8d3 	bl	8001b34 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_149, 0x0110);
 800198e:	f44f 7188 	mov.w	r1, #272	; 0x110
 8001992:	2095      	movs	r0, #149	; 0x95
 8001994:	f000 f8ce 	bl	8001b34 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_151, 0x0000);
 8001998:	2100      	movs	r1, #0
 800199a:	2097      	movs	r0, #151	; 0x97
 800199c:	f000 f8ca 	bl	8001b34 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_152, 0x0000);
 80019a0:	2100      	movs	r1, #0
 80019a2:	2098      	movs	r0, #152	; 0x98
 80019a4:	f000 f8c6 	bl	8001b34 <ili9325_WriteReg>
  
  /* set GRAM write direction and BGR = 1 */
  /* I/D=00 (Horizontal : increment, Vertical : decrement) */
  /* AM=1 (address is updated in vertical writing direction) */
  ili9325_WriteReg(LCD_REG_3, 0x1018);
 80019a8:	f241 0118 	movw	r1, #4120	; 0x1018
 80019ac:	2003      	movs	r0, #3
 80019ae:	f000 f8c1 	bl	8001b34 <ili9325_WriteReg>
  
  /* 262K color and display ON */ 
  ili9325_WriteReg(LCD_REG_7, 0x0173);    
 80019b2:	f240 1173 	movw	r1, #371	; 0x173
 80019b6:	2007      	movs	r0, #7
 80019b8:	f000 f8bc 	bl	8001b34 <ili9325_WriteReg>
  
  /* Set the Cursor */ 
  ili9325_SetCursor(0, 0);
 80019bc:	2100      	movs	r1, #0
 80019be:	2000      	movs	r0, #0
 80019c0:	f000 f86d 	bl	8001a9e <ili9325_SetCursor>
  
  /* Prepare to write GRAM */
  LCD_IO_WriteReg(LCD_REG_34);
 80019c4:	2022      	movs	r0, #34	; 0x22
 80019c6:	f000 fc69 	bl	800229c <LCD_IO_WriteReg>
}
 80019ca:	bf00      	nop
 80019cc:	bd80      	pop	{r7, pc}

080019ce <ili9325_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ili9325_DisplayOn(void)
{
 80019ce:	b580      	push	{r7, lr}
 80019d0:	af00      	add	r7, sp, #0
  /* Power On sequence -------------------------------------------------------*/
  ili9325_WriteReg(LCD_REG_16, 0x0000); /* SAP, BT[3:0], AP, DSTB, SLP, STB */
 80019d2:	2100      	movs	r1, #0
 80019d4:	2010      	movs	r0, #16
 80019d6:	f000 f8ad 	bl	8001b34 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_17, 0x0000); /* DC1[2:0], DC0[2:0], VC[2:0] */
 80019da:	2100      	movs	r1, #0
 80019dc:	2011      	movs	r0, #17
 80019de:	f000 f8a9 	bl	8001b34 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_18, 0x0000); /* VREG1OUT voltage */
 80019e2:	2100      	movs	r1, #0
 80019e4:	2012      	movs	r0, #18
 80019e6:	f000 f8a5 	bl	8001b34 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_19, 0x0000); /* VDV[4:0] for VCOM amplitude*/
 80019ea:	2100      	movs	r1, #0
 80019ec:	2013      	movs	r0, #19
 80019ee:	f000 f8a1 	bl	8001b34 <ili9325_WriteReg>

  ili9325_WriteReg(LCD_REG_16, 0x17B0); /* SAP, BT[3:0], AP, DSTB, SLP, STB */
 80019f2:	f241 71b0 	movw	r1, #6064	; 0x17b0
 80019f6:	2010      	movs	r0, #16
 80019f8:	f000 f89c 	bl	8001b34 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_17, 0x0137); /* DC1[2:0], DC0[2:0], VC[2:0] */
 80019fc:	f240 1137 	movw	r1, #311	; 0x137
 8001a00:	2011      	movs	r0, #17
 8001a02:	f000 f897 	bl	8001b34 <ili9325_WriteReg>

  ili9325_WriteReg(LCD_REG_18, 0x0139); /* VREG1OUT voltage */
 8001a06:	f240 1139 	movw	r1, #313	; 0x139
 8001a0a:	2012      	movs	r0, #18
 8001a0c:	f000 f892 	bl	8001b34 <ili9325_WriteReg>

  ili9325_WriteReg(LCD_REG_19, 0x1d00); /* VDV[4:0] for VCOM amplitude */
 8001a10:	f44f 51e8 	mov.w	r1, #7424	; 0x1d00
 8001a14:	2013      	movs	r0, #19
 8001a16:	f000 f88d 	bl	8001b34 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_41, 0x0013); /* VCM[4:0] for VCOMH */
 8001a1a:	2113      	movs	r1, #19
 8001a1c:	2029      	movs	r0, #41	; 0x29
 8001a1e:	f000 f889 	bl	8001b34 <ili9325_WriteReg>
 
  /* Display On */
  ili9325_WriteReg(LCD_REG_7, 0x0173); /* 262K color and display ON */
 8001a22:	f240 1173 	movw	r1, #371	; 0x173
 8001a26:	2007      	movs	r0, #7
 8001a28:	f000 f884 	bl	8001b34 <ili9325_WriteReg>
}
 8001a2c:	bf00      	nop
 8001a2e:	bd80      	pop	{r7, pc}

08001a30 <ili9325_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void ili9325_DisplayOff(void)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	af00      	add	r7, sp, #0
  /* Power Off sequence ------------------------------------------------------*/
  ili9325_WriteReg(LCD_REG_16, 0x0000); /* SAP, BT[3:0], AP, DSTB, SLP, STB */
 8001a34:	2100      	movs	r1, #0
 8001a36:	2010      	movs	r0, #16
 8001a38:	f000 f87c 	bl	8001b34 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_17, 0x0000); /* DC1[2:0], DC0[2:0], VC[2:0] */
 8001a3c:	2100      	movs	r1, #0
 8001a3e:	2011      	movs	r0, #17
 8001a40:	f000 f878 	bl	8001b34 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_18, 0x0000); /* VREG1OUT voltage */
 8001a44:	2100      	movs	r1, #0
 8001a46:	2012      	movs	r0, #18
 8001a48:	f000 f874 	bl	8001b34 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_19, 0x0000); /* VDV[4:0] for VCOM amplitude*/
 8001a4c:	2100      	movs	r1, #0
 8001a4e:	2013      	movs	r0, #19
 8001a50:	f000 f870 	bl	8001b34 <ili9325_WriteReg>
  
  ili9325_WriteReg(LCD_REG_41, 0x0000); /* VCM[4:0] for VCOMH */
 8001a54:	2100      	movs	r1, #0
 8001a56:	2029      	movs	r0, #41	; 0x29
 8001a58:	f000 f86c 	bl	8001b34 <ili9325_WriteReg>
  
  /* Display Off */
  ili9325_WriteReg(LCD_REG_7, 0x0); 
 8001a5c:	2100      	movs	r1, #0
 8001a5e:	2007      	movs	r0, #7
 8001a60:	f000 f868 	bl	8001b34 <ili9325_WriteReg>
}
 8001a64:	bf00      	nop
 8001a66:	bd80      	pop	{r7, pc}

08001a68 <ili9325_GetLcdPixelWidth>:
  * @brief  Get the LCD pixel Width.
  * @param  None
  * @retval The Lcd Pixel Width
  */
uint16_t ili9325_GetLcdPixelWidth(void)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	af00      	add	r7, sp, #0
 return (uint16_t)320;
 8001a6c:	f44f 73a0 	mov.w	r3, #320	; 0x140
}
 8001a70:	4618      	mov	r0, r3
 8001a72:	46bd      	mov	sp, r7
 8001a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a78:	4770      	bx	lr

08001a7a <ili9325_GetLcdPixelHeight>:
  * @brief  Get the LCD pixel Height.
  * @param  None
  * @retval The Lcd Pixel Height
  */
uint16_t ili9325_GetLcdPixelHeight(void)
{
 8001a7a:	b480      	push	{r7}
 8001a7c:	af00      	add	r7, sp, #0
 return (uint16_t)240;
 8001a7e:	23f0      	movs	r3, #240	; 0xf0
}
 8001a80:	4618      	mov	r0, r3
 8001a82:	46bd      	mov	sp, r7
 8001a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a88:	4770      	bx	lr

08001a8a <ili9325_ReadID>:
  * @brief  Get the ILI9325 ID.
  * @param  None
  * @retval The ILI9325 ID 
  */
uint16_t ili9325_ReadID(void)
{
 8001a8a:	b580      	push	{r7, lr}
 8001a8c:	af00      	add	r7, sp, #0
  LCD_IO_Init(); 
 8001a8e:	f000 fbd7 	bl	8002240 <LCD_IO_Init>
  return (ili9325_ReadReg(0x00));
 8001a92:	2000      	movs	r0, #0
 8001a94:	f000 f863 	bl	8001b5e <ili9325_ReadReg>
 8001a98:	4603      	mov	r3, r0
}
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	bd80      	pop	{r7, pc}

08001a9e <ili9325_SetCursor>:
  * @param  Xpos: specifies the X position.
  * @param  Ypos: specifies the Y position.
  * @retval None
  */
void ili9325_SetCursor(uint16_t Xpos, uint16_t Ypos)
{
 8001a9e:	b580      	push	{r7, lr}
 8001aa0:	b082      	sub	sp, #8
 8001aa2:	af00      	add	r7, sp, #0
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	460a      	mov	r2, r1
 8001aa8:	80fb      	strh	r3, [r7, #6]
 8001aaa:	4613      	mov	r3, r2
 8001aac:	80bb      	strh	r3, [r7, #4]
  ili9325_WriteReg(LCD_REG_32, Ypos);
 8001aae:	88bb      	ldrh	r3, [r7, #4]
 8001ab0:	4619      	mov	r1, r3
 8001ab2:	2020      	movs	r0, #32
 8001ab4:	f000 f83e 	bl	8001b34 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_33, (ILI9325_LCD_PIXEL_WIDTH - 1 - Xpos));      
 8001ab8:	88fb      	ldrh	r3, [r7, #6]
 8001aba:	f5c3 739f 	rsb	r3, r3, #318	; 0x13e
 8001abe:	3301      	adds	r3, #1
 8001ac0:	b29b      	uxth	r3, r3
 8001ac2:	4619      	mov	r1, r3
 8001ac4:	2021      	movs	r0, #33	; 0x21
 8001ac6:	f000 f835 	bl	8001b34 <ili9325_WriteReg>
}
 8001aca:	bf00      	nop
 8001acc:	3708      	adds	r7, #8
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}

08001ad2 <ili9325_WritePixel>:
  * @param  Ypos: specifies the Y position.
  * @param  RGBCode: the RGB pixel color
  * @retval None
  */
void ili9325_WritePixel(uint16_t Xpos, uint16_t Ypos, uint16_t RGBCode)
{
 8001ad2:	b580      	push	{r7, lr}
 8001ad4:	b082      	sub	sp, #8
 8001ad6:	af00      	add	r7, sp, #0
 8001ad8:	4603      	mov	r3, r0
 8001ada:	80fb      	strh	r3, [r7, #6]
 8001adc:	460b      	mov	r3, r1
 8001ade:	80bb      	strh	r3, [r7, #4]
 8001ae0:	4613      	mov	r3, r2
 8001ae2:	807b      	strh	r3, [r7, #2]
  /* Set Cursor */
  ili9325_SetCursor(Xpos, Ypos);
 8001ae4:	88ba      	ldrh	r2, [r7, #4]
 8001ae6:	88fb      	ldrh	r3, [r7, #6]
 8001ae8:	4611      	mov	r1, r2
 8001aea:	4618      	mov	r0, r3
 8001aec:	f7ff ffd7 	bl	8001a9e <ili9325_SetCursor>
  
  /* Prepare to write GRAM */
  LCD_IO_WriteReg(LCD_REG_34);
 8001af0:	2022      	movs	r0, #34	; 0x22
 8001af2:	f000 fbd3 	bl	800229c <LCD_IO_WriteReg>

  /* Write 16-bit GRAM Reg */
  LCD_IO_WriteMultipleData((uint8_t*)&RGBCode, 2);
 8001af6:	1cbb      	adds	r3, r7, #2
 8001af8:	2102      	movs	r1, #2
 8001afa:	4618      	mov	r0, r3
 8001afc:	f000 fbb0 	bl	8002260 <LCD_IO_WriteMultipleData>
}
 8001b00:	bf00      	nop
 8001b02:	3708      	adds	r7, #8
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bd80      	pop	{r7, pc}

08001b08 <ili9325_ReadPixel>:
  * @brief  Read pixel.
  * @param  None
  * @retval The RGB pixel color
  */
uint16_t ili9325_ReadPixel(uint16_t Xpos, uint16_t Ypos)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b082      	sub	sp, #8
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	4603      	mov	r3, r0
 8001b10:	460a      	mov	r2, r1
 8001b12:	80fb      	strh	r3, [r7, #6]
 8001b14:	4613      	mov	r3, r2
 8001b16:	80bb      	strh	r3, [r7, #4]
  /* Set Cursor */
  ili9325_SetCursor(Xpos, Ypos);
 8001b18:	88ba      	ldrh	r2, [r7, #4]
 8001b1a:	88fb      	ldrh	r3, [r7, #6]
 8001b1c:	4611      	mov	r1, r2
 8001b1e:	4618      	mov	r0, r3
 8001b20:	f7ff ffbd 	bl	8001a9e <ili9325_SetCursor>
  
  /* Read 16-bit Reg */
  return (LCD_IO_ReadData(LCD_REG_34));
 8001b24:	2022      	movs	r0, #34	; 0x22
 8001b26:	f000 fbc6 	bl	80022b6 <LCD_IO_ReadData>
 8001b2a:	4603      	mov	r3, r0
}
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	3708      	adds	r7, #8
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bd80      	pop	{r7, pc}

08001b34 <ili9325_WriteReg>:
  * @param  LCDReg: Address of the selected register.
  * @param  LCDRegValue: Value to write to the selected register.
  * @retval None
  */
void ili9325_WriteReg(uint8_t LCDReg, uint16_t LCDRegValue)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b082      	sub	sp, #8
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	460a      	mov	r2, r1
 8001b3e:	71fb      	strb	r3, [r7, #7]
 8001b40:	4613      	mov	r3, r2
 8001b42:	80bb      	strh	r3, [r7, #4]
  LCD_IO_WriteReg(LCDReg);
 8001b44:	79fb      	ldrb	r3, [r7, #7]
 8001b46:	4618      	mov	r0, r3
 8001b48:	f000 fba8 	bl	800229c <LCD_IO_WriteReg>
  
  /* Write 16-bit GRAM Reg */
  LCD_IO_WriteMultipleData((uint8_t*)&LCDRegValue, 2);
 8001b4c:	1d3b      	adds	r3, r7, #4
 8001b4e:	2102      	movs	r1, #2
 8001b50:	4618      	mov	r0, r3
 8001b52:	f000 fb85 	bl	8002260 <LCD_IO_WriteMultipleData>
}
 8001b56:	bf00      	nop
 8001b58:	3708      	adds	r7, #8
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}

08001b5e <ili9325_ReadReg>:
  * @brief  Reads the selected LCD Register.
  * @param  LCDReg: address of the selected register.
  * @retval LCD Register Value.
  */
uint16_t ili9325_ReadReg(uint8_t LCDReg)
{ 
 8001b5e:	b580      	push	{r7, lr}
 8001b60:	b082      	sub	sp, #8
 8001b62:	af00      	add	r7, sp, #0
 8001b64:	4603      	mov	r3, r0
 8001b66:	71fb      	strb	r3, [r7, #7]
  /* Read 16-bit Reg */
  return (LCD_IO_ReadData(LCDReg));
 8001b68:	79fb      	ldrb	r3, [r7, #7]
 8001b6a:	b29b      	uxth	r3, r3
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	f000 fba2 	bl	80022b6 <LCD_IO_ReadData>
 8001b72:	4603      	mov	r3, r0
}
 8001b74:	4618      	mov	r0, r3
 8001b76:	3708      	adds	r7, #8
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bd80      	pop	{r7, pc}

08001b7c <ili9325_SetDisplayWindow>:
  * @param  Height: display window height.
  * @param  Width:  display window width.
  * @retval None
  */
void ili9325_SetDisplayWindow(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8001b7c:	b590      	push	{r4, r7, lr}
 8001b7e:	b083      	sub	sp, #12
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	4604      	mov	r4, r0
 8001b84:	4608      	mov	r0, r1
 8001b86:	4611      	mov	r1, r2
 8001b88:	461a      	mov	r2, r3
 8001b8a:	4623      	mov	r3, r4
 8001b8c:	80fb      	strh	r3, [r7, #6]
 8001b8e:	4603      	mov	r3, r0
 8001b90:	80bb      	strh	r3, [r7, #4]
 8001b92:	460b      	mov	r3, r1
 8001b94:	807b      	strh	r3, [r7, #2]
 8001b96:	4613      	mov	r3, r2
 8001b98:	803b      	strh	r3, [r7, #0]
  /* Horizontal GRAM Start Address */
  ili9325_WriteReg(LCD_REG_80, (Ypos));
 8001b9a:	88bb      	ldrh	r3, [r7, #4]
 8001b9c:	4619      	mov	r1, r3
 8001b9e:	2050      	movs	r0, #80	; 0x50
 8001ba0:	f7ff ffc8 	bl	8001b34 <ili9325_WriteReg>
  /* Horizontal GRAM End Address */
  ili9325_WriteReg(LCD_REG_81, (Ypos + Height - 1));
 8001ba4:	88ba      	ldrh	r2, [r7, #4]
 8001ba6:	883b      	ldrh	r3, [r7, #0]
 8001ba8:	4413      	add	r3, r2
 8001baa:	b29b      	uxth	r3, r3
 8001bac:	3b01      	subs	r3, #1
 8001bae:	b29b      	uxth	r3, r3
 8001bb0:	4619      	mov	r1, r3
 8001bb2:	2051      	movs	r0, #81	; 0x51
 8001bb4:	f7ff ffbe 	bl	8001b34 <ili9325_WriteReg>
  
  /* Vertical GRAM Start Address */
  ili9325_WriteReg(LCD_REG_82, ILI9325_LCD_PIXEL_WIDTH - Xpos - Width);
 8001bb8:	88fa      	ldrh	r2, [r7, #6]
 8001bba:	887b      	ldrh	r3, [r7, #2]
 8001bbc:	4413      	add	r3, r2
 8001bbe:	b29b      	uxth	r3, r3
 8001bc0:	f5c3 73a0 	rsb	r3, r3, #320	; 0x140
 8001bc4:	b29b      	uxth	r3, r3
 8001bc6:	4619      	mov	r1, r3
 8001bc8:	2052      	movs	r0, #82	; 0x52
 8001bca:	f7ff ffb3 	bl	8001b34 <ili9325_WriteReg>
  /* Vertical GRAM End Address */
  ili9325_WriteReg(LCD_REG_83, ILI9325_LCD_PIXEL_WIDTH - Xpos - 1);  
 8001bce:	88fb      	ldrh	r3, [r7, #6]
 8001bd0:	f5c3 739f 	rsb	r3, r3, #318	; 0x13e
 8001bd4:	3301      	adds	r3, #1
 8001bd6:	b29b      	uxth	r3, r3
 8001bd8:	4619      	mov	r1, r3
 8001bda:	2053      	movs	r0, #83	; 0x53
 8001bdc:	f7ff ffaa 	bl	8001b34 <ili9325_WriteReg>
}
 8001be0:	bf00      	nop
 8001be2:	370c      	adds	r7, #12
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bd90      	pop	{r4, r7, pc}

08001be8 <ili9325_DrawHLine>:
  * @param  Ypos:     specifies the Y position.
  * @param  Length:   specifies the Line length.  
  * @retval None
  */
void ili9325_DrawHLine(uint16_t RGBCode, uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8001be8:	b590      	push	{r4, r7, lr}
 8001bea:	b085      	sub	sp, #20
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	4604      	mov	r4, r0
 8001bf0:	4608      	mov	r0, r1
 8001bf2:	4611      	mov	r1, r2
 8001bf4:	461a      	mov	r2, r3
 8001bf6:	4623      	mov	r3, r4
 8001bf8:	80fb      	strh	r3, [r7, #6]
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	80bb      	strh	r3, [r7, #4]
 8001bfe:	460b      	mov	r3, r1
 8001c00:	807b      	strh	r3, [r7, #2]
 8001c02:	4613      	mov	r3, r2
 8001c04:	803b      	strh	r3, [r7, #0]
  uint16_t counter = 0;
 8001c06:	2300      	movs	r3, #0
 8001c08:	81fb      	strh	r3, [r7, #14]
  
  /* Set Cursor */
  ili9325_SetCursor(Xpos, Ypos); 
 8001c0a:	887a      	ldrh	r2, [r7, #2]
 8001c0c:	88bb      	ldrh	r3, [r7, #4]
 8001c0e:	4611      	mov	r1, r2
 8001c10:	4618      	mov	r0, r3
 8001c12:	f7ff ff44 	bl	8001a9e <ili9325_SetCursor>
  
  /* Prepare to write GRAM */
  LCD_IO_WriteReg(LCD_REG_34);
 8001c16:	2022      	movs	r0, #34	; 0x22
 8001c18:	f000 fb40 	bl	800229c <LCD_IO_WriteReg>

  /* Sent a complete line */
  for(counter = 0; counter < Length; counter++)
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	81fb      	strh	r3, [r7, #14]
 8001c20:	e007      	b.n	8001c32 <ili9325_DrawHLine+0x4a>
  {
    ArrayRGB[counter] = RGBCode;
 8001c22:	89fb      	ldrh	r3, [r7, #14]
 8001c24:	490a      	ldr	r1, [pc, #40]	; (8001c50 <ili9325_DrawHLine+0x68>)
 8001c26:	88fa      	ldrh	r2, [r7, #6]
 8001c28:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
  for(counter = 0; counter < Length; counter++)
 8001c2c:	89fb      	ldrh	r3, [r7, #14]
 8001c2e:	3301      	adds	r3, #1
 8001c30:	81fb      	strh	r3, [r7, #14]
 8001c32:	89fa      	ldrh	r2, [r7, #14]
 8001c34:	883b      	ldrh	r3, [r7, #0]
 8001c36:	429a      	cmp	r2, r3
 8001c38:	d3f3      	bcc.n	8001c22 <ili9325_DrawHLine+0x3a>
  }  

  LCD_IO_WriteMultipleData((uint8_t*)&ArrayRGB[0], Length * 2);
 8001c3a:	883b      	ldrh	r3, [r7, #0]
 8001c3c:	005b      	lsls	r3, r3, #1
 8001c3e:	4619      	mov	r1, r3
 8001c40:	4803      	ldr	r0, [pc, #12]	; (8001c50 <ili9325_DrawHLine+0x68>)
 8001c42:	f000 fb0d 	bl	8002260 <LCD_IO_WriteMultipleData>
}
 8001c46:	bf00      	nop
 8001c48:	3714      	adds	r7, #20
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bd90      	pop	{r4, r7, pc}
 8001c4e:	bf00      	nop
 8001c50:	20000498 	.word	0x20000498

08001c54 <ili9325_DrawVLine>:
  * @param  Ypos:     specifies the Y position.
  * @param  Length:   specifies the Line length.  
  * @retval None
  */
void ili9325_DrawVLine(uint16_t RGBCode, uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8001c54:	b590      	push	{r4, r7, lr}
 8001c56:	b085      	sub	sp, #20
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	4604      	mov	r4, r0
 8001c5c:	4608      	mov	r0, r1
 8001c5e:	4611      	mov	r1, r2
 8001c60:	461a      	mov	r2, r3
 8001c62:	4623      	mov	r3, r4
 8001c64:	80fb      	strh	r3, [r7, #6]
 8001c66:	4603      	mov	r3, r0
 8001c68:	80bb      	strh	r3, [r7, #4]
 8001c6a:	460b      	mov	r3, r1
 8001c6c:	807b      	strh	r3, [r7, #2]
 8001c6e:	4613      	mov	r3, r2
 8001c70:	803b      	strh	r3, [r7, #0]
  uint16_t counter = 0;
 8001c72:	2300      	movs	r3, #0
 8001c74:	81fb      	strh	r3, [r7, #14]

  /* set GRAM write direction and BGR = 1 */
  /* I/D=00 (Horizontal : increment, Vertical : decrement) */
  /* AM=1 (address is updated in vertical writing direction) */
  ili9325_WriteReg(LCD_REG_3, 0x1010);
 8001c76:	f241 0110 	movw	r1, #4112	; 0x1010
 8001c7a:	2003      	movs	r0, #3
 8001c7c:	f7ff ff5a 	bl	8001b34 <ili9325_WriteReg>
  
  /* Set Cursor */
  ili9325_SetCursor(Xpos, Ypos);
 8001c80:	887a      	ldrh	r2, [r7, #2]
 8001c82:	88bb      	ldrh	r3, [r7, #4]
 8001c84:	4611      	mov	r1, r2
 8001c86:	4618      	mov	r0, r3
 8001c88:	f7ff ff09 	bl	8001a9e <ili9325_SetCursor>
  
  /* Prepare to write GRAM */
  LCD_IO_WriteReg(LCD_REG_34);
 8001c8c:	2022      	movs	r0, #34	; 0x22
 8001c8e:	f000 fb05 	bl	800229c <LCD_IO_WriteReg>

  /* Fill a complete vertical line */
  for(counter = 0; counter < Length; counter++)
 8001c92:	2300      	movs	r3, #0
 8001c94:	81fb      	strh	r3, [r7, #14]
 8001c96:	e007      	b.n	8001ca8 <ili9325_DrawVLine+0x54>
  {
    ArrayRGB[counter] = RGBCode;
 8001c98:	89fb      	ldrh	r3, [r7, #14]
 8001c9a:	490d      	ldr	r1, [pc, #52]	; (8001cd0 <ili9325_DrawVLine+0x7c>)
 8001c9c:	88fa      	ldrh	r2, [r7, #6]
 8001c9e:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
  for(counter = 0; counter < Length; counter++)
 8001ca2:	89fb      	ldrh	r3, [r7, #14]
 8001ca4:	3301      	adds	r3, #1
 8001ca6:	81fb      	strh	r3, [r7, #14]
 8001ca8:	89fa      	ldrh	r2, [r7, #14]
 8001caa:	883b      	ldrh	r3, [r7, #0]
 8001cac:	429a      	cmp	r2, r3
 8001cae:	d3f3      	bcc.n	8001c98 <ili9325_DrawVLine+0x44>
  }
  
  /* Write 16-bit GRAM Reg */
  LCD_IO_WriteMultipleData((uint8_t*)&ArrayRGB[0], Length * 2);
 8001cb0:	883b      	ldrh	r3, [r7, #0]
 8001cb2:	005b      	lsls	r3, r3, #1
 8001cb4:	4619      	mov	r1, r3
 8001cb6:	4806      	ldr	r0, [pc, #24]	; (8001cd0 <ili9325_DrawVLine+0x7c>)
 8001cb8:	f000 fad2 	bl	8002260 <LCD_IO_WriteMultipleData>
  
  /* set GRAM write direction and BGR = 1 */
  /* I/D=00 (Horizontal : increment, Vertical : decrement) */
  /* AM=1 (address is updated in vertical writing direction) */
  ili9325_WriteReg(LCD_REG_3, 0x1018);  
 8001cbc:	f241 0118 	movw	r1, #4120	; 0x1018
 8001cc0:	2003      	movs	r0, #3
 8001cc2:	f7ff ff37 	bl	8001b34 <ili9325_WriteReg>
}
 8001cc6:	bf00      	nop
 8001cc8:	3714      	adds	r7, #20
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bd90      	pop	{r4, r7, pc}
 8001cce:	bf00      	nop
 8001cd0:	20000498 	.word	0x20000498

08001cd4 <ili9325_DrawBitmap>:
  * @param  Xpos: Bmp X position in the LCD
  * @param  Ypos: Bmp Y position in the LCD    
  * @retval None
  */
void ili9325_DrawBitmap(uint16_t Xpos, uint16_t Ypos, uint8_t *pbmp)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b084      	sub	sp, #16
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	4603      	mov	r3, r0
 8001cdc:	603a      	str	r2, [r7, #0]
 8001cde:	80fb      	strh	r3, [r7, #6]
 8001ce0:	460b      	mov	r3, r1
 8001ce2:	80bb      	strh	r3, [r7, #4]
  uint32_t index = 0, size = 0;
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	60fb      	str	r3, [r7, #12]
 8001ce8:	2300      	movs	r3, #0
 8001cea:	60bb      	str	r3, [r7, #8]
  /* Read bitmap size */
  size = *(volatile uint16_t *) (pbmp + 2);
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	3302      	adds	r3, #2
 8001cf0:	881b      	ldrh	r3, [r3, #0]
 8001cf2:	b29b      	uxth	r3, r3
 8001cf4:	60bb      	str	r3, [r7, #8]
  size |= (*(volatile uint16_t *) (pbmp + 4)) << 16;
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	3304      	adds	r3, #4
 8001cfa:	881b      	ldrh	r3, [r3, #0]
 8001cfc:	b29b      	uxth	r3, r3
 8001cfe:	041b      	lsls	r3, r3, #16
 8001d00:	461a      	mov	r2, r3
 8001d02:	68bb      	ldr	r3, [r7, #8]
 8001d04:	4313      	orrs	r3, r2
 8001d06:	60bb      	str	r3, [r7, #8]
  /* Get bitmap data address offset */
  index = *(volatile uint16_t *) (pbmp + 10);
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	330a      	adds	r3, #10
 8001d0c:	881b      	ldrh	r3, [r3, #0]
 8001d0e:	b29b      	uxth	r3, r3
 8001d10:	60fb      	str	r3, [r7, #12]
  index |= (*(volatile uint16_t *) (pbmp + 12)) << 16;
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	330c      	adds	r3, #12
 8001d16:	881b      	ldrh	r3, [r3, #0]
 8001d18:	b29b      	uxth	r3, r3
 8001d1a:	041b      	lsls	r3, r3, #16
 8001d1c:	461a      	mov	r2, r3
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	4313      	orrs	r3, r2
 8001d22:	60fb      	str	r3, [r7, #12]
  size = (size - index)/2;
 8001d24:	68ba      	ldr	r2, [r7, #8]
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	1ad3      	subs	r3, r2, r3
 8001d2a:	085b      	lsrs	r3, r3, #1
 8001d2c:	60bb      	str	r3, [r7, #8]
  pbmp += index;
 8001d2e:	683a      	ldr	r2, [r7, #0]
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	4413      	add	r3, r2
 8001d34:	603b      	str	r3, [r7, #0]
  /* Set GRAM write direction and BGR = 1 */
  /* I/D=00 (Horizontal : decrement, Vertical : decrement) */
  /* AM=1 (address is updated in vertical writing direction) */
  ili9325_WriteReg(LCD_REG_3, 0x1008);
 8001d36:	f241 0108 	movw	r1, #4104	; 0x1008
 8001d3a:	2003      	movs	r0, #3
 8001d3c:	f7ff fefa 	bl	8001b34 <ili9325_WriteReg>

  /* Set Cursor */
  ili9325_SetCursor(Xpos, Ypos);  
 8001d40:	88ba      	ldrh	r2, [r7, #4]
 8001d42:	88fb      	ldrh	r3, [r7, #6]
 8001d44:	4611      	mov	r1, r2
 8001d46:	4618      	mov	r0, r3
 8001d48:	f7ff fea9 	bl	8001a9e <ili9325_SetCursor>
  
  /* Prepare to write GRAM */
  LCD_IO_WriteReg(LCD_REG_34);
 8001d4c:	2022      	movs	r0, #34	; 0x22
 8001d4e:	f000 faa5 	bl	800229c <LCD_IO_WriteReg>
 
  LCD_IO_WriteMultipleData((uint8_t*)pbmp, size*2);
 8001d52:	68bb      	ldr	r3, [r7, #8]
 8001d54:	005b      	lsls	r3, r3, #1
 8001d56:	4619      	mov	r1, r3
 8001d58:	6838      	ldr	r0, [r7, #0]
 8001d5a:	f000 fa81 	bl	8002260 <LCD_IO_WriteMultipleData>
 
  /* Set GRAM write direction and BGR = 1 */
  /* I/D = 01 (Horizontal : increment, Vertical : decrement) */
  /* AM = 1 (address is updated in vertical writing direction) */
  ili9325_WriteReg(LCD_REG_3, 0x1018);
 8001d5e:	f241 0118 	movw	r1, #4120	; 0x1018
 8001d62:	2003      	movs	r0, #3
 8001d64:	f7ff fee6 	bl	8001b34 <ili9325_WriteReg>
}
 8001d68:	bf00      	nop
 8001d6a:	3710      	adds	r7, #16
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	bd80      	pop	{r7, pc}

08001d70 <ili9325_DrawRGBImage>:
  * @param  Xsize: Image X size in the LCD
  * @param  Ysize: Image Y size in the LCD
  * @retval None
  */
void ili9325_DrawRGBImage(uint16_t Xpos, uint16_t Ypos, uint16_t Xsize, uint16_t Ysize, uint8_t *pdata)
{
 8001d70:	b590      	push	{r4, r7, lr}
 8001d72:	b085      	sub	sp, #20
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	4604      	mov	r4, r0
 8001d78:	4608      	mov	r0, r1
 8001d7a:	4611      	mov	r1, r2
 8001d7c:	461a      	mov	r2, r3
 8001d7e:	4623      	mov	r3, r4
 8001d80:	80fb      	strh	r3, [r7, #6]
 8001d82:	4603      	mov	r3, r0
 8001d84:	80bb      	strh	r3, [r7, #4]
 8001d86:	460b      	mov	r3, r1
 8001d88:	807b      	strh	r3, [r7, #2]
 8001d8a:	4613      	mov	r3, r2
 8001d8c:	803b      	strh	r3, [r7, #0]
  uint32_t size = 0;
 8001d8e:	2300      	movs	r3, #0
 8001d90:	60fb      	str	r3, [r7, #12]

  size = (Xsize * Ysize);
 8001d92:	887b      	ldrh	r3, [r7, #2]
 8001d94:	883a      	ldrh	r2, [r7, #0]
 8001d96:	fb02 f303 	mul.w	r3, r2, r3
 8001d9a:	60fb      	str	r3, [r7, #12]

  /* Set Cursor */
  ili9325_SetCursor(Xpos, Ypos);  
 8001d9c:	88ba      	ldrh	r2, [r7, #4]
 8001d9e:	88fb      	ldrh	r3, [r7, #6]
 8001da0:	4611      	mov	r1, r2
 8001da2:	4618      	mov	r0, r3
 8001da4:	f7ff fe7b 	bl	8001a9e <ili9325_SetCursor>
  
  /* Prepare to write GRAM */
  LCD_IO_WriteReg(LCD_REG_34);
 8001da8:	2022      	movs	r0, #34	; 0x22
 8001daa:	f000 fa77 	bl	800229c <LCD_IO_WriteReg>
 
  LCD_IO_WriteMultipleData((uint8_t*)pdata, size*2);
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	005b      	lsls	r3, r3, #1
 8001db2:	4619      	mov	r1, r3
 8001db4:	6a38      	ldr	r0, [r7, #32]
 8001db6:	f000 fa53 	bl	8002260 <LCD_IO_WriteMultipleData>
}
 8001dba:	bf00      	nop
 8001dbc:	3714      	adds	r7, #20
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bd90      	pop	{r4, r7, pc}
	...

08001dc4 <BSP_LED_Init>:
  *            @arg  LED2
  *            @arg  LED3
  *            @arg  LED4
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b08c      	sub	sp, #48	; 0x30
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	4603      	mov	r3, r0
 8001dcc:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable the GPIO_LED clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 8001dce:	79fb      	ldrb	r3, [r7, #7]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d10e      	bne.n	8001df2 <BSP_LED_Init+0x2e>
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	61bb      	str	r3, [r7, #24]
 8001dd8:	4b2d      	ldr	r3, [pc, #180]	; (8001e90 <BSP_LED_Init+0xcc>)
 8001dda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ddc:	4a2c      	ldr	r2, [pc, #176]	; (8001e90 <BSP_LED_Init+0xcc>)
 8001dde:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001de2:	6313      	str	r3, [r2, #48]	; 0x30
 8001de4:	4b2a      	ldr	r3, [pc, #168]	; (8001e90 <BSP_LED_Init+0xcc>)
 8001de6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001de8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001dec:	61bb      	str	r3, [r7, #24]
 8001dee:	69bb      	ldr	r3, [r7, #24]
 8001df0:	e034      	b.n	8001e5c <BSP_LED_Init+0x98>
 8001df2:	79fb      	ldrb	r3, [r7, #7]
 8001df4:	2b01      	cmp	r3, #1
 8001df6:	d10e      	bne.n	8001e16 <BSP_LED_Init+0x52>
 8001df8:	2300      	movs	r3, #0
 8001dfa:	617b      	str	r3, [r7, #20]
 8001dfc:	4b24      	ldr	r3, [pc, #144]	; (8001e90 <BSP_LED_Init+0xcc>)
 8001dfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e00:	4a23      	ldr	r2, [pc, #140]	; (8001e90 <BSP_LED_Init+0xcc>)
 8001e02:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001e06:	6313      	str	r3, [r2, #48]	; 0x30
 8001e08:	4b21      	ldr	r3, [pc, #132]	; (8001e90 <BSP_LED_Init+0xcc>)
 8001e0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e10:	617b      	str	r3, [r7, #20]
 8001e12:	697b      	ldr	r3, [r7, #20]
 8001e14:	e022      	b.n	8001e5c <BSP_LED_Init+0x98>
 8001e16:	79fb      	ldrb	r3, [r7, #7]
 8001e18:	2b02      	cmp	r3, #2
 8001e1a:	d10e      	bne.n	8001e3a <BSP_LED_Init+0x76>
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	613b      	str	r3, [r7, #16]
 8001e20:	4b1b      	ldr	r3, [pc, #108]	; (8001e90 <BSP_LED_Init+0xcc>)
 8001e22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e24:	4a1a      	ldr	r2, [pc, #104]	; (8001e90 <BSP_LED_Init+0xcc>)
 8001e26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e2a:	6313      	str	r3, [r2, #48]	; 0x30
 8001e2c:	4b18      	ldr	r3, [pc, #96]	; (8001e90 <BSP_LED_Init+0xcc>)
 8001e2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e34:	613b      	str	r3, [r7, #16]
 8001e36:	693b      	ldr	r3, [r7, #16]
 8001e38:	e010      	b.n	8001e5c <BSP_LED_Init+0x98>
 8001e3a:	79fb      	ldrb	r3, [r7, #7]
 8001e3c:	2b03      	cmp	r3, #3
 8001e3e:	d10d      	bne.n	8001e5c <BSP_LED_Init+0x98>
 8001e40:	2300      	movs	r3, #0
 8001e42:	60fb      	str	r3, [r7, #12]
 8001e44:	4b12      	ldr	r3, [pc, #72]	; (8001e90 <BSP_LED_Init+0xcc>)
 8001e46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e48:	4a11      	ldr	r2, [pc, #68]	; (8001e90 <BSP_LED_Init+0xcc>)
 8001e4a:	f043 0304 	orr.w	r3, r3, #4
 8001e4e:	6313      	str	r3, [r2, #48]	; 0x30
 8001e50:	4b0f      	ldr	r3, [pc, #60]	; (8001e90 <BSP_LED_Init+0xcc>)
 8001e52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e54:	f003 0304 	and.w	r3, r3, #4
 8001e58:	60fb      	str	r3, [r7, #12]
 8001e5a:	68fb      	ldr	r3, [r7, #12]

  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 8001e5c:	79fb      	ldrb	r3, [r7, #7]
 8001e5e:	4a0d      	ldr	r2, [pc, #52]	; (8001e94 <BSP_LED_Init+0xd0>)
 8001e60:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001e64:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e66:	2301      	movs	r3, #1
 8001e68:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8001e6e:	2302      	movs	r3, #2
 8001e70:	62bb      	str	r3, [r7, #40]	; 0x28
  
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 8001e72:	79fb      	ldrb	r3, [r7, #7]
 8001e74:	4a08      	ldr	r2, [pc, #32]	; (8001e98 <BSP_LED_Init+0xd4>)
 8001e76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e7a:	f107 021c 	add.w	r2, r7, #28
 8001e7e:	4611      	mov	r1, r2
 8001e80:	4618      	mov	r0, r3
 8001e82:	f001 f967 	bl	8003154 <HAL_GPIO_Init>
}
 8001e86:	bf00      	nop
 8001e88:	3730      	adds	r7, #48	; 0x30
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bd80      	pop	{r7, pc}
 8001e8e:	bf00      	nop
 8001e90:	40023800 	.word	0x40023800
 8001e94:	0800a534 	.word	0x0800a534
 8001e98:	20000054 	.word	0x20000054

08001e9c <BSP_LED_On>:
  *            @arg  LED2
  *            @arg  LED3
  *            @arg  LED4
  */
void BSP_LED_On(Led_TypeDef Led)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b082      	sub	sp, #8
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET); 
 8001ea6:	79fb      	ldrb	r3, [r7, #7]
 8001ea8:	4a07      	ldr	r2, [pc, #28]	; (8001ec8 <BSP_LED_On+0x2c>)
 8001eaa:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001eae:	79fb      	ldrb	r3, [r7, #7]
 8001eb0:	4a06      	ldr	r2, [pc, #24]	; (8001ecc <BSP_LED_On+0x30>)
 8001eb2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001eb6:	2201      	movs	r2, #1
 8001eb8:	4619      	mov	r1, r3
 8001eba:	f001 faff 	bl	80034bc <HAL_GPIO_WritePin>
}
 8001ebe:	bf00      	nop
 8001ec0:	3708      	adds	r7, #8
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd80      	pop	{r7, pc}
 8001ec6:	bf00      	nop
 8001ec8:	20000054 	.word	0x20000054
 8001ecc:	0800a534 	.word	0x0800a534

08001ed0 <BSP_LED_Off>:
  *            @arg  LED2
  *            @arg  LED3
  *            @arg  LED4
  */
void BSP_LED_Off(Led_TypeDef Led)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b082      	sub	sp, #8
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 8001eda:	79fb      	ldrb	r3, [r7, #7]
 8001edc:	4a07      	ldr	r2, [pc, #28]	; (8001efc <BSP_LED_Off+0x2c>)
 8001ede:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001ee2:	79fb      	ldrb	r3, [r7, #7]
 8001ee4:	4a06      	ldr	r2, [pc, #24]	; (8001f00 <BSP_LED_Off+0x30>)
 8001ee6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001eea:	2200      	movs	r2, #0
 8001eec:	4619      	mov	r1, r3
 8001eee:	f001 fae5 	bl	80034bc <HAL_GPIO_WritePin>
}
 8001ef2:	bf00      	nop
 8001ef4:	3708      	adds	r7, #8
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd80      	pop	{r7, pc}
 8001efa:	bf00      	nop
 8001efc:	20000054 	.word	0x20000054
 8001f00:	0800a534 	.word	0x0800a534

08001f04 <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_GPIO: Button will be used as simple IO
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line 
  *                                    with interrupt generation capability  
  */
void BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef Button_Mode)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b08a      	sub	sp, #40	; 0x28
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	460a      	mov	r2, r1
 8001f0e:	71fb      	strb	r3, [r7, #7]
 8001f10:	4613      	mov	r3, r2
 8001f12:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef GPIO_InitStruct;
  
  /* Enable the BUTTON clock */
  BUTTONx_GPIO_CLK_ENABLE(Button);
 8001f14:	79fb      	ldrb	r3, [r7, #7]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d10e      	bne.n	8001f38 <BSP_PB_Init+0x34>
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	613b      	str	r3, [r7, #16]
 8001f1e:	4b3f      	ldr	r3, [pc, #252]	; (800201c <BSP_PB_Init+0x118>)
 8001f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f22:	4a3e      	ldr	r2, [pc, #248]	; (800201c <BSP_PB_Init+0x118>)
 8001f24:	f043 0301 	orr.w	r3, r3, #1
 8001f28:	6313      	str	r3, [r2, #48]	; 0x30
 8001f2a:	4b3c      	ldr	r3, [pc, #240]	; (800201c <BSP_PB_Init+0x118>)
 8001f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f2e:	f003 0301 	and.w	r3, r3, #1
 8001f32:	613b      	str	r3, [r7, #16]
 8001f34:	693b      	ldr	r3, [r7, #16]
 8001f36:	e022      	b.n	8001f7e <BSP_PB_Init+0x7a>
 8001f38:	79fb      	ldrb	r3, [r7, #7]
 8001f3a:	2b01      	cmp	r3, #1
 8001f3c:	d10e      	bne.n	8001f5c <BSP_PB_Init+0x58>
 8001f3e:	2300      	movs	r3, #0
 8001f40:	60fb      	str	r3, [r7, #12]
 8001f42:	4b36      	ldr	r3, [pc, #216]	; (800201c <BSP_PB_Init+0x118>)
 8001f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f46:	4a35      	ldr	r2, [pc, #212]	; (800201c <BSP_PB_Init+0x118>)
 8001f48:	f043 0304 	orr.w	r3, r3, #4
 8001f4c:	6313      	str	r3, [r2, #48]	; 0x30
 8001f4e:	4b33      	ldr	r3, [pc, #204]	; (800201c <BSP_PB_Init+0x118>)
 8001f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f52:	f003 0304 	and.w	r3, r3, #4
 8001f56:	60fb      	str	r3, [r7, #12]
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	e010      	b.n	8001f7e <BSP_PB_Init+0x7a>
 8001f5c:	79fb      	ldrb	r3, [r7, #7]
 8001f5e:	2b02      	cmp	r3, #2
 8001f60:	d10d      	bne.n	8001f7e <BSP_PB_Init+0x7a>
 8001f62:	2300      	movs	r3, #0
 8001f64:	60bb      	str	r3, [r7, #8]
 8001f66:	4b2d      	ldr	r3, [pc, #180]	; (800201c <BSP_PB_Init+0x118>)
 8001f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f6a:	4a2c      	ldr	r2, [pc, #176]	; (800201c <BSP_PB_Init+0x118>)
 8001f6c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001f70:	6313      	str	r3, [r2, #48]	; 0x30
 8001f72:	4b2a      	ldr	r3, [pc, #168]	; (800201c <BSP_PB_Init+0x118>)
 8001f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f7a:	60bb      	str	r3, [r7, #8]
 8001f7c:	68bb      	ldr	r3, [r7, #8]
  
  if(Button_Mode == BUTTON_MODE_GPIO)
 8001f7e:	79bb      	ldrb	r3, [r7, #6]
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d114      	bne.n	8001fae <BSP_PB_Init+0xaa>
  {
    /* Configure Button pin as input */
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 8001f84:	79fb      	ldrb	r3, [r7, #7]
 8001f86:	4a26      	ldr	r2, [pc, #152]	; (8002020 <BSP_PB_Init+0x11c>)
 8001f88:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001f8c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f8e:	2300      	movs	r3, #0
 8001f90:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f92:	2300      	movs	r3, #0
 8001f94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8001f96:	2302      	movs	r3, #2
 8001f98:	623b      	str	r3, [r7, #32]
    
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 8001f9a:	79fb      	ldrb	r3, [r7, #7]
 8001f9c:	4a21      	ldr	r2, [pc, #132]	; (8002024 <BSP_PB_Init+0x120>)
 8001f9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fa2:	f107 0214 	add.w	r2, r7, #20
 8001fa6:	4611      	mov	r1, r2
 8001fa8:	4618      	mov	r0, r3
 8001faa:	f001 f8d3 	bl	8003154 <HAL_GPIO_Init>
  }
  
  if(Button_Mode == BUTTON_MODE_EXTI)
 8001fae:	79bb      	ldrb	r3, [r7, #6]
 8001fb0:	2b01      	cmp	r3, #1
 8001fb2:	d12e      	bne.n	8002012 <BSP_PB_Init+0x10e>
  {
    /* Configure Button pin as input with External interrupt */
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 8001fb4:	79fb      	ldrb	r3, [r7, #7]
 8001fb6:	4a1a      	ldr	r2, [pc, #104]	; (8002020 <BSP_PB_Init+0x11c>)
 8001fb8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001fbc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8001fc2:	2302      	movs	r3, #2
 8001fc4:	623b      	str	r3, [r7, #32]
    
    if(Button != BUTTON_WAKEUP)
 8001fc6:	79fb      	ldrb	r3, [r7, #7]
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d003      	beq.n	8001fd4 <BSP_PB_Init+0xd0>
    {
      GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING; 
 8001fcc:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001fd0:	61bb      	str	r3, [r7, #24]
 8001fd2:	e002      	b.n	8001fda <BSP_PB_Init+0xd6>
    }
    else
    {
      GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001fd4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001fd8:	61bb      	str	r3, [r7, #24]
    }
    
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 8001fda:	79fb      	ldrb	r3, [r7, #7]
 8001fdc:	4a11      	ldr	r2, [pc, #68]	; (8002024 <BSP_PB_Init+0x120>)
 8001fde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fe2:	f107 0214 	add.w	r2, r7, #20
 8001fe6:	4611      	mov	r1, r2
 8001fe8:	4618      	mov	r0, r3
 8001fea:	f001 f8b3 	bl	8003154 <HAL_GPIO_Init>
    
    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x0);
 8001fee:	79fb      	ldrb	r3, [r7, #7]
 8001ff0:	4a0d      	ldr	r2, [pc, #52]	; (8002028 <BSP_PB_Init+0x124>)
 8001ff2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001ff6:	b25b      	sxtb	r3, r3
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	210f      	movs	r1, #15
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	f000 ff94 	bl	8002f2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 8002002:	79fb      	ldrb	r3, [r7, #7]
 8002004:	4a08      	ldr	r2, [pc, #32]	; (8002028 <BSP_PB_Init+0x124>)
 8002006:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800200a:	b25b      	sxtb	r3, r3
 800200c:	4618      	mov	r0, r3
 800200e:	f000 ffa8 	bl	8002f62 <HAL_NVIC_EnableIRQ>
  }
}
 8002012:	bf00      	nop
 8002014:	3728      	adds	r7, #40	; 0x28
 8002016:	46bd      	mov	sp, r7
 8002018:	bd80      	pop	{r7, pc}
 800201a:	bf00      	nop
 800201c:	40023800 	.word	0x40023800
 8002020:	0800a53c 	.word	0x0800a53c
 8002024:	20000064 	.word	0x20000064
 8002028:	0800a544 	.word	0x0800a544

0800202c <BSP_PB_GetState>:
  *            @arg BUTTON_DOWN: Joystick Down Push Button
  *            @arg BUTTON_SEL: Joystick Sel Push Button  
  * @retval The Button GPIO pin value
  */
uint32_t BSP_PB_GetState(Button_TypeDef Button)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b082      	sub	sp, #8
 8002030:	af00      	add	r7, sp, #0
 8002032:	4603      	mov	r3, r0
 8002034:	71fb      	strb	r3, [r7, #7]
  return HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]);
 8002036:	79fb      	ldrb	r3, [r7, #7]
 8002038:	4a07      	ldr	r2, [pc, #28]	; (8002058 <BSP_PB_GetState+0x2c>)
 800203a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800203e:	79fb      	ldrb	r3, [r7, #7]
 8002040:	4906      	ldr	r1, [pc, #24]	; (800205c <BSP_PB_GetState+0x30>)
 8002042:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8002046:	4619      	mov	r1, r3
 8002048:	4610      	mov	r0, r2
 800204a:	f001 fa1f 	bl	800348c <HAL_GPIO_ReadPin>
 800204e:	4603      	mov	r3, r0
}
 8002050:	4618      	mov	r0, r3
 8002052:	3708      	adds	r7, #8
 8002054:	46bd      	mov	sp, r7
 8002056:	bd80      	pop	{r7, pc}
 8002058:	20000064 	.word	0x20000064
 800205c:	0800a53c 	.word	0x0800a53c

08002060 <FSMC_BANK3_MspInit>:
/*************************** FSMC Routines ************************************/
/**
  * @brief  Initializes FSMC_BANK3 MSP.
  */
static void FSMC_BANK3_MspInit(void)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b08a      	sub	sp, #40	; 0x28
 8002064:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_Init_Structure;
    
  /* Enable FSMC clock */
  __FSMC_CLK_ENABLE();
 8002066:	2300      	movs	r3, #0
 8002068:	613b      	str	r3, [r7, #16]
 800206a:	4b3a      	ldr	r3, [pc, #232]	; (8002154 <FSMC_BANK3_MspInit+0xf4>)
 800206c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800206e:	4a39      	ldr	r2, [pc, #228]	; (8002154 <FSMC_BANK3_MspInit+0xf4>)
 8002070:	f043 0301 	orr.w	r3, r3, #1
 8002074:	6393      	str	r3, [r2, #56]	; 0x38
 8002076:	4b37      	ldr	r3, [pc, #220]	; (8002154 <FSMC_BANK3_MspInit+0xf4>)
 8002078:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800207a:	f003 0301 	and.w	r3, r3, #1
 800207e:	613b      	str	r3, [r7, #16]
 8002080:	693b      	ldr	r3, [r7, #16]

  /* Enable GPIOs clock */
  __GPIOD_CLK_ENABLE();
 8002082:	2300      	movs	r3, #0
 8002084:	60fb      	str	r3, [r7, #12]
 8002086:	4b33      	ldr	r3, [pc, #204]	; (8002154 <FSMC_BANK3_MspInit+0xf4>)
 8002088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800208a:	4a32      	ldr	r2, [pc, #200]	; (8002154 <FSMC_BANK3_MspInit+0xf4>)
 800208c:	f043 0308 	orr.w	r3, r3, #8
 8002090:	6313      	str	r3, [r2, #48]	; 0x30
 8002092:	4b30      	ldr	r3, [pc, #192]	; (8002154 <FSMC_BANK3_MspInit+0xf4>)
 8002094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002096:	f003 0308 	and.w	r3, r3, #8
 800209a:	60fb      	str	r3, [r7, #12]
 800209c:	68fb      	ldr	r3, [r7, #12]
  __GPIOE_CLK_ENABLE();
 800209e:	2300      	movs	r3, #0
 80020a0:	60bb      	str	r3, [r7, #8]
 80020a2:	4b2c      	ldr	r3, [pc, #176]	; (8002154 <FSMC_BANK3_MspInit+0xf4>)
 80020a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020a6:	4a2b      	ldr	r2, [pc, #172]	; (8002154 <FSMC_BANK3_MspInit+0xf4>)
 80020a8:	f043 0310 	orr.w	r3, r3, #16
 80020ac:	6313      	str	r3, [r2, #48]	; 0x30
 80020ae:	4b29      	ldr	r3, [pc, #164]	; (8002154 <FSMC_BANK3_MspInit+0xf4>)
 80020b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020b2:	f003 0310 	and.w	r3, r3, #16
 80020b6:	60bb      	str	r3, [r7, #8]
 80020b8:	68bb      	ldr	r3, [r7, #8]
  __GPIOF_CLK_ENABLE();
 80020ba:	2300      	movs	r3, #0
 80020bc:	607b      	str	r3, [r7, #4]
 80020be:	4b25      	ldr	r3, [pc, #148]	; (8002154 <FSMC_BANK3_MspInit+0xf4>)
 80020c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020c2:	4a24      	ldr	r2, [pc, #144]	; (8002154 <FSMC_BANK3_MspInit+0xf4>)
 80020c4:	f043 0320 	orr.w	r3, r3, #32
 80020c8:	6313      	str	r3, [r2, #48]	; 0x30
 80020ca:	4b22      	ldr	r3, [pc, #136]	; (8002154 <FSMC_BANK3_MspInit+0xf4>)
 80020cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ce:	f003 0320 	and.w	r3, r3, #32
 80020d2:	607b      	str	r3, [r7, #4]
 80020d4:	687b      	ldr	r3, [r7, #4]
  __GPIOG_CLK_ENABLE();
 80020d6:	2300      	movs	r3, #0
 80020d8:	603b      	str	r3, [r7, #0]
 80020da:	4b1e      	ldr	r3, [pc, #120]	; (8002154 <FSMC_BANK3_MspInit+0xf4>)
 80020dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020de:	4a1d      	ldr	r2, [pc, #116]	; (8002154 <FSMC_BANK3_MspInit+0xf4>)
 80020e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80020e4:	6313      	str	r3, [r2, #48]	; 0x30
 80020e6:	4b1b      	ldr	r3, [pc, #108]	; (8002154 <FSMC_BANK3_MspInit+0xf4>)
 80020e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020ee:	603b      	str	r3, [r7, #0]
 80020f0:	683b      	ldr	r3, [r7, #0]
  
  /* Common GPIO configuration */
  GPIO_Init_Structure.Mode      = GPIO_MODE_AF_PP;
 80020f2:	2302      	movs	r3, #2
 80020f4:	61bb      	str	r3, [r7, #24]
  GPIO_Init_Structure.Pull      = GPIO_PULLUP;
 80020f6:	2301      	movs	r3, #1
 80020f8:	61fb      	str	r3, [r7, #28]
  GPIO_Init_Structure.Speed     = GPIO_SPEED_HIGH;
 80020fa:	2303      	movs	r3, #3
 80020fc:	623b      	str	r3, [r7, #32]
  GPIO_Init_Structure.Alternate = GPIO_AF12_FSMC;
 80020fe:	230c      	movs	r3, #12
 8002100:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* GPIOD configuration */
  GPIO_Init_Structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_8     |\
 8002102:	f64f 7333 	movw	r3, #65331	; 0xff33
 8002106:	617b      	str	r3, [r7, #20]
                              GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |\
                              GPIO_PIN_14 | GPIO_PIN_15;
   
  HAL_GPIO_Init(GPIOD, &GPIO_Init_Structure);
 8002108:	f107 0314 	add.w	r3, r7, #20
 800210c:	4619      	mov	r1, r3
 800210e:	4812      	ldr	r0, [pc, #72]	; (8002158 <FSMC_BANK3_MspInit+0xf8>)
 8002110:	f001 f820 	bl	8003154 <HAL_GPIO_Init>

  /* GPIOE configuration */  
  GPIO_Init_Structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_3| GPIO_PIN_4 | GPIO_PIN_7     |\
 8002114:	f64f 739b 	movw	r3, #65435	; 0xff9b
 8002118:	617b      	str	r3, [r7, #20]
                              GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 |\
                              GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &GPIO_Init_Structure);
 800211a:	f107 0314 	add.w	r3, r7, #20
 800211e:	4619      	mov	r1, r3
 8002120:	480e      	ldr	r0, [pc, #56]	; (800215c <FSMC_BANK3_MspInit+0xfc>)
 8002122:	f001 f817 	bl	8003154 <HAL_GPIO_Init>
  
  /* GPIOF configuration */  
  GPIO_Init_Structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4     |\
 8002126:	f24f 033f 	movw	r3, #61503	; 0xf03f
 800212a:	617b      	str	r3, [r7, #20]
                              GPIO_PIN_5 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &GPIO_Init_Structure);
 800212c:	f107 0314 	add.w	r3, r7, #20
 8002130:	4619      	mov	r1, r3
 8002132:	480b      	ldr	r0, [pc, #44]	; (8002160 <FSMC_BANK3_MspInit+0x100>)
 8002134:	f001 f80e 	bl	8003154 <HAL_GPIO_Init>
  
  /* GPIOG configuration */  
  GPIO_Init_Structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4     |\
 8002138:	f240 433f 	movw	r3, #1087	; 0x43f
 800213c:	617b      	str	r3, [r7, #20]
                              GPIO_PIN_5 | GPIO_PIN_10;
  
  HAL_GPIO_Init(GPIOG, &GPIO_Init_Structure);  
 800213e:	f107 0314 	add.w	r3, r7, #20
 8002142:	4619      	mov	r1, r3
 8002144:	4807      	ldr	r0, [pc, #28]	; (8002164 <FSMC_BANK3_MspInit+0x104>)
 8002146:	f001 f805 	bl	8003154 <HAL_GPIO_Init>
}
 800214a:	bf00      	nop
 800214c:	3728      	adds	r7, #40	; 0x28
 800214e:	46bd      	mov	sp, r7
 8002150:	bd80      	pop	{r7, pc}
 8002152:	bf00      	nop
 8002154:	40023800 	.word	0x40023800
 8002158:	40020c00 	.word	0x40020c00
 800215c:	40021000 	.word	0x40021000
 8002160:	40021400 	.word	0x40021400
 8002164:	40021800 	.word	0x40021800

08002168 <FSMC_BANK3_Init>:

/**
  * @brief  Initializes LCD IO.
  */
static void FSMC_BANK3_Init(void) 
{  
 8002168:	b580      	push	{r7, lr}
 800216a:	b09c      	sub	sp, #112	; 0x70
 800216c:	af00      	add	r7, sp, #0
  SRAM_HandleTypeDef hsram;
  FSMC_NORSRAM_TimingTypeDef SRAM_Timing;
  
  /*** Configure the SRAM Bank 3 ***/  
  /* Configure IPs */
  hsram.Instance  = FMC_NORSRAM_DEVICE;
 800216e:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 8002172:	623b      	str	r3, [r7, #32]
  hsram.Extended  = FMC_NORSRAM_EXTENDED_DEVICE;
 8002174:	4b1c      	ldr	r3, [pc, #112]	; (80021e8 <FSMC_BANK3_Init+0x80>)
 8002176:	627b      	str	r3, [r7, #36]	; 0x24

  SRAM_Timing.AddressSetupTime      = 5;
 8002178:	2305      	movs	r3, #5
 800217a:	607b      	str	r3, [r7, #4]
  SRAM_Timing.AddressHoldTime       = 1;
 800217c:	2301      	movs	r3, #1
 800217e:	60bb      	str	r3, [r7, #8]
  SRAM_Timing.DataSetupTime         = 9;
 8002180:	2309      	movs	r3, #9
 8002182:	60fb      	str	r3, [r7, #12]
  SRAM_Timing.BusTurnAroundDuration = 0;
 8002184:	2300      	movs	r3, #0
 8002186:	613b      	str	r3, [r7, #16]
  SRAM_Timing.CLKDivision           = 2;
 8002188:	2302      	movs	r3, #2
 800218a:	617b      	str	r3, [r7, #20]
  SRAM_Timing.DataLatency           = 2;
 800218c:	2302      	movs	r3, #2
 800218e:	61bb      	str	r3, [r7, #24]
  SRAM_Timing.AccessMode            = FSMC_ACCESS_MODE_A;
 8002190:	2300      	movs	r3, #0
 8002192:	61fb      	str	r3, [r7, #28]
  
  hsram.Init.NSBank             = FSMC_NORSRAM_BANK3;
 8002194:	2304      	movs	r3, #4
 8002196:	62bb      	str	r3, [r7, #40]	; 0x28
  hsram.Init.DataAddressMux     = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8002198:	2300      	movs	r3, #0
 800219a:	62fb      	str	r3, [r7, #44]	; 0x2c
  hsram.Init.MemoryType         = FSMC_MEMORY_TYPE_SRAM;
 800219c:	2300      	movs	r3, #0
 800219e:	633b      	str	r3, [r7, #48]	; 0x30
  hsram.Init.MemoryDataWidth    = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 80021a0:	2310      	movs	r3, #16
 80021a2:	637b      	str	r3, [r7, #52]	; 0x34
  hsram.Init.BurstAccessMode    = FSMC_BURST_ACCESS_MODE_DISABLE;
 80021a4:	2300      	movs	r3, #0
 80021a6:	63bb      	str	r3, [r7, #56]	; 0x38
  hsram.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 80021a8:	2300      	movs	r3, #0
 80021aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  hsram.Init.WrapMode           = FSMC_WRAP_MODE_DISABLE;
 80021ac:	2300      	movs	r3, #0
 80021ae:	643b      	str	r3, [r7, #64]	; 0x40
  hsram.Init.WaitSignalActive   = FSMC_WAIT_TIMING_BEFORE_WS;
 80021b0:	2300      	movs	r3, #0
 80021b2:	647b      	str	r3, [r7, #68]	; 0x44
  hsram.Init.WriteOperation     = FSMC_WRITE_OPERATION_ENABLE;
 80021b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80021b8:	64bb      	str	r3, [r7, #72]	; 0x48
  hsram.Init.WaitSignal         = FSMC_WAIT_SIGNAL_DISABLE;
 80021ba:	2300      	movs	r3, #0
 80021bc:	64fb      	str	r3, [r7, #76]	; 0x4c
  hsram.Init.ExtendedMode       = FSMC_EXTENDED_MODE_DISABLE;
 80021be:	2300      	movs	r3, #0
 80021c0:	653b      	str	r3, [r7, #80]	; 0x50
  hsram.Init.AsynchronousWait   = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 80021c2:	2300      	movs	r3, #0
 80021c4:	657b      	str	r3, [r7, #84]	; 0x54
  hsram.Init.WriteBurst         = FSMC_WRITE_BURST_DISABLE;
 80021c6:	2300      	movs	r3, #0
 80021c8:	65bb      	str	r3, [r7, #88]	; 0x58
  hsram.Init.PageSize           = FSMC_PAGE_SIZE_NONE;
 80021ca:	2300      	movs	r3, #0
 80021cc:	667b      	str	r3, [r7, #100]	; 0x64

  /* Initialize the SRAM controller */
  FSMC_BANK3_MspInit();
 80021ce:	f7ff ff47 	bl	8002060 <FSMC_BANK3_MspInit>
  HAL_SRAM_Init(&hsram, &SRAM_Timing, &SRAM_Timing);   
 80021d2:	1d3a      	adds	r2, r7, #4
 80021d4:	1d39      	adds	r1, r7, #4
 80021d6:	f107 0320 	add.w	r3, r7, #32
 80021da:	4618      	mov	r0, r3
 80021dc:	f003 fafe 	bl	80057dc <HAL_SRAM_Init>
}
 80021e0:	bf00      	nop
 80021e2:	3770      	adds	r7, #112	; 0x70
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bd80      	pop	{r7, pc}
 80021e8:	a0000104 	.word	0xa0000104

080021ec <FSMC_BANK3_WriteData>:
/**
  * @brief  Writes register value.
  * @param  Data: Data to be written 
  */
static void FSMC_BANK3_WriteData(uint16_t Data) 
{
 80021ec:	b480      	push	{r7}
 80021ee:	b083      	sub	sp, #12
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	4603      	mov	r3, r0
 80021f4:	80fb      	strh	r3, [r7, #6]
  /* Write 16-bit Reg */
  FMC_BANK3->RAM = Data;
 80021f6:	f04f 42d0 	mov.w	r2, #1744830464	; 0x68000000
 80021fa:	88fb      	ldrh	r3, [r7, #6]
 80021fc:	8053      	strh	r3, [r2, #2]
}
 80021fe:	bf00      	nop
 8002200:	370c      	adds	r7, #12
 8002202:	46bd      	mov	sp, r7
 8002204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002208:	4770      	bx	lr

0800220a <FSMC_BANK3_WriteReg>:
/**
  * @brief  Writes register address.
  * @param  Reg: Register to be written
  */
static void FSMC_BANK3_WriteReg(uint8_t Reg) 
{
 800220a:	b480      	push	{r7}
 800220c:	b083      	sub	sp, #12
 800220e:	af00      	add	r7, sp, #0
 8002210:	4603      	mov	r3, r0
 8002212:	71fb      	strb	r3, [r7, #7]
  /* Write 16-bit Index, then write register */
  FMC_BANK3->REG = Reg;
 8002214:	f04f 43d0 	mov.w	r3, #1744830464	; 0x68000000
 8002218:	79fa      	ldrb	r2, [r7, #7]
 800221a:	b292      	uxth	r2, r2
 800221c:	801a      	strh	r2, [r3, #0]
}
 800221e:	bf00      	nop
 8002220:	370c      	adds	r7, #12
 8002222:	46bd      	mov	sp, r7
 8002224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002228:	4770      	bx	lr

0800222a <FSMC_BANK3_ReadData>:
/**
  * @brief  Reads register value.
  * @retval Read value
  */
static uint16_t FSMC_BANK3_ReadData(void) 
{
 800222a:	b480      	push	{r7}
 800222c:	af00      	add	r7, sp, #0
  return FMC_BANK3->RAM;
 800222e:	f04f 43d0 	mov.w	r3, #1744830464	; 0x68000000
 8002232:	885b      	ldrh	r3, [r3, #2]
 8002234:	b29b      	uxth	r3, r3
}
 8002236:	4618      	mov	r0, r3
 8002238:	46bd      	mov	sp, r7
 800223a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223e:	4770      	bx	lr

08002240 <LCD_IO_Init>:

/**
  * @brief  Initializes LCD low level.
  */
void LCD_IO_Init(void) 
{
 8002240:	b580      	push	{r7, lr}
 8002242:	af00      	add	r7, sp, #0
  if(Is_LCD_IO_Initialized == 0)
 8002244:	4b05      	ldr	r3, [pc, #20]	; (800225c <LCD_IO_Init+0x1c>)
 8002246:	781b      	ldrb	r3, [r3, #0]
 8002248:	2b00      	cmp	r3, #0
 800224a:	d104      	bne.n	8002256 <LCD_IO_Init+0x16>
  {
    Is_LCD_IO_Initialized = 1; 
 800224c:	4b03      	ldr	r3, [pc, #12]	; (800225c <LCD_IO_Init+0x1c>)
 800224e:	2201      	movs	r2, #1
 8002250:	701a      	strb	r2, [r3, #0]
    FSMC_BANK3_Init();
 8002252:	f7ff ff89 	bl	8002168 <FSMC_BANK3_Init>
  }
}
 8002256:	bf00      	nop
 8002258:	bd80      	pop	{r7, pc}
 800225a:	bf00      	nop
 800225c:	20000718 	.word	0x20000718

08002260 <LCD_IO_WriteMultipleData>:
  * @brief  Write register value.
  * @param  pData Pointer on the register value
  * @param  Size Size of byte to transmit to the register
  */
void LCD_IO_WriteMultipleData(uint8_t *pData, uint32_t Size)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b084      	sub	sp, #16
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
 8002268:	6039      	str	r1, [r7, #0]
  uint32_t counter;
  uint16_t *ptr = (uint16_t *) pData;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	60bb      	str	r3, [r7, #8]
  
  for (counter = 0; counter < Size; counter+=2)
 800226e:	2300      	movs	r3, #0
 8002270:	60fb      	str	r3, [r7, #12]
 8002272:	e00a      	b.n	800228a <LCD_IO_WriteMultipleData+0x2a>
  {  
    /* Write 16-bit Reg */
    FSMC_BANK3_WriteData(*ptr);
 8002274:	68bb      	ldr	r3, [r7, #8]
 8002276:	881b      	ldrh	r3, [r3, #0]
 8002278:	4618      	mov	r0, r3
 800227a:	f7ff ffb7 	bl	80021ec <FSMC_BANK3_WriteData>
    ptr++;
 800227e:	68bb      	ldr	r3, [r7, #8]
 8002280:	3302      	adds	r3, #2
 8002282:	60bb      	str	r3, [r7, #8]
  for (counter = 0; counter < Size; counter+=2)
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	3302      	adds	r3, #2
 8002288:	60fb      	str	r3, [r7, #12]
 800228a:	68fa      	ldr	r2, [r7, #12]
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	429a      	cmp	r2, r3
 8002290:	d3f0      	bcc.n	8002274 <LCD_IO_WriteMultipleData+0x14>
  }
}
 8002292:	bf00      	nop
 8002294:	bf00      	nop
 8002296:	3710      	adds	r7, #16
 8002298:	46bd      	mov	sp, r7
 800229a:	bd80      	pop	{r7, pc}

0800229c <LCD_IO_WriteReg>:
/**
  * @brief  Writes register on LCD register.
  * @param  Reg: Register to be written
  */
void LCD_IO_WriteReg(uint8_t Reg) 
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b082      	sub	sp, #8
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	4603      	mov	r3, r0
 80022a4:	71fb      	strb	r3, [r7, #7]
  /* Write 16-bit Index, then Write Reg */
  FSMC_BANK3_WriteReg(Reg);
 80022a6:	79fb      	ldrb	r3, [r7, #7]
 80022a8:	4618      	mov	r0, r3
 80022aa:	f7ff ffae 	bl	800220a <FSMC_BANK3_WriteReg>
}
 80022ae:	bf00      	nop
 80022b0:	3708      	adds	r7, #8
 80022b2:	46bd      	mov	sp, r7
 80022b4:	bd80      	pop	{r7, pc}

080022b6 <LCD_IO_ReadData>:
  * @brief  Reads data from LCD data register.
  * @param  Reg: Register to be read
  * @retval Read data.
  */
uint16_t LCD_IO_ReadData(uint16_t Reg)
{
 80022b6:	b580      	push	{r7, lr}
 80022b8:	b082      	sub	sp, #8
 80022ba:	af00      	add	r7, sp, #0
 80022bc:	4603      	mov	r3, r0
 80022be:	80fb      	strh	r3, [r7, #6]
  FSMC_BANK3_WriteReg(Reg);
 80022c0:	88fb      	ldrh	r3, [r7, #6]
 80022c2:	b2db      	uxtb	r3, r3
 80022c4:	4618      	mov	r0, r3
 80022c6:	f7ff ffa0 	bl	800220a <FSMC_BANK3_WriteReg>
  
  /* Read 16-bit Reg */  
  return FSMC_BANK3_ReadData();
 80022ca:	f7ff ffae 	bl	800222a <FSMC_BANK3_ReadData>
 80022ce:	4603      	mov	r3, r0
}
 80022d0:	4618      	mov	r0, r3
 80022d2:	3708      	adds	r7, #8
 80022d4:	46bd      	mov	sp, r7
 80022d6:	bd80      	pop	{r7, pc}

080022d8 <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{ 
 80022d8:	b580      	push	{r7, lr}
 80022da:	b082      	sub	sp, #8
 80022dc:	af00      	add	r7, sp, #0
  uint8_t ret = LCD_ERROR;
 80022de:	2301      	movs	r3, #1
 80022e0:	71fb      	strb	r3, [r7, #7]
  
  /* Default value for draw propriety */
  DrawProp.BackColor = 0xFFFF;
 80022e2:	4b12      	ldr	r3, [pc, #72]	; (800232c <BSP_LCD_Init+0x54>)
 80022e4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80022e8:	605a      	str	r2, [r3, #4]
  DrawProp.pFont     = &Font24;
 80022ea:	4b10      	ldr	r3, [pc, #64]	; (800232c <BSP_LCD_Init+0x54>)
 80022ec:	4a10      	ldr	r2, [pc, #64]	; (8002330 <BSP_LCD_Init+0x58>)
 80022ee:	609a      	str	r2, [r3, #8]
  DrawProp.TextColor = 0x0000;
 80022f0:	4b0e      	ldr	r3, [pc, #56]	; (800232c <BSP_LCD_Init+0x54>)
 80022f2:	2200      	movs	r2, #0
 80022f4:	601a      	str	r2, [r3, #0]
  
  if(ili9325_drv.ReadID() == ILI9325_ID)
 80022f6:	4b0f      	ldr	r3, [pc, #60]	; (8002334 <BSP_LCD_Init+0x5c>)
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	4798      	blx	r3
 80022fc:	4603      	mov	r3, r0
 80022fe:	461a      	mov	r2, r3
 8002300:	f249 3325 	movw	r3, #37669	; 0x9325
 8002304:	429a      	cmp	r2, r3
 8002306:	d10b      	bne.n	8002320 <BSP_LCD_Init+0x48>
  {
    lcd_drv = &ili9325_drv;
 8002308:	4b0b      	ldr	r3, [pc, #44]	; (8002338 <BSP_LCD_Init+0x60>)
 800230a:	4a0a      	ldr	r2, [pc, #40]	; (8002334 <BSP_LCD_Init+0x5c>)
 800230c:	601a      	str	r2, [r3, #0]

    /* LCD Init */   
    lcd_drv->Init();
 800230e:	4b0a      	ldr	r3, [pc, #40]	; (8002338 <BSP_LCD_Init+0x60>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	4798      	blx	r3
    
    /* Initialize the font */
    BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8002316:	4806      	ldr	r0, [pc, #24]	; (8002330 <BSP_LCD_Init+0x58>)
 8002318:	f000 f848 	bl	80023ac <BSP_LCD_SetFont>

    ret = LCD_OK;
 800231c:	2300      	movs	r3, #0
 800231e:	71fb      	strb	r3, [r7, #7]
  }
  
  return ret;
 8002320:	79fb      	ldrb	r3, [r7, #7]
}
 8002322:	4618      	mov	r0, r3
 8002324:	3708      	adds	r7, #8
 8002326:	46bd      	mov	sp, r7
 8002328:	bd80      	pop	{r7, pc}
 800232a:	bf00      	nop
 800232c:	2000071c 	.word	0x2000071c
 8002330:	20000070 	.word	0x20000070
 8002334:	2000001c 	.word	0x2000001c
 8002338:	20000728 	.word	0x20000728

0800233c <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size. 
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	af00      	add	r7, sp, #0
  return(lcd_drv->GetLcdPixelWidth());
 8002340:	4b03      	ldr	r3, [pc, #12]	; (8002350 <BSP_LCD_GetXSize+0x14>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002346:	4798      	blx	r3
 8002348:	4603      	mov	r3, r0
}
 800234a:	4618      	mov	r0, r3
 800234c:	bd80      	pop	{r7, pc}
 800234e:	bf00      	nop
 8002350:	20000728 	.word	0x20000728

08002354 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.  
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	af00      	add	r7, sp, #0
  return(lcd_drv->GetLcdPixelHeight());
 8002358:	4b03      	ldr	r3, [pc, #12]	; (8002368 <BSP_LCD_GetYSize+0x14>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800235e:	4798      	blx	r3
 8002360:	4603      	mov	r3, r0
}
 8002362:	4618      	mov	r0, r3
 8002364:	bd80      	pop	{r7, pc}
 8002366:	bf00      	nop
 8002368:	20000728 	.word	0x20000728

0800236c <BSP_LCD_SetTextColor>:
/**
  * @brief  Sets the LCD text color.
  * @param  Color: Text color code RGB(5-6-5)
  */
void BSP_LCD_SetTextColor(uint16_t Color)
{
 800236c:	b480      	push	{r7}
 800236e:	b083      	sub	sp, #12
 8002370:	af00      	add	r7, sp, #0
 8002372:	4603      	mov	r3, r0
 8002374:	80fb      	strh	r3, [r7, #6]
  DrawProp.TextColor = Color;
 8002376:	88fb      	ldrh	r3, [r7, #6]
 8002378:	4a03      	ldr	r2, [pc, #12]	; (8002388 <BSP_LCD_SetTextColor+0x1c>)
 800237a:	6013      	str	r3, [r2, #0]
}
 800237c:	bf00      	nop
 800237e:	370c      	adds	r7, #12
 8002380:	46bd      	mov	sp, r7
 8002382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002386:	4770      	bx	lr
 8002388:	2000071c 	.word	0x2000071c

0800238c <BSP_LCD_SetBackColor>:
/**
  * @brief  Sets the LCD background color.
  * @param  Color: Background color code RGB(5-6-5)
  */
void BSP_LCD_SetBackColor(uint16_t Color)
{
 800238c:	b480      	push	{r7}
 800238e:	b083      	sub	sp, #12
 8002390:	af00      	add	r7, sp, #0
 8002392:	4603      	mov	r3, r0
 8002394:	80fb      	strh	r3, [r7, #6]
  DrawProp.BackColor = Color;
 8002396:	88fb      	ldrh	r3, [r7, #6]
 8002398:	4a03      	ldr	r2, [pc, #12]	; (80023a8 <BSP_LCD_SetBackColor+0x1c>)
 800239a:	6053      	str	r3, [r2, #4]
}
 800239c:	bf00      	nop
 800239e:	370c      	adds	r7, #12
 80023a0:	46bd      	mov	sp, r7
 80023a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a6:	4770      	bx	lr
 80023a8:	2000071c 	.word	0x2000071c

080023ac <BSP_LCD_SetFont>:
/**
  * @brief  Sets the LCD text font.
  * @param  fonts: Font to be used
  */
void BSP_LCD_SetFont(sFONT *fonts)
{
 80023ac:	b480      	push	{r7}
 80023ae:	b083      	sub	sp, #12
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
  DrawProp.pFont = fonts;
 80023b4:	4a04      	ldr	r2, [pc, #16]	; (80023c8 <BSP_LCD_SetFont+0x1c>)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6093      	str	r3, [r2, #8]
}
 80023ba:	bf00      	nop
 80023bc:	370c      	adds	r7, #12
 80023be:	46bd      	mov	sp, r7
 80023c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c4:	4770      	bx	lr
 80023c6:	bf00      	nop
 80023c8:	2000071c 	.word	0x2000071c

080023cc <BSP_LCD_Clear>:
/**
  * @brief  Clears the hole LCD.
  * @param  Color: Color of the background
  */
void BSP_LCD_Clear(uint16_t Color)
{ 
 80023cc:	b590      	push	{r4, r7, lr}
 80023ce:	b085      	sub	sp, #20
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	4603      	mov	r3, r0
 80023d4:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 80023d6:	2300      	movs	r3, #0
 80023d8:	60fb      	str	r3, [r7, #12]
  uint32_t color_backup = DrawProp.TextColor; 
 80023da:	4b15      	ldr	r3, [pc, #84]	; (8002430 <BSP_LCD_Clear+0x64>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	60bb      	str	r3, [r7, #8]
  DrawProp.TextColor = Color;
 80023e0:	88fb      	ldrh	r3, [r7, #6]
 80023e2:	4a13      	ldr	r2, [pc, #76]	; (8002430 <BSP_LCD_Clear+0x64>)
 80023e4:	6013      	str	r3, [r2, #0]
  
  for(counter = 0; counter < BSP_LCD_GetYSize(); counter++)
 80023e6:	2300      	movs	r3, #0
 80023e8:	60fb      	str	r3, [r7, #12]
 80023ea:	e00d      	b.n	8002408 <BSP_LCD_Clear+0x3c>
  {
    BSP_LCD_DrawHLine(0, counter, BSP_LCD_GetXSize());
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	b29c      	uxth	r4, r3
 80023f0:	f7ff ffa4 	bl	800233c <BSP_LCD_GetXSize>
 80023f4:	4603      	mov	r3, r0
 80023f6:	b29b      	uxth	r3, r3
 80023f8:	461a      	mov	r2, r3
 80023fa:	4621      	mov	r1, r4
 80023fc:	2000      	movs	r0, #0
 80023fe:	f000 f8ed 	bl	80025dc <BSP_LCD_DrawHLine>
  for(counter = 0; counter < BSP_LCD_GetYSize(); counter++)
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	3301      	adds	r3, #1
 8002406:	60fb      	str	r3, [r7, #12]
 8002408:	f7ff ffa4 	bl	8002354 <BSP_LCD_GetYSize>
 800240c:	4602      	mov	r2, r0
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	4293      	cmp	r3, r2
 8002412:	d3eb      	bcc.n	80023ec <BSP_LCD_Clear+0x20>
  }
  DrawProp.TextColor = color_backup; 
 8002414:	4a06      	ldr	r2, [pc, #24]	; (8002430 <BSP_LCD_Clear+0x64>)
 8002416:	68bb      	ldr	r3, [r7, #8]
 8002418:	6013      	str	r3, [r2, #0]
  BSP_LCD_SetTextColor(DrawProp.TextColor);
 800241a:	4b05      	ldr	r3, [pc, #20]	; (8002430 <BSP_LCD_Clear+0x64>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	b29b      	uxth	r3, r3
 8002420:	4618      	mov	r0, r3
 8002422:	f7ff ffa3 	bl	800236c <BSP_LCD_SetTextColor>
}
 8002426:	bf00      	nop
 8002428:	3714      	adds	r7, #20
 800242a:	46bd      	mov	sp, r7
 800242c:	bd90      	pop	{r4, r7, pc}
 800242e:	bf00      	nop
 8002430:	2000071c 	.word	0x2000071c

08002434 <BSP_LCD_DisplayChar>:
  * @param  Ypos: Line where to display the character shape.
  * @param  Ascii: Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E 
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b082      	sub	sp, #8
 8002438:	af00      	add	r7, sp, #0
 800243a:	4603      	mov	r3, r0
 800243c:	80fb      	strh	r3, [r7, #6]
 800243e:	460b      	mov	r3, r1
 8002440:	80bb      	strh	r3, [r7, #4]
 8002442:	4613      	mov	r3, r2
 8002444:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp.pFont->table[(Ascii-' ') *\
 8002446:	4b0f      	ldr	r3, [pc, #60]	; (8002484 <BSP_LCD_DisplayChar+0x50>)
 8002448:	689b      	ldr	r3, [r3, #8]
 800244a:	681a      	ldr	r2, [r3, #0]
 800244c:	78fb      	ldrb	r3, [r7, #3]
 800244e:	3b20      	subs	r3, #32
    DrawProp.pFont->Height * ((DrawProp.pFont->Width + 7) / 8)]);
 8002450:	490c      	ldr	r1, [pc, #48]	; (8002484 <BSP_LCD_DisplayChar+0x50>)
 8002452:	6889      	ldr	r1, [r1, #8]
 8002454:	88c9      	ldrh	r1, [r1, #6]
  DrawChar(Xpos, Ypos, &DrawProp.pFont->table[(Ascii-' ') *\
 8002456:	fb03 f101 	mul.w	r1, r3, r1
    DrawProp.pFont->Height * ((DrawProp.pFont->Width + 7) / 8)]);
 800245a:	4b0a      	ldr	r3, [pc, #40]	; (8002484 <BSP_LCD_DisplayChar+0x50>)
 800245c:	689b      	ldr	r3, [r3, #8]
 800245e:	889b      	ldrh	r3, [r3, #4]
 8002460:	3307      	adds	r3, #7
 8002462:	2b00      	cmp	r3, #0
 8002464:	da00      	bge.n	8002468 <BSP_LCD_DisplayChar+0x34>
 8002466:	3307      	adds	r3, #7
 8002468:	10db      	asrs	r3, r3, #3
 800246a:	fb01 f303 	mul.w	r3, r1, r3
  DrawChar(Xpos, Ypos, &DrawProp.pFont->table[(Ascii-' ') *\
 800246e:	441a      	add	r2, r3
 8002470:	88b9      	ldrh	r1, [r7, #4]
 8002472:	88fb      	ldrh	r3, [r7, #6]
 8002474:	4618      	mov	r0, r3
 8002476:	f000 f8eb 	bl	8002650 <DrawChar>
}
 800247a:	bf00      	nop
 800247c:	3708      	adds	r7, #8
 800247e:	46bd      	mov	sp, r7
 8002480:	bd80      	pop	{r7, pc}
 8002482:	bf00      	nop
 8002484:	2000071c 	.word	0x2000071c

08002488 <BSP_LCD_DisplayStringAt>:
  *            @arg  CENTER_MODE
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE   
  */
void BSP_LCD_DisplayStringAt(uint16_t Xpos, uint16_t Ypos, uint8_t *Text, Line_ModeTypdef Mode)
{
 8002488:	b590      	push	{r4, r7, lr}
 800248a:	b089      	sub	sp, #36	; 0x24
 800248c:	af00      	add	r7, sp, #0
 800248e:	60ba      	str	r2, [r7, #8]
 8002490:	461a      	mov	r2, r3
 8002492:	4603      	mov	r3, r0
 8002494:	81fb      	strh	r3, [r7, #14]
 8002496:	460b      	mov	r3, r1
 8002498:	81bb      	strh	r3, [r7, #12]
 800249a:	4613      	mov	r3, r2
 800249c:	71fb      	strb	r3, [r7, #7]
  uint16_t refcolumn = 1, i = 0;
 800249e:	2301      	movs	r3, #1
 80024a0:	83fb      	strh	r3, [r7, #30]
 80024a2:	2300      	movs	r3, #0
 80024a4:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 80024a6:	2300      	movs	r3, #0
 80024a8:	61bb      	str	r3, [r7, #24]
 80024aa:	2300      	movs	r3, #0
 80024ac:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = Text;
 80024ae:	68bb      	ldr	r3, [r7, #8]
 80024b0:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 80024b2:	e002      	b.n	80024ba <BSP_LCD_DisplayStringAt+0x32>
 80024b4:	69bb      	ldr	r3, [r7, #24]
 80024b6:	3301      	adds	r3, #1
 80024b8:	61bb      	str	r3, [r7, #24]
 80024ba:	697b      	ldr	r3, [r7, #20]
 80024bc:	1c5a      	adds	r2, r3, #1
 80024be:	617a      	str	r2, [r7, #20]
 80024c0:	781b      	ldrb	r3, [r3, #0]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d1f6      	bne.n	80024b4 <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp.pFont->Width);
 80024c6:	f7ff ff39 	bl	800233c <BSP_LCD_GetXSize>
 80024ca:	4602      	mov	r2, r0
 80024cc:	4b34      	ldr	r3, [pc, #208]	; (80025a0 <BSP_LCD_DisplayStringAt+0x118>)
 80024ce:	689b      	ldr	r3, [r3, #8]
 80024d0:	889b      	ldrh	r3, [r3, #4]
 80024d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80024d6:	613b      	str	r3, [r7, #16]
  
  switch (Mode)
 80024d8:	79fb      	ldrb	r3, [r7, #7]
 80024da:	2b03      	cmp	r3, #3
 80024dc:	d014      	beq.n	8002508 <BSP_LCD_DisplayStringAt+0x80>
 80024de:	2b03      	cmp	r3, #3
 80024e0:	dc23      	bgt.n	800252a <BSP_LCD_DisplayStringAt+0xa2>
 80024e2:	2b01      	cmp	r3, #1
 80024e4:	d002      	beq.n	80024ec <BSP_LCD_DisplayStringAt+0x64>
 80024e6:	2b02      	cmp	r3, #2
 80024e8:	d011      	beq.n	800250e <BSP_LCD_DisplayStringAt+0x86>
 80024ea:	e01e      	b.n	800252a <BSP_LCD_DisplayStringAt+0xa2>
  {
  case CENTER_MODE:
    {
      refcolumn = Xpos + ((xsize - size)* DrawProp.pFont->Width) / 2;
 80024ec:	693a      	ldr	r2, [r7, #16]
 80024ee:	69bb      	ldr	r3, [r7, #24]
 80024f0:	1ad3      	subs	r3, r2, r3
 80024f2:	4a2b      	ldr	r2, [pc, #172]	; (80025a0 <BSP_LCD_DisplayStringAt+0x118>)
 80024f4:	6892      	ldr	r2, [r2, #8]
 80024f6:	8892      	ldrh	r2, [r2, #4]
 80024f8:	fb02 f303 	mul.w	r3, r2, r3
 80024fc:	085b      	lsrs	r3, r3, #1
 80024fe:	b29a      	uxth	r2, r3
 8002500:	89fb      	ldrh	r3, [r7, #14]
 8002502:	4413      	add	r3, r2
 8002504:	83fb      	strh	r3, [r7, #30]
      break;
 8002506:	e013      	b.n	8002530 <BSP_LCD_DisplayStringAt+0xa8>
    }
  case LEFT_MODE:
    {
      refcolumn = Xpos;
 8002508:	89fb      	ldrh	r3, [r7, #14]
 800250a:	83fb      	strh	r3, [r7, #30]
      break;
 800250c:	e010      	b.n	8002530 <BSP_LCD_DisplayStringAt+0xa8>
    }
  case RIGHT_MODE:
    {
      refcolumn =  - Xpos + ((xsize - size)*DrawProp.pFont->Width);
 800250e:	693a      	ldr	r2, [r7, #16]
 8002510:	69bb      	ldr	r3, [r7, #24]
 8002512:	1ad3      	subs	r3, r2, r3
 8002514:	b29a      	uxth	r2, r3
 8002516:	4b22      	ldr	r3, [pc, #136]	; (80025a0 <BSP_LCD_DisplayStringAt+0x118>)
 8002518:	689b      	ldr	r3, [r3, #8]
 800251a:	889b      	ldrh	r3, [r3, #4]
 800251c:	fb12 f303 	smulbb	r3, r2, r3
 8002520:	b29a      	uxth	r2, r3
 8002522:	89fb      	ldrh	r3, [r7, #14]
 8002524:	1ad3      	subs	r3, r2, r3
 8002526:	83fb      	strh	r3, [r7, #30]
      break;
 8002528:	e002      	b.n	8002530 <BSP_LCD_DisplayStringAt+0xa8>
    }    
  default:
    {
      refcolumn = Xpos;
 800252a:	89fb      	ldrh	r3, [r7, #14]
 800252c:	83fb      	strh	r3, [r7, #30]
      break;
 800252e:	bf00      	nop
    }
  }
  
  /* Send the string character by character on lCD */
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp.pFont->Width)) & 0xFFFF) >= DrawProp.pFont->Width))
 8002530:	e012      	b.n	8002558 <BSP_LCD_DisplayStringAt+0xd0>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(refcolumn, Ypos, *Text);
 8002532:	68bb      	ldr	r3, [r7, #8]
 8002534:	781a      	ldrb	r2, [r3, #0]
 8002536:	89b9      	ldrh	r1, [r7, #12]
 8002538:	8bfb      	ldrh	r3, [r7, #30]
 800253a:	4618      	mov	r0, r3
 800253c:	f7ff ff7a 	bl	8002434 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp.pFont->Width;
 8002540:	4b17      	ldr	r3, [pc, #92]	; (80025a0 <BSP_LCD_DisplayStringAt+0x118>)
 8002542:	689b      	ldr	r3, [r3, #8]
 8002544:	889a      	ldrh	r2, [r3, #4]
 8002546:	8bfb      	ldrh	r3, [r7, #30]
 8002548:	4413      	add	r3, r2
 800254a:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    Text++;
 800254c:	68bb      	ldr	r3, [r7, #8]
 800254e:	3301      	adds	r3, #1
 8002550:	60bb      	str	r3, [r7, #8]
    i++;
 8002552:	8bbb      	ldrh	r3, [r7, #28]
 8002554:	3301      	adds	r3, #1
 8002556:	83bb      	strh	r3, [r7, #28]
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp.pFont->Width)) & 0xFFFF) >= DrawProp.pFont->Width))
 8002558:	68bb      	ldr	r3, [r7, #8]
 800255a:	781b      	ldrb	r3, [r3, #0]
 800255c:	2b00      	cmp	r3, #0
 800255e:	bf14      	ite	ne
 8002560:	2301      	movne	r3, #1
 8002562:	2300      	moveq	r3, #0
 8002564:	b2dc      	uxtb	r4, r3
 8002566:	f7ff fee9 	bl	800233c <BSP_LCD_GetXSize>
 800256a:	4601      	mov	r1, r0
 800256c:	8bbb      	ldrh	r3, [r7, #28]
 800256e:	4a0c      	ldr	r2, [pc, #48]	; (80025a0 <BSP_LCD_DisplayStringAt+0x118>)
 8002570:	6892      	ldr	r2, [r2, #8]
 8002572:	8892      	ldrh	r2, [r2, #4]
 8002574:	fb02 f303 	mul.w	r3, r2, r3
 8002578:	1acb      	subs	r3, r1, r3
 800257a:	b29b      	uxth	r3, r3
 800257c:	4a08      	ldr	r2, [pc, #32]	; (80025a0 <BSP_LCD_DisplayStringAt+0x118>)
 800257e:	6892      	ldr	r2, [r2, #8]
 8002580:	8892      	ldrh	r2, [r2, #4]
 8002582:	4293      	cmp	r3, r2
 8002584:	bf2c      	ite	cs
 8002586:	2301      	movcs	r3, #1
 8002588:	2300      	movcc	r3, #0
 800258a:	b2db      	uxtb	r3, r3
 800258c:	4023      	ands	r3, r4
 800258e:	b2db      	uxtb	r3, r3
 8002590:	2b00      	cmp	r3, #0
 8002592:	d1ce      	bne.n	8002532 <BSP_LCD_DisplayStringAt+0xaa>
  }
}
 8002594:	bf00      	nop
 8002596:	bf00      	nop
 8002598:	3724      	adds	r7, #36	; 0x24
 800259a:	46bd      	mov	sp, r7
 800259c:	bd90      	pop	{r4, r7, pc}
 800259e:	bf00      	nop
 80025a0:	2000071c 	.word	0x2000071c

080025a4 <BSP_LCD_DrawPixel>:
  * @param  Xpos: X position 
  * @param  Ypos: Y position
  * @param  RGB_Code: Pixel color in RGB mode (5-6-5)  
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint16_t RGB_Code)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b082      	sub	sp, #8
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	4603      	mov	r3, r0
 80025ac:	80fb      	strh	r3, [r7, #6]
 80025ae:	460b      	mov	r3, r1
 80025b0:	80bb      	strh	r3, [r7, #4]
 80025b2:	4613      	mov	r3, r2
 80025b4:	807b      	strh	r3, [r7, #2]
  if(lcd_drv->WritePixel != NULL)
 80025b6:	4b08      	ldr	r3, [pc, #32]	; (80025d8 <BSP_LCD_DrawPixel+0x34>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	695b      	ldr	r3, [r3, #20]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d006      	beq.n	80025ce <BSP_LCD_DrawPixel+0x2a>
  {
    lcd_drv->WritePixel(Xpos, Ypos, RGB_Code);
 80025c0:	4b05      	ldr	r3, [pc, #20]	; (80025d8 <BSP_LCD_DrawPixel+0x34>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	695b      	ldr	r3, [r3, #20]
 80025c6:	887a      	ldrh	r2, [r7, #2]
 80025c8:	88b9      	ldrh	r1, [r7, #4]
 80025ca:	88f8      	ldrh	r0, [r7, #6]
 80025cc:	4798      	blx	r3
  }
}
 80025ce:	bf00      	nop
 80025d0:	3708      	adds	r7, #8
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bd80      	pop	{r7, pc}
 80025d6:	bf00      	nop
 80025d8:	20000728 	.word	0x20000728

080025dc <BSP_LCD_DrawHLine>:
  * @param  Xpos: X position
  * @param  Ypos: Y position
  * @param  Length: Line length
  */
void BSP_LCD_DrawHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 80025dc:	b590      	push	{r4, r7, lr}
 80025de:	b085      	sub	sp, #20
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	4603      	mov	r3, r0
 80025e4:	80fb      	strh	r3, [r7, #6]
 80025e6:	460b      	mov	r3, r1
 80025e8:	80bb      	strh	r3, [r7, #4]
 80025ea:	4613      	mov	r3, r2
 80025ec:	807b      	strh	r3, [r7, #2]
  uint32_t index = 0;
 80025ee:	2300      	movs	r3, #0
 80025f0:	60fb      	str	r3, [r7, #12]
  
  if(lcd_drv->DrawHLine != NULL)
 80025f2:	4b15      	ldr	r3, [pc, #84]	; (8002648 <BSP_LCD_DrawHLine+0x6c>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	6a1b      	ldr	r3, [r3, #32]
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d00a      	beq.n	8002612 <BSP_LCD_DrawHLine+0x36>
  {
    lcd_drv->DrawHLine(DrawProp.TextColor, Xpos, Ypos, Length);
 80025fc:	4b12      	ldr	r3, [pc, #72]	; (8002648 <BSP_LCD_DrawHLine+0x6c>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	6a1c      	ldr	r4, [r3, #32]
 8002602:	4b12      	ldr	r3, [pc, #72]	; (800264c <BSP_LCD_DrawHLine+0x70>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	b298      	uxth	r0, r3
 8002608:	887b      	ldrh	r3, [r7, #2]
 800260a:	88ba      	ldrh	r2, [r7, #4]
 800260c:	88f9      	ldrh	r1, [r7, #6]
 800260e:	47a0      	blx	r4
    for(index = 0; index < Length; index++)
    {
      BSP_LCD_DrawPixel((Xpos + index), Ypos, DrawProp.TextColor);
    }
  }
}
 8002610:	e015      	b.n	800263e <BSP_LCD_DrawHLine+0x62>
    for(index = 0; index < Length; index++)
 8002612:	2300      	movs	r3, #0
 8002614:	60fb      	str	r3, [r7, #12]
 8002616:	e00e      	b.n	8002636 <BSP_LCD_DrawHLine+0x5a>
      BSP_LCD_DrawPixel((Xpos + index), Ypos, DrawProp.TextColor);
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	b29a      	uxth	r2, r3
 800261c:	88fb      	ldrh	r3, [r7, #6]
 800261e:	4413      	add	r3, r2
 8002620:	b29b      	uxth	r3, r3
 8002622:	4a0a      	ldr	r2, [pc, #40]	; (800264c <BSP_LCD_DrawHLine+0x70>)
 8002624:	6812      	ldr	r2, [r2, #0]
 8002626:	b292      	uxth	r2, r2
 8002628:	88b9      	ldrh	r1, [r7, #4]
 800262a:	4618      	mov	r0, r3
 800262c:	f7ff ffba 	bl	80025a4 <BSP_LCD_DrawPixel>
    for(index = 0; index < Length; index++)
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	3301      	adds	r3, #1
 8002634:	60fb      	str	r3, [r7, #12]
 8002636:	887b      	ldrh	r3, [r7, #2]
 8002638:	68fa      	ldr	r2, [r7, #12]
 800263a:	429a      	cmp	r2, r3
 800263c:	d3ec      	bcc.n	8002618 <BSP_LCD_DrawHLine+0x3c>
}
 800263e:	bf00      	nop
 8002640:	3714      	adds	r7, #20
 8002642:	46bd      	mov	sp, r7
 8002644:	bd90      	pop	{r4, r7, pc}
 8002646:	bf00      	nop
 8002648:	20000728 	.word	0x20000728
 800264c:	2000071c 	.word	0x2000071c

08002650 <DrawChar>:
  * @param  Xpos: Line where to display the character shape
  * @param  Ypos: Start column address
  * @param  c: Pointer to the character data
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b088      	sub	sp, #32
 8002654:	af00      	add	r7, sp, #0
 8002656:	4603      	mov	r3, r0
 8002658:	603a      	str	r2, [r7, #0]
 800265a:	80fb      	strh	r3, [r7, #6]
 800265c:	460b      	mov	r3, r1
 800265e:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 8002660:	2300      	movs	r3, #0
 8002662:	61fb      	str	r3, [r7, #28]
 8002664:	2300      	movs	r3, #0
 8002666:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t offset;
  uint8_t *pchar;
  uint32_t line;
  
  height = DrawProp.pFont->Height;
 8002668:	4b45      	ldr	r3, [pc, #276]	; (8002780 <DrawChar+0x130>)
 800266a:	689b      	ldr	r3, [r3, #8]
 800266c:	88db      	ldrh	r3, [r3, #6]
 800266e:	827b      	strh	r3, [r7, #18]
  width  = DrawProp.pFont->Width;
 8002670:	4b43      	ldr	r3, [pc, #268]	; (8002780 <DrawChar+0x130>)
 8002672:	689b      	ldr	r3, [r3, #8]
 8002674:	889b      	ldrh	r3, [r3, #4]
 8002676:	823b      	strh	r3, [r7, #16]
  
  offset =  8 *((width + 7)/8) -  width ;
 8002678:	8a3b      	ldrh	r3, [r7, #16]
 800267a:	3307      	adds	r3, #7
 800267c:	2b00      	cmp	r3, #0
 800267e:	da00      	bge.n	8002682 <DrawChar+0x32>
 8002680:	3307      	adds	r3, #7
 8002682:	10db      	asrs	r3, r3, #3
 8002684:	b2db      	uxtb	r3, r3
 8002686:	00db      	lsls	r3, r3, #3
 8002688:	b2da      	uxtb	r2, r3
 800268a:	8a3b      	ldrh	r3, [r7, #16]
 800268c:	b2db      	uxtb	r3, r3
 800268e:	1ad3      	subs	r3, r2, r3
 8002690:	73fb      	strb	r3, [r7, #15]
  
  for(i = 0; i < height; i++)
 8002692:	2300      	movs	r3, #0
 8002694:	61fb      	str	r3, [r7, #28]
 8002696:	e069      	b.n	800276c <DrawChar+0x11c>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 8002698:	8a3b      	ldrh	r3, [r7, #16]
 800269a:	3307      	adds	r3, #7
 800269c:	2b00      	cmp	r3, #0
 800269e:	da00      	bge.n	80026a2 <DrawChar+0x52>
 80026a0:	3307      	adds	r3, #7
 80026a2:	10db      	asrs	r3, r3, #3
 80026a4:	461a      	mov	r2, r3
 80026a6:	69fb      	ldr	r3, [r7, #28]
 80026a8:	fb02 f303 	mul.w	r3, r2, r3
 80026ac:	683a      	ldr	r2, [r7, #0]
 80026ae:	4413      	add	r3, r2
 80026b0:	60bb      	str	r3, [r7, #8]
    
    switch(((width + 7)/8))
 80026b2:	8a3b      	ldrh	r3, [r7, #16]
 80026b4:	3307      	adds	r3, #7
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	da00      	bge.n	80026bc <DrawChar+0x6c>
 80026ba:	3307      	adds	r3, #7
 80026bc:	10db      	asrs	r3, r3, #3
 80026be:	2b01      	cmp	r3, #1
 80026c0:	d002      	beq.n	80026c8 <DrawChar+0x78>
 80026c2:	2b02      	cmp	r3, #2
 80026c4:	d004      	beq.n	80026d0 <DrawChar+0x80>
 80026c6:	e00c      	b.n	80026e2 <DrawChar+0x92>
    {
    case 1:
      line =  pchar[0];
 80026c8:	68bb      	ldr	r3, [r7, #8]
 80026ca:	781b      	ldrb	r3, [r3, #0]
 80026cc:	617b      	str	r3, [r7, #20]
      break;    
 80026ce:	e016      	b.n	80026fe <DrawChar+0xae>

    case 2:
      line =  (pchar[0]<< 8) | pchar[1];
 80026d0:	68bb      	ldr	r3, [r7, #8]
 80026d2:	781b      	ldrb	r3, [r3, #0]
 80026d4:	021b      	lsls	r3, r3, #8
 80026d6:	68ba      	ldr	r2, [r7, #8]
 80026d8:	3201      	adds	r2, #1
 80026da:	7812      	ldrb	r2, [r2, #0]
 80026dc:	4313      	orrs	r3, r2
 80026de:	617b      	str	r3, [r7, #20]
      break;
 80026e0:	e00d      	b.n	80026fe <DrawChar+0xae>
      
    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];
 80026e2:	68bb      	ldr	r3, [r7, #8]
 80026e4:	781b      	ldrb	r3, [r3, #0]
 80026e6:	041a      	lsls	r2, r3, #16
 80026e8:	68bb      	ldr	r3, [r7, #8]
 80026ea:	3301      	adds	r3, #1
 80026ec:	781b      	ldrb	r3, [r3, #0]
 80026ee:	021b      	lsls	r3, r3, #8
 80026f0:	4313      	orrs	r3, r2
 80026f2:	68ba      	ldr	r2, [r7, #8]
 80026f4:	3202      	adds	r2, #2
 80026f6:	7812      	ldrb	r2, [r2, #0]
 80026f8:	4313      	orrs	r3, r2
 80026fa:	617b      	str	r3, [r7, #20]
      break;
 80026fc:	bf00      	nop
    }  
    
    for (j = 0; j < width; j++)
 80026fe:	2300      	movs	r3, #0
 8002700:	61bb      	str	r3, [r7, #24]
 8002702:	e029      	b.n	8002758 <DrawChar+0x108>
    {
      if(line & (1 << (width- j + offset- 1))) 
 8002704:	8a3a      	ldrh	r2, [r7, #16]
 8002706:	69bb      	ldr	r3, [r7, #24]
 8002708:	1ad2      	subs	r2, r2, r3
 800270a:	7bfb      	ldrb	r3, [r7, #15]
 800270c:	4413      	add	r3, r2
 800270e:	3b01      	subs	r3, #1
 8002710:	2201      	movs	r2, #1
 8002712:	fa02 f303 	lsl.w	r3, r2, r3
 8002716:	461a      	mov	r2, r3
 8002718:	697b      	ldr	r3, [r7, #20]
 800271a:	4013      	ands	r3, r2
 800271c:	2b00      	cmp	r3, #0
 800271e:	d00c      	beq.n	800273a <DrawChar+0xea>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp.TextColor);
 8002720:	69bb      	ldr	r3, [r7, #24]
 8002722:	b29a      	uxth	r2, r3
 8002724:	88fb      	ldrh	r3, [r7, #6]
 8002726:	4413      	add	r3, r2
 8002728:	b29b      	uxth	r3, r3
 800272a:	4a15      	ldr	r2, [pc, #84]	; (8002780 <DrawChar+0x130>)
 800272c:	6812      	ldr	r2, [r2, #0]
 800272e:	b292      	uxth	r2, r2
 8002730:	88b9      	ldrh	r1, [r7, #4]
 8002732:	4618      	mov	r0, r3
 8002734:	f7ff ff36 	bl	80025a4 <BSP_LCD_DrawPixel>
 8002738:	e00b      	b.n	8002752 <DrawChar+0x102>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp.BackColor);
 800273a:	69bb      	ldr	r3, [r7, #24]
 800273c:	b29a      	uxth	r2, r3
 800273e:	88fb      	ldrh	r3, [r7, #6]
 8002740:	4413      	add	r3, r2
 8002742:	b29b      	uxth	r3, r3
 8002744:	4a0e      	ldr	r2, [pc, #56]	; (8002780 <DrawChar+0x130>)
 8002746:	6852      	ldr	r2, [r2, #4]
 8002748:	b292      	uxth	r2, r2
 800274a:	88b9      	ldrh	r1, [r7, #4]
 800274c:	4618      	mov	r0, r3
 800274e:	f7ff ff29 	bl	80025a4 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 8002752:	69bb      	ldr	r3, [r7, #24]
 8002754:	3301      	adds	r3, #1
 8002756:	61bb      	str	r3, [r7, #24]
 8002758:	8a3b      	ldrh	r3, [r7, #16]
 800275a:	69ba      	ldr	r2, [r7, #24]
 800275c:	429a      	cmp	r2, r3
 800275e:	d3d1      	bcc.n	8002704 <DrawChar+0xb4>
      } 
    }
    Ypos++;
 8002760:	88bb      	ldrh	r3, [r7, #4]
 8002762:	3301      	adds	r3, #1
 8002764:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 8002766:	69fb      	ldr	r3, [r7, #28]
 8002768:	3301      	adds	r3, #1
 800276a:	61fb      	str	r3, [r7, #28]
 800276c:	8a7b      	ldrh	r3, [r7, #18]
 800276e:	69fa      	ldr	r2, [r7, #28]
 8002770:	429a      	cmp	r2, r3
 8002772:	d391      	bcc.n	8002698 <DrawChar+0x48>
  }
}
 8002774:	bf00      	nop
 8002776:	bf00      	nop
 8002778:	3720      	adds	r7, #32
 800277a:	46bd      	mov	sp, r7
 800277c:	bd80      	pop	{r7, pc}
 800277e:	bf00      	nop
 8002780:	2000071c 	.word	0x2000071c

08002784 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002788:	4b0e      	ldr	r3, [pc, #56]	; (80027c4 <HAL_Init+0x40>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4a0d      	ldr	r2, [pc, #52]	; (80027c4 <HAL_Init+0x40>)
 800278e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002792:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002794:	4b0b      	ldr	r3, [pc, #44]	; (80027c4 <HAL_Init+0x40>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	4a0a      	ldr	r2, [pc, #40]	; (80027c4 <HAL_Init+0x40>)
 800279a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800279e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80027a0:	4b08      	ldr	r3, [pc, #32]	; (80027c4 <HAL_Init+0x40>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	4a07      	ldr	r2, [pc, #28]	; (80027c4 <HAL_Init+0x40>)
 80027a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027aa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80027ac:	2003      	movs	r0, #3
 80027ae:	f000 fbb1 	bl	8002f14 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80027b2:	2000      	movs	r0, #0
 80027b4:	f000 f808 	bl	80027c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80027b8:	f7fe fcfe 	bl	80011b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80027bc:	2300      	movs	r3, #0
}
 80027be:	4618      	mov	r0, r3
 80027c0:	bd80      	pop	{r7, pc}
 80027c2:	bf00      	nop
 80027c4:	40023c00 	.word	0x40023c00

080027c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b082      	sub	sp, #8
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80027d0:	4b12      	ldr	r3, [pc, #72]	; (800281c <HAL_InitTick+0x54>)
 80027d2:	681a      	ldr	r2, [r3, #0]
 80027d4:	4b12      	ldr	r3, [pc, #72]	; (8002820 <HAL_InitTick+0x58>)
 80027d6:	781b      	ldrb	r3, [r3, #0]
 80027d8:	4619      	mov	r1, r3
 80027da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80027de:	fbb3 f3f1 	udiv	r3, r3, r1
 80027e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80027e6:	4618      	mov	r0, r3
 80027e8:	f000 fbc9 	bl	8002f7e <HAL_SYSTICK_Config>
 80027ec:	4603      	mov	r3, r0
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d001      	beq.n	80027f6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80027f2:	2301      	movs	r3, #1
 80027f4:	e00e      	b.n	8002814 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	2b0f      	cmp	r3, #15
 80027fa:	d80a      	bhi.n	8002812 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80027fc:	2200      	movs	r2, #0
 80027fe:	6879      	ldr	r1, [r7, #4]
 8002800:	f04f 30ff 	mov.w	r0, #4294967295
 8002804:	f000 fb91 	bl	8002f2a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002808:	4a06      	ldr	r2, [pc, #24]	; (8002824 <HAL_InitTick+0x5c>)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800280e:	2300      	movs	r3, #0
 8002810:	e000      	b.n	8002814 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002812:	2301      	movs	r3, #1
}
 8002814:	4618      	mov	r0, r3
 8002816:	3708      	adds	r7, #8
 8002818:	46bd      	mov	sp, r7
 800281a:	bd80      	pop	{r7, pc}
 800281c:	20000018 	.word	0x20000018
 8002820:	2000007c 	.word	0x2000007c
 8002824:	20000078 	.word	0x20000078

08002828 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002828:	b480      	push	{r7}
 800282a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800282c:	4b06      	ldr	r3, [pc, #24]	; (8002848 <HAL_IncTick+0x20>)
 800282e:	781b      	ldrb	r3, [r3, #0]
 8002830:	461a      	mov	r2, r3
 8002832:	4b06      	ldr	r3, [pc, #24]	; (800284c <HAL_IncTick+0x24>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	4413      	add	r3, r2
 8002838:	4a04      	ldr	r2, [pc, #16]	; (800284c <HAL_IncTick+0x24>)
 800283a:	6013      	str	r3, [r2, #0]
}
 800283c:	bf00      	nop
 800283e:	46bd      	mov	sp, r7
 8002840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002844:	4770      	bx	lr
 8002846:	bf00      	nop
 8002848:	2000007c 	.word	0x2000007c
 800284c:	2000072c 	.word	0x2000072c

08002850 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002850:	b480      	push	{r7}
 8002852:	af00      	add	r7, sp, #0
  return uwTick;
 8002854:	4b03      	ldr	r3, [pc, #12]	; (8002864 <HAL_GetTick+0x14>)
 8002856:	681b      	ldr	r3, [r3, #0]
}
 8002858:	4618      	mov	r0, r3
 800285a:	46bd      	mov	sp, r7
 800285c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002860:	4770      	bx	lr
 8002862:	bf00      	nop
 8002864:	2000072c 	.word	0x2000072c

08002868 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b084      	sub	sp, #16
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002870:	f7ff ffee 	bl	8002850 <HAL_GetTick>
 8002874:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002880:	d005      	beq.n	800288e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002882:	4b0a      	ldr	r3, [pc, #40]	; (80028ac <HAL_Delay+0x44>)
 8002884:	781b      	ldrb	r3, [r3, #0]
 8002886:	461a      	mov	r2, r3
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	4413      	add	r3, r2
 800288c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800288e:	bf00      	nop
 8002890:	f7ff ffde 	bl	8002850 <HAL_GetTick>
 8002894:	4602      	mov	r2, r0
 8002896:	68bb      	ldr	r3, [r7, #8]
 8002898:	1ad3      	subs	r3, r2, r3
 800289a:	68fa      	ldr	r2, [r7, #12]
 800289c:	429a      	cmp	r2, r3
 800289e:	d8f7      	bhi.n	8002890 <HAL_Delay+0x28>
  {
  }
}
 80028a0:	bf00      	nop
 80028a2:	bf00      	nop
 80028a4:	3710      	adds	r7, #16
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bd80      	pop	{r7, pc}
 80028aa:	bf00      	nop
 80028ac:	2000007c 	.word	0x2000007c

080028b0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b084      	sub	sp, #16
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80028b8:	2300      	movs	r3, #0
 80028ba:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d101      	bne.n	80028c6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80028c2:	2301      	movs	r3, #1
 80028c4:	e033      	b.n	800292e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d109      	bne.n	80028e2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80028ce:	6878      	ldr	r0, [r7, #4]
 80028d0:	f7fe fc9a 	bl	8001208 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2200      	movs	r2, #0
 80028d8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	2200      	movs	r2, #0
 80028de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028e6:	f003 0310 	and.w	r3, r3, #16
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d118      	bne.n	8002920 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028f2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80028f6:	f023 0302 	bic.w	r3, r3, #2
 80028fa:	f043 0202 	orr.w	r2, r3, #2
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002902:	6878      	ldr	r0, [r7, #4]
 8002904:	f000 f93a 	bl	8002b7c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2200      	movs	r2, #0
 800290c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002912:	f023 0303 	bic.w	r3, r3, #3
 8002916:	f043 0201 	orr.w	r2, r3, #1
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	641a      	str	r2, [r3, #64]	; 0x40
 800291e:	e001      	b.n	8002924 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002920:	2301      	movs	r3, #1
 8002922:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2200      	movs	r2, #0
 8002928:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800292c:	7bfb      	ldrb	r3, [r7, #15]
}
 800292e:	4618      	mov	r0, r3
 8002930:	3710      	adds	r7, #16
 8002932:	46bd      	mov	sp, r7
 8002934:	bd80      	pop	{r7, pc}
	...

08002938 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002938:	b480      	push	{r7}
 800293a:	b085      	sub	sp, #20
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
 8002940:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002942:	2300      	movs	r3, #0
 8002944:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800294c:	2b01      	cmp	r3, #1
 800294e:	d101      	bne.n	8002954 <HAL_ADC_ConfigChannel+0x1c>
 8002950:	2302      	movs	r3, #2
 8002952:	e105      	b.n	8002b60 <HAL_ADC_ConfigChannel+0x228>
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2201      	movs	r2, #1
 8002958:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	2b09      	cmp	r3, #9
 8002962:	d925      	bls.n	80029b0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	68d9      	ldr	r1, [r3, #12]
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	b29b      	uxth	r3, r3
 8002970:	461a      	mov	r2, r3
 8002972:	4613      	mov	r3, r2
 8002974:	005b      	lsls	r3, r3, #1
 8002976:	4413      	add	r3, r2
 8002978:	3b1e      	subs	r3, #30
 800297a:	2207      	movs	r2, #7
 800297c:	fa02 f303 	lsl.w	r3, r2, r3
 8002980:	43da      	mvns	r2, r3
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	400a      	ands	r2, r1
 8002988:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	68d9      	ldr	r1, [r3, #12]
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	689a      	ldr	r2, [r3, #8]
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	b29b      	uxth	r3, r3
 800299a:	4618      	mov	r0, r3
 800299c:	4603      	mov	r3, r0
 800299e:	005b      	lsls	r3, r3, #1
 80029a0:	4403      	add	r3, r0
 80029a2:	3b1e      	subs	r3, #30
 80029a4:	409a      	lsls	r2, r3
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	430a      	orrs	r2, r1
 80029ac:	60da      	str	r2, [r3, #12]
 80029ae:	e022      	b.n	80029f6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	6919      	ldr	r1, [r3, #16]
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	b29b      	uxth	r3, r3
 80029bc:	461a      	mov	r2, r3
 80029be:	4613      	mov	r3, r2
 80029c0:	005b      	lsls	r3, r3, #1
 80029c2:	4413      	add	r3, r2
 80029c4:	2207      	movs	r2, #7
 80029c6:	fa02 f303 	lsl.w	r3, r2, r3
 80029ca:	43da      	mvns	r2, r3
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	400a      	ands	r2, r1
 80029d2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	6919      	ldr	r1, [r3, #16]
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	689a      	ldr	r2, [r3, #8]
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	b29b      	uxth	r3, r3
 80029e4:	4618      	mov	r0, r3
 80029e6:	4603      	mov	r3, r0
 80029e8:	005b      	lsls	r3, r3, #1
 80029ea:	4403      	add	r3, r0
 80029ec:	409a      	lsls	r2, r3
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	430a      	orrs	r2, r1
 80029f4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	685b      	ldr	r3, [r3, #4]
 80029fa:	2b06      	cmp	r3, #6
 80029fc:	d824      	bhi.n	8002a48 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	685a      	ldr	r2, [r3, #4]
 8002a08:	4613      	mov	r3, r2
 8002a0a:	009b      	lsls	r3, r3, #2
 8002a0c:	4413      	add	r3, r2
 8002a0e:	3b05      	subs	r3, #5
 8002a10:	221f      	movs	r2, #31
 8002a12:	fa02 f303 	lsl.w	r3, r2, r3
 8002a16:	43da      	mvns	r2, r3
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	400a      	ands	r2, r1
 8002a1e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	b29b      	uxth	r3, r3
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	685a      	ldr	r2, [r3, #4]
 8002a32:	4613      	mov	r3, r2
 8002a34:	009b      	lsls	r3, r3, #2
 8002a36:	4413      	add	r3, r2
 8002a38:	3b05      	subs	r3, #5
 8002a3a:	fa00 f203 	lsl.w	r2, r0, r3
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	430a      	orrs	r2, r1
 8002a44:	635a      	str	r2, [r3, #52]	; 0x34
 8002a46:	e04c      	b.n	8002ae2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	2b0c      	cmp	r3, #12
 8002a4e:	d824      	bhi.n	8002a9a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	685a      	ldr	r2, [r3, #4]
 8002a5a:	4613      	mov	r3, r2
 8002a5c:	009b      	lsls	r3, r3, #2
 8002a5e:	4413      	add	r3, r2
 8002a60:	3b23      	subs	r3, #35	; 0x23
 8002a62:	221f      	movs	r2, #31
 8002a64:	fa02 f303 	lsl.w	r3, r2, r3
 8002a68:	43da      	mvns	r2, r3
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	400a      	ands	r2, r1
 8002a70:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	b29b      	uxth	r3, r3
 8002a7e:	4618      	mov	r0, r3
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	685a      	ldr	r2, [r3, #4]
 8002a84:	4613      	mov	r3, r2
 8002a86:	009b      	lsls	r3, r3, #2
 8002a88:	4413      	add	r3, r2
 8002a8a:	3b23      	subs	r3, #35	; 0x23
 8002a8c:	fa00 f203 	lsl.w	r2, r0, r3
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	430a      	orrs	r2, r1
 8002a96:	631a      	str	r2, [r3, #48]	; 0x30
 8002a98:	e023      	b.n	8002ae2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	685a      	ldr	r2, [r3, #4]
 8002aa4:	4613      	mov	r3, r2
 8002aa6:	009b      	lsls	r3, r3, #2
 8002aa8:	4413      	add	r3, r2
 8002aaa:	3b41      	subs	r3, #65	; 0x41
 8002aac:	221f      	movs	r2, #31
 8002aae:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab2:	43da      	mvns	r2, r3
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	400a      	ands	r2, r1
 8002aba:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	b29b      	uxth	r3, r3
 8002ac8:	4618      	mov	r0, r3
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	685a      	ldr	r2, [r3, #4]
 8002ace:	4613      	mov	r3, r2
 8002ad0:	009b      	lsls	r3, r3, #2
 8002ad2:	4413      	add	r3, r2
 8002ad4:	3b41      	subs	r3, #65	; 0x41
 8002ad6:	fa00 f203 	lsl.w	r2, r0, r3
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	430a      	orrs	r2, r1
 8002ae0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002ae2:	4b22      	ldr	r3, [pc, #136]	; (8002b6c <HAL_ADC_ConfigChannel+0x234>)
 8002ae4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	4a21      	ldr	r2, [pc, #132]	; (8002b70 <HAL_ADC_ConfigChannel+0x238>)
 8002aec:	4293      	cmp	r3, r2
 8002aee:	d109      	bne.n	8002b04 <HAL_ADC_ConfigChannel+0x1cc>
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	2b12      	cmp	r3, #18
 8002af6:	d105      	bne.n	8002b04 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	685b      	ldr	r3, [r3, #4]
 8002afc:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4a19      	ldr	r2, [pc, #100]	; (8002b70 <HAL_ADC_ConfigChannel+0x238>)
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d123      	bne.n	8002b56 <HAL_ADC_ConfigChannel+0x21e>
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	2b10      	cmp	r3, #16
 8002b14:	d003      	beq.n	8002b1e <HAL_ADC_ConfigChannel+0x1e6>
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	2b11      	cmp	r3, #17
 8002b1c:	d11b      	bne.n	8002b56 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	685b      	ldr	r3, [r3, #4]
 8002b22:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	2b10      	cmp	r3, #16
 8002b30:	d111      	bne.n	8002b56 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002b32:	4b10      	ldr	r3, [pc, #64]	; (8002b74 <HAL_ADC_ConfigChannel+0x23c>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	4a10      	ldr	r2, [pc, #64]	; (8002b78 <HAL_ADC_ConfigChannel+0x240>)
 8002b38:	fba2 2303 	umull	r2, r3, r2, r3
 8002b3c:	0c9a      	lsrs	r2, r3, #18
 8002b3e:	4613      	mov	r3, r2
 8002b40:	009b      	lsls	r3, r3, #2
 8002b42:	4413      	add	r3, r2
 8002b44:	005b      	lsls	r3, r3, #1
 8002b46:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002b48:	e002      	b.n	8002b50 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002b4a:	68bb      	ldr	r3, [r7, #8]
 8002b4c:	3b01      	subs	r3, #1
 8002b4e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002b50:	68bb      	ldr	r3, [r7, #8]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d1f9      	bne.n	8002b4a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	2200      	movs	r2, #0
 8002b5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002b5e:	2300      	movs	r3, #0
}
 8002b60:	4618      	mov	r0, r3
 8002b62:	3714      	adds	r7, #20
 8002b64:	46bd      	mov	sp, r7
 8002b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6a:	4770      	bx	lr
 8002b6c:	40012300 	.word	0x40012300
 8002b70:	40012000 	.word	0x40012000
 8002b74:	20000018 	.word	0x20000018
 8002b78:	431bde83 	.word	0x431bde83

08002b7c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	b085      	sub	sp, #20
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002b84:	4b79      	ldr	r3, [pc, #484]	; (8002d6c <ADC_Init+0x1f0>)
 8002b86:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	685b      	ldr	r3, [r3, #4]
 8002b8c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	685a      	ldr	r2, [r3, #4]
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	685b      	ldr	r3, [r3, #4]
 8002b9c:	431a      	orrs	r2, r3
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	685a      	ldr	r2, [r3, #4]
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002bb0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	6859      	ldr	r1, [r3, #4]
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	691b      	ldr	r3, [r3, #16]
 8002bbc:	021a      	lsls	r2, r3, #8
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	430a      	orrs	r2, r1
 8002bc4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	685a      	ldr	r2, [r3, #4]
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002bd4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	6859      	ldr	r1, [r3, #4]
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	689a      	ldr	r2, [r3, #8]
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	430a      	orrs	r2, r1
 8002be6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	689a      	ldr	r2, [r3, #8]
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002bf6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	6899      	ldr	r1, [r3, #8]
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	68da      	ldr	r2, [r3, #12]
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	430a      	orrs	r2, r1
 8002c08:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c0e:	4a58      	ldr	r2, [pc, #352]	; (8002d70 <ADC_Init+0x1f4>)
 8002c10:	4293      	cmp	r3, r2
 8002c12:	d022      	beq.n	8002c5a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	689a      	ldr	r2, [r3, #8]
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002c22:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	6899      	ldr	r1, [r3, #8]
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	430a      	orrs	r2, r1
 8002c34:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	689a      	ldr	r2, [r3, #8]
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002c44:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	6899      	ldr	r1, [r3, #8]
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	430a      	orrs	r2, r1
 8002c56:	609a      	str	r2, [r3, #8]
 8002c58:	e00f      	b.n	8002c7a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	689a      	ldr	r2, [r3, #8]
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002c68:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	689a      	ldr	r2, [r3, #8]
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002c78:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	689a      	ldr	r2, [r3, #8]
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f022 0202 	bic.w	r2, r2, #2
 8002c88:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	6899      	ldr	r1, [r3, #8]
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	7e1b      	ldrb	r3, [r3, #24]
 8002c94:	005a      	lsls	r2, r3, #1
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	430a      	orrs	r2, r1
 8002c9c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d01b      	beq.n	8002ce0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	685a      	ldr	r2, [r3, #4]
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002cb6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	685a      	ldr	r2, [r3, #4]
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002cc6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	6859      	ldr	r1, [r3, #4]
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cd2:	3b01      	subs	r3, #1
 8002cd4:	035a      	lsls	r2, r3, #13
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	430a      	orrs	r2, r1
 8002cdc:	605a      	str	r2, [r3, #4]
 8002cde:	e007      	b.n	8002cf0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	685a      	ldr	r2, [r3, #4]
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002cee:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002cfe:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	69db      	ldr	r3, [r3, #28]
 8002d0a:	3b01      	subs	r3, #1
 8002d0c:	051a      	lsls	r2, r3, #20
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	430a      	orrs	r2, r1
 8002d14:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	689a      	ldr	r2, [r3, #8]
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002d24:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	6899      	ldr	r1, [r3, #8]
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002d32:	025a      	lsls	r2, r3, #9
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	430a      	orrs	r2, r1
 8002d3a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	689a      	ldr	r2, [r3, #8]
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d4a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	6899      	ldr	r1, [r3, #8]
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	695b      	ldr	r3, [r3, #20]
 8002d56:	029a      	lsls	r2, r3, #10
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	430a      	orrs	r2, r1
 8002d5e:	609a      	str	r2, [r3, #8]
}
 8002d60:	bf00      	nop
 8002d62:	3714      	adds	r7, #20
 8002d64:	46bd      	mov	sp, r7
 8002d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6a:	4770      	bx	lr
 8002d6c:	40012300 	.word	0x40012300
 8002d70:	0f000001 	.word	0x0f000001

08002d74 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d74:	b480      	push	{r7}
 8002d76:	b085      	sub	sp, #20
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	f003 0307 	and.w	r3, r3, #7
 8002d82:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d84:	4b0c      	ldr	r3, [pc, #48]	; (8002db8 <__NVIC_SetPriorityGrouping+0x44>)
 8002d86:	68db      	ldr	r3, [r3, #12]
 8002d88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d8a:	68ba      	ldr	r2, [r7, #8]
 8002d8c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002d90:	4013      	ands	r3, r2
 8002d92:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d98:	68bb      	ldr	r3, [r7, #8]
 8002d9a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002d9c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002da0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002da4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002da6:	4a04      	ldr	r2, [pc, #16]	; (8002db8 <__NVIC_SetPriorityGrouping+0x44>)
 8002da8:	68bb      	ldr	r3, [r7, #8]
 8002daa:	60d3      	str	r3, [r2, #12]
}
 8002dac:	bf00      	nop
 8002dae:	3714      	adds	r7, #20
 8002db0:	46bd      	mov	sp, r7
 8002db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db6:	4770      	bx	lr
 8002db8:	e000ed00 	.word	0xe000ed00

08002dbc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002dc0:	4b04      	ldr	r3, [pc, #16]	; (8002dd4 <__NVIC_GetPriorityGrouping+0x18>)
 8002dc2:	68db      	ldr	r3, [r3, #12]
 8002dc4:	0a1b      	lsrs	r3, r3, #8
 8002dc6:	f003 0307 	and.w	r3, r3, #7
}
 8002dca:	4618      	mov	r0, r3
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd2:	4770      	bx	lr
 8002dd4:	e000ed00 	.word	0xe000ed00

08002dd8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002dd8:	b480      	push	{r7}
 8002dda:	b083      	sub	sp, #12
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	4603      	mov	r3, r0
 8002de0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002de2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	db0b      	blt.n	8002e02 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002dea:	79fb      	ldrb	r3, [r7, #7]
 8002dec:	f003 021f 	and.w	r2, r3, #31
 8002df0:	4907      	ldr	r1, [pc, #28]	; (8002e10 <__NVIC_EnableIRQ+0x38>)
 8002df2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002df6:	095b      	lsrs	r3, r3, #5
 8002df8:	2001      	movs	r0, #1
 8002dfa:	fa00 f202 	lsl.w	r2, r0, r2
 8002dfe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002e02:	bf00      	nop
 8002e04:	370c      	adds	r7, #12
 8002e06:	46bd      	mov	sp, r7
 8002e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0c:	4770      	bx	lr
 8002e0e:	bf00      	nop
 8002e10:	e000e100 	.word	0xe000e100

08002e14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002e14:	b480      	push	{r7}
 8002e16:	b083      	sub	sp, #12
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	6039      	str	r1, [r7, #0]
 8002e1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	db0a      	blt.n	8002e3e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	b2da      	uxtb	r2, r3
 8002e2c:	490c      	ldr	r1, [pc, #48]	; (8002e60 <__NVIC_SetPriority+0x4c>)
 8002e2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e32:	0112      	lsls	r2, r2, #4
 8002e34:	b2d2      	uxtb	r2, r2
 8002e36:	440b      	add	r3, r1
 8002e38:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002e3c:	e00a      	b.n	8002e54 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	b2da      	uxtb	r2, r3
 8002e42:	4908      	ldr	r1, [pc, #32]	; (8002e64 <__NVIC_SetPriority+0x50>)
 8002e44:	79fb      	ldrb	r3, [r7, #7]
 8002e46:	f003 030f 	and.w	r3, r3, #15
 8002e4a:	3b04      	subs	r3, #4
 8002e4c:	0112      	lsls	r2, r2, #4
 8002e4e:	b2d2      	uxtb	r2, r2
 8002e50:	440b      	add	r3, r1
 8002e52:	761a      	strb	r2, [r3, #24]
}
 8002e54:	bf00      	nop
 8002e56:	370c      	adds	r7, #12
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5e:	4770      	bx	lr
 8002e60:	e000e100 	.word	0xe000e100
 8002e64:	e000ed00 	.word	0xe000ed00

08002e68 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e68:	b480      	push	{r7}
 8002e6a:	b089      	sub	sp, #36	; 0x24
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	60f8      	str	r0, [r7, #12]
 8002e70:	60b9      	str	r1, [r7, #8]
 8002e72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	f003 0307 	and.w	r3, r3, #7
 8002e7a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e7c:	69fb      	ldr	r3, [r7, #28]
 8002e7e:	f1c3 0307 	rsb	r3, r3, #7
 8002e82:	2b04      	cmp	r3, #4
 8002e84:	bf28      	it	cs
 8002e86:	2304      	movcs	r3, #4
 8002e88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e8a:	69fb      	ldr	r3, [r7, #28]
 8002e8c:	3304      	adds	r3, #4
 8002e8e:	2b06      	cmp	r3, #6
 8002e90:	d902      	bls.n	8002e98 <NVIC_EncodePriority+0x30>
 8002e92:	69fb      	ldr	r3, [r7, #28]
 8002e94:	3b03      	subs	r3, #3
 8002e96:	e000      	b.n	8002e9a <NVIC_EncodePriority+0x32>
 8002e98:	2300      	movs	r3, #0
 8002e9a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e9c:	f04f 32ff 	mov.w	r2, #4294967295
 8002ea0:	69bb      	ldr	r3, [r7, #24]
 8002ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea6:	43da      	mvns	r2, r3
 8002ea8:	68bb      	ldr	r3, [r7, #8]
 8002eaa:	401a      	ands	r2, r3
 8002eac:	697b      	ldr	r3, [r7, #20]
 8002eae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002eb0:	f04f 31ff 	mov.w	r1, #4294967295
 8002eb4:	697b      	ldr	r3, [r7, #20]
 8002eb6:	fa01 f303 	lsl.w	r3, r1, r3
 8002eba:	43d9      	mvns	r1, r3
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ec0:	4313      	orrs	r3, r2
         );
}
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	3724      	adds	r7, #36	; 0x24
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ecc:	4770      	bx	lr
	...

08002ed0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b082      	sub	sp, #8
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	3b01      	subs	r3, #1
 8002edc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002ee0:	d301      	bcc.n	8002ee6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	e00f      	b.n	8002f06 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002ee6:	4a0a      	ldr	r2, [pc, #40]	; (8002f10 <SysTick_Config+0x40>)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	3b01      	subs	r3, #1
 8002eec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002eee:	210f      	movs	r1, #15
 8002ef0:	f04f 30ff 	mov.w	r0, #4294967295
 8002ef4:	f7ff ff8e 	bl	8002e14 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ef8:	4b05      	ldr	r3, [pc, #20]	; (8002f10 <SysTick_Config+0x40>)
 8002efa:	2200      	movs	r2, #0
 8002efc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002efe:	4b04      	ldr	r3, [pc, #16]	; (8002f10 <SysTick_Config+0x40>)
 8002f00:	2207      	movs	r2, #7
 8002f02:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002f04:	2300      	movs	r3, #0
}
 8002f06:	4618      	mov	r0, r3
 8002f08:	3708      	adds	r7, #8
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	bd80      	pop	{r7, pc}
 8002f0e:	bf00      	nop
 8002f10:	e000e010 	.word	0xe000e010

08002f14 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b082      	sub	sp, #8
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002f1c:	6878      	ldr	r0, [r7, #4]
 8002f1e:	f7ff ff29 	bl	8002d74 <__NVIC_SetPriorityGrouping>
}
 8002f22:	bf00      	nop
 8002f24:	3708      	adds	r7, #8
 8002f26:	46bd      	mov	sp, r7
 8002f28:	bd80      	pop	{r7, pc}

08002f2a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002f2a:	b580      	push	{r7, lr}
 8002f2c:	b086      	sub	sp, #24
 8002f2e:	af00      	add	r7, sp, #0
 8002f30:	4603      	mov	r3, r0
 8002f32:	60b9      	str	r1, [r7, #8]
 8002f34:	607a      	str	r2, [r7, #4]
 8002f36:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002f38:	2300      	movs	r3, #0
 8002f3a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002f3c:	f7ff ff3e 	bl	8002dbc <__NVIC_GetPriorityGrouping>
 8002f40:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002f42:	687a      	ldr	r2, [r7, #4]
 8002f44:	68b9      	ldr	r1, [r7, #8]
 8002f46:	6978      	ldr	r0, [r7, #20]
 8002f48:	f7ff ff8e 	bl	8002e68 <NVIC_EncodePriority>
 8002f4c:	4602      	mov	r2, r0
 8002f4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f52:	4611      	mov	r1, r2
 8002f54:	4618      	mov	r0, r3
 8002f56:	f7ff ff5d 	bl	8002e14 <__NVIC_SetPriority>
}
 8002f5a:	bf00      	nop
 8002f5c:	3718      	adds	r7, #24
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	bd80      	pop	{r7, pc}

08002f62 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f62:	b580      	push	{r7, lr}
 8002f64:	b082      	sub	sp, #8
 8002f66:	af00      	add	r7, sp, #0
 8002f68:	4603      	mov	r3, r0
 8002f6a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002f6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f70:	4618      	mov	r0, r3
 8002f72:	f7ff ff31 	bl	8002dd8 <__NVIC_EnableIRQ>
}
 8002f76:	bf00      	nop
 8002f78:	3708      	adds	r7, #8
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	bd80      	pop	{r7, pc}

08002f7e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002f7e:	b580      	push	{r7, lr}
 8002f80:	b082      	sub	sp, #8
 8002f82:	af00      	add	r7, sp, #0
 8002f84:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002f86:	6878      	ldr	r0, [r7, #4]
 8002f88:	f7ff ffa2 	bl	8002ed0 <SysTick_Config>
 8002f8c:	4603      	mov	r3, r0
}
 8002f8e:	4618      	mov	r0, r3
 8002f90:	3708      	adds	r7, #8
 8002f92:	46bd      	mov	sp, r7
 8002f94:	bd80      	pop	{r7, pc}

08002f96 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8002f96:	b580      	push	{r7, lr}
 8002f98:	b082      	sub	sp, #8
 8002f9a:	af00      	add	r7, sp, #0
 8002f9c:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d101      	bne.n	8002fa8 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8002fa4:	2301      	movs	r3, #1
 8002fa6:	e014      	b.n	8002fd2 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	791b      	ldrb	r3, [r3, #4]
 8002fac:	b2db      	uxtb	r3, r3
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d105      	bne.n	8002fbe <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002fb8:	6878      	ldr	r0, [r7, #4]
 8002fba:	f7fe f969 	bl	8001290 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	2202      	movs	r2, #2
 8002fc2:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	2201      	movs	r2, #1
 8002fce:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002fd0:	2300      	movs	r3, #0
}
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	3708      	adds	r7, #8
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	bd80      	pop	{r7, pc}

08002fda <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8002fda:	b480      	push	{r7}
 8002fdc:	b087      	sub	sp, #28
 8002fde:	af00      	add	r7, sp, #0
 8002fe0:	60f8      	str	r0, [r7, #12]
 8002fe2:	60b9      	str	r1, [r7, #8]
 8002fe4:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	795b      	ldrb	r3, [r3, #5]
 8002fea:	2b01      	cmp	r3, #1
 8002fec:	d101      	bne.n	8002ff2 <HAL_DAC_ConfigChannel+0x18>
 8002fee:	2302      	movs	r3, #2
 8002ff0:	e03c      	b.n	800306c <HAL_DAC_ConfigChannel+0x92>
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	2201      	movs	r2, #1
 8002ff6:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	2202      	movs	r2, #2
 8002ffc:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	f003 0310 	and.w	r3, r3, #16
 800300c:	f640 72fe 	movw	r2, #4094	; 0xffe
 8003010:	fa02 f303 	lsl.w	r3, r2, r3
 8003014:	43db      	mvns	r3, r3
 8003016:	697a      	ldr	r2, [r7, #20]
 8003018:	4013      	ands	r3, r2
 800301a:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 800301c:	68bb      	ldr	r3, [r7, #8]
 800301e:	681a      	ldr	r2, [r3, #0]
 8003020:	68bb      	ldr	r3, [r7, #8]
 8003022:	685b      	ldr	r3, [r3, #4]
 8003024:	4313      	orrs	r3, r2
 8003026:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	f003 0310 	and.w	r3, r3, #16
 800302e:	693a      	ldr	r2, [r7, #16]
 8003030:	fa02 f303 	lsl.w	r3, r2, r3
 8003034:	697a      	ldr	r2, [r7, #20]
 8003036:	4313      	orrs	r3, r2
 8003038:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	697a      	ldr	r2, [r7, #20]
 8003040:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	6819      	ldr	r1, [r3, #0]
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	f003 0310 	and.w	r3, r3, #16
 800304e:	22c0      	movs	r2, #192	; 0xc0
 8003050:	fa02 f303 	lsl.w	r3, r2, r3
 8003054:	43da      	mvns	r2, r3
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	400a      	ands	r2, r1
 800305c:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	2201      	movs	r2, #1
 8003062:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	2200      	movs	r2, #0
 8003068:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800306a:	2300      	movs	r3, #0
}
 800306c:	4618      	mov	r0, r3
 800306e:	371c      	adds	r7, #28
 8003070:	46bd      	mov	sp, r7
 8003072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003076:	4770      	bx	lr

08003078 <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	b082      	sub	sp, #8
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if(hdcmi == NULL)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2b00      	cmp	r3, #0
 8003084:	d101      	bne.n	800308a <HAL_DCMI_Init+0x12>
  {
     return HAL_ERROR;
 8003086:	2301      	movs	r3, #1
 8003088:	e05f      	b.n	800314a <HAL_DCMI_Init+0xd2>
  assert_param(IS_DCMI_BYTE_SELECT_MODE(hdcmi->Init.ByteSelectMode));
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));
#endif /* STM32F446xx || STM32F469xx || STM32F479xx */
  if(hdcmi->State == HAL_DCMI_STATE_RESET)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003090:	b2db      	uxtb	r3, r3
 8003092:	2b00      	cmp	r3, #0
 8003094:	d109      	bne.n	80030aa <HAL_DCMI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hdcmi->Lock = HAL_UNLOCKED;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2200      	movs	r2, #0
 800309a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 800309e:	6878      	ldr	r0, [r7, #4]
 80030a0:	f7fe f93a 	bl	8001318 <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
    HAL_DCMI_MspInit(hdcmi);
 80030a4:	6878      	ldr	r0, [r7, #4]
 80030a6:	f7fe f937 	bl	8001318 <HAL_DCMI_MspInit>
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2202      	movs	r2, #2
 80030ae:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
                          /* Configures the HS, VS, DE and PC polarity */
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 |\
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	687a      	ldr	r2, [r7, #4]
 80030ba:	6812      	ldr	r2, [r2, #0]
 80030bc:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80030c0:	f023 0308 	bic.w	r3, r3, #8
 80030c4:	6013      	str	r3, [r2, #0]
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx)
                           | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS |\
                           DCMI_CR_LSM | DCMI_CR_OELS
#endif /* STM32F446xx || STM32F469xx || STM32F479xx */
                           );
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	6819      	ldr	r1, [r3, #0]
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	685a      	ldr	r2, [r3, #4]
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	695b      	ldr	r3, [r3, #20]
 80030d4:	431a      	orrs	r2, r3
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 80030da:	431a      	orrs	r2, r3
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	691b      	ldr	r3, [r3, #16]
 80030e0:	431a      	orrs	r2, r3
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	689b      	ldr	r3, [r3, #8]
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 80030e6:	431a      	orrs	r2, r3
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	699b      	ldr	r3, [r3, #24]
 80030ec:	431a      	orrs	r2, r3
                                     hdcmi->Init.JPEGMode
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6a1b      	ldr	r3, [r3, #32]
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 80030f2:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	430a      	orrs	r2, r1
 80030fa:	601a      	str	r2, [r3, #0]
                                     | hdcmi->Init.ByteSelectMode |\
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
                                     hdcmi->Init.LineSelectStart
#endif /* STM32F446xx || STM32F469xx || STM32F479xx */
                                     );
  if(hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	685b      	ldr	r3, [r3, #4]
 8003100:	2b10      	cmp	r3, #16
 8003102:	d112      	bne.n	800312a <HAL_DCMI_Init+0xb2>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	7f1b      	ldrb	r3, [r3, #28]
 8003108:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_POSITION_ESCR_LSC)|
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	7f5b      	ldrb	r3, [r3, #29]
 800310e:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |
 8003110:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_POSITION_ESCR_LEC) |
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	7f9b      	ldrb	r3, [r3, #30]
 8003116:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_POSITION_ESCR_LSC)|
 8003118:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_POSITION_ESCR_FEC));
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	7fdb      	ldrb	r3, [r3, #31]
 8003120:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_POSITION_ESCR_LEC) |
 8003126:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |
 8003128:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	68da      	ldr	r2, [r3, #12]
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f042 021e 	orr.w	r2, r2, #30
 8003138:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	2200      	movs	r2, #0
 800313e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2201      	movs	r2, #1
 8003144:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  return HAL_OK;
 8003148:	2300      	movs	r3, #0
}
 800314a:	4618      	mov	r0, r3
 800314c:	3708      	adds	r7, #8
 800314e:	46bd      	mov	sp, r7
 8003150:	bd80      	pop	{r7, pc}
	...

08003154 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003154:	b480      	push	{r7}
 8003156:	b089      	sub	sp, #36	; 0x24
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
 800315c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800315e:	2300      	movs	r3, #0
 8003160:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003162:	2300      	movs	r3, #0
 8003164:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003166:	2300      	movs	r3, #0
 8003168:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800316a:	2300      	movs	r3, #0
 800316c:	61fb      	str	r3, [r7, #28]
 800316e:	e16b      	b.n	8003448 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003170:	2201      	movs	r2, #1
 8003172:	69fb      	ldr	r3, [r7, #28]
 8003174:	fa02 f303 	lsl.w	r3, r2, r3
 8003178:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	697a      	ldr	r2, [r7, #20]
 8003180:	4013      	ands	r3, r2
 8003182:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003184:	693a      	ldr	r2, [r7, #16]
 8003186:	697b      	ldr	r3, [r7, #20]
 8003188:	429a      	cmp	r2, r3
 800318a:	f040 815a 	bne.w	8003442 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	685b      	ldr	r3, [r3, #4]
 8003192:	f003 0303 	and.w	r3, r3, #3
 8003196:	2b01      	cmp	r3, #1
 8003198:	d005      	beq.n	80031a6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	685b      	ldr	r3, [r3, #4]
 800319e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80031a2:	2b02      	cmp	r3, #2
 80031a4:	d130      	bne.n	8003208 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	689b      	ldr	r3, [r3, #8]
 80031aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80031ac:	69fb      	ldr	r3, [r7, #28]
 80031ae:	005b      	lsls	r3, r3, #1
 80031b0:	2203      	movs	r2, #3
 80031b2:	fa02 f303 	lsl.w	r3, r2, r3
 80031b6:	43db      	mvns	r3, r3
 80031b8:	69ba      	ldr	r2, [r7, #24]
 80031ba:	4013      	ands	r3, r2
 80031bc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	68da      	ldr	r2, [r3, #12]
 80031c2:	69fb      	ldr	r3, [r7, #28]
 80031c4:	005b      	lsls	r3, r3, #1
 80031c6:	fa02 f303 	lsl.w	r3, r2, r3
 80031ca:	69ba      	ldr	r2, [r7, #24]
 80031cc:	4313      	orrs	r3, r2
 80031ce:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	69ba      	ldr	r2, [r7, #24]
 80031d4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	685b      	ldr	r3, [r3, #4]
 80031da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80031dc:	2201      	movs	r2, #1
 80031de:	69fb      	ldr	r3, [r7, #28]
 80031e0:	fa02 f303 	lsl.w	r3, r2, r3
 80031e4:	43db      	mvns	r3, r3
 80031e6:	69ba      	ldr	r2, [r7, #24]
 80031e8:	4013      	ands	r3, r2
 80031ea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	685b      	ldr	r3, [r3, #4]
 80031f0:	091b      	lsrs	r3, r3, #4
 80031f2:	f003 0201 	and.w	r2, r3, #1
 80031f6:	69fb      	ldr	r3, [r7, #28]
 80031f8:	fa02 f303 	lsl.w	r3, r2, r3
 80031fc:	69ba      	ldr	r2, [r7, #24]
 80031fe:	4313      	orrs	r3, r2
 8003200:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	69ba      	ldr	r2, [r7, #24]
 8003206:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	f003 0303 	and.w	r3, r3, #3
 8003210:	2b03      	cmp	r3, #3
 8003212:	d017      	beq.n	8003244 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	68db      	ldr	r3, [r3, #12]
 8003218:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800321a:	69fb      	ldr	r3, [r7, #28]
 800321c:	005b      	lsls	r3, r3, #1
 800321e:	2203      	movs	r2, #3
 8003220:	fa02 f303 	lsl.w	r3, r2, r3
 8003224:	43db      	mvns	r3, r3
 8003226:	69ba      	ldr	r2, [r7, #24]
 8003228:	4013      	ands	r3, r2
 800322a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	689a      	ldr	r2, [r3, #8]
 8003230:	69fb      	ldr	r3, [r7, #28]
 8003232:	005b      	lsls	r3, r3, #1
 8003234:	fa02 f303 	lsl.w	r3, r2, r3
 8003238:	69ba      	ldr	r2, [r7, #24]
 800323a:	4313      	orrs	r3, r2
 800323c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	69ba      	ldr	r2, [r7, #24]
 8003242:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	685b      	ldr	r3, [r3, #4]
 8003248:	f003 0303 	and.w	r3, r3, #3
 800324c:	2b02      	cmp	r3, #2
 800324e:	d123      	bne.n	8003298 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003250:	69fb      	ldr	r3, [r7, #28]
 8003252:	08da      	lsrs	r2, r3, #3
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	3208      	adds	r2, #8
 8003258:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800325c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800325e:	69fb      	ldr	r3, [r7, #28]
 8003260:	f003 0307 	and.w	r3, r3, #7
 8003264:	009b      	lsls	r3, r3, #2
 8003266:	220f      	movs	r2, #15
 8003268:	fa02 f303 	lsl.w	r3, r2, r3
 800326c:	43db      	mvns	r3, r3
 800326e:	69ba      	ldr	r2, [r7, #24]
 8003270:	4013      	ands	r3, r2
 8003272:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	691a      	ldr	r2, [r3, #16]
 8003278:	69fb      	ldr	r3, [r7, #28]
 800327a:	f003 0307 	and.w	r3, r3, #7
 800327e:	009b      	lsls	r3, r3, #2
 8003280:	fa02 f303 	lsl.w	r3, r2, r3
 8003284:	69ba      	ldr	r2, [r7, #24]
 8003286:	4313      	orrs	r3, r2
 8003288:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800328a:	69fb      	ldr	r3, [r7, #28]
 800328c:	08da      	lsrs	r2, r3, #3
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	3208      	adds	r2, #8
 8003292:	69b9      	ldr	r1, [r7, #24]
 8003294:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800329e:	69fb      	ldr	r3, [r7, #28]
 80032a0:	005b      	lsls	r3, r3, #1
 80032a2:	2203      	movs	r2, #3
 80032a4:	fa02 f303 	lsl.w	r3, r2, r3
 80032a8:	43db      	mvns	r3, r3
 80032aa:	69ba      	ldr	r2, [r7, #24]
 80032ac:	4013      	ands	r3, r2
 80032ae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	685b      	ldr	r3, [r3, #4]
 80032b4:	f003 0203 	and.w	r2, r3, #3
 80032b8:	69fb      	ldr	r3, [r7, #28]
 80032ba:	005b      	lsls	r3, r3, #1
 80032bc:	fa02 f303 	lsl.w	r3, r2, r3
 80032c0:	69ba      	ldr	r2, [r7, #24]
 80032c2:	4313      	orrs	r3, r2
 80032c4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	69ba      	ldr	r2, [r7, #24]
 80032ca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	685b      	ldr	r3, [r3, #4]
 80032d0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	f000 80b4 	beq.w	8003442 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80032da:	2300      	movs	r3, #0
 80032dc:	60fb      	str	r3, [r7, #12]
 80032de:	4b60      	ldr	r3, [pc, #384]	; (8003460 <HAL_GPIO_Init+0x30c>)
 80032e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032e2:	4a5f      	ldr	r2, [pc, #380]	; (8003460 <HAL_GPIO_Init+0x30c>)
 80032e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80032e8:	6453      	str	r3, [r2, #68]	; 0x44
 80032ea:	4b5d      	ldr	r3, [pc, #372]	; (8003460 <HAL_GPIO_Init+0x30c>)
 80032ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80032f2:	60fb      	str	r3, [r7, #12]
 80032f4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80032f6:	4a5b      	ldr	r2, [pc, #364]	; (8003464 <HAL_GPIO_Init+0x310>)
 80032f8:	69fb      	ldr	r3, [r7, #28]
 80032fa:	089b      	lsrs	r3, r3, #2
 80032fc:	3302      	adds	r3, #2
 80032fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003302:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003304:	69fb      	ldr	r3, [r7, #28]
 8003306:	f003 0303 	and.w	r3, r3, #3
 800330a:	009b      	lsls	r3, r3, #2
 800330c:	220f      	movs	r2, #15
 800330e:	fa02 f303 	lsl.w	r3, r2, r3
 8003312:	43db      	mvns	r3, r3
 8003314:	69ba      	ldr	r2, [r7, #24]
 8003316:	4013      	ands	r3, r2
 8003318:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	4a52      	ldr	r2, [pc, #328]	; (8003468 <HAL_GPIO_Init+0x314>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d02b      	beq.n	800337a <HAL_GPIO_Init+0x226>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	4a51      	ldr	r2, [pc, #324]	; (800346c <HAL_GPIO_Init+0x318>)
 8003326:	4293      	cmp	r3, r2
 8003328:	d025      	beq.n	8003376 <HAL_GPIO_Init+0x222>
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	4a50      	ldr	r2, [pc, #320]	; (8003470 <HAL_GPIO_Init+0x31c>)
 800332e:	4293      	cmp	r3, r2
 8003330:	d01f      	beq.n	8003372 <HAL_GPIO_Init+0x21e>
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	4a4f      	ldr	r2, [pc, #316]	; (8003474 <HAL_GPIO_Init+0x320>)
 8003336:	4293      	cmp	r3, r2
 8003338:	d019      	beq.n	800336e <HAL_GPIO_Init+0x21a>
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	4a4e      	ldr	r2, [pc, #312]	; (8003478 <HAL_GPIO_Init+0x324>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d013      	beq.n	800336a <HAL_GPIO_Init+0x216>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	4a4d      	ldr	r2, [pc, #308]	; (800347c <HAL_GPIO_Init+0x328>)
 8003346:	4293      	cmp	r3, r2
 8003348:	d00d      	beq.n	8003366 <HAL_GPIO_Init+0x212>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	4a4c      	ldr	r2, [pc, #304]	; (8003480 <HAL_GPIO_Init+0x32c>)
 800334e:	4293      	cmp	r3, r2
 8003350:	d007      	beq.n	8003362 <HAL_GPIO_Init+0x20e>
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	4a4b      	ldr	r2, [pc, #300]	; (8003484 <HAL_GPIO_Init+0x330>)
 8003356:	4293      	cmp	r3, r2
 8003358:	d101      	bne.n	800335e <HAL_GPIO_Init+0x20a>
 800335a:	2307      	movs	r3, #7
 800335c:	e00e      	b.n	800337c <HAL_GPIO_Init+0x228>
 800335e:	2308      	movs	r3, #8
 8003360:	e00c      	b.n	800337c <HAL_GPIO_Init+0x228>
 8003362:	2306      	movs	r3, #6
 8003364:	e00a      	b.n	800337c <HAL_GPIO_Init+0x228>
 8003366:	2305      	movs	r3, #5
 8003368:	e008      	b.n	800337c <HAL_GPIO_Init+0x228>
 800336a:	2304      	movs	r3, #4
 800336c:	e006      	b.n	800337c <HAL_GPIO_Init+0x228>
 800336e:	2303      	movs	r3, #3
 8003370:	e004      	b.n	800337c <HAL_GPIO_Init+0x228>
 8003372:	2302      	movs	r3, #2
 8003374:	e002      	b.n	800337c <HAL_GPIO_Init+0x228>
 8003376:	2301      	movs	r3, #1
 8003378:	e000      	b.n	800337c <HAL_GPIO_Init+0x228>
 800337a:	2300      	movs	r3, #0
 800337c:	69fa      	ldr	r2, [r7, #28]
 800337e:	f002 0203 	and.w	r2, r2, #3
 8003382:	0092      	lsls	r2, r2, #2
 8003384:	4093      	lsls	r3, r2
 8003386:	69ba      	ldr	r2, [r7, #24]
 8003388:	4313      	orrs	r3, r2
 800338a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800338c:	4935      	ldr	r1, [pc, #212]	; (8003464 <HAL_GPIO_Init+0x310>)
 800338e:	69fb      	ldr	r3, [r7, #28]
 8003390:	089b      	lsrs	r3, r3, #2
 8003392:	3302      	adds	r3, #2
 8003394:	69ba      	ldr	r2, [r7, #24]
 8003396:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800339a:	4b3b      	ldr	r3, [pc, #236]	; (8003488 <HAL_GPIO_Init+0x334>)
 800339c:	689b      	ldr	r3, [r3, #8]
 800339e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033a0:	693b      	ldr	r3, [r7, #16]
 80033a2:	43db      	mvns	r3, r3
 80033a4:	69ba      	ldr	r2, [r7, #24]
 80033a6:	4013      	ands	r3, r2
 80033a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	685b      	ldr	r3, [r3, #4]
 80033ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d003      	beq.n	80033be <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80033b6:	69ba      	ldr	r2, [r7, #24]
 80033b8:	693b      	ldr	r3, [r7, #16]
 80033ba:	4313      	orrs	r3, r2
 80033bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80033be:	4a32      	ldr	r2, [pc, #200]	; (8003488 <HAL_GPIO_Init+0x334>)
 80033c0:	69bb      	ldr	r3, [r7, #24]
 80033c2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80033c4:	4b30      	ldr	r3, [pc, #192]	; (8003488 <HAL_GPIO_Init+0x334>)
 80033c6:	68db      	ldr	r3, [r3, #12]
 80033c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033ca:	693b      	ldr	r3, [r7, #16]
 80033cc:	43db      	mvns	r3, r3
 80033ce:	69ba      	ldr	r2, [r7, #24]
 80033d0:	4013      	ands	r3, r2
 80033d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	685b      	ldr	r3, [r3, #4]
 80033d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d003      	beq.n	80033e8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80033e0:	69ba      	ldr	r2, [r7, #24]
 80033e2:	693b      	ldr	r3, [r7, #16]
 80033e4:	4313      	orrs	r3, r2
 80033e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80033e8:	4a27      	ldr	r2, [pc, #156]	; (8003488 <HAL_GPIO_Init+0x334>)
 80033ea:	69bb      	ldr	r3, [r7, #24]
 80033ec:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80033ee:	4b26      	ldr	r3, [pc, #152]	; (8003488 <HAL_GPIO_Init+0x334>)
 80033f0:	685b      	ldr	r3, [r3, #4]
 80033f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033f4:	693b      	ldr	r3, [r7, #16]
 80033f6:	43db      	mvns	r3, r3
 80033f8:	69ba      	ldr	r2, [r7, #24]
 80033fa:	4013      	ands	r3, r2
 80033fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	685b      	ldr	r3, [r3, #4]
 8003402:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003406:	2b00      	cmp	r3, #0
 8003408:	d003      	beq.n	8003412 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800340a:	69ba      	ldr	r2, [r7, #24]
 800340c:	693b      	ldr	r3, [r7, #16]
 800340e:	4313      	orrs	r3, r2
 8003410:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003412:	4a1d      	ldr	r2, [pc, #116]	; (8003488 <HAL_GPIO_Init+0x334>)
 8003414:	69bb      	ldr	r3, [r7, #24]
 8003416:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003418:	4b1b      	ldr	r3, [pc, #108]	; (8003488 <HAL_GPIO_Init+0x334>)
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800341e:	693b      	ldr	r3, [r7, #16]
 8003420:	43db      	mvns	r3, r3
 8003422:	69ba      	ldr	r2, [r7, #24]
 8003424:	4013      	ands	r3, r2
 8003426:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	685b      	ldr	r3, [r3, #4]
 800342c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003430:	2b00      	cmp	r3, #0
 8003432:	d003      	beq.n	800343c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003434:	69ba      	ldr	r2, [r7, #24]
 8003436:	693b      	ldr	r3, [r7, #16]
 8003438:	4313      	orrs	r3, r2
 800343a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800343c:	4a12      	ldr	r2, [pc, #72]	; (8003488 <HAL_GPIO_Init+0x334>)
 800343e:	69bb      	ldr	r3, [r7, #24]
 8003440:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003442:	69fb      	ldr	r3, [r7, #28]
 8003444:	3301      	adds	r3, #1
 8003446:	61fb      	str	r3, [r7, #28]
 8003448:	69fb      	ldr	r3, [r7, #28]
 800344a:	2b0f      	cmp	r3, #15
 800344c:	f67f ae90 	bls.w	8003170 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003450:	bf00      	nop
 8003452:	bf00      	nop
 8003454:	3724      	adds	r7, #36	; 0x24
 8003456:	46bd      	mov	sp, r7
 8003458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345c:	4770      	bx	lr
 800345e:	bf00      	nop
 8003460:	40023800 	.word	0x40023800
 8003464:	40013800 	.word	0x40013800
 8003468:	40020000 	.word	0x40020000
 800346c:	40020400 	.word	0x40020400
 8003470:	40020800 	.word	0x40020800
 8003474:	40020c00 	.word	0x40020c00
 8003478:	40021000 	.word	0x40021000
 800347c:	40021400 	.word	0x40021400
 8003480:	40021800 	.word	0x40021800
 8003484:	40021c00 	.word	0x40021c00
 8003488:	40013c00 	.word	0x40013c00

0800348c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800348c:	b480      	push	{r7}
 800348e:	b085      	sub	sp, #20
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
 8003494:	460b      	mov	r3, r1
 8003496:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	691a      	ldr	r2, [r3, #16]
 800349c:	887b      	ldrh	r3, [r7, #2]
 800349e:	4013      	ands	r3, r2
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d002      	beq.n	80034aa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80034a4:	2301      	movs	r3, #1
 80034a6:	73fb      	strb	r3, [r7, #15]
 80034a8:	e001      	b.n	80034ae <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80034aa:	2300      	movs	r3, #0
 80034ac:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80034ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80034b0:	4618      	mov	r0, r3
 80034b2:	3714      	adds	r7, #20
 80034b4:	46bd      	mov	sp, r7
 80034b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ba:	4770      	bx	lr

080034bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80034bc:	b480      	push	{r7}
 80034be:	b083      	sub	sp, #12
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
 80034c4:	460b      	mov	r3, r1
 80034c6:	807b      	strh	r3, [r7, #2]
 80034c8:	4613      	mov	r3, r2
 80034ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80034cc:	787b      	ldrb	r3, [r7, #1]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d003      	beq.n	80034da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80034d2:	887a      	ldrh	r2, [r7, #2]
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80034d8:	e003      	b.n	80034e2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80034da:	887b      	ldrh	r3, [r7, #2]
 80034dc:	041a      	lsls	r2, r3, #16
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	619a      	str	r2, [r3, #24]
}
 80034e2:	bf00      	nop
 80034e4:	370c      	adds	r7, #12
 80034e6:	46bd      	mov	sp, r7
 80034e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ec:	4770      	bx	lr
	...

080034f0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b084      	sub	sp, #16
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d101      	bne.n	8003502 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80034fe:	2301      	movs	r3, #1
 8003500:	e12b      	b.n	800375a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003508:	b2db      	uxtb	r3, r3
 800350a:	2b00      	cmp	r3, #0
 800350c:	d106      	bne.n	800351c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	2200      	movs	r2, #0
 8003512:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003516:	6878      	ldr	r0, [r7, #4]
 8003518:	f7fd ff86 	bl	8001428 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2224      	movs	r2, #36	; 0x24
 8003520:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	681a      	ldr	r2, [r3, #0]
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f022 0201 	bic.w	r2, r2, #1
 8003532:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	681a      	ldr	r2, [r3, #0]
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003542:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	681a      	ldr	r2, [r3, #0]
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003552:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003554:	f002 f91a 	bl	800578c <HAL_RCC_GetPCLK1Freq>
 8003558:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	685b      	ldr	r3, [r3, #4]
 800355e:	4a81      	ldr	r2, [pc, #516]	; (8003764 <HAL_I2C_Init+0x274>)
 8003560:	4293      	cmp	r3, r2
 8003562:	d807      	bhi.n	8003574 <HAL_I2C_Init+0x84>
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	4a80      	ldr	r2, [pc, #512]	; (8003768 <HAL_I2C_Init+0x278>)
 8003568:	4293      	cmp	r3, r2
 800356a:	bf94      	ite	ls
 800356c:	2301      	movls	r3, #1
 800356e:	2300      	movhi	r3, #0
 8003570:	b2db      	uxtb	r3, r3
 8003572:	e006      	b.n	8003582 <HAL_I2C_Init+0x92>
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	4a7d      	ldr	r2, [pc, #500]	; (800376c <HAL_I2C_Init+0x27c>)
 8003578:	4293      	cmp	r3, r2
 800357a:	bf94      	ite	ls
 800357c:	2301      	movls	r3, #1
 800357e:	2300      	movhi	r3, #0
 8003580:	b2db      	uxtb	r3, r3
 8003582:	2b00      	cmp	r3, #0
 8003584:	d001      	beq.n	800358a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003586:	2301      	movs	r3, #1
 8003588:	e0e7      	b.n	800375a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	4a78      	ldr	r2, [pc, #480]	; (8003770 <HAL_I2C_Init+0x280>)
 800358e:	fba2 2303 	umull	r2, r3, r2, r3
 8003592:	0c9b      	lsrs	r3, r3, #18
 8003594:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	685b      	ldr	r3, [r3, #4]
 800359c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	68ba      	ldr	r2, [r7, #8]
 80035a6:	430a      	orrs	r2, r1
 80035a8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	6a1b      	ldr	r3, [r3, #32]
 80035b0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	685b      	ldr	r3, [r3, #4]
 80035b8:	4a6a      	ldr	r2, [pc, #424]	; (8003764 <HAL_I2C_Init+0x274>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d802      	bhi.n	80035c4 <HAL_I2C_Init+0xd4>
 80035be:	68bb      	ldr	r3, [r7, #8]
 80035c0:	3301      	adds	r3, #1
 80035c2:	e009      	b.n	80035d8 <HAL_I2C_Init+0xe8>
 80035c4:	68bb      	ldr	r3, [r7, #8]
 80035c6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80035ca:	fb02 f303 	mul.w	r3, r2, r3
 80035ce:	4a69      	ldr	r2, [pc, #420]	; (8003774 <HAL_I2C_Init+0x284>)
 80035d0:	fba2 2303 	umull	r2, r3, r2, r3
 80035d4:	099b      	lsrs	r3, r3, #6
 80035d6:	3301      	adds	r3, #1
 80035d8:	687a      	ldr	r2, [r7, #4]
 80035da:	6812      	ldr	r2, [r2, #0]
 80035dc:	430b      	orrs	r3, r1
 80035de:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	69db      	ldr	r3, [r3, #28]
 80035e6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80035ea:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	685b      	ldr	r3, [r3, #4]
 80035f2:	495c      	ldr	r1, [pc, #368]	; (8003764 <HAL_I2C_Init+0x274>)
 80035f4:	428b      	cmp	r3, r1
 80035f6:	d819      	bhi.n	800362c <HAL_I2C_Init+0x13c>
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	1e59      	subs	r1, r3, #1
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	685b      	ldr	r3, [r3, #4]
 8003600:	005b      	lsls	r3, r3, #1
 8003602:	fbb1 f3f3 	udiv	r3, r1, r3
 8003606:	1c59      	adds	r1, r3, #1
 8003608:	f640 73fc 	movw	r3, #4092	; 0xffc
 800360c:	400b      	ands	r3, r1
 800360e:	2b00      	cmp	r3, #0
 8003610:	d00a      	beq.n	8003628 <HAL_I2C_Init+0x138>
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	1e59      	subs	r1, r3, #1
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	685b      	ldr	r3, [r3, #4]
 800361a:	005b      	lsls	r3, r3, #1
 800361c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003620:	3301      	adds	r3, #1
 8003622:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003626:	e051      	b.n	80036cc <HAL_I2C_Init+0x1dc>
 8003628:	2304      	movs	r3, #4
 800362a:	e04f      	b.n	80036cc <HAL_I2C_Init+0x1dc>
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	689b      	ldr	r3, [r3, #8]
 8003630:	2b00      	cmp	r3, #0
 8003632:	d111      	bne.n	8003658 <HAL_I2C_Init+0x168>
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	1e58      	subs	r0, r3, #1
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6859      	ldr	r1, [r3, #4]
 800363c:	460b      	mov	r3, r1
 800363e:	005b      	lsls	r3, r3, #1
 8003640:	440b      	add	r3, r1
 8003642:	fbb0 f3f3 	udiv	r3, r0, r3
 8003646:	3301      	adds	r3, #1
 8003648:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800364c:	2b00      	cmp	r3, #0
 800364e:	bf0c      	ite	eq
 8003650:	2301      	moveq	r3, #1
 8003652:	2300      	movne	r3, #0
 8003654:	b2db      	uxtb	r3, r3
 8003656:	e012      	b.n	800367e <HAL_I2C_Init+0x18e>
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	1e58      	subs	r0, r3, #1
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	6859      	ldr	r1, [r3, #4]
 8003660:	460b      	mov	r3, r1
 8003662:	009b      	lsls	r3, r3, #2
 8003664:	440b      	add	r3, r1
 8003666:	0099      	lsls	r1, r3, #2
 8003668:	440b      	add	r3, r1
 800366a:	fbb0 f3f3 	udiv	r3, r0, r3
 800366e:	3301      	adds	r3, #1
 8003670:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003674:	2b00      	cmp	r3, #0
 8003676:	bf0c      	ite	eq
 8003678:	2301      	moveq	r3, #1
 800367a:	2300      	movne	r3, #0
 800367c:	b2db      	uxtb	r3, r3
 800367e:	2b00      	cmp	r3, #0
 8003680:	d001      	beq.n	8003686 <HAL_I2C_Init+0x196>
 8003682:	2301      	movs	r3, #1
 8003684:	e022      	b.n	80036cc <HAL_I2C_Init+0x1dc>
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	689b      	ldr	r3, [r3, #8]
 800368a:	2b00      	cmp	r3, #0
 800368c:	d10e      	bne.n	80036ac <HAL_I2C_Init+0x1bc>
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	1e58      	subs	r0, r3, #1
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6859      	ldr	r1, [r3, #4]
 8003696:	460b      	mov	r3, r1
 8003698:	005b      	lsls	r3, r3, #1
 800369a:	440b      	add	r3, r1
 800369c:	fbb0 f3f3 	udiv	r3, r0, r3
 80036a0:	3301      	adds	r3, #1
 80036a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80036aa:	e00f      	b.n	80036cc <HAL_I2C_Init+0x1dc>
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	1e58      	subs	r0, r3, #1
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6859      	ldr	r1, [r3, #4]
 80036b4:	460b      	mov	r3, r1
 80036b6:	009b      	lsls	r3, r3, #2
 80036b8:	440b      	add	r3, r1
 80036ba:	0099      	lsls	r1, r3, #2
 80036bc:	440b      	add	r3, r1
 80036be:	fbb0 f3f3 	udiv	r3, r0, r3
 80036c2:	3301      	adds	r3, #1
 80036c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036c8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80036cc:	6879      	ldr	r1, [r7, #4]
 80036ce:	6809      	ldr	r1, [r1, #0]
 80036d0:	4313      	orrs	r3, r2
 80036d2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	69da      	ldr	r2, [r3, #28]
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6a1b      	ldr	r3, [r3, #32]
 80036e6:	431a      	orrs	r2, r3
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	430a      	orrs	r2, r1
 80036ee:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	689b      	ldr	r3, [r3, #8]
 80036f6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80036fa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80036fe:	687a      	ldr	r2, [r7, #4]
 8003700:	6911      	ldr	r1, [r2, #16]
 8003702:	687a      	ldr	r2, [r7, #4]
 8003704:	68d2      	ldr	r2, [r2, #12]
 8003706:	4311      	orrs	r1, r2
 8003708:	687a      	ldr	r2, [r7, #4]
 800370a:	6812      	ldr	r2, [r2, #0]
 800370c:	430b      	orrs	r3, r1
 800370e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	68db      	ldr	r3, [r3, #12]
 8003716:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	695a      	ldr	r2, [r3, #20]
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	699b      	ldr	r3, [r3, #24]
 8003722:	431a      	orrs	r2, r3
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	430a      	orrs	r2, r1
 800372a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	681a      	ldr	r2, [r3, #0]
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f042 0201 	orr.w	r2, r2, #1
 800373a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2200      	movs	r2, #0
 8003740:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2220      	movs	r2, #32
 8003746:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	2200      	movs	r2, #0
 800374e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2200      	movs	r2, #0
 8003754:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003758:	2300      	movs	r3, #0
}
 800375a:	4618      	mov	r0, r3
 800375c:	3710      	adds	r7, #16
 800375e:	46bd      	mov	sp, r7
 8003760:	bd80      	pop	{r7, pc}
 8003762:	bf00      	nop
 8003764:	000186a0 	.word	0x000186a0
 8003768:	001e847f 	.word	0x001e847f
 800376c:	003d08ff 	.word	0x003d08ff
 8003770:	431bde83 	.word	0x431bde83
 8003774:	10624dd3 	.word	0x10624dd3

08003778 <HAL_NOR_Init>:
  * @param  ExtTiming pointer to NOR extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_NOR_Init(NOR_HandleTypeDef *hnor, FMC_NORSRAM_TimingTypeDef *Timing,
                               FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	b086      	sub	sp, #24
 800377c:	af00      	add	r7, sp, #0
 800377e:	60f8      	str	r0, [r7, #12]
 8003780:	60b9      	str	r1, [r7, #8]
 8003782:	607a      	str	r2, [r7, #4]
  uint32_t deviceaddress;
  HAL_StatusTypeDef status = HAL_OK;
 8003784:	2300      	movs	r3, #0
 8003786:	74fb      	strb	r3, [r7, #19]

  /* Check the NOR handle parameter */
  if (hnor == NULL)
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	2b00      	cmp	r3, #0
 800378c:	d101      	bne.n	8003792 <HAL_NOR_Init+0x1a>
  {
    return HAL_ERROR;
 800378e:	2301      	movs	r3, #1
 8003790:	e090      	b.n	80038b4 <HAL_NOR_Init+0x13c>
  }

  if (hnor->State == HAL_NOR_STATE_RESET)
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8003798:	b2db      	uxtb	r3, r3
 800379a:	2b00      	cmp	r3, #0
 800379c:	d106      	bne.n	80037ac <HAL_NOR_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hnor->Lock = HAL_UNLOCKED;
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	2200      	movs	r2, #0
 80037a2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hnor->MspInitCallback(hnor);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_NOR_MspInit(hnor);
 80037a6:	68f8      	ldr	r0, [r7, #12]
 80037a8:	f7fd ff98 	bl	80016dc <HAL_NOR_MspInit>
#endif /* (USE_HAL_NOR_REGISTER_CALLBACKS) */
  }

  /* Initialize NOR control Interface */
  (void)FMC_NORSRAM_Init(hnor->Instance, &(hnor->Init));
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	681a      	ldr	r2, [r3, #0]
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	3308      	adds	r3, #8
 80037b4:	4619      	mov	r1, r3
 80037b6:	4610      	mov	r0, r2
 80037b8:	f002 fdb0 	bl	800631c <FSMC_NORSRAM_Init>

  /* Initialize NOR timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hnor->Instance, Timing, hnor->Init.NSBank);
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	6818      	ldr	r0, [r3, #0]
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	689b      	ldr	r3, [r3, #8]
 80037c4:	461a      	mov	r2, r3
 80037c6:	68b9      	ldr	r1, [r7, #8]
 80037c8:	f002 fe12 	bl	80063f0 <FSMC_NORSRAM_Timing_Init>

  /* Initialize NOR extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hnor->Extended, ExtTiming, hnor->Init.NSBank, hnor->Init.ExtendedMode);
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	6858      	ldr	r0, [r3, #4]
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	689a      	ldr	r2, [r3, #8]
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037d8:	6879      	ldr	r1, [r7, #4]
 80037da:	f002 fe3f 	bl	800645c <FSMC_NORSRAM_Extended_Timing_Init>

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hnor->Instance, hnor->Init.NSBank);
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	68fa      	ldr	r2, [r7, #12]
 80037e4:	6892      	ldr	r2, [r2, #8]
 80037e6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	68fa      	ldr	r2, [r7, #12]
 80037f0:	6892      	ldr	r2, [r2, #8]
 80037f2:	f041 0101 	orr.w	r1, r1, #1
 80037f6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize NOR Memory Data Width*/
  if (hnor->Init.MemoryDataWidth == FMC_NORSRAM_MEM_BUS_WIDTH_8)
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	695b      	ldr	r3, [r3, #20]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d103      	bne.n	800380a <HAL_NOR_Init+0x92>
  {
    uwNORMemoryDataWidth = NOR_MEMORY_8B;
 8003802:	4b2e      	ldr	r3, [pc, #184]	; (80038bc <HAL_NOR_Init+0x144>)
 8003804:	2200      	movs	r2, #0
 8003806:	601a      	str	r2, [r3, #0]
 8003808:	e002      	b.n	8003810 <HAL_NOR_Init+0x98>
  }
  else
  {
    uwNORMemoryDataWidth = NOR_MEMORY_16B;
 800380a:	4b2c      	ldr	r3, [pc, #176]	; (80038bc <HAL_NOR_Init+0x144>)
 800380c:	2201      	movs	r2, #1
 800380e:	601a      	str	r2, [r3, #0]
  }

  /* Initialize the NOR controller state */
  hnor->State = HAL_NOR_STATE_READY;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	2201      	movs	r2, #1
 8003814:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

  /* Select the NOR device address */
  if (hnor->Init.NSBank == FMC_NORSRAM_BANK1)
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	689b      	ldr	r3, [r3, #8]
 800381c:	2b00      	cmp	r3, #0
 800381e:	d103      	bne.n	8003828 <HAL_NOR_Init+0xb0>
  {
    deviceaddress = NOR_MEMORY_ADRESS1;
 8003820:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8003824:	617b      	str	r3, [r7, #20]
 8003826:	e012      	b.n	800384e <HAL_NOR_Init+0xd6>
  }
  else if (hnor->Init.NSBank == FMC_NORSRAM_BANK2)
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	689b      	ldr	r3, [r3, #8]
 800382c:	2b02      	cmp	r3, #2
 800382e:	d103      	bne.n	8003838 <HAL_NOR_Init+0xc0>
  {
    deviceaddress = NOR_MEMORY_ADRESS2;
 8003830:	f04f 43c8 	mov.w	r3, #1677721600	; 0x64000000
 8003834:	617b      	str	r3, [r7, #20]
 8003836:	e00a      	b.n	800384e <HAL_NOR_Init+0xd6>
  }
  else if (hnor->Init.NSBank == FMC_NORSRAM_BANK3)
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	689b      	ldr	r3, [r3, #8]
 800383c:	2b04      	cmp	r3, #4
 800383e:	d103      	bne.n	8003848 <HAL_NOR_Init+0xd0>
  {
    deviceaddress = NOR_MEMORY_ADRESS3;
 8003840:	f04f 43d0 	mov.w	r3, #1744830464	; 0x68000000
 8003844:	617b      	str	r3, [r7, #20]
 8003846:	e002      	b.n	800384e <HAL_NOR_Init+0xd6>
  }
  else /* FMC_NORSRAM_BANK4 */
  {
    deviceaddress = NOR_MEMORY_ADRESS4;
 8003848:	f04f 43d8 	mov.w	r3, #1811939328	; 0x6c000000
 800384c:	617b      	str	r3, [r7, #20]
  }

  if (hnor->Init.WriteOperation == FMC_WRITE_OPERATION_DISABLE)
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003852:	2b00      	cmp	r3, #0
 8003854:	d10c      	bne.n	8003870 <HAL_NOR_Init+0xf8>
  {
    (void)FMC_NORSRAM_WriteOperation_Disable(hnor->Instance, hnor->Init.NSBank);
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	681a      	ldr	r2, [r3, #0]
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	689b      	ldr	r3, [r3, #8]
 800385e:	4619      	mov	r1, r3
 8003860:	4610      	mov	r0, r2
 8003862:	f002 fe33 	bl	80064cc <FSMC_NORSRAM_WriteOperation_Disable>

    /* Update the NOR controller state */
    hnor->State = HAL_NOR_STATE_PROTECTED;
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	2204      	movs	r2, #4
 800386a:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
 800386e:	e020      	b.n	80038b2 <HAL_NOR_Init+0x13a>
  }
  else
  {
    /* Get the value of the command set */
    NOR_WRITE(NOR_ADDR_SHIFT(deviceaddress, uwNORMemoryDataWidth, NOR_CMD_ADDRESS_FIRST_CFI), NOR_CMD_DATA_CFI);
 8003870:	4b12      	ldr	r3, [pc, #72]	; (80038bc <HAL_NOR_Init+0x144>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	2b01      	cmp	r3, #1
 8003876:	d102      	bne.n	800387e <HAL_NOR_Init+0x106>
 8003878:	697b      	ldr	r3, [r7, #20]
 800387a:	33aa      	adds	r3, #170	; 0xaa
 800387c:	e001      	b.n	8003882 <HAL_NOR_Init+0x10a>
 800387e:	697b      	ldr	r3, [r7, #20]
 8003880:	3355      	adds	r3, #85	; 0x55
 8003882:	2298      	movs	r2, #152	; 0x98
 8003884:	801a      	strh	r2, [r3, #0]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003886:	f3bf 8f4f 	dsb	sy
}
 800388a:	bf00      	nop
    hnor->CommandSet = *(__IO uint16_t *) NOR_ADDR_SHIFT(deviceaddress, uwNORMemoryDataWidth, NOR_ADDRESS_COMMAND_SET);
 800388c:	4b0b      	ldr	r3, [pc, #44]	; (80038bc <HAL_NOR_Init+0x144>)
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	2b01      	cmp	r3, #1
 8003892:	d102      	bne.n	800389a <HAL_NOR_Init+0x122>
 8003894:	697b      	ldr	r3, [r7, #20]
 8003896:	3326      	adds	r3, #38	; 0x26
 8003898:	e001      	b.n	800389e <HAL_NOR_Init+0x126>
 800389a:	697b      	ldr	r3, [r7, #20]
 800389c:	3313      	adds	r3, #19
 800389e:	881b      	ldrh	r3, [r3, #0]
 80038a0:	b29b      	uxth	r3, r3
 80038a2:	461a      	mov	r2, r3
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	64da      	str	r2, [r3, #76]	; 0x4c

    status = HAL_NOR_ReturnToReadMode(hnor);
 80038a8:	68f8      	ldr	r0, [r7, #12]
 80038aa:	f000 f809 	bl	80038c0 <HAL_NOR_ReturnToReadMode>
 80038ae:	4603      	mov	r3, r0
 80038b0:	74fb      	strb	r3, [r7, #19]
  }

  return status;
 80038b2:	7cfb      	ldrb	r3, [r7, #19]
}
 80038b4:	4618      	mov	r0, r3
 80038b6:	3718      	adds	r7, #24
 80038b8:	46bd      	mov	sp, r7
 80038ba:	bd80      	pop	{r7, pc}
 80038bc:	20000730 	.word	0x20000730

080038c0 <HAL_NOR_ReturnToReadMode>:
  * @param  hnor pointer to a NOR_HandleTypeDef structure that contains
  *                the configuration information for NOR module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_NOR_ReturnToReadMode(NOR_HandleTypeDef *hnor)
{
 80038c0:	b480      	push	{r7}
 80038c2:	b085      	sub	sp, #20
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
  uint32_t deviceaddress;
  HAL_NOR_StateTypeDef state;
  HAL_StatusTypeDef status = HAL_OK;
 80038c8:	2300      	movs	r3, #0
 80038ca:	72fb      	strb	r3, [r7, #11]

  /* Check the NOR controller state */
  state = hnor->State;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 80038d2:	72bb      	strb	r3, [r7, #10]
  if (state == HAL_NOR_STATE_BUSY)
 80038d4:	7abb      	ldrb	r3, [r7, #10]
 80038d6:	2b02      	cmp	r3, #2
 80038d8:	d101      	bne.n	80038de <HAL_NOR_ReturnToReadMode+0x1e>
  {
    return HAL_BUSY;
 80038da:	2302      	movs	r3, #2
 80038dc:	e052      	b.n	8003984 <HAL_NOR_ReturnToReadMode+0xc4>
  }
  else if (state == HAL_NOR_STATE_PROTECTED)
 80038de:	7abb      	ldrb	r3, [r7, #10]
 80038e0:	2b04      	cmp	r3, #4
 80038e2:	d101      	bne.n	80038e8 <HAL_NOR_ReturnToReadMode+0x28>
  {
    return HAL_ERROR;
 80038e4:	2301      	movs	r3, #1
 80038e6:	e04d      	b.n	8003984 <HAL_NOR_ReturnToReadMode+0xc4>
  }
  else if (state == HAL_NOR_STATE_READY)
 80038e8:	7abb      	ldrb	r3, [r7, #10]
 80038ea:	2b01      	cmp	r3, #1
 80038ec:	d149      	bne.n	8003982 <HAL_NOR_ReturnToReadMode+0xc2>
  {
    /* Process Locked */
    __HAL_LOCK(hnor);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80038f4:	2b01      	cmp	r3, #1
 80038f6:	d101      	bne.n	80038fc <HAL_NOR_ReturnToReadMode+0x3c>
 80038f8:	2302      	movs	r3, #2
 80038fa:	e043      	b.n	8003984 <HAL_NOR_ReturnToReadMode+0xc4>
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2201      	movs	r2, #1
 8003900:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Update the NOR controller state */
    hnor->State = HAL_NOR_STATE_BUSY;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2202      	movs	r2, #2
 8003908:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

    /* Select the NOR device address */
    if (hnor->Init.NSBank == FMC_NORSRAM_BANK1)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	689b      	ldr	r3, [r3, #8]
 8003910:	2b00      	cmp	r3, #0
 8003912:	d103      	bne.n	800391c <HAL_NOR_ReturnToReadMode+0x5c>
    {
      deviceaddress = NOR_MEMORY_ADRESS1;
 8003914:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8003918:	60fb      	str	r3, [r7, #12]
 800391a:	e012      	b.n	8003942 <HAL_NOR_ReturnToReadMode+0x82>
    }
    else if (hnor->Init.NSBank == FMC_NORSRAM_BANK2)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	689b      	ldr	r3, [r3, #8]
 8003920:	2b02      	cmp	r3, #2
 8003922:	d103      	bne.n	800392c <HAL_NOR_ReturnToReadMode+0x6c>
    {
      deviceaddress = NOR_MEMORY_ADRESS2;
 8003924:	f04f 43c8 	mov.w	r3, #1677721600	; 0x64000000
 8003928:	60fb      	str	r3, [r7, #12]
 800392a:	e00a      	b.n	8003942 <HAL_NOR_ReturnToReadMode+0x82>
    }
    else if (hnor->Init.NSBank == FMC_NORSRAM_BANK3)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	689b      	ldr	r3, [r3, #8]
 8003930:	2b04      	cmp	r3, #4
 8003932:	d103      	bne.n	800393c <HAL_NOR_ReturnToReadMode+0x7c>
    {
      deviceaddress = NOR_MEMORY_ADRESS3;
 8003934:	f04f 43d0 	mov.w	r3, #1744830464	; 0x68000000
 8003938:	60fb      	str	r3, [r7, #12]
 800393a:	e002      	b.n	8003942 <HAL_NOR_ReturnToReadMode+0x82>
    }
    else /* FMC_NORSRAM_BANK4 */
    {
      deviceaddress = NOR_MEMORY_ADRESS4;
 800393c:	f04f 43d8 	mov.w	r3, #1811939328	; 0x6c000000
 8003940:	60fb      	str	r3, [r7, #12]
    }

    if (hnor->CommandSet == NOR_AMD_FUJITSU_COMMAND_SET)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003946:	2b02      	cmp	r3, #2
 8003948:	d105      	bne.n	8003956 <HAL_NOR_ReturnToReadMode+0x96>
    {
      NOR_WRITE(deviceaddress, NOR_CMD_DATA_READ_RESET);
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	22f0      	movs	r2, #240	; 0xf0
 800394e:	801a      	strh	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8003950:	f3bf 8f4f 	dsb	sy
}
 8003954:	e00b      	b.n	800396e <HAL_NOR_ReturnToReadMode+0xae>
    }
    else if (hnor->CommandSet == NOR_INTEL_SHARP_EXT_COMMAND_SET)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800395a:	2b01      	cmp	r3, #1
 800395c:	d105      	bne.n	800396a <HAL_NOR_ReturnToReadMode+0xaa>
    {
      NOR_WRITE(deviceaddress, NOR_CMD_READ_ARRAY);
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	22ff      	movs	r2, #255	; 0xff
 8003962:	801a      	strh	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8003964:	f3bf 8f4f 	dsb	sy
}
 8003968:	e001      	b.n	800396e <HAL_NOR_ReturnToReadMode+0xae>
    }
    else
    {
      /* Primary command set not supported by the driver */
      status = HAL_ERROR;
 800396a:	2301      	movs	r3, #1
 800396c:	72fb      	strb	r3, [r7, #11]
    }

    /* Check the NOR controller state */
    hnor->State = state;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	7aba      	ldrb	r2, [r7, #10]
 8003972:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

    /* Process unlocked */
    __HAL_UNLOCK(hnor);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	2200      	movs	r2, #0
 800397a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  else
  {
    return HAL_ERROR;
  }

  return status;
 800397e:	7afb      	ldrb	r3, [r7, #11]
 8003980:	e000      	b.n	8003984 <HAL_NOR_ReturnToReadMode+0xc4>
    return HAL_ERROR;
 8003982:	2301      	movs	r3, #1
}
 8003984:	4618      	mov	r0, r3
 8003986:	3714      	adds	r7, #20
 8003988:	46bd      	mov	sp, r7
 800398a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398e:	4770      	bx	lr

08003990 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003990:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003992:	b08f      	sub	sp, #60	; 0x3c
 8003994:	af0a      	add	r7, sp, #40	; 0x28
 8003996:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2b00      	cmp	r3, #0
 800399c:	d101      	bne.n	80039a2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800399e:	2301      	movs	r3, #1
 80039a0:	e10f      	b.n	8003bc2 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80039ae:	b2db      	uxtb	r3, r3
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d106      	bne.n	80039c2 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2200      	movs	r2, #0
 80039b8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80039bc:	6878      	ldr	r0, [r7, #4]
 80039be:	f006 fa13 	bl	8009de8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	2203      	movs	r2, #3
 80039c6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80039ca:	68bb      	ldr	r3, [r7, #8]
 80039cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d102      	bne.n	80039dc <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	2200      	movs	r2, #0
 80039da:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	4618      	mov	r0, r3
 80039e2:	f002 fe9e 	bl	8006722 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	603b      	str	r3, [r7, #0]
 80039ec:	687e      	ldr	r6, [r7, #4]
 80039ee:	466d      	mov	r5, sp
 80039f0:	f106 0410 	add.w	r4, r6, #16
 80039f4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80039f6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80039f8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80039fa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80039fc:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003a00:	e885 0003 	stmia.w	r5, {r0, r1}
 8003a04:	1d33      	adds	r3, r6, #4
 8003a06:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003a08:	6838      	ldr	r0, [r7, #0]
 8003a0a:	f002 fd75 	bl	80064f8 <USB_CoreInit>
 8003a0e:	4603      	mov	r3, r0
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d005      	beq.n	8003a20 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2202      	movs	r2, #2
 8003a18:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003a1c:	2301      	movs	r3, #1
 8003a1e:	e0d0      	b.n	8003bc2 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	2100      	movs	r1, #0
 8003a26:	4618      	mov	r0, r3
 8003a28:	f002 fe8c 	bl	8006744 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	73fb      	strb	r3, [r7, #15]
 8003a30:	e04a      	b.n	8003ac8 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003a32:	7bfa      	ldrb	r2, [r7, #15]
 8003a34:	6879      	ldr	r1, [r7, #4]
 8003a36:	4613      	mov	r3, r2
 8003a38:	00db      	lsls	r3, r3, #3
 8003a3a:	4413      	add	r3, r2
 8003a3c:	009b      	lsls	r3, r3, #2
 8003a3e:	440b      	add	r3, r1
 8003a40:	333d      	adds	r3, #61	; 0x3d
 8003a42:	2201      	movs	r2, #1
 8003a44:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003a46:	7bfa      	ldrb	r2, [r7, #15]
 8003a48:	6879      	ldr	r1, [r7, #4]
 8003a4a:	4613      	mov	r3, r2
 8003a4c:	00db      	lsls	r3, r3, #3
 8003a4e:	4413      	add	r3, r2
 8003a50:	009b      	lsls	r3, r3, #2
 8003a52:	440b      	add	r3, r1
 8003a54:	333c      	adds	r3, #60	; 0x3c
 8003a56:	7bfa      	ldrb	r2, [r7, #15]
 8003a58:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003a5a:	7bfa      	ldrb	r2, [r7, #15]
 8003a5c:	7bfb      	ldrb	r3, [r7, #15]
 8003a5e:	b298      	uxth	r0, r3
 8003a60:	6879      	ldr	r1, [r7, #4]
 8003a62:	4613      	mov	r3, r2
 8003a64:	00db      	lsls	r3, r3, #3
 8003a66:	4413      	add	r3, r2
 8003a68:	009b      	lsls	r3, r3, #2
 8003a6a:	440b      	add	r3, r1
 8003a6c:	3344      	adds	r3, #68	; 0x44
 8003a6e:	4602      	mov	r2, r0
 8003a70:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003a72:	7bfa      	ldrb	r2, [r7, #15]
 8003a74:	6879      	ldr	r1, [r7, #4]
 8003a76:	4613      	mov	r3, r2
 8003a78:	00db      	lsls	r3, r3, #3
 8003a7a:	4413      	add	r3, r2
 8003a7c:	009b      	lsls	r3, r3, #2
 8003a7e:	440b      	add	r3, r1
 8003a80:	3340      	adds	r3, #64	; 0x40
 8003a82:	2200      	movs	r2, #0
 8003a84:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003a86:	7bfa      	ldrb	r2, [r7, #15]
 8003a88:	6879      	ldr	r1, [r7, #4]
 8003a8a:	4613      	mov	r3, r2
 8003a8c:	00db      	lsls	r3, r3, #3
 8003a8e:	4413      	add	r3, r2
 8003a90:	009b      	lsls	r3, r3, #2
 8003a92:	440b      	add	r3, r1
 8003a94:	3348      	adds	r3, #72	; 0x48
 8003a96:	2200      	movs	r2, #0
 8003a98:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003a9a:	7bfa      	ldrb	r2, [r7, #15]
 8003a9c:	6879      	ldr	r1, [r7, #4]
 8003a9e:	4613      	mov	r3, r2
 8003aa0:	00db      	lsls	r3, r3, #3
 8003aa2:	4413      	add	r3, r2
 8003aa4:	009b      	lsls	r3, r3, #2
 8003aa6:	440b      	add	r3, r1
 8003aa8:	334c      	adds	r3, #76	; 0x4c
 8003aaa:	2200      	movs	r2, #0
 8003aac:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003aae:	7bfa      	ldrb	r2, [r7, #15]
 8003ab0:	6879      	ldr	r1, [r7, #4]
 8003ab2:	4613      	mov	r3, r2
 8003ab4:	00db      	lsls	r3, r3, #3
 8003ab6:	4413      	add	r3, r2
 8003ab8:	009b      	lsls	r3, r3, #2
 8003aba:	440b      	add	r3, r1
 8003abc:	3354      	adds	r3, #84	; 0x54
 8003abe:	2200      	movs	r2, #0
 8003ac0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003ac2:	7bfb      	ldrb	r3, [r7, #15]
 8003ac4:	3301      	adds	r3, #1
 8003ac6:	73fb      	strb	r3, [r7, #15]
 8003ac8:	7bfa      	ldrb	r2, [r7, #15]
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	685b      	ldr	r3, [r3, #4]
 8003ace:	429a      	cmp	r2, r3
 8003ad0:	d3af      	bcc.n	8003a32 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	73fb      	strb	r3, [r7, #15]
 8003ad6:	e044      	b.n	8003b62 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003ad8:	7bfa      	ldrb	r2, [r7, #15]
 8003ada:	6879      	ldr	r1, [r7, #4]
 8003adc:	4613      	mov	r3, r2
 8003ade:	00db      	lsls	r3, r3, #3
 8003ae0:	4413      	add	r3, r2
 8003ae2:	009b      	lsls	r3, r3, #2
 8003ae4:	440b      	add	r3, r1
 8003ae6:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8003aea:	2200      	movs	r2, #0
 8003aec:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003aee:	7bfa      	ldrb	r2, [r7, #15]
 8003af0:	6879      	ldr	r1, [r7, #4]
 8003af2:	4613      	mov	r3, r2
 8003af4:	00db      	lsls	r3, r3, #3
 8003af6:	4413      	add	r3, r2
 8003af8:	009b      	lsls	r3, r3, #2
 8003afa:	440b      	add	r3, r1
 8003afc:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8003b00:	7bfa      	ldrb	r2, [r7, #15]
 8003b02:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003b04:	7bfa      	ldrb	r2, [r7, #15]
 8003b06:	6879      	ldr	r1, [r7, #4]
 8003b08:	4613      	mov	r3, r2
 8003b0a:	00db      	lsls	r3, r3, #3
 8003b0c:	4413      	add	r3, r2
 8003b0e:	009b      	lsls	r3, r3, #2
 8003b10:	440b      	add	r3, r1
 8003b12:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003b16:	2200      	movs	r2, #0
 8003b18:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003b1a:	7bfa      	ldrb	r2, [r7, #15]
 8003b1c:	6879      	ldr	r1, [r7, #4]
 8003b1e:	4613      	mov	r3, r2
 8003b20:	00db      	lsls	r3, r3, #3
 8003b22:	4413      	add	r3, r2
 8003b24:	009b      	lsls	r3, r3, #2
 8003b26:	440b      	add	r3, r1
 8003b28:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003b30:	7bfa      	ldrb	r2, [r7, #15]
 8003b32:	6879      	ldr	r1, [r7, #4]
 8003b34:	4613      	mov	r3, r2
 8003b36:	00db      	lsls	r3, r3, #3
 8003b38:	4413      	add	r3, r2
 8003b3a:	009b      	lsls	r3, r3, #2
 8003b3c:	440b      	add	r3, r1
 8003b3e:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8003b42:	2200      	movs	r2, #0
 8003b44:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003b46:	7bfa      	ldrb	r2, [r7, #15]
 8003b48:	6879      	ldr	r1, [r7, #4]
 8003b4a:	4613      	mov	r3, r2
 8003b4c:	00db      	lsls	r3, r3, #3
 8003b4e:	4413      	add	r3, r2
 8003b50:	009b      	lsls	r3, r3, #2
 8003b52:	440b      	add	r3, r1
 8003b54:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003b58:	2200      	movs	r2, #0
 8003b5a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003b5c:	7bfb      	ldrb	r3, [r7, #15]
 8003b5e:	3301      	adds	r3, #1
 8003b60:	73fb      	strb	r3, [r7, #15]
 8003b62:	7bfa      	ldrb	r2, [r7, #15]
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	685b      	ldr	r3, [r3, #4]
 8003b68:	429a      	cmp	r2, r3
 8003b6a:	d3b5      	bcc.n	8003ad8 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	603b      	str	r3, [r7, #0]
 8003b72:	687e      	ldr	r6, [r7, #4]
 8003b74:	466d      	mov	r5, sp
 8003b76:	f106 0410 	add.w	r4, r6, #16
 8003b7a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003b7c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003b7e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003b80:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003b82:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003b86:	e885 0003 	stmia.w	r5, {r0, r1}
 8003b8a:	1d33      	adds	r3, r6, #4
 8003b8c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003b8e:	6838      	ldr	r0, [r7, #0]
 8003b90:	f002 fe24 	bl	80067dc <USB_DevInit>
 8003b94:	4603      	mov	r3, r0
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d005      	beq.n	8003ba6 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	2202      	movs	r2, #2
 8003b9e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003ba2:	2301      	movs	r3, #1
 8003ba4:	e00d      	b.n	8003bc2 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	2200      	movs	r2, #0
 8003baa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	2201      	movs	r2, #1
 8003bb2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	4618      	mov	r0, r3
 8003bbc:	f003 ff73 	bl	8007aa6 <USB_DevDisconnect>

  return HAL_OK;
 8003bc0:	2300      	movs	r3, #0
}
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	3714      	adds	r7, #20
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003bca <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003bca:	b580      	push	{r7, lr}
 8003bcc:	b084      	sub	sp, #16
 8003bce:	af00      	add	r7, sp, #0
 8003bd0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003bde:	2b01      	cmp	r3, #1
 8003be0:	d101      	bne.n	8003be6 <HAL_PCD_Start+0x1c>
 8003be2:	2302      	movs	r3, #2
 8003be4:	e020      	b.n	8003c28 <HAL_PCD_Start+0x5e>
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	2201      	movs	r2, #1
 8003bea:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bf2:	2b01      	cmp	r3, #1
 8003bf4:	d109      	bne.n	8003c0a <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003bfa:	2b01      	cmp	r3, #1
 8003bfc:	d005      	beq.n	8003c0a <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c02:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	4618      	mov	r0, r3
 8003c10:	f002 fd76 	bl	8006700 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	4618      	mov	r0, r3
 8003c1a:	f003 ff23 	bl	8007a64 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	2200      	movs	r2, #0
 8003c22:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003c26:	2300      	movs	r3, #0
}
 8003c28:	4618      	mov	r0, r3
 8003c2a:	3710      	adds	r7, #16
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	bd80      	pop	{r7, pc}

08003c30 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003c30:	b590      	push	{r4, r7, lr}
 8003c32:	b08d      	sub	sp, #52	; 0x34
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c3e:	6a3b      	ldr	r3, [r7, #32]
 8003c40:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	4618      	mov	r0, r3
 8003c48:	f003 ffe1 	bl	8007c0e <USB_GetMode>
 8003c4c:	4603      	mov	r3, r0
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	f040 848a 	bne.w	8004568 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	4618      	mov	r0, r3
 8003c5a:	f003 ff45 	bl	8007ae8 <USB_ReadInterrupts>
 8003c5e:	4603      	mov	r3, r0
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	f000 8480 	beq.w	8004566 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8003c66:	69fb      	ldr	r3, [r7, #28]
 8003c68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c6c:	689b      	ldr	r3, [r3, #8]
 8003c6e:	0a1b      	lsrs	r3, r3, #8
 8003c70:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	4618      	mov	r0, r3
 8003c80:	f003 ff32 	bl	8007ae8 <USB_ReadInterrupts>
 8003c84:	4603      	mov	r3, r0
 8003c86:	f003 0302 	and.w	r3, r3, #2
 8003c8a:	2b02      	cmp	r3, #2
 8003c8c:	d107      	bne.n	8003c9e <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	695a      	ldr	r2, [r3, #20]
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f002 0202 	and.w	r2, r2, #2
 8003c9c:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	f003 ff20 	bl	8007ae8 <USB_ReadInterrupts>
 8003ca8:	4603      	mov	r3, r0
 8003caa:	f003 0310 	and.w	r3, r3, #16
 8003cae:	2b10      	cmp	r3, #16
 8003cb0:	d161      	bne.n	8003d76 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	699a      	ldr	r2, [r3, #24]
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f022 0210 	bic.w	r2, r2, #16
 8003cc0:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8003cc2:	6a3b      	ldr	r3, [r7, #32]
 8003cc4:	6a1b      	ldr	r3, [r3, #32]
 8003cc6:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8003cc8:	69bb      	ldr	r3, [r7, #24]
 8003cca:	f003 020f 	and.w	r2, r3, #15
 8003cce:	4613      	mov	r3, r2
 8003cd0:	00db      	lsls	r3, r3, #3
 8003cd2:	4413      	add	r3, r2
 8003cd4:	009b      	lsls	r3, r3, #2
 8003cd6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003cda:	687a      	ldr	r2, [r7, #4]
 8003cdc:	4413      	add	r3, r2
 8003cde:	3304      	adds	r3, #4
 8003ce0:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003ce2:	69bb      	ldr	r3, [r7, #24]
 8003ce4:	0c5b      	lsrs	r3, r3, #17
 8003ce6:	f003 030f 	and.w	r3, r3, #15
 8003cea:	2b02      	cmp	r3, #2
 8003cec:	d124      	bne.n	8003d38 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003cee:	69ba      	ldr	r2, [r7, #24]
 8003cf0:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8003cf4:	4013      	ands	r3, r2
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d035      	beq.n	8003d66 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003cfa:	697b      	ldr	r3, [r7, #20]
 8003cfc:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003cfe:	69bb      	ldr	r3, [r7, #24]
 8003d00:	091b      	lsrs	r3, r3, #4
 8003d02:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003d04:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003d08:	b29b      	uxth	r3, r3
 8003d0a:	461a      	mov	r2, r3
 8003d0c:	6a38      	ldr	r0, [r7, #32]
 8003d0e:	f003 fd57 	bl	80077c0 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003d12:	697b      	ldr	r3, [r7, #20]
 8003d14:	691a      	ldr	r2, [r3, #16]
 8003d16:	69bb      	ldr	r3, [r7, #24]
 8003d18:	091b      	lsrs	r3, r3, #4
 8003d1a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003d1e:	441a      	add	r2, r3
 8003d20:	697b      	ldr	r3, [r7, #20]
 8003d22:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003d24:	697b      	ldr	r3, [r7, #20]
 8003d26:	6a1a      	ldr	r2, [r3, #32]
 8003d28:	69bb      	ldr	r3, [r7, #24]
 8003d2a:	091b      	lsrs	r3, r3, #4
 8003d2c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003d30:	441a      	add	r2, r3
 8003d32:	697b      	ldr	r3, [r7, #20]
 8003d34:	621a      	str	r2, [r3, #32]
 8003d36:	e016      	b.n	8003d66 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8003d38:	69bb      	ldr	r3, [r7, #24]
 8003d3a:	0c5b      	lsrs	r3, r3, #17
 8003d3c:	f003 030f 	and.w	r3, r3, #15
 8003d40:	2b06      	cmp	r3, #6
 8003d42:	d110      	bne.n	8003d66 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003d4a:	2208      	movs	r2, #8
 8003d4c:	4619      	mov	r1, r3
 8003d4e:	6a38      	ldr	r0, [r7, #32]
 8003d50:	f003 fd36 	bl	80077c0 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003d54:	697b      	ldr	r3, [r7, #20]
 8003d56:	6a1a      	ldr	r2, [r3, #32]
 8003d58:	69bb      	ldr	r3, [r7, #24]
 8003d5a:	091b      	lsrs	r3, r3, #4
 8003d5c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003d60:	441a      	add	r2, r3
 8003d62:	697b      	ldr	r3, [r7, #20]
 8003d64:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	699a      	ldr	r2, [r3, #24]
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f042 0210 	orr.w	r2, r2, #16
 8003d74:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	f003 feb4 	bl	8007ae8 <USB_ReadInterrupts>
 8003d80:	4603      	mov	r3, r0
 8003d82:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003d86:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003d8a:	f040 80a7 	bne.w	8003edc <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8003d8e:	2300      	movs	r3, #0
 8003d90:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	4618      	mov	r0, r3
 8003d98:	f003 feb9 	bl	8007b0e <USB_ReadDevAllOutEpInterrupt>
 8003d9c:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8003d9e:	e099      	b.n	8003ed4 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003da0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003da2:	f003 0301 	and.w	r3, r3, #1
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	f000 808e 	beq.w	8003ec8 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003db2:	b2d2      	uxtb	r2, r2
 8003db4:	4611      	mov	r1, r2
 8003db6:	4618      	mov	r0, r3
 8003db8:	f003 fedd 	bl	8007b76 <USB_ReadDevOutEPInterrupt>
 8003dbc:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003dbe:	693b      	ldr	r3, [r7, #16]
 8003dc0:	f003 0301 	and.w	r3, r3, #1
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d00c      	beq.n	8003de2 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dca:	015a      	lsls	r2, r3, #5
 8003dcc:	69fb      	ldr	r3, [r7, #28]
 8003dce:	4413      	add	r3, r2
 8003dd0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003dd4:	461a      	mov	r2, r3
 8003dd6:	2301      	movs	r3, #1
 8003dd8:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003dda:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003ddc:	6878      	ldr	r0, [r7, #4]
 8003dde:	f000 feab 	bl	8004b38 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003de2:	693b      	ldr	r3, [r7, #16]
 8003de4:	f003 0308 	and.w	r3, r3, #8
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d00c      	beq.n	8003e06 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dee:	015a      	lsls	r2, r3, #5
 8003df0:	69fb      	ldr	r3, [r7, #28]
 8003df2:	4413      	add	r3, r2
 8003df4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003df8:	461a      	mov	r2, r3
 8003dfa:	2308      	movs	r3, #8
 8003dfc:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003dfe:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003e00:	6878      	ldr	r0, [r7, #4]
 8003e02:	f000 ff81 	bl	8004d08 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003e06:	693b      	ldr	r3, [r7, #16]
 8003e08:	f003 0310 	and.w	r3, r3, #16
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d008      	beq.n	8003e22 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e12:	015a      	lsls	r2, r3, #5
 8003e14:	69fb      	ldr	r3, [r7, #28]
 8003e16:	4413      	add	r3, r2
 8003e18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e1c:	461a      	mov	r2, r3
 8003e1e:	2310      	movs	r3, #16
 8003e20:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8003e22:	693b      	ldr	r3, [r7, #16]
 8003e24:	f003 0302 	and.w	r3, r3, #2
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d030      	beq.n	8003e8e <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8003e2c:	6a3b      	ldr	r3, [r7, #32]
 8003e2e:	695b      	ldr	r3, [r3, #20]
 8003e30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e34:	2b80      	cmp	r3, #128	; 0x80
 8003e36:	d109      	bne.n	8003e4c <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8003e38:	69fb      	ldr	r3, [r7, #28]
 8003e3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e3e:	685b      	ldr	r3, [r3, #4]
 8003e40:	69fa      	ldr	r2, [r7, #28]
 8003e42:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003e46:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003e4a:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8003e4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e4e:	4613      	mov	r3, r2
 8003e50:	00db      	lsls	r3, r3, #3
 8003e52:	4413      	add	r3, r2
 8003e54:	009b      	lsls	r3, r3, #2
 8003e56:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003e5a:	687a      	ldr	r2, [r7, #4]
 8003e5c:	4413      	add	r3, r2
 8003e5e:	3304      	adds	r3, #4
 8003e60:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003e62:	697b      	ldr	r3, [r7, #20]
 8003e64:	78db      	ldrb	r3, [r3, #3]
 8003e66:	2b01      	cmp	r3, #1
 8003e68:	d108      	bne.n	8003e7c <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8003e6a:	697b      	ldr	r3, [r7, #20]
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e72:	b2db      	uxtb	r3, r3
 8003e74:	4619      	mov	r1, r3
 8003e76:	6878      	ldr	r0, [r7, #4]
 8003e78:	f006 f8ca 	bl	800a010 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8003e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e7e:	015a      	lsls	r2, r3, #5
 8003e80:	69fb      	ldr	r3, [r7, #28]
 8003e82:	4413      	add	r3, r2
 8003e84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e88:	461a      	mov	r2, r3
 8003e8a:	2302      	movs	r3, #2
 8003e8c:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003e8e:	693b      	ldr	r3, [r7, #16]
 8003e90:	f003 0320 	and.w	r3, r3, #32
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d008      	beq.n	8003eaa <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e9a:	015a      	lsls	r2, r3, #5
 8003e9c:	69fb      	ldr	r3, [r7, #28]
 8003e9e:	4413      	add	r3, r2
 8003ea0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ea4:	461a      	mov	r2, r3
 8003ea6:	2320      	movs	r3, #32
 8003ea8:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003eaa:	693b      	ldr	r3, [r7, #16]
 8003eac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d009      	beq.n	8003ec8 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eb6:	015a      	lsls	r2, r3, #5
 8003eb8:	69fb      	ldr	r3, [r7, #28]
 8003eba:	4413      	add	r3, r2
 8003ebc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ec0:	461a      	mov	r2, r3
 8003ec2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003ec6:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eca:	3301      	adds	r3, #1
 8003ecc:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003ece:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ed0:	085b      	lsrs	r3, r3, #1
 8003ed2:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003ed4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	f47f af62 	bne.w	8003da0 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	f003 fe01 	bl	8007ae8 <USB_ReadInterrupts>
 8003ee6:	4603      	mov	r3, r0
 8003ee8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003eec:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003ef0:	f040 80db 	bne.w	80040aa <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	4618      	mov	r0, r3
 8003efa:	f003 fe22 	bl	8007b42 <USB_ReadDevAllInEpInterrupt>
 8003efe:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8003f00:	2300      	movs	r3, #0
 8003f02:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8003f04:	e0cd      	b.n	80040a2 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003f06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f08:	f003 0301 	and.w	r3, r3, #1
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	f000 80c2 	beq.w	8004096 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f18:	b2d2      	uxtb	r2, r2
 8003f1a:	4611      	mov	r1, r2
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	f003 fe48 	bl	8007bb2 <USB_ReadDevInEPInterrupt>
 8003f22:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003f24:	693b      	ldr	r3, [r7, #16]
 8003f26:	f003 0301 	and.w	r3, r3, #1
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d057      	beq.n	8003fde <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f30:	f003 030f 	and.w	r3, r3, #15
 8003f34:	2201      	movs	r2, #1
 8003f36:	fa02 f303 	lsl.w	r3, r2, r3
 8003f3a:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003f3c:	69fb      	ldr	r3, [r7, #28]
 8003f3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f42:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	43db      	mvns	r3, r3
 8003f48:	69f9      	ldr	r1, [r7, #28]
 8003f4a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003f4e:	4013      	ands	r3, r2
 8003f50:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f54:	015a      	lsls	r2, r3, #5
 8003f56:	69fb      	ldr	r3, [r7, #28]
 8003f58:	4413      	add	r3, r2
 8003f5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f5e:	461a      	mov	r2, r3
 8003f60:	2301      	movs	r3, #1
 8003f62:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	691b      	ldr	r3, [r3, #16]
 8003f68:	2b01      	cmp	r3, #1
 8003f6a:	d132      	bne.n	8003fd2 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003f6c:	6879      	ldr	r1, [r7, #4]
 8003f6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f70:	4613      	mov	r3, r2
 8003f72:	00db      	lsls	r3, r3, #3
 8003f74:	4413      	add	r3, r2
 8003f76:	009b      	lsls	r3, r3, #2
 8003f78:	440b      	add	r3, r1
 8003f7a:	334c      	adds	r3, #76	; 0x4c
 8003f7c:	6819      	ldr	r1, [r3, #0]
 8003f7e:	6878      	ldr	r0, [r7, #4]
 8003f80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f82:	4613      	mov	r3, r2
 8003f84:	00db      	lsls	r3, r3, #3
 8003f86:	4413      	add	r3, r2
 8003f88:	009b      	lsls	r3, r3, #2
 8003f8a:	4403      	add	r3, r0
 8003f8c:	3348      	adds	r3, #72	; 0x48
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	4419      	add	r1, r3
 8003f92:	6878      	ldr	r0, [r7, #4]
 8003f94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f96:	4613      	mov	r3, r2
 8003f98:	00db      	lsls	r3, r3, #3
 8003f9a:	4413      	add	r3, r2
 8003f9c:	009b      	lsls	r3, r3, #2
 8003f9e:	4403      	add	r3, r0
 8003fa0:	334c      	adds	r3, #76	; 0x4c
 8003fa2:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d113      	bne.n	8003fd2 <HAL_PCD_IRQHandler+0x3a2>
 8003faa:	6879      	ldr	r1, [r7, #4]
 8003fac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fae:	4613      	mov	r3, r2
 8003fb0:	00db      	lsls	r3, r3, #3
 8003fb2:	4413      	add	r3, r2
 8003fb4:	009b      	lsls	r3, r3, #2
 8003fb6:	440b      	add	r3, r1
 8003fb8:	3354      	adds	r3, #84	; 0x54
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d108      	bne.n	8003fd2 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6818      	ldr	r0, [r3, #0]
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003fca:	461a      	mov	r2, r3
 8003fcc:	2101      	movs	r1, #1
 8003fce:	f003 fe4f 	bl	8007c70 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fd4:	b2db      	uxtb	r3, r3
 8003fd6:	4619      	mov	r1, r3
 8003fd8:	6878      	ldr	r0, [r7, #4]
 8003fda:	f005 ff94 	bl	8009f06 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003fde:	693b      	ldr	r3, [r7, #16]
 8003fe0:	f003 0308 	and.w	r3, r3, #8
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d008      	beq.n	8003ffa <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fea:	015a      	lsls	r2, r3, #5
 8003fec:	69fb      	ldr	r3, [r7, #28]
 8003fee:	4413      	add	r3, r2
 8003ff0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ff4:	461a      	mov	r2, r3
 8003ff6:	2308      	movs	r3, #8
 8003ff8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003ffa:	693b      	ldr	r3, [r7, #16]
 8003ffc:	f003 0310 	and.w	r3, r3, #16
 8004000:	2b00      	cmp	r3, #0
 8004002:	d008      	beq.n	8004016 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8004004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004006:	015a      	lsls	r2, r3, #5
 8004008:	69fb      	ldr	r3, [r7, #28]
 800400a:	4413      	add	r3, r2
 800400c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004010:	461a      	mov	r2, r3
 8004012:	2310      	movs	r3, #16
 8004014:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8004016:	693b      	ldr	r3, [r7, #16]
 8004018:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800401c:	2b00      	cmp	r3, #0
 800401e:	d008      	beq.n	8004032 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8004020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004022:	015a      	lsls	r2, r3, #5
 8004024:	69fb      	ldr	r3, [r7, #28]
 8004026:	4413      	add	r3, r2
 8004028:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800402c:	461a      	mov	r2, r3
 800402e:	2340      	movs	r3, #64	; 0x40
 8004030:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8004032:	693b      	ldr	r3, [r7, #16]
 8004034:	f003 0302 	and.w	r3, r3, #2
 8004038:	2b00      	cmp	r3, #0
 800403a:	d023      	beq.n	8004084 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800403c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800403e:	6a38      	ldr	r0, [r7, #32]
 8004040:	f002 fd30 	bl	8006aa4 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8004044:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004046:	4613      	mov	r3, r2
 8004048:	00db      	lsls	r3, r3, #3
 800404a:	4413      	add	r3, r2
 800404c:	009b      	lsls	r3, r3, #2
 800404e:	3338      	adds	r3, #56	; 0x38
 8004050:	687a      	ldr	r2, [r7, #4]
 8004052:	4413      	add	r3, r2
 8004054:	3304      	adds	r3, #4
 8004056:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004058:	697b      	ldr	r3, [r7, #20]
 800405a:	78db      	ldrb	r3, [r3, #3]
 800405c:	2b01      	cmp	r3, #1
 800405e:	d108      	bne.n	8004072 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8004060:	697b      	ldr	r3, [r7, #20]
 8004062:	2200      	movs	r2, #0
 8004064:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8004066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004068:	b2db      	uxtb	r3, r3
 800406a:	4619      	mov	r1, r3
 800406c:	6878      	ldr	r0, [r7, #4]
 800406e:	f005 ffe1 	bl	800a034 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8004072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004074:	015a      	lsls	r2, r3, #5
 8004076:	69fb      	ldr	r3, [r7, #28]
 8004078:	4413      	add	r3, r2
 800407a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800407e:	461a      	mov	r2, r3
 8004080:	2302      	movs	r3, #2
 8004082:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8004084:	693b      	ldr	r3, [r7, #16]
 8004086:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800408a:	2b00      	cmp	r3, #0
 800408c:	d003      	beq.n	8004096 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800408e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004090:	6878      	ldr	r0, [r7, #4]
 8004092:	f000 fcc3 	bl	8004a1c <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8004096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004098:	3301      	adds	r3, #1
 800409a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800409c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800409e:	085b      	lsrs	r3, r3, #1
 80040a0:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80040a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	f47f af2e 	bne.w	8003f06 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	4618      	mov	r0, r3
 80040b0:	f003 fd1a 	bl	8007ae8 <USB_ReadInterrupts>
 80040b4:	4603      	mov	r3, r0
 80040b6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80040ba:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80040be:	d122      	bne.n	8004106 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80040c0:	69fb      	ldr	r3, [r7, #28]
 80040c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040c6:	685b      	ldr	r3, [r3, #4]
 80040c8:	69fa      	ldr	r2, [r7, #28]
 80040ca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80040ce:	f023 0301 	bic.w	r3, r3, #1
 80040d2:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80040da:	2b01      	cmp	r3, #1
 80040dc:	d108      	bne.n	80040f0 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	2200      	movs	r2, #0
 80040e2:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80040e6:	2100      	movs	r1, #0
 80040e8:	6878      	ldr	r0, [r7, #4]
 80040ea:	f000 feab 	bl	8004e44 <HAL_PCDEx_LPM_Callback>
 80040ee:	e002      	b.n	80040f6 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80040f0:	6878      	ldr	r0, [r7, #4]
 80040f2:	f005 ff7f 	bl	8009ff4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	695a      	ldr	r2, [r3, #20]
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8004104:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	4618      	mov	r0, r3
 800410c:	f003 fcec 	bl	8007ae8 <USB_ReadInterrupts>
 8004110:	4603      	mov	r3, r0
 8004112:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004116:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800411a:	d112      	bne.n	8004142 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800411c:	69fb      	ldr	r3, [r7, #28]
 800411e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004122:	689b      	ldr	r3, [r3, #8]
 8004124:	f003 0301 	and.w	r3, r3, #1
 8004128:	2b01      	cmp	r3, #1
 800412a:	d102      	bne.n	8004132 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800412c:	6878      	ldr	r0, [r7, #4]
 800412e:	f005 ff3b 	bl	8009fa8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	695a      	ldr	r2, [r3, #20]
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8004140:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	4618      	mov	r0, r3
 8004148:	f003 fcce 	bl	8007ae8 <USB_ReadInterrupts>
 800414c:	4603      	mov	r3, r0
 800414e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004152:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004156:	f040 80b7 	bne.w	80042c8 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800415a:	69fb      	ldr	r3, [r7, #28]
 800415c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004160:	685b      	ldr	r3, [r3, #4]
 8004162:	69fa      	ldr	r2, [r7, #28]
 8004164:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004168:	f023 0301 	bic.w	r3, r3, #1
 800416c:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	2110      	movs	r1, #16
 8004174:	4618      	mov	r0, r3
 8004176:	f002 fc95 	bl	8006aa4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800417a:	2300      	movs	r3, #0
 800417c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800417e:	e046      	b.n	800420e <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8004180:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004182:	015a      	lsls	r2, r3, #5
 8004184:	69fb      	ldr	r3, [r7, #28]
 8004186:	4413      	add	r3, r2
 8004188:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800418c:	461a      	mov	r2, r3
 800418e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004192:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004194:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004196:	015a      	lsls	r2, r3, #5
 8004198:	69fb      	ldr	r3, [r7, #28]
 800419a:	4413      	add	r3, r2
 800419c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80041a4:	0151      	lsls	r1, r2, #5
 80041a6:	69fa      	ldr	r2, [r7, #28]
 80041a8:	440a      	add	r2, r1
 80041aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80041ae:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80041b2:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80041b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041b6:	015a      	lsls	r2, r3, #5
 80041b8:	69fb      	ldr	r3, [r7, #28]
 80041ba:	4413      	add	r3, r2
 80041bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041c0:	461a      	mov	r2, r3
 80041c2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80041c6:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80041c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041ca:	015a      	lsls	r2, r3, #5
 80041cc:	69fb      	ldr	r3, [r7, #28]
 80041ce:	4413      	add	r3, r2
 80041d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80041d8:	0151      	lsls	r1, r2, #5
 80041da:	69fa      	ldr	r2, [r7, #28]
 80041dc:	440a      	add	r2, r1
 80041de:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80041e2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80041e6:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80041e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041ea:	015a      	lsls	r2, r3, #5
 80041ec:	69fb      	ldr	r3, [r7, #28]
 80041ee:	4413      	add	r3, r2
 80041f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80041f8:	0151      	lsls	r1, r2, #5
 80041fa:	69fa      	ldr	r2, [r7, #28]
 80041fc:	440a      	add	r2, r1
 80041fe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004202:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004206:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004208:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800420a:	3301      	adds	r3, #1
 800420c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	685b      	ldr	r3, [r3, #4]
 8004212:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004214:	429a      	cmp	r2, r3
 8004216:	d3b3      	bcc.n	8004180 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8004218:	69fb      	ldr	r3, [r7, #28]
 800421a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800421e:	69db      	ldr	r3, [r3, #28]
 8004220:	69fa      	ldr	r2, [r7, #28]
 8004222:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004226:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800422a:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004230:	2b00      	cmp	r3, #0
 8004232:	d016      	beq.n	8004262 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8004234:	69fb      	ldr	r3, [r7, #28]
 8004236:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800423a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800423e:	69fa      	ldr	r2, [r7, #28]
 8004240:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004244:	f043 030b 	orr.w	r3, r3, #11
 8004248:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800424c:	69fb      	ldr	r3, [r7, #28]
 800424e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004252:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004254:	69fa      	ldr	r2, [r7, #28]
 8004256:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800425a:	f043 030b 	orr.w	r3, r3, #11
 800425e:	6453      	str	r3, [r2, #68]	; 0x44
 8004260:	e015      	b.n	800428e <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8004262:	69fb      	ldr	r3, [r7, #28]
 8004264:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004268:	695b      	ldr	r3, [r3, #20]
 800426a:	69fa      	ldr	r2, [r7, #28]
 800426c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004270:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004274:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8004278:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800427a:	69fb      	ldr	r3, [r7, #28]
 800427c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004280:	691b      	ldr	r3, [r3, #16]
 8004282:	69fa      	ldr	r2, [r7, #28]
 8004284:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004288:	f043 030b 	orr.w	r3, r3, #11
 800428c:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800428e:	69fb      	ldr	r3, [r7, #28]
 8004290:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	69fa      	ldr	r2, [r7, #28]
 8004298:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800429c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80042a0:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6818      	ldr	r0, [r3, #0]
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	691b      	ldr	r3, [r3, #16]
 80042aa:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80042b2:	461a      	mov	r2, r3
 80042b4:	f003 fcdc 	bl	8007c70 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	695a      	ldr	r2, [r3, #20]
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80042c6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	4618      	mov	r0, r3
 80042ce:	f003 fc0b 	bl	8007ae8 <USB_ReadInterrupts>
 80042d2:	4603      	mov	r3, r0
 80042d4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80042d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80042dc:	d124      	bne.n	8004328 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	4618      	mov	r0, r3
 80042e4:	f003 fca1 	bl	8007c2a <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	4618      	mov	r0, r3
 80042ee:	f002 fc56 	bl	8006b9e <USB_GetDevSpeed>
 80042f2:	4603      	mov	r3, r0
 80042f4:	461a      	mov	r2, r3
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681c      	ldr	r4, [r3, #0]
 80042fe:	f001 fa39 	bl	8005774 <HAL_RCC_GetHCLKFreq>
 8004302:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004308:	b2db      	uxtb	r3, r3
 800430a:	461a      	mov	r2, r3
 800430c:	4620      	mov	r0, r4
 800430e:	f002 f955 	bl	80065bc <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8004312:	6878      	ldr	r0, [r7, #4]
 8004314:	f005 fe1f 	bl	8009f56 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	695a      	ldr	r2, [r3, #20]
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8004326:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	4618      	mov	r0, r3
 800432e:	f003 fbdb 	bl	8007ae8 <USB_ReadInterrupts>
 8004332:	4603      	mov	r3, r0
 8004334:	f003 0308 	and.w	r3, r3, #8
 8004338:	2b08      	cmp	r3, #8
 800433a:	d10a      	bne.n	8004352 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800433c:	6878      	ldr	r0, [r7, #4]
 800433e:	f005 fdfc 	bl	8009f3a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	695a      	ldr	r2, [r3, #20]
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f002 0208 	and.w	r2, r2, #8
 8004350:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	4618      	mov	r0, r3
 8004358:	f003 fbc6 	bl	8007ae8 <USB_ReadInterrupts>
 800435c:	4603      	mov	r3, r0
 800435e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004362:	2b80      	cmp	r3, #128	; 0x80
 8004364:	d122      	bne.n	80043ac <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8004366:	6a3b      	ldr	r3, [r7, #32]
 8004368:	699b      	ldr	r3, [r3, #24]
 800436a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800436e:	6a3b      	ldr	r3, [r7, #32]
 8004370:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004372:	2301      	movs	r3, #1
 8004374:	627b      	str	r3, [r7, #36]	; 0x24
 8004376:	e014      	b.n	80043a2 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8004378:	6879      	ldr	r1, [r7, #4]
 800437a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800437c:	4613      	mov	r3, r2
 800437e:	00db      	lsls	r3, r3, #3
 8004380:	4413      	add	r3, r2
 8004382:	009b      	lsls	r3, r3, #2
 8004384:	440b      	add	r3, r1
 8004386:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800438a:	781b      	ldrb	r3, [r3, #0]
 800438c:	2b01      	cmp	r3, #1
 800438e:	d105      	bne.n	800439c <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8004390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004392:	b2db      	uxtb	r3, r3
 8004394:	4619      	mov	r1, r3
 8004396:	6878      	ldr	r0, [r7, #4]
 8004398:	f000 fb0f 	bl	80049ba <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800439c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800439e:	3301      	adds	r3, #1
 80043a0:	627b      	str	r3, [r7, #36]	; 0x24
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	685b      	ldr	r3, [r3, #4]
 80043a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043a8:	429a      	cmp	r2, r3
 80043aa:	d3e5      	bcc.n	8004378 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	4618      	mov	r0, r3
 80043b2:	f003 fb99 	bl	8007ae8 <USB_ReadInterrupts>
 80043b6:	4603      	mov	r3, r0
 80043b8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80043bc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80043c0:	d13b      	bne.n	800443a <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80043c2:	2301      	movs	r3, #1
 80043c4:	627b      	str	r3, [r7, #36]	; 0x24
 80043c6:	e02b      	b.n	8004420 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80043c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043ca:	015a      	lsls	r2, r3, #5
 80043cc:	69fb      	ldr	r3, [r7, #28]
 80043ce:	4413      	add	r3, r2
 80043d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80043d8:	6879      	ldr	r1, [r7, #4]
 80043da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043dc:	4613      	mov	r3, r2
 80043de:	00db      	lsls	r3, r3, #3
 80043e0:	4413      	add	r3, r2
 80043e2:	009b      	lsls	r3, r3, #2
 80043e4:	440b      	add	r3, r1
 80043e6:	3340      	adds	r3, #64	; 0x40
 80043e8:	781b      	ldrb	r3, [r3, #0]
 80043ea:	2b01      	cmp	r3, #1
 80043ec:	d115      	bne.n	800441a <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80043ee:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	da12      	bge.n	800441a <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80043f4:	6879      	ldr	r1, [r7, #4]
 80043f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043f8:	4613      	mov	r3, r2
 80043fa:	00db      	lsls	r3, r3, #3
 80043fc:	4413      	add	r3, r2
 80043fe:	009b      	lsls	r3, r3, #2
 8004400:	440b      	add	r3, r1
 8004402:	333f      	adds	r3, #63	; 0x3f
 8004404:	2201      	movs	r2, #1
 8004406:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8004408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800440a:	b2db      	uxtb	r3, r3
 800440c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004410:	b2db      	uxtb	r3, r3
 8004412:	4619      	mov	r1, r3
 8004414:	6878      	ldr	r0, [r7, #4]
 8004416:	f000 fad0 	bl	80049ba <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800441a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800441c:	3301      	adds	r3, #1
 800441e:	627b      	str	r3, [r7, #36]	; 0x24
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	685b      	ldr	r3, [r3, #4]
 8004424:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004426:	429a      	cmp	r2, r3
 8004428:	d3ce      	bcc.n	80043c8 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	695a      	ldr	r2, [r3, #20]
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8004438:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	4618      	mov	r0, r3
 8004440:	f003 fb52 	bl	8007ae8 <USB_ReadInterrupts>
 8004444:	4603      	mov	r3, r0
 8004446:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800444a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800444e:	d155      	bne.n	80044fc <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004450:	2301      	movs	r3, #1
 8004452:	627b      	str	r3, [r7, #36]	; 0x24
 8004454:	e045      	b.n	80044e2 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8004456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004458:	015a      	lsls	r2, r3, #5
 800445a:	69fb      	ldr	r3, [r7, #28]
 800445c:	4413      	add	r3, r2
 800445e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004466:	6879      	ldr	r1, [r7, #4]
 8004468:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800446a:	4613      	mov	r3, r2
 800446c:	00db      	lsls	r3, r3, #3
 800446e:	4413      	add	r3, r2
 8004470:	009b      	lsls	r3, r3, #2
 8004472:	440b      	add	r3, r1
 8004474:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8004478:	781b      	ldrb	r3, [r3, #0]
 800447a:	2b01      	cmp	r3, #1
 800447c:	d12e      	bne.n	80044dc <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800447e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004480:	2b00      	cmp	r3, #0
 8004482:	da2b      	bge.n	80044dc <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8004484:	69bb      	ldr	r3, [r7, #24]
 8004486:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8004490:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004494:	429a      	cmp	r2, r3
 8004496:	d121      	bne.n	80044dc <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8004498:	6879      	ldr	r1, [r7, #4]
 800449a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800449c:	4613      	mov	r3, r2
 800449e:	00db      	lsls	r3, r3, #3
 80044a0:	4413      	add	r3, r2
 80044a2:	009b      	lsls	r3, r3, #2
 80044a4:	440b      	add	r3, r1
 80044a6:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80044aa:	2201      	movs	r2, #1
 80044ac:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80044ae:	6a3b      	ldr	r3, [r7, #32]
 80044b0:	699b      	ldr	r3, [r3, #24]
 80044b2:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80044b6:	6a3b      	ldr	r3, [r7, #32]
 80044b8:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80044ba:	6a3b      	ldr	r3, [r7, #32]
 80044bc:	695b      	ldr	r3, [r3, #20]
 80044be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d10a      	bne.n	80044dc <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80044c6:	69fb      	ldr	r3, [r7, #28]
 80044c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044cc:	685b      	ldr	r3, [r3, #4]
 80044ce:	69fa      	ldr	r2, [r7, #28]
 80044d0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80044d4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80044d8:	6053      	str	r3, [r2, #4]
            break;
 80044da:	e007      	b.n	80044ec <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80044dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044de:	3301      	adds	r3, #1
 80044e0:	627b      	str	r3, [r7, #36]	; 0x24
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	685b      	ldr	r3, [r3, #4]
 80044e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044e8:	429a      	cmp	r2, r3
 80044ea:	d3b4      	bcc.n	8004456 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	695a      	ldr	r2, [r3, #20]
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80044fa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	4618      	mov	r0, r3
 8004502:	f003 faf1 	bl	8007ae8 <USB_ReadInterrupts>
 8004506:	4603      	mov	r3, r0
 8004508:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800450c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004510:	d10a      	bne.n	8004528 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8004512:	6878      	ldr	r0, [r7, #4]
 8004514:	f005 fda0 	bl	800a058 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	695a      	ldr	r2, [r3, #20]
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8004526:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	4618      	mov	r0, r3
 800452e:	f003 fadb 	bl	8007ae8 <USB_ReadInterrupts>
 8004532:	4603      	mov	r3, r0
 8004534:	f003 0304 	and.w	r3, r3, #4
 8004538:	2b04      	cmp	r3, #4
 800453a:	d115      	bne.n	8004568 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	685b      	ldr	r3, [r3, #4]
 8004542:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8004544:	69bb      	ldr	r3, [r7, #24]
 8004546:	f003 0304 	and.w	r3, r3, #4
 800454a:	2b00      	cmp	r3, #0
 800454c:	d002      	beq.n	8004554 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800454e:	6878      	ldr	r0, [r7, #4]
 8004550:	f005 fd90 	bl	800a074 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	6859      	ldr	r1, [r3, #4]
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	69ba      	ldr	r2, [r7, #24]
 8004560:	430a      	orrs	r2, r1
 8004562:	605a      	str	r2, [r3, #4]
 8004564:	e000      	b.n	8004568 <HAL_PCD_IRQHandler+0x938>
      return;
 8004566:	bf00      	nop
    }
  }
}
 8004568:	3734      	adds	r7, #52	; 0x34
 800456a:	46bd      	mov	sp, r7
 800456c:	bd90      	pop	{r4, r7, pc}

0800456e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800456e:	b580      	push	{r7, lr}
 8004570:	b082      	sub	sp, #8
 8004572:	af00      	add	r7, sp, #0
 8004574:	6078      	str	r0, [r7, #4]
 8004576:	460b      	mov	r3, r1
 8004578:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004580:	2b01      	cmp	r3, #1
 8004582:	d101      	bne.n	8004588 <HAL_PCD_SetAddress+0x1a>
 8004584:	2302      	movs	r3, #2
 8004586:	e013      	b.n	80045b0 <HAL_PCD_SetAddress+0x42>
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2201      	movs	r2, #1
 800458c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	78fa      	ldrb	r2, [r7, #3]
 8004594:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	78fa      	ldrb	r2, [r7, #3]
 800459e:	4611      	mov	r1, r2
 80045a0:	4618      	mov	r0, r3
 80045a2:	f003 fa39 	bl	8007a18 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	2200      	movs	r2, #0
 80045aa:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80045ae:	2300      	movs	r3, #0
}
 80045b0:	4618      	mov	r0, r3
 80045b2:	3708      	adds	r7, #8
 80045b4:	46bd      	mov	sp, r7
 80045b6:	bd80      	pop	{r7, pc}

080045b8 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80045b8:	b580      	push	{r7, lr}
 80045ba:	b084      	sub	sp, #16
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
 80045c0:	4608      	mov	r0, r1
 80045c2:	4611      	mov	r1, r2
 80045c4:	461a      	mov	r2, r3
 80045c6:	4603      	mov	r3, r0
 80045c8:	70fb      	strb	r3, [r7, #3]
 80045ca:	460b      	mov	r3, r1
 80045cc:	803b      	strh	r3, [r7, #0]
 80045ce:	4613      	mov	r3, r2
 80045d0:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80045d2:	2300      	movs	r3, #0
 80045d4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80045d6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	da0f      	bge.n	80045fe <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80045de:	78fb      	ldrb	r3, [r7, #3]
 80045e0:	f003 020f 	and.w	r2, r3, #15
 80045e4:	4613      	mov	r3, r2
 80045e6:	00db      	lsls	r3, r3, #3
 80045e8:	4413      	add	r3, r2
 80045ea:	009b      	lsls	r3, r3, #2
 80045ec:	3338      	adds	r3, #56	; 0x38
 80045ee:	687a      	ldr	r2, [r7, #4]
 80045f0:	4413      	add	r3, r2
 80045f2:	3304      	adds	r3, #4
 80045f4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	2201      	movs	r2, #1
 80045fa:	705a      	strb	r2, [r3, #1]
 80045fc:	e00f      	b.n	800461e <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80045fe:	78fb      	ldrb	r3, [r7, #3]
 8004600:	f003 020f 	and.w	r2, r3, #15
 8004604:	4613      	mov	r3, r2
 8004606:	00db      	lsls	r3, r3, #3
 8004608:	4413      	add	r3, r2
 800460a:	009b      	lsls	r3, r3, #2
 800460c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004610:	687a      	ldr	r2, [r7, #4]
 8004612:	4413      	add	r3, r2
 8004614:	3304      	adds	r3, #4
 8004616:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	2200      	movs	r2, #0
 800461c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800461e:	78fb      	ldrb	r3, [r7, #3]
 8004620:	f003 030f 	and.w	r3, r3, #15
 8004624:	b2da      	uxtb	r2, r3
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800462a:	883a      	ldrh	r2, [r7, #0]
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	78ba      	ldrb	r2, [r7, #2]
 8004634:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	785b      	ldrb	r3, [r3, #1]
 800463a:	2b00      	cmp	r3, #0
 800463c:	d004      	beq.n	8004648 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	781b      	ldrb	r3, [r3, #0]
 8004642:	b29a      	uxth	r2, r3
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004648:	78bb      	ldrb	r3, [r7, #2]
 800464a:	2b02      	cmp	r3, #2
 800464c:	d102      	bne.n	8004654 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	2200      	movs	r2, #0
 8004652:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800465a:	2b01      	cmp	r3, #1
 800465c:	d101      	bne.n	8004662 <HAL_PCD_EP_Open+0xaa>
 800465e:	2302      	movs	r3, #2
 8004660:	e00e      	b.n	8004680 <HAL_PCD_EP_Open+0xc8>
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	2201      	movs	r2, #1
 8004666:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	68f9      	ldr	r1, [r7, #12]
 8004670:	4618      	mov	r0, r3
 8004672:	f002 fab9 	bl	8006be8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	2200      	movs	r2, #0
 800467a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 800467e:	7afb      	ldrb	r3, [r7, #11]
}
 8004680:	4618      	mov	r0, r3
 8004682:	3710      	adds	r7, #16
 8004684:	46bd      	mov	sp, r7
 8004686:	bd80      	pop	{r7, pc}

08004688 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004688:	b580      	push	{r7, lr}
 800468a:	b084      	sub	sp, #16
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
 8004690:	460b      	mov	r3, r1
 8004692:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004694:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004698:	2b00      	cmp	r3, #0
 800469a:	da0f      	bge.n	80046bc <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800469c:	78fb      	ldrb	r3, [r7, #3]
 800469e:	f003 020f 	and.w	r2, r3, #15
 80046a2:	4613      	mov	r3, r2
 80046a4:	00db      	lsls	r3, r3, #3
 80046a6:	4413      	add	r3, r2
 80046a8:	009b      	lsls	r3, r3, #2
 80046aa:	3338      	adds	r3, #56	; 0x38
 80046ac:	687a      	ldr	r2, [r7, #4]
 80046ae:	4413      	add	r3, r2
 80046b0:	3304      	adds	r3, #4
 80046b2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	2201      	movs	r2, #1
 80046b8:	705a      	strb	r2, [r3, #1]
 80046ba:	e00f      	b.n	80046dc <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80046bc:	78fb      	ldrb	r3, [r7, #3]
 80046be:	f003 020f 	and.w	r2, r3, #15
 80046c2:	4613      	mov	r3, r2
 80046c4:	00db      	lsls	r3, r3, #3
 80046c6:	4413      	add	r3, r2
 80046c8:	009b      	lsls	r3, r3, #2
 80046ca:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80046ce:	687a      	ldr	r2, [r7, #4]
 80046d0:	4413      	add	r3, r2
 80046d2:	3304      	adds	r3, #4
 80046d4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	2200      	movs	r2, #0
 80046da:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80046dc:	78fb      	ldrb	r3, [r7, #3]
 80046de:	f003 030f 	and.w	r3, r3, #15
 80046e2:	b2da      	uxtb	r2, r3
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80046ee:	2b01      	cmp	r3, #1
 80046f0:	d101      	bne.n	80046f6 <HAL_PCD_EP_Close+0x6e>
 80046f2:	2302      	movs	r3, #2
 80046f4:	e00e      	b.n	8004714 <HAL_PCD_EP_Close+0x8c>
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	2201      	movs	r2, #1
 80046fa:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	68f9      	ldr	r1, [r7, #12]
 8004704:	4618      	mov	r0, r3
 8004706:	f002 faf7 	bl	8006cf8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	2200      	movs	r2, #0
 800470e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8004712:	2300      	movs	r3, #0
}
 8004714:	4618      	mov	r0, r3
 8004716:	3710      	adds	r7, #16
 8004718:	46bd      	mov	sp, r7
 800471a:	bd80      	pop	{r7, pc}

0800471c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800471c:	b580      	push	{r7, lr}
 800471e:	b086      	sub	sp, #24
 8004720:	af00      	add	r7, sp, #0
 8004722:	60f8      	str	r0, [r7, #12]
 8004724:	607a      	str	r2, [r7, #4]
 8004726:	603b      	str	r3, [r7, #0]
 8004728:	460b      	mov	r3, r1
 800472a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800472c:	7afb      	ldrb	r3, [r7, #11]
 800472e:	f003 020f 	and.w	r2, r3, #15
 8004732:	4613      	mov	r3, r2
 8004734:	00db      	lsls	r3, r3, #3
 8004736:	4413      	add	r3, r2
 8004738:	009b      	lsls	r3, r3, #2
 800473a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800473e:	68fa      	ldr	r2, [r7, #12]
 8004740:	4413      	add	r3, r2
 8004742:	3304      	adds	r3, #4
 8004744:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004746:	697b      	ldr	r3, [r7, #20]
 8004748:	687a      	ldr	r2, [r7, #4]
 800474a:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800474c:	697b      	ldr	r3, [r7, #20]
 800474e:	683a      	ldr	r2, [r7, #0]
 8004750:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004752:	697b      	ldr	r3, [r7, #20]
 8004754:	2200      	movs	r2, #0
 8004756:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8004758:	697b      	ldr	r3, [r7, #20]
 800475a:	2200      	movs	r2, #0
 800475c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800475e:	7afb      	ldrb	r3, [r7, #11]
 8004760:	f003 030f 	and.w	r3, r3, #15
 8004764:	b2da      	uxtb	r2, r3
 8004766:	697b      	ldr	r3, [r7, #20]
 8004768:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	691b      	ldr	r3, [r3, #16]
 800476e:	2b01      	cmp	r3, #1
 8004770:	d102      	bne.n	8004778 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004772:	687a      	ldr	r2, [r7, #4]
 8004774:	697b      	ldr	r3, [r7, #20]
 8004776:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004778:	7afb      	ldrb	r3, [r7, #11]
 800477a:	f003 030f 	and.w	r3, r3, #15
 800477e:	2b00      	cmp	r3, #0
 8004780:	d109      	bne.n	8004796 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	6818      	ldr	r0, [r3, #0]
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	691b      	ldr	r3, [r3, #16]
 800478a:	b2db      	uxtb	r3, r3
 800478c:	461a      	mov	r2, r3
 800478e:	6979      	ldr	r1, [r7, #20]
 8004790:	f002 fdd6 	bl	8007340 <USB_EP0StartXfer>
 8004794:	e008      	b.n	80047a8 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	6818      	ldr	r0, [r3, #0]
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	691b      	ldr	r3, [r3, #16]
 800479e:	b2db      	uxtb	r3, r3
 80047a0:	461a      	mov	r2, r3
 80047a2:	6979      	ldr	r1, [r7, #20]
 80047a4:	f002 fb84 	bl	8006eb0 <USB_EPStartXfer>
  }

  return HAL_OK;
 80047a8:	2300      	movs	r3, #0
}
 80047aa:	4618      	mov	r0, r3
 80047ac:	3718      	adds	r7, #24
 80047ae:	46bd      	mov	sp, r7
 80047b0:	bd80      	pop	{r7, pc}

080047b2 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80047b2:	b580      	push	{r7, lr}
 80047b4:	b086      	sub	sp, #24
 80047b6:	af00      	add	r7, sp, #0
 80047b8:	60f8      	str	r0, [r7, #12]
 80047ba:	607a      	str	r2, [r7, #4]
 80047bc:	603b      	str	r3, [r7, #0]
 80047be:	460b      	mov	r3, r1
 80047c0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80047c2:	7afb      	ldrb	r3, [r7, #11]
 80047c4:	f003 020f 	and.w	r2, r3, #15
 80047c8:	4613      	mov	r3, r2
 80047ca:	00db      	lsls	r3, r3, #3
 80047cc:	4413      	add	r3, r2
 80047ce:	009b      	lsls	r3, r3, #2
 80047d0:	3338      	adds	r3, #56	; 0x38
 80047d2:	68fa      	ldr	r2, [r7, #12]
 80047d4:	4413      	add	r3, r2
 80047d6:	3304      	adds	r3, #4
 80047d8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80047da:	697b      	ldr	r3, [r7, #20]
 80047dc:	687a      	ldr	r2, [r7, #4]
 80047de:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80047e0:	697b      	ldr	r3, [r7, #20]
 80047e2:	683a      	ldr	r2, [r7, #0]
 80047e4:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80047e6:	697b      	ldr	r3, [r7, #20]
 80047e8:	2200      	movs	r2, #0
 80047ea:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 80047ec:	697b      	ldr	r3, [r7, #20]
 80047ee:	2201      	movs	r2, #1
 80047f0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80047f2:	7afb      	ldrb	r3, [r7, #11]
 80047f4:	f003 030f 	and.w	r3, r3, #15
 80047f8:	b2da      	uxtb	r2, r3
 80047fa:	697b      	ldr	r3, [r7, #20]
 80047fc:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	691b      	ldr	r3, [r3, #16]
 8004802:	2b01      	cmp	r3, #1
 8004804:	d102      	bne.n	800480c <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004806:	687a      	ldr	r2, [r7, #4]
 8004808:	697b      	ldr	r3, [r7, #20]
 800480a:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800480c:	7afb      	ldrb	r3, [r7, #11]
 800480e:	f003 030f 	and.w	r3, r3, #15
 8004812:	2b00      	cmp	r3, #0
 8004814:	d109      	bne.n	800482a <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	6818      	ldr	r0, [r3, #0]
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	691b      	ldr	r3, [r3, #16]
 800481e:	b2db      	uxtb	r3, r3
 8004820:	461a      	mov	r2, r3
 8004822:	6979      	ldr	r1, [r7, #20]
 8004824:	f002 fd8c 	bl	8007340 <USB_EP0StartXfer>
 8004828:	e008      	b.n	800483c <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	6818      	ldr	r0, [r3, #0]
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	691b      	ldr	r3, [r3, #16]
 8004832:	b2db      	uxtb	r3, r3
 8004834:	461a      	mov	r2, r3
 8004836:	6979      	ldr	r1, [r7, #20]
 8004838:	f002 fb3a 	bl	8006eb0 <USB_EPStartXfer>
  }

  return HAL_OK;
 800483c:	2300      	movs	r3, #0
}
 800483e:	4618      	mov	r0, r3
 8004840:	3718      	adds	r7, #24
 8004842:	46bd      	mov	sp, r7
 8004844:	bd80      	pop	{r7, pc}

08004846 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004846:	b580      	push	{r7, lr}
 8004848:	b084      	sub	sp, #16
 800484a:	af00      	add	r7, sp, #0
 800484c:	6078      	str	r0, [r7, #4]
 800484e:	460b      	mov	r3, r1
 8004850:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004852:	78fb      	ldrb	r3, [r7, #3]
 8004854:	f003 020f 	and.w	r2, r3, #15
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	685b      	ldr	r3, [r3, #4]
 800485c:	429a      	cmp	r2, r3
 800485e:	d901      	bls.n	8004864 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004860:	2301      	movs	r3, #1
 8004862:	e050      	b.n	8004906 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004864:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004868:	2b00      	cmp	r3, #0
 800486a:	da0f      	bge.n	800488c <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800486c:	78fb      	ldrb	r3, [r7, #3]
 800486e:	f003 020f 	and.w	r2, r3, #15
 8004872:	4613      	mov	r3, r2
 8004874:	00db      	lsls	r3, r3, #3
 8004876:	4413      	add	r3, r2
 8004878:	009b      	lsls	r3, r3, #2
 800487a:	3338      	adds	r3, #56	; 0x38
 800487c:	687a      	ldr	r2, [r7, #4]
 800487e:	4413      	add	r3, r2
 8004880:	3304      	adds	r3, #4
 8004882:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	2201      	movs	r2, #1
 8004888:	705a      	strb	r2, [r3, #1]
 800488a:	e00d      	b.n	80048a8 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800488c:	78fa      	ldrb	r2, [r7, #3]
 800488e:	4613      	mov	r3, r2
 8004890:	00db      	lsls	r3, r3, #3
 8004892:	4413      	add	r3, r2
 8004894:	009b      	lsls	r3, r3, #2
 8004896:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800489a:	687a      	ldr	r2, [r7, #4]
 800489c:	4413      	add	r3, r2
 800489e:	3304      	adds	r3, #4
 80048a0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	2200      	movs	r2, #0
 80048a6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	2201      	movs	r2, #1
 80048ac:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80048ae:	78fb      	ldrb	r3, [r7, #3]
 80048b0:	f003 030f 	and.w	r3, r3, #15
 80048b4:	b2da      	uxtb	r2, r3
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80048c0:	2b01      	cmp	r3, #1
 80048c2:	d101      	bne.n	80048c8 <HAL_PCD_EP_SetStall+0x82>
 80048c4:	2302      	movs	r3, #2
 80048c6:	e01e      	b.n	8004906 <HAL_PCD_EP_SetStall+0xc0>
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2201      	movs	r2, #1
 80048cc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	68f9      	ldr	r1, [r7, #12]
 80048d6:	4618      	mov	r0, r3
 80048d8:	f002 ffca 	bl	8007870 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80048dc:	78fb      	ldrb	r3, [r7, #3]
 80048de:	f003 030f 	and.w	r3, r3, #15
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d10a      	bne.n	80048fc <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6818      	ldr	r0, [r3, #0]
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	691b      	ldr	r3, [r3, #16]
 80048ee:	b2d9      	uxtb	r1, r3
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80048f6:	461a      	mov	r2, r3
 80048f8:	f003 f9ba 	bl	8007c70 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2200      	movs	r2, #0
 8004900:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004904:	2300      	movs	r3, #0
}
 8004906:	4618      	mov	r0, r3
 8004908:	3710      	adds	r7, #16
 800490a:	46bd      	mov	sp, r7
 800490c:	bd80      	pop	{r7, pc}

0800490e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800490e:	b580      	push	{r7, lr}
 8004910:	b084      	sub	sp, #16
 8004912:	af00      	add	r7, sp, #0
 8004914:	6078      	str	r0, [r7, #4]
 8004916:	460b      	mov	r3, r1
 8004918:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800491a:	78fb      	ldrb	r3, [r7, #3]
 800491c:	f003 020f 	and.w	r2, r3, #15
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	685b      	ldr	r3, [r3, #4]
 8004924:	429a      	cmp	r2, r3
 8004926:	d901      	bls.n	800492c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004928:	2301      	movs	r3, #1
 800492a:	e042      	b.n	80049b2 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800492c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004930:	2b00      	cmp	r3, #0
 8004932:	da0f      	bge.n	8004954 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004934:	78fb      	ldrb	r3, [r7, #3]
 8004936:	f003 020f 	and.w	r2, r3, #15
 800493a:	4613      	mov	r3, r2
 800493c:	00db      	lsls	r3, r3, #3
 800493e:	4413      	add	r3, r2
 8004940:	009b      	lsls	r3, r3, #2
 8004942:	3338      	adds	r3, #56	; 0x38
 8004944:	687a      	ldr	r2, [r7, #4]
 8004946:	4413      	add	r3, r2
 8004948:	3304      	adds	r3, #4
 800494a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	2201      	movs	r2, #1
 8004950:	705a      	strb	r2, [r3, #1]
 8004952:	e00f      	b.n	8004974 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004954:	78fb      	ldrb	r3, [r7, #3]
 8004956:	f003 020f 	and.w	r2, r3, #15
 800495a:	4613      	mov	r3, r2
 800495c:	00db      	lsls	r3, r3, #3
 800495e:	4413      	add	r3, r2
 8004960:	009b      	lsls	r3, r3, #2
 8004962:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004966:	687a      	ldr	r2, [r7, #4]
 8004968:	4413      	add	r3, r2
 800496a:	3304      	adds	r3, #4
 800496c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	2200      	movs	r2, #0
 8004972:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	2200      	movs	r2, #0
 8004978:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800497a:	78fb      	ldrb	r3, [r7, #3]
 800497c:	f003 030f 	and.w	r3, r3, #15
 8004980:	b2da      	uxtb	r2, r3
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800498c:	2b01      	cmp	r3, #1
 800498e:	d101      	bne.n	8004994 <HAL_PCD_EP_ClrStall+0x86>
 8004990:	2302      	movs	r3, #2
 8004992:	e00e      	b.n	80049b2 <HAL_PCD_EP_ClrStall+0xa4>
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2201      	movs	r2, #1
 8004998:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	68f9      	ldr	r1, [r7, #12]
 80049a2:	4618      	mov	r0, r3
 80049a4:	f002 ffd2 	bl	800794c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2200      	movs	r2, #0
 80049ac:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80049b0:	2300      	movs	r3, #0
}
 80049b2:	4618      	mov	r0, r3
 80049b4:	3710      	adds	r7, #16
 80049b6:	46bd      	mov	sp, r7
 80049b8:	bd80      	pop	{r7, pc}

080049ba <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80049ba:	b580      	push	{r7, lr}
 80049bc:	b084      	sub	sp, #16
 80049be:	af00      	add	r7, sp, #0
 80049c0:	6078      	str	r0, [r7, #4]
 80049c2:	460b      	mov	r3, r1
 80049c4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80049c6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	da0c      	bge.n	80049e8 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80049ce:	78fb      	ldrb	r3, [r7, #3]
 80049d0:	f003 020f 	and.w	r2, r3, #15
 80049d4:	4613      	mov	r3, r2
 80049d6:	00db      	lsls	r3, r3, #3
 80049d8:	4413      	add	r3, r2
 80049da:	009b      	lsls	r3, r3, #2
 80049dc:	3338      	adds	r3, #56	; 0x38
 80049de:	687a      	ldr	r2, [r7, #4]
 80049e0:	4413      	add	r3, r2
 80049e2:	3304      	adds	r3, #4
 80049e4:	60fb      	str	r3, [r7, #12]
 80049e6:	e00c      	b.n	8004a02 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80049e8:	78fb      	ldrb	r3, [r7, #3]
 80049ea:	f003 020f 	and.w	r2, r3, #15
 80049ee:	4613      	mov	r3, r2
 80049f0:	00db      	lsls	r3, r3, #3
 80049f2:	4413      	add	r3, r2
 80049f4:	009b      	lsls	r3, r3, #2
 80049f6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80049fa:	687a      	ldr	r2, [r7, #4]
 80049fc:	4413      	add	r3, r2
 80049fe:	3304      	adds	r3, #4
 8004a00:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	68f9      	ldr	r1, [r7, #12]
 8004a08:	4618      	mov	r0, r3
 8004a0a:	f002 fdf1 	bl	80075f0 <USB_EPStopXfer>
 8004a0e:	4603      	mov	r3, r0
 8004a10:	72fb      	strb	r3, [r7, #11]

  return ret;
 8004a12:	7afb      	ldrb	r3, [r7, #11]
}
 8004a14:	4618      	mov	r0, r3
 8004a16:	3710      	adds	r7, #16
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	bd80      	pop	{r7, pc}

08004a1c <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	b08a      	sub	sp, #40	; 0x28
 8004a20:	af02      	add	r7, sp, #8
 8004a22:	6078      	str	r0, [r7, #4]
 8004a24:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a2c:	697b      	ldr	r3, [r7, #20]
 8004a2e:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004a30:	683a      	ldr	r2, [r7, #0]
 8004a32:	4613      	mov	r3, r2
 8004a34:	00db      	lsls	r3, r3, #3
 8004a36:	4413      	add	r3, r2
 8004a38:	009b      	lsls	r3, r3, #2
 8004a3a:	3338      	adds	r3, #56	; 0x38
 8004a3c:	687a      	ldr	r2, [r7, #4]
 8004a3e:	4413      	add	r3, r2
 8004a40:	3304      	adds	r3, #4
 8004a42:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	6a1a      	ldr	r2, [r3, #32]
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	699b      	ldr	r3, [r3, #24]
 8004a4c:	429a      	cmp	r2, r3
 8004a4e:	d901      	bls.n	8004a54 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004a50:	2301      	movs	r3, #1
 8004a52:	e06c      	b.n	8004b2e <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	699a      	ldr	r2, [r3, #24]
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	6a1b      	ldr	r3, [r3, #32]
 8004a5c:	1ad3      	subs	r3, r2, r3
 8004a5e:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	68db      	ldr	r3, [r3, #12]
 8004a64:	69fa      	ldr	r2, [r7, #28]
 8004a66:	429a      	cmp	r2, r3
 8004a68:	d902      	bls.n	8004a70 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	68db      	ldr	r3, [r3, #12]
 8004a6e:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004a70:	69fb      	ldr	r3, [r7, #28]
 8004a72:	3303      	adds	r3, #3
 8004a74:	089b      	lsrs	r3, r3, #2
 8004a76:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004a78:	e02b      	b.n	8004ad2 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	699a      	ldr	r2, [r3, #24]
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	6a1b      	ldr	r3, [r3, #32]
 8004a82:	1ad3      	subs	r3, r2, r3
 8004a84:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	68db      	ldr	r3, [r3, #12]
 8004a8a:	69fa      	ldr	r2, [r7, #28]
 8004a8c:	429a      	cmp	r2, r3
 8004a8e:	d902      	bls.n	8004a96 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	68db      	ldr	r3, [r3, #12]
 8004a94:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8004a96:	69fb      	ldr	r3, [r7, #28]
 8004a98:	3303      	adds	r3, #3
 8004a9a:	089b      	lsrs	r3, r3, #2
 8004a9c:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	6919      	ldr	r1, [r3, #16]
 8004aa2:	683b      	ldr	r3, [r7, #0]
 8004aa4:	b2da      	uxtb	r2, r3
 8004aa6:	69fb      	ldr	r3, [r7, #28]
 8004aa8:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004aae:	b2db      	uxtb	r3, r3
 8004ab0:	9300      	str	r3, [sp, #0]
 8004ab2:	4603      	mov	r3, r0
 8004ab4:	6978      	ldr	r0, [r7, #20]
 8004ab6:	f002 fe45 	bl	8007744 <USB_WritePacket>

    ep->xfer_buff  += len;
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	691a      	ldr	r2, [r3, #16]
 8004abe:	69fb      	ldr	r3, [r7, #28]
 8004ac0:	441a      	add	r2, r3
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	6a1a      	ldr	r2, [r3, #32]
 8004aca:	69fb      	ldr	r3, [r7, #28]
 8004acc:	441a      	add	r2, r3
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004ad2:	683b      	ldr	r3, [r7, #0]
 8004ad4:	015a      	lsls	r2, r3, #5
 8004ad6:	693b      	ldr	r3, [r7, #16]
 8004ad8:	4413      	add	r3, r2
 8004ada:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ade:	699b      	ldr	r3, [r3, #24]
 8004ae0:	b29b      	uxth	r3, r3
 8004ae2:	69ba      	ldr	r2, [r7, #24]
 8004ae4:	429a      	cmp	r2, r3
 8004ae6:	d809      	bhi.n	8004afc <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	6a1a      	ldr	r2, [r3, #32]
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004af0:	429a      	cmp	r2, r3
 8004af2:	d203      	bcs.n	8004afc <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	699b      	ldr	r3, [r3, #24]
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d1be      	bne.n	8004a7a <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	699a      	ldr	r2, [r3, #24]
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	6a1b      	ldr	r3, [r3, #32]
 8004b04:	429a      	cmp	r2, r3
 8004b06:	d811      	bhi.n	8004b2c <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004b08:	683b      	ldr	r3, [r7, #0]
 8004b0a:	f003 030f 	and.w	r3, r3, #15
 8004b0e:	2201      	movs	r2, #1
 8004b10:	fa02 f303 	lsl.w	r3, r2, r3
 8004b14:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004b16:	693b      	ldr	r3, [r7, #16]
 8004b18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b1c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004b1e:	68bb      	ldr	r3, [r7, #8]
 8004b20:	43db      	mvns	r3, r3
 8004b22:	6939      	ldr	r1, [r7, #16]
 8004b24:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004b28:	4013      	ands	r3, r2
 8004b2a:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8004b2c:	2300      	movs	r3, #0
}
 8004b2e:	4618      	mov	r0, r3
 8004b30:	3720      	adds	r7, #32
 8004b32:	46bd      	mov	sp, r7
 8004b34:	bd80      	pop	{r7, pc}
	...

08004b38 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004b38:	b580      	push	{r7, lr}
 8004b3a:	b088      	sub	sp, #32
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	6078      	str	r0, [r7, #4]
 8004b40:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b48:	69fb      	ldr	r3, [r7, #28]
 8004b4a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004b4c:	69fb      	ldr	r3, [r7, #28]
 8004b4e:	333c      	adds	r3, #60	; 0x3c
 8004b50:	3304      	adds	r3, #4
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004b56:	683b      	ldr	r3, [r7, #0]
 8004b58:	015a      	lsls	r2, r3, #5
 8004b5a:	69bb      	ldr	r3, [r7, #24]
 8004b5c:	4413      	add	r3, r2
 8004b5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b62:	689b      	ldr	r3, [r3, #8]
 8004b64:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	691b      	ldr	r3, [r3, #16]
 8004b6a:	2b01      	cmp	r3, #1
 8004b6c:	d17b      	bne.n	8004c66 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8004b6e:	693b      	ldr	r3, [r7, #16]
 8004b70:	f003 0308 	and.w	r3, r3, #8
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d015      	beq.n	8004ba4 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004b78:	697b      	ldr	r3, [r7, #20]
 8004b7a:	4a61      	ldr	r2, [pc, #388]	; (8004d00 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004b7c:	4293      	cmp	r3, r2
 8004b7e:	f240 80b9 	bls.w	8004cf4 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004b82:	693b      	ldr	r3, [r7, #16]
 8004b84:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	f000 80b3 	beq.w	8004cf4 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004b8e:	683b      	ldr	r3, [r7, #0]
 8004b90:	015a      	lsls	r2, r3, #5
 8004b92:	69bb      	ldr	r3, [r7, #24]
 8004b94:	4413      	add	r3, r2
 8004b96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b9a:	461a      	mov	r2, r3
 8004b9c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004ba0:	6093      	str	r3, [r2, #8]
 8004ba2:	e0a7      	b.n	8004cf4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004ba4:	693b      	ldr	r3, [r7, #16]
 8004ba6:	f003 0320 	and.w	r3, r3, #32
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d009      	beq.n	8004bc2 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004bae:	683b      	ldr	r3, [r7, #0]
 8004bb0:	015a      	lsls	r2, r3, #5
 8004bb2:	69bb      	ldr	r3, [r7, #24]
 8004bb4:	4413      	add	r3, r2
 8004bb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bba:	461a      	mov	r2, r3
 8004bbc:	2320      	movs	r3, #32
 8004bbe:	6093      	str	r3, [r2, #8]
 8004bc0:	e098      	b.n	8004cf4 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8004bc2:	693b      	ldr	r3, [r7, #16]
 8004bc4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	f040 8093 	bne.w	8004cf4 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004bce:	697b      	ldr	r3, [r7, #20]
 8004bd0:	4a4b      	ldr	r2, [pc, #300]	; (8004d00 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004bd2:	4293      	cmp	r3, r2
 8004bd4:	d90f      	bls.n	8004bf6 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004bd6:	693b      	ldr	r3, [r7, #16]
 8004bd8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d00a      	beq.n	8004bf6 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004be0:	683b      	ldr	r3, [r7, #0]
 8004be2:	015a      	lsls	r2, r3, #5
 8004be4:	69bb      	ldr	r3, [r7, #24]
 8004be6:	4413      	add	r3, r2
 8004be8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bec:	461a      	mov	r2, r3
 8004bee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004bf2:	6093      	str	r3, [r2, #8]
 8004bf4:	e07e      	b.n	8004cf4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8004bf6:	683a      	ldr	r2, [r7, #0]
 8004bf8:	4613      	mov	r3, r2
 8004bfa:	00db      	lsls	r3, r3, #3
 8004bfc:	4413      	add	r3, r2
 8004bfe:	009b      	lsls	r3, r3, #2
 8004c00:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004c04:	687a      	ldr	r2, [r7, #4]
 8004c06:	4413      	add	r3, r2
 8004c08:	3304      	adds	r3, #4
 8004c0a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	69da      	ldr	r2, [r3, #28]
 8004c10:	683b      	ldr	r3, [r7, #0]
 8004c12:	0159      	lsls	r1, r3, #5
 8004c14:	69bb      	ldr	r3, [r7, #24]
 8004c16:	440b      	add	r3, r1
 8004c18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c1c:	691b      	ldr	r3, [r3, #16]
 8004c1e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c22:	1ad2      	subs	r2, r2, r3
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8004c28:	683b      	ldr	r3, [r7, #0]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d114      	bne.n	8004c58 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	699b      	ldr	r3, [r3, #24]
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d109      	bne.n	8004c4a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	6818      	ldr	r0, [r3, #0]
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004c40:	461a      	mov	r2, r3
 8004c42:	2101      	movs	r1, #1
 8004c44:	f003 f814 	bl	8007c70 <USB_EP0_OutStart>
 8004c48:	e006      	b.n	8004c58 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	691a      	ldr	r2, [r3, #16]
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	6a1b      	ldr	r3, [r3, #32]
 8004c52:	441a      	add	r2, r3
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004c58:	683b      	ldr	r3, [r7, #0]
 8004c5a:	b2db      	uxtb	r3, r3
 8004c5c:	4619      	mov	r1, r3
 8004c5e:	6878      	ldr	r0, [r7, #4]
 8004c60:	f005 f936 	bl	8009ed0 <HAL_PCD_DataOutStageCallback>
 8004c64:	e046      	b.n	8004cf4 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004c66:	697b      	ldr	r3, [r7, #20]
 8004c68:	4a26      	ldr	r2, [pc, #152]	; (8004d04 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8004c6a:	4293      	cmp	r3, r2
 8004c6c:	d124      	bne.n	8004cb8 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004c6e:	693b      	ldr	r3, [r7, #16]
 8004c70:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d00a      	beq.n	8004c8e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004c78:	683b      	ldr	r3, [r7, #0]
 8004c7a:	015a      	lsls	r2, r3, #5
 8004c7c:	69bb      	ldr	r3, [r7, #24]
 8004c7e:	4413      	add	r3, r2
 8004c80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c84:	461a      	mov	r2, r3
 8004c86:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004c8a:	6093      	str	r3, [r2, #8]
 8004c8c:	e032      	b.n	8004cf4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004c8e:	693b      	ldr	r3, [r7, #16]
 8004c90:	f003 0320 	and.w	r3, r3, #32
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d008      	beq.n	8004caa <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004c98:	683b      	ldr	r3, [r7, #0]
 8004c9a:	015a      	lsls	r2, r3, #5
 8004c9c:	69bb      	ldr	r3, [r7, #24]
 8004c9e:	4413      	add	r3, r2
 8004ca0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ca4:	461a      	mov	r2, r3
 8004ca6:	2320      	movs	r3, #32
 8004ca8:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004caa:	683b      	ldr	r3, [r7, #0]
 8004cac:	b2db      	uxtb	r3, r3
 8004cae:	4619      	mov	r1, r3
 8004cb0:	6878      	ldr	r0, [r7, #4]
 8004cb2:	f005 f90d 	bl	8009ed0 <HAL_PCD_DataOutStageCallback>
 8004cb6:	e01d      	b.n	8004cf4 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004cb8:	683b      	ldr	r3, [r7, #0]
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d114      	bne.n	8004ce8 <PCD_EP_OutXfrComplete_int+0x1b0>
 8004cbe:	6879      	ldr	r1, [r7, #4]
 8004cc0:	683a      	ldr	r2, [r7, #0]
 8004cc2:	4613      	mov	r3, r2
 8004cc4:	00db      	lsls	r3, r3, #3
 8004cc6:	4413      	add	r3, r2
 8004cc8:	009b      	lsls	r3, r3, #2
 8004cca:	440b      	add	r3, r1
 8004ccc:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d108      	bne.n	8004ce8 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	6818      	ldr	r0, [r3, #0]
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004ce0:	461a      	mov	r2, r3
 8004ce2:	2100      	movs	r1, #0
 8004ce4:	f002 ffc4 	bl	8007c70 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	b2db      	uxtb	r3, r3
 8004cec:	4619      	mov	r1, r3
 8004cee:	6878      	ldr	r0, [r7, #4]
 8004cf0:	f005 f8ee 	bl	8009ed0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004cf4:	2300      	movs	r3, #0
}
 8004cf6:	4618      	mov	r0, r3
 8004cf8:	3720      	adds	r7, #32
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	bd80      	pop	{r7, pc}
 8004cfe:	bf00      	nop
 8004d00:	4f54300a 	.word	0x4f54300a
 8004d04:	4f54310a 	.word	0x4f54310a

08004d08 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	b086      	sub	sp, #24
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
 8004d10:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d18:	697b      	ldr	r3, [r7, #20]
 8004d1a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004d1c:	697b      	ldr	r3, [r7, #20]
 8004d1e:	333c      	adds	r3, #60	; 0x3c
 8004d20:	3304      	adds	r3, #4
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004d26:	683b      	ldr	r3, [r7, #0]
 8004d28:	015a      	lsls	r2, r3, #5
 8004d2a:	693b      	ldr	r3, [r7, #16]
 8004d2c:	4413      	add	r3, r2
 8004d2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d32:	689b      	ldr	r3, [r3, #8]
 8004d34:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	4a15      	ldr	r2, [pc, #84]	; (8004d90 <PCD_EP_OutSetupPacket_int+0x88>)
 8004d3a:	4293      	cmp	r3, r2
 8004d3c:	d90e      	bls.n	8004d5c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004d3e:	68bb      	ldr	r3, [r7, #8]
 8004d40:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d009      	beq.n	8004d5c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004d48:	683b      	ldr	r3, [r7, #0]
 8004d4a:	015a      	lsls	r2, r3, #5
 8004d4c:	693b      	ldr	r3, [r7, #16]
 8004d4e:	4413      	add	r3, r2
 8004d50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d54:	461a      	mov	r2, r3
 8004d56:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004d5a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004d5c:	6878      	ldr	r0, [r7, #4]
 8004d5e:	f005 f8a5 	bl	8009eac <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	4a0a      	ldr	r2, [pc, #40]	; (8004d90 <PCD_EP_OutSetupPacket_int+0x88>)
 8004d66:	4293      	cmp	r3, r2
 8004d68:	d90c      	bls.n	8004d84 <PCD_EP_OutSetupPacket_int+0x7c>
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	691b      	ldr	r3, [r3, #16]
 8004d6e:	2b01      	cmp	r3, #1
 8004d70:	d108      	bne.n	8004d84 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	6818      	ldr	r0, [r3, #0]
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004d7c:	461a      	mov	r2, r3
 8004d7e:	2101      	movs	r1, #1
 8004d80:	f002 ff76 	bl	8007c70 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004d84:	2300      	movs	r3, #0
}
 8004d86:	4618      	mov	r0, r3
 8004d88:	3718      	adds	r7, #24
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	bd80      	pop	{r7, pc}
 8004d8e:	bf00      	nop
 8004d90:	4f54300a 	.word	0x4f54300a

08004d94 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004d94:	b480      	push	{r7}
 8004d96:	b085      	sub	sp, #20
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	6078      	str	r0, [r7, #4]
 8004d9c:	460b      	mov	r3, r1
 8004d9e:	70fb      	strb	r3, [r7, #3]
 8004da0:	4613      	mov	r3, r2
 8004da2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004daa:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004dac:	78fb      	ldrb	r3, [r7, #3]
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d107      	bne.n	8004dc2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004db2:	883b      	ldrh	r3, [r7, #0]
 8004db4:	0419      	lsls	r1, r3, #16
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	68ba      	ldr	r2, [r7, #8]
 8004dbc:	430a      	orrs	r2, r1
 8004dbe:	629a      	str	r2, [r3, #40]	; 0x28
 8004dc0:	e028      	b.n	8004e14 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dc8:	0c1b      	lsrs	r3, r3, #16
 8004dca:	68ba      	ldr	r2, [r7, #8]
 8004dcc:	4413      	add	r3, r2
 8004dce:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004dd0:	2300      	movs	r3, #0
 8004dd2:	73fb      	strb	r3, [r7, #15]
 8004dd4:	e00d      	b.n	8004df2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681a      	ldr	r2, [r3, #0]
 8004dda:	7bfb      	ldrb	r3, [r7, #15]
 8004ddc:	3340      	adds	r3, #64	; 0x40
 8004dde:	009b      	lsls	r3, r3, #2
 8004de0:	4413      	add	r3, r2
 8004de2:	685b      	ldr	r3, [r3, #4]
 8004de4:	0c1b      	lsrs	r3, r3, #16
 8004de6:	68ba      	ldr	r2, [r7, #8]
 8004de8:	4413      	add	r3, r2
 8004dea:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004dec:	7bfb      	ldrb	r3, [r7, #15]
 8004dee:	3301      	adds	r3, #1
 8004df0:	73fb      	strb	r3, [r7, #15]
 8004df2:	7bfa      	ldrb	r2, [r7, #15]
 8004df4:	78fb      	ldrb	r3, [r7, #3]
 8004df6:	3b01      	subs	r3, #1
 8004df8:	429a      	cmp	r2, r3
 8004dfa:	d3ec      	bcc.n	8004dd6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004dfc:	883b      	ldrh	r3, [r7, #0]
 8004dfe:	0418      	lsls	r0, r3, #16
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	6819      	ldr	r1, [r3, #0]
 8004e04:	78fb      	ldrb	r3, [r7, #3]
 8004e06:	3b01      	subs	r3, #1
 8004e08:	68ba      	ldr	r2, [r7, #8]
 8004e0a:	4302      	orrs	r2, r0
 8004e0c:	3340      	adds	r3, #64	; 0x40
 8004e0e:	009b      	lsls	r3, r3, #2
 8004e10:	440b      	add	r3, r1
 8004e12:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004e14:	2300      	movs	r3, #0
}
 8004e16:	4618      	mov	r0, r3
 8004e18:	3714      	adds	r7, #20
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e20:	4770      	bx	lr

08004e22 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004e22:	b480      	push	{r7}
 8004e24:	b083      	sub	sp, #12
 8004e26:	af00      	add	r7, sp, #0
 8004e28:	6078      	str	r0, [r7, #4]
 8004e2a:	460b      	mov	r3, r1
 8004e2c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	887a      	ldrh	r2, [r7, #2]
 8004e34:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004e36:	2300      	movs	r3, #0
}
 8004e38:	4618      	mov	r0, r3
 8004e3a:	370c      	adds	r7, #12
 8004e3c:	46bd      	mov	sp, r7
 8004e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e42:	4770      	bx	lr

08004e44 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004e44:	b480      	push	{r7}
 8004e46:	b083      	sub	sp, #12
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	6078      	str	r0, [r7, #4]
 8004e4c:	460b      	mov	r3, r1
 8004e4e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004e50:	bf00      	nop
 8004e52:	370c      	adds	r7, #12
 8004e54:	46bd      	mov	sp, r7
 8004e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e5a:	4770      	bx	lr

08004e5c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004e5c:	b580      	push	{r7, lr}
 8004e5e:	b086      	sub	sp, #24
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d101      	bne.n	8004e6e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004e6a:	2301      	movs	r3, #1
 8004e6c:	e267      	b.n	800533e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f003 0301 	and.w	r3, r3, #1
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d075      	beq.n	8004f66 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004e7a:	4b88      	ldr	r3, [pc, #544]	; (800509c <HAL_RCC_OscConfig+0x240>)
 8004e7c:	689b      	ldr	r3, [r3, #8]
 8004e7e:	f003 030c 	and.w	r3, r3, #12
 8004e82:	2b04      	cmp	r3, #4
 8004e84:	d00c      	beq.n	8004ea0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004e86:	4b85      	ldr	r3, [pc, #532]	; (800509c <HAL_RCC_OscConfig+0x240>)
 8004e88:	689b      	ldr	r3, [r3, #8]
 8004e8a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004e8e:	2b08      	cmp	r3, #8
 8004e90:	d112      	bne.n	8004eb8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004e92:	4b82      	ldr	r3, [pc, #520]	; (800509c <HAL_RCC_OscConfig+0x240>)
 8004e94:	685b      	ldr	r3, [r3, #4]
 8004e96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e9a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004e9e:	d10b      	bne.n	8004eb8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ea0:	4b7e      	ldr	r3, [pc, #504]	; (800509c <HAL_RCC_OscConfig+0x240>)
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d05b      	beq.n	8004f64 <HAL_RCC_OscConfig+0x108>
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	685b      	ldr	r3, [r3, #4]
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d157      	bne.n	8004f64 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004eb4:	2301      	movs	r3, #1
 8004eb6:	e242      	b.n	800533e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	685b      	ldr	r3, [r3, #4]
 8004ebc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ec0:	d106      	bne.n	8004ed0 <HAL_RCC_OscConfig+0x74>
 8004ec2:	4b76      	ldr	r3, [pc, #472]	; (800509c <HAL_RCC_OscConfig+0x240>)
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	4a75      	ldr	r2, [pc, #468]	; (800509c <HAL_RCC_OscConfig+0x240>)
 8004ec8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ecc:	6013      	str	r3, [r2, #0]
 8004ece:	e01d      	b.n	8004f0c <HAL_RCC_OscConfig+0xb0>
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	685b      	ldr	r3, [r3, #4]
 8004ed4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004ed8:	d10c      	bne.n	8004ef4 <HAL_RCC_OscConfig+0x98>
 8004eda:	4b70      	ldr	r3, [pc, #448]	; (800509c <HAL_RCC_OscConfig+0x240>)
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	4a6f      	ldr	r2, [pc, #444]	; (800509c <HAL_RCC_OscConfig+0x240>)
 8004ee0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004ee4:	6013      	str	r3, [r2, #0]
 8004ee6:	4b6d      	ldr	r3, [pc, #436]	; (800509c <HAL_RCC_OscConfig+0x240>)
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	4a6c      	ldr	r2, [pc, #432]	; (800509c <HAL_RCC_OscConfig+0x240>)
 8004eec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ef0:	6013      	str	r3, [r2, #0]
 8004ef2:	e00b      	b.n	8004f0c <HAL_RCC_OscConfig+0xb0>
 8004ef4:	4b69      	ldr	r3, [pc, #420]	; (800509c <HAL_RCC_OscConfig+0x240>)
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	4a68      	ldr	r2, [pc, #416]	; (800509c <HAL_RCC_OscConfig+0x240>)
 8004efa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004efe:	6013      	str	r3, [r2, #0]
 8004f00:	4b66      	ldr	r3, [pc, #408]	; (800509c <HAL_RCC_OscConfig+0x240>)
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	4a65      	ldr	r2, [pc, #404]	; (800509c <HAL_RCC_OscConfig+0x240>)
 8004f06:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004f0a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	685b      	ldr	r3, [r3, #4]
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d013      	beq.n	8004f3c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f14:	f7fd fc9c 	bl	8002850 <HAL_GetTick>
 8004f18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f1a:	e008      	b.n	8004f2e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004f1c:	f7fd fc98 	bl	8002850 <HAL_GetTick>
 8004f20:	4602      	mov	r2, r0
 8004f22:	693b      	ldr	r3, [r7, #16]
 8004f24:	1ad3      	subs	r3, r2, r3
 8004f26:	2b64      	cmp	r3, #100	; 0x64
 8004f28:	d901      	bls.n	8004f2e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004f2a:	2303      	movs	r3, #3
 8004f2c:	e207      	b.n	800533e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f2e:	4b5b      	ldr	r3, [pc, #364]	; (800509c <HAL_RCC_OscConfig+0x240>)
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d0f0      	beq.n	8004f1c <HAL_RCC_OscConfig+0xc0>
 8004f3a:	e014      	b.n	8004f66 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f3c:	f7fd fc88 	bl	8002850 <HAL_GetTick>
 8004f40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f42:	e008      	b.n	8004f56 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004f44:	f7fd fc84 	bl	8002850 <HAL_GetTick>
 8004f48:	4602      	mov	r2, r0
 8004f4a:	693b      	ldr	r3, [r7, #16]
 8004f4c:	1ad3      	subs	r3, r2, r3
 8004f4e:	2b64      	cmp	r3, #100	; 0x64
 8004f50:	d901      	bls.n	8004f56 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004f52:	2303      	movs	r3, #3
 8004f54:	e1f3      	b.n	800533e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f56:	4b51      	ldr	r3, [pc, #324]	; (800509c <HAL_RCC_OscConfig+0x240>)
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d1f0      	bne.n	8004f44 <HAL_RCC_OscConfig+0xe8>
 8004f62:	e000      	b.n	8004f66 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f64:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f003 0302 	and.w	r3, r3, #2
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d063      	beq.n	800503a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004f72:	4b4a      	ldr	r3, [pc, #296]	; (800509c <HAL_RCC_OscConfig+0x240>)
 8004f74:	689b      	ldr	r3, [r3, #8]
 8004f76:	f003 030c 	and.w	r3, r3, #12
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d00b      	beq.n	8004f96 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004f7e:	4b47      	ldr	r3, [pc, #284]	; (800509c <HAL_RCC_OscConfig+0x240>)
 8004f80:	689b      	ldr	r3, [r3, #8]
 8004f82:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004f86:	2b08      	cmp	r3, #8
 8004f88:	d11c      	bne.n	8004fc4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004f8a:	4b44      	ldr	r3, [pc, #272]	; (800509c <HAL_RCC_OscConfig+0x240>)
 8004f8c:	685b      	ldr	r3, [r3, #4]
 8004f8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d116      	bne.n	8004fc4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004f96:	4b41      	ldr	r3, [pc, #260]	; (800509c <HAL_RCC_OscConfig+0x240>)
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f003 0302 	and.w	r3, r3, #2
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d005      	beq.n	8004fae <HAL_RCC_OscConfig+0x152>
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	68db      	ldr	r3, [r3, #12]
 8004fa6:	2b01      	cmp	r3, #1
 8004fa8:	d001      	beq.n	8004fae <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004faa:	2301      	movs	r3, #1
 8004fac:	e1c7      	b.n	800533e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004fae:	4b3b      	ldr	r3, [pc, #236]	; (800509c <HAL_RCC_OscConfig+0x240>)
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	691b      	ldr	r3, [r3, #16]
 8004fba:	00db      	lsls	r3, r3, #3
 8004fbc:	4937      	ldr	r1, [pc, #220]	; (800509c <HAL_RCC_OscConfig+0x240>)
 8004fbe:	4313      	orrs	r3, r2
 8004fc0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004fc2:	e03a      	b.n	800503a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	68db      	ldr	r3, [r3, #12]
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d020      	beq.n	800500e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004fcc:	4b34      	ldr	r3, [pc, #208]	; (80050a0 <HAL_RCC_OscConfig+0x244>)
 8004fce:	2201      	movs	r2, #1
 8004fd0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fd2:	f7fd fc3d 	bl	8002850 <HAL_GetTick>
 8004fd6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004fd8:	e008      	b.n	8004fec <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004fda:	f7fd fc39 	bl	8002850 <HAL_GetTick>
 8004fde:	4602      	mov	r2, r0
 8004fe0:	693b      	ldr	r3, [r7, #16]
 8004fe2:	1ad3      	subs	r3, r2, r3
 8004fe4:	2b02      	cmp	r3, #2
 8004fe6:	d901      	bls.n	8004fec <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004fe8:	2303      	movs	r3, #3
 8004fea:	e1a8      	b.n	800533e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004fec:	4b2b      	ldr	r3, [pc, #172]	; (800509c <HAL_RCC_OscConfig+0x240>)
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f003 0302 	and.w	r3, r3, #2
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d0f0      	beq.n	8004fda <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ff8:	4b28      	ldr	r3, [pc, #160]	; (800509c <HAL_RCC_OscConfig+0x240>)
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	691b      	ldr	r3, [r3, #16]
 8005004:	00db      	lsls	r3, r3, #3
 8005006:	4925      	ldr	r1, [pc, #148]	; (800509c <HAL_RCC_OscConfig+0x240>)
 8005008:	4313      	orrs	r3, r2
 800500a:	600b      	str	r3, [r1, #0]
 800500c:	e015      	b.n	800503a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800500e:	4b24      	ldr	r3, [pc, #144]	; (80050a0 <HAL_RCC_OscConfig+0x244>)
 8005010:	2200      	movs	r2, #0
 8005012:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005014:	f7fd fc1c 	bl	8002850 <HAL_GetTick>
 8005018:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800501a:	e008      	b.n	800502e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800501c:	f7fd fc18 	bl	8002850 <HAL_GetTick>
 8005020:	4602      	mov	r2, r0
 8005022:	693b      	ldr	r3, [r7, #16]
 8005024:	1ad3      	subs	r3, r2, r3
 8005026:	2b02      	cmp	r3, #2
 8005028:	d901      	bls.n	800502e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800502a:	2303      	movs	r3, #3
 800502c:	e187      	b.n	800533e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800502e:	4b1b      	ldr	r3, [pc, #108]	; (800509c <HAL_RCC_OscConfig+0x240>)
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f003 0302 	and.w	r3, r3, #2
 8005036:	2b00      	cmp	r3, #0
 8005038:	d1f0      	bne.n	800501c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f003 0308 	and.w	r3, r3, #8
 8005042:	2b00      	cmp	r3, #0
 8005044:	d036      	beq.n	80050b4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	695b      	ldr	r3, [r3, #20]
 800504a:	2b00      	cmp	r3, #0
 800504c:	d016      	beq.n	800507c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800504e:	4b15      	ldr	r3, [pc, #84]	; (80050a4 <HAL_RCC_OscConfig+0x248>)
 8005050:	2201      	movs	r2, #1
 8005052:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005054:	f7fd fbfc 	bl	8002850 <HAL_GetTick>
 8005058:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800505a:	e008      	b.n	800506e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800505c:	f7fd fbf8 	bl	8002850 <HAL_GetTick>
 8005060:	4602      	mov	r2, r0
 8005062:	693b      	ldr	r3, [r7, #16]
 8005064:	1ad3      	subs	r3, r2, r3
 8005066:	2b02      	cmp	r3, #2
 8005068:	d901      	bls.n	800506e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800506a:	2303      	movs	r3, #3
 800506c:	e167      	b.n	800533e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800506e:	4b0b      	ldr	r3, [pc, #44]	; (800509c <HAL_RCC_OscConfig+0x240>)
 8005070:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005072:	f003 0302 	and.w	r3, r3, #2
 8005076:	2b00      	cmp	r3, #0
 8005078:	d0f0      	beq.n	800505c <HAL_RCC_OscConfig+0x200>
 800507a:	e01b      	b.n	80050b4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800507c:	4b09      	ldr	r3, [pc, #36]	; (80050a4 <HAL_RCC_OscConfig+0x248>)
 800507e:	2200      	movs	r2, #0
 8005080:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005082:	f7fd fbe5 	bl	8002850 <HAL_GetTick>
 8005086:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005088:	e00e      	b.n	80050a8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800508a:	f7fd fbe1 	bl	8002850 <HAL_GetTick>
 800508e:	4602      	mov	r2, r0
 8005090:	693b      	ldr	r3, [r7, #16]
 8005092:	1ad3      	subs	r3, r2, r3
 8005094:	2b02      	cmp	r3, #2
 8005096:	d907      	bls.n	80050a8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005098:	2303      	movs	r3, #3
 800509a:	e150      	b.n	800533e <HAL_RCC_OscConfig+0x4e2>
 800509c:	40023800 	.word	0x40023800
 80050a0:	42470000 	.word	0x42470000
 80050a4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80050a8:	4b88      	ldr	r3, [pc, #544]	; (80052cc <HAL_RCC_OscConfig+0x470>)
 80050aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80050ac:	f003 0302 	and.w	r3, r3, #2
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d1ea      	bne.n	800508a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f003 0304 	and.w	r3, r3, #4
 80050bc:	2b00      	cmp	r3, #0
 80050be:	f000 8097 	beq.w	80051f0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80050c2:	2300      	movs	r3, #0
 80050c4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80050c6:	4b81      	ldr	r3, [pc, #516]	; (80052cc <HAL_RCC_OscConfig+0x470>)
 80050c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d10f      	bne.n	80050f2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80050d2:	2300      	movs	r3, #0
 80050d4:	60bb      	str	r3, [r7, #8]
 80050d6:	4b7d      	ldr	r3, [pc, #500]	; (80052cc <HAL_RCC_OscConfig+0x470>)
 80050d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050da:	4a7c      	ldr	r2, [pc, #496]	; (80052cc <HAL_RCC_OscConfig+0x470>)
 80050dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80050e0:	6413      	str	r3, [r2, #64]	; 0x40
 80050e2:	4b7a      	ldr	r3, [pc, #488]	; (80052cc <HAL_RCC_OscConfig+0x470>)
 80050e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050ea:	60bb      	str	r3, [r7, #8]
 80050ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80050ee:	2301      	movs	r3, #1
 80050f0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050f2:	4b77      	ldr	r3, [pc, #476]	; (80052d0 <HAL_RCC_OscConfig+0x474>)
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d118      	bne.n	8005130 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80050fe:	4b74      	ldr	r3, [pc, #464]	; (80052d0 <HAL_RCC_OscConfig+0x474>)
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	4a73      	ldr	r2, [pc, #460]	; (80052d0 <HAL_RCC_OscConfig+0x474>)
 8005104:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005108:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800510a:	f7fd fba1 	bl	8002850 <HAL_GetTick>
 800510e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005110:	e008      	b.n	8005124 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005112:	f7fd fb9d 	bl	8002850 <HAL_GetTick>
 8005116:	4602      	mov	r2, r0
 8005118:	693b      	ldr	r3, [r7, #16]
 800511a:	1ad3      	subs	r3, r2, r3
 800511c:	2b02      	cmp	r3, #2
 800511e:	d901      	bls.n	8005124 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005120:	2303      	movs	r3, #3
 8005122:	e10c      	b.n	800533e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005124:	4b6a      	ldr	r3, [pc, #424]	; (80052d0 <HAL_RCC_OscConfig+0x474>)
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800512c:	2b00      	cmp	r3, #0
 800512e:	d0f0      	beq.n	8005112 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	689b      	ldr	r3, [r3, #8]
 8005134:	2b01      	cmp	r3, #1
 8005136:	d106      	bne.n	8005146 <HAL_RCC_OscConfig+0x2ea>
 8005138:	4b64      	ldr	r3, [pc, #400]	; (80052cc <HAL_RCC_OscConfig+0x470>)
 800513a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800513c:	4a63      	ldr	r2, [pc, #396]	; (80052cc <HAL_RCC_OscConfig+0x470>)
 800513e:	f043 0301 	orr.w	r3, r3, #1
 8005142:	6713      	str	r3, [r2, #112]	; 0x70
 8005144:	e01c      	b.n	8005180 <HAL_RCC_OscConfig+0x324>
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	689b      	ldr	r3, [r3, #8]
 800514a:	2b05      	cmp	r3, #5
 800514c:	d10c      	bne.n	8005168 <HAL_RCC_OscConfig+0x30c>
 800514e:	4b5f      	ldr	r3, [pc, #380]	; (80052cc <HAL_RCC_OscConfig+0x470>)
 8005150:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005152:	4a5e      	ldr	r2, [pc, #376]	; (80052cc <HAL_RCC_OscConfig+0x470>)
 8005154:	f043 0304 	orr.w	r3, r3, #4
 8005158:	6713      	str	r3, [r2, #112]	; 0x70
 800515a:	4b5c      	ldr	r3, [pc, #368]	; (80052cc <HAL_RCC_OscConfig+0x470>)
 800515c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800515e:	4a5b      	ldr	r2, [pc, #364]	; (80052cc <HAL_RCC_OscConfig+0x470>)
 8005160:	f043 0301 	orr.w	r3, r3, #1
 8005164:	6713      	str	r3, [r2, #112]	; 0x70
 8005166:	e00b      	b.n	8005180 <HAL_RCC_OscConfig+0x324>
 8005168:	4b58      	ldr	r3, [pc, #352]	; (80052cc <HAL_RCC_OscConfig+0x470>)
 800516a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800516c:	4a57      	ldr	r2, [pc, #348]	; (80052cc <HAL_RCC_OscConfig+0x470>)
 800516e:	f023 0301 	bic.w	r3, r3, #1
 8005172:	6713      	str	r3, [r2, #112]	; 0x70
 8005174:	4b55      	ldr	r3, [pc, #340]	; (80052cc <HAL_RCC_OscConfig+0x470>)
 8005176:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005178:	4a54      	ldr	r2, [pc, #336]	; (80052cc <HAL_RCC_OscConfig+0x470>)
 800517a:	f023 0304 	bic.w	r3, r3, #4
 800517e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	689b      	ldr	r3, [r3, #8]
 8005184:	2b00      	cmp	r3, #0
 8005186:	d015      	beq.n	80051b4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005188:	f7fd fb62 	bl	8002850 <HAL_GetTick>
 800518c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800518e:	e00a      	b.n	80051a6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005190:	f7fd fb5e 	bl	8002850 <HAL_GetTick>
 8005194:	4602      	mov	r2, r0
 8005196:	693b      	ldr	r3, [r7, #16]
 8005198:	1ad3      	subs	r3, r2, r3
 800519a:	f241 3288 	movw	r2, #5000	; 0x1388
 800519e:	4293      	cmp	r3, r2
 80051a0:	d901      	bls.n	80051a6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80051a2:	2303      	movs	r3, #3
 80051a4:	e0cb      	b.n	800533e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80051a6:	4b49      	ldr	r3, [pc, #292]	; (80052cc <HAL_RCC_OscConfig+0x470>)
 80051a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051aa:	f003 0302 	and.w	r3, r3, #2
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d0ee      	beq.n	8005190 <HAL_RCC_OscConfig+0x334>
 80051b2:	e014      	b.n	80051de <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80051b4:	f7fd fb4c 	bl	8002850 <HAL_GetTick>
 80051b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80051ba:	e00a      	b.n	80051d2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80051bc:	f7fd fb48 	bl	8002850 <HAL_GetTick>
 80051c0:	4602      	mov	r2, r0
 80051c2:	693b      	ldr	r3, [r7, #16]
 80051c4:	1ad3      	subs	r3, r2, r3
 80051c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80051ca:	4293      	cmp	r3, r2
 80051cc:	d901      	bls.n	80051d2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80051ce:	2303      	movs	r3, #3
 80051d0:	e0b5      	b.n	800533e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80051d2:	4b3e      	ldr	r3, [pc, #248]	; (80052cc <HAL_RCC_OscConfig+0x470>)
 80051d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051d6:	f003 0302 	and.w	r3, r3, #2
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d1ee      	bne.n	80051bc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80051de:	7dfb      	ldrb	r3, [r7, #23]
 80051e0:	2b01      	cmp	r3, #1
 80051e2:	d105      	bne.n	80051f0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80051e4:	4b39      	ldr	r3, [pc, #228]	; (80052cc <HAL_RCC_OscConfig+0x470>)
 80051e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051e8:	4a38      	ldr	r2, [pc, #224]	; (80052cc <HAL_RCC_OscConfig+0x470>)
 80051ea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80051ee:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	699b      	ldr	r3, [r3, #24]
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	f000 80a1 	beq.w	800533c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80051fa:	4b34      	ldr	r3, [pc, #208]	; (80052cc <HAL_RCC_OscConfig+0x470>)
 80051fc:	689b      	ldr	r3, [r3, #8]
 80051fe:	f003 030c 	and.w	r3, r3, #12
 8005202:	2b08      	cmp	r3, #8
 8005204:	d05c      	beq.n	80052c0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	699b      	ldr	r3, [r3, #24]
 800520a:	2b02      	cmp	r3, #2
 800520c:	d141      	bne.n	8005292 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800520e:	4b31      	ldr	r3, [pc, #196]	; (80052d4 <HAL_RCC_OscConfig+0x478>)
 8005210:	2200      	movs	r2, #0
 8005212:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005214:	f7fd fb1c 	bl	8002850 <HAL_GetTick>
 8005218:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800521a:	e008      	b.n	800522e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800521c:	f7fd fb18 	bl	8002850 <HAL_GetTick>
 8005220:	4602      	mov	r2, r0
 8005222:	693b      	ldr	r3, [r7, #16]
 8005224:	1ad3      	subs	r3, r2, r3
 8005226:	2b02      	cmp	r3, #2
 8005228:	d901      	bls.n	800522e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800522a:	2303      	movs	r3, #3
 800522c:	e087      	b.n	800533e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800522e:	4b27      	ldr	r3, [pc, #156]	; (80052cc <HAL_RCC_OscConfig+0x470>)
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005236:	2b00      	cmp	r3, #0
 8005238:	d1f0      	bne.n	800521c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	69da      	ldr	r2, [r3, #28]
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	6a1b      	ldr	r3, [r3, #32]
 8005242:	431a      	orrs	r2, r3
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005248:	019b      	lsls	r3, r3, #6
 800524a:	431a      	orrs	r2, r3
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005250:	085b      	lsrs	r3, r3, #1
 8005252:	3b01      	subs	r3, #1
 8005254:	041b      	lsls	r3, r3, #16
 8005256:	431a      	orrs	r2, r3
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800525c:	061b      	lsls	r3, r3, #24
 800525e:	491b      	ldr	r1, [pc, #108]	; (80052cc <HAL_RCC_OscConfig+0x470>)
 8005260:	4313      	orrs	r3, r2
 8005262:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005264:	4b1b      	ldr	r3, [pc, #108]	; (80052d4 <HAL_RCC_OscConfig+0x478>)
 8005266:	2201      	movs	r2, #1
 8005268:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800526a:	f7fd faf1 	bl	8002850 <HAL_GetTick>
 800526e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005270:	e008      	b.n	8005284 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005272:	f7fd faed 	bl	8002850 <HAL_GetTick>
 8005276:	4602      	mov	r2, r0
 8005278:	693b      	ldr	r3, [r7, #16]
 800527a:	1ad3      	subs	r3, r2, r3
 800527c:	2b02      	cmp	r3, #2
 800527e:	d901      	bls.n	8005284 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005280:	2303      	movs	r3, #3
 8005282:	e05c      	b.n	800533e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005284:	4b11      	ldr	r3, [pc, #68]	; (80052cc <HAL_RCC_OscConfig+0x470>)
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800528c:	2b00      	cmp	r3, #0
 800528e:	d0f0      	beq.n	8005272 <HAL_RCC_OscConfig+0x416>
 8005290:	e054      	b.n	800533c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005292:	4b10      	ldr	r3, [pc, #64]	; (80052d4 <HAL_RCC_OscConfig+0x478>)
 8005294:	2200      	movs	r2, #0
 8005296:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005298:	f7fd fada 	bl	8002850 <HAL_GetTick>
 800529c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800529e:	e008      	b.n	80052b2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80052a0:	f7fd fad6 	bl	8002850 <HAL_GetTick>
 80052a4:	4602      	mov	r2, r0
 80052a6:	693b      	ldr	r3, [r7, #16]
 80052a8:	1ad3      	subs	r3, r2, r3
 80052aa:	2b02      	cmp	r3, #2
 80052ac:	d901      	bls.n	80052b2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80052ae:	2303      	movs	r3, #3
 80052b0:	e045      	b.n	800533e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80052b2:	4b06      	ldr	r3, [pc, #24]	; (80052cc <HAL_RCC_OscConfig+0x470>)
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d1f0      	bne.n	80052a0 <HAL_RCC_OscConfig+0x444>
 80052be:	e03d      	b.n	800533c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	699b      	ldr	r3, [r3, #24]
 80052c4:	2b01      	cmp	r3, #1
 80052c6:	d107      	bne.n	80052d8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80052c8:	2301      	movs	r3, #1
 80052ca:	e038      	b.n	800533e <HAL_RCC_OscConfig+0x4e2>
 80052cc:	40023800 	.word	0x40023800
 80052d0:	40007000 	.word	0x40007000
 80052d4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80052d8:	4b1b      	ldr	r3, [pc, #108]	; (8005348 <HAL_RCC_OscConfig+0x4ec>)
 80052da:	685b      	ldr	r3, [r3, #4]
 80052dc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	699b      	ldr	r3, [r3, #24]
 80052e2:	2b01      	cmp	r3, #1
 80052e4:	d028      	beq.n	8005338 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80052f0:	429a      	cmp	r2, r3
 80052f2:	d121      	bne.n	8005338 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80052fe:	429a      	cmp	r2, r3
 8005300:	d11a      	bne.n	8005338 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005302:	68fa      	ldr	r2, [r7, #12]
 8005304:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005308:	4013      	ands	r3, r2
 800530a:	687a      	ldr	r2, [r7, #4]
 800530c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800530e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005310:	4293      	cmp	r3, r2
 8005312:	d111      	bne.n	8005338 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800531e:	085b      	lsrs	r3, r3, #1
 8005320:	3b01      	subs	r3, #1
 8005322:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005324:	429a      	cmp	r2, r3
 8005326:	d107      	bne.n	8005338 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005332:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005334:	429a      	cmp	r2, r3
 8005336:	d001      	beq.n	800533c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005338:	2301      	movs	r3, #1
 800533a:	e000      	b.n	800533e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800533c:	2300      	movs	r3, #0
}
 800533e:	4618      	mov	r0, r3
 8005340:	3718      	adds	r7, #24
 8005342:	46bd      	mov	sp, r7
 8005344:	bd80      	pop	{r7, pc}
 8005346:	bf00      	nop
 8005348:	40023800 	.word	0x40023800

0800534c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800534c:	b580      	push	{r7, lr}
 800534e:	b084      	sub	sp, #16
 8005350:	af00      	add	r7, sp, #0
 8005352:	6078      	str	r0, [r7, #4]
 8005354:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	2b00      	cmp	r3, #0
 800535a:	d101      	bne.n	8005360 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800535c:	2301      	movs	r3, #1
 800535e:	e0cc      	b.n	80054fa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005360:	4b68      	ldr	r3, [pc, #416]	; (8005504 <HAL_RCC_ClockConfig+0x1b8>)
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f003 0307 	and.w	r3, r3, #7
 8005368:	683a      	ldr	r2, [r7, #0]
 800536a:	429a      	cmp	r2, r3
 800536c:	d90c      	bls.n	8005388 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800536e:	4b65      	ldr	r3, [pc, #404]	; (8005504 <HAL_RCC_ClockConfig+0x1b8>)
 8005370:	683a      	ldr	r2, [r7, #0]
 8005372:	b2d2      	uxtb	r2, r2
 8005374:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005376:	4b63      	ldr	r3, [pc, #396]	; (8005504 <HAL_RCC_ClockConfig+0x1b8>)
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f003 0307 	and.w	r3, r3, #7
 800537e:	683a      	ldr	r2, [r7, #0]
 8005380:	429a      	cmp	r2, r3
 8005382:	d001      	beq.n	8005388 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005384:	2301      	movs	r3, #1
 8005386:	e0b8      	b.n	80054fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f003 0302 	and.w	r3, r3, #2
 8005390:	2b00      	cmp	r3, #0
 8005392:	d020      	beq.n	80053d6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	f003 0304 	and.w	r3, r3, #4
 800539c:	2b00      	cmp	r3, #0
 800539e:	d005      	beq.n	80053ac <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80053a0:	4b59      	ldr	r3, [pc, #356]	; (8005508 <HAL_RCC_ClockConfig+0x1bc>)
 80053a2:	689b      	ldr	r3, [r3, #8]
 80053a4:	4a58      	ldr	r2, [pc, #352]	; (8005508 <HAL_RCC_ClockConfig+0x1bc>)
 80053a6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80053aa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f003 0308 	and.w	r3, r3, #8
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d005      	beq.n	80053c4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80053b8:	4b53      	ldr	r3, [pc, #332]	; (8005508 <HAL_RCC_ClockConfig+0x1bc>)
 80053ba:	689b      	ldr	r3, [r3, #8]
 80053bc:	4a52      	ldr	r2, [pc, #328]	; (8005508 <HAL_RCC_ClockConfig+0x1bc>)
 80053be:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80053c2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80053c4:	4b50      	ldr	r3, [pc, #320]	; (8005508 <HAL_RCC_ClockConfig+0x1bc>)
 80053c6:	689b      	ldr	r3, [r3, #8]
 80053c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	689b      	ldr	r3, [r3, #8]
 80053d0:	494d      	ldr	r1, [pc, #308]	; (8005508 <HAL_RCC_ClockConfig+0x1bc>)
 80053d2:	4313      	orrs	r3, r2
 80053d4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	f003 0301 	and.w	r3, r3, #1
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d044      	beq.n	800546c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	685b      	ldr	r3, [r3, #4]
 80053e6:	2b01      	cmp	r3, #1
 80053e8:	d107      	bne.n	80053fa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80053ea:	4b47      	ldr	r3, [pc, #284]	; (8005508 <HAL_RCC_ClockConfig+0x1bc>)
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d119      	bne.n	800542a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80053f6:	2301      	movs	r3, #1
 80053f8:	e07f      	b.n	80054fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	685b      	ldr	r3, [r3, #4]
 80053fe:	2b02      	cmp	r3, #2
 8005400:	d003      	beq.n	800540a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005406:	2b03      	cmp	r3, #3
 8005408:	d107      	bne.n	800541a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800540a:	4b3f      	ldr	r3, [pc, #252]	; (8005508 <HAL_RCC_ClockConfig+0x1bc>)
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005412:	2b00      	cmp	r3, #0
 8005414:	d109      	bne.n	800542a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005416:	2301      	movs	r3, #1
 8005418:	e06f      	b.n	80054fa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800541a:	4b3b      	ldr	r3, [pc, #236]	; (8005508 <HAL_RCC_ClockConfig+0x1bc>)
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f003 0302 	and.w	r3, r3, #2
 8005422:	2b00      	cmp	r3, #0
 8005424:	d101      	bne.n	800542a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005426:	2301      	movs	r3, #1
 8005428:	e067      	b.n	80054fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800542a:	4b37      	ldr	r3, [pc, #220]	; (8005508 <HAL_RCC_ClockConfig+0x1bc>)
 800542c:	689b      	ldr	r3, [r3, #8]
 800542e:	f023 0203 	bic.w	r2, r3, #3
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	685b      	ldr	r3, [r3, #4]
 8005436:	4934      	ldr	r1, [pc, #208]	; (8005508 <HAL_RCC_ClockConfig+0x1bc>)
 8005438:	4313      	orrs	r3, r2
 800543a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800543c:	f7fd fa08 	bl	8002850 <HAL_GetTick>
 8005440:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005442:	e00a      	b.n	800545a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005444:	f7fd fa04 	bl	8002850 <HAL_GetTick>
 8005448:	4602      	mov	r2, r0
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	1ad3      	subs	r3, r2, r3
 800544e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005452:	4293      	cmp	r3, r2
 8005454:	d901      	bls.n	800545a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005456:	2303      	movs	r3, #3
 8005458:	e04f      	b.n	80054fa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800545a:	4b2b      	ldr	r3, [pc, #172]	; (8005508 <HAL_RCC_ClockConfig+0x1bc>)
 800545c:	689b      	ldr	r3, [r3, #8]
 800545e:	f003 020c 	and.w	r2, r3, #12
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	685b      	ldr	r3, [r3, #4]
 8005466:	009b      	lsls	r3, r3, #2
 8005468:	429a      	cmp	r2, r3
 800546a:	d1eb      	bne.n	8005444 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800546c:	4b25      	ldr	r3, [pc, #148]	; (8005504 <HAL_RCC_ClockConfig+0x1b8>)
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	f003 0307 	and.w	r3, r3, #7
 8005474:	683a      	ldr	r2, [r7, #0]
 8005476:	429a      	cmp	r2, r3
 8005478:	d20c      	bcs.n	8005494 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800547a:	4b22      	ldr	r3, [pc, #136]	; (8005504 <HAL_RCC_ClockConfig+0x1b8>)
 800547c:	683a      	ldr	r2, [r7, #0]
 800547e:	b2d2      	uxtb	r2, r2
 8005480:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005482:	4b20      	ldr	r3, [pc, #128]	; (8005504 <HAL_RCC_ClockConfig+0x1b8>)
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f003 0307 	and.w	r3, r3, #7
 800548a:	683a      	ldr	r2, [r7, #0]
 800548c:	429a      	cmp	r2, r3
 800548e:	d001      	beq.n	8005494 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005490:	2301      	movs	r3, #1
 8005492:	e032      	b.n	80054fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f003 0304 	and.w	r3, r3, #4
 800549c:	2b00      	cmp	r3, #0
 800549e:	d008      	beq.n	80054b2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80054a0:	4b19      	ldr	r3, [pc, #100]	; (8005508 <HAL_RCC_ClockConfig+0x1bc>)
 80054a2:	689b      	ldr	r3, [r3, #8]
 80054a4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	68db      	ldr	r3, [r3, #12]
 80054ac:	4916      	ldr	r1, [pc, #88]	; (8005508 <HAL_RCC_ClockConfig+0x1bc>)
 80054ae:	4313      	orrs	r3, r2
 80054b0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	f003 0308 	and.w	r3, r3, #8
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d009      	beq.n	80054d2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80054be:	4b12      	ldr	r3, [pc, #72]	; (8005508 <HAL_RCC_ClockConfig+0x1bc>)
 80054c0:	689b      	ldr	r3, [r3, #8]
 80054c2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	691b      	ldr	r3, [r3, #16]
 80054ca:	00db      	lsls	r3, r3, #3
 80054cc:	490e      	ldr	r1, [pc, #56]	; (8005508 <HAL_RCC_ClockConfig+0x1bc>)
 80054ce:	4313      	orrs	r3, r2
 80054d0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80054d2:	f000 f889 	bl	80055e8 <HAL_RCC_GetSysClockFreq>
 80054d6:	4602      	mov	r2, r0
 80054d8:	4b0b      	ldr	r3, [pc, #44]	; (8005508 <HAL_RCC_ClockConfig+0x1bc>)
 80054da:	689b      	ldr	r3, [r3, #8]
 80054dc:	091b      	lsrs	r3, r3, #4
 80054de:	f003 030f 	and.w	r3, r3, #15
 80054e2:	490a      	ldr	r1, [pc, #40]	; (800550c <HAL_RCC_ClockConfig+0x1c0>)
 80054e4:	5ccb      	ldrb	r3, [r1, r3]
 80054e6:	fa22 f303 	lsr.w	r3, r2, r3
 80054ea:	4a09      	ldr	r2, [pc, #36]	; (8005510 <HAL_RCC_ClockConfig+0x1c4>)
 80054ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80054ee:	4b09      	ldr	r3, [pc, #36]	; (8005514 <HAL_RCC_ClockConfig+0x1c8>)
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	4618      	mov	r0, r3
 80054f4:	f7fd f968 	bl	80027c8 <HAL_InitTick>

  return HAL_OK;
 80054f8:	2300      	movs	r3, #0
}
 80054fa:	4618      	mov	r0, r3
 80054fc:	3710      	adds	r7, #16
 80054fe:	46bd      	mov	sp, r7
 8005500:	bd80      	pop	{r7, pc}
 8005502:	bf00      	nop
 8005504:	40023c00 	.word	0x40023c00
 8005508:	40023800 	.word	0x40023800
 800550c:	0800a51c 	.word	0x0800a51c
 8005510:	20000018 	.word	0x20000018
 8005514:	20000078 	.word	0x20000078

08005518 <HAL_RCC_MCOConfig>:
  * @note  For STM32F410Rx devices to output I2SCLK clock on MCO2 you should have
  *        at last one of the SPI clocks enabled (SPI1, SPI2 or SPI5).
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8005518:	b580      	push	{r7, lr}
 800551a:	b08c      	sub	sp, #48	; 0x30
 800551c:	af00      	add	r7, sp, #0
 800551e:	60f8      	str	r0, [r7, #12]
 8005520:	60b9      	str	r1, [r7, #8]
 8005522:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if(RCC_MCOx == RCC_MCO1)
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	2b00      	cmp	r3, #0
 8005528:	d129      	bne.n	800557e <HAL_RCC_MCOConfig+0x66>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    __MCO1_CLK_ENABLE();
 800552a:	2300      	movs	r3, #0
 800552c:	61bb      	str	r3, [r7, #24]
 800552e:	4b2b      	ldr	r3, [pc, #172]	; (80055dc <HAL_RCC_MCOConfig+0xc4>)
 8005530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005532:	4a2a      	ldr	r2, [pc, #168]	; (80055dc <HAL_RCC_MCOConfig+0xc4>)
 8005534:	f043 0301 	orr.w	r3, r3, #1
 8005538:	6313      	str	r3, [r2, #48]	; 0x30
 800553a:	4b28      	ldr	r3, [pc, #160]	; (80055dc <HAL_RCC_MCOConfig+0xc4>)
 800553c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800553e:	f003 0301 	and.w	r3, r3, #1
 8005542:	61bb      	str	r3, [r7, #24]
 8005544:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 8005546:	f44f 7380 	mov.w	r3, #256	; 0x100
 800554a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800554c:	2302      	movs	r3, #2
 800554e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005550:	2303      	movs	r3, #3
 8005552:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005554:	2300      	movs	r3, #0
 8005556:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8005558:	2300      	movs	r3, #0
 800555a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 800555c:	f107 031c 	add.w	r3, r7, #28
 8005560:	4619      	mov	r1, r3
 8005562:	481f      	ldr	r0, [pc, #124]	; (80055e0 <HAL_RCC_MCOConfig+0xc8>)
 8005564:	f7fd fdf6 	bl	8003154 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[2:0] bits then Select MCO1 clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 8005568:	4b1c      	ldr	r3, [pc, #112]	; (80055dc <HAL_RCC_MCOConfig+0xc4>)
 800556a:	689b      	ldr	r3, [r3, #8]
 800556c:	f023 62ec 	bic.w	r2, r3, #123731968	; 0x7600000
 8005570:	68b9      	ldr	r1, [r7, #8]
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	430b      	orrs	r3, r1
 8005576:	4919      	ldr	r1, [pc, #100]	; (80055dc <HAL_RCC_MCOConfig+0xc4>)
 8005578:	4313      	orrs	r3, r2
 800557a:	608b      	str	r3, [r1, #8]
#if defined(RCC_CFGR_MCO2EN)
    __HAL_RCC_MCO2_ENABLE();
#endif /* RCC_CFGR_MCO2EN */
  }
#endif /* RCC_CFGR_MCO2 */
}
 800557c:	e029      	b.n	80055d2 <HAL_RCC_MCOConfig+0xba>
    __MCO2_CLK_ENABLE();
 800557e:	2300      	movs	r3, #0
 8005580:	617b      	str	r3, [r7, #20]
 8005582:	4b16      	ldr	r3, [pc, #88]	; (80055dc <HAL_RCC_MCOConfig+0xc4>)
 8005584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005586:	4a15      	ldr	r2, [pc, #84]	; (80055dc <HAL_RCC_MCOConfig+0xc4>)
 8005588:	f043 0304 	orr.w	r3, r3, #4
 800558c:	6313      	str	r3, [r2, #48]	; 0x30
 800558e:	4b13      	ldr	r3, [pc, #76]	; (80055dc <HAL_RCC_MCOConfig+0xc4>)
 8005590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005592:	f003 0304 	and.w	r3, r3, #4
 8005596:	617b      	str	r3, [r7, #20]
 8005598:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 800559a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800559e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80055a0:	2302      	movs	r3, #2
 80055a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80055a4:	2303      	movs	r3, #3
 80055a6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80055a8:	2300      	movs	r3, #0
 80055aa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80055ac:	2300      	movs	r3, #0
 80055ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 80055b0:	f107 031c 	add.w	r3, r7, #28
 80055b4:	4619      	mov	r1, r3
 80055b6:	480b      	ldr	r0, [pc, #44]	; (80055e4 <HAL_RCC_MCOConfig+0xcc>)
 80055b8:	f7fd fdcc 	bl	8003154 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3U)));
 80055bc:	4b07      	ldr	r3, [pc, #28]	; (80055dc <HAL_RCC_MCOConfig+0xc4>)
 80055be:	689b      	ldr	r3, [r3, #8]
 80055c0:	f023 4278 	bic.w	r2, r3, #4160749568	; 0xf8000000
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	00d9      	lsls	r1, r3, #3
 80055c8:	68bb      	ldr	r3, [r7, #8]
 80055ca:	430b      	orrs	r3, r1
 80055cc:	4903      	ldr	r1, [pc, #12]	; (80055dc <HAL_RCC_MCOConfig+0xc4>)
 80055ce:	4313      	orrs	r3, r2
 80055d0:	608b      	str	r3, [r1, #8]
}
 80055d2:	bf00      	nop
 80055d4:	3730      	adds	r7, #48	; 0x30
 80055d6:	46bd      	mov	sp, r7
 80055d8:	bd80      	pop	{r7, pc}
 80055da:	bf00      	nop
 80055dc:	40023800 	.word	0x40023800
 80055e0:	40020000 	.word	0x40020000
 80055e4:	40020800 	.word	0x40020800

080055e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80055e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80055ec:	b090      	sub	sp, #64	; 0x40
 80055ee:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80055f0:	2300      	movs	r3, #0
 80055f2:	637b      	str	r3, [r7, #52]	; 0x34
 80055f4:	2300      	movs	r3, #0
 80055f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80055f8:	2300      	movs	r3, #0
 80055fa:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80055fc:	2300      	movs	r3, #0
 80055fe:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005600:	4b59      	ldr	r3, [pc, #356]	; (8005768 <HAL_RCC_GetSysClockFreq+0x180>)
 8005602:	689b      	ldr	r3, [r3, #8]
 8005604:	f003 030c 	and.w	r3, r3, #12
 8005608:	2b08      	cmp	r3, #8
 800560a:	d00d      	beq.n	8005628 <HAL_RCC_GetSysClockFreq+0x40>
 800560c:	2b08      	cmp	r3, #8
 800560e:	f200 80a1 	bhi.w	8005754 <HAL_RCC_GetSysClockFreq+0x16c>
 8005612:	2b00      	cmp	r3, #0
 8005614:	d002      	beq.n	800561c <HAL_RCC_GetSysClockFreq+0x34>
 8005616:	2b04      	cmp	r3, #4
 8005618:	d003      	beq.n	8005622 <HAL_RCC_GetSysClockFreq+0x3a>
 800561a:	e09b      	b.n	8005754 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800561c:	4b53      	ldr	r3, [pc, #332]	; (800576c <HAL_RCC_GetSysClockFreq+0x184>)
 800561e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8005620:	e09b      	b.n	800575a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005622:	4b53      	ldr	r3, [pc, #332]	; (8005770 <HAL_RCC_GetSysClockFreq+0x188>)
 8005624:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005626:	e098      	b.n	800575a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005628:	4b4f      	ldr	r3, [pc, #316]	; (8005768 <HAL_RCC_GetSysClockFreq+0x180>)
 800562a:	685b      	ldr	r3, [r3, #4]
 800562c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005630:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005632:	4b4d      	ldr	r3, [pc, #308]	; (8005768 <HAL_RCC_GetSysClockFreq+0x180>)
 8005634:	685b      	ldr	r3, [r3, #4]
 8005636:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800563a:	2b00      	cmp	r3, #0
 800563c:	d028      	beq.n	8005690 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800563e:	4b4a      	ldr	r3, [pc, #296]	; (8005768 <HAL_RCC_GetSysClockFreq+0x180>)
 8005640:	685b      	ldr	r3, [r3, #4]
 8005642:	099b      	lsrs	r3, r3, #6
 8005644:	2200      	movs	r2, #0
 8005646:	623b      	str	r3, [r7, #32]
 8005648:	627a      	str	r2, [r7, #36]	; 0x24
 800564a:	6a3b      	ldr	r3, [r7, #32]
 800564c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8005650:	2100      	movs	r1, #0
 8005652:	4b47      	ldr	r3, [pc, #284]	; (8005770 <HAL_RCC_GetSysClockFreq+0x188>)
 8005654:	fb03 f201 	mul.w	r2, r3, r1
 8005658:	2300      	movs	r3, #0
 800565a:	fb00 f303 	mul.w	r3, r0, r3
 800565e:	4413      	add	r3, r2
 8005660:	4a43      	ldr	r2, [pc, #268]	; (8005770 <HAL_RCC_GetSysClockFreq+0x188>)
 8005662:	fba0 1202 	umull	r1, r2, r0, r2
 8005666:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005668:	460a      	mov	r2, r1
 800566a:	62ba      	str	r2, [r7, #40]	; 0x28
 800566c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800566e:	4413      	add	r3, r2
 8005670:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005672:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005674:	2200      	movs	r2, #0
 8005676:	61bb      	str	r3, [r7, #24]
 8005678:	61fa      	str	r2, [r7, #28]
 800567a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800567e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8005682:	f7fa fda1 	bl	80001c8 <__aeabi_uldivmod>
 8005686:	4602      	mov	r2, r0
 8005688:	460b      	mov	r3, r1
 800568a:	4613      	mov	r3, r2
 800568c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800568e:	e053      	b.n	8005738 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005690:	4b35      	ldr	r3, [pc, #212]	; (8005768 <HAL_RCC_GetSysClockFreq+0x180>)
 8005692:	685b      	ldr	r3, [r3, #4]
 8005694:	099b      	lsrs	r3, r3, #6
 8005696:	2200      	movs	r2, #0
 8005698:	613b      	str	r3, [r7, #16]
 800569a:	617a      	str	r2, [r7, #20]
 800569c:	693b      	ldr	r3, [r7, #16]
 800569e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80056a2:	f04f 0b00 	mov.w	fp, #0
 80056a6:	4652      	mov	r2, sl
 80056a8:	465b      	mov	r3, fp
 80056aa:	f04f 0000 	mov.w	r0, #0
 80056ae:	f04f 0100 	mov.w	r1, #0
 80056b2:	0159      	lsls	r1, r3, #5
 80056b4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80056b8:	0150      	lsls	r0, r2, #5
 80056ba:	4602      	mov	r2, r0
 80056bc:	460b      	mov	r3, r1
 80056be:	ebb2 080a 	subs.w	r8, r2, sl
 80056c2:	eb63 090b 	sbc.w	r9, r3, fp
 80056c6:	f04f 0200 	mov.w	r2, #0
 80056ca:	f04f 0300 	mov.w	r3, #0
 80056ce:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80056d2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80056d6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80056da:	ebb2 0408 	subs.w	r4, r2, r8
 80056de:	eb63 0509 	sbc.w	r5, r3, r9
 80056e2:	f04f 0200 	mov.w	r2, #0
 80056e6:	f04f 0300 	mov.w	r3, #0
 80056ea:	00eb      	lsls	r3, r5, #3
 80056ec:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80056f0:	00e2      	lsls	r2, r4, #3
 80056f2:	4614      	mov	r4, r2
 80056f4:	461d      	mov	r5, r3
 80056f6:	eb14 030a 	adds.w	r3, r4, sl
 80056fa:	603b      	str	r3, [r7, #0]
 80056fc:	eb45 030b 	adc.w	r3, r5, fp
 8005700:	607b      	str	r3, [r7, #4]
 8005702:	f04f 0200 	mov.w	r2, #0
 8005706:	f04f 0300 	mov.w	r3, #0
 800570a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800570e:	4629      	mov	r1, r5
 8005710:	028b      	lsls	r3, r1, #10
 8005712:	4621      	mov	r1, r4
 8005714:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005718:	4621      	mov	r1, r4
 800571a:	028a      	lsls	r2, r1, #10
 800571c:	4610      	mov	r0, r2
 800571e:	4619      	mov	r1, r3
 8005720:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005722:	2200      	movs	r2, #0
 8005724:	60bb      	str	r3, [r7, #8]
 8005726:	60fa      	str	r2, [r7, #12]
 8005728:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800572c:	f7fa fd4c 	bl	80001c8 <__aeabi_uldivmod>
 8005730:	4602      	mov	r2, r0
 8005732:	460b      	mov	r3, r1
 8005734:	4613      	mov	r3, r2
 8005736:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005738:	4b0b      	ldr	r3, [pc, #44]	; (8005768 <HAL_RCC_GetSysClockFreq+0x180>)
 800573a:	685b      	ldr	r3, [r3, #4]
 800573c:	0c1b      	lsrs	r3, r3, #16
 800573e:	f003 0303 	and.w	r3, r3, #3
 8005742:	3301      	adds	r3, #1
 8005744:	005b      	lsls	r3, r3, #1
 8005746:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8005748:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800574a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800574c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005750:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005752:	e002      	b.n	800575a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005754:	4b05      	ldr	r3, [pc, #20]	; (800576c <HAL_RCC_GetSysClockFreq+0x184>)
 8005756:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005758:	bf00      	nop
    }
  }
  return sysclockfreq;
 800575a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800575c:	4618      	mov	r0, r3
 800575e:	3740      	adds	r7, #64	; 0x40
 8005760:	46bd      	mov	sp, r7
 8005762:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005766:	bf00      	nop
 8005768:	40023800 	.word	0x40023800
 800576c:	00f42400 	.word	0x00f42400
 8005770:	017d7840 	.word	0x017d7840

08005774 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005774:	b480      	push	{r7}
 8005776:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005778:	4b03      	ldr	r3, [pc, #12]	; (8005788 <HAL_RCC_GetHCLKFreq+0x14>)
 800577a:	681b      	ldr	r3, [r3, #0]
}
 800577c:	4618      	mov	r0, r3
 800577e:	46bd      	mov	sp, r7
 8005780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005784:	4770      	bx	lr
 8005786:	bf00      	nop
 8005788:	20000018 	.word	0x20000018

0800578c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800578c:	b580      	push	{r7, lr}
 800578e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005790:	f7ff fff0 	bl	8005774 <HAL_RCC_GetHCLKFreq>
 8005794:	4602      	mov	r2, r0
 8005796:	4b05      	ldr	r3, [pc, #20]	; (80057ac <HAL_RCC_GetPCLK1Freq+0x20>)
 8005798:	689b      	ldr	r3, [r3, #8]
 800579a:	0a9b      	lsrs	r3, r3, #10
 800579c:	f003 0307 	and.w	r3, r3, #7
 80057a0:	4903      	ldr	r1, [pc, #12]	; (80057b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80057a2:	5ccb      	ldrb	r3, [r1, r3]
 80057a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80057a8:	4618      	mov	r0, r3
 80057aa:	bd80      	pop	{r7, pc}
 80057ac:	40023800 	.word	0x40023800
 80057b0:	0800a52c 	.word	0x0800a52c

080057b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80057b4:	b580      	push	{r7, lr}
 80057b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80057b8:	f7ff ffdc 	bl	8005774 <HAL_RCC_GetHCLKFreq>
 80057bc:	4602      	mov	r2, r0
 80057be:	4b05      	ldr	r3, [pc, #20]	; (80057d4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80057c0:	689b      	ldr	r3, [r3, #8]
 80057c2:	0b5b      	lsrs	r3, r3, #13
 80057c4:	f003 0307 	and.w	r3, r3, #7
 80057c8:	4903      	ldr	r1, [pc, #12]	; (80057d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80057ca:	5ccb      	ldrb	r3, [r1, r3]
 80057cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80057d0:	4618      	mov	r0, r3
 80057d2:	bd80      	pop	{r7, pc}
 80057d4:	40023800 	.word	0x40023800
 80057d8:	0800a52c 	.word	0x0800a52c

080057dc <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 80057dc:	b580      	push	{r7, lr}
 80057de:	b084      	sub	sp, #16
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	60f8      	str	r0, [r7, #12]
 80057e4:	60b9      	str	r1, [r7, #8]
 80057e6:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d101      	bne.n	80057f2 <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 80057ee:	2301      	movs	r3, #1
 80057f0:	e038      	b.n	8005864 <HAL_SRAM_Init+0x88>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 80057f8:	b2db      	uxtb	r3, r3
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d106      	bne.n	800580c <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	2200      	movs	r2, #0
 8005802:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8005806:	68f8      	ldr	r0, [r7, #12]
 8005808:	f7fb ff72 	bl	80016f0 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	681a      	ldr	r2, [r3, #0]
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	3308      	adds	r3, #8
 8005814:	4619      	mov	r1, r3
 8005816:	4610      	mov	r0, r2
 8005818:	f000 fd80 	bl	800631c <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	6818      	ldr	r0, [r3, #0]
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	689b      	ldr	r3, [r3, #8]
 8005824:	461a      	mov	r2, r3
 8005826:	68b9      	ldr	r1, [r7, #8]
 8005828:	f000 fde2 	bl	80063f0 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	6858      	ldr	r0, [r3, #4]
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	689a      	ldr	r2, [r3, #8]
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005838:	6879      	ldr	r1, [r7, #4]
 800583a:	f000 fe0f 	bl	800645c <FSMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	68fa      	ldr	r2, [r7, #12]
 8005844:	6892      	ldr	r2, [r2, #8]
 8005846:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	68fa      	ldr	r2, [r7, #12]
 8005850:	6892      	ldr	r2, [r2, #8]
 8005852:	f041 0101 	orr.w	r1, r1, #1
 8005856:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	2201      	movs	r2, #1
 800585e:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

  return HAL_OK;
 8005862:	2300      	movs	r3, #0
}
 8005864:	4618      	mov	r0, r3
 8005866:	3710      	adds	r7, #16
 8005868:	46bd      	mov	sp, r7
 800586a:	bd80      	pop	{r7, pc}

0800586c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800586c:	b580      	push	{r7, lr}
 800586e:	b086      	sub	sp, #24
 8005870:	af00      	add	r7, sp, #0
 8005872:	6078      	str	r0, [r7, #4]
 8005874:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	2b00      	cmp	r3, #0
 800587a:	d101      	bne.n	8005880 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800587c:	2301      	movs	r3, #1
 800587e:	e097      	b.n	80059b0 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005886:	b2db      	uxtb	r3, r3
 8005888:	2b00      	cmp	r3, #0
 800588a:	d106      	bne.n	800589a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	2200      	movs	r2, #0
 8005890:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005894:	6878      	ldr	r0, [r7, #4]
 8005896:	f7fb fe0f 	bl	80014b8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	2202      	movs	r2, #2
 800589e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	689b      	ldr	r3, [r3, #8]
 80058a8:	687a      	ldr	r2, [r7, #4]
 80058aa:	6812      	ldr	r2, [r2, #0]
 80058ac:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80058b0:	f023 0307 	bic.w	r3, r3, #7
 80058b4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681a      	ldr	r2, [r3, #0]
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	3304      	adds	r3, #4
 80058be:	4619      	mov	r1, r3
 80058c0:	4610      	mov	r0, r2
 80058c2:	f000 f927 	bl	8005b14 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	689b      	ldr	r3, [r3, #8]
 80058cc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	699b      	ldr	r3, [r3, #24]
 80058d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	6a1b      	ldr	r3, [r3, #32]
 80058dc:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80058de:	683b      	ldr	r3, [r7, #0]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	697a      	ldr	r2, [r7, #20]
 80058e4:	4313      	orrs	r3, r2
 80058e6:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80058e8:	693b      	ldr	r3, [r7, #16]
 80058ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80058ee:	f023 0303 	bic.w	r3, r3, #3
 80058f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80058f4:	683b      	ldr	r3, [r7, #0]
 80058f6:	689a      	ldr	r2, [r3, #8]
 80058f8:	683b      	ldr	r3, [r7, #0]
 80058fa:	699b      	ldr	r3, [r3, #24]
 80058fc:	021b      	lsls	r3, r3, #8
 80058fe:	4313      	orrs	r3, r2
 8005900:	693a      	ldr	r2, [r7, #16]
 8005902:	4313      	orrs	r3, r2
 8005904:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005906:	693b      	ldr	r3, [r7, #16]
 8005908:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800590c:	f023 030c 	bic.w	r3, r3, #12
 8005910:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005912:	693b      	ldr	r3, [r7, #16]
 8005914:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005918:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800591c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800591e:	683b      	ldr	r3, [r7, #0]
 8005920:	68da      	ldr	r2, [r3, #12]
 8005922:	683b      	ldr	r3, [r7, #0]
 8005924:	69db      	ldr	r3, [r3, #28]
 8005926:	021b      	lsls	r3, r3, #8
 8005928:	4313      	orrs	r3, r2
 800592a:	693a      	ldr	r2, [r7, #16]
 800592c:	4313      	orrs	r3, r2
 800592e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005930:	683b      	ldr	r3, [r7, #0]
 8005932:	691b      	ldr	r3, [r3, #16]
 8005934:	011a      	lsls	r2, r3, #4
 8005936:	683b      	ldr	r3, [r7, #0]
 8005938:	6a1b      	ldr	r3, [r3, #32]
 800593a:	031b      	lsls	r3, r3, #12
 800593c:	4313      	orrs	r3, r2
 800593e:	693a      	ldr	r2, [r7, #16]
 8005940:	4313      	orrs	r3, r2
 8005942:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800594a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8005952:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005954:	683b      	ldr	r3, [r7, #0]
 8005956:	685a      	ldr	r2, [r3, #4]
 8005958:	683b      	ldr	r3, [r7, #0]
 800595a:	695b      	ldr	r3, [r3, #20]
 800595c:	011b      	lsls	r3, r3, #4
 800595e:	4313      	orrs	r3, r2
 8005960:	68fa      	ldr	r2, [r7, #12]
 8005962:	4313      	orrs	r3, r2
 8005964:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	697a      	ldr	r2, [r7, #20]
 800596c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	693a      	ldr	r2, [r7, #16]
 8005974:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	68fa      	ldr	r2, [r7, #12]
 800597c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	2201      	movs	r2, #1
 8005982:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	2201      	movs	r2, #1
 800598a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	2201      	movs	r2, #1
 8005992:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	2201      	movs	r2, #1
 800599a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	2201      	movs	r2, #1
 80059a2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	2201      	movs	r2, #1
 80059aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80059ae:	2300      	movs	r3, #0
}
 80059b0:	4618      	mov	r0, r3
 80059b2:	3718      	adds	r7, #24
 80059b4:	46bd      	mov	sp, r7
 80059b6:	bd80      	pop	{r7, pc}

080059b8 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80059b8:	b580      	push	{r7, lr}
 80059ba:	b084      	sub	sp, #16
 80059bc:	af00      	add	r7, sp, #0
 80059be:	6078      	str	r0, [r7, #4]
 80059c0:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80059c8:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80059d0:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80059d8:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80059e0:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80059e2:	683b      	ldr	r3, [r7, #0]
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d110      	bne.n	8005a0a <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80059e8:	7bfb      	ldrb	r3, [r7, #15]
 80059ea:	2b01      	cmp	r3, #1
 80059ec:	d102      	bne.n	80059f4 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80059ee:	7b7b      	ldrb	r3, [r7, #13]
 80059f0:	2b01      	cmp	r3, #1
 80059f2:	d001      	beq.n	80059f8 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 80059f4:	2301      	movs	r3, #1
 80059f6:	e089      	b.n	8005b0c <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	2202      	movs	r2, #2
 80059fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	2202      	movs	r2, #2
 8005a04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005a08:	e031      	b.n	8005a6e <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8005a0a:	683b      	ldr	r3, [r7, #0]
 8005a0c:	2b04      	cmp	r3, #4
 8005a0e:	d110      	bne.n	8005a32 <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005a10:	7bbb      	ldrb	r3, [r7, #14]
 8005a12:	2b01      	cmp	r3, #1
 8005a14:	d102      	bne.n	8005a1c <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005a16:	7b3b      	ldrb	r3, [r7, #12]
 8005a18:	2b01      	cmp	r3, #1
 8005a1a:	d001      	beq.n	8005a20 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 8005a1c:	2301      	movs	r3, #1
 8005a1e:	e075      	b.n	8005b0c <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	2202      	movs	r2, #2
 8005a24:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	2202      	movs	r2, #2
 8005a2c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005a30:	e01d      	b.n	8005a6e <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005a32:	7bfb      	ldrb	r3, [r7, #15]
 8005a34:	2b01      	cmp	r3, #1
 8005a36:	d108      	bne.n	8005a4a <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005a38:	7bbb      	ldrb	r3, [r7, #14]
 8005a3a:	2b01      	cmp	r3, #1
 8005a3c:	d105      	bne.n	8005a4a <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005a3e:	7b7b      	ldrb	r3, [r7, #13]
 8005a40:	2b01      	cmp	r3, #1
 8005a42:	d102      	bne.n	8005a4a <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005a44:	7b3b      	ldrb	r3, [r7, #12]
 8005a46:	2b01      	cmp	r3, #1
 8005a48:	d001      	beq.n	8005a4e <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 8005a4a:	2301      	movs	r3, #1
 8005a4c:	e05e      	b.n	8005b0c <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	2202      	movs	r2, #2
 8005a52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	2202      	movs	r2, #2
 8005a5a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	2202      	movs	r2, #2
 8005a62:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	2202      	movs	r2, #2
 8005a6a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 8005a6e:	683b      	ldr	r3, [r7, #0]
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d003      	beq.n	8005a7c <HAL_TIM_Encoder_Start_IT+0xc4>
 8005a74:	683b      	ldr	r3, [r7, #0]
 8005a76:	2b04      	cmp	r3, #4
 8005a78:	d010      	beq.n	8005a9c <HAL_TIM_Encoder_Start_IT+0xe4>
 8005a7a:	e01f      	b.n	8005abc <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	2201      	movs	r2, #1
 8005a82:	2100      	movs	r1, #0
 8005a84:	4618      	mov	r0, r3
 8005a86:	f000 f8e5 	bl	8005c54 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	68da      	ldr	r2, [r3, #12]
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	f042 0202 	orr.w	r2, r2, #2
 8005a98:	60da      	str	r2, [r3, #12]
      break;
 8005a9a:	e02e      	b.n	8005afa <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	2201      	movs	r2, #1
 8005aa2:	2104      	movs	r1, #4
 8005aa4:	4618      	mov	r0, r3
 8005aa6:	f000 f8d5 	bl	8005c54 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	68da      	ldr	r2, [r3, #12]
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	f042 0204 	orr.w	r2, r2, #4
 8005ab8:	60da      	str	r2, [r3, #12]
      break;
 8005aba:	e01e      	b.n	8005afa <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	2201      	movs	r2, #1
 8005ac2:	2100      	movs	r1, #0
 8005ac4:	4618      	mov	r0, r3
 8005ac6:	f000 f8c5 	bl	8005c54 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	2201      	movs	r2, #1
 8005ad0:	2104      	movs	r1, #4
 8005ad2:	4618      	mov	r0, r3
 8005ad4:	f000 f8be 	bl	8005c54 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	68da      	ldr	r2, [r3, #12]
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	f042 0202 	orr.w	r2, r2, #2
 8005ae6:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	68da      	ldr	r2, [r3, #12]
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	f042 0204 	orr.w	r2, r2, #4
 8005af6:	60da      	str	r2, [r3, #12]
      break;
 8005af8:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	681a      	ldr	r2, [r3, #0]
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	f042 0201 	orr.w	r2, r2, #1
 8005b08:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005b0a:	2300      	movs	r3, #0
}
 8005b0c:	4618      	mov	r0, r3
 8005b0e:	3710      	adds	r7, #16
 8005b10:	46bd      	mov	sp, r7
 8005b12:	bd80      	pop	{r7, pc}

08005b14 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005b14:	b480      	push	{r7}
 8005b16:	b085      	sub	sp, #20
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	6078      	str	r0, [r7, #4]
 8005b1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	4a40      	ldr	r2, [pc, #256]	; (8005c28 <TIM_Base_SetConfig+0x114>)
 8005b28:	4293      	cmp	r3, r2
 8005b2a:	d013      	beq.n	8005b54 <TIM_Base_SetConfig+0x40>
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b32:	d00f      	beq.n	8005b54 <TIM_Base_SetConfig+0x40>
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	4a3d      	ldr	r2, [pc, #244]	; (8005c2c <TIM_Base_SetConfig+0x118>)
 8005b38:	4293      	cmp	r3, r2
 8005b3a:	d00b      	beq.n	8005b54 <TIM_Base_SetConfig+0x40>
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	4a3c      	ldr	r2, [pc, #240]	; (8005c30 <TIM_Base_SetConfig+0x11c>)
 8005b40:	4293      	cmp	r3, r2
 8005b42:	d007      	beq.n	8005b54 <TIM_Base_SetConfig+0x40>
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	4a3b      	ldr	r2, [pc, #236]	; (8005c34 <TIM_Base_SetConfig+0x120>)
 8005b48:	4293      	cmp	r3, r2
 8005b4a:	d003      	beq.n	8005b54 <TIM_Base_SetConfig+0x40>
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	4a3a      	ldr	r2, [pc, #232]	; (8005c38 <TIM_Base_SetConfig+0x124>)
 8005b50:	4293      	cmp	r3, r2
 8005b52:	d108      	bne.n	8005b66 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b5a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005b5c:	683b      	ldr	r3, [r7, #0]
 8005b5e:	685b      	ldr	r3, [r3, #4]
 8005b60:	68fa      	ldr	r2, [r7, #12]
 8005b62:	4313      	orrs	r3, r2
 8005b64:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	4a2f      	ldr	r2, [pc, #188]	; (8005c28 <TIM_Base_SetConfig+0x114>)
 8005b6a:	4293      	cmp	r3, r2
 8005b6c:	d02b      	beq.n	8005bc6 <TIM_Base_SetConfig+0xb2>
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b74:	d027      	beq.n	8005bc6 <TIM_Base_SetConfig+0xb2>
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	4a2c      	ldr	r2, [pc, #176]	; (8005c2c <TIM_Base_SetConfig+0x118>)
 8005b7a:	4293      	cmp	r3, r2
 8005b7c:	d023      	beq.n	8005bc6 <TIM_Base_SetConfig+0xb2>
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	4a2b      	ldr	r2, [pc, #172]	; (8005c30 <TIM_Base_SetConfig+0x11c>)
 8005b82:	4293      	cmp	r3, r2
 8005b84:	d01f      	beq.n	8005bc6 <TIM_Base_SetConfig+0xb2>
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	4a2a      	ldr	r2, [pc, #168]	; (8005c34 <TIM_Base_SetConfig+0x120>)
 8005b8a:	4293      	cmp	r3, r2
 8005b8c:	d01b      	beq.n	8005bc6 <TIM_Base_SetConfig+0xb2>
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	4a29      	ldr	r2, [pc, #164]	; (8005c38 <TIM_Base_SetConfig+0x124>)
 8005b92:	4293      	cmp	r3, r2
 8005b94:	d017      	beq.n	8005bc6 <TIM_Base_SetConfig+0xb2>
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	4a28      	ldr	r2, [pc, #160]	; (8005c3c <TIM_Base_SetConfig+0x128>)
 8005b9a:	4293      	cmp	r3, r2
 8005b9c:	d013      	beq.n	8005bc6 <TIM_Base_SetConfig+0xb2>
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	4a27      	ldr	r2, [pc, #156]	; (8005c40 <TIM_Base_SetConfig+0x12c>)
 8005ba2:	4293      	cmp	r3, r2
 8005ba4:	d00f      	beq.n	8005bc6 <TIM_Base_SetConfig+0xb2>
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	4a26      	ldr	r2, [pc, #152]	; (8005c44 <TIM_Base_SetConfig+0x130>)
 8005baa:	4293      	cmp	r3, r2
 8005bac:	d00b      	beq.n	8005bc6 <TIM_Base_SetConfig+0xb2>
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	4a25      	ldr	r2, [pc, #148]	; (8005c48 <TIM_Base_SetConfig+0x134>)
 8005bb2:	4293      	cmp	r3, r2
 8005bb4:	d007      	beq.n	8005bc6 <TIM_Base_SetConfig+0xb2>
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	4a24      	ldr	r2, [pc, #144]	; (8005c4c <TIM_Base_SetConfig+0x138>)
 8005bba:	4293      	cmp	r3, r2
 8005bbc:	d003      	beq.n	8005bc6 <TIM_Base_SetConfig+0xb2>
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	4a23      	ldr	r2, [pc, #140]	; (8005c50 <TIM_Base_SetConfig+0x13c>)
 8005bc2:	4293      	cmp	r3, r2
 8005bc4:	d108      	bne.n	8005bd8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005bcc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005bce:	683b      	ldr	r3, [r7, #0]
 8005bd0:	68db      	ldr	r3, [r3, #12]
 8005bd2:	68fa      	ldr	r2, [r7, #12]
 8005bd4:	4313      	orrs	r3, r2
 8005bd6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005bde:	683b      	ldr	r3, [r7, #0]
 8005be0:	695b      	ldr	r3, [r3, #20]
 8005be2:	4313      	orrs	r3, r2
 8005be4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	68fa      	ldr	r2, [r7, #12]
 8005bea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005bec:	683b      	ldr	r3, [r7, #0]
 8005bee:	689a      	ldr	r2, [r3, #8]
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005bf4:	683b      	ldr	r3, [r7, #0]
 8005bf6:	681a      	ldr	r2, [r3, #0]
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	4a0a      	ldr	r2, [pc, #40]	; (8005c28 <TIM_Base_SetConfig+0x114>)
 8005c00:	4293      	cmp	r3, r2
 8005c02:	d003      	beq.n	8005c0c <TIM_Base_SetConfig+0xf8>
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	4a0c      	ldr	r2, [pc, #48]	; (8005c38 <TIM_Base_SetConfig+0x124>)
 8005c08:	4293      	cmp	r3, r2
 8005c0a:	d103      	bne.n	8005c14 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005c0c:	683b      	ldr	r3, [r7, #0]
 8005c0e:	691a      	ldr	r2, [r3, #16]
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	2201      	movs	r2, #1
 8005c18:	615a      	str	r2, [r3, #20]
}
 8005c1a:	bf00      	nop
 8005c1c:	3714      	adds	r7, #20
 8005c1e:	46bd      	mov	sp, r7
 8005c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c24:	4770      	bx	lr
 8005c26:	bf00      	nop
 8005c28:	40010000 	.word	0x40010000
 8005c2c:	40000400 	.word	0x40000400
 8005c30:	40000800 	.word	0x40000800
 8005c34:	40000c00 	.word	0x40000c00
 8005c38:	40010400 	.word	0x40010400
 8005c3c:	40014000 	.word	0x40014000
 8005c40:	40014400 	.word	0x40014400
 8005c44:	40014800 	.word	0x40014800
 8005c48:	40001800 	.word	0x40001800
 8005c4c:	40001c00 	.word	0x40001c00
 8005c50:	40002000 	.word	0x40002000

08005c54 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005c54:	b480      	push	{r7}
 8005c56:	b087      	sub	sp, #28
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	60f8      	str	r0, [r7, #12]
 8005c5c:	60b9      	str	r1, [r7, #8]
 8005c5e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005c60:	68bb      	ldr	r3, [r7, #8]
 8005c62:	f003 031f 	and.w	r3, r3, #31
 8005c66:	2201      	movs	r2, #1
 8005c68:	fa02 f303 	lsl.w	r3, r2, r3
 8005c6c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	6a1a      	ldr	r2, [r3, #32]
 8005c72:	697b      	ldr	r3, [r7, #20]
 8005c74:	43db      	mvns	r3, r3
 8005c76:	401a      	ands	r2, r3
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	6a1a      	ldr	r2, [r3, #32]
 8005c80:	68bb      	ldr	r3, [r7, #8]
 8005c82:	f003 031f 	and.w	r3, r3, #31
 8005c86:	6879      	ldr	r1, [r7, #4]
 8005c88:	fa01 f303 	lsl.w	r3, r1, r3
 8005c8c:	431a      	orrs	r2, r3
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	621a      	str	r2, [r3, #32]
}
 8005c92:	bf00      	nop
 8005c94:	371c      	adds	r7, #28
 8005c96:	46bd      	mov	sp, r7
 8005c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9c:	4770      	bx	lr
	...

08005ca0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005ca0:	b480      	push	{r7}
 8005ca2:	b085      	sub	sp, #20
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	6078      	str	r0, [r7, #4]
 8005ca8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005cb0:	2b01      	cmp	r3, #1
 8005cb2:	d101      	bne.n	8005cb8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005cb4:	2302      	movs	r3, #2
 8005cb6:	e05a      	b.n	8005d6e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	2201      	movs	r2, #1
 8005cbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	2202      	movs	r2, #2
 8005cc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	685b      	ldr	r3, [r3, #4]
 8005cce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	689b      	ldr	r3, [r3, #8]
 8005cd6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cde:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005ce0:	683b      	ldr	r3, [r7, #0]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	68fa      	ldr	r2, [r7, #12]
 8005ce6:	4313      	orrs	r3, r2
 8005ce8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	68fa      	ldr	r2, [r7, #12]
 8005cf0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	4a21      	ldr	r2, [pc, #132]	; (8005d7c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005cf8:	4293      	cmp	r3, r2
 8005cfa:	d022      	beq.n	8005d42 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d04:	d01d      	beq.n	8005d42 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	4a1d      	ldr	r2, [pc, #116]	; (8005d80 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005d0c:	4293      	cmp	r3, r2
 8005d0e:	d018      	beq.n	8005d42 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	4a1b      	ldr	r2, [pc, #108]	; (8005d84 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005d16:	4293      	cmp	r3, r2
 8005d18:	d013      	beq.n	8005d42 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	4a1a      	ldr	r2, [pc, #104]	; (8005d88 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005d20:	4293      	cmp	r3, r2
 8005d22:	d00e      	beq.n	8005d42 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	4a18      	ldr	r2, [pc, #96]	; (8005d8c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005d2a:	4293      	cmp	r3, r2
 8005d2c:	d009      	beq.n	8005d42 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	4a17      	ldr	r2, [pc, #92]	; (8005d90 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005d34:	4293      	cmp	r3, r2
 8005d36:	d004      	beq.n	8005d42 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	4a15      	ldr	r2, [pc, #84]	; (8005d94 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005d3e:	4293      	cmp	r3, r2
 8005d40:	d10c      	bne.n	8005d5c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005d42:	68bb      	ldr	r3, [r7, #8]
 8005d44:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005d48:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005d4a:	683b      	ldr	r3, [r7, #0]
 8005d4c:	685b      	ldr	r3, [r3, #4]
 8005d4e:	68ba      	ldr	r2, [r7, #8]
 8005d50:	4313      	orrs	r3, r2
 8005d52:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	68ba      	ldr	r2, [r7, #8]
 8005d5a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	2201      	movs	r2, #1
 8005d60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2200      	movs	r2, #0
 8005d68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005d6c:	2300      	movs	r3, #0
}
 8005d6e:	4618      	mov	r0, r3
 8005d70:	3714      	adds	r7, #20
 8005d72:	46bd      	mov	sp, r7
 8005d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d78:	4770      	bx	lr
 8005d7a:	bf00      	nop
 8005d7c:	40010000 	.word	0x40010000
 8005d80:	40000400 	.word	0x40000400
 8005d84:	40000800 	.word	0x40000800
 8005d88:	40000c00 	.word	0x40000c00
 8005d8c:	40010400 	.word	0x40010400
 8005d90:	40014000 	.word	0x40014000
 8005d94:	40001800 	.word	0x40001800

08005d98 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005d98:	b580      	push	{r7, lr}
 8005d9a:	b082      	sub	sp, #8
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d101      	bne.n	8005daa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005da6:	2301      	movs	r3, #1
 8005da8:	e03f      	b.n	8005e2a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005db0:	b2db      	uxtb	r3, r3
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d106      	bne.n	8005dc4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	2200      	movs	r2, #0
 8005dba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005dbe:	6878      	ldr	r0, [r7, #4]
 8005dc0:	f7fb fbc2 	bl	8001548 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	2224      	movs	r2, #36	; 0x24
 8005dc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	68da      	ldr	r2, [r3, #12]
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005dda:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005ddc:	6878      	ldr	r0, [r7, #4]
 8005dde:	f000 f829 	bl	8005e34 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	691a      	ldr	r2, [r3, #16]
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005df0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	695a      	ldr	r2, [r3, #20]
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005e00:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	68da      	ldr	r2, [r3, #12]
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005e10:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	2200      	movs	r2, #0
 8005e16:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	2220      	movs	r2, #32
 8005e1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	2220      	movs	r2, #32
 8005e24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005e28:	2300      	movs	r3, #0
}
 8005e2a:	4618      	mov	r0, r3
 8005e2c:	3708      	adds	r7, #8
 8005e2e:	46bd      	mov	sp, r7
 8005e30:	bd80      	pop	{r7, pc}
	...

08005e34 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005e34:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005e38:	b0c0      	sub	sp, #256	; 0x100
 8005e3a:	af00      	add	r7, sp, #0
 8005e3c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005e40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	691b      	ldr	r3, [r3, #16]
 8005e48:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005e4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e50:	68d9      	ldr	r1, [r3, #12]
 8005e52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e56:	681a      	ldr	r2, [r3, #0]
 8005e58:	ea40 0301 	orr.w	r3, r0, r1
 8005e5c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005e5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e62:	689a      	ldr	r2, [r3, #8]
 8005e64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e68:	691b      	ldr	r3, [r3, #16]
 8005e6a:	431a      	orrs	r2, r3
 8005e6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e70:	695b      	ldr	r3, [r3, #20]
 8005e72:	431a      	orrs	r2, r3
 8005e74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e78:	69db      	ldr	r3, [r3, #28]
 8005e7a:	4313      	orrs	r3, r2
 8005e7c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005e80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	68db      	ldr	r3, [r3, #12]
 8005e88:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005e8c:	f021 010c 	bic.w	r1, r1, #12
 8005e90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e94:	681a      	ldr	r2, [r3, #0]
 8005e96:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005e9a:	430b      	orrs	r3, r1
 8005e9c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005e9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	695b      	ldr	r3, [r3, #20]
 8005ea6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005eaa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005eae:	6999      	ldr	r1, [r3, #24]
 8005eb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005eb4:	681a      	ldr	r2, [r3, #0]
 8005eb6:	ea40 0301 	orr.w	r3, r0, r1
 8005eba:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005ebc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ec0:	681a      	ldr	r2, [r3, #0]
 8005ec2:	4b8f      	ldr	r3, [pc, #572]	; (8006100 <UART_SetConfig+0x2cc>)
 8005ec4:	429a      	cmp	r2, r3
 8005ec6:	d005      	beq.n	8005ed4 <UART_SetConfig+0xa0>
 8005ec8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ecc:	681a      	ldr	r2, [r3, #0]
 8005ece:	4b8d      	ldr	r3, [pc, #564]	; (8006104 <UART_SetConfig+0x2d0>)
 8005ed0:	429a      	cmp	r2, r3
 8005ed2:	d104      	bne.n	8005ede <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005ed4:	f7ff fc6e 	bl	80057b4 <HAL_RCC_GetPCLK2Freq>
 8005ed8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005edc:	e003      	b.n	8005ee6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005ede:	f7ff fc55 	bl	800578c <HAL_RCC_GetPCLK1Freq>
 8005ee2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005ee6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005eea:	69db      	ldr	r3, [r3, #28]
 8005eec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005ef0:	f040 810c 	bne.w	800610c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005ef4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005ef8:	2200      	movs	r2, #0
 8005efa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005efe:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005f02:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005f06:	4622      	mov	r2, r4
 8005f08:	462b      	mov	r3, r5
 8005f0a:	1891      	adds	r1, r2, r2
 8005f0c:	65b9      	str	r1, [r7, #88]	; 0x58
 8005f0e:	415b      	adcs	r3, r3
 8005f10:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005f12:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005f16:	4621      	mov	r1, r4
 8005f18:	eb12 0801 	adds.w	r8, r2, r1
 8005f1c:	4629      	mov	r1, r5
 8005f1e:	eb43 0901 	adc.w	r9, r3, r1
 8005f22:	f04f 0200 	mov.w	r2, #0
 8005f26:	f04f 0300 	mov.w	r3, #0
 8005f2a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005f2e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005f32:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005f36:	4690      	mov	r8, r2
 8005f38:	4699      	mov	r9, r3
 8005f3a:	4623      	mov	r3, r4
 8005f3c:	eb18 0303 	adds.w	r3, r8, r3
 8005f40:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005f44:	462b      	mov	r3, r5
 8005f46:	eb49 0303 	adc.w	r3, r9, r3
 8005f4a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005f4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f52:	685b      	ldr	r3, [r3, #4]
 8005f54:	2200      	movs	r2, #0
 8005f56:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005f5a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005f5e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005f62:	460b      	mov	r3, r1
 8005f64:	18db      	adds	r3, r3, r3
 8005f66:	653b      	str	r3, [r7, #80]	; 0x50
 8005f68:	4613      	mov	r3, r2
 8005f6a:	eb42 0303 	adc.w	r3, r2, r3
 8005f6e:	657b      	str	r3, [r7, #84]	; 0x54
 8005f70:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005f74:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005f78:	f7fa f926 	bl	80001c8 <__aeabi_uldivmod>
 8005f7c:	4602      	mov	r2, r0
 8005f7e:	460b      	mov	r3, r1
 8005f80:	4b61      	ldr	r3, [pc, #388]	; (8006108 <UART_SetConfig+0x2d4>)
 8005f82:	fba3 2302 	umull	r2, r3, r3, r2
 8005f86:	095b      	lsrs	r3, r3, #5
 8005f88:	011c      	lsls	r4, r3, #4
 8005f8a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005f8e:	2200      	movs	r2, #0
 8005f90:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005f94:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005f98:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005f9c:	4642      	mov	r2, r8
 8005f9e:	464b      	mov	r3, r9
 8005fa0:	1891      	adds	r1, r2, r2
 8005fa2:	64b9      	str	r1, [r7, #72]	; 0x48
 8005fa4:	415b      	adcs	r3, r3
 8005fa6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005fa8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005fac:	4641      	mov	r1, r8
 8005fae:	eb12 0a01 	adds.w	sl, r2, r1
 8005fb2:	4649      	mov	r1, r9
 8005fb4:	eb43 0b01 	adc.w	fp, r3, r1
 8005fb8:	f04f 0200 	mov.w	r2, #0
 8005fbc:	f04f 0300 	mov.w	r3, #0
 8005fc0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005fc4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005fc8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005fcc:	4692      	mov	sl, r2
 8005fce:	469b      	mov	fp, r3
 8005fd0:	4643      	mov	r3, r8
 8005fd2:	eb1a 0303 	adds.w	r3, sl, r3
 8005fd6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005fda:	464b      	mov	r3, r9
 8005fdc:	eb4b 0303 	adc.w	r3, fp, r3
 8005fe0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005fe4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fe8:	685b      	ldr	r3, [r3, #4]
 8005fea:	2200      	movs	r2, #0
 8005fec:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005ff0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005ff4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005ff8:	460b      	mov	r3, r1
 8005ffa:	18db      	adds	r3, r3, r3
 8005ffc:	643b      	str	r3, [r7, #64]	; 0x40
 8005ffe:	4613      	mov	r3, r2
 8006000:	eb42 0303 	adc.w	r3, r2, r3
 8006004:	647b      	str	r3, [r7, #68]	; 0x44
 8006006:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800600a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800600e:	f7fa f8db 	bl	80001c8 <__aeabi_uldivmod>
 8006012:	4602      	mov	r2, r0
 8006014:	460b      	mov	r3, r1
 8006016:	4611      	mov	r1, r2
 8006018:	4b3b      	ldr	r3, [pc, #236]	; (8006108 <UART_SetConfig+0x2d4>)
 800601a:	fba3 2301 	umull	r2, r3, r3, r1
 800601e:	095b      	lsrs	r3, r3, #5
 8006020:	2264      	movs	r2, #100	; 0x64
 8006022:	fb02 f303 	mul.w	r3, r2, r3
 8006026:	1acb      	subs	r3, r1, r3
 8006028:	00db      	lsls	r3, r3, #3
 800602a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800602e:	4b36      	ldr	r3, [pc, #216]	; (8006108 <UART_SetConfig+0x2d4>)
 8006030:	fba3 2302 	umull	r2, r3, r3, r2
 8006034:	095b      	lsrs	r3, r3, #5
 8006036:	005b      	lsls	r3, r3, #1
 8006038:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800603c:	441c      	add	r4, r3
 800603e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006042:	2200      	movs	r2, #0
 8006044:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006048:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800604c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006050:	4642      	mov	r2, r8
 8006052:	464b      	mov	r3, r9
 8006054:	1891      	adds	r1, r2, r2
 8006056:	63b9      	str	r1, [r7, #56]	; 0x38
 8006058:	415b      	adcs	r3, r3
 800605a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800605c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006060:	4641      	mov	r1, r8
 8006062:	1851      	adds	r1, r2, r1
 8006064:	6339      	str	r1, [r7, #48]	; 0x30
 8006066:	4649      	mov	r1, r9
 8006068:	414b      	adcs	r3, r1
 800606a:	637b      	str	r3, [r7, #52]	; 0x34
 800606c:	f04f 0200 	mov.w	r2, #0
 8006070:	f04f 0300 	mov.w	r3, #0
 8006074:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006078:	4659      	mov	r1, fp
 800607a:	00cb      	lsls	r3, r1, #3
 800607c:	4651      	mov	r1, sl
 800607e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006082:	4651      	mov	r1, sl
 8006084:	00ca      	lsls	r2, r1, #3
 8006086:	4610      	mov	r0, r2
 8006088:	4619      	mov	r1, r3
 800608a:	4603      	mov	r3, r0
 800608c:	4642      	mov	r2, r8
 800608e:	189b      	adds	r3, r3, r2
 8006090:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006094:	464b      	mov	r3, r9
 8006096:	460a      	mov	r2, r1
 8006098:	eb42 0303 	adc.w	r3, r2, r3
 800609c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80060a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060a4:	685b      	ldr	r3, [r3, #4]
 80060a6:	2200      	movs	r2, #0
 80060a8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80060ac:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80060b0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80060b4:	460b      	mov	r3, r1
 80060b6:	18db      	adds	r3, r3, r3
 80060b8:	62bb      	str	r3, [r7, #40]	; 0x28
 80060ba:	4613      	mov	r3, r2
 80060bc:	eb42 0303 	adc.w	r3, r2, r3
 80060c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80060c2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80060c6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80060ca:	f7fa f87d 	bl	80001c8 <__aeabi_uldivmod>
 80060ce:	4602      	mov	r2, r0
 80060d0:	460b      	mov	r3, r1
 80060d2:	4b0d      	ldr	r3, [pc, #52]	; (8006108 <UART_SetConfig+0x2d4>)
 80060d4:	fba3 1302 	umull	r1, r3, r3, r2
 80060d8:	095b      	lsrs	r3, r3, #5
 80060da:	2164      	movs	r1, #100	; 0x64
 80060dc:	fb01 f303 	mul.w	r3, r1, r3
 80060e0:	1ad3      	subs	r3, r2, r3
 80060e2:	00db      	lsls	r3, r3, #3
 80060e4:	3332      	adds	r3, #50	; 0x32
 80060e6:	4a08      	ldr	r2, [pc, #32]	; (8006108 <UART_SetConfig+0x2d4>)
 80060e8:	fba2 2303 	umull	r2, r3, r2, r3
 80060ec:	095b      	lsrs	r3, r3, #5
 80060ee:	f003 0207 	and.w	r2, r3, #7
 80060f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	4422      	add	r2, r4
 80060fa:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80060fc:	e105      	b.n	800630a <UART_SetConfig+0x4d6>
 80060fe:	bf00      	nop
 8006100:	40011000 	.word	0x40011000
 8006104:	40011400 	.word	0x40011400
 8006108:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800610c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006110:	2200      	movs	r2, #0
 8006112:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006116:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800611a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800611e:	4642      	mov	r2, r8
 8006120:	464b      	mov	r3, r9
 8006122:	1891      	adds	r1, r2, r2
 8006124:	6239      	str	r1, [r7, #32]
 8006126:	415b      	adcs	r3, r3
 8006128:	627b      	str	r3, [r7, #36]	; 0x24
 800612a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800612e:	4641      	mov	r1, r8
 8006130:	1854      	adds	r4, r2, r1
 8006132:	4649      	mov	r1, r9
 8006134:	eb43 0501 	adc.w	r5, r3, r1
 8006138:	f04f 0200 	mov.w	r2, #0
 800613c:	f04f 0300 	mov.w	r3, #0
 8006140:	00eb      	lsls	r3, r5, #3
 8006142:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006146:	00e2      	lsls	r2, r4, #3
 8006148:	4614      	mov	r4, r2
 800614a:	461d      	mov	r5, r3
 800614c:	4643      	mov	r3, r8
 800614e:	18e3      	adds	r3, r4, r3
 8006150:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006154:	464b      	mov	r3, r9
 8006156:	eb45 0303 	adc.w	r3, r5, r3
 800615a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800615e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006162:	685b      	ldr	r3, [r3, #4]
 8006164:	2200      	movs	r2, #0
 8006166:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800616a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800616e:	f04f 0200 	mov.w	r2, #0
 8006172:	f04f 0300 	mov.w	r3, #0
 8006176:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800617a:	4629      	mov	r1, r5
 800617c:	008b      	lsls	r3, r1, #2
 800617e:	4621      	mov	r1, r4
 8006180:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006184:	4621      	mov	r1, r4
 8006186:	008a      	lsls	r2, r1, #2
 8006188:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800618c:	f7fa f81c 	bl	80001c8 <__aeabi_uldivmod>
 8006190:	4602      	mov	r2, r0
 8006192:	460b      	mov	r3, r1
 8006194:	4b60      	ldr	r3, [pc, #384]	; (8006318 <UART_SetConfig+0x4e4>)
 8006196:	fba3 2302 	umull	r2, r3, r3, r2
 800619a:	095b      	lsrs	r3, r3, #5
 800619c:	011c      	lsls	r4, r3, #4
 800619e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80061a2:	2200      	movs	r2, #0
 80061a4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80061a8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80061ac:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80061b0:	4642      	mov	r2, r8
 80061b2:	464b      	mov	r3, r9
 80061b4:	1891      	adds	r1, r2, r2
 80061b6:	61b9      	str	r1, [r7, #24]
 80061b8:	415b      	adcs	r3, r3
 80061ba:	61fb      	str	r3, [r7, #28]
 80061bc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80061c0:	4641      	mov	r1, r8
 80061c2:	1851      	adds	r1, r2, r1
 80061c4:	6139      	str	r1, [r7, #16]
 80061c6:	4649      	mov	r1, r9
 80061c8:	414b      	adcs	r3, r1
 80061ca:	617b      	str	r3, [r7, #20]
 80061cc:	f04f 0200 	mov.w	r2, #0
 80061d0:	f04f 0300 	mov.w	r3, #0
 80061d4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80061d8:	4659      	mov	r1, fp
 80061da:	00cb      	lsls	r3, r1, #3
 80061dc:	4651      	mov	r1, sl
 80061de:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80061e2:	4651      	mov	r1, sl
 80061e4:	00ca      	lsls	r2, r1, #3
 80061e6:	4610      	mov	r0, r2
 80061e8:	4619      	mov	r1, r3
 80061ea:	4603      	mov	r3, r0
 80061ec:	4642      	mov	r2, r8
 80061ee:	189b      	adds	r3, r3, r2
 80061f0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80061f4:	464b      	mov	r3, r9
 80061f6:	460a      	mov	r2, r1
 80061f8:	eb42 0303 	adc.w	r3, r2, r3
 80061fc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006200:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006204:	685b      	ldr	r3, [r3, #4]
 8006206:	2200      	movs	r2, #0
 8006208:	67bb      	str	r3, [r7, #120]	; 0x78
 800620a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800620c:	f04f 0200 	mov.w	r2, #0
 8006210:	f04f 0300 	mov.w	r3, #0
 8006214:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006218:	4649      	mov	r1, r9
 800621a:	008b      	lsls	r3, r1, #2
 800621c:	4641      	mov	r1, r8
 800621e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006222:	4641      	mov	r1, r8
 8006224:	008a      	lsls	r2, r1, #2
 8006226:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800622a:	f7f9 ffcd 	bl	80001c8 <__aeabi_uldivmod>
 800622e:	4602      	mov	r2, r0
 8006230:	460b      	mov	r3, r1
 8006232:	4b39      	ldr	r3, [pc, #228]	; (8006318 <UART_SetConfig+0x4e4>)
 8006234:	fba3 1302 	umull	r1, r3, r3, r2
 8006238:	095b      	lsrs	r3, r3, #5
 800623a:	2164      	movs	r1, #100	; 0x64
 800623c:	fb01 f303 	mul.w	r3, r1, r3
 8006240:	1ad3      	subs	r3, r2, r3
 8006242:	011b      	lsls	r3, r3, #4
 8006244:	3332      	adds	r3, #50	; 0x32
 8006246:	4a34      	ldr	r2, [pc, #208]	; (8006318 <UART_SetConfig+0x4e4>)
 8006248:	fba2 2303 	umull	r2, r3, r2, r3
 800624c:	095b      	lsrs	r3, r3, #5
 800624e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006252:	441c      	add	r4, r3
 8006254:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006258:	2200      	movs	r2, #0
 800625a:	673b      	str	r3, [r7, #112]	; 0x70
 800625c:	677a      	str	r2, [r7, #116]	; 0x74
 800625e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006262:	4642      	mov	r2, r8
 8006264:	464b      	mov	r3, r9
 8006266:	1891      	adds	r1, r2, r2
 8006268:	60b9      	str	r1, [r7, #8]
 800626a:	415b      	adcs	r3, r3
 800626c:	60fb      	str	r3, [r7, #12]
 800626e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006272:	4641      	mov	r1, r8
 8006274:	1851      	adds	r1, r2, r1
 8006276:	6039      	str	r1, [r7, #0]
 8006278:	4649      	mov	r1, r9
 800627a:	414b      	adcs	r3, r1
 800627c:	607b      	str	r3, [r7, #4]
 800627e:	f04f 0200 	mov.w	r2, #0
 8006282:	f04f 0300 	mov.w	r3, #0
 8006286:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800628a:	4659      	mov	r1, fp
 800628c:	00cb      	lsls	r3, r1, #3
 800628e:	4651      	mov	r1, sl
 8006290:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006294:	4651      	mov	r1, sl
 8006296:	00ca      	lsls	r2, r1, #3
 8006298:	4610      	mov	r0, r2
 800629a:	4619      	mov	r1, r3
 800629c:	4603      	mov	r3, r0
 800629e:	4642      	mov	r2, r8
 80062a0:	189b      	adds	r3, r3, r2
 80062a2:	66bb      	str	r3, [r7, #104]	; 0x68
 80062a4:	464b      	mov	r3, r9
 80062a6:	460a      	mov	r2, r1
 80062a8:	eb42 0303 	adc.w	r3, r2, r3
 80062ac:	66fb      	str	r3, [r7, #108]	; 0x6c
 80062ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062b2:	685b      	ldr	r3, [r3, #4]
 80062b4:	2200      	movs	r2, #0
 80062b6:	663b      	str	r3, [r7, #96]	; 0x60
 80062b8:	667a      	str	r2, [r7, #100]	; 0x64
 80062ba:	f04f 0200 	mov.w	r2, #0
 80062be:	f04f 0300 	mov.w	r3, #0
 80062c2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80062c6:	4649      	mov	r1, r9
 80062c8:	008b      	lsls	r3, r1, #2
 80062ca:	4641      	mov	r1, r8
 80062cc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80062d0:	4641      	mov	r1, r8
 80062d2:	008a      	lsls	r2, r1, #2
 80062d4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80062d8:	f7f9 ff76 	bl	80001c8 <__aeabi_uldivmod>
 80062dc:	4602      	mov	r2, r0
 80062de:	460b      	mov	r3, r1
 80062e0:	4b0d      	ldr	r3, [pc, #52]	; (8006318 <UART_SetConfig+0x4e4>)
 80062e2:	fba3 1302 	umull	r1, r3, r3, r2
 80062e6:	095b      	lsrs	r3, r3, #5
 80062e8:	2164      	movs	r1, #100	; 0x64
 80062ea:	fb01 f303 	mul.w	r3, r1, r3
 80062ee:	1ad3      	subs	r3, r2, r3
 80062f0:	011b      	lsls	r3, r3, #4
 80062f2:	3332      	adds	r3, #50	; 0x32
 80062f4:	4a08      	ldr	r2, [pc, #32]	; (8006318 <UART_SetConfig+0x4e4>)
 80062f6:	fba2 2303 	umull	r2, r3, r2, r3
 80062fa:	095b      	lsrs	r3, r3, #5
 80062fc:	f003 020f 	and.w	r2, r3, #15
 8006300:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	4422      	add	r2, r4
 8006308:	609a      	str	r2, [r3, #8]
}
 800630a:	bf00      	nop
 800630c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006310:	46bd      	mov	sp, r7
 8006312:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006316:	bf00      	nop
 8006318:	51eb851f 	.word	0x51eb851f

0800631c <FSMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device,
                                    FSMC_NORSRAM_InitTypeDef *Init)
{
 800631c:	b480      	push	{r7}
 800631e:	b087      	sub	sp, #28
 8006320:	af00      	add	r7, sp, #0
 8006322:	6078      	str	r0, [r7, #4]
 8006324:	6039      	str	r1, [r7, #0]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
#endif /* FSMC_BCR1_WFDIS */
  assert_param(IS_FSMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 8006326:	683b      	ldr	r3, [r7, #0]
 8006328:	681a      	ldr	r2, [r3, #0]
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006330:	683a      	ldr	r2, [r7, #0]
 8006332:	6812      	ldr	r2, [r2, #0]
 8006334:	f023 0101 	bic.w	r1, r3, #1
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 800633e:	683b      	ldr	r3, [r7, #0]
 8006340:	689b      	ldr	r3, [r3, #8]
 8006342:	2b08      	cmp	r3, #8
 8006344:	d102      	bne.n	800634c <FSMC_NORSRAM_Init+0x30>
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8006346:	2340      	movs	r3, #64	; 0x40
 8006348:	617b      	str	r3, [r7, #20]
 800634a:	e001      	b.n	8006350 <FSMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_DISABLE;
 800634c:	2300      	movs	r3, #0
 800634e:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 8006350:	683b      	ldr	r3, [r7, #0]
 8006352:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 8006354:	697b      	ldr	r3, [r7, #20]
 8006356:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 8006358:	683b      	ldr	r3, [r7, #0]
 800635a:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 800635c:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 800635e:	683b      	ldr	r3, [r7, #0]
 8006360:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 8006362:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 8006364:	683b      	ldr	r3, [r7, #0]
 8006366:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 8006368:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 800636a:	683b      	ldr	r3, [r7, #0]
 800636c:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 800636e:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 8006370:	683b      	ldr	r3, [r7, #0]
 8006372:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalPolarity      | \
 8006374:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 8006376:	683b      	ldr	r3, [r7, #0]
 8006378:	6a1b      	ldr	r3, [r3, #32]
              Init->WaitSignalActive        | \
 800637a:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 800637c:	683b      	ldr	r3, [r7, #0]
 800637e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WriteOperation          | \
 8006380:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 8006382:	683b      	ldr	r3, [r7, #0]
 8006384:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->WaitSignal              | \
 8006386:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 8006388:	683b      	ldr	r3, [r7, #0]
 800638a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
              Init->ExtendedMode            | \
 800638c:	431a      	orrs	r2, r3
              Init->WriteBurst);
 800638e:	683b      	ldr	r3, [r7, #0]
 8006390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  btcr_reg = (flashaccess                   | \
 8006392:	4313      	orrs	r3, r2
 8006394:	613b      	str	r3, [r7, #16]

#if defined(FSMC_BCR1_WRAPMOD)
  btcr_reg |= Init->WrapMode;
 8006396:	683b      	ldr	r3, [r7, #0]
 8006398:	699b      	ldr	r3, [r3, #24]
 800639a:	693a      	ldr	r2, [r7, #16]
 800639c:	4313      	orrs	r3, r2
 800639e:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->ContinuousClock;
#endif /* FSMC_BCR1_CCLKEN */
#if defined(FSMC_BCR1_WFDIS)
  btcr_reg |= Init->WriteFifo;
#endif /* FSMC_BCR1_WFDIS */
  btcr_reg |= Init->PageSize;
 80063a0:	683b      	ldr	r3, [r7, #0]
 80063a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063a4:	693a      	ldr	r2, [r7, #16]
 80063a6:	4313      	orrs	r3, r2
 80063a8:	613b      	str	r3, [r7, #16]

  mask = (FSMC_BCR1_MBKEN                |
 80063aa:	4b10      	ldr	r3, [pc, #64]	; (80063ec <FSMC_NORSRAM_Init+0xd0>)
 80063ac:	60fb      	str	r3, [r7, #12]
          FSMC_BCR1_EXTMOD               |
          FSMC_BCR1_ASYNCWAIT            |
          FSMC_BCR1_CBURSTRW);

#if defined(FSMC_BCR1_WRAPMOD)
  mask |= FSMC_BCR1_WRAPMOD;
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80063b4:	60fb      	str	r3, [r7, #12]
  mask |= FSMC_BCR1_CCLKEN;
#endif
#if defined(FSMC_BCR1_WFDIS)
  mask |= FSMC_BCR1_WFDIS;
#endif /* FSMC_BCR1_WFDIS */
  mask |= FSMC_BCR1_CPSIZE;
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 80063bc:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 80063be:	683b      	ldr	r3, [r7, #0]
 80063c0:	681a      	ldr	r2, [r3, #0]
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	43db      	mvns	r3, r3
 80063cc:	ea02 0103 	and.w	r1, r2, r3
 80063d0:	683b      	ldr	r3, [r7, #0]
 80063d2:	681a      	ldr	r2, [r3, #0]
 80063d4:	693b      	ldr	r3, [r7, #16]
 80063d6:	4319      	orrs	r1, r3
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FSMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
  }
#endif /* FSMC_BCR1_WFDIS */

  return HAL_OK;
 80063de:	2300      	movs	r3, #0
}
 80063e0:	4618      	mov	r0, r3
 80063e2:	371c      	adds	r7, #28
 80063e4:	46bd      	mov	sp, r7
 80063e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ea:	4770      	bx	lr
 80063ec:	0008fb7f 	.word	0x0008fb7f

080063f0 <FSMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device,
                                          FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80063f0:	b480      	push	{r7}
 80063f2:	b085      	sub	sp, #20
 80063f4:	af00      	add	r7, sp, #0
 80063f6:	60f8      	str	r0, [r7, #12]
 80063f8:	60b9      	str	r1, [r7, #8]
 80063fa:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Set FSMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	1c5a      	adds	r2, r3, #1
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006406:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 800640a:	68bb      	ldr	r3, [r7, #8]
 800640c:	681a      	ldr	r2, [r3, #0]
 800640e:	68bb      	ldr	r3, [r7, #8]
 8006410:	685b      	ldr	r3, [r3, #4]
 8006412:	011b      	lsls	r3, r3, #4
 8006414:	431a      	orrs	r2, r3
 8006416:	68bb      	ldr	r3, [r7, #8]
 8006418:	689b      	ldr	r3, [r3, #8]
 800641a:	021b      	lsls	r3, r3, #8
 800641c:	431a      	orrs	r2, r3
 800641e:	68bb      	ldr	r3, [r7, #8]
 8006420:	68db      	ldr	r3, [r3, #12]
 8006422:	041b      	lsls	r3, r3, #16
 8006424:	431a      	orrs	r2, r3
 8006426:	68bb      	ldr	r3, [r7, #8]
 8006428:	691b      	ldr	r3, [r3, #16]
 800642a:	3b01      	subs	r3, #1
 800642c:	051b      	lsls	r3, r3, #20
 800642e:	431a      	orrs	r2, r3
 8006430:	68bb      	ldr	r3, [r7, #8]
 8006432:	695b      	ldr	r3, [r3, #20]
 8006434:	3b02      	subs	r3, #2
 8006436:	061b      	lsls	r3, r3, #24
 8006438:	431a      	orrs	r2, r3
 800643a:	68bb      	ldr	r3, [r7, #8]
 800643c:	699b      	ldr	r3, [r3, #24]
 800643e:	4313      	orrs	r3, r2
 8006440:	687a      	ldr	r2, [r7, #4]
 8006442:	3201      	adds	r2, #1
 8006444:	4319      	orrs	r1, r3
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FSMC_BTR1_CLKDIV_Pos);
    MODIFY_REG(Device->BTCR[FSMC_NORSRAM_BANK1 + 1U], FSMC_BTR1_CLKDIV, tmpr);
  }

#endif
  return HAL_OK;
 800644c:	2300      	movs	r3, #0
}
 800644e:	4618      	mov	r0, r3
 8006450:	3714      	adds	r7, #20
 8006452:	46bd      	mov	sp, r7
 8006454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006458:	4770      	bx	lr
	...

0800645c <FSMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 800645c:	b480      	push	{r7}
 800645e:	b085      	sub	sp, #20
 8006460:	af00      	add	r7, sp, #0
 8006462:	60f8      	str	r0, [r7, #12]
 8006464:	60b9      	str	r1, [r7, #8]
 8006466:	607a      	str	r2, [r7, #4]
 8006468:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 800646a:	683b      	ldr	r3, [r7, #0]
 800646c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006470:	d11d      	bne.n	80064ae <FSMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	687a      	ldr	r2, [r7, #4]
 8006476:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800647a:	4b13      	ldr	r3, [pc, #76]	; (80064c8 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>)
 800647c:	4013      	ands	r3, r2
 800647e:	68ba      	ldr	r2, [r7, #8]
 8006480:	6811      	ldr	r1, [r2, #0]
 8006482:	68ba      	ldr	r2, [r7, #8]
 8006484:	6852      	ldr	r2, [r2, #4]
 8006486:	0112      	lsls	r2, r2, #4
 8006488:	4311      	orrs	r1, r2
 800648a:	68ba      	ldr	r2, [r7, #8]
 800648c:	6892      	ldr	r2, [r2, #8]
 800648e:	0212      	lsls	r2, r2, #8
 8006490:	4311      	orrs	r1, r2
 8006492:	68ba      	ldr	r2, [r7, #8]
 8006494:	6992      	ldr	r2, [r2, #24]
 8006496:	4311      	orrs	r1, r2
 8006498:	68ba      	ldr	r2, [r7, #8]
 800649a:	68d2      	ldr	r2, [r2, #12]
 800649c:	0412      	lsls	r2, r2, #16
 800649e:	430a      	orrs	r2, r1
 80064a0:	ea43 0102 	orr.w	r1, r3, r2
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	687a      	ldr	r2, [r7, #4]
 80064a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80064ac:	e005      	b.n	80064ba <FSMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FSMC_BWTR1_BUSTURN_Pos)));
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	687a      	ldr	r2, [r7, #4]
 80064b2:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 80064b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 80064ba:	2300      	movs	r3, #0
}
 80064bc:	4618      	mov	r0, r3
 80064be:	3714      	adds	r7, #20
 80064c0:	46bd      	mov	sp, r7
 80064c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c6:	4770      	bx	lr
 80064c8:	cff00000 	.word	0xcff00000

080064cc <FSMC_NORSRAM_WriteOperation_Disable>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_WriteOperation_Disable(FSMC_NORSRAM_TypeDef *Device, uint32_t Bank)
{
 80064cc:	b480      	push	{r7}
 80064ce:	b083      	sub	sp, #12
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	6078      	str	r0, [r7, #4]
 80064d4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_NORSRAM_DEVICE(Device));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Disable write operation */
  CLEAR_BIT(Device->BTCR[Bank], FSMC_WRITE_OPERATION_ENABLE);
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	683a      	ldr	r2, [r7, #0]
 80064da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80064de:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	683a      	ldr	r2, [r7, #0]
 80064e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  return HAL_OK;
 80064ea:	2300      	movs	r3, #0
}
 80064ec:	4618      	mov	r0, r3
 80064ee:	370c      	adds	r7, #12
 80064f0:	46bd      	mov	sp, r7
 80064f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f6:	4770      	bx	lr

080064f8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80064f8:	b084      	sub	sp, #16
 80064fa:	b580      	push	{r7, lr}
 80064fc:	b084      	sub	sp, #16
 80064fe:	af00      	add	r7, sp, #0
 8006500:	6078      	str	r0, [r7, #4]
 8006502:	f107 001c 	add.w	r0, r7, #28
 8006506:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800650a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800650c:	2b01      	cmp	r3, #1
 800650e:	d122      	bne.n	8006556 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006514:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	68db      	ldr	r3, [r3, #12]
 8006520:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8006524:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006528:	687a      	ldr	r2, [r7, #4]
 800652a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	68db      	ldr	r3, [r3, #12]
 8006530:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006538:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800653a:	2b01      	cmp	r3, #1
 800653c:	d105      	bne.n	800654a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	68db      	ldr	r3, [r3, #12]
 8006542:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800654a:	6878      	ldr	r0, [r7, #4]
 800654c:	f001 fbee 	bl	8007d2c <USB_CoreReset>
 8006550:	4603      	mov	r3, r0
 8006552:	73fb      	strb	r3, [r7, #15]
 8006554:	e01a      	b.n	800658c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	68db      	ldr	r3, [r3, #12]
 800655a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006562:	6878      	ldr	r0, [r7, #4]
 8006564:	f001 fbe2 	bl	8007d2c <USB_CoreReset>
 8006568:	4603      	mov	r3, r0
 800656a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800656c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800656e:	2b00      	cmp	r3, #0
 8006570:	d106      	bne.n	8006580 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006576:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	639a      	str	r2, [r3, #56]	; 0x38
 800657e:	e005      	b.n	800658c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006584:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800658c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800658e:	2b01      	cmp	r3, #1
 8006590:	d10b      	bne.n	80065aa <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	689b      	ldr	r3, [r3, #8]
 8006596:	f043 0206 	orr.w	r2, r3, #6
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	689b      	ldr	r3, [r3, #8]
 80065a2:	f043 0220 	orr.w	r2, r3, #32
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80065aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80065ac:	4618      	mov	r0, r3
 80065ae:	3710      	adds	r7, #16
 80065b0:	46bd      	mov	sp, r7
 80065b2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80065b6:	b004      	add	sp, #16
 80065b8:	4770      	bx	lr
	...

080065bc <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80065bc:	b480      	push	{r7}
 80065be:	b087      	sub	sp, #28
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	60f8      	str	r0, [r7, #12]
 80065c4:	60b9      	str	r1, [r7, #8]
 80065c6:	4613      	mov	r3, r2
 80065c8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80065ca:	79fb      	ldrb	r3, [r7, #7]
 80065cc:	2b02      	cmp	r3, #2
 80065ce:	d165      	bne.n	800669c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80065d0:	68bb      	ldr	r3, [r7, #8]
 80065d2:	4a41      	ldr	r2, [pc, #260]	; (80066d8 <USB_SetTurnaroundTime+0x11c>)
 80065d4:	4293      	cmp	r3, r2
 80065d6:	d906      	bls.n	80065e6 <USB_SetTurnaroundTime+0x2a>
 80065d8:	68bb      	ldr	r3, [r7, #8]
 80065da:	4a40      	ldr	r2, [pc, #256]	; (80066dc <USB_SetTurnaroundTime+0x120>)
 80065dc:	4293      	cmp	r3, r2
 80065de:	d202      	bcs.n	80065e6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80065e0:	230f      	movs	r3, #15
 80065e2:	617b      	str	r3, [r7, #20]
 80065e4:	e062      	b.n	80066ac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80065e6:	68bb      	ldr	r3, [r7, #8]
 80065e8:	4a3c      	ldr	r2, [pc, #240]	; (80066dc <USB_SetTurnaroundTime+0x120>)
 80065ea:	4293      	cmp	r3, r2
 80065ec:	d306      	bcc.n	80065fc <USB_SetTurnaroundTime+0x40>
 80065ee:	68bb      	ldr	r3, [r7, #8]
 80065f0:	4a3b      	ldr	r2, [pc, #236]	; (80066e0 <USB_SetTurnaroundTime+0x124>)
 80065f2:	4293      	cmp	r3, r2
 80065f4:	d202      	bcs.n	80065fc <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80065f6:	230e      	movs	r3, #14
 80065f8:	617b      	str	r3, [r7, #20]
 80065fa:	e057      	b.n	80066ac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80065fc:	68bb      	ldr	r3, [r7, #8]
 80065fe:	4a38      	ldr	r2, [pc, #224]	; (80066e0 <USB_SetTurnaroundTime+0x124>)
 8006600:	4293      	cmp	r3, r2
 8006602:	d306      	bcc.n	8006612 <USB_SetTurnaroundTime+0x56>
 8006604:	68bb      	ldr	r3, [r7, #8]
 8006606:	4a37      	ldr	r2, [pc, #220]	; (80066e4 <USB_SetTurnaroundTime+0x128>)
 8006608:	4293      	cmp	r3, r2
 800660a:	d202      	bcs.n	8006612 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800660c:	230d      	movs	r3, #13
 800660e:	617b      	str	r3, [r7, #20]
 8006610:	e04c      	b.n	80066ac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8006612:	68bb      	ldr	r3, [r7, #8]
 8006614:	4a33      	ldr	r2, [pc, #204]	; (80066e4 <USB_SetTurnaroundTime+0x128>)
 8006616:	4293      	cmp	r3, r2
 8006618:	d306      	bcc.n	8006628 <USB_SetTurnaroundTime+0x6c>
 800661a:	68bb      	ldr	r3, [r7, #8]
 800661c:	4a32      	ldr	r2, [pc, #200]	; (80066e8 <USB_SetTurnaroundTime+0x12c>)
 800661e:	4293      	cmp	r3, r2
 8006620:	d802      	bhi.n	8006628 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8006622:	230c      	movs	r3, #12
 8006624:	617b      	str	r3, [r7, #20]
 8006626:	e041      	b.n	80066ac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8006628:	68bb      	ldr	r3, [r7, #8]
 800662a:	4a2f      	ldr	r2, [pc, #188]	; (80066e8 <USB_SetTurnaroundTime+0x12c>)
 800662c:	4293      	cmp	r3, r2
 800662e:	d906      	bls.n	800663e <USB_SetTurnaroundTime+0x82>
 8006630:	68bb      	ldr	r3, [r7, #8]
 8006632:	4a2e      	ldr	r2, [pc, #184]	; (80066ec <USB_SetTurnaroundTime+0x130>)
 8006634:	4293      	cmp	r3, r2
 8006636:	d802      	bhi.n	800663e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8006638:	230b      	movs	r3, #11
 800663a:	617b      	str	r3, [r7, #20]
 800663c:	e036      	b.n	80066ac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800663e:	68bb      	ldr	r3, [r7, #8]
 8006640:	4a2a      	ldr	r2, [pc, #168]	; (80066ec <USB_SetTurnaroundTime+0x130>)
 8006642:	4293      	cmp	r3, r2
 8006644:	d906      	bls.n	8006654 <USB_SetTurnaroundTime+0x98>
 8006646:	68bb      	ldr	r3, [r7, #8]
 8006648:	4a29      	ldr	r2, [pc, #164]	; (80066f0 <USB_SetTurnaroundTime+0x134>)
 800664a:	4293      	cmp	r3, r2
 800664c:	d802      	bhi.n	8006654 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800664e:	230a      	movs	r3, #10
 8006650:	617b      	str	r3, [r7, #20]
 8006652:	e02b      	b.n	80066ac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8006654:	68bb      	ldr	r3, [r7, #8]
 8006656:	4a26      	ldr	r2, [pc, #152]	; (80066f0 <USB_SetTurnaroundTime+0x134>)
 8006658:	4293      	cmp	r3, r2
 800665a:	d906      	bls.n	800666a <USB_SetTurnaroundTime+0xae>
 800665c:	68bb      	ldr	r3, [r7, #8]
 800665e:	4a25      	ldr	r2, [pc, #148]	; (80066f4 <USB_SetTurnaroundTime+0x138>)
 8006660:	4293      	cmp	r3, r2
 8006662:	d202      	bcs.n	800666a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8006664:	2309      	movs	r3, #9
 8006666:	617b      	str	r3, [r7, #20]
 8006668:	e020      	b.n	80066ac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800666a:	68bb      	ldr	r3, [r7, #8]
 800666c:	4a21      	ldr	r2, [pc, #132]	; (80066f4 <USB_SetTurnaroundTime+0x138>)
 800666e:	4293      	cmp	r3, r2
 8006670:	d306      	bcc.n	8006680 <USB_SetTurnaroundTime+0xc4>
 8006672:	68bb      	ldr	r3, [r7, #8]
 8006674:	4a20      	ldr	r2, [pc, #128]	; (80066f8 <USB_SetTurnaroundTime+0x13c>)
 8006676:	4293      	cmp	r3, r2
 8006678:	d802      	bhi.n	8006680 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800667a:	2308      	movs	r3, #8
 800667c:	617b      	str	r3, [r7, #20]
 800667e:	e015      	b.n	80066ac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8006680:	68bb      	ldr	r3, [r7, #8]
 8006682:	4a1d      	ldr	r2, [pc, #116]	; (80066f8 <USB_SetTurnaroundTime+0x13c>)
 8006684:	4293      	cmp	r3, r2
 8006686:	d906      	bls.n	8006696 <USB_SetTurnaroundTime+0xda>
 8006688:	68bb      	ldr	r3, [r7, #8]
 800668a:	4a1c      	ldr	r2, [pc, #112]	; (80066fc <USB_SetTurnaroundTime+0x140>)
 800668c:	4293      	cmp	r3, r2
 800668e:	d202      	bcs.n	8006696 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8006690:	2307      	movs	r3, #7
 8006692:	617b      	str	r3, [r7, #20]
 8006694:	e00a      	b.n	80066ac <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8006696:	2306      	movs	r3, #6
 8006698:	617b      	str	r3, [r7, #20]
 800669a:	e007      	b.n	80066ac <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800669c:	79fb      	ldrb	r3, [r7, #7]
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d102      	bne.n	80066a8 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80066a2:	2309      	movs	r3, #9
 80066a4:	617b      	str	r3, [r7, #20]
 80066a6:	e001      	b.n	80066ac <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80066a8:	2309      	movs	r3, #9
 80066aa:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	68db      	ldr	r3, [r3, #12]
 80066b0:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	68da      	ldr	r2, [r3, #12]
 80066bc:	697b      	ldr	r3, [r7, #20]
 80066be:	029b      	lsls	r3, r3, #10
 80066c0:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80066c4:	431a      	orrs	r2, r3
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80066ca:	2300      	movs	r3, #0
}
 80066cc:	4618      	mov	r0, r3
 80066ce:	371c      	adds	r7, #28
 80066d0:	46bd      	mov	sp, r7
 80066d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d6:	4770      	bx	lr
 80066d8:	00d8acbf 	.word	0x00d8acbf
 80066dc:	00e4e1c0 	.word	0x00e4e1c0
 80066e0:	00f42400 	.word	0x00f42400
 80066e4:	01067380 	.word	0x01067380
 80066e8:	011a499f 	.word	0x011a499f
 80066ec:	01312cff 	.word	0x01312cff
 80066f0:	014ca43f 	.word	0x014ca43f
 80066f4:	016e3600 	.word	0x016e3600
 80066f8:	01a6ab1f 	.word	0x01a6ab1f
 80066fc:	01e84800 	.word	0x01e84800

08006700 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006700:	b480      	push	{r7}
 8006702:	b083      	sub	sp, #12
 8006704:	af00      	add	r7, sp, #0
 8006706:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	689b      	ldr	r3, [r3, #8]
 800670c:	f043 0201 	orr.w	r2, r3, #1
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006714:	2300      	movs	r3, #0
}
 8006716:	4618      	mov	r0, r3
 8006718:	370c      	adds	r7, #12
 800671a:	46bd      	mov	sp, r7
 800671c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006720:	4770      	bx	lr

08006722 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006722:	b480      	push	{r7}
 8006724:	b083      	sub	sp, #12
 8006726:	af00      	add	r7, sp, #0
 8006728:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	689b      	ldr	r3, [r3, #8]
 800672e:	f023 0201 	bic.w	r2, r3, #1
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006736:	2300      	movs	r3, #0
}
 8006738:	4618      	mov	r0, r3
 800673a:	370c      	adds	r7, #12
 800673c:	46bd      	mov	sp, r7
 800673e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006742:	4770      	bx	lr

08006744 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006744:	b580      	push	{r7, lr}
 8006746:	b084      	sub	sp, #16
 8006748:	af00      	add	r7, sp, #0
 800674a:	6078      	str	r0, [r7, #4]
 800674c:	460b      	mov	r3, r1
 800674e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006750:	2300      	movs	r3, #0
 8006752:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	68db      	ldr	r3, [r3, #12]
 8006758:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006760:	78fb      	ldrb	r3, [r7, #3]
 8006762:	2b01      	cmp	r3, #1
 8006764:	d115      	bne.n	8006792 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	68db      	ldr	r3, [r3, #12]
 800676a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006772:	2001      	movs	r0, #1
 8006774:	f7fc f878 	bl	8002868 <HAL_Delay>
      ms++;
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	3301      	adds	r3, #1
 800677c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800677e:	6878      	ldr	r0, [r7, #4]
 8006780:	f001 fa45 	bl	8007c0e <USB_GetMode>
 8006784:	4603      	mov	r3, r0
 8006786:	2b01      	cmp	r3, #1
 8006788:	d01e      	beq.n	80067c8 <USB_SetCurrentMode+0x84>
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	2b31      	cmp	r3, #49	; 0x31
 800678e:	d9f0      	bls.n	8006772 <USB_SetCurrentMode+0x2e>
 8006790:	e01a      	b.n	80067c8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006792:	78fb      	ldrb	r3, [r7, #3]
 8006794:	2b00      	cmp	r3, #0
 8006796:	d115      	bne.n	80067c4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	68db      	ldr	r3, [r3, #12]
 800679c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80067a4:	2001      	movs	r0, #1
 80067a6:	f7fc f85f 	bl	8002868 <HAL_Delay>
      ms++;
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	3301      	adds	r3, #1
 80067ae:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80067b0:	6878      	ldr	r0, [r7, #4]
 80067b2:	f001 fa2c 	bl	8007c0e <USB_GetMode>
 80067b6:	4603      	mov	r3, r0
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d005      	beq.n	80067c8 <USB_SetCurrentMode+0x84>
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	2b31      	cmp	r3, #49	; 0x31
 80067c0:	d9f0      	bls.n	80067a4 <USB_SetCurrentMode+0x60>
 80067c2:	e001      	b.n	80067c8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80067c4:	2301      	movs	r3, #1
 80067c6:	e005      	b.n	80067d4 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	2b32      	cmp	r3, #50	; 0x32
 80067cc:	d101      	bne.n	80067d2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80067ce:	2301      	movs	r3, #1
 80067d0:	e000      	b.n	80067d4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80067d2:	2300      	movs	r3, #0
}
 80067d4:	4618      	mov	r0, r3
 80067d6:	3710      	adds	r7, #16
 80067d8:	46bd      	mov	sp, r7
 80067da:	bd80      	pop	{r7, pc}

080067dc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80067dc:	b084      	sub	sp, #16
 80067de:	b580      	push	{r7, lr}
 80067e0:	b086      	sub	sp, #24
 80067e2:	af00      	add	r7, sp, #0
 80067e4:	6078      	str	r0, [r7, #4]
 80067e6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80067ea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80067ee:	2300      	movs	r3, #0
 80067f0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80067f6:	2300      	movs	r3, #0
 80067f8:	613b      	str	r3, [r7, #16]
 80067fa:	e009      	b.n	8006810 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80067fc:	687a      	ldr	r2, [r7, #4]
 80067fe:	693b      	ldr	r3, [r7, #16]
 8006800:	3340      	adds	r3, #64	; 0x40
 8006802:	009b      	lsls	r3, r3, #2
 8006804:	4413      	add	r3, r2
 8006806:	2200      	movs	r2, #0
 8006808:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800680a:	693b      	ldr	r3, [r7, #16]
 800680c:	3301      	adds	r3, #1
 800680e:	613b      	str	r3, [r7, #16]
 8006810:	693b      	ldr	r3, [r7, #16]
 8006812:	2b0e      	cmp	r3, #14
 8006814:	d9f2      	bls.n	80067fc <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006816:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006818:	2b00      	cmp	r3, #0
 800681a:	d11c      	bne.n	8006856 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006822:	685b      	ldr	r3, [r3, #4]
 8006824:	68fa      	ldr	r2, [r7, #12]
 8006826:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800682a:	f043 0302 	orr.w	r3, r3, #2
 800682e:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006834:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006840:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800684c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	639a      	str	r2, [r3, #56]	; 0x38
 8006854:	e00b      	b.n	800686e <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800685a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006866:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006874:	461a      	mov	r2, r3
 8006876:	2300      	movs	r3, #0
 8006878:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006880:	4619      	mov	r1, r3
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006888:	461a      	mov	r2, r3
 800688a:	680b      	ldr	r3, [r1, #0]
 800688c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800688e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006890:	2b01      	cmp	r3, #1
 8006892:	d10c      	bne.n	80068ae <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006894:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006896:	2b00      	cmp	r3, #0
 8006898:	d104      	bne.n	80068a4 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800689a:	2100      	movs	r1, #0
 800689c:	6878      	ldr	r0, [r7, #4]
 800689e:	f000 f965 	bl	8006b6c <USB_SetDevSpeed>
 80068a2:	e008      	b.n	80068b6 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80068a4:	2101      	movs	r1, #1
 80068a6:	6878      	ldr	r0, [r7, #4]
 80068a8:	f000 f960 	bl	8006b6c <USB_SetDevSpeed>
 80068ac:	e003      	b.n	80068b6 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80068ae:	2103      	movs	r1, #3
 80068b0:	6878      	ldr	r0, [r7, #4]
 80068b2:	f000 f95b 	bl	8006b6c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80068b6:	2110      	movs	r1, #16
 80068b8:	6878      	ldr	r0, [r7, #4]
 80068ba:	f000 f8f3 	bl	8006aa4 <USB_FlushTxFifo>
 80068be:	4603      	mov	r3, r0
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d001      	beq.n	80068c8 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80068c4:	2301      	movs	r3, #1
 80068c6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80068c8:	6878      	ldr	r0, [r7, #4]
 80068ca:	f000 f91f 	bl	8006b0c <USB_FlushRxFifo>
 80068ce:	4603      	mov	r3, r0
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d001      	beq.n	80068d8 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80068d4:	2301      	movs	r3, #1
 80068d6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068de:	461a      	mov	r2, r3
 80068e0:	2300      	movs	r3, #0
 80068e2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068ea:	461a      	mov	r2, r3
 80068ec:	2300      	movs	r3, #0
 80068ee:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068f6:	461a      	mov	r2, r3
 80068f8:	2300      	movs	r3, #0
 80068fa:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80068fc:	2300      	movs	r3, #0
 80068fe:	613b      	str	r3, [r7, #16]
 8006900:	e043      	b.n	800698a <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006902:	693b      	ldr	r3, [r7, #16]
 8006904:	015a      	lsls	r2, r3, #5
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	4413      	add	r3, r2
 800690a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006914:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006918:	d118      	bne.n	800694c <USB_DevInit+0x170>
    {
      if (i == 0U)
 800691a:	693b      	ldr	r3, [r7, #16]
 800691c:	2b00      	cmp	r3, #0
 800691e:	d10a      	bne.n	8006936 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006920:	693b      	ldr	r3, [r7, #16]
 8006922:	015a      	lsls	r2, r3, #5
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	4413      	add	r3, r2
 8006928:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800692c:	461a      	mov	r2, r3
 800692e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006932:	6013      	str	r3, [r2, #0]
 8006934:	e013      	b.n	800695e <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006936:	693b      	ldr	r3, [r7, #16]
 8006938:	015a      	lsls	r2, r3, #5
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	4413      	add	r3, r2
 800693e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006942:	461a      	mov	r2, r3
 8006944:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006948:	6013      	str	r3, [r2, #0]
 800694a:	e008      	b.n	800695e <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800694c:	693b      	ldr	r3, [r7, #16]
 800694e:	015a      	lsls	r2, r3, #5
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	4413      	add	r3, r2
 8006954:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006958:	461a      	mov	r2, r3
 800695a:	2300      	movs	r3, #0
 800695c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800695e:	693b      	ldr	r3, [r7, #16]
 8006960:	015a      	lsls	r2, r3, #5
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	4413      	add	r3, r2
 8006966:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800696a:	461a      	mov	r2, r3
 800696c:	2300      	movs	r3, #0
 800696e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006970:	693b      	ldr	r3, [r7, #16]
 8006972:	015a      	lsls	r2, r3, #5
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	4413      	add	r3, r2
 8006978:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800697c:	461a      	mov	r2, r3
 800697e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006982:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006984:	693b      	ldr	r3, [r7, #16]
 8006986:	3301      	adds	r3, #1
 8006988:	613b      	str	r3, [r7, #16]
 800698a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800698c:	693a      	ldr	r2, [r7, #16]
 800698e:	429a      	cmp	r2, r3
 8006990:	d3b7      	bcc.n	8006902 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006992:	2300      	movs	r3, #0
 8006994:	613b      	str	r3, [r7, #16]
 8006996:	e043      	b.n	8006a20 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006998:	693b      	ldr	r3, [r7, #16]
 800699a:	015a      	lsls	r2, r3, #5
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	4413      	add	r3, r2
 80069a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80069aa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80069ae:	d118      	bne.n	80069e2 <USB_DevInit+0x206>
    {
      if (i == 0U)
 80069b0:	693b      	ldr	r3, [r7, #16]
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d10a      	bne.n	80069cc <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80069b6:	693b      	ldr	r3, [r7, #16]
 80069b8:	015a      	lsls	r2, r3, #5
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	4413      	add	r3, r2
 80069be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069c2:	461a      	mov	r2, r3
 80069c4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80069c8:	6013      	str	r3, [r2, #0]
 80069ca:	e013      	b.n	80069f4 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80069cc:	693b      	ldr	r3, [r7, #16]
 80069ce:	015a      	lsls	r2, r3, #5
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	4413      	add	r3, r2
 80069d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069d8:	461a      	mov	r2, r3
 80069da:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80069de:	6013      	str	r3, [r2, #0]
 80069e0:	e008      	b.n	80069f4 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80069e2:	693b      	ldr	r3, [r7, #16]
 80069e4:	015a      	lsls	r2, r3, #5
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	4413      	add	r3, r2
 80069ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069ee:	461a      	mov	r2, r3
 80069f0:	2300      	movs	r3, #0
 80069f2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80069f4:	693b      	ldr	r3, [r7, #16]
 80069f6:	015a      	lsls	r2, r3, #5
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	4413      	add	r3, r2
 80069fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a00:	461a      	mov	r2, r3
 8006a02:	2300      	movs	r3, #0
 8006a04:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006a06:	693b      	ldr	r3, [r7, #16]
 8006a08:	015a      	lsls	r2, r3, #5
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	4413      	add	r3, r2
 8006a0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a12:	461a      	mov	r2, r3
 8006a14:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006a18:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006a1a:	693b      	ldr	r3, [r7, #16]
 8006a1c:	3301      	adds	r3, #1
 8006a1e:	613b      	str	r3, [r7, #16]
 8006a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a22:	693a      	ldr	r2, [r7, #16]
 8006a24:	429a      	cmp	r2, r3
 8006a26:	d3b7      	bcc.n	8006998 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a2e:	691b      	ldr	r3, [r3, #16]
 8006a30:	68fa      	ldr	r2, [r7, #12]
 8006a32:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006a36:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006a3a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	2200      	movs	r2, #0
 8006a40:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006a48:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006a4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d105      	bne.n	8006a5c <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	699b      	ldr	r3, [r3, #24]
 8006a54:	f043 0210 	orr.w	r2, r3, #16
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	699a      	ldr	r2, [r3, #24]
 8006a60:	4b0f      	ldr	r3, [pc, #60]	; (8006aa0 <USB_DevInit+0x2c4>)
 8006a62:	4313      	orrs	r3, r2
 8006a64:	687a      	ldr	r2, [r7, #4]
 8006a66:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006a68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d005      	beq.n	8006a7a <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	699b      	ldr	r3, [r3, #24]
 8006a72:	f043 0208 	orr.w	r2, r3, #8
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006a7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a7c:	2b01      	cmp	r3, #1
 8006a7e:	d107      	bne.n	8006a90 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	699b      	ldr	r3, [r3, #24]
 8006a84:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006a88:	f043 0304 	orr.w	r3, r3, #4
 8006a8c:	687a      	ldr	r2, [r7, #4]
 8006a8e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006a90:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a92:	4618      	mov	r0, r3
 8006a94:	3718      	adds	r7, #24
 8006a96:	46bd      	mov	sp, r7
 8006a98:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006a9c:	b004      	add	sp, #16
 8006a9e:	4770      	bx	lr
 8006aa0:	803c3800 	.word	0x803c3800

08006aa4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006aa4:	b480      	push	{r7}
 8006aa6:	b085      	sub	sp, #20
 8006aa8:	af00      	add	r7, sp, #0
 8006aaa:	6078      	str	r0, [r7, #4]
 8006aac:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006aae:	2300      	movs	r3, #0
 8006ab0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	3301      	adds	r3, #1
 8006ab6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	4a13      	ldr	r2, [pc, #76]	; (8006b08 <USB_FlushTxFifo+0x64>)
 8006abc:	4293      	cmp	r3, r2
 8006abe:	d901      	bls.n	8006ac4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006ac0:	2303      	movs	r3, #3
 8006ac2:	e01b      	b.n	8006afc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	691b      	ldr	r3, [r3, #16]
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	daf2      	bge.n	8006ab2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006acc:	2300      	movs	r3, #0
 8006ace:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006ad0:	683b      	ldr	r3, [r7, #0]
 8006ad2:	019b      	lsls	r3, r3, #6
 8006ad4:	f043 0220 	orr.w	r2, r3, #32
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	3301      	adds	r3, #1
 8006ae0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	4a08      	ldr	r2, [pc, #32]	; (8006b08 <USB_FlushTxFifo+0x64>)
 8006ae6:	4293      	cmp	r3, r2
 8006ae8:	d901      	bls.n	8006aee <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006aea:	2303      	movs	r3, #3
 8006aec:	e006      	b.n	8006afc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	691b      	ldr	r3, [r3, #16]
 8006af2:	f003 0320 	and.w	r3, r3, #32
 8006af6:	2b20      	cmp	r3, #32
 8006af8:	d0f0      	beq.n	8006adc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006afa:	2300      	movs	r3, #0
}
 8006afc:	4618      	mov	r0, r3
 8006afe:	3714      	adds	r7, #20
 8006b00:	46bd      	mov	sp, r7
 8006b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b06:	4770      	bx	lr
 8006b08:	00030d40 	.word	0x00030d40

08006b0c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006b0c:	b480      	push	{r7}
 8006b0e:	b085      	sub	sp, #20
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006b14:	2300      	movs	r3, #0
 8006b16:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	3301      	adds	r3, #1
 8006b1c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	4a11      	ldr	r2, [pc, #68]	; (8006b68 <USB_FlushRxFifo+0x5c>)
 8006b22:	4293      	cmp	r3, r2
 8006b24:	d901      	bls.n	8006b2a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006b26:	2303      	movs	r3, #3
 8006b28:	e018      	b.n	8006b5c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	691b      	ldr	r3, [r3, #16]
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	daf2      	bge.n	8006b18 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006b32:	2300      	movs	r3, #0
 8006b34:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	2210      	movs	r2, #16
 8006b3a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	3301      	adds	r3, #1
 8006b40:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	4a08      	ldr	r2, [pc, #32]	; (8006b68 <USB_FlushRxFifo+0x5c>)
 8006b46:	4293      	cmp	r3, r2
 8006b48:	d901      	bls.n	8006b4e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006b4a:	2303      	movs	r3, #3
 8006b4c:	e006      	b.n	8006b5c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	691b      	ldr	r3, [r3, #16]
 8006b52:	f003 0310 	and.w	r3, r3, #16
 8006b56:	2b10      	cmp	r3, #16
 8006b58:	d0f0      	beq.n	8006b3c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006b5a:	2300      	movs	r3, #0
}
 8006b5c:	4618      	mov	r0, r3
 8006b5e:	3714      	adds	r7, #20
 8006b60:	46bd      	mov	sp, r7
 8006b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b66:	4770      	bx	lr
 8006b68:	00030d40 	.word	0x00030d40

08006b6c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006b6c:	b480      	push	{r7}
 8006b6e:	b085      	sub	sp, #20
 8006b70:	af00      	add	r7, sp, #0
 8006b72:	6078      	str	r0, [r7, #4]
 8006b74:	460b      	mov	r3, r1
 8006b76:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b82:	681a      	ldr	r2, [r3, #0]
 8006b84:	78fb      	ldrb	r3, [r7, #3]
 8006b86:	68f9      	ldr	r1, [r7, #12]
 8006b88:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006b8c:	4313      	orrs	r3, r2
 8006b8e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006b90:	2300      	movs	r3, #0
}
 8006b92:	4618      	mov	r0, r3
 8006b94:	3714      	adds	r7, #20
 8006b96:	46bd      	mov	sp, r7
 8006b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b9c:	4770      	bx	lr

08006b9e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8006b9e:	b480      	push	{r7}
 8006ba0:	b087      	sub	sp, #28
 8006ba2:	af00      	add	r7, sp, #0
 8006ba4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8006baa:	693b      	ldr	r3, [r7, #16]
 8006bac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006bb0:	689b      	ldr	r3, [r3, #8]
 8006bb2:	f003 0306 	and.w	r3, r3, #6
 8006bb6:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d102      	bne.n	8006bc4 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8006bbe:	2300      	movs	r3, #0
 8006bc0:	75fb      	strb	r3, [r7, #23]
 8006bc2:	e00a      	b.n	8006bda <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	2b02      	cmp	r3, #2
 8006bc8:	d002      	beq.n	8006bd0 <USB_GetDevSpeed+0x32>
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	2b06      	cmp	r3, #6
 8006bce:	d102      	bne.n	8006bd6 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8006bd0:	2302      	movs	r3, #2
 8006bd2:	75fb      	strb	r3, [r7, #23]
 8006bd4:	e001      	b.n	8006bda <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8006bd6:	230f      	movs	r3, #15
 8006bd8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8006bda:	7dfb      	ldrb	r3, [r7, #23]
}
 8006bdc:	4618      	mov	r0, r3
 8006bde:	371c      	adds	r7, #28
 8006be0:	46bd      	mov	sp, r7
 8006be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be6:	4770      	bx	lr

08006be8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006be8:	b480      	push	{r7}
 8006bea:	b085      	sub	sp, #20
 8006bec:	af00      	add	r7, sp, #0
 8006bee:	6078      	str	r0, [r7, #4]
 8006bf0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006bf6:	683b      	ldr	r3, [r7, #0]
 8006bf8:	781b      	ldrb	r3, [r3, #0]
 8006bfa:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006bfc:	683b      	ldr	r3, [r7, #0]
 8006bfe:	785b      	ldrb	r3, [r3, #1]
 8006c00:	2b01      	cmp	r3, #1
 8006c02:	d13a      	bne.n	8006c7a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c0a:	69da      	ldr	r2, [r3, #28]
 8006c0c:	683b      	ldr	r3, [r7, #0]
 8006c0e:	781b      	ldrb	r3, [r3, #0]
 8006c10:	f003 030f 	and.w	r3, r3, #15
 8006c14:	2101      	movs	r1, #1
 8006c16:	fa01 f303 	lsl.w	r3, r1, r3
 8006c1a:	b29b      	uxth	r3, r3
 8006c1c:	68f9      	ldr	r1, [r7, #12]
 8006c1e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006c22:	4313      	orrs	r3, r2
 8006c24:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8006c26:	68bb      	ldr	r3, [r7, #8]
 8006c28:	015a      	lsls	r2, r3, #5
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	4413      	add	r3, r2
 8006c2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d155      	bne.n	8006ce8 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006c3c:	68bb      	ldr	r3, [r7, #8]
 8006c3e:	015a      	lsls	r2, r3, #5
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	4413      	add	r3, r2
 8006c44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c48:	681a      	ldr	r2, [r3, #0]
 8006c4a:	683b      	ldr	r3, [r7, #0]
 8006c4c:	68db      	ldr	r3, [r3, #12]
 8006c4e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006c52:	683b      	ldr	r3, [r7, #0]
 8006c54:	791b      	ldrb	r3, [r3, #4]
 8006c56:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006c58:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006c5a:	68bb      	ldr	r3, [r7, #8]
 8006c5c:	059b      	lsls	r3, r3, #22
 8006c5e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006c60:	4313      	orrs	r3, r2
 8006c62:	68ba      	ldr	r2, [r7, #8]
 8006c64:	0151      	lsls	r1, r2, #5
 8006c66:	68fa      	ldr	r2, [r7, #12]
 8006c68:	440a      	add	r2, r1
 8006c6a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c6e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006c72:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c76:	6013      	str	r3, [r2, #0]
 8006c78:	e036      	b.n	8006ce8 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c80:	69da      	ldr	r2, [r3, #28]
 8006c82:	683b      	ldr	r3, [r7, #0]
 8006c84:	781b      	ldrb	r3, [r3, #0]
 8006c86:	f003 030f 	and.w	r3, r3, #15
 8006c8a:	2101      	movs	r1, #1
 8006c8c:	fa01 f303 	lsl.w	r3, r1, r3
 8006c90:	041b      	lsls	r3, r3, #16
 8006c92:	68f9      	ldr	r1, [r7, #12]
 8006c94:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006c98:	4313      	orrs	r3, r2
 8006c9a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8006c9c:	68bb      	ldr	r3, [r7, #8]
 8006c9e:	015a      	lsls	r2, r3, #5
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	4413      	add	r3, r2
 8006ca4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d11a      	bne.n	8006ce8 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006cb2:	68bb      	ldr	r3, [r7, #8]
 8006cb4:	015a      	lsls	r2, r3, #5
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	4413      	add	r3, r2
 8006cba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006cbe:	681a      	ldr	r2, [r3, #0]
 8006cc0:	683b      	ldr	r3, [r7, #0]
 8006cc2:	68db      	ldr	r3, [r3, #12]
 8006cc4:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8006cc8:	683b      	ldr	r3, [r7, #0]
 8006cca:	791b      	ldrb	r3, [r3, #4]
 8006ccc:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006cce:	430b      	orrs	r3, r1
 8006cd0:	4313      	orrs	r3, r2
 8006cd2:	68ba      	ldr	r2, [r7, #8]
 8006cd4:	0151      	lsls	r1, r2, #5
 8006cd6:	68fa      	ldr	r2, [r7, #12]
 8006cd8:	440a      	add	r2, r1
 8006cda:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006cde:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006ce2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006ce6:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8006ce8:	2300      	movs	r3, #0
}
 8006cea:	4618      	mov	r0, r3
 8006cec:	3714      	adds	r7, #20
 8006cee:	46bd      	mov	sp, r7
 8006cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf4:	4770      	bx	lr
	...

08006cf8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006cf8:	b480      	push	{r7}
 8006cfa:	b085      	sub	sp, #20
 8006cfc:	af00      	add	r7, sp, #0
 8006cfe:	6078      	str	r0, [r7, #4]
 8006d00:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006d06:	683b      	ldr	r3, [r7, #0]
 8006d08:	781b      	ldrb	r3, [r3, #0]
 8006d0a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8006d0c:	683b      	ldr	r3, [r7, #0]
 8006d0e:	785b      	ldrb	r3, [r3, #1]
 8006d10:	2b01      	cmp	r3, #1
 8006d12:	d161      	bne.n	8006dd8 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006d14:	68bb      	ldr	r3, [r7, #8]
 8006d16:	015a      	lsls	r2, r3, #5
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	4413      	add	r3, r2
 8006d1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006d26:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006d2a:	d11f      	bne.n	8006d6c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8006d2c:	68bb      	ldr	r3, [r7, #8]
 8006d2e:	015a      	lsls	r2, r3, #5
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	4413      	add	r3, r2
 8006d34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	68ba      	ldr	r2, [r7, #8]
 8006d3c:	0151      	lsls	r1, r2, #5
 8006d3e:	68fa      	ldr	r2, [r7, #12]
 8006d40:	440a      	add	r2, r1
 8006d42:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d46:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006d4a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8006d4c:	68bb      	ldr	r3, [r7, #8]
 8006d4e:	015a      	lsls	r2, r3, #5
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	4413      	add	r3, r2
 8006d54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	68ba      	ldr	r2, [r7, #8]
 8006d5c:	0151      	lsls	r1, r2, #5
 8006d5e:	68fa      	ldr	r2, [r7, #12]
 8006d60:	440a      	add	r2, r1
 8006d62:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d66:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006d6a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d72:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006d74:	683b      	ldr	r3, [r7, #0]
 8006d76:	781b      	ldrb	r3, [r3, #0]
 8006d78:	f003 030f 	and.w	r3, r3, #15
 8006d7c:	2101      	movs	r1, #1
 8006d7e:	fa01 f303 	lsl.w	r3, r1, r3
 8006d82:	b29b      	uxth	r3, r3
 8006d84:	43db      	mvns	r3, r3
 8006d86:	68f9      	ldr	r1, [r7, #12]
 8006d88:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006d8c:	4013      	ands	r3, r2
 8006d8e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d96:	69da      	ldr	r2, [r3, #28]
 8006d98:	683b      	ldr	r3, [r7, #0]
 8006d9a:	781b      	ldrb	r3, [r3, #0]
 8006d9c:	f003 030f 	and.w	r3, r3, #15
 8006da0:	2101      	movs	r1, #1
 8006da2:	fa01 f303 	lsl.w	r3, r1, r3
 8006da6:	b29b      	uxth	r3, r3
 8006da8:	43db      	mvns	r3, r3
 8006daa:	68f9      	ldr	r1, [r7, #12]
 8006dac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006db0:	4013      	ands	r3, r2
 8006db2:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8006db4:	68bb      	ldr	r3, [r7, #8]
 8006db6:	015a      	lsls	r2, r3, #5
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	4413      	add	r3, r2
 8006dbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006dc0:	681a      	ldr	r2, [r3, #0]
 8006dc2:	68bb      	ldr	r3, [r7, #8]
 8006dc4:	0159      	lsls	r1, r3, #5
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	440b      	add	r3, r1
 8006dca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006dce:	4619      	mov	r1, r3
 8006dd0:	4b35      	ldr	r3, [pc, #212]	; (8006ea8 <USB_DeactivateEndpoint+0x1b0>)
 8006dd2:	4013      	ands	r3, r2
 8006dd4:	600b      	str	r3, [r1, #0]
 8006dd6:	e060      	b.n	8006e9a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006dd8:	68bb      	ldr	r3, [r7, #8]
 8006dda:	015a      	lsls	r2, r3, #5
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	4413      	add	r3, r2
 8006de0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006dea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006dee:	d11f      	bne.n	8006e30 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006df0:	68bb      	ldr	r3, [r7, #8]
 8006df2:	015a      	lsls	r2, r3, #5
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	4413      	add	r3, r2
 8006df8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	68ba      	ldr	r2, [r7, #8]
 8006e00:	0151      	lsls	r1, r2, #5
 8006e02:	68fa      	ldr	r2, [r7, #12]
 8006e04:	440a      	add	r2, r1
 8006e06:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006e0a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006e0e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8006e10:	68bb      	ldr	r3, [r7, #8]
 8006e12:	015a      	lsls	r2, r3, #5
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	4413      	add	r3, r2
 8006e18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	68ba      	ldr	r2, [r7, #8]
 8006e20:	0151      	lsls	r1, r2, #5
 8006e22:	68fa      	ldr	r2, [r7, #12]
 8006e24:	440a      	add	r2, r1
 8006e26:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006e2a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006e2e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e36:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006e38:	683b      	ldr	r3, [r7, #0]
 8006e3a:	781b      	ldrb	r3, [r3, #0]
 8006e3c:	f003 030f 	and.w	r3, r3, #15
 8006e40:	2101      	movs	r1, #1
 8006e42:	fa01 f303 	lsl.w	r3, r1, r3
 8006e46:	041b      	lsls	r3, r3, #16
 8006e48:	43db      	mvns	r3, r3
 8006e4a:	68f9      	ldr	r1, [r7, #12]
 8006e4c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006e50:	4013      	ands	r3, r2
 8006e52:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e5a:	69da      	ldr	r2, [r3, #28]
 8006e5c:	683b      	ldr	r3, [r7, #0]
 8006e5e:	781b      	ldrb	r3, [r3, #0]
 8006e60:	f003 030f 	and.w	r3, r3, #15
 8006e64:	2101      	movs	r1, #1
 8006e66:	fa01 f303 	lsl.w	r3, r1, r3
 8006e6a:	041b      	lsls	r3, r3, #16
 8006e6c:	43db      	mvns	r3, r3
 8006e6e:	68f9      	ldr	r1, [r7, #12]
 8006e70:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006e74:	4013      	ands	r3, r2
 8006e76:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8006e78:	68bb      	ldr	r3, [r7, #8]
 8006e7a:	015a      	lsls	r2, r3, #5
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	4413      	add	r3, r2
 8006e80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e84:	681a      	ldr	r2, [r3, #0]
 8006e86:	68bb      	ldr	r3, [r7, #8]
 8006e88:	0159      	lsls	r1, r3, #5
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	440b      	add	r3, r1
 8006e8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e92:	4619      	mov	r1, r3
 8006e94:	4b05      	ldr	r3, [pc, #20]	; (8006eac <USB_DeactivateEndpoint+0x1b4>)
 8006e96:	4013      	ands	r3, r2
 8006e98:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8006e9a:	2300      	movs	r3, #0
}
 8006e9c:	4618      	mov	r0, r3
 8006e9e:	3714      	adds	r7, #20
 8006ea0:	46bd      	mov	sp, r7
 8006ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea6:	4770      	bx	lr
 8006ea8:	ec337800 	.word	0xec337800
 8006eac:	eff37800 	.word	0xeff37800

08006eb0 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006eb0:	b580      	push	{r7, lr}
 8006eb2:	b08a      	sub	sp, #40	; 0x28
 8006eb4:	af02      	add	r7, sp, #8
 8006eb6:	60f8      	str	r0, [r7, #12]
 8006eb8:	60b9      	str	r1, [r7, #8]
 8006eba:	4613      	mov	r3, r2
 8006ebc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8006ec2:	68bb      	ldr	r3, [r7, #8]
 8006ec4:	781b      	ldrb	r3, [r3, #0]
 8006ec6:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006ec8:	68bb      	ldr	r3, [r7, #8]
 8006eca:	785b      	ldrb	r3, [r3, #1]
 8006ecc:	2b01      	cmp	r3, #1
 8006ece:	f040 815c 	bne.w	800718a <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006ed2:	68bb      	ldr	r3, [r7, #8]
 8006ed4:	699b      	ldr	r3, [r3, #24]
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d132      	bne.n	8006f40 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006eda:	69bb      	ldr	r3, [r7, #24]
 8006edc:	015a      	lsls	r2, r3, #5
 8006ede:	69fb      	ldr	r3, [r7, #28]
 8006ee0:	4413      	add	r3, r2
 8006ee2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ee6:	691b      	ldr	r3, [r3, #16]
 8006ee8:	69ba      	ldr	r2, [r7, #24]
 8006eea:	0151      	lsls	r1, r2, #5
 8006eec:	69fa      	ldr	r2, [r7, #28]
 8006eee:	440a      	add	r2, r1
 8006ef0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006ef4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006ef8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006efc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006efe:	69bb      	ldr	r3, [r7, #24]
 8006f00:	015a      	lsls	r2, r3, #5
 8006f02:	69fb      	ldr	r3, [r7, #28]
 8006f04:	4413      	add	r3, r2
 8006f06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f0a:	691b      	ldr	r3, [r3, #16]
 8006f0c:	69ba      	ldr	r2, [r7, #24]
 8006f0e:	0151      	lsls	r1, r2, #5
 8006f10:	69fa      	ldr	r2, [r7, #28]
 8006f12:	440a      	add	r2, r1
 8006f14:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f18:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006f1c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006f1e:	69bb      	ldr	r3, [r7, #24]
 8006f20:	015a      	lsls	r2, r3, #5
 8006f22:	69fb      	ldr	r3, [r7, #28]
 8006f24:	4413      	add	r3, r2
 8006f26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f2a:	691b      	ldr	r3, [r3, #16]
 8006f2c:	69ba      	ldr	r2, [r7, #24]
 8006f2e:	0151      	lsls	r1, r2, #5
 8006f30:	69fa      	ldr	r2, [r7, #28]
 8006f32:	440a      	add	r2, r1
 8006f34:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f38:	0cdb      	lsrs	r3, r3, #19
 8006f3a:	04db      	lsls	r3, r3, #19
 8006f3c:	6113      	str	r3, [r2, #16]
 8006f3e:	e074      	b.n	800702a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006f40:	69bb      	ldr	r3, [r7, #24]
 8006f42:	015a      	lsls	r2, r3, #5
 8006f44:	69fb      	ldr	r3, [r7, #28]
 8006f46:	4413      	add	r3, r2
 8006f48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f4c:	691b      	ldr	r3, [r3, #16]
 8006f4e:	69ba      	ldr	r2, [r7, #24]
 8006f50:	0151      	lsls	r1, r2, #5
 8006f52:	69fa      	ldr	r2, [r7, #28]
 8006f54:	440a      	add	r2, r1
 8006f56:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f5a:	0cdb      	lsrs	r3, r3, #19
 8006f5c:	04db      	lsls	r3, r3, #19
 8006f5e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006f60:	69bb      	ldr	r3, [r7, #24]
 8006f62:	015a      	lsls	r2, r3, #5
 8006f64:	69fb      	ldr	r3, [r7, #28]
 8006f66:	4413      	add	r3, r2
 8006f68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f6c:	691b      	ldr	r3, [r3, #16]
 8006f6e:	69ba      	ldr	r2, [r7, #24]
 8006f70:	0151      	lsls	r1, r2, #5
 8006f72:	69fa      	ldr	r2, [r7, #28]
 8006f74:	440a      	add	r2, r1
 8006f76:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f7a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006f7e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006f82:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8006f84:	69bb      	ldr	r3, [r7, #24]
 8006f86:	015a      	lsls	r2, r3, #5
 8006f88:	69fb      	ldr	r3, [r7, #28]
 8006f8a:	4413      	add	r3, r2
 8006f8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f90:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8006f92:	68bb      	ldr	r3, [r7, #8]
 8006f94:	6999      	ldr	r1, [r3, #24]
 8006f96:	68bb      	ldr	r3, [r7, #8]
 8006f98:	68db      	ldr	r3, [r3, #12]
 8006f9a:	440b      	add	r3, r1
 8006f9c:	1e59      	subs	r1, r3, #1
 8006f9e:	68bb      	ldr	r3, [r7, #8]
 8006fa0:	68db      	ldr	r3, [r3, #12]
 8006fa2:	fbb1 f3f3 	udiv	r3, r1, r3
 8006fa6:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8006fa8:	4b9d      	ldr	r3, [pc, #628]	; (8007220 <USB_EPStartXfer+0x370>)
 8006faa:	400b      	ands	r3, r1
 8006fac:	69b9      	ldr	r1, [r7, #24]
 8006fae:	0148      	lsls	r0, r1, #5
 8006fb0:	69f9      	ldr	r1, [r7, #28]
 8006fb2:	4401      	add	r1, r0
 8006fb4:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006fb8:	4313      	orrs	r3, r2
 8006fba:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006fbc:	69bb      	ldr	r3, [r7, #24]
 8006fbe:	015a      	lsls	r2, r3, #5
 8006fc0:	69fb      	ldr	r3, [r7, #28]
 8006fc2:	4413      	add	r3, r2
 8006fc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fc8:	691a      	ldr	r2, [r3, #16]
 8006fca:	68bb      	ldr	r3, [r7, #8]
 8006fcc:	699b      	ldr	r3, [r3, #24]
 8006fce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006fd2:	69b9      	ldr	r1, [r7, #24]
 8006fd4:	0148      	lsls	r0, r1, #5
 8006fd6:	69f9      	ldr	r1, [r7, #28]
 8006fd8:	4401      	add	r1, r0
 8006fda:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006fde:	4313      	orrs	r3, r2
 8006fe0:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8006fe2:	68bb      	ldr	r3, [r7, #8]
 8006fe4:	791b      	ldrb	r3, [r3, #4]
 8006fe6:	2b01      	cmp	r3, #1
 8006fe8:	d11f      	bne.n	800702a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8006fea:	69bb      	ldr	r3, [r7, #24]
 8006fec:	015a      	lsls	r2, r3, #5
 8006fee:	69fb      	ldr	r3, [r7, #28]
 8006ff0:	4413      	add	r3, r2
 8006ff2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ff6:	691b      	ldr	r3, [r3, #16]
 8006ff8:	69ba      	ldr	r2, [r7, #24]
 8006ffa:	0151      	lsls	r1, r2, #5
 8006ffc:	69fa      	ldr	r2, [r7, #28]
 8006ffe:	440a      	add	r2, r1
 8007000:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007004:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8007008:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800700a:	69bb      	ldr	r3, [r7, #24]
 800700c:	015a      	lsls	r2, r3, #5
 800700e:	69fb      	ldr	r3, [r7, #28]
 8007010:	4413      	add	r3, r2
 8007012:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007016:	691b      	ldr	r3, [r3, #16]
 8007018:	69ba      	ldr	r2, [r7, #24]
 800701a:	0151      	lsls	r1, r2, #5
 800701c:	69fa      	ldr	r2, [r7, #28]
 800701e:	440a      	add	r2, r1
 8007020:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007024:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007028:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800702a:	79fb      	ldrb	r3, [r7, #7]
 800702c:	2b01      	cmp	r3, #1
 800702e:	d14b      	bne.n	80070c8 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007030:	68bb      	ldr	r3, [r7, #8]
 8007032:	695b      	ldr	r3, [r3, #20]
 8007034:	2b00      	cmp	r3, #0
 8007036:	d009      	beq.n	800704c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007038:	69bb      	ldr	r3, [r7, #24]
 800703a:	015a      	lsls	r2, r3, #5
 800703c:	69fb      	ldr	r3, [r7, #28]
 800703e:	4413      	add	r3, r2
 8007040:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007044:	461a      	mov	r2, r3
 8007046:	68bb      	ldr	r3, [r7, #8]
 8007048:	695b      	ldr	r3, [r3, #20]
 800704a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800704c:	68bb      	ldr	r3, [r7, #8]
 800704e:	791b      	ldrb	r3, [r3, #4]
 8007050:	2b01      	cmp	r3, #1
 8007052:	d128      	bne.n	80070a6 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007054:	69fb      	ldr	r3, [r7, #28]
 8007056:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800705a:	689b      	ldr	r3, [r3, #8]
 800705c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007060:	2b00      	cmp	r3, #0
 8007062:	d110      	bne.n	8007086 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007064:	69bb      	ldr	r3, [r7, #24]
 8007066:	015a      	lsls	r2, r3, #5
 8007068:	69fb      	ldr	r3, [r7, #28]
 800706a:	4413      	add	r3, r2
 800706c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	69ba      	ldr	r2, [r7, #24]
 8007074:	0151      	lsls	r1, r2, #5
 8007076:	69fa      	ldr	r2, [r7, #28]
 8007078:	440a      	add	r2, r1
 800707a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800707e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007082:	6013      	str	r3, [r2, #0]
 8007084:	e00f      	b.n	80070a6 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007086:	69bb      	ldr	r3, [r7, #24]
 8007088:	015a      	lsls	r2, r3, #5
 800708a:	69fb      	ldr	r3, [r7, #28]
 800708c:	4413      	add	r3, r2
 800708e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	69ba      	ldr	r2, [r7, #24]
 8007096:	0151      	lsls	r1, r2, #5
 8007098:	69fa      	ldr	r2, [r7, #28]
 800709a:	440a      	add	r2, r1
 800709c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80070a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80070a4:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80070a6:	69bb      	ldr	r3, [r7, #24]
 80070a8:	015a      	lsls	r2, r3, #5
 80070aa:	69fb      	ldr	r3, [r7, #28]
 80070ac:	4413      	add	r3, r2
 80070ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	69ba      	ldr	r2, [r7, #24]
 80070b6:	0151      	lsls	r1, r2, #5
 80070b8:	69fa      	ldr	r2, [r7, #28]
 80070ba:	440a      	add	r2, r1
 80070bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80070c0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80070c4:	6013      	str	r3, [r2, #0]
 80070c6:	e133      	b.n	8007330 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80070c8:	69bb      	ldr	r3, [r7, #24]
 80070ca:	015a      	lsls	r2, r3, #5
 80070cc:	69fb      	ldr	r3, [r7, #28]
 80070ce:	4413      	add	r3, r2
 80070d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	69ba      	ldr	r2, [r7, #24]
 80070d8:	0151      	lsls	r1, r2, #5
 80070da:	69fa      	ldr	r2, [r7, #28]
 80070dc:	440a      	add	r2, r1
 80070de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80070e2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80070e6:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80070e8:	68bb      	ldr	r3, [r7, #8]
 80070ea:	791b      	ldrb	r3, [r3, #4]
 80070ec:	2b01      	cmp	r3, #1
 80070ee:	d015      	beq.n	800711c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80070f0:	68bb      	ldr	r3, [r7, #8]
 80070f2:	699b      	ldr	r3, [r3, #24]
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	f000 811b 	beq.w	8007330 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80070fa:	69fb      	ldr	r3, [r7, #28]
 80070fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007100:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007102:	68bb      	ldr	r3, [r7, #8]
 8007104:	781b      	ldrb	r3, [r3, #0]
 8007106:	f003 030f 	and.w	r3, r3, #15
 800710a:	2101      	movs	r1, #1
 800710c:	fa01 f303 	lsl.w	r3, r1, r3
 8007110:	69f9      	ldr	r1, [r7, #28]
 8007112:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007116:	4313      	orrs	r3, r2
 8007118:	634b      	str	r3, [r1, #52]	; 0x34
 800711a:	e109      	b.n	8007330 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800711c:	69fb      	ldr	r3, [r7, #28]
 800711e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007122:	689b      	ldr	r3, [r3, #8]
 8007124:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007128:	2b00      	cmp	r3, #0
 800712a:	d110      	bne.n	800714e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800712c:	69bb      	ldr	r3, [r7, #24]
 800712e:	015a      	lsls	r2, r3, #5
 8007130:	69fb      	ldr	r3, [r7, #28]
 8007132:	4413      	add	r3, r2
 8007134:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	69ba      	ldr	r2, [r7, #24]
 800713c:	0151      	lsls	r1, r2, #5
 800713e:	69fa      	ldr	r2, [r7, #28]
 8007140:	440a      	add	r2, r1
 8007142:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007146:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800714a:	6013      	str	r3, [r2, #0]
 800714c:	e00f      	b.n	800716e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800714e:	69bb      	ldr	r3, [r7, #24]
 8007150:	015a      	lsls	r2, r3, #5
 8007152:	69fb      	ldr	r3, [r7, #28]
 8007154:	4413      	add	r3, r2
 8007156:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	69ba      	ldr	r2, [r7, #24]
 800715e:	0151      	lsls	r1, r2, #5
 8007160:	69fa      	ldr	r2, [r7, #28]
 8007162:	440a      	add	r2, r1
 8007164:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007168:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800716c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800716e:	68bb      	ldr	r3, [r7, #8]
 8007170:	6919      	ldr	r1, [r3, #16]
 8007172:	68bb      	ldr	r3, [r7, #8]
 8007174:	781a      	ldrb	r2, [r3, #0]
 8007176:	68bb      	ldr	r3, [r7, #8]
 8007178:	699b      	ldr	r3, [r3, #24]
 800717a:	b298      	uxth	r0, r3
 800717c:	79fb      	ldrb	r3, [r7, #7]
 800717e:	9300      	str	r3, [sp, #0]
 8007180:	4603      	mov	r3, r0
 8007182:	68f8      	ldr	r0, [r7, #12]
 8007184:	f000 fade 	bl	8007744 <USB_WritePacket>
 8007188:	e0d2      	b.n	8007330 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800718a:	69bb      	ldr	r3, [r7, #24]
 800718c:	015a      	lsls	r2, r3, #5
 800718e:	69fb      	ldr	r3, [r7, #28]
 8007190:	4413      	add	r3, r2
 8007192:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007196:	691b      	ldr	r3, [r3, #16]
 8007198:	69ba      	ldr	r2, [r7, #24]
 800719a:	0151      	lsls	r1, r2, #5
 800719c:	69fa      	ldr	r2, [r7, #28]
 800719e:	440a      	add	r2, r1
 80071a0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80071a4:	0cdb      	lsrs	r3, r3, #19
 80071a6:	04db      	lsls	r3, r3, #19
 80071a8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80071aa:	69bb      	ldr	r3, [r7, #24]
 80071ac:	015a      	lsls	r2, r3, #5
 80071ae:	69fb      	ldr	r3, [r7, #28]
 80071b0:	4413      	add	r3, r2
 80071b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071b6:	691b      	ldr	r3, [r3, #16]
 80071b8:	69ba      	ldr	r2, [r7, #24]
 80071ba:	0151      	lsls	r1, r2, #5
 80071bc:	69fa      	ldr	r2, [r7, #28]
 80071be:	440a      	add	r2, r1
 80071c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80071c4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80071c8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80071cc:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80071ce:	68bb      	ldr	r3, [r7, #8]
 80071d0:	699b      	ldr	r3, [r3, #24]
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d126      	bne.n	8007224 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80071d6:	69bb      	ldr	r3, [r7, #24]
 80071d8:	015a      	lsls	r2, r3, #5
 80071da:	69fb      	ldr	r3, [r7, #28]
 80071dc:	4413      	add	r3, r2
 80071de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071e2:	691a      	ldr	r2, [r3, #16]
 80071e4:	68bb      	ldr	r3, [r7, #8]
 80071e6:	68db      	ldr	r3, [r3, #12]
 80071e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80071ec:	69b9      	ldr	r1, [r7, #24]
 80071ee:	0148      	lsls	r0, r1, #5
 80071f0:	69f9      	ldr	r1, [r7, #28]
 80071f2:	4401      	add	r1, r0
 80071f4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80071f8:	4313      	orrs	r3, r2
 80071fa:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80071fc:	69bb      	ldr	r3, [r7, #24]
 80071fe:	015a      	lsls	r2, r3, #5
 8007200:	69fb      	ldr	r3, [r7, #28]
 8007202:	4413      	add	r3, r2
 8007204:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007208:	691b      	ldr	r3, [r3, #16]
 800720a:	69ba      	ldr	r2, [r7, #24]
 800720c:	0151      	lsls	r1, r2, #5
 800720e:	69fa      	ldr	r2, [r7, #28]
 8007210:	440a      	add	r2, r1
 8007212:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007216:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800721a:	6113      	str	r3, [r2, #16]
 800721c:	e03a      	b.n	8007294 <USB_EPStartXfer+0x3e4>
 800721e:	bf00      	nop
 8007220:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8007224:	68bb      	ldr	r3, [r7, #8]
 8007226:	699a      	ldr	r2, [r3, #24]
 8007228:	68bb      	ldr	r3, [r7, #8]
 800722a:	68db      	ldr	r3, [r3, #12]
 800722c:	4413      	add	r3, r2
 800722e:	1e5a      	subs	r2, r3, #1
 8007230:	68bb      	ldr	r3, [r7, #8]
 8007232:	68db      	ldr	r3, [r3, #12]
 8007234:	fbb2 f3f3 	udiv	r3, r2, r3
 8007238:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800723a:	68bb      	ldr	r3, [r7, #8]
 800723c:	68db      	ldr	r3, [r3, #12]
 800723e:	8afa      	ldrh	r2, [r7, #22]
 8007240:	fb03 f202 	mul.w	r2, r3, r2
 8007244:	68bb      	ldr	r3, [r7, #8]
 8007246:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8007248:	69bb      	ldr	r3, [r7, #24]
 800724a:	015a      	lsls	r2, r3, #5
 800724c:	69fb      	ldr	r3, [r7, #28]
 800724e:	4413      	add	r3, r2
 8007250:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007254:	691a      	ldr	r2, [r3, #16]
 8007256:	8afb      	ldrh	r3, [r7, #22]
 8007258:	04d9      	lsls	r1, r3, #19
 800725a:	4b38      	ldr	r3, [pc, #224]	; (800733c <USB_EPStartXfer+0x48c>)
 800725c:	400b      	ands	r3, r1
 800725e:	69b9      	ldr	r1, [r7, #24]
 8007260:	0148      	lsls	r0, r1, #5
 8007262:	69f9      	ldr	r1, [r7, #28]
 8007264:	4401      	add	r1, r0
 8007266:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800726a:	4313      	orrs	r3, r2
 800726c:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800726e:	69bb      	ldr	r3, [r7, #24]
 8007270:	015a      	lsls	r2, r3, #5
 8007272:	69fb      	ldr	r3, [r7, #28]
 8007274:	4413      	add	r3, r2
 8007276:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800727a:	691a      	ldr	r2, [r3, #16]
 800727c:	68bb      	ldr	r3, [r7, #8]
 800727e:	69db      	ldr	r3, [r3, #28]
 8007280:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007284:	69b9      	ldr	r1, [r7, #24]
 8007286:	0148      	lsls	r0, r1, #5
 8007288:	69f9      	ldr	r1, [r7, #28]
 800728a:	4401      	add	r1, r0
 800728c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007290:	4313      	orrs	r3, r2
 8007292:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8007294:	79fb      	ldrb	r3, [r7, #7]
 8007296:	2b01      	cmp	r3, #1
 8007298:	d10d      	bne.n	80072b6 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800729a:	68bb      	ldr	r3, [r7, #8]
 800729c:	691b      	ldr	r3, [r3, #16]
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d009      	beq.n	80072b6 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80072a2:	68bb      	ldr	r3, [r7, #8]
 80072a4:	6919      	ldr	r1, [r3, #16]
 80072a6:	69bb      	ldr	r3, [r7, #24]
 80072a8:	015a      	lsls	r2, r3, #5
 80072aa:	69fb      	ldr	r3, [r7, #28]
 80072ac:	4413      	add	r3, r2
 80072ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072b2:	460a      	mov	r2, r1
 80072b4:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80072b6:	68bb      	ldr	r3, [r7, #8]
 80072b8:	791b      	ldrb	r3, [r3, #4]
 80072ba:	2b01      	cmp	r3, #1
 80072bc:	d128      	bne.n	8007310 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80072be:	69fb      	ldr	r3, [r7, #28]
 80072c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80072c4:	689b      	ldr	r3, [r3, #8]
 80072c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d110      	bne.n	80072f0 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80072ce:	69bb      	ldr	r3, [r7, #24]
 80072d0:	015a      	lsls	r2, r3, #5
 80072d2:	69fb      	ldr	r3, [r7, #28]
 80072d4:	4413      	add	r3, r2
 80072d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	69ba      	ldr	r2, [r7, #24]
 80072de:	0151      	lsls	r1, r2, #5
 80072e0:	69fa      	ldr	r2, [r7, #28]
 80072e2:	440a      	add	r2, r1
 80072e4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80072e8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80072ec:	6013      	str	r3, [r2, #0]
 80072ee:	e00f      	b.n	8007310 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80072f0:	69bb      	ldr	r3, [r7, #24]
 80072f2:	015a      	lsls	r2, r3, #5
 80072f4:	69fb      	ldr	r3, [r7, #28]
 80072f6:	4413      	add	r3, r2
 80072f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	69ba      	ldr	r2, [r7, #24]
 8007300:	0151      	lsls	r1, r2, #5
 8007302:	69fa      	ldr	r2, [r7, #28]
 8007304:	440a      	add	r2, r1
 8007306:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800730a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800730e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007310:	69bb      	ldr	r3, [r7, #24]
 8007312:	015a      	lsls	r2, r3, #5
 8007314:	69fb      	ldr	r3, [r7, #28]
 8007316:	4413      	add	r3, r2
 8007318:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	69ba      	ldr	r2, [r7, #24]
 8007320:	0151      	lsls	r1, r2, #5
 8007322:	69fa      	ldr	r2, [r7, #28]
 8007324:	440a      	add	r2, r1
 8007326:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800732a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800732e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007330:	2300      	movs	r3, #0
}
 8007332:	4618      	mov	r0, r3
 8007334:	3720      	adds	r7, #32
 8007336:	46bd      	mov	sp, r7
 8007338:	bd80      	pop	{r7, pc}
 800733a:	bf00      	nop
 800733c:	1ff80000 	.word	0x1ff80000

08007340 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007340:	b480      	push	{r7}
 8007342:	b087      	sub	sp, #28
 8007344:	af00      	add	r7, sp, #0
 8007346:	60f8      	str	r0, [r7, #12]
 8007348:	60b9      	str	r1, [r7, #8]
 800734a:	4613      	mov	r3, r2
 800734c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8007352:	68bb      	ldr	r3, [r7, #8]
 8007354:	781b      	ldrb	r3, [r3, #0]
 8007356:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007358:	68bb      	ldr	r3, [r7, #8]
 800735a:	785b      	ldrb	r3, [r3, #1]
 800735c:	2b01      	cmp	r3, #1
 800735e:	f040 80ce 	bne.w	80074fe <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8007362:	68bb      	ldr	r3, [r7, #8]
 8007364:	699b      	ldr	r3, [r3, #24]
 8007366:	2b00      	cmp	r3, #0
 8007368:	d132      	bne.n	80073d0 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800736a:	693b      	ldr	r3, [r7, #16]
 800736c:	015a      	lsls	r2, r3, #5
 800736e:	697b      	ldr	r3, [r7, #20]
 8007370:	4413      	add	r3, r2
 8007372:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007376:	691b      	ldr	r3, [r3, #16]
 8007378:	693a      	ldr	r2, [r7, #16]
 800737a:	0151      	lsls	r1, r2, #5
 800737c:	697a      	ldr	r2, [r7, #20]
 800737e:	440a      	add	r2, r1
 8007380:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007384:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007388:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800738c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800738e:	693b      	ldr	r3, [r7, #16]
 8007390:	015a      	lsls	r2, r3, #5
 8007392:	697b      	ldr	r3, [r7, #20]
 8007394:	4413      	add	r3, r2
 8007396:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800739a:	691b      	ldr	r3, [r3, #16]
 800739c:	693a      	ldr	r2, [r7, #16]
 800739e:	0151      	lsls	r1, r2, #5
 80073a0:	697a      	ldr	r2, [r7, #20]
 80073a2:	440a      	add	r2, r1
 80073a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80073a8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80073ac:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80073ae:	693b      	ldr	r3, [r7, #16]
 80073b0:	015a      	lsls	r2, r3, #5
 80073b2:	697b      	ldr	r3, [r7, #20]
 80073b4:	4413      	add	r3, r2
 80073b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073ba:	691b      	ldr	r3, [r3, #16]
 80073bc:	693a      	ldr	r2, [r7, #16]
 80073be:	0151      	lsls	r1, r2, #5
 80073c0:	697a      	ldr	r2, [r7, #20]
 80073c2:	440a      	add	r2, r1
 80073c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80073c8:	0cdb      	lsrs	r3, r3, #19
 80073ca:	04db      	lsls	r3, r3, #19
 80073cc:	6113      	str	r3, [r2, #16]
 80073ce:	e04e      	b.n	800746e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80073d0:	693b      	ldr	r3, [r7, #16]
 80073d2:	015a      	lsls	r2, r3, #5
 80073d4:	697b      	ldr	r3, [r7, #20]
 80073d6:	4413      	add	r3, r2
 80073d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073dc:	691b      	ldr	r3, [r3, #16]
 80073de:	693a      	ldr	r2, [r7, #16]
 80073e0:	0151      	lsls	r1, r2, #5
 80073e2:	697a      	ldr	r2, [r7, #20]
 80073e4:	440a      	add	r2, r1
 80073e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80073ea:	0cdb      	lsrs	r3, r3, #19
 80073ec:	04db      	lsls	r3, r3, #19
 80073ee:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80073f0:	693b      	ldr	r3, [r7, #16]
 80073f2:	015a      	lsls	r2, r3, #5
 80073f4:	697b      	ldr	r3, [r7, #20]
 80073f6:	4413      	add	r3, r2
 80073f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073fc:	691b      	ldr	r3, [r3, #16]
 80073fe:	693a      	ldr	r2, [r7, #16]
 8007400:	0151      	lsls	r1, r2, #5
 8007402:	697a      	ldr	r2, [r7, #20]
 8007404:	440a      	add	r2, r1
 8007406:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800740a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800740e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007412:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8007414:	68bb      	ldr	r3, [r7, #8]
 8007416:	699a      	ldr	r2, [r3, #24]
 8007418:	68bb      	ldr	r3, [r7, #8]
 800741a:	68db      	ldr	r3, [r3, #12]
 800741c:	429a      	cmp	r2, r3
 800741e:	d903      	bls.n	8007428 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8007420:	68bb      	ldr	r3, [r7, #8]
 8007422:	68da      	ldr	r2, [r3, #12]
 8007424:	68bb      	ldr	r3, [r7, #8]
 8007426:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007428:	693b      	ldr	r3, [r7, #16]
 800742a:	015a      	lsls	r2, r3, #5
 800742c:	697b      	ldr	r3, [r7, #20]
 800742e:	4413      	add	r3, r2
 8007430:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007434:	691b      	ldr	r3, [r3, #16]
 8007436:	693a      	ldr	r2, [r7, #16]
 8007438:	0151      	lsls	r1, r2, #5
 800743a:	697a      	ldr	r2, [r7, #20]
 800743c:	440a      	add	r2, r1
 800743e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007442:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007446:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007448:	693b      	ldr	r3, [r7, #16]
 800744a:	015a      	lsls	r2, r3, #5
 800744c:	697b      	ldr	r3, [r7, #20]
 800744e:	4413      	add	r3, r2
 8007450:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007454:	691a      	ldr	r2, [r3, #16]
 8007456:	68bb      	ldr	r3, [r7, #8]
 8007458:	699b      	ldr	r3, [r3, #24]
 800745a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800745e:	6939      	ldr	r1, [r7, #16]
 8007460:	0148      	lsls	r0, r1, #5
 8007462:	6979      	ldr	r1, [r7, #20]
 8007464:	4401      	add	r1, r0
 8007466:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800746a:	4313      	orrs	r3, r2
 800746c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800746e:	79fb      	ldrb	r3, [r7, #7]
 8007470:	2b01      	cmp	r3, #1
 8007472:	d11e      	bne.n	80074b2 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007474:	68bb      	ldr	r3, [r7, #8]
 8007476:	695b      	ldr	r3, [r3, #20]
 8007478:	2b00      	cmp	r3, #0
 800747a:	d009      	beq.n	8007490 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800747c:	693b      	ldr	r3, [r7, #16]
 800747e:	015a      	lsls	r2, r3, #5
 8007480:	697b      	ldr	r3, [r7, #20]
 8007482:	4413      	add	r3, r2
 8007484:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007488:	461a      	mov	r2, r3
 800748a:	68bb      	ldr	r3, [r7, #8]
 800748c:	695b      	ldr	r3, [r3, #20]
 800748e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007490:	693b      	ldr	r3, [r7, #16]
 8007492:	015a      	lsls	r2, r3, #5
 8007494:	697b      	ldr	r3, [r7, #20]
 8007496:	4413      	add	r3, r2
 8007498:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	693a      	ldr	r2, [r7, #16]
 80074a0:	0151      	lsls	r1, r2, #5
 80074a2:	697a      	ldr	r2, [r7, #20]
 80074a4:	440a      	add	r2, r1
 80074a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80074aa:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80074ae:	6013      	str	r3, [r2, #0]
 80074b0:	e097      	b.n	80075e2 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80074b2:	693b      	ldr	r3, [r7, #16]
 80074b4:	015a      	lsls	r2, r3, #5
 80074b6:	697b      	ldr	r3, [r7, #20]
 80074b8:	4413      	add	r3, r2
 80074ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	693a      	ldr	r2, [r7, #16]
 80074c2:	0151      	lsls	r1, r2, #5
 80074c4:	697a      	ldr	r2, [r7, #20]
 80074c6:	440a      	add	r2, r1
 80074c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80074cc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80074d0:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80074d2:	68bb      	ldr	r3, [r7, #8]
 80074d4:	699b      	ldr	r3, [r3, #24]
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	f000 8083 	beq.w	80075e2 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80074dc:	697b      	ldr	r3, [r7, #20]
 80074de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80074e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80074e4:	68bb      	ldr	r3, [r7, #8]
 80074e6:	781b      	ldrb	r3, [r3, #0]
 80074e8:	f003 030f 	and.w	r3, r3, #15
 80074ec:	2101      	movs	r1, #1
 80074ee:	fa01 f303 	lsl.w	r3, r1, r3
 80074f2:	6979      	ldr	r1, [r7, #20]
 80074f4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80074f8:	4313      	orrs	r3, r2
 80074fa:	634b      	str	r3, [r1, #52]	; 0x34
 80074fc:	e071      	b.n	80075e2 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80074fe:	693b      	ldr	r3, [r7, #16]
 8007500:	015a      	lsls	r2, r3, #5
 8007502:	697b      	ldr	r3, [r7, #20]
 8007504:	4413      	add	r3, r2
 8007506:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800750a:	691b      	ldr	r3, [r3, #16]
 800750c:	693a      	ldr	r2, [r7, #16]
 800750e:	0151      	lsls	r1, r2, #5
 8007510:	697a      	ldr	r2, [r7, #20]
 8007512:	440a      	add	r2, r1
 8007514:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007518:	0cdb      	lsrs	r3, r3, #19
 800751a:	04db      	lsls	r3, r3, #19
 800751c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800751e:	693b      	ldr	r3, [r7, #16]
 8007520:	015a      	lsls	r2, r3, #5
 8007522:	697b      	ldr	r3, [r7, #20]
 8007524:	4413      	add	r3, r2
 8007526:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800752a:	691b      	ldr	r3, [r3, #16]
 800752c:	693a      	ldr	r2, [r7, #16]
 800752e:	0151      	lsls	r1, r2, #5
 8007530:	697a      	ldr	r2, [r7, #20]
 8007532:	440a      	add	r2, r1
 8007534:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007538:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800753c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007540:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8007542:	68bb      	ldr	r3, [r7, #8]
 8007544:	699b      	ldr	r3, [r3, #24]
 8007546:	2b00      	cmp	r3, #0
 8007548:	d003      	beq.n	8007552 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800754a:	68bb      	ldr	r3, [r7, #8]
 800754c:	68da      	ldr	r2, [r3, #12]
 800754e:	68bb      	ldr	r3, [r7, #8]
 8007550:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8007552:	68bb      	ldr	r3, [r7, #8]
 8007554:	68da      	ldr	r2, [r3, #12]
 8007556:	68bb      	ldr	r3, [r7, #8]
 8007558:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800755a:	693b      	ldr	r3, [r7, #16]
 800755c:	015a      	lsls	r2, r3, #5
 800755e:	697b      	ldr	r3, [r7, #20]
 8007560:	4413      	add	r3, r2
 8007562:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007566:	691b      	ldr	r3, [r3, #16]
 8007568:	693a      	ldr	r2, [r7, #16]
 800756a:	0151      	lsls	r1, r2, #5
 800756c:	697a      	ldr	r2, [r7, #20]
 800756e:	440a      	add	r2, r1
 8007570:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007574:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007578:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800757a:	693b      	ldr	r3, [r7, #16]
 800757c:	015a      	lsls	r2, r3, #5
 800757e:	697b      	ldr	r3, [r7, #20]
 8007580:	4413      	add	r3, r2
 8007582:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007586:	691a      	ldr	r2, [r3, #16]
 8007588:	68bb      	ldr	r3, [r7, #8]
 800758a:	69db      	ldr	r3, [r3, #28]
 800758c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007590:	6939      	ldr	r1, [r7, #16]
 8007592:	0148      	lsls	r0, r1, #5
 8007594:	6979      	ldr	r1, [r7, #20]
 8007596:	4401      	add	r1, r0
 8007598:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800759c:	4313      	orrs	r3, r2
 800759e:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80075a0:	79fb      	ldrb	r3, [r7, #7]
 80075a2:	2b01      	cmp	r3, #1
 80075a4:	d10d      	bne.n	80075c2 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80075a6:	68bb      	ldr	r3, [r7, #8]
 80075a8:	691b      	ldr	r3, [r3, #16]
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d009      	beq.n	80075c2 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80075ae:	68bb      	ldr	r3, [r7, #8]
 80075b0:	6919      	ldr	r1, [r3, #16]
 80075b2:	693b      	ldr	r3, [r7, #16]
 80075b4:	015a      	lsls	r2, r3, #5
 80075b6:	697b      	ldr	r3, [r7, #20]
 80075b8:	4413      	add	r3, r2
 80075ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075be:	460a      	mov	r2, r1
 80075c0:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80075c2:	693b      	ldr	r3, [r7, #16]
 80075c4:	015a      	lsls	r2, r3, #5
 80075c6:	697b      	ldr	r3, [r7, #20]
 80075c8:	4413      	add	r3, r2
 80075ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	693a      	ldr	r2, [r7, #16]
 80075d2:	0151      	lsls	r1, r2, #5
 80075d4:	697a      	ldr	r2, [r7, #20]
 80075d6:	440a      	add	r2, r1
 80075d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80075dc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80075e0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80075e2:	2300      	movs	r3, #0
}
 80075e4:	4618      	mov	r0, r3
 80075e6:	371c      	adds	r7, #28
 80075e8:	46bd      	mov	sp, r7
 80075ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ee:	4770      	bx	lr

080075f0 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80075f0:	b480      	push	{r7}
 80075f2:	b087      	sub	sp, #28
 80075f4:	af00      	add	r7, sp, #0
 80075f6:	6078      	str	r0, [r7, #4]
 80075f8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80075fa:	2300      	movs	r3, #0
 80075fc:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80075fe:	2300      	movs	r3, #0
 8007600:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007606:	683b      	ldr	r3, [r7, #0]
 8007608:	785b      	ldrb	r3, [r3, #1]
 800760a:	2b01      	cmp	r3, #1
 800760c:	d14a      	bne.n	80076a4 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800760e:	683b      	ldr	r3, [r7, #0]
 8007610:	781b      	ldrb	r3, [r3, #0]
 8007612:	015a      	lsls	r2, r3, #5
 8007614:	693b      	ldr	r3, [r7, #16]
 8007616:	4413      	add	r3, r2
 8007618:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007622:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007626:	f040 8086 	bne.w	8007736 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800762a:	683b      	ldr	r3, [r7, #0]
 800762c:	781b      	ldrb	r3, [r3, #0]
 800762e:	015a      	lsls	r2, r3, #5
 8007630:	693b      	ldr	r3, [r7, #16]
 8007632:	4413      	add	r3, r2
 8007634:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	683a      	ldr	r2, [r7, #0]
 800763c:	7812      	ldrb	r2, [r2, #0]
 800763e:	0151      	lsls	r1, r2, #5
 8007640:	693a      	ldr	r2, [r7, #16]
 8007642:	440a      	add	r2, r1
 8007644:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007648:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800764c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800764e:	683b      	ldr	r3, [r7, #0]
 8007650:	781b      	ldrb	r3, [r3, #0]
 8007652:	015a      	lsls	r2, r3, #5
 8007654:	693b      	ldr	r3, [r7, #16]
 8007656:	4413      	add	r3, r2
 8007658:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	683a      	ldr	r2, [r7, #0]
 8007660:	7812      	ldrb	r2, [r2, #0]
 8007662:	0151      	lsls	r1, r2, #5
 8007664:	693a      	ldr	r2, [r7, #16]
 8007666:	440a      	add	r2, r1
 8007668:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800766c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007670:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	3301      	adds	r3, #1
 8007676:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	f242 7210 	movw	r2, #10000	; 0x2710
 800767e:	4293      	cmp	r3, r2
 8007680:	d902      	bls.n	8007688 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8007682:	2301      	movs	r3, #1
 8007684:	75fb      	strb	r3, [r7, #23]
          break;
 8007686:	e056      	b.n	8007736 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8007688:	683b      	ldr	r3, [r7, #0]
 800768a:	781b      	ldrb	r3, [r3, #0]
 800768c:	015a      	lsls	r2, r3, #5
 800768e:	693b      	ldr	r3, [r7, #16]
 8007690:	4413      	add	r3, r2
 8007692:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800769c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80076a0:	d0e7      	beq.n	8007672 <USB_EPStopXfer+0x82>
 80076a2:	e048      	b.n	8007736 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80076a4:	683b      	ldr	r3, [r7, #0]
 80076a6:	781b      	ldrb	r3, [r3, #0]
 80076a8:	015a      	lsls	r2, r3, #5
 80076aa:	693b      	ldr	r3, [r7, #16]
 80076ac:	4413      	add	r3, r2
 80076ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80076b8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80076bc:	d13b      	bne.n	8007736 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80076be:	683b      	ldr	r3, [r7, #0]
 80076c0:	781b      	ldrb	r3, [r3, #0]
 80076c2:	015a      	lsls	r2, r3, #5
 80076c4:	693b      	ldr	r3, [r7, #16]
 80076c6:	4413      	add	r3, r2
 80076c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	683a      	ldr	r2, [r7, #0]
 80076d0:	7812      	ldrb	r2, [r2, #0]
 80076d2:	0151      	lsls	r1, r2, #5
 80076d4:	693a      	ldr	r2, [r7, #16]
 80076d6:	440a      	add	r2, r1
 80076d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80076dc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80076e0:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80076e2:	683b      	ldr	r3, [r7, #0]
 80076e4:	781b      	ldrb	r3, [r3, #0]
 80076e6:	015a      	lsls	r2, r3, #5
 80076e8:	693b      	ldr	r3, [r7, #16]
 80076ea:	4413      	add	r3, r2
 80076ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	683a      	ldr	r2, [r7, #0]
 80076f4:	7812      	ldrb	r2, [r2, #0]
 80076f6:	0151      	lsls	r1, r2, #5
 80076f8:	693a      	ldr	r2, [r7, #16]
 80076fa:	440a      	add	r2, r1
 80076fc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007700:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007704:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	3301      	adds	r3, #1
 800770a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	f242 7210 	movw	r2, #10000	; 0x2710
 8007712:	4293      	cmp	r3, r2
 8007714:	d902      	bls.n	800771c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8007716:	2301      	movs	r3, #1
 8007718:	75fb      	strb	r3, [r7, #23]
          break;
 800771a:	e00c      	b.n	8007736 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800771c:	683b      	ldr	r3, [r7, #0]
 800771e:	781b      	ldrb	r3, [r3, #0]
 8007720:	015a      	lsls	r2, r3, #5
 8007722:	693b      	ldr	r3, [r7, #16]
 8007724:	4413      	add	r3, r2
 8007726:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007730:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007734:	d0e7      	beq.n	8007706 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8007736:	7dfb      	ldrb	r3, [r7, #23]
}
 8007738:	4618      	mov	r0, r3
 800773a:	371c      	adds	r7, #28
 800773c:	46bd      	mov	sp, r7
 800773e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007742:	4770      	bx	lr

08007744 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007744:	b480      	push	{r7}
 8007746:	b089      	sub	sp, #36	; 0x24
 8007748:	af00      	add	r7, sp, #0
 800774a:	60f8      	str	r0, [r7, #12]
 800774c:	60b9      	str	r1, [r7, #8]
 800774e:	4611      	mov	r1, r2
 8007750:	461a      	mov	r2, r3
 8007752:	460b      	mov	r3, r1
 8007754:	71fb      	strb	r3, [r7, #7]
 8007756:	4613      	mov	r3, r2
 8007758:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800775e:	68bb      	ldr	r3, [r7, #8]
 8007760:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8007762:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007766:	2b00      	cmp	r3, #0
 8007768:	d123      	bne.n	80077b2 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800776a:	88bb      	ldrh	r3, [r7, #4]
 800776c:	3303      	adds	r3, #3
 800776e:	089b      	lsrs	r3, r3, #2
 8007770:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8007772:	2300      	movs	r3, #0
 8007774:	61bb      	str	r3, [r7, #24]
 8007776:	e018      	b.n	80077aa <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007778:	79fb      	ldrb	r3, [r7, #7]
 800777a:	031a      	lsls	r2, r3, #12
 800777c:	697b      	ldr	r3, [r7, #20]
 800777e:	4413      	add	r3, r2
 8007780:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007784:	461a      	mov	r2, r3
 8007786:	69fb      	ldr	r3, [r7, #28]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800778c:	69fb      	ldr	r3, [r7, #28]
 800778e:	3301      	adds	r3, #1
 8007790:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007792:	69fb      	ldr	r3, [r7, #28]
 8007794:	3301      	adds	r3, #1
 8007796:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007798:	69fb      	ldr	r3, [r7, #28]
 800779a:	3301      	adds	r3, #1
 800779c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800779e:	69fb      	ldr	r3, [r7, #28]
 80077a0:	3301      	adds	r3, #1
 80077a2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80077a4:	69bb      	ldr	r3, [r7, #24]
 80077a6:	3301      	adds	r3, #1
 80077a8:	61bb      	str	r3, [r7, #24]
 80077aa:	69ba      	ldr	r2, [r7, #24]
 80077ac:	693b      	ldr	r3, [r7, #16]
 80077ae:	429a      	cmp	r2, r3
 80077b0:	d3e2      	bcc.n	8007778 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80077b2:	2300      	movs	r3, #0
}
 80077b4:	4618      	mov	r0, r3
 80077b6:	3724      	adds	r7, #36	; 0x24
 80077b8:	46bd      	mov	sp, r7
 80077ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077be:	4770      	bx	lr

080077c0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80077c0:	b480      	push	{r7}
 80077c2:	b08b      	sub	sp, #44	; 0x2c
 80077c4:	af00      	add	r7, sp, #0
 80077c6:	60f8      	str	r0, [r7, #12]
 80077c8:	60b9      	str	r1, [r7, #8]
 80077ca:	4613      	mov	r3, r2
 80077cc:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80077d2:	68bb      	ldr	r3, [r7, #8]
 80077d4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80077d6:	88fb      	ldrh	r3, [r7, #6]
 80077d8:	089b      	lsrs	r3, r3, #2
 80077da:	b29b      	uxth	r3, r3
 80077dc:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80077de:	88fb      	ldrh	r3, [r7, #6]
 80077e0:	f003 0303 	and.w	r3, r3, #3
 80077e4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80077e6:	2300      	movs	r3, #0
 80077e8:	623b      	str	r3, [r7, #32]
 80077ea:	e014      	b.n	8007816 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80077ec:	69bb      	ldr	r3, [r7, #24]
 80077ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80077f2:	681a      	ldr	r2, [r3, #0]
 80077f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077f6:	601a      	str	r2, [r3, #0]
    pDest++;
 80077f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077fa:	3301      	adds	r3, #1
 80077fc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80077fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007800:	3301      	adds	r3, #1
 8007802:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007806:	3301      	adds	r3, #1
 8007808:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800780a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800780c:	3301      	adds	r3, #1
 800780e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8007810:	6a3b      	ldr	r3, [r7, #32]
 8007812:	3301      	adds	r3, #1
 8007814:	623b      	str	r3, [r7, #32]
 8007816:	6a3a      	ldr	r2, [r7, #32]
 8007818:	697b      	ldr	r3, [r7, #20]
 800781a:	429a      	cmp	r2, r3
 800781c:	d3e6      	bcc.n	80077ec <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800781e:	8bfb      	ldrh	r3, [r7, #30]
 8007820:	2b00      	cmp	r3, #0
 8007822:	d01e      	beq.n	8007862 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8007824:	2300      	movs	r3, #0
 8007826:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8007828:	69bb      	ldr	r3, [r7, #24]
 800782a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800782e:	461a      	mov	r2, r3
 8007830:	f107 0310 	add.w	r3, r7, #16
 8007834:	6812      	ldr	r2, [r2, #0]
 8007836:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8007838:	693a      	ldr	r2, [r7, #16]
 800783a:	6a3b      	ldr	r3, [r7, #32]
 800783c:	b2db      	uxtb	r3, r3
 800783e:	00db      	lsls	r3, r3, #3
 8007840:	fa22 f303 	lsr.w	r3, r2, r3
 8007844:	b2da      	uxtb	r2, r3
 8007846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007848:	701a      	strb	r2, [r3, #0]
      i++;
 800784a:	6a3b      	ldr	r3, [r7, #32]
 800784c:	3301      	adds	r3, #1
 800784e:	623b      	str	r3, [r7, #32]
      pDest++;
 8007850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007852:	3301      	adds	r3, #1
 8007854:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8007856:	8bfb      	ldrh	r3, [r7, #30]
 8007858:	3b01      	subs	r3, #1
 800785a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800785c:	8bfb      	ldrh	r3, [r7, #30]
 800785e:	2b00      	cmp	r3, #0
 8007860:	d1ea      	bne.n	8007838 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8007862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007864:	4618      	mov	r0, r3
 8007866:	372c      	adds	r7, #44	; 0x2c
 8007868:	46bd      	mov	sp, r7
 800786a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800786e:	4770      	bx	lr

08007870 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007870:	b480      	push	{r7}
 8007872:	b085      	sub	sp, #20
 8007874:	af00      	add	r7, sp, #0
 8007876:	6078      	str	r0, [r7, #4]
 8007878:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800787e:	683b      	ldr	r3, [r7, #0]
 8007880:	781b      	ldrb	r3, [r3, #0]
 8007882:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007884:	683b      	ldr	r3, [r7, #0]
 8007886:	785b      	ldrb	r3, [r3, #1]
 8007888:	2b01      	cmp	r3, #1
 800788a:	d12c      	bne.n	80078e6 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800788c:	68bb      	ldr	r3, [r7, #8]
 800788e:	015a      	lsls	r2, r3, #5
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	4413      	add	r3, r2
 8007894:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	2b00      	cmp	r3, #0
 800789c:	db12      	blt.n	80078c4 <USB_EPSetStall+0x54>
 800789e:	68bb      	ldr	r3, [r7, #8]
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d00f      	beq.n	80078c4 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80078a4:	68bb      	ldr	r3, [r7, #8]
 80078a6:	015a      	lsls	r2, r3, #5
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	4413      	add	r3, r2
 80078ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	68ba      	ldr	r2, [r7, #8]
 80078b4:	0151      	lsls	r1, r2, #5
 80078b6:	68fa      	ldr	r2, [r7, #12]
 80078b8:	440a      	add	r2, r1
 80078ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80078be:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80078c2:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80078c4:	68bb      	ldr	r3, [r7, #8]
 80078c6:	015a      	lsls	r2, r3, #5
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	4413      	add	r3, r2
 80078cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	68ba      	ldr	r2, [r7, #8]
 80078d4:	0151      	lsls	r1, r2, #5
 80078d6:	68fa      	ldr	r2, [r7, #12]
 80078d8:	440a      	add	r2, r1
 80078da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80078de:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80078e2:	6013      	str	r3, [r2, #0]
 80078e4:	e02b      	b.n	800793e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80078e6:	68bb      	ldr	r3, [r7, #8]
 80078e8:	015a      	lsls	r2, r3, #5
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	4413      	add	r3, r2
 80078ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	db12      	blt.n	800791e <USB_EPSetStall+0xae>
 80078f8:	68bb      	ldr	r3, [r7, #8]
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d00f      	beq.n	800791e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80078fe:	68bb      	ldr	r3, [r7, #8]
 8007900:	015a      	lsls	r2, r3, #5
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	4413      	add	r3, r2
 8007906:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	68ba      	ldr	r2, [r7, #8]
 800790e:	0151      	lsls	r1, r2, #5
 8007910:	68fa      	ldr	r2, [r7, #12]
 8007912:	440a      	add	r2, r1
 8007914:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007918:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800791c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800791e:	68bb      	ldr	r3, [r7, #8]
 8007920:	015a      	lsls	r2, r3, #5
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	4413      	add	r3, r2
 8007926:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	68ba      	ldr	r2, [r7, #8]
 800792e:	0151      	lsls	r1, r2, #5
 8007930:	68fa      	ldr	r2, [r7, #12]
 8007932:	440a      	add	r2, r1
 8007934:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007938:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800793c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800793e:	2300      	movs	r3, #0
}
 8007940:	4618      	mov	r0, r3
 8007942:	3714      	adds	r7, #20
 8007944:	46bd      	mov	sp, r7
 8007946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800794a:	4770      	bx	lr

0800794c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800794c:	b480      	push	{r7}
 800794e:	b085      	sub	sp, #20
 8007950:	af00      	add	r7, sp, #0
 8007952:	6078      	str	r0, [r7, #4]
 8007954:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800795a:	683b      	ldr	r3, [r7, #0]
 800795c:	781b      	ldrb	r3, [r3, #0]
 800795e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007960:	683b      	ldr	r3, [r7, #0]
 8007962:	785b      	ldrb	r3, [r3, #1]
 8007964:	2b01      	cmp	r3, #1
 8007966:	d128      	bne.n	80079ba <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007968:	68bb      	ldr	r3, [r7, #8]
 800796a:	015a      	lsls	r2, r3, #5
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	4413      	add	r3, r2
 8007970:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	68ba      	ldr	r2, [r7, #8]
 8007978:	0151      	lsls	r1, r2, #5
 800797a:	68fa      	ldr	r2, [r7, #12]
 800797c:	440a      	add	r2, r1
 800797e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007982:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007986:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007988:	683b      	ldr	r3, [r7, #0]
 800798a:	791b      	ldrb	r3, [r3, #4]
 800798c:	2b03      	cmp	r3, #3
 800798e:	d003      	beq.n	8007998 <USB_EPClearStall+0x4c>
 8007990:	683b      	ldr	r3, [r7, #0]
 8007992:	791b      	ldrb	r3, [r3, #4]
 8007994:	2b02      	cmp	r3, #2
 8007996:	d138      	bne.n	8007a0a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007998:	68bb      	ldr	r3, [r7, #8]
 800799a:	015a      	lsls	r2, r3, #5
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	4413      	add	r3, r2
 80079a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	68ba      	ldr	r2, [r7, #8]
 80079a8:	0151      	lsls	r1, r2, #5
 80079aa:	68fa      	ldr	r2, [r7, #12]
 80079ac:	440a      	add	r2, r1
 80079ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80079b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80079b6:	6013      	str	r3, [r2, #0]
 80079b8:	e027      	b.n	8007a0a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80079ba:	68bb      	ldr	r3, [r7, #8]
 80079bc:	015a      	lsls	r2, r3, #5
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	4413      	add	r3, r2
 80079c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	68ba      	ldr	r2, [r7, #8]
 80079ca:	0151      	lsls	r1, r2, #5
 80079cc:	68fa      	ldr	r2, [r7, #12]
 80079ce:	440a      	add	r2, r1
 80079d0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80079d4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80079d8:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80079da:	683b      	ldr	r3, [r7, #0]
 80079dc:	791b      	ldrb	r3, [r3, #4]
 80079de:	2b03      	cmp	r3, #3
 80079e0:	d003      	beq.n	80079ea <USB_EPClearStall+0x9e>
 80079e2:	683b      	ldr	r3, [r7, #0]
 80079e4:	791b      	ldrb	r3, [r3, #4]
 80079e6:	2b02      	cmp	r3, #2
 80079e8:	d10f      	bne.n	8007a0a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80079ea:	68bb      	ldr	r3, [r7, #8]
 80079ec:	015a      	lsls	r2, r3, #5
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	4413      	add	r3, r2
 80079f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	68ba      	ldr	r2, [r7, #8]
 80079fa:	0151      	lsls	r1, r2, #5
 80079fc:	68fa      	ldr	r2, [r7, #12]
 80079fe:	440a      	add	r2, r1
 8007a00:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007a04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007a08:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8007a0a:	2300      	movs	r3, #0
}
 8007a0c:	4618      	mov	r0, r3
 8007a0e:	3714      	adds	r7, #20
 8007a10:	46bd      	mov	sp, r7
 8007a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a16:	4770      	bx	lr

08007a18 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8007a18:	b480      	push	{r7}
 8007a1a:	b085      	sub	sp, #20
 8007a1c:	af00      	add	r7, sp, #0
 8007a1e:	6078      	str	r0, [r7, #4]
 8007a20:	460b      	mov	r3, r1
 8007a22:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	68fa      	ldr	r2, [r7, #12]
 8007a32:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007a36:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8007a3a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a42:	681a      	ldr	r2, [r3, #0]
 8007a44:	78fb      	ldrb	r3, [r7, #3]
 8007a46:	011b      	lsls	r3, r3, #4
 8007a48:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8007a4c:	68f9      	ldr	r1, [r7, #12]
 8007a4e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007a52:	4313      	orrs	r3, r2
 8007a54:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8007a56:	2300      	movs	r3, #0
}
 8007a58:	4618      	mov	r0, r3
 8007a5a:	3714      	adds	r7, #20
 8007a5c:	46bd      	mov	sp, r7
 8007a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a62:	4770      	bx	lr

08007a64 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007a64:	b480      	push	{r7}
 8007a66:	b085      	sub	sp, #20
 8007a68:	af00      	add	r7, sp, #0
 8007a6a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	68fa      	ldr	r2, [r7, #12]
 8007a7a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007a7e:	f023 0303 	bic.w	r3, r3, #3
 8007a82:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a8a:	685b      	ldr	r3, [r3, #4]
 8007a8c:	68fa      	ldr	r2, [r7, #12]
 8007a8e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007a92:	f023 0302 	bic.w	r3, r3, #2
 8007a96:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007a98:	2300      	movs	r3, #0
}
 8007a9a:	4618      	mov	r0, r3
 8007a9c:	3714      	adds	r7, #20
 8007a9e:	46bd      	mov	sp, r7
 8007aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa4:	4770      	bx	lr

08007aa6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007aa6:	b480      	push	{r7}
 8007aa8:	b085      	sub	sp, #20
 8007aaa:	af00      	add	r7, sp, #0
 8007aac:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	68fa      	ldr	r2, [r7, #12]
 8007abc:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007ac0:	f023 0303 	bic.w	r3, r3, #3
 8007ac4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007acc:	685b      	ldr	r3, [r3, #4]
 8007ace:	68fa      	ldr	r2, [r7, #12]
 8007ad0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007ad4:	f043 0302 	orr.w	r3, r3, #2
 8007ad8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007ada:	2300      	movs	r3, #0
}
 8007adc:	4618      	mov	r0, r3
 8007ade:	3714      	adds	r7, #20
 8007ae0:	46bd      	mov	sp, r7
 8007ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae6:	4770      	bx	lr

08007ae8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8007ae8:	b480      	push	{r7}
 8007aea:	b085      	sub	sp, #20
 8007aec:	af00      	add	r7, sp, #0
 8007aee:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	695b      	ldr	r3, [r3, #20]
 8007af4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	699b      	ldr	r3, [r3, #24]
 8007afa:	68fa      	ldr	r2, [r7, #12]
 8007afc:	4013      	ands	r3, r2
 8007afe:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007b00:	68fb      	ldr	r3, [r7, #12]
}
 8007b02:	4618      	mov	r0, r3
 8007b04:	3714      	adds	r7, #20
 8007b06:	46bd      	mov	sp, r7
 8007b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b0c:	4770      	bx	lr

08007b0e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007b0e:	b480      	push	{r7}
 8007b10:	b085      	sub	sp, #20
 8007b12:	af00      	add	r7, sp, #0
 8007b14:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b20:	699b      	ldr	r3, [r3, #24]
 8007b22:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b2a:	69db      	ldr	r3, [r3, #28]
 8007b2c:	68ba      	ldr	r2, [r7, #8]
 8007b2e:	4013      	ands	r3, r2
 8007b30:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8007b32:	68bb      	ldr	r3, [r7, #8]
 8007b34:	0c1b      	lsrs	r3, r3, #16
}
 8007b36:	4618      	mov	r0, r3
 8007b38:	3714      	adds	r7, #20
 8007b3a:	46bd      	mov	sp, r7
 8007b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b40:	4770      	bx	lr

08007b42 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007b42:	b480      	push	{r7}
 8007b44:	b085      	sub	sp, #20
 8007b46:	af00      	add	r7, sp, #0
 8007b48:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b54:	699b      	ldr	r3, [r3, #24]
 8007b56:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b5e:	69db      	ldr	r3, [r3, #28]
 8007b60:	68ba      	ldr	r2, [r7, #8]
 8007b62:	4013      	ands	r3, r2
 8007b64:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8007b66:	68bb      	ldr	r3, [r7, #8]
 8007b68:	b29b      	uxth	r3, r3
}
 8007b6a:	4618      	mov	r0, r3
 8007b6c:	3714      	adds	r7, #20
 8007b6e:	46bd      	mov	sp, r7
 8007b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b74:	4770      	bx	lr

08007b76 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007b76:	b480      	push	{r7}
 8007b78:	b085      	sub	sp, #20
 8007b7a:	af00      	add	r7, sp, #0
 8007b7c:	6078      	str	r0, [r7, #4]
 8007b7e:	460b      	mov	r3, r1
 8007b80:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8007b86:	78fb      	ldrb	r3, [r7, #3]
 8007b88:	015a      	lsls	r2, r3, #5
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	4413      	add	r3, r2
 8007b8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b92:	689b      	ldr	r3, [r3, #8]
 8007b94:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b9c:	695b      	ldr	r3, [r3, #20]
 8007b9e:	68ba      	ldr	r2, [r7, #8]
 8007ba0:	4013      	ands	r3, r2
 8007ba2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007ba4:	68bb      	ldr	r3, [r7, #8]
}
 8007ba6:	4618      	mov	r0, r3
 8007ba8:	3714      	adds	r7, #20
 8007baa:	46bd      	mov	sp, r7
 8007bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb0:	4770      	bx	lr

08007bb2 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007bb2:	b480      	push	{r7}
 8007bb4:	b087      	sub	sp, #28
 8007bb6:	af00      	add	r7, sp, #0
 8007bb8:	6078      	str	r0, [r7, #4]
 8007bba:	460b      	mov	r3, r1
 8007bbc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8007bc2:	697b      	ldr	r3, [r7, #20]
 8007bc4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007bc8:	691b      	ldr	r3, [r3, #16]
 8007bca:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8007bcc:	697b      	ldr	r3, [r7, #20]
 8007bce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007bd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007bd4:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8007bd6:	78fb      	ldrb	r3, [r7, #3]
 8007bd8:	f003 030f 	and.w	r3, r3, #15
 8007bdc:	68fa      	ldr	r2, [r7, #12]
 8007bde:	fa22 f303 	lsr.w	r3, r2, r3
 8007be2:	01db      	lsls	r3, r3, #7
 8007be4:	b2db      	uxtb	r3, r3
 8007be6:	693a      	ldr	r2, [r7, #16]
 8007be8:	4313      	orrs	r3, r2
 8007bea:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8007bec:	78fb      	ldrb	r3, [r7, #3]
 8007bee:	015a      	lsls	r2, r3, #5
 8007bf0:	697b      	ldr	r3, [r7, #20]
 8007bf2:	4413      	add	r3, r2
 8007bf4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007bf8:	689b      	ldr	r3, [r3, #8]
 8007bfa:	693a      	ldr	r2, [r7, #16]
 8007bfc:	4013      	ands	r3, r2
 8007bfe:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007c00:	68bb      	ldr	r3, [r7, #8]
}
 8007c02:	4618      	mov	r0, r3
 8007c04:	371c      	adds	r7, #28
 8007c06:	46bd      	mov	sp, r7
 8007c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c0c:	4770      	bx	lr

08007c0e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007c0e:	b480      	push	{r7}
 8007c10:	b083      	sub	sp, #12
 8007c12:	af00      	add	r7, sp, #0
 8007c14:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	695b      	ldr	r3, [r3, #20]
 8007c1a:	f003 0301 	and.w	r3, r3, #1
}
 8007c1e:	4618      	mov	r0, r3
 8007c20:	370c      	adds	r7, #12
 8007c22:	46bd      	mov	sp, r7
 8007c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c28:	4770      	bx	lr

08007c2a <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8007c2a:	b480      	push	{r7}
 8007c2c:	b085      	sub	sp, #20
 8007c2e:	af00      	add	r7, sp, #0
 8007c30:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	68fa      	ldr	r2, [r7, #12]
 8007c40:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007c44:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8007c48:	f023 0307 	bic.w	r3, r3, #7
 8007c4c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c54:	685b      	ldr	r3, [r3, #4]
 8007c56:	68fa      	ldr	r2, [r7, #12]
 8007c58:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007c5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007c60:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007c62:	2300      	movs	r3, #0
}
 8007c64:	4618      	mov	r0, r3
 8007c66:	3714      	adds	r7, #20
 8007c68:	46bd      	mov	sp, r7
 8007c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c6e:	4770      	bx	lr

08007c70 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8007c70:	b480      	push	{r7}
 8007c72:	b087      	sub	sp, #28
 8007c74:	af00      	add	r7, sp, #0
 8007c76:	60f8      	str	r0, [r7, #12]
 8007c78:	460b      	mov	r3, r1
 8007c7a:	607a      	str	r2, [r7, #4]
 8007c7c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	333c      	adds	r3, #60	; 0x3c
 8007c86:	3304      	adds	r3, #4
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8007c8c:	693b      	ldr	r3, [r7, #16]
 8007c8e:	4a26      	ldr	r2, [pc, #152]	; (8007d28 <USB_EP0_OutStart+0xb8>)
 8007c90:	4293      	cmp	r3, r2
 8007c92:	d90a      	bls.n	8007caa <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007c94:	697b      	ldr	r3, [r7, #20]
 8007c96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007ca0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007ca4:	d101      	bne.n	8007caa <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8007ca6:	2300      	movs	r3, #0
 8007ca8:	e037      	b.n	8007d1a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8007caa:	697b      	ldr	r3, [r7, #20]
 8007cac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007cb0:	461a      	mov	r2, r3
 8007cb2:	2300      	movs	r3, #0
 8007cb4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007cb6:	697b      	ldr	r3, [r7, #20]
 8007cb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007cbc:	691b      	ldr	r3, [r3, #16]
 8007cbe:	697a      	ldr	r2, [r7, #20]
 8007cc0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007cc4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007cc8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8007cca:	697b      	ldr	r3, [r7, #20]
 8007ccc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007cd0:	691b      	ldr	r3, [r3, #16]
 8007cd2:	697a      	ldr	r2, [r7, #20]
 8007cd4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007cd8:	f043 0318 	orr.w	r3, r3, #24
 8007cdc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8007cde:	697b      	ldr	r3, [r7, #20]
 8007ce0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ce4:	691b      	ldr	r3, [r3, #16]
 8007ce6:	697a      	ldr	r2, [r7, #20]
 8007ce8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007cec:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8007cf0:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8007cf2:	7afb      	ldrb	r3, [r7, #11]
 8007cf4:	2b01      	cmp	r3, #1
 8007cf6:	d10f      	bne.n	8007d18 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8007cf8:	697b      	ldr	r3, [r7, #20]
 8007cfa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007cfe:	461a      	mov	r2, r3
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8007d04:	697b      	ldr	r3, [r7, #20]
 8007d06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	697a      	ldr	r2, [r7, #20]
 8007d0e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007d12:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8007d16:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007d18:	2300      	movs	r3, #0
}
 8007d1a:	4618      	mov	r0, r3
 8007d1c:	371c      	adds	r7, #28
 8007d1e:	46bd      	mov	sp, r7
 8007d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d24:	4770      	bx	lr
 8007d26:	bf00      	nop
 8007d28:	4f54300a 	.word	0x4f54300a

08007d2c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007d2c:	b480      	push	{r7}
 8007d2e:	b085      	sub	sp, #20
 8007d30:	af00      	add	r7, sp, #0
 8007d32:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007d34:	2300      	movs	r3, #0
 8007d36:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	3301      	adds	r3, #1
 8007d3c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	4a13      	ldr	r2, [pc, #76]	; (8007d90 <USB_CoreReset+0x64>)
 8007d42:	4293      	cmp	r3, r2
 8007d44:	d901      	bls.n	8007d4a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007d46:	2303      	movs	r3, #3
 8007d48:	e01b      	b.n	8007d82 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	691b      	ldr	r3, [r3, #16]
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	daf2      	bge.n	8007d38 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007d52:	2300      	movs	r3, #0
 8007d54:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	691b      	ldr	r3, [r3, #16]
 8007d5a:	f043 0201 	orr.w	r2, r3, #1
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	3301      	adds	r3, #1
 8007d66:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	4a09      	ldr	r2, [pc, #36]	; (8007d90 <USB_CoreReset+0x64>)
 8007d6c:	4293      	cmp	r3, r2
 8007d6e:	d901      	bls.n	8007d74 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007d70:	2303      	movs	r3, #3
 8007d72:	e006      	b.n	8007d82 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	691b      	ldr	r3, [r3, #16]
 8007d78:	f003 0301 	and.w	r3, r3, #1
 8007d7c:	2b01      	cmp	r3, #1
 8007d7e:	d0f0      	beq.n	8007d62 <USB_CoreReset+0x36>

  return HAL_OK;
 8007d80:	2300      	movs	r3, #0
}
 8007d82:	4618      	mov	r0, r3
 8007d84:	3714      	adds	r7, #20
 8007d86:	46bd      	mov	sp, r7
 8007d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d8c:	4770      	bx	lr
 8007d8e:	bf00      	nop
 8007d90:	00030d40 	.word	0x00030d40

08007d94 <USBD_CUSTOM_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007d94:	b580      	push	{r7, lr}
 8007d96:	b084      	sub	sp, #16
 8007d98:	af00      	add	r7, sp, #0
 8007d9a:	6078      	str	r0, [r7, #4]
 8007d9c:	460b      	mov	r3, r1
 8007d9e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)USBD_malloc(sizeof(USBD_CUSTOM_HID_HandleTypeDef));
 8007da0:	2018      	movs	r0, #24
 8007da2:	f002 faed 	bl	800a380 <USBD_static_malloc>
 8007da6:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d109      	bne.n	8007dc2 <USBD_CUSTOM_HID_Init+0x2e>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	32b0      	adds	r2, #176	; 0xb0
 8007db8:	2100      	movs	r1, #0
 8007dba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8007dbe:	2302      	movs	r3, #2
 8007dc0:	e08a      	b.n	8007ed8 <USBD_CUSTOM_HID_Init+0x144>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hhid;
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	32b0      	adds	r2, #176	; 0xb0
 8007dcc:	68f9      	ldr	r1, [r7, #12]
 8007dce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	32b0      	adds	r2, #176	; 0xb0
 8007ddc:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  /* Get the Endpoints addresses allocated for this class instance */
  CUSTOMHIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
  CUSTOMHIDOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	7c1b      	ldrb	r3, [r3, #16]
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d11b      	bne.n	8007e26 <USBD_CUSTOM_HID_Init+0x92>
  {
    pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 8007dee:	4b3c      	ldr	r3, [pc, #240]	; (8007ee0 <USBD_CUSTOM_HID_Init+0x14c>)
 8007df0:	781b      	ldrb	r3, [r3, #0]
 8007df2:	f003 020f 	and.w	r2, r3, #15
 8007df6:	6879      	ldr	r1, [r7, #4]
 8007df8:	4613      	mov	r3, r2
 8007dfa:	009b      	lsls	r3, r3, #2
 8007dfc:	4413      	add	r3, r2
 8007dfe:	009b      	lsls	r3, r3, #2
 8007e00:	440b      	add	r3, r1
 8007e02:	3326      	adds	r3, #38	; 0x26
 8007e04:	2207      	movs	r2, #7
 8007e06:	801a      	strh	r2, [r3, #0]
    pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 8007e08:	4b36      	ldr	r3, [pc, #216]	; (8007ee4 <USBD_CUSTOM_HID_Init+0x150>)
 8007e0a:	781b      	ldrb	r3, [r3, #0]
 8007e0c:	f003 020f 	and.w	r2, r3, #15
 8007e10:	6879      	ldr	r1, [r7, #4]
 8007e12:	4613      	mov	r3, r2
 8007e14:	009b      	lsls	r3, r3, #2
 8007e16:	4413      	add	r3, r2
 8007e18:	009b      	lsls	r3, r3, #2
 8007e1a:	440b      	add	r3, r1
 8007e1c:	f503 73b3 	add.w	r3, r3, #358	; 0x166
 8007e20:	2207      	movs	r2, #7
 8007e22:	801a      	strh	r2, [r3, #0]
 8007e24:	e01a      	b.n	8007e5c <USBD_CUSTOM_HID_Init+0xc8>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 8007e26:	4b2e      	ldr	r3, [pc, #184]	; (8007ee0 <USBD_CUSTOM_HID_Init+0x14c>)
 8007e28:	781b      	ldrb	r3, [r3, #0]
 8007e2a:	f003 020f 	and.w	r2, r3, #15
 8007e2e:	6879      	ldr	r1, [r7, #4]
 8007e30:	4613      	mov	r3, r2
 8007e32:	009b      	lsls	r3, r3, #2
 8007e34:	4413      	add	r3, r2
 8007e36:	009b      	lsls	r3, r3, #2
 8007e38:	440b      	add	r3, r1
 8007e3a:	3326      	adds	r3, #38	; 0x26
 8007e3c:	2205      	movs	r2, #5
 8007e3e:	801a      	strh	r2, [r3, #0]
    pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 8007e40:	4b28      	ldr	r3, [pc, #160]	; (8007ee4 <USBD_CUSTOM_HID_Init+0x150>)
 8007e42:	781b      	ldrb	r3, [r3, #0]
 8007e44:	f003 020f 	and.w	r2, r3, #15
 8007e48:	6879      	ldr	r1, [r7, #4]
 8007e4a:	4613      	mov	r3, r2
 8007e4c:	009b      	lsls	r3, r3, #2
 8007e4e:	4413      	add	r3, r2
 8007e50:	009b      	lsls	r3, r3, #2
 8007e52:	440b      	add	r3, r1
 8007e54:	f503 73b3 	add.w	r3, r3, #358	; 0x166
 8007e58:	2205      	movs	r2, #5
 8007e5a:	801a      	strh	r2, [r3, #0]
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, CUSTOMHIDInEpAdd, USBD_EP_TYPE_INTR,
 8007e5c:	4b20      	ldr	r3, [pc, #128]	; (8007ee0 <USBD_CUSTOM_HID_Init+0x14c>)
 8007e5e:	7819      	ldrb	r1, [r3, #0]
 8007e60:	2304      	movs	r3, #4
 8007e62:	2203      	movs	r2, #3
 8007e64:	6878      	ldr	r0, [r7, #4]
 8007e66:	f002 f97a 	bl	800a15e <USBD_LL_OpenEP>
                       CUSTOM_HID_EPIN_SIZE);

  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].is_used = 1U;
 8007e6a:	4b1d      	ldr	r3, [pc, #116]	; (8007ee0 <USBD_CUSTOM_HID_Init+0x14c>)
 8007e6c:	781b      	ldrb	r3, [r3, #0]
 8007e6e:	f003 020f 	and.w	r2, r3, #15
 8007e72:	6879      	ldr	r1, [r7, #4]
 8007e74:	4613      	mov	r3, r2
 8007e76:	009b      	lsls	r3, r3, #2
 8007e78:	4413      	add	r3, r2
 8007e7a:	009b      	lsls	r3, r3, #2
 8007e7c:	440b      	add	r3, r1
 8007e7e:	3324      	adds	r3, #36	; 0x24
 8007e80:	2201      	movs	r2, #1
 8007e82:	801a      	strh	r2, [r3, #0]

  /* Open EP OUT */
  (void)USBD_LL_OpenEP(pdev, CUSTOMHIDOutEpAdd, USBD_EP_TYPE_INTR,
 8007e84:	4b17      	ldr	r3, [pc, #92]	; (8007ee4 <USBD_CUSTOM_HID_Init+0x150>)
 8007e86:	7819      	ldrb	r1, [r3, #0]
 8007e88:	2302      	movs	r3, #2
 8007e8a:	2203      	movs	r2, #3
 8007e8c:	6878      	ldr	r0, [r7, #4]
 8007e8e:	f002 f966 	bl	800a15e <USBD_LL_OpenEP>
                       CUSTOM_HID_EPOUT_SIZE);

  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].is_used = 1U;
 8007e92:	4b14      	ldr	r3, [pc, #80]	; (8007ee4 <USBD_CUSTOM_HID_Init+0x150>)
 8007e94:	781b      	ldrb	r3, [r3, #0]
 8007e96:	f003 020f 	and.w	r2, r3, #15
 8007e9a:	6879      	ldr	r1, [r7, #4]
 8007e9c:	4613      	mov	r3, r2
 8007e9e:	009b      	lsls	r3, r3, #2
 8007ea0:	4413      	add	r3, r2
 8007ea2:	009b      	lsls	r3, r3, #2
 8007ea4:	440b      	add	r3, r1
 8007ea6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007eaa:	2201      	movs	r2, #1
 8007eac:	801a      	strh	r2, [r3, #0]

  hhid->state = CUSTOM_HID_IDLE;
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	2200      	movs	r2, #0
 8007eb2:	751a      	strb	r2, [r3, #20]

  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007eba:	687a      	ldr	r2, [r7, #4]
 8007ebc:	33b0      	adds	r3, #176	; 0xb0
 8007ebe:	009b      	lsls	r3, r3, #2
 8007ec0:	4413      	add	r3, r2
 8007ec2:	685b      	ldr	r3, [r3, #4]
 8007ec4:	685b      	ldr	r3, [r3, #4]
 8007ec6:	4798      	blx	r3

  /* Prepare Out endpoint to receive 1st packet */
  (void)USBD_LL_PrepareReceive(pdev, CUSTOMHIDOutEpAdd, hhid->Report_buf,
 8007ec8:	4b06      	ldr	r3, [pc, #24]	; (8007ee4 <USBD_CUSTOM_HID_Init+0x150>)
 8007eca:	7819      	ldrb	r1, [r3, #0]
 8007ecc:	68fa      	ldr	r2, [r7, #12]
 8007ece:	2302      	movs	r3, #2
 8007ed0:	6878      	ldr	r0, [r7, #4]
 8007ed2:	f002 fa33 	bl	800a33c <USBD_LL_PrepareReceive>
                               USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);

  return (uint8_t)USBD_OK;
 8007ed6:	2300      	movs	r3, #0
}
 8007ed8:	4618      	mov	r0, r3
 8007eda:	3710      	adds	r7, #16
 8007edc:	46bd      	mov	sp, r7
 8007ede:	bd80      	pop	{r7, pc}
 8007ee0:	200001a2 	.word	0x200001a2
 8007ee4:	200001a3 	.word	0x200001a3

08007ee8 <USBD_CUSTOM_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007ee8:	b580      	push	{r7, lr}
 8007eea:	b082      	sub	sp, #8
 8007eec:	af00      	add	r7, sp, #0
 8007eee:	6078      	str	r0, [r7, #4]
 8007ef0:	460b      	mov	r3, r1
 8007ef2:	70fb      	strb	r3, [r7, #3]
  CUSTOMHIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
  CUSTOMHIDOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close CUSTOM_HID EP IN */
  (void)USBD_LL_CloseEP(pdev, CUSTOMHIDInEpAdd);
 8007ef4:	4b37      	ldr	r3, [pc, #220]	; (8007fd4 <USBD_CUSTOM_HID_DeInit+0xec>)
 8007ef6:	781b      	ldrb	r3, [r3, #0]
 8007ef8:	4619      	mov	r1, r3
 8007efa:	6878      	ldr	r0, [r7, #4]
 8007efc:	f002 f955 	bl	800a1aa <USBD_LL_CloseEP>
  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].is_used = 0U;
 8007f00:	4b34      	ldr	r3, [pc, #208]	; (8007fd4 <USBD_CUSTOM_HID_DeInit+0xec>)
 8007f02:	781b      	ldrb	r3, [r3, #0]
 8007f04:	f003 020f 	and.w	r2, r3, #15
 8007f08:	6879      	ldr	r1, [r7, #4]
 8007f0a:	4613      	mov	r3, r2
 8007f0c:	009b      	lsls	r3, r3, #2
 8007f0e:	4413      	add	r3, r2
 8007f10:	009b      	lsls	r3, r3, #2
 8007f12:	440b      	add	r3, r1
 8007f14:	3324      	adds	r3, #36	; 0x24
 8007f16:	2200      	movs	r2, #0
 8007f18:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = 0U;
 8007f1a:	4b2e      	ldr	r3, [pc, #184]	; (8007fd4 <USBD_CUSTOM_HID_DeInit+0xec>)
 8007f1c:	781b      	ldrb	r3, [r3, #0]
 8007f1e:	f003 020f 	and.w	r2, r3, #15
 8007f22:	6879      	ldr	r1, [r7, #4]
 8007f24:	4613      	mov	r3, r2
 8007f26:	009b      	lsls	r3, r3, #2
 8007f28:	4413      	add	r3, r2
 8007f2a:	009b      	lsls	r3, r3, #2
 8007f2c:	440b      	add	r3, r1
 8007f2e:	3326      	adds	r3, #38	; 0x26
 8007f30:	2200      	movs	r2, #0
 8007f32:	801a      	strh	r2, [r3, #0]

  /* Close CUSTOM_HID EP OUT */
  (void)USBD_LL_CloseEP(pdev, CUSTOMHIDOutEpAdd);
 8007f34:	4b28      	ldr	r3, [pc, #160]	; (8007fd8 <USBD_CUSTOM_HID_DeInit+0xf0>)
 8007f36:	781b      	ldrb	r3, [r3, #0]
 8007f38:	4619      	mov	r1, r3
 8007f3a:	6878      	ldr	r0, [r7, #4]
 8007f3c:	f002 f935 	bl	800a1aa <USBD_LL_CloseEP>
  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].is_used = 0U;
 8007f40:	4b25      	ldr	r3, [pc, #148]	; (8007fd8 <USBD_CUSTOM_HID_DeInit+0xf0>)
 8007f42:	781b      	ldrb	r3, [r3, #0]
 8007f44:	f003 020f 	and.w	r2, r3, #15
 8007f48:	6879      	ldr	r1, [r7, #4]
 8007f4a:	4613      	mov	r3, r2
 8007f4c:	009b      	lsls	r3, r3, #2
 8007f4e:	4413      	add	r3, r2
 8007f50:	009b      	lsls	r3, r3, #2
 8007f52:	440b      	add	r3, r1
 8007f54:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007f58:	2200      	movs	r2, #0
 8007f5a:	801a      	strh	r2, [r3, #0]
  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = 0U;
 8007f5c:	4b1e      	ldr	r3, [pc, #120]	; (8007fd8 <USBD_CUSTOM_HID_DeInit+0xf0>)
 8007f5e:	781b      	ldrb	r3, [r3, #0]
 8007f60:	f003 020f 	and.w	r2, r3, #15
 8007f64:	6879      	ldr	r1, [r7, #4]
 8007f66:	4613      	mov	r3, r2
 8007f68:	009b      	lsls	r3, r3, #2
 8007f6a:	4413      	add	r3, r2
 8007f6c:	009b      	lsls	r3, r3, #2
 8007f6e:	440b      	add	r3, r1
 8007f70:	f503 73b3 	add.w	r3, r3, #358	; 0x166
 8007f74:	2200      	movs	r2, #0
 8007f76:	801a      	strh	r2, [r3, #0]

  /* Free allocated memory */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	32b0      	adds	r2, #176	; 0xb0
 8007f82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d01f      	beq.n	8007fca <USBD_CUSTOM_HID_DeInit+0xe2>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007f90:	687a      	ldr	r2, [r7, #4]
 8007f92:	33b0      	adds	r3, #176	; 0xb0
 8007f94:	009b      	lsls	r3, r3, #2
 8007f96:	4413      	add	r3, r2
 8007f98:	685b      	ldr	r3, [r3, #4]
 8007f9a:	689b      	ldr	r3, [r3, #8]
 8007f9c:	4798      	blx	r3
    USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	32b0      	adds	r2, #176	; 0xb0
 8007fa8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007fac:	4618      	mov	r0, r3
 8007fae:	f002 f9f5 	bl	800a39c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	32b0      	adds	r2, #176	; 0xb0
 8007fbc:	2100      	movs	r1, #0
 8007fbe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	2200      	movs	r2, #0
 8007fc6:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8007fca:	2300      	movs	r3, #0
}
 8007fcc:	4618      	mov	r0, r3
 8007fce:	3708      	adds	r7, #8
 8007fd0:	46bd      	mov	sp, r7
 8007fd2:	bd80      	pop	{r7, pc}
 8007fd4:	200001a2 	.word	0x200001a2
 8007fd8:	200001a3 	.word	0x200001a3

08007fdc <USBD_CUSTOM_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Setup(USBD_HandleTypeDef *pdev,
                                     USBD_SetupReqTypedef *req)
{
 8007fdc:	b580      	push	{r7, lr}
 8007fde:	b088      	sub	sp, #32
 8007fe0:	af00      	add	r7, sp, #0
 8007fe2:	6078      	str	r0, [r7, #4]
 8007fe4:	6039      	str	r1, [r7, #0]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	32b0      	adds	r2, #176	; 0xb0
 8007ff0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ff4:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 8007ff6:	2300      	movs	r3, #0
 8007ff8:	83fb      	strh	r3, [r7, #30]
  uint8_t  *pbuf = NULL;
 8007ffa:	2300      	movs	r3, #0
 8007ffc:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 8007ffe:	2300      	movs	r3, #0
 8008000:	81fb      	strh	r3, [r7, #14]
  USBD_StatusTypeDef ret = USBD_OK;
 8008002:	2300      	movs	r3, #0
 8008004:	75fb      	strb	r3, [r7, #23]

  if (hhid == NULL)
 8008006:	693b      	ldr	r3, [r7, #16]
 8008008:	2b00      	cmp	r3, #0
 800800a:	d101      	bne.n	8008010 <USBD_CUSTOM_HID_Setup+0x34>
  {
    return (uint8_t)USBD_FAIL;
 800800c:	2303      	movs	r3, #3
 800800e:	e0ee      	b.n	80081ee <USBD_CUSTOM_HID_Setup+0x212>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008010:	683b      	ldr	r3, [r7, #0]
 8008012:	781b      	ldrb	r3, [r3, #0]
 8008014:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008018:	2b00      	cmp	r3, #0
 800801a:	d056      	beq.n	80080ca <USBD_CUSTOM_HID_Setup+0xee>
 800801c:	2b20      	cmp	r3, #32
 800801e:	f040 80de 	bne.w	80081de <USBD_CUSTOM_HID_Setup+0x202>
  {
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 8008022:	683b      	ldr	r3, [r7, #0]
 8008024:	785b      	ldrb	r3, [r3, #1]
 8008026:	3b02      	subs	r3, #2
 8008028:	2b09      	cmp	r3, #9
 800802a:	d846      	bhi.n	80080ba <USBD_CUSTOM_HID_Setup+0xde>
 800802c:	a201      	add	r2, pc, #4	; (adr r2, 8008034 <USBD_CUSTOM_HID_Setup+0x58>)
 800802e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008032:	bf00      	nop
 8008034:	0800808d 	.word	0x0800808d
 8008038:	0800806b 	.word	0x0800806b
 800803c:	080080bb 	.word	0x080080bb
 8008040:	080080bb 	.word	0x080080bb
 8008044:	080080bb 	.word	0x080080bb
 8008048:	080080bb 	.word	0x080080bb
 800804c:	080080bb 	.word	0x080080bb
 8008050:	0800809d 	.word	0x0800809d
 8008054:	0800807b 	.word	0x0800807b
 8008058:	0800805d 	.word	0x0800805d
      {
        case CUSTOM_HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 800805c:	683b      	ldr	r3, [r7, #0]
 800805e:	885b      	ldrh	r3, [r3, #2]
 8008060:	b2db      	uxtb	r3, r3
 8008062:	461a      	mov	r2, r3
 8008064:	693b      	ldr	r3, [r7, #16]
 8008066:	605a      	str	r2, [r3, #4]
          break;
 8008068:	e02e      	b.n	80080c8 <USBD_CUSTOM_HID_Setup+0xec>

        case CUSTOM_HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 800806a:	693b      	ldr	r3, [r7, #16]
 800806c:	3304      	adds	r3, #4
 800806e:	2201      	movs	r2, #1
 8008070:	4619      	mov	r1, r3
 8008072:	6878      	ldr	r0, [r7, #4]
 8008074:	f001 fcc4 	bl	8009a00 <USBD_CtlSendData>
          break;
 8008078:	e026      	b.n	80080c8 <USBD_CUSTOM_HID_Setup+0xec>

        case CUSTOM_HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 800807a:	683b      	ldr	r3, [r7, #0]
 800807c:	885b      	ldrh	r3, [r3, #2]
 800807e:	0a1b      	lsrs	r3, r3, #8
 8008080:	b29b      	uxth	r3, r3
 8008082:	b2db      	uxtb	r3, r3
 8008084:	461a      	mov	r2, r3
 8008086:	693b      	ldr	r3, [r7, #16]
 8008088:	609a      	str	r2, [r3, #8]
          break;
 800808a:	e01d      	b.n	80080c8 <USBD_CUSTOM_HID_Setup+0xec>

        case CUSTOM_HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 800808c:	693b      	ldr	r3, [r7, #16]
 800808e:	3308      	adds	r3, #8
 8008090:	2201      	movs	r2, #1
 8008092:	4619      	mov	r1, r3
 8008094:	6878      	ldr	r0, [r7, #4]
 8008096:	f001 fcb3 	bl	8009a00 <USBD_CtlSendData>
          break;
 800809a:	e015      	b.n	80080c8 <USBD_CUSTOM_HID_Setup+0xec>

        case CUSTOM_HID_REQ_SET_REPORT:
          hhid->IsReportAvailable = 1U;
 800809c:	693b      	ldr	r3, [r7, #16]
 800809e:	2201      	movs	r2, #1
 80080a0:	611a      	str	r2, [r3, #16]
          (void)USBD_CtlPrepareRx(pdev, hhid->Report_buf,
 80080a2:	6939      	ldr	r1, [r7, #16]
                                  MIN(req->wLength, USBD_CUSTOMHID_OUTREPORT_BUF_SIZE));
 80080a4:	683b      	ldr	r3, [r7, #0]
 80080a6:	88db      	ldrh	r3, [r3, #6]
 80080a8:	2b02      	cmp	r3, #2
 80080aa:	bf28      	it	cs
 80080ac:	2302      	movcs	r3, #2
 80080ae:	b29b      	uxth	r3, r3
          (void)USBD_CtlPrepareRx(pdev, hhid->Report_buf,
 80080b0:	461a      	mov	r2, r3
 80080b2:	6878      	ldr	r0, [r7, #4]
 80080b4:	f001 fcd0 	bl	8009a58 <USBD_CtlPrepareRx>
          break;
 80080b8:	e006      	b.n	80080c8 <USBD_CUSTOM_HID_Setup+0xec>

        default:
          USBD_CtlError(pdev, req);
 80080ba:	6839      	ldr	r1, [r7, #0]
 80080bc:	6878      	ldr	r0, [r7, #4]
 80080be:	f001 fc2e 	bl	800991e <USBD_CtlError>
          ret = USBD_FAIL;
 80080c2:	2303      	movs	r3, #3
 80080c4:	75fb      	strb	r3, [r7, #23]
          break;
 80080c6:	bf00      	nop
      }
      break;
 80080c8:	e090      	b.n	80081ec <USBD_CUSTOM_HID_Setup+0x210>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80080ca:	683b      	ldr	r3, [r7, #0]
 80080cc:	785b      	ldrb	r3, [r3, #1]
 80080ce:	2b0b      	cmp	r3, #11
 80080d0:	d87c      	bhi.n	80081cc <USBD_CUSTOM_HID_Setup+0x1f0>
 80080d2:	a201      	add	r2, pc, #4	; (adr r2, 80080d8 <USBD_CUSTOM_HID_Setup+0xfc>)
 80080d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080d8:	08008109 	.word	0x08008109
 80080dc:	080081db 	.word	0x080081db
 80080e0:	080081cd 	.word	0x080081cd
 80080e4:	080081cd 	.word	0x080081cd
 80080e8:	080081cd 	.word	0x080081cd
 80080ec:	080081cd 	.word	0x080081cd
 80080f0:	08008133 	.word	0x08008133
 80080f4:	080081cd 	.word	0x080081cd
 80080f8:	080081cd 	.word	0x080081cd
 80080fc:	080081cd 	.word	0x080081cd
 8008100:	0800817b 	.word	0x0800817b
 8008104:	080081a5 	.word	0x080081a5
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800810e:	b2db      	uxtb	r3, r3
 8008110:	2b03      	cmp	r3, #3
 8008112:	d107      	bne.n	8008124 <USBD_CUSTOM_HID_Setup+0x148>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8008114:	f107 030e 	add.w	r3, r7, #14
 8008118:	2202      	movs	r2, #2
 800811a:	4619      	mov	r1, r3
 800811c:	6878      	ldr	r0, [r7, #4]
 800811e:	f001 fc6f 	bl	8009a00 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008122:	e05b      	b.n	80081dc <USBD_CUSTOM_HID_Setup+0x200>
            USBD_CtlError(pdev, req);
 8008124:	6839      	ldr	r1, [r7, #0]
 8008126:	6878      	ldr	r0, [r7, #4]
 8008128:	f001 fbf9 	bl	800991e <USBD_CtlError>
            ret = USBD_FAIL;
 800812c:	2303      	movs	r3, #3
 800812e:	75fb      	strb	r3, [r7, #23]
          break;
 8008130:	e054      	b.n	80081dc <USBD_CUSTOM_HID_Setup+0x200>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == CUSTOM_HID_REPORT_DESC)
 8008132:	683b      	ldr	r3, [r7, #0]
 8008134:	885b      	ldrh	r3, [r3, #2]
 8008136:	0a1b      	lsrs	r3, r3, #8
 8008138:	b29b      	uxth	r3, r3
 800813a:	2b22      	cmp	r3, #34	; 0x22
 800813c:	d108      	bne.n	8008150 <USBD_CUSTOM_HID_Setup+0x174>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 800813e:	683b      	ldr	r3, [r7, #0]
 8008140:	88db      	ldrh	r3, [r3, #6]
 8008142:	2ba6      	cmp	r3, #166	; 0xa6
 8008144:	bf28      	it	cs
 8008146:	23a6      	movcs	r3, #166	; 0xa6
 8008148:	83fb      	strh	r3, [r7, #30]
            pbuf = HID_MOUSE_ReportDesc;
 800814a:	4b2b      	ldr	r3, [pc, #172]	; (80081f8 <USBD_CUSTOM_HID_Setup+0x21c>)
 800814c:	61bb      	str	r3, [r7, #24]
 800814e:	e00d      	b.n	800816c <USBD_CUSTOM_HID_Setup+0x190>
          }
          else
          {
            if ((req->wValue >> 8) == CUSTOM_HID_DESCRIPTOR_TYPE)
 8008150:	683b      	ldr	r3, [r7, #0]
 8008152:	885b      	ldrh	r3, [r3, #2]
 8008154:	0a1b      	lsrs	r3, r3, #8
 8008156:	b29b      	uxth	r3, r3
 8008158:	2b21      	cmp	r3, #33	; 0x21
 800815a:	d107      	bne.n	800816c <USBD_CUSTOM_HID_Setup+0x190>
            {
              pbuf = USBD_CUSTOM_HID_Desc;
 800815c:	4b27      	ldr	r3, [pc, #156]	; (80081fc <USBD_CUSTOM_HID_Setup+0x220>)
 800815e:	61bb      	str	r3, [r7, #24]
              len = MIN(USB_CUSTOM_HID_DESC_SIZ, req->wLength);
 8008160:	683b      	ldr	r3, [r7, #0]
 8008162:	88db      	ldrh	r3, [r3, #6]
 8008164:	2b09      	cmp	r3, #9
 8008166:	bf28      	it	cs
 8008168:	2309      	movcs	r3, #9
 800816a:	83fb      	strh	r3, [r7, #30]
            }
          }

          (void)USBD_CtlSendData(pdev, pbuf, len);
 800816c:	8bfb      	ldrh	r3, [r7, #30]
 800816e:	461a      	mov	r2, r3
 8008170:	69b9      	ldr	r1, [r7, #24]
 8008172:	6878      	ldr	r0, [r7, #4]
 8008174:	f001 fc44 	bl	8009a00 <USBD_CtlSendData>
          break;
 8008178:	e030      	b.n	80081dc <USBD_CUSTOM_HID_Setup+0x200>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008180:	b2db      	uxtb	r3, r3
 8008182:	2b03      	cmp	r3, #3
 8008184:	d107      	bne.n	8008196 <USBD_CUSTOM_HID_Setup+0x1ba>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 8008186:	693b      	ldr	r3, [r7, #16]
 8008188:	330c      	adds	r3, #12
 800818a:	2201      	movs	r2, #1
 800818c:	4619      	mov	r1, r3
 800818e:	6878      	ldr	r0, [r7, #4]
 8008190:	f001 fc36 	bl	8009a00 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008194:	e022      	b.n	80081dc <USBD_CUSTOM_HID_Setup+0x200>
            USBD_CtlError(pdev, req);
 8008196:	6839      	ldr	r1, [r7, #0]
 8008198:	6878      	ldr	r0, [r7, #4]
 800819a:	f001 fbc0 	bl	800991e <USBD_CtlError>
            ret = USBD_FAIL;
 800819e:	2303      	movs	r3, #3
 80081a0:	75fb      	strb	r3, [r7, #23]
          break;
 80081a2:	e01b      	b.n	80081dc <USBD_CUSTOM_HID_Setup+0x200>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80081aa:	b2db      	uxtb	r3, r3
 80081ac:	2b03      	cmp	r3, #3
 80081ae:	d106      	bne.n	80081be <USBD_CUSTOM_HID_Setup+0x1e2>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 80081b0:	683b      	ldr	r3, [r7, #0]
 80081b2:	885b      	ldrh	r3, [r3, #2]
 80081b4:	b2db      	uxtb	r3, r3
 80081b6:	461a      	mov	r2, r3
 80081b8:	693b      	ldr	r3, [r7, #16]
 80081ba:	60da      	str	r2, [r3, #12]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80081bc:	e00e      	b.n	80081dc <USBD_CUSTOM_HID_Setup+0x200>
            USBD_CtlError(pdev, req);
 80081be:	6839      	ldr	r1, [r7, #0]
 80081c0:	6878      	ldr	r0, [r7, #4]
 80081c2:	f001 fbac 	bl	800991e <USBD_CtlError>
            ret = USBD_FAIL;
 80081c6:	2303      	movs	r3, #3
 80081c8:	75fb      	strb	r3, [r7, #23]
          break;
 80081ca:	e007      	b.n	80081dc <USBD_CUSTOM_HID_Setup+0x200>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80081cc:	6839      	ldr	r1, [r7, #0]
 80081ce:	6878      	ldr	r0, [r7, #4]
 80081d0:	f001 fba5 	bl	800991e <USBD_CtlError>
          ret = USBD_FAIL;
 80081d4:	2303      	movs	r3, #3
 80081d6:	75fb      	strb	r3, [r7, #23]
          break;
 80081d8:	e000      	b.n	80081dc <USBD_CUSTOM_HID_Setup+0x200>
          break;
 80081da:	bf00      	nop
      }
      break;
 80081dc:	e006      	b.n	80081ec <USBD_CUSTOM_HID_Setup+0x210>

    default:
      USBD_CtlError(pdev, req);
 80081de:	6839      	ldr	r1, [r7, #0]
 80081e0:	6878      	ldr	r0, [r7, #4]
 80081e2:	f001 fb9c 	bl	800991e <USBD_CtlError>
      ret = USBD_FAIL;
 80081e6:	2303      	movs	r3, #3
 80081e8:	75fb      	strb	r3, [r7, #23]
      break;
 80081ea:	bf00      	nop
  }
  return (uint8_t)ret;
 80081ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80081ee:	4618      	mov	r0, r3
 80081f0:	3720      	adds	r7, #32
 80081f2:	46bd      	mov	sp, r7
 80081f4:	bd80      	pop	{r7, pc}
 80081f6:	bf00      	nop
 80081f8:	200000fc 	.word	0x200000fc
 80081fc:	200000e4 	.word	0x200000e4

08008200 <USBD_CUSTOM_HID_SendReport>:
  * @param  buff: pointer to report
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_SendReport(USBD_HandleTypeDef *pdev,
                                   uint8_t *report, uint16_t len)
{
 8008200:	b580      	push	{r7, lr}
 8008202:	b086      	sub	sp, #24
 8008204:	af00      	add	r7, sp, #0
 8008206:	60f8      	str	r0, [r7, #12]
 8008208:	60b9      	str	r1, [r7, #8]
 800820a:	4613      	mov	r3, r2
 800820c:	80fb      	strh	r3, [r7, #6]
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	32b0      	adds	r2, #176	; 0xb0
 8008218:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800821c:	2b00      	cmp	r3, #0
 800821e:	d101      	bne.n	8008224 <USBD_CUSTOM_HID_SendReport+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8008220:	2303      	movs	r3, #3
 8008222:	e01f      	b.n	8008264 <USBD_CUSTOM_HID_SendReport+0x64>
#ifdef USE_USBD_COMPOSITE
  /* Get Endpoint IN address allocated for this class instance */
  CUSTOMHIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	32b0      	adds	r2, #176	; 0xb0
 800822e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008232:	617b      	str	r3, [r7, #20]

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800823a:	b2db      	uxtb	r3, r3
 800823c:	2b03      	cmp	r3, #3
 800823e:	d110      	bne.n	8008262 <USBD_CUSTOM_HID_SendReport+0x62>
  {
    if (hhid->state == CUSTOM_HID_IDLE)
 8008240:	697b      	ldr	r3, [r7, #20]
 8008242:	7d1b      	ldrb	r3, [r3, #20]
 8008244:	2b00      	cmp	r3, #0
 8008246:	d10a      	bne.n	800825e <USBD_CUSTOM_HID_SendReport+0x5e>
    {
      hhid->state = CUSTOM_HID_BUSY;
 8008248:	697b      	ldr	r3, [r7, #20]
 800824a:	2201      	movs	r2, #1
 800824c:	751a      	strb	r2, [r3, #20]
      (void)USBD_LL_Transmit(pdev, CUSTOMHIDInEpAdd, report, len);
 800824e:	4b07      	ldr	r3, [pc, #28]	; (800826c <USBD_CUSTOM_HID_SendReport+0x6c>)
 8008250:	7819      	ldrb	r1, [r3, #0]
 8008252:	88fb      	ldrh	r3, [r7, #6]
 8008254:	68ba      	ldr	r2, [r7, #8]
 8008256:	68f8      	ldr	r0, [r7, #12]
 8008258:	f002 f84f 	bl	800a2fa <USBD_LL_Transmit>
 800825c:	e001      	b.n	8008262 <USBD_CUSTOM_HID_SendReport+0x62>
    }
    else
    {
      return (uint8_t)USBD_BUSY;
 800825e:	2301      	movs	r3, #1
 8008260:	e000      	b.n	8008264 <USBD_CUSTOM_HID_SendReport+0x64>
    }
  }
  return (uint8_t)USBD_OK;
 8008262:	2300      	movs	r3, #0
}
 8008264:	4618      	mov	r0, r3
 8008266:	3718      	adds	r7, #24
 8008268:	46bd      	mov	sp, r7
 800826a:	bd80      	pop	{r7, pc}
 800826c:	200001a2 	.word	0x200001a2

08008270 <USBD_CUSTOM_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetFSCfgDesc(uint16_t *length)
{
 8008270:	b580      	push	{r7, lr}
 8008272:	b084      	sub	sp, #16
 8008274:	af00      	add	r7, sp, #0
 8008276:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
 8008278:	2181      	movs	r1, #129	; 0x81
 800827a:	4815      	ldr	r0, [pc, #84]	; (80082d0 <USBD_CUSTOM_HID_GetFSCfgDesc+0x60>)
 800827c:	f000 fd17 	bl	8008cae <USBD_GetEpDesc>
 8008280:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
 8008282:	2101      	movs	r1, #1
 8008284:	4812      	ldr	r0, [pc, #72]	; (80082d0 <USBD_CUSTOM_HID_GetFSCfgDesc+0x60>)
 8008286:	f000 fd12 	bl	8008cae <USBD_GetEpDesc>
 800828a:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	2b00      	cmp	r3, #0
 8008290:	d009      	beq.n	80082a6 <USBD_CUSTOM_HID_GetFSCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	2200      	movs	r2, #0
 8008296:	f042 0204 	orr.w	r2, r2, #4
 800829a:	711a      	strb	r2, [r3, #4]
 800829c:	2200      	movs	r2, #0
 800829e:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	2205      	movs	r2, #5
 80082a4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80082a6:	68bb      	ldr	r3, [r7, #8]
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d009      	beq.n	80082c0 <USBD_CUSTOM_HID_GetFSCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
 80082ac:	68bb      	ldr	r3, [r7, #8]
 80082ae:	2200      	movs	r2, #0
 80082b0:	f042 0202 	orr.w	r2, r2, #2
 80082b4:	711a      	strb	r2, [r3, #4]
 80082b6:	2200      	movs	r2, #0
 80082b8:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 80082ba:	68bb      	ldr	r3, [r7, #8]
 80082bc:	2205      	movs	r2, #5
 80082be:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	2229      	movs	r2, #41	; 0x29
 80082c4:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
 80082c6:	4b02      	ldr	r3, [pc, #8]	; (80082d0 <USBD_CUSTOM_HID_GetFSCfgDesc+0x60>)
}
 80082c8:	4618      	mov	r0, r3
 80082ca:	3710      	adds	r7, #16
 80082cc:	46bd      	mov	sp, r7
 80082ce:	bd80      	pop	{r7, pc}
 80082d0:	200000b8 	.word	0x200000b8

080082d4 <USBD_CUSTOM_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetHSCfgDesc(uint16_t *length)
{
 80082d4:	b580      	push	{r7, lr}
 80082d6:	b084      	sub	sp, #16
 80082d8:	af00      	add	r7, sp, #0
 80082da:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
 80082dc:	2181      	movs	r1, #129	; 0x81
 80082de:	4815      	ldr	r0, [pc, #84]	; (8008334 <USBD_CUSTOM_HID_GetHSCfgDesc+0x60>)
 80082e0:	f000 fce5 	bl	8008cae <USBD_GetEpDesc>
 80082e4:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
 80082e6:	2101      	movs	r1, #1
 80082e8:	4812      	ldr	r0, [pc, #72]	; (8008334 <USBD_CUSTOM_HID_GetHSCfgDesc+0x60>)
 80082ea:	f000 fce0 	bl	8008cae <USBD_GetEpDesc>
 80082ee:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d009      	beq.n	800830a <USBD_CUSTOM_HID_GetHSCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	2200      	movs	r2, #0
 80082fa:	f042 0204 	orr.w	r2, r2, #4
 80082fe:	711a      	strb	r2, [r3, #4]
 8008300:	2200      	movs	r2, #0
 8008302:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_HS_BINTERVAL;
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	2207      	movs	r2, #7
 8008308:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800830a:	68bb      	ldr	r3, [r7, #8]
 800830c:	2b00      	cmp	r3, #0
 800830e:	d009      	beq.n	8008324 <USBD_CUSTOM_HID_GetHSCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
 8008310:	68bb      	ldr	r3, [r7, #8]
 8008312:	2200      	movs	r2, #0
 8008314:	f042 0202 	orr.w	r2, r2, #2
 8008318:	711a      	strb	r2, [r3, #4]
 800831a:	2200      	movs	r2, #0
 800831c:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_HS_BINTERVAL;
 800831e:	68bb      	ldr	r3, [r7, #8]
 8008320:	2207      	movs	r2, #7
 8008322:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	2229      	movs	r2, #41	; 0x29
 8008328:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
 800832a:	4b02      	ldr	r3, [pc, #8]	; (8008334 <USBD_CUSTOM_HID_GetHSCfgDesc+0x60>)
}
 800832c:	4618      	mov	r0, r3
 800832e:	3710      	adds	r7, #16
 8008330:	46bd      	mov	sp, r7
 8008332:	bd80      	pop	{r7, pc}
 8008334:	200000b8 	.word	0x200000b8

08008338 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008338:	b580      	push	{r7, lr}
 800833a:	b084      	sub	sp, #16
 800833c:	af00      	add	r7, sp, #0
 800833e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
 8008340:	2181      	movs	r1, #129	; 0x81
 8008342:	4815      	ldr	r0, [pc, #84]	; (8008398 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x60>)
 8008344:	f000 fcb3 	bl	8008cae <USBD_GetEpDesc>
 8008348:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
 800834a:	2101      	movs	r1, #1
 800834c:	4812      	ldr	r0, [pc, #72]	; (8008398 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x60>)
 800834e:	f000 fcae 	bl	8008cae <USBD_GetEpDesc>
 8008352:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	2b00      	cmp	r3, #0
 8008358:	d009      	beq.n	800836e <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	2200      	movs	r2, #0
 800835e:	f042 0204 	orr.w	r2, r2, #4
 8008362:	711a      	strb	r2, [r3, #4]
 8008364:	2200      	movs	r2, #0
 8008366:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	2205      	movs	r2, #5
 800836c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800836e:	68bb      	ldr	r3, [r7, #8]
 8008370:	2b00      	cmp	r3, #0
 8008372:	d009      	beq.n	8008388 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
 8008374:	68bb      	ldr	r3, [r7, #8]
 8008376:	2200      	movs	r2, #0
 8008378:	f042 0202 	orr.w	r2, r2, #2
 800837c:	711a      	strb	r2, [r3, #4]
 800837e:	2200      	movs	r2, #0
 8008380:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 8008382:	68bb      	ldr	r3, [r7, #8]
 8008384:	2205      	movs	r2, #5
 8008386:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	2229      	movs	r2, #41	; 0x29
 800838c:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
 800838e:	4b02      	ldr	r3, [pc, #8]	; (8008398 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x60>)
}
 8008390:	4618      	mov	r0, r3
 8008392:	3710      	adds	r7, #16
 8008394:	46bd      	mov	sp, r7
 8008396:	bd80      	pop	{r7, pc}
 8008398:	200000b8 	.word	0x200000b8

0800839c <USBD_CUSTOM_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800839c:	b480      	push	{r7}
 800839e:	b083      	sub	sp, #12
 80083a0:	af00      	add	r7, sp, #0
 80083a2:	6078      	str	r0, [r7, #4]
 80083a4:	460b      	mov	r3, r1
 80083a6:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId])->state = CUSTOM_HID_IDLE;
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	32b0      	adds	r2, #176	; 0xb0
 80083b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80083b6:	2200      	movs	r2, #0
 80083b8:	751a      	strb	r2, [r3, #20]

  return (uint8_t)USBD_OK;
 80083ba:	2300      	movs	r3, #0
}
 80083bc:	4618      	mov	r0, r3
 80083be:	370c      	adds	r7, #12
 80083c0:	46bd      	mov	sp, r7
 80083c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c6:	4770      	bx	lr

080083c8 <USBD_CUSTOM_HID_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80083c8:	b580      	push	{r7, lr}
 80083ca:	b084      	sub	sp, #16
 80083cc:	af00      	add	r7, sp, #0
 80083ce:	6078      	str	r0, [r7, #4]
 80083d0:	460b      	mov	r3, r1
 80083d2:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	32b0      	adds	r2, #176	; 0xb0
 80083de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d101      	bne.n	80083ea <USBD_CUSTOM_HID_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80083e6:	2303      	movs	r3, #3
 80083e8:	e017      	b.n	800841a <USBD_CUSTOM_HID_DataOut+0x52>
  }

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	32b0      	adds	r2, #176	; 0xb0
 80083f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80083f8:	60fb      	str	r3, [r7, #12]

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application processing */
  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->OutEvent(hhid->Report_buf[0],
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008400:	687a      	ldr	r2, [r7, #4]
 8008402:	33b0      	adds	r3, #176	; 0xb0
 8008404:	009b      	lsls	r3, r3, #2
 8008406:	4413      	add	r3, r2
 8008408:	685b      	ldr	r3, [r3, #4]
 800840a:	68db      	ldr	r3, [r3, #12]
 800840c:	68fa      	ldr	r2, [r7, #12]
 800840e:	7810      	ldrb	r0, [r2, #0]
 8008410:	68fa      	ldr	r2, [r7, #12]
 8008412:	7852      	ldrb	r2, [r2, #1]
 8008414:	4611      	mov	r1, r2
 8008416:	4798      	blx	r3
                                                                           hhid->Report_buf[1]);

  return (uint8_t)USBD_OK;
 8008418:	2300      	movs	r3, #0
}
 800841a:	4618      	mov	r0, r3
 800841c:	3710      	adds	r7, #16
 800841e:	46bd      	mov	sp, r7
 8008420:	bd80      	pop	{r7, pc}
	...

08008424 <USBD_CUSTOM_HID_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008424:	b580      	push	{r7, lr}
 8008426:	b084      	sub	sp, #16
 8008428:	af00      	add	r7, sp, #0
 800842a:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	32b0      	adds	r2, #176	; 0xb0
 8008436:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800843a:	2b00      	cmp	r3, #0
 800843c:	d101      	bne.n	8008442 <USBD_CUSTOM_HID_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800843e:	2303      	movs	r3, #3
 8008440:	e00f      	b.n	8008462 <USBD_CUSTOM_HID_ReceivePacket+0x3e>
#ifdef USE_USBD_COMPOSITE
  /* Get OUT Endpoint address allocated for this class instance */
  CUSTOMHIDOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	32b0      	adds	r2, #176	; 0xb0
 800844c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008450:	60fb      	str	r3, [r7, #12]

  /* Resume USB Out process */
  (void)USBD_LL_PrepareReceive(pdev, CUSTOMHIDOutEpAdd, hhid->Report_buf,
 8008452:	4b06      	ldr	r3, [pc, #24]	; (800846c <USBD_CUSTOM_HID_ReceivePacket+0x48>)
 8008454:	7819      	ldrb	r1, [r3, #0]
 8008456:	68fa      	ldr	r2, [r7, #12]
 8008458:	2302      	movs	r3, #2
 800845a:	6878      	ldr	r0, [r7, #4]
 800845c:	f001 ff6e 	bl	800a33c <USBD_LL_PrepareReceive>
                               USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);

  return (uint8_t)USBD_OK;
 8008460:	2300      	movs	r3, #0
}
 8008462:	4618      	mov	r0, r3
 8008464:	3710      	adds	r7, #16
 8008466:	46bd      	mov	sp, r7
 8008468:	bd80      	pop	{r7, pc}
 800846a:	bf00      	nop
 800846c:	200001a3 	.word	0x200001a3

08008470 <USBD_CUSTOM_HID_EP0_RxReady>:
  *         Handles control request data.
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008470:	b580      	push	{r7, lr}
 8008472:	b084      	sub	sp, #16
 8008474:	af00      	add	r7, sp, #0
 8008476:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	32b0      	adds	r2, #176	; 0xb0
 8008482:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008486:	60fb      	str	r3, [r7, #12]

  if (hhid == NULL)
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	2b00      	cmp	r3, #0
 800848c:	d101      	bne.n	8008492 <USBD_CUSTOM_HID_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800848e:	2303      	movs	r3, #3
 8008490:	e016      	b.n	80084c0 <USBD_CUSTOM_HID_EP0_RxReady+0x50>
  }

  if (hhid->IsReportAvailable == 1U)
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	691b      	ldr	r3, [r3, #16]
 8008496:	2b01      	cmp	r3, #1
 8008498:	d111      	bne.n	80084be <USBD_CUSTOM_HID_EP0_RxReady+0x4e>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->OutEvent(hhid->Report_buf[0],
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80084a0:	687a      	ldr	r2, [r7, #4]
 80084a2:	33b0      	adds	r3, #176	; 0xb0
 80084a4:	009b      	lsls	r3, r3, #2
 80084a6:	4413      	add	r3, r2
 80084a8:	685b      	ldr	r3, [r3, #4]
 80084aa:	68db      	ldr	r3, [r3, #12]
 80084ac:	68fa      	ldr	r2, [r7, #12]
 80084ae:	7810      	ldrb	r0, [r2, #0]
 80084b0:	68fa      	ldr	r2, [r7, #12]
 80084b2:	7852      	ldrb	r2, [r2, #1]
 80084b4:	4611      	mov	r1, r2
 80084b6:	4798      	blx	r3
                                                                             hhid->Report_buf[1]);
    hhid->IsReportAvailable = 0U;
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	2200      	movs	r2, #0
 80084bc:	611a      	str	r2, [r3, #16]
  }

  return (uint8_t)USBD_OK;
 80084be:	2300      	movs	r3, #0
}
 80084c0:	4618      	mov	r0, r3
 80084c2:	3710      	adds	r7, #16
 80084c4:	46bd      	mov	sp, r7
 80084c6:	bd80      	pop	{r7, pc}

080084c8 <USBD_CUSTOM_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 80084c8:	b480      	push	{r7}
 80084ca:	b083      	sub	sp, #12
 80084cc:	af00      	add	r7, sp, #0
 80084ce:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_DeviceQualifierDesc);
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	220a      	movs	r2, #10
 80084d4:	801a      	strh	r2, [r3, #0]

  return USBD_CUSTOM_HID_DeviceQualifierDesc;
 80084d6:	4b03      	ldr	r3, [pc, #12]	; (80084e4 <USBD_CUSTOM_HID_GetDeviceQualifierDesc+0x1c>)
}
 80084d8:	4618      	mov	r0, r3
 80084da:	370c      	adds	r7, #12
 80084dc:	46bd      	mov	sp, r7
 80084de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e2:	4770      	bx	lr
 80084e4:	200000f0 	.word	0x200000f0

080084e8 <USBD_CUSTOM_HID_RegisterInterface>:
  * @param  fops: CUSTOMHID Interface callback
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_RegisterInterface(USBD_HandleTypeDef *pdev,
                                          USBD_CUSTOM_HID_ItfTypeDef *fops)
{
 80084e8:	b480      	push	{r7}
 80084ea:	b083      	sub	sp, #12
 80084ec:	af00      	add	r7, sp, #0
 80084ee:	6078      	str	r0, [r7, #4]
 80084f0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80084f2:	683b      	ldr	r3, [r7, #0]
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d101      	bne.n	80084fc <USBD_CUSTOM_HID_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80084f8:	2303      	movs	r3, #3
 80084fa:	e009      	b.n	8008510 <USBD_CUSTOM_HID_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008502:	687a      	ldr	r2, [r7, #4]
 8008504:	33b0      	adds	r3, #176	; 0xb0
 8008506:	009b      	lsls	r3, r3, #2
 8008508:	4413      	add	r3, r2
 800850a:	683a      	ldr	r2, [r7, #0]
 800850c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800850e:	2300      	movs	r3, #0
}
 8008510:	4618      	mov	r0, r3
 8008512:	370c      	adds	r7, #12
 8008514:	46bd      	mov	sp, r7
 8008516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800851a:	4770      	bx	lr

0800851c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800851c:	b580      	push	{r7, lr}
 800851e:	b086      	sub	sp, #24
 8008520:	af00      	add	r7, sp, #0
 8008522:	60f8      	str	r0, [r7, #12]
 8008524:	60b9      	str	r1, [r7, #8]
 8008526:	4613      	mov	r3, r2
 8008528:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	2b00      	cmp	r3, #0
 800852e:	d101      	bne.n	8008534 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008530:	2303      	movs	r3, #3
 8008532:	e01f      	b.n	8008574 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	2200      	movs	r2, #0
 8008538:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	2200      	movs	r2, #0
 8008540:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	2200      	movs	r2, #0
 8008548:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800854c:	68bb      	ldr	r3, [r7, #8]
 800854e:	2b00      	cmp	r3, #0
 8008550:	d003      	beq.n	800855a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	68ba      	ldr	r2, [r7, #8]
 8008556:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	2201      	movs	r2, #1
 800855e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	79fa      	ldrb	r2, [r7, #7]
 8008566:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8008568:	68f8      	ldr	r0, [r7, #12]
 800856a:	f001 fd91 	bl	800a090 <USBD_LL_Init>
 800856e:	4603      	mov	r3, r0
 8008570:	75fb      	strb	r3, [r7, #23]

  return ret;
 8008572:	7dfb      	ldrb	r3, [r7, #23]
}
 8008574:	4618      	mov	r0, r3
 8008576:	3718      	adds	r7, #24
 8008578:	46bd      	mov	sp, r7
 800857a:	bd80      	pop	{r7, pc}

0800857c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800857c:	b580      	push	{r7, lr}
 800857e:	b084      	sub	sp, #16
 8008580:	af00      	add	r7, sp, #0
 8008582:	6078      	str	r0, [r7, #4]
 8008584:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008586:	2300      	movs	r3, #0
 8008588:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800858a:	683b      	ldr	r3, [r7, #0]
 800858c:	2b00      	cmp	r3, #0
 800858e:	d101      	bne.n	8008594 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008590:	2303      	movs	r3, #3
 8008592:	e025      	b.n	80085e0 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	683a      	ldr	r2, [r7, #0]
 8008598:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	32ae      	adds	r2, #174	; 0xae
 80085a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80085aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d00f      	beq.n	80085d0 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	32ae      	adds	r2, #174	; 0xae
 80085ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80085be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085c0:	f107 020e 	add.w	r2, r7, #14
 80085c4:	4610      	mov	r0, r2
 80085c6:	4798      	blx	r3
 80085c8:	4602      	mov	r2, r0
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 80085d6:	1c5a      	adds	r2, r3, #1
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 80085de:	2300      	movs	r3, #0
}
 80085e0:	4618      	mov	r0, r3
 80085e2:	3710      	adds	r7, #16
 80085e4:	46bd      	mov	sp, r7
 80085e6:	bd80      	pop	{r7, pc}

080085e8 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80085e8:	b580      	push	{r7, lr}
 80085ea:	b082      	sub	sp, #8
 80085ec:	af00      	add	r7, sp, #0
 80085ee:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80085f0:	6878      	ldr	r0, [r7, #4]
 80085f2:	f001 fd99 	bl	800a128 <USBD_LL_Start>
 80085f6:	4603      	mov	r3, r0
}
 80085f8:	4618      	mov	r0, r3
 80085fa:	3708      	adds	r7, #8
 80085fc:	46bd      	mov	sp, r7
 80085fe:	bd80      	pop	{r7, pc}

08008600 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8008600:	b480      	push	{r7}
 8008602:	b083      	sub	sp, #12
 8008604:	af00      	add	r7, sp, #0
 8008606:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008608:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800860a:	4618      	mov	r0, r3
 800860c:	370c      	adds	r7, #12
 800860e:	46bd      	mov	sp, r7
 8008610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008614:	4770      	bx	lr

08008616 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008616:	b580      	push	{r7, lr}
 8008618:	b084      	sub	sp, #16
 800861a:	af00      	add	r7, sp, #0
 800861c:	6078      	str	r0, [r7, #4]
 800861e:	460b      	mov	r3, r1
 8008620:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8008622:	2300      	movs	r3, #0
 8008624:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800862c:	2b00      	cmp	r3, #0
 800862e:	d009      	beq.n	8008644 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	78fa      	ldrb	r2, [r7, #3]
 800863a:	4611      	mov	r1, r2
 800863c:	6878      	ldr	r0, [r7, #4]
 800863e:	4798      	blx	r3
 8008640:	4603      	mov	r3, r0
 8008642:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008644:	7bfb      	ldrb	r3, [r7, #15]
}
 8008646:	4618      	mov	r0, r3
 8008648:	3710      	adds	r7, #16
 800864a:	46bd      	mov	sp, r7
 800864c:	bd80      	pop	{r7, pc}

0800864e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800864e:	b580      	push	{r7, lr}
 8008650:	b084      	sub	sp, #16
 8008652:	af00      	add	r7, sp, #0
 8008654:	6078      	str	r0, [r7, #4]
 8008656:	460b      	mov	r3, r1
 8008658:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800865a:	2300      	movs	r3, #0
 800865c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008664:	685b      	ldr	r3, [r3, #4]
 8008666:	78fa      	ldrb	r2, [r7, #3]
 8008668:	4611      	mov	r1, r2
 800866a:	6878      	ldr	r0, [r7, #4]
 800866c:	4798      	blx	r3
 800866e:	4603      	mov	r3, r0
 8008670:	2b00      	cmp	r3, #0
 8008672:	d001      	beq.n	8008678 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8008674:	2303      	movs	r3, #3
 8008676:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008678:	7bfb      	ldrb	r3, [r7, #15]
}
 800867a:	4618      	mov	r0, r3
 800867c:	3710      	adds	r7, #16
 800867e:	46bd      	mov	sp, r7
 8008680:	bd80      	pop	{r7, pc}

08008682 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008682:	b580      	push	{r7, lr}
 8008684:	b084      	sub	sp, #16
 8008686:	af00      	add	r7, sp, #0
 8008688:	6078      	str	r0, [r7, #4]
 800868a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008692:	6839      	ldr	r1, [r7, #0]
 8008694:	4618      	mov	r0, r3
 8008696:	f001 f908 	bl	80098aa <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	2201      	movs	r2, #1
 800869e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80086a8:	461a      	mov	r2, r3
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80086b6:	f003 031f 	and.w	r3, r3, #31
 80086ba:	2b02      	cmp	r3, #2
 80086bc:	d01a      	beq.n	80086f4 <USBD_LL_SetupStage+0x72>
 80086be:	2b02      	cmp	r3, #2
 80086c0:	d822      	bhi.n	8008708 <USBD_LL_SetupStage+0x86>
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d002      	beq.n	80086cc <USBD_LL_SetupStage+0x4a>
 80086c6:	2b01      	cmp	r3, #1
 80086c8:	d00a      	beq.n	80086e0 <USBD_LL_SetupStage+0x5e>
 80086ca:	e01d      	b.n	8008708 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80086d2:	4619      	mov	r1, r3
 80086d4:	6878      	ldr	r0, [r7, #4]
 80086d6:	f000 fb5f 	bl	8008d98 <USBD_StdDevReq>
 80086da:	4603      	mov	r3, r0
 80086dc:	73fb      	strb	r3, [r7, #15]
      break;
 80086de:	e020      	b.n	8008722 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80086e6:	4619      	mov	r1, r3
 80086e8:	6878      	ldr	r0, [r7, #4]
 80086ea:	f000 fbc7 	bl	8008e7c <USBD_StdItfReq>
 80086ee:	4603      	mov	r3, r0
 80086f0:	73fb      	strb	r3, [r7, #15]
      break;
 80086f2:	e016      	b.n	8008722 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80086fa:	4619      	mov	r1, r3
 80086fc:	6878      	ldr	r0, [r7, #4]
 80086fe:	f000 fc29 	bl	8008f54 <USBD_StdEPReq>
 8008702:	4603      	mov	r3, r0
 8008704:	73fb      	strb	r3, [r7, #15]
      break;
 8008706:	e00c      	b.n	8008722 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800870e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008712:	b2db      	uxtb	r3, r3
 8008714:	4619      	mov	r1, r3
 8008716:	6878      	ldr	r0, [r7, #4]
 8008718:	f001 fd66 	bl	800a1e8 <USBD_LL_StallEP>
 800871c:	4603      	mov	r3, r0
 800871e:	73fb      	strb	r3, [r7, #15]
      break;
 8008720:	bf00      	nop
  }

  return ret;
 8008722:	7bfb      	ldrb	r3, [r7, #15]
}
 8008724:	4618      	mov	r0, r3
 8008726:	3710      	adds	r7, #16
 8008728:	46bd      	mov	sp, r7
 800872a:	bd80      	pop	{r7, pc}

0800872c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800872c:	b580      	push	{r7, lr}
 800872e:	b086      	sub	sp, #24
 8008730:	af00      	add	r7, sp, #0
 8008732:	60f8      	str	r0, [r7, #12]
 8008734:	460b      	mov	r3, r1
 8008736:	607a      	str	r2, [r7, #4]
 8008738:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800873a:	2300      	movs	r3, #0
 800873c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800873e:	7afb      	ldrb	r3, [r7, #11]
 8008740:	2b00      	cmp	r3, #0
 8008742:	d16e      	bne.n	8008822 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800874a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008752:	2b03      	cmp	r3, #3
 8008754:	f040 8098 	bne.w	8008888 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8008758:	693b      	ldr	r3, [r7, #16]
 800875a:	689a      	ldr	r2, [r3, #8]
 800875c:	693b      	ldr	r3, [r7, #16]
 800875e:	68db      	ldr	r3, [r3, #12]
 8008760:	429a      	cmp	r2, r3
 8008762:	d913      	bls.n	800878c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8008764:	693b      	ldr	r3, [r7, #16]
 8008766:	689a      	ldr	r2, [r3, #8]
 8008768:	693b      	ldr	r3, [r7, #16]
 800876a:	68db      	ldr	r3, [r3, #12]
 800876c:	1ad2      	subs	r2, r2, r3
 800876e:	693b      	ldr	r3, [r7, #16]
 8008770:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8008772:	693b      	ldr	r3, [r7, #16]
 8008774:	68da      	ldr	r2, [r3, #12]
 8008776:	693b      	ldr	r3, [r7, #16]
 8008778:	689b      	ldr	r3, [r3, #8]
 800877a:	4293      	cmp	r3, r2
 800877c:	bf28      	it	cs
 800877e:	4613      	movcs	r3, r2
 8008780:	461a      	mov	r2, r3
 8008782:	6879      	ldr	r1, [r7, #4]
 8008784:	68f8      	ldr	r0, [r7, #12]
 8008786:	f001 f984 	bl	8009a92 <USBD_CtlContinueRx>
 800878a:	e07d      	b.n	8008888 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008792:	f003 031f 	and.w	r3, r3, #31
 8008796:	2b02      	cmp	r3, #2
 8008798:	d014      	beq.n	80087c4 <USBD_LL_DataOutStage+0x98>
 800879a:	2b02      	cmp	r3, #2
 800879c:	d81d      	bhi.n	80087da <USBD_LL_DataOutStage+0xae>
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d002      	beq.n	80087a8 <USBD_LL_DataOutStage+0x7c>
 80087a2:	2b01      	cmp	r3, #1
 80087a4:	d003      	beq.n	80087ae <USBD_LL_DataOutStage+0x82>
 80087a6:	e018      	b.n	80087da <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80087a8:	2300      	movs	r3, #0
 80087aa:	75bb      	strb	r3, [r7, #22]
            break;
 80087ac:	e018      	b.n	80087e0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80087b4:	b2db      	uxtb	r3, r3
 80087b6:	4619      	mov	r1, r3
 80087b8:	68f8      	ldr	r0, [r7, #12]
 80087ba:	f000 fa5e 	bl	8008c7a <USBD_CoreFindIF>
 80087be:	4603      	mov	r3, r0
 80087c0:	75bb      	strb	r3, [r7, #22]
            break;
 80087c2:	e00d      	b.n	80087e0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80087ca:	b2db      	uxtb	r3, r3
 80087cc:	4619      	mov	r1, r3
 80087ce:	68f8      	ldr	r0, [r7, #12]
 80087d0:	f000 fa60 	bl	8008c94 <USBD_CoreFindEP>
 80087d4:	4603      	mov	r3, r0
 80087d6:	75bb      	strb	r3, [r7, #22]
            break;
 80087d8:	e002      	b.n	80087e0 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80087da:	2300      	movs	r3, #0
 80087dc:	75bb      	strb	r3, [r7, #22]
            break;
 80087de:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80087e0:	7dbb      	ldrb	r3, [r7, #22]
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d119      	bne.n	800881a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80087ec:	b2db      	uxtb	r3, r3
 80087ee:	2b03      	cmp	r3, #3
 80087f0:	d113      	bne.n	800881a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80087f2:	7dba      	ldrb	r2, [r7, #22]
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	32ae      	adds	r2, #174	; 0xae
 80087f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80087fc:	691b      	ldr	r3, [r3, #16]
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d00b      	beq.n	800881a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8008802:	7dba      	ldrb	r2, [r7, #22]
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800880a:	7dba      	ldrb	r2, [r7, #22]
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	32ae      	adds	r2, #174	; 0xae
 8008810:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008814:	691b      	ldr	r3, [r3, #16]
 8008816:	68f8      	ldr	r0, [r7, #12]
 8008818:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800881a:	68f8      	ldr	r0, [r7, #12]
 800881c:	f001 f94a 	bl	8009ab4 <USBD_CtlSendStatus>
 8008820:	e032      	b.n	8008888 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8008822:	7afb      	ldrb	r3, [r7, #11]
 8008824:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008828:	b2db      	uxtb	r3, r3
 800882a:	4619      	mov	r1, r3
 800882c:	68f8      	ldr	r0, [r7, #12]
 800882e:	f000 fa31 	bl	8008c94 <USBD_CoreFindEP>
 8008832:	4603      	mov	r3, r0
 8008834:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008836:	7dbb      	ldrb	r3, [r7, #22]
 8008838:	2bff      	cmp	r3, #255	; 0xff
 800883a:	d025      	beq.n	8008888 <USBD_LL_DataOutStage+0x15c>
 800883c:	7dbb      	ldrb	r3, [r7, #22]
 800883e:	2b00      	cmp	r3, #0
 8008840:	d122      	bne.n	8008888 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008848:	b2db      	uxtb	r3, r3
 800884a:	2b03      	cmp	r3, #3
 800884c:	d117      	bne.n	800887e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800884e:	7dba      	ldrb	r2, [r7, #22]
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	32ae      	adds	r2, #174	; 0xae
 8008854:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008858:	699b      	ldr	r3, [r3, #24]
 800885a:	2b00      	cmp	r3, #0
 800885c:	d00f      	beq.n	800887e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800885e:	7dba      	ldrb	r2, [r7, #22]
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8008866:	7dba      	ldrb	r2, [r7, #22]
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	32ae      	adds	r2, #174	; 0xae
 800886c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008870:	699b      	ldr	r3, [r3, #24]
 8008872:	7afa      	ldrb	r2, [r7, #11]
 8008874:	4611      	mov	r1, r2
 8008876:	68f8      	ldr	r0, [r7, #12]
 8008878:	4798      	blx	r3
 800887a:	4603      	mov	r3, r0
 800887c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800887e:	7dfb      	ldrb	r3, [r7, #23]
 8008880:	2b00      	cmp	r3, #0
 8008882:	d001      	beq.n	8008888 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8008884:	7dfb      	ldrb	r3, [r7, #23]
 8008886:	e000      	b.n	800888a <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8008888:	2300      	movs	r3, #0
}
 800888a:	4618      	mov	r0, r3
 800888c:	3718      	adds	r7, #24
 800888e:	46bd      	mov	sp, r7
 8008890:	bd80      	pop	{r7, pc}

08008892 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008892:	b580      	push	{r7, lr}
 8008894:	b086      	sub	sp, #24
 8008896:	af00      	add	r7, sp, #0
 8008898:	60f8      	str	r0, [r7, #12]
 800889a:	460b      	mov	r3, r1
 800889c:	607a      	str	r2, [r7, #4]
 800889e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80088a0:	7afb      	ldrb	r3, [r7, #11]
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d16f      	bne.n	8008986 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	3314      	adds	r3, #20
 80088aa:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80088b2:	2b02      	cmp	r3, #2
 80088b4:	d15a      	bne.n	800896c <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80088b6:	693b      	ldr	r3, [r7, #16]
 80088b8:	689a      	ldr	r2, [r3, #8]
 80088ba:	693b      	ldr	r3, [r7, #16]
 80088bc:	68db      	ldr	r3, [r3, #12]
 80088be:	429a      	cmp	r2, r3
 80088c0:	d914      	bls.n	80088ec <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80088c2:	693b      	ldr	r3, [r7, #16]
 80088c4:	689a      	ldr	r2, [r3, #8]
 80088c6:	693b      	ldr	r3, [r7, #16]
 80088c8:	68db      	ldr	r3, [r3, #12]
 80088ca:	1ad2      	subs	r2, r2, r3
 80088cc:	693b      	ldr	r3, [r7, #16]
 80088ce:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80088d0:	693b      	ldr	r3, [r7, #16]
 80088d2:	689b      	ldr	r3, [r3, #8]
 80088d4:	461a      	mov	r2, r3
 80088d6:	6879      	ldr	r1, [r7, #4]
 80088d8:	68f8      	ldr	r0, [r7, #12]
 80088da:	f001 f8ac 	bl	8009a36 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80088de:	2300      	movs	r3, #0
 80088e0:	2200      	movs	r2, #0
 80088e2:	2100      	movs	r1, #0
 80088e4:	68f8      	ldr	r0, [r7, #12]
 80088e6:	f001 fd29 	bl	800a33c <USBD_LL_PrepareReceive>
 80088ea:	e03f      	b.n	800896c <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80088ec:	693b      	ldr	r3, [r7, #16]
 80088ee:	68da      	ldr	r2, [r3, #12]
 80088f0:	693b      	ldr	r3, [r7, #16]
 80088f2:	689b      	ldr	r3, [r3, #8]
 80088f4:	429a      	cmp	r2, r3
 80088f6:	d11c      	bne.n	8008932 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80088f8:	693b      	ldr	r3, [r7, #16]
 80088fa:	685a      	ldr	r2, [r3, #4]
 80088fc:	693b      	ldr	r3, [r7, #16]
 80088fe:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8008900:	429a      	cmp	r2, r3
 8008902:	d316      	bcc.n	8008932 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8008904:	693b      	ldr	r3, [r7, #16]
 8008906:	685a      	ldr	r2, [r3, #4]
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800890e:	429a      	cmp	r2, r3
 8008910:	d20f      	bcs.n	8008932 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008912:	2200      	movs	r2, #0
 8008914:	2100      	movs	r1, #0
 8008916:	68f8      	ldr	r0, [r7, #12]
 8008918:	f001 f88d 	bl	8009a36 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	2200      	movs	r2, #0
 8008920:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008924:	2300      	movs	r3, #0
 8008926:	2200      	movs	r2, #0
 8008928:	2100      	movs	r1, #0
 800892a:	68f8      	ldr	r0, [r7, #12]
 800892c:	f001 fd06 	bl	800a33c <USBD_LL_PrepareReceive>
 8008930:	e01c      	b.n	800896c <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008938:	b2db      	uxtb	r3, r3
 800893a:	2b03      	cmp	r3, #3
 800893c:	d10f      	bne.n	800895e <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008944:	68db      	ldr	r3, [r3, #12]
 8008946:	2b00      	cmp	r3, #0
 8008948:	d009      	beq.n	800895e <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	2200      	movs	r2, #0
 800894e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008958:	68db      	ldr	r3, [r3, #12]
 800895a:	68f8      	ldr	r0, [r7, #12]
 800895c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800895e:	2180      	movs	r1, #128	; 0x80
 8008960:	68f8      	ldr	r0, [r7, #12]
 8008962:	f001 fc41 	bl	800a1e8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8008966:	68f8      	ldr	r0, [r7, #12]
 8008968:	f001 f8b7 	bl	8009ada <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8008972:	2b00      	cmp	r3, #0
 8008974:	d03a      	beq.n	80089ec <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8008976:	68f8      	ldr	r0, [r7, #12]
 8008978:	f7ff fe42 	bl	8008600 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	2200      	movs	r2, #0
 8008980:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8008984:	e032      	b.n	80089ec <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8008986:	7afb      	ldrb	r3, [r7, #11]
 8008988:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800898c:	b2db      	uxtb	r3, r3
 800898e:	4619      	mov	r1, r3
 8008990:	68f8      	ldr	r0, [r7, #12]
 8008992:	f000 f97f 	bl	8008c94 <USBD_CoreFindEP>
 8008996:	4603      	mov	r3, r0
 8008998:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800899a:	7dfb      	ldrb	r3, [r7, #23]
 800899c:	2bff      	cmp	r3, #255	; 0xff
 800899e:	d025      	beq.n	80089ec <USBD_LL_DataInStage+0x15a>
 80089a0:	7dfb      	ldrb	r3, [r7, #23]
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d122      	bne.n	80089ec <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80089ac:	b2db      	uxtb	r3, r3
 80089ae:	2b03      	cmp	r3, #3
 80089b0:	d11c      	bne.n	80089ec <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80089b2:	7dfa      	ldrb	r2, [r7, #23]
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	32ae      	adds	r2, #174	; 0xae
 80089b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80089bc:	695b      	ldr	r3, [r3, #20]
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d014      	beq.n	80089ec <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80089c2:	7dfa      	ldrb	r2, [r7, #23]
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80089ca:	7dfa      	ldrb	r2, [r7, #23]
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	32ae      	adds	r2, #174	; 0xae
 80089d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80089d4:	695b      	ldr	r3, [r3, #20]
 80089d6:	7afa      	ldrb	r2, [r7, #11]
 80089d8:	4611      	mov	r1, r2
 80089da:	68f8      	ldr	r0, [r7, #12]
 80089dc:	4798      	blx	r3
 80089de:	4603      	mov	r3, r0
 80089e0:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80089e2:	7dbb      	ldrb	r3, [r7, #22]
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d001      	beq.n	80089ec <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80089e8:	7dbb      	ldrb	r3, [r7, #22]
 80089ea:	e000      	b.n	80089ee <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80089ec:	2300      	movs	r3, #0
}
 80089ee:	4618      	mov	r0, r3
 80089f0:	3718      	adds	r7, #24
 80089f2:	46bd      	mov	sp, r7
 80089f4:	bd80      	pop	{r7, pc}

080089f6 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80089f6:	b580      	push	{r7, lr}
 80089f8:	b084      	sub	sp, #16
 80089fa:	af00      	add	r7, sp, #0
 80089fc:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80089fe:	2300      	movs	r3, #0
 8008a00:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	2201      	movs	r2, #1
 8008a06:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	2200      	movs	r2, #0
 8008a0e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	2200      	movs	r2, #0
 8008a16:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	2200      	movs	r2, #0
 8008a1c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	2200      	movs	r2, #0
 8008a24:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d014      	beq.n	8008a5c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a38:	685b      	ldr	r3, [r3, #4]
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d00e      	beq.n	8008a5c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a44:	685b      	ldr	r3, [r3, #4]
 8008a46:	687a      	ldr	r2, [r7, #4]
 8008a48:	6852      	ldr	r2, [r2, #4]
 8008a4a:	b2d2      	uxtb	r2, r2
 8008a4c:	4611      	mov	r1, r2
 8008a4e:	6878      	ldr	r0, [r7, #4]
 8008a50:	4798      	blx	r3
 8008a52:	4603      	mov	r3, r0
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d001      	beq.n	8008a5c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8008a58:	2303      	movs	r3, #3
 8008a5a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008a5c:	2340      	movs	r3, #64	; 0x40
 8008a5e:	2200      	movs	r2, #0
 8008a60:	2100      	movs	r1, #0
 8008a62:	6878      	ldr	r0, [r7, #4]
 8008a64:	f001 fb7b 	bl	800a15e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	2201      	movs	r2, #1
 8008a6c:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	2240      	movs	r2, #64	; 0x40
 8008a74:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008a78:	2340      	movs	r3, #64	; 0x40
 8008a7a:	2200      	movs	r2, #0
 8008a7c:	2180      	movs	r1, #128	; 0x80
 8008a7e:	6878      	ldr	r0, [r7, #4]
 8008a80:	f001 fb6d 	bl	800a15e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	2201      	movs	r2, #1
 8008a88:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	2240      	movs	r2, #64	; 0x40
 8008a8e:	621a      	str	r2, [r3, #32]

  return ret;
 8008a90:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a92:	4618      	mov	r0, r3
 8008a94:	3710      	adds	r7, #16
 8008a96:	46bd      	mov	sp, r7
 8008a98:	bd80      	pop	{r7, pc}

08008a9a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008a9a:	b480      	push	{r7}
 8008a9c:	b083      	sub	sp, #12
 8008a9e:	af00      	add	r7, sp, #0
 8008aa0:	6078      	str	r0, [r7, #4]
 8008aa2:	460b      	mov	r3, r1
 8008aa4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	78fa      	ldrb	r2, [r7, #3]
 8008aaa:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008aac:	2300      	movs	r3, #0
}
 8008aae:	4618      	mov	r0, r3
 8008ab0:	370c      	adds	r7, #12
 8008ab2:	46bd      	mov	sp, r7
 8008ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ab8:	4770      	bx	lr

08008aba <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008aba:	b480      	push	{r7}
 8008abc:	b083      	sub	sp, #12
 8008abe:	af00      	add	r7, sp, #0
 8008ac0:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ac8:	b2da      	uxtb	r2, r3
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	2204      	movs	r2, #4
 8008ad4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8008ad8:	2300      	movs	r3, #0
}
 8008ada:	4618      	mov	r0, r3
 8008adc:	370c      	adds	r7, #12
 8008ade:	46bd      	mov	sp, r7
 8008ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ae4:	4770      	bx	lr

08008ae6 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008ae6:	b480      	push	{r7}
 8008ae8:	b083      	sub	sp, #12
 8008aea:	af00      	add	r7, sp, #0
 8008aec:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008af4:	b2db      	uxtb	r3, r3
 8008af6:	2b04      	cmp	r3, #4
 8008af8:	d106      	bne.n	8008b08 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8008b00:	b2da      	uxtb	r2, r3
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8008b08:	2300      	movs	r3, #0
}
 8008b0a:	4618      	mov	r0, r3
 8008b0c:	370c      	adds	r7, #12
 8008b0e:	46bd      	mov	sp, r7
 8008b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b14:	4770      	bx	lr

08008b16 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008b16:	b580      	push	{r7, lr}
 8008b18:	b082      	sub	sp, #8
 8008b1a:	af00      	add	r7, sp, #0
 8008b1c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b24:	b2db      	uxtb	r3, r3
 8008b26:	2b03      	cmp	r3, #3
 8008b28:	d110      	bne.n	8008b4c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d00b      	beq.n	8008b4c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b3a:	69db      	ldr	r3, [r3, #28]
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d005      	beq.n	8008b4c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b46:	69db      	ldr	r3, [r3, #28]
 8008b48:	6878      	ldr	r0, [r7, #4]
 8008b4a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8008b4c:	2300      	movs	r3, #0
}
 8008b4e:	4618      	mov	r0, r3
 8008b50:	3708      	adds	r7, #8
 8008b52:	46bd      	mov	sp, r7
 8008b54:	bd80      	pop	{r7, pc}

08008b56 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8008b56:	b580      	push	{r7, lr}
 8008b58:	b082      	sub	sp, #8
 8008b5a:	af00      	add	r7, sp, #0
 8008b5c:	6078      	str	r0, [r7, #4]
 8008b5e:	460b      	mov	r3, r1
 8008b60:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	32ae      	adds	r2, #174	; 0xae
 8008b6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d101      	bne.n	8008b78 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8008b74:	2303      	movs	r3, #3
 8008b76:	e01c      	b.n	8008bb2 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b7e:	b2db      	uxtb	r3, r3
 8008b80:	2b03      	cmp	r3, #3
 8008b82:	d115      	bne.n	8008bb0 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	32ae      	adds	r2, #174	; 0xae
 8008b8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b92:	6a1b      	ldr	r3, [r3, #32]
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d00b      	beq.n	8008bb0 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	32ae      	adds	r2, #174	; 0xae
 8008ba2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ba6:	6a1b      	ldr	r3, [r3, #32]
 8008ba8:	78fa      	ldrb	r2, [r7, #3]
 8008baa:	4611      	mov	r1, r2
 8008bac:	6878      	ldr	r0, [r7, #4]
 8008bae:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008bb0:	2300      	movs	r3, #0
}
 8008bb2:	4618      	mov	r0, r3
 8008bb4:	3708      	adds	r7, #8
 8008bb6:	46bd      	mov	sp, r7
 8008bb8:	bd80      	pop	{r7, pc}

08008bba <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8008bba:	b580      	push	{r7, lr}
 8008bbc:	b082      	sub	sp, #8
 8008bbe:	af00      	add	r7, sp, #0
 8008bc0:	6078      	str	r0, [r7, #4]
 8008bc2:	460b      	mov	r3, r1
 8008bc4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	32ae      	adds	r2, #174	; 0xae
 8008bd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d101      	bne.n	8008bdc <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8008bd8:	2303      	movs	r3, #3
 8008bda:	e01c      	b.n	8008c16 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008be2:	b2db      	uxtb	r3, r3
 8008be4:	2b03      	cmp	r3, #3
 8008be6:	d115      	bne.n	8008c14 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	32ae      	adds	r2, #174	; 0xae
 8008bf2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008bf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d00b      	beq.n	8008c14 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	32ae      	adds	r2, #174	; 0xae
 8008c06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c0c:	78fa      	ldrb	r2, [r7, #3]
 8008c0e:	4611      	mov	r1, r2
 8008c10:	6878      	ldr	r0, [r7, #4]
 8008c12:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008c14:	2300      	movs	r3, #0
}
 8008c16:	4618      	mov	r0, r3
 8008c18:	3708      	adds	r7, #8
 8008c1a:	46bd      	mov	sp, r7
 8008c1c:	bd80      	pop	{r7, pc}

08008c1e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8008c1e:	b480      	push	{r7}
 8008c20:	b083      	sub	sp, #12
 8008c22:	af00      	add	r7, sp, #0
 8008c24:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008c26:	2300      	movs	r3, #0
}
 8008c28:	4618      	mov	r0, r3
 8008c2a:	370c      	adds	r7, #12
 8008c2c:	46bd      	mov	sp, r7
 8008c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c32:	4770      	bx	lr

08008c34 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8008c34:	b580      	push	{r7, lr}
 8008c36:	b084      	sub	sp, #16
 8008c38:	af00      	add	r7, sp, #0
 8008c3a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8008c3c:	2300      	movs	r3, #0
 8008c3e:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	2201      	movs	r2, #1
 8008c44:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d00e      	beq.n	8008c70 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008c58:	685b      	ldr	r3, [r3, #4]
 8008c5a:	687a      	ldr	r2, [r7, #4]
 8008c5c:	6852      	ldr	r2, [r2, #4]
 8008c5e:	b2d2      	uxtb	r2, r2
 8008c60:	4611      	mov	r1, r2
 8008c62:	6878      	ldr	r0, [r7, #4]
 8008c64:	4798      	blx	r3
 8008c66:	4603      	mov	r3, r0
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d001      	beq.n	8008c70 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8008c6c:	2303      	movs	r3, #3
 8008c6e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008c70:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c72:	4618      	mov	r0, r3
 8008c74:	3710      	adds	r7, #16
 8008c76:	46bd      	mov	sp, r7
 8008c78:	bd80      	pop	{r7, pc}

08008c7a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008c7a:	b480      	push	{r7}
 8008c7c:	b083      	sub	sp, #12
 8008c7e:	af00      	add	r7, sp, #0
 8008c80:	6078      	str	r0, [r7, #4]
 8008c82:	460b      	mov	r3, r1
 8008c84:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008c86:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008c88:	4618      	mov	r0, r3
 8008c8a:	370c      	adds	r7, #12
 8008c8c:	46bd      	mov	sp, r7
 8008c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c92:	4770      	bx	lr

08008c94 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008c94:	b480      	push	{r7}
 8008c96:	b083      	sub	sp, #12
 8008c98:	af00      	add	r7, sp, #0
 8008c9a:	6078      	str	r0, [r7, #4]
 8008c9c:	460b      	mov	r3, r1
 8008c9e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008ca0:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008ca2:	4618      	mov	r0, r3
 8008ca4:	370c      	adds	r7, #12
 8008ca6:	46bd      	mov	sp, r7
 8008ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cac:	4770      	bx	lr

08008cae <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8008cae:	b580      	push	{r7, lr}
 8008cb0:	b086      	sub	sp, #24
 8008cb2:	af00      	add	r7, sp, #0
 8008cb4:	6078      	str	r0, [r7, #4]
 8008cb6:	460b      	mov	r3, r1
 8008cb8:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8008cc2:	2300      	movs	r3, #0
 8008cc4:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	885b      	ldrh	r3, [r3, #2]
 8008cca:	b29a      	uxth	r2, r3
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	781b      	ldrb	r3, [r3, #0]
 8008cd0:	b29b      	uxth	r3, r3
 8008cd2:	429a      	cmp	r2, r3
 8008cd4:	d920      	bls.n	8008d18 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	781b      	ldrb	r3, [r3, #0]
 8008cda:	b29b      	uxth	r3, r3
 8008cdc:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8008cde:	e013      	b.n	8008d08 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8008ce0:	f107 030a 	add.w	r3, r7, #10
 8008ce4:	4619      	mov	r1, r3
 8008ce6:	6978      	ldr	r0, [r7, #20]
 8008ce8:	f000 f81b 	bl	8008d22 <USBD_GetNextDesc>
 8008cec:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8008cee:	697b      	ldr	r3, [r7, #20]
 8008cf0:	785b      	ldrb	r3, [r3, #1]
 8008cf2:	2b05      	cmp	r3, #5
 8008cf4:	d108      	bne.n	8008d08 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8008cf6:	697b      	ldr	r3, [r7, #20]
 8008cf8:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8008cfa:	693b      	ldr	r3, [r7, #16]
 8008cfc:	789b      	ldrb	r3, [r3, #2]
 8008cfe:	78fa      	ldrb	r2, [r7, #3]
 8008d00:	429a      	cmp	r2, r3
 8008d02:	d008      	beq.n	8008d16 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8008d04:	2300      	movs	r3, #0
 8008d06:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	885b      	ldrh	r3, [r3, #2]
 8008d0c:	b29a      	uxth	r2, r3
 8008d0e:	897b      	ldrh	r3, [r7, #10]
 8008d10:	429a      	cmp	r2, r3
 8008d12:	d8e5      	bhi.n	8008ce0 <USBD_GetEpDesc+0x32>
 8008d14:	e000      	b.n	8008d18 <USBD_GetEpDesc+0x6a>
          break;
 8008d16:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8008d18:	693b      	ldr	r3, [r7, #16]
}
 8008d1a:	4618      	mov	r0, r3
 8008d1c:	3718      	adds	r7, #24
 8008d1e:	46bd      	mov	sp, r7
 8008d20:	bd80      	pop	{r7, pc}

08008d22 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8008d22:	b480      	push	{r7}
 8008d24:	b085      	sub	sp, #20
 8008d26:	af00      	add	r7, sp, #0
 8008d28:	6078      	str	r0, [r7, #4]
 8008d2a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8008d30:	683b      	ldr	r3, [r7, #0]
 8008d32:	881a      	ldrh	r2, [r3, #0]
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	781b      	ldrb	r3, [r3, #0]
 8008d38:	b29b      	uxth	r3, r3
 8008d3a:	4413      	add	r3, r2
 8008d3c:	b29a      	uxth	r2, r3
 8008d3e:	683b      	ldr	r3, [r7, #0]
 8008d40:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	781b      	ldrb	r3, [r3, #0]
 8008d46:	461a      	mov	r2, r3
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	4413      	add	r3, r2
 8008d4c:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8008d4e:	68fb      	ldr	r3, [r7, #12]
}
 8008d50:	4618      	mov	r0, r3
 8008d52:	3714      	adds	r7, #20
 8008d54:	46bd      	mov	sp, r7
 8008d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d5a:	4770      	bx	lr

08008d5c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8008d5c:	b480      	push	{r7}
 8008d5e:	b087      	sub	sp, #28
 8008d60:	af00      	add	r7, sp, #0
 8008d62:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8008d68:	697b      	ldr	r3, [r7, #20]
 8008d6a:	781b      	ldrb	r3, [r3, #0]
 8008d6c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8008d6e:	697b      	ldr	r3, [r7, #20]
 8008d70:	3301      	adds	r3, #1
 8008d72:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8008d74:	697b      	ldr	r3, [r7, #20]
 8008d76:	781b      	ldrb	r3, [r3, #0]
 8008d78:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8008d7a:	8a3b      	ldrh	r3, [r7, #16]
 8008d7c:	021b      	lsls	r3, r3, #8
 8008d7e:	b21a      	sxth	r2, r3
 8008d80:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008d84:	4313      	orrs	r3, r2
 8008d86:	b21b      	sxth	r3, r3
 8008d88:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8008d8a:	89fb      	ldrh	r3, [r7, #14]
}
 8008d8c:	4618      	mov	r0, r3
 8008d8e:	371c      	adds	r7, #28
 8008d90:	46bd      	mov	sp, r7
 8008d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d96:	4770      	bx	lr

08008d98 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008d98:	b580      	push	{r7, lr}
 8008d9a:	b084      	sub	sp, #16
 8008d9c:	af00      	add	r7, sp, #0
 8008d9e:	6078      	str	r0, [r7, #4]
 8008da0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008da2:	2300      	movs	r3, #0
 8008da4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008da6:	683b      	ldr	r3, [r7, #0]
 8008da8:	781b      	ldrb	r3, [r3, #0]
 8008daa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008dae:	2b40      	cmp	r3, #64	; 0x40
 8008db0:	d005      	beq.n	8008dbe <USBD_StdDevReq+0x26>
 8008db2:	2b40      	cmp	r3, #64	; 0x40
 8008db4:	d857      	bhi.n	8008e66 <USBD_StdDevReq+0xce>
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d00f      	beq.n	8008dda <USBD_StdDevReq+0x42>
 8008dba:	2b20      	cmp	r3, #32
 8008dbc:	d153      	bne.n	8008e66 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	32ae      	adds	r2, #174	; 0xae
 8008dc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008dcc:	689b      	ldr	r3, [r3, #8]
 8008dce:	6839      	ldr	r1, [r7, #0]
 8008dd0:	6878      	ldr	r0, [r7, #4]
 8008dd2:	4798      	blx	r3
 8008dd4:	4603      	mov	r3, r0
 8008dd6:	73fb      	strb	r3, [r7, #15]
      break;
 8008dd8:	e04a      	b.n	8008e70 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008dda:	683b      	ldr	r3, [r7, #0]
 8008ddc:	785b      	ldrb	r3, [r3, #1]
 8008dde:	2b09      	cmp	r3, #9
 8008de0:	d83b      	bhi.n	8008e5a <USBD_StdDevReq+0xc2>
 8008de2:	a201      	add	r2, pc, #4	; (adr r2, 8008de8 <USBD_StdDevReq+0x50>)
 8008de4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008de8:	08008e3d 	.word	0x08008e3d
 8008dec:	08008e51 	.word	0x08008e51
 8008df0:	08008e5b 	.word	0x08008e5b
 8008df4:	08008e47 	.word	0x08008e47
 8008df8:	08008e5b 	.word	0x08008e5b
 8008dfc:	08008e1b 	.word	0x08008e1b
 8008e00:	08008e11 	.word	0x08008e11
 8008e04:	08008e5b 	.word	0x08008e5b
 8008e08:	08008e33 	.word	0x08008e33
 8008e0c:	08008e25 	.word	0x08008e25
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008e10:	6839      	ldr	r1, [r7, #0]
 8008e12:	6878      	ldr	r0, [r7, #4]
 8008e14:	f000 fa3c 	bl	8009290 <USBD_GetDescriptor>
          break;
 8008e18:	e024      	b.n	8008e64 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008e1a:	6839      	ldr	r1, [r7, #0]
 8008e1c:	6878      	ldr	r0, [r7, #4]
 8008e1e:	f000 fba1 	bl	8009564 <USBD_SetAddress>
          break;
 8008e22:	e01f      	b.n	8008e64 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8008e24:	6839      	ldr	r1, [r7, #0]
 8008e26:	6878      	ldr	r0, [r7, #4]
 8008e28:	f000 fbe0 	bl	80095ec <USBD_SetConfig>
 8008e2c:	4603      	mov	r3, r0
 8008e2e:	73fb      	strb	r3, [r7, #15]
          break;
 8008e30:	e018      	b.n	8008e64 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008e32:	6839      	ldr	r1, [r7, #0]
 8008e34:	6878      	ldr	r0, [r7, #4]
 8008e36:	f000 fc83 	bl	8009740 <USBD_GetConfig>
          break;
 8008e3a:	e013      	b.n	8008e64 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008e3c:	6839      	ldr	r1, [r7, #0]
 8008e3e:	6878      	ldr	r0, [r7, #4]
 8008e40:	f000 fcb4 	bl	80097ac <USBD_GetStatus>
          break;
 8008e44:	e00e      	b.n	8008e64 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008e46:	6839      	ldr	r1, [r7, #0]
 8008e48:	6878      	ldr	r0, [r7, #4]
 8008e4a:	f000 fce3 	bl	8009814 <USBD_SetFeature>
          break;
 8008e4e:	e009      	b.n	8008e64 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008e50:	6839      	ldr	r1, [r7, #0]
 8008e52:	6878      	ldr	r0, [r7, #4]
 8008e54:	f000 fd07 	bl	8009866 <USBD_ClrFeature>
          break;
 8008e58:	e004      	b.n	8008e64 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8008e5a:	6839      	ldr	r1, [r7, #0]
 8008e5c:	6878      	ldr	r0, [r7, #4]
 8008e5e:	f000 fd5e 	bl	800991e <USBD_CtlError>
          break;
 8008e62:	bf00      	nop
      }
      break;
 8008e64:	e004      	b.n	8008e70 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8008e66:	6839      	ldr	r1, [r7, #0]
 8008e68:	6878      	ldr	r0, [r7, #4]
 8008e6a:	f000 fd58 	bl	800991e <USBD_CtlError>
      break;
 8008e6e:	bf00      	nop
  }

  return ret;
 8008e70:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e72:	4618      	mov	r0, r3
 8008e74:	3710      	adds	r7, #16
 8008e76:	46bd      	mov	sp, r7
 8008e78:	bd80      	pop	{r7, pc}
 8008e7a:	bf00      	nop

08008e7c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008e7c:	b580      	push	{r7, lr}
 8008e7e:	b084      	sub	sp, #16
 8008e80:	af00      	add	r7, sp, #0
 8008e82:	6078      	str	r0, [r7, #4]
 8008e84:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008e86:	2300      	movs	r3, #0
 8008e88:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008e8a:	683b      	ldr	r3, [r7, #0]
 8008e8c:	781b      	ldrb	r3, [r3, #0]
 8008e8e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008e92:	2b40      	cmp	r3, #64	; 0x40
 8008e94:	d005      	beq.n	8008ea2 <USBD_StdItfReq+0x26>
 8008e96:	2b40      	cmp	r3, #64	; 0x40
 8008e98:	d852      	bhi.n	8008f40 <USBD_StdItfReq+0xc4>
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d001      	beq.n	8008ea2 <USBD_StdItfReq+0x26>
 8008e9e:	2b20      	cmp	r3, #32
 8008ea0:	d14e      	bne.n	8008f40 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ea8:	b2db      	uxtb	r3, r3
 8008eaa:	3b01      	subs	r3, #1
 8008eac:	2b02      	cmp	r3, #2
 8008eae:	d840      	bhi.n	8008f32 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008eb0:	683b      	ldr	r3, [r7, #0]
 8008eb2:	889b      	ldrh	r3, [r3, #4]
 8008eb4:	b2db      	uxtb	r3, r3
 8008eb6:	2b01      	cmp	r3, #1
 8008eb8:	d836      	bhi.n	8008f28 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8008eba:	683b      	ldr	r3, [r7, #0]
 8008ebc:	889b      	ldrh	r3, [r3, #4]
 8008ebe:	b2db      	uxtb	r3, r3
 8008ec0:	4619      	mov	r1, r3
 8008ec2:	6878      	ldr	r0, [r7, #4]
 8008ec4:	f7ff fed9 	bl	8008c7a <USBD_CoreFindIF>
 8008ec8:	4603      	mov	r3, r0
 8008eca:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008ecc:	7bbb      	ldrb	r3, [r7, #14]
 8008ece:	2bff      	cmp	r3, #255	; 0xff
 8008ed0:	d01d      	beq.n	8008f0e <USBD_StdItfReq+0x92>
 8008ed2:	7bbb      	ldrb	r3, [r7, #14]
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d11a      	bne.n	8008f0e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8008ed8:	7bba      	ldrb	r2, [r7, #14]
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	32ae      	adds	r2, #174	; 0xae
 8008ede:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ee2:	689b      	ldr	r3, [r3, #8]
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d00f      	beq.n	8008f08 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8008ee8:	7bba      	ldrb	r2, [r7, #14]
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008ef0:	7bba      	ldrb	r2, [r7, #14]
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	32ae      	adds	r2, #174	; 0xae
 8008ef6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008efa:	689b      	ldr	r3, [r3, #8]
 8008efc:	6839      	ldr	r1, [r7, #0]
 8008efe:	6878      	ldr	r0, [r7, #4]
 8008f00:	4798      	blx	r3
 8008f02:	4603      	mov	r3, r0
 8008f04:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008f06:	e004      	b.n	8008f12 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8008f08:	2303      	movs	r3, #3
 8008f0a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008f0c:	e001      	b.n	8008f12 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8008f0e:	2303      	movs	r3, #3
 8008f10:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008f12:	683b      	ldr	r3, [r7, #0]
 8008f14:	88db      	ldrh	r3, [r3, #6]
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d110      	bne.n	8008f3c <USBD_StdItfReq+0xc0>
 8008f1a:	7bfb      	ldrb	r3, [r7, #15]
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d10d      	bne.n	8008f3c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8008f20:	6878      	ldr	r0, [r7, #4]
 8008f22:	f000 fdc7 	bl	8009ab4 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008f26:	e009      	b.n	8008f3c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8008f28:	6839      	ldr	r1, [r7, #0]
 8008f2a:	6878      	ldr	r0, [r7, #4]
 8008f2c:	f000 fcf7 	bl	800991e <USBD_CtlError>
          break;
 8008f30:	e004      	b.n	8008f3c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8008f32:	6839      	ldr	r1, [r7, #0]
 8008f34:	6878      	ldr	r0, [r7, #4]
 8008f36:	f000 fcf2 	bl	800991e <USBD_CtlError>
          break;
 8008f3a:	e000      	b.n	8008f3e <USBD_StdItfReq+0xc2>
          break;
 8008f3c:	bf00      	nop
      }
      break;
 8008f3e:	e004      	b.n	8008f4a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8008f40:	6839      	ldr	r1, [r7, #0]
 8008f42:	6878      	ldr	r0, [r7, #4]
 8008f44:	f000 fceb 	bl	800991e <USBD_CtlError>
      break;
 8008f48:	bf00      	nop
  }

  return ret;
 8008f4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f4c:	4618      	mov	r0, r3
 8008f4e:	3710      	adds	r7, #16
 8008f50:	46bd      	mov	sp, r7
 8008f52:	bd80      	pop	{r7, pc}

08008f54 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008f54:	b580      	push	{r7, lr}
 8008f56:	b084      	sub	sp, #16
 8008f58:	af00      	add	r7, sp, #0
 8008f5a:	6078      	str	r0, [r7, #4]
 8008f5c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8008f5e:	2300      	movs	r3, #0
 8008f60:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8008f62:	683b      	ldr	r3, [r7, #0]
 8008f64:	889b      	ldrh	r3, [r3, #4]
 8008f66:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008f68:	683b      	ldr	r3, [r7, #0]
 8008f6a:	781b      	ldrb	r3, [r3, #0]
 8008f6c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008f70:	2b40      	cmp	r3, #64	; 0x40
 8008f72:	d007      	beq.n	8008f84 <USBD_StdEPReq+0x30>
 8008f74:	2b40      	cmp	r3, #64	; 0x40
 8008f76:	f200 817f 	bhi.w	8009278 <USBD_StdEPReq+0x324>
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d02a      	beq.n	8008fd4 <USBD_StdEPReq+0x80>
 8008f7e:	2b20      	cmp	r3, #32
 8008f80:	f040 817a 	bne.w	8009278 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8008f84:	7bbb      	ldrb	r3, [r7, #14]
 8008f86:	4619      	mov	r1, r3
 8008f88:	6878      	ldr	r0, [r7, #4]
 8008f8a:	f7ff fe83 	bl	8008c94 <USBD_CoreFindEP>
 8008f8e:	4603      	mov	r3, r0
 8008f90:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008f92:	7b7b      	ldrb	r3, [r7, #13]
 8008f94:	2bff      	cmp	r3, #255	; 0xff
 8008f96:	f000 8174 	beq.w	8009282 <USBD_StdEPReq+0x32e>
 8008f9a:	7b7b      	ldrb	r3, [r7, #13]
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	f040 8170 	bne.w	8009282 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8008fa2:	7b7a      	ldrb	r2, [r7, #13]
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8008faa:	7b7a      	ldrb	r2, [r7, #13]
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	32ae      	adds	r2, #174	; 0xae
 8008fb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008fb4:	689b      	ldr	r3, [r3, #8]
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	f000 8163 	beq.w	8009282 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8008fbc:	7b7a      	ldrb	r2, [r7, #13]
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	32ae      	adds	r2, #174	; 0xae
 8008fc2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008fc6:	689b      	ldr	r3, [r3, #8]
 8008fc8:	6839      	ldr	r1, [r7, #0]
 8008fca:	6878      	ldr	r0, [r7, #4]
 8008fcc:	4798      	blx	r3
 8008fce:	4603      	mov	r3, r0
 8008fd0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8008fd2:	e156      	b.n	8009282 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008fd4:	683b      	ldr	r3, [r7, #0]
 8008fd6:	785b      	ldrb	r3, [r3, #1]
 8008fd8:	2b03      	cmp	r3, #3
 8008fda:	d008      	beq.n	8008fee <USBD_StdEPReq+0x9a>
 8008fdc:	2b03      	cmp	r3, #3
 8008fde:	f300 8145 	bgt.w	800926c <USBD_StdEPReq+0x318>
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	f000 809b 	beq.w	800911e <USBD_StdEPReq+0x1ca>
 8008fe8:	2b01      	cmp	r3, #1
 8008fea:	d03c      	beq.n	8009066 <USBD_StdEPReq+0x112>
 8008fec:	e13e      	b.n	800926c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ff4:	b2db      	uxtb	r3, r3
 8008ff6:	2b02      	cmp	r3, #2
 8008ff8:	d002      	beq.n	8009000 <USBD_StdEPReq+0xac>
 8008ffa:	2b03      	cmp	r3, #3
 8008ffc:	d016      	beq.n	800902c <USBD_StdEPReq+0xd8>
 8008ffe:	e02c      	b.n	800905a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009000:	7bbb      	ldrb	r3, [r7, #14]
 8009002:	2b00      	cmp	r3, #0
 8009004:	d00d      	beq.n	8009022 <USBD_StdEPReq+0xce>
 8009006:	7bbb      	ldrb	r3, [r7, #14]
 8009008:	2b80      	cmp	r3, #128	; 0x80
 800900a:	d00a      	beq.n	8009022 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800900c:	7bbb      	ldrb	r3, [r7, #14]
 800900e:	4619      	mov	r1, r3
 8009010:	6878      	ldr	r0, [r7, #4]
 8009012:	f001 f8e9 	bl	800a1e8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009016:	2180      	movs	r1, #128	; 0x80
 8009018:	6878      	ldr	r0, [r7, #4]
 800901a:	f001 f8e5 	bl	800a1e8 <USBD_LL_StallEP>
 800901e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009020:	e020      	b.n	8009064 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8009022:	6839      	ldr	r1, [r7, #0]
 8009024:	6878      	ldr	r0, [r7, #4]
 8009026:	f000 fc7a 	bl	800991e <USBD_CtlError>
              break;
 800902a:	e01b      	b.n	8009064 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800902c:	683b      	ldr	r3, [r7, #0]
 800902e:	885b      	ldrh	r3, [r3, #2]
 8009030:	2b00      	cmp	r3, #0
 8009032:	d10e      	bne.n	8009052 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009034:	7bbb      	ldrb	r3, [r7, #14]
 8009036:	2b00      	cmp	r3, #0
 8009038:	d00b      	beq.n	8009052 <USBD_StdEPReq+0xfe>
 800903a:	7bbb      	ldrb	r3, [r7, #14]
 800903c:	2b80      	cmp	r3, #128	; 0x80
 800903e:	d008      	beq.n	8009052 <USBD_StdEPReq+0xfe>
 8009040:	683b      	ldr	r3, [r7, #0]
 8009042:	88db      	ldrh	r3, [r3, #6]
 8009044:	2b00      	cmp	r3, #0
 8009046:	d104      	bne.n	8009052 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8009048:	7bbb      	ldrb	r3, [r7, #14]
 800904a:	4619      	mov	r1, r3
 800904c:	6878      	ldr	r0, [r7, #4]
 800904e:	f001 f8cb 	bl	800a1e8 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8009052:	6878      	ldr	r0, [r7, #4]
 8009054:	f000 fd2e 	bl	8009ab4 <USBD_CtlSendStatus>

              break;
 8009058:	e004      	b.n	8009064 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800905a:	6839      	ldr	r1, [r7, #0]
 800905c:	6878      	ldr	r0, [r7, #4]
 800905e:	f000 fc5e 	bl	800991e <USBD_CtlError>
              break;
 8009062:	bf00      	nop
          }
          break;
 8009064:	e107      	b.n	8009276 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800906c:	b2db      	uxtb	r3, r3
 800906e:	2b02      	cmp	r3, #2
 8009070:	d002      	beq.n	8009078 <USBD_StdEPReq+0x124>
 8009072:	2b03      	cmp	r3, #3
 8009074:	d016      	beq.n	80090a4 <USBD_StdEPReq+0x150>
 8009076:	e04b      	b.n	8009110 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009078:	7bbb      	ldrb	r3, [r7, #14]
 800907a:	2b00      	cmp	r3, #0
 800907c:	d00d      	beq.n	800909a <USBD_StdEPReq+0x146>
 800907e:	7bbb      	ldrb	r3, [r7, #14]
 8009080:	2b80      	cmp	r3, #128	; 0x80
 8009082:	d00a      	beq.n	800909a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009084:	7bbb      	ldrb	r3, [r7, #14]
 8009086:	4619      	mov	r1, r3
 8009088:	6878      	ldr	r0, [r7, #4]
 800908a:	f001 f8ad 	bl	800a1e8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800908e:	2180      	movs	r1, #128	; 0x80
 8009090:	6878      	ldr	r0, [r7, #4]
 8009092:	f001 f8a9 	bl	800a1e8 <USBD_LL_StallEP>
 8009096:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009098:	e040      	b.n	800911c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800909a:	6839      	ldr	r1, [r7, #0]
 800909c:	6878      	ldr	r0, [r7, #4]
 800909e:	f000 fc3e 	bl	800991e <USBD_CtlError>
              break;
 80090a2:	e03b      	b.n	800911c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80090a4:	683b      	ldr	r3, [r7, #0]
 80090a6:	885b      	ldrh	r3, [r3, #2]
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d136      	bne.n	800911a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80090ac:	7bbb      	ldrb	r3, [r7, #14]
 80090ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d004      	beq.n	80090c0 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80090b6:	7bbb      	ldrb	r3, [r7, #14]
 80090b8:	4619      	mov	r1, r3
 80090ba:	6878      	ldr	r0, [r7, #4]
 80090bc:	f001 f8b3 	bl	800a226 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80090c0:	6878      	ldr	r0, [r7, #4]
 80090c2:	f000 fcf7 	bl	8009ab4 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80090c6:	7bbb      	ldrb	r3, [r7, #14]
 80090c8:	4619      	mov	r1, r3
 80090ca:	6878      	ldr	r0, [r7, #4]
 80090cc:	f7ff fde2 	bl	8008c94 <USBD_CoreFindEP>
 80090d0:	4603      	mov	r3, r0
 80090d2:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80090d4:	7b7b      	ldrb	r3, [r7, #13]
 80090d6:	2bff      	cmp	r3, #255	; 0xff
 80090d8:	d01f      	beq.n	800911a <USBD_StdEPReq+0x1c6>
 80090da:	7b7b      	ldrb	r3, [r7, #13]
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d11c      	bne.n	800911a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80090e0:	7b7a      	ldrb	r2, [r7, #13]
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80090e8:	7b7a      	ldrb	r2, [r7, #13]
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	32ae      	adds	r2, #174	; 0xae
 80090ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80090f2:	689b      	ldr	r3, [r3, #8]
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d010      	beq.n	800911a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80090f8:	7b7a      	ldrb	r2, [r7, #13]
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	32ae      	adds	r2, #174	; 0xae
 80090fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009102:	689b      	ldr	r3, [r3, #8]
 8009104:	6839      	ldr	r1, [r7, #0]
 8009106:	6878      	ldr	r0, [r7, #4]
 8009108:	4798      	blx	r3
 800910a:	4603      	mov	r3, r0
 800910c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800910e:	e004      	b.n	800911a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8009110:	6839      	ldr	r1, [r7, #0]
 8009112:	6878      	ldr	r0, [r7, #4]
 8009114:	f000 fc03 	bl	800991e <USBD_CtlError>
              break;
 8009118:	e000      	b.n	800911c <USBD_StdEPReq+0x1c8>
              break;
 800911a:	bf00      	nop
          }
          break;
 800911c:	e0ab      	b.n	8009276 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009124:	b2db      	uxtb	r3, r3
 8009126:	2b02      	cmp	r3, #2
 8009128:	d002      	beq.n	8009130 <USBD_StdEPReq+0x1dc>
 800912a:	2b03      	cmp	r3, #3
 800912c:	d032      	beq.n	8009194 <USBD_StdEPReq+0x240>
 800912e:	e097      	b.n	8009260 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009130:	7bbb      	ldrb	r3, [r7, #14]
 8009132:	2b00      	cmp	r3, #0
 8009134:	d007      	beq.n	8009146 <USBD_StdEPReq+0x1f2>
 8009136:	7bbb      	ldrb	r3, [r7, #14]
 8009138:	2b80      	cmp	r3, #128	; 0x80
 800913a:	d004      	beq.n	8009146 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800913c:	6839      	ldr	r1, [r7, #0]
 800913e:	6878      	ldr	r0, [r7, #4]
 8009140:	f000 fbed 	bl	800991e <USBD_CtlError>
                break;
 8009144:	e091      	b.n	800926a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009146:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800914a:	2b00      	cmp	r3, #0
 800914c:	da0b      	bge.n	8009166 <USBD_StdEPReq+0x212>
 800914e:	7bbb      	ldrb	r3, [r7, #14]
 8009150:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009154:	4613      	mov	r3, r2
 8009156:	009b      	lsls	r3, r3, #2
 8009158:	4413      	add	r3, r2
 800915a:	009b      	lsls	r3, r3, #2
 800915c:	3310      	adds	r3, #16
 800915e:	687a      	ldr	r2, [r7, #4]
 8009160:	4413      	add	r3, r2
 8009162:	3304      	adds	r3, #4
 8009164:	e00b      	b.n	800917e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009166:	7bbb      	ldrb	r3, [r7, #14]
 8009168:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800916c:	4613      	mov	r3, r2
 800916e:	009b      	lsls	r3, r3, #2
 8009170:	4413      	add	r3, r2
 8009172:	009b      	lsls	r3, r3, #2
 8009174:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009178:	687a      	ldr	r2, [r7, #4]
 800917a:	4413      	add	r3, r2
 800917c:	3304      	adds	r3, #4
 800917e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009180:	68bb      	ldr	r3, [r7, #8]
 8009182:	2200      	movs	r2, #0
 8009184:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009186:	68bb      	ldr	r3, [r7, #8]
 8009188:	2202      	movs	r2, #2
 800918a:	4619      	mov	r1, r3
 800918c:	6878      	ldr	r0, [r7, #4]
 800918e:	f000 fc37 	bl	8009a00 <USBD_CtlSendData>
              break;
 8009192:	e06a      	b.n	800926a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009194:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009198:	2b00      	cmp	r3, #0
 800919a:	da11      	bge.n	80091c0 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800919c:	7bbb      	ldrb	r3, [r7, #14]
 800919e:	f003 020f 	and.w	r2, r3, #15
 80091a2:	6879      	ldr	r1, [r7, #4]
 80091a4:	4613      	mov	r3, r2
 80091a6:	009b      	lsls	r3, r3, #2
 80091a8:	4413      	add	r3, r2
 80091aa:	009b      	lsls	r3, r3, #2
 80091ac:	440b      	add	r3, r1
 80091ae:	3324      	adds	r3, #36	; 0x24
 80091b0:	881b      	ldrh	r3, [r3, #0]
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d117      	bne.n	80091e6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80091b6:	6839      	ldr	r1, [r7, #0]
 80091b8:	6878      	ldr	r0, [r7, #4]
 80091ba:	f000 fbb0 	bl	800991e <USBD_CtlError>
                  break;
 80091be:	e054      	b.n	800926a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80091c0:	7bbb      	ldrb	r3, [r7, #14]
 80091c2:	f003 020f 	and.w	r2, r3, #15
 80091c6:	6879      	ldr	r1, [r7, #4]
 80091c8:	4613      	mov	r3, r2
 80091ca:	009b      	lsls	r3, r3, #2
 80091cc:	4413      	add	r3, r2
 80091ce:	009b      	lsls	r3, r3, #2
 80091d0:	440b      	add	r3, r1
 80091d2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80091d6:	881b      	ldrh	r3, [r3, #0]
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d104      	bne.n	80091e6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80091dc:	6839      	ldr	r1, [r7, #0]
 80091de:	6878      	ldr	r0, [r7, #4]
 80091e0:	f000 fb9d 	bl	800991e <USBD_CtlError>
                  break;
 80091e4:	e041      	b.n	800926a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80091e6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	da0b      	bge.n	8009206 <USBD_StdEPReq+0x2b2>
 80091ee:	7bbb      	ldrb	r3, [r7, #14]
 80091f0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80091f4:	4613      	mov	r3, r2
 80091f6:	009b      	lsls	r3, r3, #2
 80091f8:	4413      	add	r3, r2
 80091fa:	009b      	lsls	r3, r3, #2
 80091fc:	3310      	adds	r3, #16
 80091fe:	687a      	ldr	r2, [r7, #4]
 8009200:	4413      	add	r3, r2
 8009202:	3304      	adds	r3, #4
 8009204:	e00b      	b.n	800921e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009206:	7bbb      	ldrb	r3, [r7, #14]
 8009208:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800920c:	4613      	mov	r3, r2
 800920e:	009b      	lsls	r3, r3, #2
 8009210:	4413      	add	r3, r2
 8009212:	009b      	lsls	r3, r3, #2
 8009214:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009218:	687a      	ldr	r2, [r7, #4]
 800921a:	4413      	add	r3, r2
 800921c:	3304      	adds	r3, #4
 800921e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009220:	7bbb      	ldrb	r3, [r7, #14]
 8009222:	2b00      	cmp	r3, #0
 8009224:	d002      	beq.n	800922c <USBD_StdEPReq+0x2d8>
 8009226:	7bbb      	ldrb	r3, [r7, #14]
 8009228:	2b80      	cmp	r3, #128	; 0x80
 800922a:	d103      	bne.n	8009234 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800922c:	68bb      	ldr	r3, [r7, #8]
 800922e:	2200      	movs	r2, #0
 8009230:	601a      	str	r2, [r3, #0]
 8009232:	e00e      	b.n	8009252 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8009234:	7bbb      	ldrb	r3, [r7, #14]
 8009236:	4619      	mov	r1, r3
 8009238:	6878      	ldr	r0, [r7, #4]
 800923a:	f001 f813 	bl	800a264 <USBD_LL_IsStallEP>
 800923e:	4603      	mov	r3, r0
 8009240:	2b00      	cmp	r3, #0
 8009242:	d003      	beq.n	800924c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8009244:	68bb      	ldr	r3, [r7, #8]
 8009246:	2201      	movs	r2, #1
 8009248:	601a      	str	r2, [r3, #0]
 800924a:	e002      	b.n	8009252 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800924c:	68bb      	ldr	r3, [r7, #8]
 800924e:	2200      	movs	r2, #0
 8009250:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009252:	68bb      	ldr	r3, [r7, #8]
 8009254:	2202      	movs	r2, #2
 8009256:	4619      	mov	r1, r3
 8009258:	6878      	ldr	r0, [r7, #4]
 800925a:	f000 fbd1 	bl	8009a00 <USBD_CtlSendData>
              break;
 800925e:	e004      	b.n	800926a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8009260:	6839      	ldr	r1, [r7, #0]
 8009262:	6878      	ldr	r0, [r7, #4]
 8009264:	f000 fb5b 	bl	800991e <USBD_CtlError>
              break;
 8009268:	bf00      	nop
          }
          break;
 800926a:	e004      	b.n	8009276 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800926c:	6839      	ldr	r1, [r7, #0]
 800926e:	6878      	ldr	r0, [r7, #4]
 8009270:	f000 fb55 	bl	800991e <USBD_CtlError>
          break;
 8009274:	bf00      	nop
      }
      break;
 8009276:	e005      	b.n	8009284 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8009278:	6839      	ldr	r1, [r7, #0]
 800927a:	6878      	ldr	r0, [r7, #4]
 800927c:	f000 fb4f 	bl	800991e <USBD_CtlError>
      break;
 8009280:	e000      	b.n	8009284 <USBD_StdEPReq+0x330>
      break;
 8009282:	bf00      	nop
  }

  return ret;
 8009284:	7bfb      	ldrb	r3, [r7, #15]
}
 8009286:	4618      	mov	r0, r3
 8009288:	3710      	adds	r7, #16
 800928a:	46bd      	mov	sp, r7
 800928c:	bd80      	pop	{r7, pc}
	...

08009290 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009290:	b580      	push	{r7, lr}
 8009292:	b084      	sub	sp, #16
 8009294:	af00      	add	r7, sp, #0
 8009296:	6078      	str	r0, [r7, #4]
 8009298:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800929a:	2300      	movs	r3, #0
 800929c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800929e:	2300      	movs	r3, #0
 80092a0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80092a2:	2300      	movs	r3, #0
 80092a4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80092a6:	683b      	ldr	r3, [r7, #0]
 80092a8:	885b      	ldrh	r3, [r3, #2]
 80092aa:	0a1b      	lsrs	r3, r3, #8
 80092ac:	b29b      	uxth	r3, r3
 80092ae:	3b01      	subs	r3, #1
 80092b0:	2b06      	cmp	r3, #6
 80092b2:	f200 8128 	bhi.w	8009506 <USBD_GetDescriptor+0x276>
 80092b6:	a201      	add	r2, pc, #4	; (adr r2, 80092bc <USBD_GetDescriptor+0x2c>)
 80092b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092bc:	080092d9 	.word	0x080092d9
 80092c0:	080092f1 	.word	0x080092f1
 80092c4:	08009331 	.word	0x08009331
 80092c8:	08009507 	.word	0x08009507
 80092cc:	08009507 	.word	0x08009507
 80092d0:	080094a7 	.word	0x080094a7
 80092d4:	080094d3 	.word	0x080094d3
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	687a      	ldr	r2, [r7, #4]
 80092e2:	7c12      	ldrb	r2, [r2, #16]
 80092e4:	f107 0108 	add.w	r1, r7, #8
 80092e8:	4610      	mov	r0, r2
 80092ea:	4798      	blx	r3
 80092ec:	60f8      	str	r0, [r7, #12]
      break;
 80092ee:	e112      	b.n	8009516 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	7c1b      	ldrb	r3, [r3, #16]
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d10d      	bne.n	8009314 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80092fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009300:	f107 0208 	add.w	r2, r7, #8
 8009304:	4610      	mov	r0, r2
 8009306:	4798      	blx	r3
 8009308:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	3301      	adds	r3, #1
 800930e:	2202      	movs	r2, #2
 8009310:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8009312:	e100      	b.n	8009516 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800931a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800931c:	f107 0208 	add.w	r2, r7, #8
 8009320:	4610      	mov	r0, r2
 8009322:	4798      	blx	r3
 8009324:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	3301      	adds	r3, #1
 800932a:	2202      	movs	r2, #2
 800932c:	701a      	strb	r2, [r3, #0]
      break;
 800932e:	e0f2      	b.n	8009516 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009330:	683b      	ldr	r3, [r7, #0]
 8009332:	885b      	ldrh	r3, [r3, #2]
 8009334:	b2db      	uxtb	r3, r3
 8009336:	2b05      	cmp	r3, #5
 8009338:	f200 80ac 	bhi.w	8009494 <USBD_GetDescriptor+0x204>
 800933c:	a201      	add	r2, pc, #4	; (adr r2, 8009344 <USBD_GetDescriptor+0xb4>)
 800933e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009342:	bf00      	nop
 8009344:	0800935d 	.word	0x0800935d
 8009348:	08009391 	.word	0x08009391
 800934c:	080093c5 	.word	0x080093c5
 8009350:	080093f9 	.word	0x080093f9
 8009354:	0800942d 	.word	0x0800942d
 8009358:	08009461 	.word	0x08009461
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009362:	685b      	ldr	r3, [r3, #4]
 8009364:	2b00      	cmp	r3, #0
 8009366:	d00b      	beq.n	8009380 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800936e:	685b      	ldr	r3, [r3, #4]
 8009370:	687a      	ldr	r2, [r7, #4]
 8009372:	7c12      	ldrb	r2, [r2, #16]
 8009374:	f107 0108 	add.w	r1, r7, #8
 8009378:	4610      	mov	r0, r2
 800937a:	4798      	blx	r3
 800937c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800937e:	e091      	b.n	80094a4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009380:	6839      	ldr	r1, [r7, #0]
 8009382:	6878      	ldr	r0, [r7, #4]
 8009384:	f000 facb 	bl	800991e <USBD_CtlError>
            err++;
 8009388:	7afb      	ldrb	r3, [r7, #11]
 800938a:	3301      	adds	r3, #1
 800938c:	72fb      	strb	r3, [r7, #11]
          break;
 800938e:	e089      	b.n	80094a4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009396:	689b      	ldr	r3, [r3, #8]
 8009398:	2b00      	cmp	r3, #0
 800939a:	d00b      	beq.n	80093b4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80093a2:	689b      	ldr	r3, [r3, #8]
 80093a4:	687a      	ldr	r2, [r7, #4]
 80093a6:	7c12      	ldrb	r2, [r2, #16]
 80093a8:	f107 0108 	add.w	r1, r7, #8
 80093ac:	4610      	mov	r0, r2
 80093ae:	4798      	blx	r3
 80093b0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80093b2:	e077      	b.n	80094a4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80093b4:	6839      	ldr	r1, [r7, #0]
 80093b6:	6878      	ldr	r0, [r7, #4]
 80093b8:	f000 fab1 	bl	800991e <USBD_CtlError>
            err++;
 80093bc:	7afb      	ldrb	r3, [r7, #11]
 80093be:	3301      	adds	r3, #1
 80093c0:	72fb      	strb	r3, [r7, #11]
          break;
 80093c2:	e06f      	b.n	80094a4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80093ca:	68db      	ldr	r3, [r3, #12]
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d00b      	beq.n	80093e8 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80093d6:	68db      	ldr	r3, [r3, #12]
 80093d8:	687a      	ldr	r2, [r7, #4]
 80093da:	7c12      	ldrb	r2, [r2, #16]
 80093dc:	f107 0108 	add.w	r1, r7, #8
 80093e0:	4610      	mov	r0, r2
 80093e2:	4798      	blx	r3
 80093e4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80093e6:	e05d      	b.n	80094a4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80093e8:	6839      	ldr	r1, [r7, #0]
 80093ea:	6878      	ldr	r0, [r7, #4]
 80093ec:	f000 fa97 	bl	800991e <USBD_CtlError>
            err++;
 80093f0:	7afb      	ldrb	r3, [r7, #11]
 80093f2:	3301      	adds	r3, #1
 80093f4:	72fb      	strb	r3, [r7, #11]
          break;
 80093f6:	e055      	b.n	80094a4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80093fe:	691b      	ldr	r3, [r3, #16]
 8009400:	2b00      	cmp	r3, #0
 8009402:	d00b      	beq.n	800941c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800940a:	691b      	ldr	r3, [r3, #16]
 800940c:	687a      	ldr	r2, [r7, #4]
 800940e:	7c12      	ldrb	r2, [r2, #16]
 8009410:	f107 0108 	add.w	r1, r7, #8
 8009414:	4610      	mov	r0, r2
 8009416:	4798      	blx	r3
 8009418:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800941a:	e043      	b.n	80094a4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800941c:	6839      	ldr	r1, [r7, #0]
 800941e:	6878      	ldr	r0, [r7, #4]
 8009420:	f000 fa7d 	bl	800991e <USBD_CtlError>
            err++;
 8009424:	7afb      	ldrb	r3, [r7, #11]
 8009426:	3301      	adds	r3, #1
 8009428:	72fb      	strb	r3, [r7, #11]
          break;
 800942a:	e03b      	b.n	80094a4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009432:	695b      	ldr	r3, [r3, #20]
 8009434:	2b00      	cmp	r3, #0
 8009436:	d00b      	beq.n	8009450 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800943e:	695b      	ldr	r3, [r3, #20]
 8009440:	687a      	ldr	r2, [r7, #4]
 8009442:	7c12      	ldrb	r2, [r2, #16]
 8009444:	f107 0108 	add.w	r1, r7, #8
 8009448:	4610      	mov	r0, r2
 800944a:	4798      	blx	r3
 800944c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800944e:	e029      	b.n	80094a4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009450:	6839      	ldr	r1, [r7, #0]
 8009452:	6878      	ldr	r0, [r7, #4]
 8009454:	f000 fa63 	bl	800991e <USBD_CtlError>
            err++;
 8009458:	7afb      	ldrb	r3, [r7, #11]
 800945a:	3301      	adds	r3, #1
 800945c:	72fb      	strb	r3, [r7, #11]
          break;
 800945e:	e021      	b.n	80094a4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009466:	699b      	ldr	r3, [r3, #24]
 8009468:	2b00      	cmp	r3, #0
 800946a:	d00b      	beq.n	8009484 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009472:	699b      	ldr	r3, [r3, #24]
 8009474:	687a      	ldr	r2, [r7, #4]
 8009476:	7c12      	ldrb	r2, [r2, #16]
 8009478:	f107 0108 	add.w	r1, r7, #8
 800947c:	4610      	mov	r0, r2
 800947e:	4798      	blx	r3
 8009480:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009482:	e00f      	b.n	80094a4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009484:	6839      	ldr	r1, [r7, #0]
 8009486:	6878      	ldr	r0, [r7, #4]
 8009488:	f000 fa49 	bl	800991e <USBD_CtlError>
            err++;
 800948c:	7afb      	ldrb	r3, [r7, #11]
 800948e:	3301      	adds	r3, #1
 8009490:	72fb      	strb	r3, [r7, #11]
          break;
 8009492:	e007      	b.n	80094a4 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8009494:	6839      	ldr	r1, [r7, #0]
 8009496:	6878      	ldr	r0, [r7, #4]
 8009498:	f000 fa41 	bl	800991e <USBD_CtlError>
          err++;
 800949c:	7afb      	ldrb	r3, [r7, #11]
 800949e:	3301      	adds	r3, #1
 80094a0:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80094a2:	bf00      	nop
      }
      break;
 80094a4:	e037      	b.n	8009516 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	7c1b      	ldrb	r3, [r3, #16]
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d109      	bne.n	80094c2 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80094b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80094b6:	f107 0208 	add.w	r2, r7, #8
 80094ba:	4610      	mov	r0, r2
 80094bc:	4798      	blx	r3
 80094be:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80094c0:	e029      	b.n	8009516 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80094c2:	6839      	ldr	r1, [r7, #0]
 80094c4:	6878      	ldr	r0, [r7, #4]
 80094c6:	f000 fa2a 	bl	800991e <USBD_CtlError>
        err++;
 80094ca:	7afb      	ldrb	r3, [r7, #11]
 80094cc:	3301      	adds	r3, #1
 80094ce:	72fb      	strb	r3, [r7, #11]
      break;
 80094d0:	e021      	b.n	8009516 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	7c1b      	ldrb	r3, [r3, #16]
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d10d      	bne.n	80094f6 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80094e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094e2:	f107 0208 	add.w	r2, r7, #8
 80094e6:	4610      	mov	r0, r2
 80094e8:	4798      	blx	r3
 80094ea:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	3301      	adds	r3, #1
 80094f0:	2207      	movs	r2, #7
 80094f2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80094f4:	e00f      	b.n	8009516 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80094f6:	6839      	ldr	r1, [r7, #0]
 80094f8:	6878      	ldr	r0, [r7, #4]
 80094fa:	f000 fa10 	bl	800991e <USBD_CtlError>
        err++;
 80094fe:	7afb      	ldrb	r3, [r7, #11]
 8009500:	3301      	adds	r3, #1
 8009502:	72fb      	strb	r3, [r7, #11]
      break;
 8009504:	e007      	b.n	8009516 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8009506:	6839      	ldr	r1, [r7, #0]
 8009508:	6878      	ldr	r0, [r7, #4]
 800950a:	f000 fa08 	bl	800991e <USBD_CtlError>
      err++;
 800950e:	7afb      	ldrb	r3, [r7, #11]
 8009510:	3301      	adds	r3, #1
 8009512:	72fb      	strb	r3, [r7, #11]
      break;
 8009514:	bf00      	nop
  }

  if (err != 0U)
 8009516:	7afb      	ldrb	r3, [r7, #11]
 8009518:	2b00      	cmp	r3, #0
 800951a:	d11e      	bne.n	800955a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800951c:	683b      	ldr	r3, [r7, #0]
 800951e:	88db      	ldrh	r3, [r3, #6]
 8009520:	2b00      	cmp	r3, #0
 8009522:	d016      	beq.n	8009552 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8009524:	893b      	ldrh	r3, [r7, #8]
 8009526:	2b00      	cmp	r3, #0
 8009528:	d00e      	beq.n	8009548 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800952a:	683b      	ldr	r3, [r7, #0]
 800952c:	88da      	ldrh	r2, [r3, #6]
 800952e:	893b      	ldrh	r3, [r7, #8]
 8009530:	4293      	cmp	r3, r2
 8009532:	bf28      	it	cs
 8009534:	4613      	movcs	r3, r2
 8009536:	b29b      	uxth	r3, r3
 8009538:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800953a:	893b      	ldrh	r3, [r7, #8]
 800953c:	461a      	mov	r2, r3
 800953e:	68f9      	ldr	r1, [r7, #12]
 8009540:	6878      	ldr	r0, [r7, #4]
 8009542:	f000 fa5d 	bl	8009a00 <USBD_CtlSendData>
 8009546:	e009      	b.n	800955c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8009548:	6839      	ldr	r1, [r7, #0]
 800954a:	6878      	ldr	r0, [r7, #4]
 800954c:	f000 f9e7 	bl	800991e <USBD_CtlError>
 8009550:	e004      	b.n	800955c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8009552:	6878      	ldr	r0, [r7, #4]
 8009554:	f000 faae 	bl	8009ab4 <USBD_CtlSendStatus>
 8009558:	e000      	b.n	800955c <USBD_GetDescriptor+0x2cc>
    return;
 800955a:	bf00      	nop
  }
}
 800955c:	3710      	adds	r7, #16
 800955e:	46bd      	mov	sp, r7
 8009560:	bd80      	pop	{r7, pc}
 8009562:	bf00      	nop

08009564 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009564:	b580      	push	{r7, lr}
 8009566:	b084      	sub	sp, #16
 8009568:	af00      	add	r7, sp, #0
 800956a:	6078      	str	r0, [r7, #4]
 800956c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800956e:	683b      	ldr	r3, [r7, #0]
 8009570:	889b      	ldrh	r3, [r3, #4]
 8009572:	2b00      	cmp	r3, #0
 8009574:	d131      	bne.n	80095da <USBD_SetAddress+0x76>
 8009576:	683b      	ldr	r3, [r7, #0]
 8009578:	88db      	ldrh	r3, [r3, #6]
 800957a:	2b00      	cmp	r3, #0
 800957c:	d12d      	bne.n	80095da <USBD_SetAddress+0x76>
 800957e:	683b      	ldr	r3, [r7, #0]
 8009580:	885b      	ldrh	r3, [r3, #2]
 8009582:	2b7f      	cmp	r3, #127	; 0x7f
 8009584:	d829      	bhi.n	80095da <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009586:	683b      	ldr	r3, [r7, #0]
 8009588:	885b      	ldrh	r3, [r3, #2]
 800958a:	b2db      	uxtb	r3, r3
 800958c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009590:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009598:	b2db      	uxtb	r3, r3
 800959a:	2b03      	cmp	r3, #3
 800959c:	d104      	bne.n	80095a8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800959e:	6839      	ldr	r1, [r7, #0]
 80095a0:	6878      	ldr	r0, [r7, #4]
 80095a2:	f000 f9bc 	bl	800991e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80095a6:	e01d      	b.n	80095e4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	7bfa      	ldrb	r2, [r7, #15]
 80095ac:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80095b0:	7bfb      	ldrb	r3, [r7, #15]
 80095b2:	4619      	mov	r1, r3
 80095b4:	6878      	ldr	r0, [r7, #4]
 80095b6:	f000 fe81 	bl	800a2bc <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80095ba:	6878      	ldr	r0, [r7, #4]
 80095bc:	f000 fa7a 	bl	8009ab4 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80095c0:	7bfb      	ldrb	r3, [r7, #15]
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d004      	beq.n	80095d0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	2202      	movs	r2, #2
 80095ca:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80095ce:	e009      	b.n	80095e4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	2201      	movs	r2, #1
 80095d4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80095d8:	e004      	b.n	80095e4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80095da:	6839      	ldr	r1, [r7, #0]
 80095dc:	6878      	ldr	r0, [r7, #4]
 80095de:	f000 f99e 	bl	800991e <USBD_CtlError>
  }
}
 80095e2:	bf00      	nop
 80095e4:	bf00      	nop
 80095e6:	3710      	adds	r7, #16
 80095e8:	46bd      	mov	sp, r7
 80095ea:	bd80      	pop	{r7, pc}

080095ec <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80095ec:	b580      	push	{r7, lr}
 80095ee:	b084      	sub	sp, #16
 80095f0:	af00      	add	r7, sp, #0
 80095f2:	6078      	str	r0, [r7, #4]
 80095f4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80095f6:	2300      	movs	r3, #0
 80095f8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80095fa:	683b      	ldr	r3, [r7, #0]
 80095fc:	885b      	ldrh	r3, [r3, #2]
 80095fe:	b2da      	uxtb	r2, r3
 8009600:	4b4e      	ldr	r3, [pc, #312]	; (800973c <USBD_SetConfig+0x150>)
 8009602:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009604:	4b4d      	ldr	r3, [pc, #308]	; (800973c <USBD_SetConfig+0x150>)
 8009606:	781b      	ldrb	r3, [r3, #0]
 8009608:	2b01      	cmp	r3, #1
 800960a:	d905      	bls.n	8009618 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800960c:	6839      	ldr	r1, [r7, #0]
 800960e:	6878      	ldr	r0, [r7, #4]
 8009610:	f000 f985 	bl	800991e <USBD_CtlError>
    return USBD_FAIL;
 8009614:	2303      	movs	r3, #3
 8009616:	e08c      	b.n	8009732 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800961e:	b2db      	uxtb	r3, r3
 8009620:	2b02      	cmp	r3, #2
 8009622:	d002      	beq.n	800962a <USBD_SetConfig+0x3e>
 8009624:	2b03      	cmp	r3, #3
 8009626:	d029      	beq.n	800967c <USBD_SetConfig+0x90>
 8009628:	e075      	b.n	8009716 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800962a:	4b44      	ldr	r3, [pc, #272]	; (800973c <USBD_SetConfig+0x150>)
 800962c:	781b      	ldrb	r3, [r3, #0]
 800962e:	2b00      	cmp	r3, #0
 8009630:	d020      	beq.n	8009674 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8009632:	4b42      	ldr	r3, [pc, #264]	; (800973c <USBD_SetConfig+0x150>)
 8009634:	781b      	ldrb	r3, [r3, #0]
 8009636:	461a      	mov	r2, r3
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800963c:	4b3f      	ldr	r3, [pc, #252]	; (800973c <USBD_SetConfig+0x150>)
 800963e:	781b      	ldrb	r3, [r3, #0]
 8009640:	4619      	mov	r1, r3
 8009642:	6878      	ldr	r0, [r7, #4]
 8009644:	f7fe ffe7 	bl	8008616 <USBD_SetClassConfig>
 8009648:	4603      	mov	r3, r0
 800964a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800964c:	7bfb      	ldrb	r3, [r7, #15]
 800964e:	2b00      	cmp	r3, #0
 8009650:	d008      	beq.n	8009664 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8009652:	6839      	ldr	r1, [r7, #0]
 8009654:	6878      	ldr	r0, [r7, #4]
 8009656:	f000 f962 	bl	800991e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	2202      	movs	r2, #2
 800965e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009662:	e065      	b.n	8009730 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8009664:	6878      	ldr	r0, [r7, #4]
 8009666:	f000 fa25 	bl	8009ab4 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	2203      	movs	r2, #3
 800966e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8009672:	e05d      	b.n	8009730 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8009674:	6878      	ldr	r0, [r7, #4]
 8009676:	f000 fa1d 	bl	8009ab4 <USBD_CtlSendStatus>
      break;
 800967a:	e059      	b.n	8009730 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800967c:	4b2f      	ldr	r3, [pc, #188]	; (800973c <USBD_SetConfig+0x150>)
 800967e:	781b      	ldrb	r3, [r3, #0]
 8009680:	2b00      	cmp	r3, #0
 8009682:	d112      	bne.n	80096aa <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	2202      	movs	r2, #2
 8009688:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800968c:	4b2b      	ldr	r3, [pc, #172]	; (800973c <USBD_SetConfig+0x150>)
 800968e:	781b      	ldrb	r3, [r3, #0]
 8009690:	461a      	mov	r2, r3
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009696:	4b29      	ldr	r3, [pc, #164]	; (800973c <USBD_SetConfig+0x150>)
 8009698:	781b      	ldrb	r3, [r3, #0]
 800969a:	4619      	mov	r1, r3
 800969c:	6878      	ldr	r0, [r7, #4]
 800969e:	f7fe ffd6 	bl	800864e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80096a2:	6878      	ldr	r0, [r7, #4]
 80096a4:	f000 fa06 	bl	8009ab4 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80096a8:	e042      	b.n	8009730 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80096aa:	4b24      	ldr	r3, [pc, #144]	; (800973c <USBD_SetConfig+0x150>)
 80096ac:	781b      	ldrb	r3, [r3, #0]
 80096ae:	461a      	mov	r2, r3
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	685b      	ldr	r3, [r3, #4]
 80096b4:	429a      	cmp	r2, r3
 80096b6:	d02a      	beq.n	800970e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	685b      	ldr	r3, [r3, #4]
 80096bc:	b2db      	uxtb	r3, r3
 80096be:	4619      	mov	r1, r3
 80096c0:	6878      	ldr	r0, [r7, #4]
 80096c2:	f7fe ffc4 	bl	800864e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80096c6:	4b1d      	ldr	r3, [pc, #116]	; (800973c <USBD_SetConfig+0x150>)
 80096c8:	781b      	ldrb	r3, [r3, #0]
 80096ca:	461a      	mov	r2, r3
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80096d0:	4b1a      	ldr	r3, [pc, #104]	; (800973c <USBD_SetConfig+0x150>)
 80096d2:	781b      	ldrb	r3, [r3, #0]
 80096d4:	4619      	mov	r1, r3
 80096d6:	6878      	ldr	r0, [r7, #4]
 80096d8:	f7fe ff9d 	bl	8008616 <USBD_SetClassConfig>
 80096dc:	4603      	mov	r3, r0
 80096de:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80096e0:	7bfb      	ldrb	r3, [r7, #15]
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d00f      	beq.n	8009706 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80096e6:	6839      	ldr	r1, [r7, #0]
 80096e8:	6878      	ldr	r0, [r7, #4]
 80096ea:	f000 f918 	bl	800991e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	685b      	ldr	r3, [r3, #4]
 80096f2:	b2db      	uxtb	r3, r3
 80096f4:	4619      	mov	r1, r3
 80096f6:	6878      	ldr	r0, [r7, #4]
 80096f8:	f7fe ffa9 	bl	800864e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	2202      	movs	r2, #2
 8009700:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8009704:	e014      	b.n	8009730 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8009706:	6878      	ldr	r0, [r7, #4]
 8009708:	f000 f9d4 	bl	8009ab4 <USBD_CtlSendStatus>
      break;
 800970c:	e010      	b.n	8009730 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800970e:	6878      	ldr	r0, [r7, #4]
 8009710:	f000 f9d0 	bl	8009ab4 <USBD_CtlSendStatus>
      break;
 8009714:	e00c      	b.n	8009730 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8009716:	6839      	ldr	r1, [r7, #0]
 8009718:	6878      	ldr	r0, [r7, #4]
 800971a:	f000 f900 	bl	800991e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800971e:	4b07      	ldr	r3, [pc, #28]	; (800973c <USBD_SetConfig+0x150>)
 8009720:	781b      	ldrb	r3, [r3, #0]
 8009722:	4619      	mov	r1, r3
 8009724:	6878      	ldr	r0, [r7, #4]
 8009726:	f7fe ff92 	bl	800864e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800972a:	2303      	movs	r3, #3
 800972c:	73fb      	strb	r3, [r7, #15]
      break;
 800972e:	bf00      	nop
  }

  return ret;
 8009730:	7bfb      	ldrb	r3, [r7, #15]
}
 8009732:	4618      	mov	r0, r3
 8009734:	3710      	adds	r7, #16
 8009736:	46bd      	mov	sp, r7
 8009738:	bd80      	pop	{r7, pc}
 800973a:	bf00      	nop
 800973c:	20000734 	.word	0x20000734

08009740 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009740:	b580      	push	{r7, lr}
 8009742:	b082      	sub	sp, #8
 8009744:	af00      	add	r7, sp, #0
 8009746:	6078      	str	r0, [r7, #4]
 8009748:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800974a:	683b      	ldr	r3, [r7, #0]
 800974c:	88db      	ldrh	r3, [r3, #6]
 800974e:	2b01      	cmp	r3, #1
 8009750:	d004      	beq.n	800975c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009752:	6839      	ldr	r1, [r7, #0]
 8009754:	6878      	ldr	r0, [r7, #4]
 8009756:	f000 f8e2 	bl	800991e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800975a:	e023      	b.n	80097a4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009762:	b2db      	uxtb	r3, r3
 8009764:	2b02      	cmp	r3, #2
 8009766:	dc02      	bgt.n	800976e <USBD_GetConfig+0x2e>
 8009768:	2b00      	cmp	r3, #0
 800976a:	dc03      	bgt.n	8009774 <USBD_GetConfig+0x34>
 800976c:	e015      	b.n	800979a <USBD_GetConfig+0x5a>
 800976e:	2b03      	cmp	r3, #3
 8009770:	d00b      	beq.n	800978a <USBD_GetConfig+0x4a>
 8009772:	e012      	b.n	800979a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	2200      	movs	r2, #0
 8009778:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	3308      	adds	r3, #8
 800977e:	2201      	movs	r2, #1
 8009780:	4619      	mov	r1, r3
 8009782:	6878      	ldr	r0, [r7, #4]
 8009784:	f000 f93c 	bl	8009a00 <USBD_CtlSendData>
        break;
 8009788:	e00c      	b.n	80097a4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	3304      	adds	r3, #4
 800978e:	2201      	movs	r2, #1
 8009790:	4619      	mov	r1, r3
 8009792:	6878      	ldr	r0, [r7, #4]
 8009794:	f000 f934 	bl	8009a00 <USBD_CtlSendData>
        break;
 8009798:	e004      	b.n	80097a4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800979a:	6839      	ldr	r1, [r7, #0]
 800979c:	6878      	ldr	r0, [r7, #4]
 800979e:	f000 f8be 	bl	800991e <USBD_CtlError>
        break;
 80097a2:	bf00      	nop
}
 80097a4:	bf00      	nop
 80097a6:	3708      	adds	r7, #8
 80097a8:	46bd      	mov	sp, r7
 80097aa:	bd80      	pop	{r7, pc}

080097ac <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80097ac:	b580      	push	{r7, lr}
 80097ae:	b082      	sub	sp, #8
 80097b0:	af00      	add	r7, sp, #0
 80097b2:	6078      	str	r0, [r7, #4]
 80097b4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80097bc:	b2db      	uxtb	r3, r3
 80097be:	3b01      	subs	r3, #1
 80097c0:	2b02      	cmp	r3, #2
 80097c2:	d81e      	bhi.n	8009802 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80097c4:	683b      	ldr	r3, [r7, #0]
 80097c6:	88db      	ldrh	r3, [r3, #6]
 80097c8:	2b02      	cmp	r3, #2
 80097ca:	d004      	beq.n	80097d6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80097cc:	6839      	ldr	r1, [r7, #0]
 80097ce:	6878      	ldr	r0, [r7, #4]
 80097d0:	f000 f8a5 	bl	800991e <USBD_CtlError>
        break;
 80097d4:	e01a      	b.n	800980c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	2201      	movs	r2, #1
 80097da:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d005      	beq.n	80097f2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	68db      	ldr	r3, [r3, #12]
 80097ea:	f043 0202 	orr.w	r2, r3, #2
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	330c      	adds	r3, #12
 80097f6:	2202      	movs	r2, #2
 80097f8:	4619      	mov	r1, r3
 80097fa:	6878      	ldr	r0, [r7, #4]
 80097fc:	f000 f900 	bl	8009a00 <USBD_CtlSendData>
      break;
 8009800:	e004      	b.n	800980c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8009802:	6839      	ldr	r1, [r7, #0]
 8009804:	6878      	ldr	r0, [r7, #4]
 8009806:	f000 f88a 	bl	800991e <USBD_CtlError>
      break;
 800980a:	bf00      	nop
  }
}
 800980c:	bf00      	nop
 800980e:	3708      	adds	r7, #8
 8009810:	46bd      	mov	sp, r7
 8009812:	bd80      	pop	{r7, pc}

08009814 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009814:	b580      	push	{r7, lr}
 8009816:	b082      	sub	sp, #8
 8009818:	af00      	add	r7, sp, #0
 800981a:	6078      	str	r0, [r7, #4]
 800981c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800981e:	683b      	ldr	r3, [r7, #0]
 8009820:	885b      	ldrh	r3, [r3, #2]
 8009822:	2b01      	cmp	r3, #1
 8009824:	d107      	bne.n	8009836 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	2201      	movs	r2, #1
 800982a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800982e:	6878      	ldr	r0, [r7, #4]
 8009830:	f000 f940 	bl	8009ab4 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8009834:	e013      	b.n	800985e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8009836:	683b      	ldr	r3, [r7, #0]
 8009838:	885b      	ldrh	r3, [r3, #2]
 800983a:	2b02      	cmp	r3, #2
 800983c:	d10b      	bne.n	8009856 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800983e:	683b      	ldr	r3, [r7, #0]
 8009840:	889b      	ldrh	r3, [r3, #4]
 8009842:	0a1b      	lsrs	r3, r3, #8
 8009844:	b29b      	uxth	r3, r3
 8009846:	b2da      	uxtb	r2, r3
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800984e:	6878      	ldr	r0, [r7, #4]
 8009850:	f000 f930 	bl	8009ab4 <USBD_CtlSendStatus>
}
 8009854:	e003      	b.n	800985e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8009856:	6839      	ldr	r1, [r7, #0]
 8009858:	6878      	ldr	r0, [r7, #4]
 800985a:	f000 f860 	bl	800991e <USBD_CtlError>
}
 800985e:	bf00      	nop
 8009860:	3708      	adds	r7, #8
 8009862:	46bd      	mov	sp, r7
 8009864:	bd80      	pop	{r7, pc}

08009866 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009866:	b580      	push	{r7, lr}
 8009868:	b082      	sub	sp, #8
 800986a:	af00      	add	r7, sp, #0
 800986c:	6078      	str	r0, [r7, #4]
 800986e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009876:	b2db      	uxtb	r3, r3
 8009878:	3b01      	subs	r3, #1
 800987a:	2b02      	cmp	r3, #2
 800987c:	d80b      	bhi.n	8009896 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800987e:	683b      	ldr	r3, [r7, #0]
 8009880:	885b      	ldrh	r3, [r3, #2]
 8009882:	2b01      	cmp	r3, #1
 8009884:	d10c      	bne.n	80098a0 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	2200      	movs	r2, #0
 800988a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800988e:	6878      	ldr	r0, [r7, #4]
 8009890:	f000 f910 	bl	8009ab4 <USBD_CtlSendStatus>
      }
      break;
 8009894:	e004      	b.n	80098a0 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8009896:	6839      	ldr	r1, [r7, #0]
 8009898:	6878      	ldr	r0, [r7, #4]
 800989a:	f000 f840 	bl	800991e <USBD_CtlError>
      break;
 800989e:	e000      	b.n	80098a2 <USBD_ClrFeature+0x3c>
      break;
 80098a0:	bf00      	nop
  }
}
 80098a2:	bf00      	nop
 80098a4:	3708      	adds	r7, #8
 80098a6:	46bd      	mov	sp, r7
 80098a8:	bd80      	pop	{r7, pc}

080098aa <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80098aa:	b580      	push	{r7, lr}
 80098ac:	b084      	sub	sp, #16
 80098ae:	af00      	add	r7, sp, #0
 80098b0:	6078      	str	r0, [r7, #4]
 80098b2:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80098b4:	683b      	ldr	r3, [r7, #0]
 80098b6:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	781a      	ldrb	r2, [r3, #0]
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	3301      	adds	r3, #1
 80098c4:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	781a      	ldrb	r2, [r3, #0]
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	3301      	adds	r3, #1
 80098d2:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80098d4:	68f8      	ldr	r0, [r7, #12]
 80098d6:	f7ff fa41 	bl	8008d5c <SWAPBYTE>
 80098da:	4603      	mov	r3, r0
 80098dc:	461a      	mov	r2, r3
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	3301      	adds	r3, #1
 80098e6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	3301      	adds	r3, #1
 80098ec:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80098ee:	68f8      	ldr	r0, [r7, #12]
 80098f0:	f7ff fa34 	bl	8008d5c <SWAPBYTE>
 80098f4:	4603      	mov	r3, r0
 80098f6:	461a      	mov	r2, r3
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80098fc:	68fb      	ldr	r3, [r7, #12]
 80098fe:	3301      	adds	r3, #1
 8009900:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	3301      	adds	r3, #1
 8009906:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8009908:	68f8      	ldr	r0, [r7, #12]
 800990a:	f7ff fa27 	bl	8008d5c <SWAPBYTE>
 800990e:	4603      	mov	r3, r0
 8009910:	461a      	mov	r2, r3
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	80da      	strh	r2, [r3, #6]
}
 8009916:	bf00      	nop
 8009918:	3710      	adds	r7, #16
 800991a:	46bd      	mov	sp, r7
 800991c:	bd80      	pop	{r7, pc}

0800991e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800991e:	b580      	push	{r7, lr}
 8009920:	b082      	sub	sp, #8
 8009922:	af00      	add	r7, sp, #0
 8009924:	6078      	str	r0, [r7, #4]
 8009926:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8009928:	2180      	movs	r1, #128	; 0x80
 800992a:	6878      	ldr	r0, [r7, #4]
 800992c:	f000 fc5c 	bl	800a1e8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8009930:	2100      	movs	r1, #0
 8009932:	6878      	ldr	r0, [r7, #4]
 8009934:	f000 fc58 	bl	800a1e8 <USBD_LL_StallEP>
}
 8009938:	bf00      	nop
 800993a:	3708      	adds	r7, #8
 800993c:	46bd      	mov	sp, r7
 800993e:	bd80      	pop	{r7, pc}

08009940 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009940:	b580      	push	{r7, lr}
 8009942:	b086      	sub	sp, #24
 8009944:	af00      	add	r7, sp, #0
 8009946:	60f8      	str	r0, [r7, #12]
 8009948:	60b9      	str	r1, [r7, #8]
 800994a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800994c:	2300      	movs	r3, #0
 800994e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8009950:	68fb      	ldr	r3, [r7, #12]
 8009952:	2b00      	cmp	r3, #0
 8009954:	d036      	beq.n	80099c4 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800995a:	6938      	ldr	r0, [r7, #16]
 800995c:	f000 f836 	bl	80099cc <USBD_GetLen>
 8009960:	4603      	mov	r3, r0
 8009962:	3301      	adds	r3, #1
 8009964:	b29b      	uxth	r3, r3
 8009966:	005b      	lsls	r3, r3, #1
 8009968:	b29a      	uxth	r2, r3
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800996e:	7dfb      	ldrb	r3, [r7, #23]
 8009970:	68ba      	ldr	r2, [r7, #8]
 8009972:	4413      	add	r3, r2
 8009974:	687a      	ldr	r2, [r7, #4]
 8009976:	7812      	ldrb	r2, [r2, #0]
 8009978:	701a      	strb	r2, [r3, #0]
  idx++;
 800997a:	7dfb      	ldrb	r3, [r7, #23]
 800997c:	3301      	adds	r3, #1
 800997e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8009980:	7dfb      	ldrb	r3, [r7, #23]
 8009982:	68ba      	ldr	r2, [r7, #8]
 8009984:	4413      	add	r3, r2
 8009986:	2203      	movs	r2, #3
 8009988:	701a      	strb	r2, [r3, #0]
  idx++;
 800998a:	7dfb      	ldrb	r3, [r7, #23]
 800998c:	3301      	adds	r3, #1
 800998e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8009990:	e013      	b.n	80099ba <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8009992:	7dfb      	ldrb	r3, [r7, #23]
 8009994:	68ba      	ldr	r2, [r7, #8]
 8009996:	4413      	add	r3, r2
 8009998:	693a      	ldr	r2, [r7, #16]
 800999a:	7812      	ldrb	r2, [r2, #0]
 800999c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800999e:	693b      	ldr	r3, [r7, #16]
 80099a0:	3301      	adds	r3, #1
 80099a2:	613b      	str	r3, [r7, #16]
    idx++;
 80099a4:	7dfb      	ldrb	r3, [r7, #23]
 80099a6:	3301      	adds	r3, #1
 80099a8:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80099aa:	7dfb      	ldrb	r3, [r7, #23]
 80099ac:	68ba      	ldr	r2, [r7, #8]
 80099ae:	4413      	add	r3, r2
 80099b0:	2200      	movs	r2, #0
 80099b2:	701a      	strb	r2, [r3, #0]
    idx++;
 80099b4:	7dfb      	ldrb	r3, [r7, #23]
 80099b6:	3301      	adds	r3, #1
 80099b8:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80099ba:	693b      	ldr	r3, [r7, #16]
 80099bc:	781b      	ldrb	r3, [r3, #0]
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d1e7      	bne.n	8009992 <USBD_GetString+0x52>
 80099c2:	e000      	b.n	80099c6 <USBD_GetString+0x86>
    return;
 80099c4:	bf00      	nop
  }
}
 80099c6:	3718      	adds	r7, #24
 80099c8:	46bd      	mov	sp, r7
 80099ca:	bd80      	pop	{r7, pc}

080099cc <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80099cc:	b480      	push	{r7}
 80099ce:	b085      	sub	sp, #20
 80099d0:	af00      	add	r7, sp, #0
 80099d2:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80099d4:	2300      	movs	r3, #0
 80099d6:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80099dc:	e005      	b.n	80099ea <USBD_GetLen+0x1e>
  {
    len++;
 80099de:	7bfb      	ldrb	r3, [r7, #15]
 80099e0:	3301      	adds	r3, #1
 80099e2:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80099e4:	68bb      	ldr	r3, [r7, #8]
 80099e6:	3301      	adds	r3, #1
 80099e8:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80099ea:	68bb      	ldr	r3, [r7, #8]
 80099ec:	781b      	ldrb	r3, [r3, #0]
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d1f5      	bne.n	80099de <USBD_GetLen+0x12>
  }

  return len;
 80099f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80099f4:	4618      	mov	r0, r3
 80099f6:	3714      	adds	r7, #20
 80099f8:	46bd      	mov	sp, r7
 80099fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099fe:	4770      	bx	lr

08009a00 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8009a00:	b580      	push	{r7, lr}
 8009a02:	b084      	sub	sp, #16
 8009a04:	af00      	add	r7, sp, #0
 8009a06:	60f8      	str	r0, [r7, #12]
 8009a08:	60b9      	str	r1, [r7, #8]
 8009a0a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009a0c:	68fb      	ldr	r3, [r7, #12]
 8009a0e:	2202      	movs	r2, #2
 8009a10:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	687a      	ldr	r2, [r7, #4]
 8009a18:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8009a1a:	68fb      	ldr	r3, [r7, #12]
 8009a1c:	687a      	ldr	r2, [r7, #4]
 8009a1e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	68ba      	ldr	r2, [r7, #8]
 8009a24:	2100      	movs	r1, #0
 8009a26:	68f8      	ldr	r0, [r7, #12]
 8009a28:	f000 fc67 	bl	800a2fa <USBD_LL_Transmit>

  return USBD_OK;
 8009a2c:	2300      	movs	r3, #0
}
 8009a2e:	4618      	mov	r0, r3
 8009a30:	3710      	adds	r7, #16
 8009a32:	46bd      	mov	sp, r7
 8009a34:	bd80      	pop	{r7, pc}

08009a36 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8009a36:	b580      	push	{r7, lr}
 8009a38:	b084      	sub	sp, #16
 8009a3a:	af00      	add	r7, sp, #0
 8009a3c:	60f8      	str	r0, [r7, #12]
 8009a3e:	60b9      	str	r1, [r7, #8]
 8009a40:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	68ba      	ldr	r2, [r7, #8]
 8009a46:	2100      	movs	r1, #0
 8009a48:	68f8      	ldr	r0, [r7, #12]
 8009a4a:	f000 fc56 	bl	800a2fa <USBD_LL_Transmit>

  return USBD_OK;
 8009a4e:	2300      	movs	r3, #0
}
 8009a50:	4618      	mov	r0, r3
 8009a52:	3710      	adds	r7, #16
 8009a54:	46bd      	mov	sp, r7
 8009a56:	bd80      	pop	{r7, pc}

08009a58 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8009a58:	b580      	push	{r7, lr}
 8009a5a:	b084      	sub	sp, #16
 8009a5c:	af00      	add	r7, sp, #0
 8009a5e:	60f8      	str	r0, [r7, #12]
 8009a60:	60b9      	str	r1, [r7, #8]
 8009a62:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009a64:	68fb      	ldr	r3, [r7, #12]
 8009a66:	2203      	movs	r2, #3
 8009a68:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8009a6c:	68fb      	ldr	r3, [r7, #12]
 8009a6e:	687a      	ldr	r2, [r7, #4]
 8009a70:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	687a      	ldr	r2, [r7, #4]
 8009a78:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	68ba      	ldr	r2, [r7, #8]
 8009a80:	2100      	movs	r1, #0
 8009a82:	68f8      	ldr	r0, [r7, #12]
 8009a84:	f000 fc5a 	bl	800a33c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009a88:	2300      	movs	r3, #0
}
 8009a8a:	4618      	mov	r0, r3
 8009a8c:	3710      	adds	r7, #16
 8009a8e:	46bd      	mov	sp, r7
 8009a90:	bd80      	pop	{r7, pc}

08009a92 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8009a92:	b580      	push	{r7, lr}
 8009a94:	b084      	sub	sp, #16
 8009a96:	af00      	add	r7, sp, #0
 8009a98:	60f8      	str	r0, [r7, #12]
 8009a9a:	60b9      	str	r1, [r7, #8]
 8009a9c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	68ba      	ldr	r2, [r7, #8]
 8009aa2:	2100      	movs	r1, #0
 8009aa4:	68f8      	ldr	r0, [r7, #12]
 8009aa6:	f000 fc49 	bl	800a33c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009aaa:	2300      	movs	r3, #0
}
 8009aac:	4618      	mov	r0, r3
 8009aae:	3710      	adds	r7, #16
 8009ab0:	46bd      	mov	sp, r7
 8009ab2:	bd80      	pop	{r7, pc}

08009ab4 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009ab4:	b580      	push	{r7, lr}
 8009ab6:	b082      	sub	sp, #8
 8009ab8:	af00      	add	r7, sp, #0
 8009aba:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	2204      	movs	r2, #4
 8009ac0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009ac4:	2300      	movs	r3, #0
 8009ac6:	2200      	movs	r2, #0
 8009ac8:	2100      	movs	r1, #0
 8009aca:	6878      	ldr	r0, [r7, #4]
 8009acc:	f000 fc15 	bl	800a2fa <USBD_LL_Transmit>

  return USBD_OK;
 8009ad0:	2300      	movs	r3, #0
}
 8009ad2:	4618      	mov	r0, r3
 8009ad4:	3708      	adds	r7, #8
 8009ad6:	46bd      	mov	sp, r7
 8009ad8:	bd80      	pop	{r7, pc}

08009ada <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009ada:	b580      	push	{r7, lr}
 8009adc:	b082      	sub	sp, #8
 8009ade:	af00      	add	r7, sp, #0
 8009ae0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	2205      	movs	r2, #5
 8009ae6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009aea:	2300      	movs	r3, #0
 8009aec:	2200      	movs	r2, #0
 8009aee:	2100      	movs	r1, #0
 8009af0:	6878      	ldr	r0, [r7, #4]
 8009af2:	f000 fc23 	bl	800a33c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009af6:	2300      	movs	r3, #0
}
 8009af8:	4618      	mov	r0, r3
 8009afa:	3708      	adds	r7, #8
 8009afc:	46bd      	mov	sp, r7
 8009afe:	bd80      	pop	{r7, pc}

08009b00 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009b00:	b580      	push	{r7, lr}
 8009b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009b04:	2200      	movs	r2, #0
 8009b06:	4912      	ldr	r1, [pc, #72]	; (8009b50 <MX_USB_DEVICE_Init+0x50>)
 8009b08:	4812      	ldr	r0, [pc, #72]	; (8009b54 <MX_USB_DEVICE_Init+0x54>)
 8009b0a:	f7fe fd07 	bl	800851c <USBD_Init>
 8009b0e:	4603      	mov	r3, r0
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	d001      	beq.n	8009b18 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009b14:	f7f7 fb4a 	bl	80011ac <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CUSTOM_HID) != USBD_OK)
 8009b18:	490f      	ldr	r1, [pc, #60]	; (8009b58 <MX_USB_DEVICE_Init+0x58>)
 8009b1a:	480e      	ldr	r0, [pc, #56]	; (8009b54 <MX_USB_DEVICE_Init+0x54>)
 8009b1c:	f7fe fd2e 	bl	800857c <USBD_RegisterClass>
 8009b20:	4603      	mov	r3, r0
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	d001      	beq.n	8009b2a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8009b26:	f7f7 fb41 	bl	80011ac <Error_Handler>
  }
  if (USBD_CUSTOM_HID_RegisterInterface(&hUsbDeviceFS, &USBD_CustomHID_fops_FS) != USBD_OK)
 8009b2a:	490c      	ldr	r1, [pc, #48]	; (8009b5c <MX_USB_DEVICE_Init+0x5c>)
 8009b2c:	4809      	ldr	r0, [pc, #36]	; (8009b54 <MX_USB_DEVICE_Init+0x54>)
 8009b2e:	f7fe fcdb 	bl	80084e8 <USBD_CUSTOM_HID_RegisterInterface>
 8009b32:	4603      	mov	r3, r0
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	d001      	beq.n	8009b3c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8009b38:	f7f7 fb38 	bl	80011ac <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8009b3c:	4805      	ldr	r0, [pc, #20]	; (8009b54 <MX_USB_DEVICE_Init+0x54>)
 8009b3e:	f7fe fd53 	bl	80085e8 <USBD_Start>
 8009b42:	4603      	mov	r3, r0
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d001      	beq.n	8009b4c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8009b48:	f7f7 fb30 	bl	80011ac <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009b4c:	bf00      	nop
 8009b4e:	bd80      	pop	{r7, pc}
 8009b50:	200001b8 	.word	0x200001b8
 8009b54:	20000738 	.word	0x20000738
 8009b58:	20000080 	.word	0x20000080
 8009b5c:	200001a8 	.word	0x200001a8

08009b60 <CUSTOM_HID_Init_FS>:
/**
  * @brief  Initializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_Init_FS(void)
{
 8009b60:	b480      	push	{r7}
 8009b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009b64:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8009b66:	4618      	mov	r0, r3
 8009b68:	46bd      	mov	sp, r7
 8009b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b6e:	4770      	bx	lr

08009b70 <CUSTOM_HID_DeInit_FS>:
/**
  * @brief  DeInitializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_DeInit_FS(void)
{
 8009b70:	b480      	push	{r7}
 8009b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 8009b74:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009b76:	4618      	mov	r0, r3
 8009b78:	46bd      	mov	sp, r7
 8009b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b7e:	4770      	bx	lr

08009b80 <CUSTOM_HID_OutEvent_FS>:
  * @param  event_idx: Event index
  * @param  state: Event state
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_OutEvent_FS(uint8_t event_idx, uint8_t state)
{
 8009b80:	b580      	push	{r7, lr}
 8009b82:	b082      	sub	sp, #8
 8009b84:	af00      	add	r7, sp, #0
 8009b86:	4603      	mov	r3, r0
 8009b88:	460a      	mov	r2, r1
 8009b8a:	71fb      	strb	r3, [r7, #7]
 8009b8c:	4613      	mov	r3, r2
 8009b8e:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN 6 */
  UNUSED(event_idx);
  UNUSED(state);

  if ((state & 0b00000010) == 0b10) {
 8009b90:	79bb      	ldrb	r3, [r7, #6]
 8009b92:	f003 0302 	and.w	r3, r3, #2
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	d003      	beq.n	8009ba2 <CUSTOM_HID_OutEvent_FS+0x22>
	  set_caps(1);
 8009b9a:	2001      	movs	r0, #1
 8009b9c:	f7f6 fca2 	bl	80004e4 <set_caps>
 8009ba0:	e002      	b.n	8009ba8 <CUSTOM_HID_OutEvent_FS+0x28>
  } else {
	  set_caps(0);
 8009ba2:	2000      	movs	r0, #0
 8009ba4:	f7f6 fc9e 	bl	80004e4 <set_caps>
  }

  /* Start next USB packet transfer once data processing is completed */
  if (USBD_CUSTOM_HID_ReceivePacket(&hUsbDeviceFS) != (uint8_t)USBD_OK)
 8009ba8:	4806      	ldr	r0, [pc, #24]	; (8009bc4 <CUSTOM_HID_OutEvent_FS+0x44>)
 8009baa:	f7fe fc3b 	bl	8008424 <USBD_CUSTOM_HID_ReceivePacket>
 8009bae:	4603      	mov	r3, r0
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	d002      	beq.n	8009bba <CUSTOM_HID_OutEvent_FS+0x3a>
  {
    return -1;
 8009bb4:	f04f 33ff 	mov.w	r3, #4294967295
 8009bb8:	e000      	b.n	8009bbc <CUSTOM_HID_OutEvent_FS+0x3c>
  }

  return (USBD_OK);
 8009bba:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8009bbc:	4618      	mov	r0, r3
 8009bbe:	3708      	adds	r7, #8
 8009bc0:	46bd      	mov	sp, r7
 8009bc2:	bd80      	pop	{r7, pc}
 8009bc4:	20000738 	.word	0x20000738

08009bc8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009bc8:	b480      	push	{r7}
 8009bca:	b083      	sub	sp, #12
 8009bcc:	af00      	add	r7, sp, #0
 8009bce:	4603      	mov	r3, r0
 8009bd0:	6039      	str	r1, [r7, #0]
 8009bd2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009bd4:	683b      	ldr	r3, [r7, #0]
 8009bd6:	2212      	movs	r2, #18
 8009bd8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8009bda:	4b03      	ldr	r3, [pc, #12]	; (8009be8 <USBD_FS_DeviceDescriptor+0x20>)
}
 8009bdc:	4618      	mov	r0, r3
 8009bde:	370c      	adds	r7, #12
 8009be0:	46bd      	mov	sp, r7
 8009be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009be6:	4770      	bx	lr
 8009be8:	200001d4 	.word	0x200001d4

08009bec <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009bec:	b480      	push	{r7}
 8009bee:	b083      	sub	sp, #12
 8009bf0:	af00      	add	r7, sp, #0
 8009bf2:	4603      	mov	r3, r0
 8009bf4:	6039      	str	r1, [r7, #0]
 8009bf6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009bf8:	683b      	ldr	r3, [r7, #0]
 8009bfa:	2204      	movs	r2, #4
 8009bfc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009bfe:	4b03      	ldr	r3, [pc, #12]	; (8009c0c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009c00:	4618      	mov	r0, r3
 8009c02:	370c      	adds	r7, #12
 8009c04:	46bd      	mov	sp, r7
 8009c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c0a:	4770      	bx	lr
 8009c0c:	200001e8 	.word	0x200001e8

08009c10 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009c10:	b580      	push	{r7, lr}
 8009c12:	b082      	sub	sp, #8
 8009c14:	af00      	add	r7, sp, #0
 8009c16:	4603      	mov	r3, r0
 8009c18:	6039      	str	r1, [r7, #0]
 8009c1a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009c1c:	79fb      	ldrb	r3, [r7, #7]
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d105      	bne.n	8009c2e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009c22:	683a      	ldr	r2, [r7, #0]
 8009c24:	4907      	ldr	r1, [pc, #28]	; (8009c44 <USBD_FS_ProductStrDescriptor+0x34>)
 8009c26:	4808      	ldr	r0, [pc, #32]	; (8009c48 <USBD_FS_ProductStrDescriptor+0x38>)
 8009c28:	f7ff fe8a 	bl	8009940 <USBD_GetString>
 8009c2c:	e004      	b.n	8009c38 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009c2e:	683a      	ldr	r2, [r7, #0]
 8009c30:	4904      	ldr	r1, [pc, #16]	; (8009c44 <USBD_FS_ProductStrDescriptor+0x34>)
 8009c32:	4805      	ldr	r0, [pc, #20]	; (8009c48 <USBD_FS_ProductStrDescriptor+0x38>)
 8009c34:	f7ff fe84 	bl	8009940 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009c38:	4b02      	ldr	r3, [pc, #8]	; (8009c44 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8009c3a:	4618      	mov	r0, r3
 8009c3c:	3708      	adds	r7, #8
 8009c3e:	46bd      	mov	sp, r7
 8009c40:	bd80      	pop	{r7, pc}
 8009c42:	bf00      	nop
 8009c44:	20000a14 	.word	0x20000a14
 8009c48:	0800a4bc 	.word	0x0800a4bc

08009c4c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009c4c:	b580      	push	{r7, lr}
 8009c4e:	b082      	sub	sp, #8
 8009c50:	af00      	add	r7, sp, #0
 8009c52:	4603      	mov	r3, r0
 8009c54:	6039      	str	r1, [r7, #0]
 8009c56:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009c58:	683a      	ldr	r2, [r7, #0]
 8009c5a:	4904      	ldr	r1, [pc, #16]	; (8009c6c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009c5c:	4804      	ldr	r0, [pc, #16]	; (8009c70 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8009c5e:	f7ff fe6f 	bl	8009940 <USBD_GetString>
  return USBD_StrDesc;
 8009c62:	4b02      	ldr	r3, [pc, #8]	; (8009c6c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009c64:	4618      	mov	r0, r3
 8009c66:	3708      	adds	r7, #8
 8009c68:	46bd      	mov	sp, r7
 8009c6a:	bd80      	pop	{r7, pc}
 8009c6c:	20000a14 	.word	0x20000a14
 8009c70:	0800a4dc 	.word	0x0800a4dc

08009c74 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009c74:	b580      	push	{r7, lr}
 8009c76:	b082      	sub	sp, #8
 8009c78:	af00      	add	r7, sp, #0
 8009c7a:	4603      	mov	r3, r0
 8009c7c:	6039      	str	r1, [r7, #0]
 8009c7e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009c80:	683b      	ldr	r3, [r7, #0]
 8009c82:	221a      	movs	r2, #26
 8009c84:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009c86:	f000 f843 	bl	8009d10 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8009c8a:	4b02      	ldr	r3, [pc, #8]	; (8009c94 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8009c8c:	4618      	mov	r0, r3
 8009c8e:	3708      	adds	r7, #8
 8009c90:	46bd      	mov	sp, r7
 8009c92:	bd80      	pop	{r7, pc}
 8009c94:	200001ec 	.word	0x200001ec

08009c98 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009c98:	b580      	push	{r7, lr}
 8009c9a:	b082      	sub	sp, #8
 8009c9c:	af00      	add	r7, sp, #0
 8009c9e:	4603      	mov	r3, r0
 8009ca0:	6039      	str	r1, [r7, #0]
 8009ca2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009ca4:	79fb      	ldrb	r3, [r7, #7]
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	d105      	bne.n	8009cb6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009caa:	683a      	ldr	r2, [r7, #0]
 8009cac:	4907      	ldr	r1, [pc, #28]	; (8009ccc <USBD_FS_ConfigStrDescriptor+0x34>)
 8009cae:	4808      	ldr	r0, [pc, #32]	; (8009cd0 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009cb0:	f7ff fe46 	bl	8009940 <USBD_GetString>
 8009cb4:	e004      	b.n	8009cc0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009cb6:	683a      	ldr	r2, [r7, #0]
 8009cb8:	4904      	ldr	r1, [pc, #16]	; (8009ccc <USBD_FS_ConfigStrDescriptor+0x34>)
 8009cba:	4805      	ldr	r0, [pc, #20]	; (8009cd0 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009cbc:	f7ff fe40 	bl	8009940 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009cc0:	4b02      	ldr	r3, [pc, #8]	; (8009ccc <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8009cc2:	4618      	mov	r0, r3
 8009cc4:	3708      	adds	r7, #8
 8009cc6:	46bd      	mov	sp, r7
 8009cc8:	bd80      	pop	{r7, pc}
 8009cca:	bf00      	nop
 8009ccc:	20000a14 	.word	0x20000a14
 8009cd0:	0800a4f0 	.word	0x0800a4f0

08009cd4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009cd4:	b580      	push	{r7, lr}
 8009cd6:	b082      	sub	sp, #8
 8009cd8:	af00      	add	r7, sp, #0
 8009cda:	4603      	mov	r3, r0
 8009cdc:	6039      	str	r1, [r7, #0]
 8009cde:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009ce0:	79fb      	ldrb	r3, [r7, #7]
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	d105      	bne.n	8009cf2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009ce6:	683a      	ldr	r2, [r7, #0]
 8009ce8:	4907      	ldr	r1, [pc, #28]	; (8009d08 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009cea:	4808      	ldr	r0, [pc, #32]	; (8009d0c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009cec:	f7ff fe28 	bl	8009940 <USBD_GetString>
 8009cf0:	e004      	b.n	8009cfc <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009cf2:	683a      	ldr	r2, [r7, #0]
 8009cf4:	4904      	ldr	r1, [pc, #16]	; (8009d08 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009cf6:	4805      	ldr	r0, [pc, #20]	; (8009d0c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009cf8:	f7ff fe22 	bl	8009940 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009cfc:	4b02      	ldr	r3, [pc, #8]	; (8009d08 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8009cfe:	4618      	mov	r0, r3
 8009d00:	3708      	adds	r7, #8
 8009d02:	46bd      	mov	sp, r7
 8009d04:	bd80      	pop	{r7, pc}
 8009d06:	bf00      	nop
 8009d08:	20000a14 	.word	0x20000a14
 8009d0c:	0800a504 	.word	0x0800a504

08009d10 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009d10:	b580      	push	{r7, lr}
 8009d12:	b084      	sub	sp, #16
 8009d14:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009d16:	4b0f      	ldr	r3, [pc, #60]	; (8009d54 <Get_SerialNum+0x44>)
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009d1c:	4b0e      	ldr	r3, [pc, #56]	; (8009d58 <Get_SerialNum+0x48>)
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009d22:	4b0e      	ldr	r3, [pc, #56]	; (8009d5c <Get_SerialNum+0x4c>)
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009d28:	68fa      	ldr	r2, [r7, #12]
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	4413      	add	r3, r2
 8009d2e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	d009      	beq.n	8009d4a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009d36:	2208      	movs	r2, #8
 8009d38:	4909      	ldr	r1, [pc, #36]	; (8009d60 <Get_SerialNum+0x50>)
 8009d3a:	68f8      	ldr	r0, [r7, #12]
 8009d3c:	f000 f814 	bl	8009d68 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009d40:	2204      	movs	r2, #4
 8009d42:	4908      	ldr	r1, [pc, #32]	; (8009d64 <Get_SerialNum+0x54>)
 8009d44:	68b8      	ldr	r0, [r7, #8]
 8009d46:	f000 f80f 	bl	8009d68 <IntToUnicode>
  }
}
 8009d4a:	bf00      	nop
 8009d4c:	3710      	adds	r7, #16
 8009d4e:	46bd      	mov	sp, r7
 8009d50:	bd80      	pop	{r7, pc}
 8009d52:	bf00      	nop
 8009d54:	1fff7a10 	.word	0x1fff7a10
 8009d58:	1fff7a14 	.word	0x1fff7a14
 8009d5c:	1fff7a18 	.word	0x1fff7a18
 8009d60:	200001ee 	.word	0x200001ee
 8009d64:	200001fe 	.word	0x200001fe

08009d68 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009d68:	b480      	push	{r7}
 8009d6a:	b087      	sub	sp, #28
 8009d6c:	af00      	add	r7, sp, #0
 8009d6e:	60f8      	str	r0, [r7, #12]
 8009d70:	60b9      	str	r1, [r7, #8]
 8009d72:	4613      	mov	r3, r2
 8009d74:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009d76:	2300      	movs	r3, #0
 8009d78:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009d7a:	2300      	movs	r3, #0
 8009d7c:	75fb      	strb	r3, [r7, #23]
 8009d7e:	e027      	b.n	8009dd0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009d80:	68fb      	ldr	r3, [r7, #12]
 8009d82:	0f1b      	lsrs	r3, r3, #28
 8009d84:	2b09      	cmp	r3, #9
 8009d86:	d80b      	bhi.n	8009da0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009d88:	68fb      	ldr	r3, [r7, #12]
 8009d8a:	0f1b      	lsrs	r3, r3, #28
 8009d8c:	b2da      	uxtb	r2, r3
 8009d8e:	7dfb      	ldrb	r3, [r7, #23]
 8009d90:	005b      	lsls	r3, r3, #1
 8009d92:	4619      	mov	r1, r3
 8009d94:	68bb      	ldr	r3, [r7, #8]
 8009d96:	440b      	add	r3, r1
 8009d98:	3230      	adds	r2, #48	; 0x30
 8009d9a:	b2d2      	uxtb	r2, r2
 8009d9c:	701a      	strb	r2, [r3, #0]
 8009d9e:	e00a      	b.n	8009db6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009da0:	68fb      	ldr	r3, [r7, #12]
 8009da2:	0f1b      	lsrs	r3, r3, #28
 8009da4:	b2da      	uxtb	r2, r3
 8009da6:	7dfb      	ldrb	r3, [r7, #23]
 8009da8:	005b      	lsls	r3, r3, #1
 8009daa:	4619      	mov	r1, r3
 8009dac:	68bb      	ldr	r3, [r7, #8]
 8009dae:	440b      	add	r3, r1
 8009db0:	3237      	adds	r2, #55	; 0x37
 8009db2:	b2d2      	uxtb	r2, r2
 8009db4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009db6:	68fb      	ldr	r3, [r7, #12]
 8009db8:	011b      	lsls	r3, r3, #4
 8009dba:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009dbc:	7dfb      	ldrb	r3, [r7, #23]
 8009dbe:	005b      	lsls	r3, r3, #1
 8009dc0:	3301      	adds	r3, #1
 8009dc2:	68ba      	ldr	r2, [r7, #8]
 8009dc4:	4413      	add	r3, r2
 8009dc6:	2200      	movs	r2, #0
 8009dc8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009dca:	7dfb      	ldrb	r3, [r7, #23]
 8009dcc:	3301      	adds	r3, #1
 8009dce:	75fb      	strb	r3, [r7, #23]
 8009dd0:	7dfa      	ldrb	r2, [r7, #23]
 8009dd2:	79fb      	ldrb	r3, [r7, #7]
 8009dd4:	429a      	cmp	r2, r3
 8009dd6:	d3d3      	bcc.n	8009d80 <IntToUnicode+0x18>
  }
}
 8009dd8:	bf00      	nop
 8009dda:	bf00      	nop
 8009ddc:	371c      	adds	r7, #28
 8009dde:	46bd      	mov	sp, r7
 8009de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009de4:	4770      	bx	lr
	...

08009de8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009de8:	b580      	push	{r7, lr}
 8009dea:	b08a      	sub	sp, #40	; 0x28
 8009dec:	af00      	add	r7, sp, #0
 8009dee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009df0:	f107 0314 	add.w	r3, r7, #20
 8009df4:	2200      	movs	r2, #0
 8009df6:	601a      	str	r2, [r3, #0]
 8009df8:	605a      	str	r2, [r3, #4]
 8009dfa:	609a      	str	r2, [r3, #8]
 8009dfc:	60da      	str	r2, [r3, #12]
 8009dfe:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009e08:	d147      	bne.n	8009e9a <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009e0a:	2300      	movs	r3, #0
 8009e0c:	613b      	str	r3, [r7, #16]
 8009e0e:	4b25      	ldr	r3, [pc, #148]	; (8009ea4 <HAL_PCD_MspInit+0xbc>)
 8009e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e12:	4a24      	ldr	r2, [pc, #144]	; (8009ea4 <HAL_PCD_MspInit+0xbc>)
 8009e14:	f043 0301 	orr.w	r3, r3, #1
 8009e18:	6313      	str	r3, [r2, #48]	; 0x30
 8009e1a:	4b22      	ldr	r3, [pc, #136]	; (8009ea4 <HAL_PCD_MspInit+0xbc>)
 8009e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e1e:	f003 0301 	and.w	r3, r3, #1
 8009e22:	613b      	str	r3, [r7, #16]
 8009e24:	693b      	ldr	r3, [r7, #16]
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    PA10     ------> USB_OTG_FS_ID
    PA9     ------> USB_OTG_FS_VBUS
    */
    GPIO_InitStruct.Pin = USB_FS_DP_Pin|USB_FS_DM_Pin|USB_FS_ID_Pin;
 8009e26:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8009e2a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009e2c:	2302      	movs	r3, #2
 8009e2e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009e30:	2300      	movs	r3, #0
 8009e32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009e34:	2300      	movs	r3, #0
 8009e36:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8009e38:	230a      	movs	r3, #10
 8009e3a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009e3c:	f107 0314 	add.w	r3, r7, #20
 8009e40:	4619      	mov	r1, r3
 8009e42:	4819      	ldr	r0, [pc, #100]	; (8009ea8 <HAL_PCD_MspInit+0xc0>)
 8009e44:	f7f9 f986 	bl	8003154 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8009e48:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009e4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009e4e:	2300      	movs	r3, #0
 8009e50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009e52:	2300      	movs	r3, #0
 8009e54:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8009e56:	f107 0314 	add.w	r3, r7, #20
 8009e5a:	4619      	mov	r1, r3
 8009e5c:	4812      	ldr	r0, [pc, #72]	; (8009ea8 <HAL_PCD_MspInit+0xc0>)
 8009e5e:	f7f9 f979 	bl	8003154 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8009e62:	4b10      	ldr	r3, [pc, #64]	; (8009ea4 <HAL_PCD_MspInit+0xbc>)
 8009e64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e66:	4a0f      	ldr	r2, [pc, #60]	; (8009ea4 <HAL_PCD_MspInit+0xbc>)
 8009e68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009e6c:	6353      	str	r3, [r2, #52]	; 0x34
 8009e6e:	2300      	movs	r3, #0
 8009e70:	60fb      	str	r3, [r7, #12]
 8009e72:	4b0c      	ldr	r3, [pc, #48]	; (8009ea4 <HAL_PCD_MspInit+0xbc>)
 8009e74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009e76:	4a0b      	ldr	r2, [pc, #44]	; (8009ea4 <HAL_PCD_MspInit+0xbc>)
 8009e78:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009e7c:	6453      	str	r3, [r2, #68]	; 0x44
 8009e7e:	4b09      	ldr	r3, [pc, #36]	; (8009ea4 <HAL_PCD_MspInit+0xbc>)
 8009e80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009e82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009e86:	60fb      	str	r3, [r7, #12]
 8009e88:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8009e8a:	2200      	movs	r2, #0
 8009e8c:	2100      	movs	r1, #0
 8009e8e:	2043      	movs	r0, #67	; 0x43
 8009e90:	f7f9 f84b 	bl	8002f2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8009e94:	2043      	movs	r0, #67	; 0x43
 8009e96:	f7f9 f864 	bl	8002f62 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8009e9a:	bf00      	nop
 8009e9c:	3728      	adds	r7, #40	; 0x28
 8009e9e:	46bd      	mov	sp, r7
 8009ea0:	bd80      	pop	{r7, pc}
 8009ea2:	bf00      	nop
 8009ea4:	40023800 	.word	0x40023800
 8009ea8:	40020000 	.word	0x40020000

08009eac <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009eac:	b580      	push	{r7, lr}
 8009eae:	b082      	sub	sp, #8
 8009eb0:	af00      	add	r7, sp, #0
 8009eb2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8009ec0:	4619      	mov	r1, r3
 8009ec2:	4610      	mov	r0, r2
 8009ec4:	f7fe fbdd 	bl	8008682 <USBD_LL_SetupStage>
}
 8009ec8:	bf00      	nop
 8009eca:	3708      	adds	r7, #8
 8009ecc:	46bd      	mov	sp, r7
 8009ece:	bd80      	pop	{r7, pc}

08009ed0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009ed0:	b580      	push	{r7, lr}
 8009ed2:	b082      	sub	sp, #8
 8009ed4:	af00      	add	r7, sp, #0
 8009ed6:	6078      	str	r0, [r7, #4]
 8009ed8:	460b      	mov	r3, r1
 8009eda:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8009ee2:	78fa      	ldrb	r2, [r7, #3]
 8009ee4:	6879      	ldr	r1, [r7, #4]
 8009ee6:	4613      	mov	r3, r2
 8009ee8:	00db      	lsls	r3, r3, #3
 8009eea:	4413      	add	r3, r2
 8009eec:	009b      	lsls	r3, r3, #2
 8009eee:	440b      	add	r3, r1
 8009ef0:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8009ef4:	681a      	ldr	r2, [r3, #0]
 8009ef6:	78fb      	ldrb	r3, [r7, #3]
 8009ef8:	4619      	mov	r1, r3
 8009efa:	f7fe fc17 	bl	800872c <USBD_LL_DataOutStage>
}
 8009efe:	bf00      	nop
 8009f00:	3708      	adds	r7, #8
 8009f02:	46bd      	mov	sp, r7
 8009f04:	bd80      	pop	{r7, pc}

08009f06 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009f06:	b580      	push	{r7, lr}
 8009f08:	b082      	sub	sp, #8
 8009f0a:	af00      	add	r7, sp, #0
 8009f0c:	6078      	str	r0, [r7, #4]
 8009f0e:	460b      	mov	r3, r1
 8009f10:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8009f18:	78fa      	ldrb	r2, [r7, #3]
 8009f1a:	6879      	ldr	r1, [r7, #4]
 8009f1c:	4613      	mov	r3, r2
 8009f1e:	00db      	lsls	r3, r3, #3
 8009f20:	4413      	add	r3, r2
 8009f22:	009b      	lsls	r3, r3, #2
 8009f24:	440b      	add	r3, r1
 8009f26:	334c      	adds	r3, #76	; 0x4c
 8009f28:	681a      	ldr	r2, [r3, #0]
 8009f2a:	78fb      	ldrb	r3, [r7, #3]
 8009f2c:	4619      	mov	r1, r3
 8009f2e:	f7fe fcb0 	bl	8008892 <USBD_LL_DataInStage>
}
 8009f32:	bf00      	nop
 8009f34:	3708      	adds	r7, #8
 8009f36:	46bd      	mov	sp, r7
 8009f38:	bd80      	pop	{r7, pc}

08009f3a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009f3a:	b580      	push	{r7, lr}
 8009f3c:	b082      	sub	sp, #8
 8009f3e:	af00      	add	r7, sp, #0
 8009f40:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009f48:	4618      	mov	r0, r3
 8009f4a:	f7fe fde4 	bl	8008b16 <USBD_LL_SOF>
}
 8009f4e:	bf00      	nop
 8009f50:	3708      	adds	r7, #8
 8009f52:	46bd      	mov	sp, r7
 8009f54:	bd80      	pop	{r7, pc}

08009f56 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009f56:	b580      	push	{r7, lr}
 8009f58:	b084      	sub	sp, #16
 8009f5a:	af00      	add	r7, sp, #0
 8009f5c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009f5e:	2301      	movs	r3, #1
 8009f60:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	68db      	ldr	r3, [r3, #12]
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	d102      	bne.n	8009f70 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8009f6a:	2300      	movs	r3, #0
 8009f6c:	73fb      	strb	r3, [r7, #15]
 8009f6e:	e008      	b.n	8009f82 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	68db      	ldr	r3, [r3, #12]
 8009f74:	2b02      	cmp	r3, #2
 8009f76:	d102      	bne.n	8009f7e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8009f78:	2301      	movs	r3, #1
 8009f7a:	73fb      	strb	r3, [r7, #15]
 8009f7c:	e001      	b.n	8009f82 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8009f7e:	f7f7 f915 	bl	80011ac <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009f88:	7bfa      	ldrb	r2, [r7, #15]
 8009f8a:	4611      	mov	r1, r2
 8009f8c:	4618      	mov	r0, r3
 8009f8e:	f7fe fd84 	bl	8008a9a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009f98:	4618      	mov	r0, r3
 8009f9a:	f7fe fd2c 	bl	80089f6 <USBD_LL_Reset>
}
 8009f9e:	bf00      	nop
 8009fa0:	3710      	adds	r7, #16
 8009fa2:	46bd      	mov	sp, r7
 8009fa4:	bd80      	pop	{r7, pc}
	...

08009fa8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009fa8:	b580      	push	{r7, lr}
 8009faa:	b082      	sub	sp, #8
 8009fac:	af00      	add	r7, sp, #0
 8009fae:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009fb6:	4618      	mov	r0, r3
 8009fb8:	f7fe fd7f 	bl	8008aba <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	687a      	ldr	r2, [r7, #4]
 8009fc8:	6812      	ldr	r2, [r2, #0]
 8009fca:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009fce:	f043 0301 	orr.w	r3, r3, #1
 8009fd2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	6a1b      	ldr	r3, [r3, #32]
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	d005      	beq.n	8009fe8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009fdc:	4b04      	ldr	r3, [pc, #16]	; (8009ff0 <HAL_PCD_SuspendCallback+0x48>)
 8009fde:	691b      	ldr	r3, [r3, #16]
 8009fe0:	4a03      	ldr	r2, [pc, #12]	; (8009ff0 <HAL_PCD_SuspendCallback+0x48>)
 8009fe2:	f043 0306 	orr.w	r3, r3, #6
 8009fe6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009fe8:	bf00      	nop
 8009fea:	3708      	adds	r7, #8
 8009fec:	46bd      	mov	sp, r7
 8009fee:	bd80      	pop	{r7, pc}
 8009ff0:	e000ed00 	.word	0xe000ed00

08009ff4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009ff4:	b580      	push	{r7, lr}
 8009ff6:	b082      	sub	sp, #8
 8009ff8:	af00      	add	r7, sp, #0
 8009ffa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a002:	4618      	mov	r0, r3
 800a004:	f7fe fd6f 	bl	8008ae6 <USBD_LL_Resume>
}
 800a008:	bf00      	nop
 800a00a:	3708      	adds	r7, #8
 800a00c:	46bd      	mov	sp, r7
 800a00e:	bd80      	pop	{r7, pc}

0800a010 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a010:	b580      	push	{r7, lr}
 800a012:	b082      	sub	sp, #8
 800a014:	af00      	add	r7, sp, #0
 800a016:	6078      	str	r0, [r7, #4]
 800a018:	460b      	mov	r3, r1
 800a01a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a022:	78fa      	ldrb	r2, [r7, #3]
 800a024:	4611      	mov	r1, r2
 800a026:	4618      	mov	r0, r3
 800a028:	f7fe fdc7 	bl	8008bba <USBD_LL_IsoOUTIncomplete>
}
 800a02c:	bf00      	nop
 800a02e:	3708      	adds	r7, #8
 800a030:	46bd      	mov	sp, r7
 800a032:	bd80      	pop	{r7, pc}

0800a034 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a034:	b580      	push	{r7, lr}
 800a036:	b082      	sub	sp, #8
 800a038:	af00      	add	r7, sp, #0
 800a03a:	6078      	str	r0, [r7, #4]
 800a03c:	460b      	mov	r3, r1
 800a03e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a046:	78fa      	ldrb	r2, [r7, #3]
 800a048:	4611      	mov	r1, r2
 800a04a:	4618      	mov	r0, r3
 800a04c:	f7fe fd83 	bl	8008b56 <USBD_LL_IsoINIncomplete>
}
 800a050:	bf00      	nop
 800a052:	3708      	adds	r7, #8
 800a054:	46bd      	mov	sp, r7
 800a056:	bd80      	pop	{r7, pc}

0800a058 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a058:	b580      	push	{r7, lr}
 800a05a:	b082      	sub	sp, #8
 800a05c:	af00      	add	r7, sp, #0
 800a05e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a066:	4618      	mov	r0, r3
 800a068:	f7fe fdd9 	bl	8008c1e <USBD_LL_DevConnected>
}
 800a06c:	bf00      	nop
 800a06e:	3708      	adds	r7, #8
 800a070:	46bd      	mov	sp, r7
 800a072:	bd80      	pop	{r7, pc}

0800a074 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a074:	b580      	push	{r7, lr}
 800a076:	b082      	sub	sp, #8
 800a078:	af00      	add	r7, sp, #0
 800a07a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a082:	4618      	mov	r0, r3
 800a084:	f7fe fdd6 	bl	8008c34 <USBD_LL_DevDisconnected>
}
 800a088:	bf00      	nop
 800a08a:	3708      	adds	r7, #8
 800a08c:	46bd      	mov	sp, r7
 800a08e:	bd80      	pop	{r7, pc}

0800a090 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a090:	b580      	push	{r7, lr}
 800a092:	b082      	sub	sp, #8
 800a094:	af00      	add	r7, sp, #0
 800a096:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	781b      	ldrb	r3, [r3, #0]
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	d13c      	bne.n	800a11a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800a0a0:	4a20      	ldr	r2, [pc, #128]	; (800a124 <USBD_LL_Init+0x94>)
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	4a1e      	ldr	r2, [pc, #120]	; (800a124 <USBD_LL_Init+0x94>)
 800a0ac:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800a0b0:	4b1c      	ldr	r3, [pc, #112]	; (800a124 <USBD_LL_Init+0x94>)
 800a0b2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800a0b6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800a0b8:	4b1a      	ldr	r3, [pc, #104]	; (800a124 <USBD_LL_Init+0x94>)
 800a0ba:	2204      	movs	r2, #4
 800a0bc:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800a0be:	4b19      	ldr	r3, [pc, #100]	; (800a124 <USBD_LL_Init+0x94>)
 800a0c0:	2202      	movs	r2, #2
 800a0c2:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800a0c4:	4b17      	ldr	r3, [pc, #92]	; (800a124 <USBD_LL_Init+0x94>)
 800a0c6:	2200      	movs	r2, #0
 800a0c8:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800a0ca:	4b16      	ldr	r3, [pc, #88]	; (800a124 <USBD_LL_Init+0x94>)
 800a0cc:	2202      	movs	r2, #2
 800a0ce:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800a0d0:	4b14      	ldr	r3, [pc, #80]	; (800a124 <USBD_LL_Init+0x94>)
 800a0d2:	2200      	movs	r2, #0
 800a0d4:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800a0d6:	4b13      	ldr	r3, [pc, #76]	; (800a124 <USBD_LL_Init+0x94>)
 800a0d8:	2200      	movs	r2, #0
 800a0da:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800a0dc:	4b11      	ldr	r3, [pc, #68]	; (800a124 <USBD_LL_Init+0x94>)
 800a0de:	2200      	movs	r2, #0
 800a0e0:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800a0e2:	4b10      	ldr	r3, [pc, #64]	; (800a124 <USBD_LL_Init+0x94>)
 800a0e4:	2201      	movs	r2, #1
 800a0e6:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800a0e8:	4b0e      	ldr	r3, [pc, #56]	; (800a124 <USBD_LL_Init+0x94>)
 800a0ea:	2200      	movs	r2, #0
 800a0ec:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800a0ee:	480d      	ldr	r0, [pc, #52]	; (800a124 <USBD_LL_Init+0x94>)
 800a0f0:	f7f9 fc4e 	bl	8003990 <HAL_PCD_Init>
 800a0f4:	4603      	mov	r3, r0
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	d001      	beq.n	800a0fe <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800a0fa:	f7f7 f857 	bl	80011ac <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800a0fe:	2180      	movs	r1, #128	; 0x80
 800a100:	4808      	ldr	r0, [pc, #32]	; (800a124 <USBD_LL_Init+0x94>)
 800a102:	f7fa fe8e 	bl	8004e22 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800a106:	2240      	movs	r2, #64	; 0x40
 800a108:	2100      	movs	r1, #0
 800a10a:	4806      	ldr	r0, [pc, #24]	; (800a124 <USBD_LL_Init+0x94>)
 800a10c:	f7fa fe42 	bl	8004d94 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800a110:	2280      	movs	r2, #128	; 0x80
 800a112:	2101      	movs	r1, #1
 800a114:	4803      	ldr	r0, [pc, #12]	; (800a124 <USBD_LL_Init+0x94>)
 800a116:	f7fa fe3d 	bl	8004d94 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800a11a:	2300      	movs	r3, #0
}
 800a11c:	4618      	mov	r0, r3
 800a11e:	3708      	adds	r7, #8
 800a120:	46bd      	mov	sp, r7
 800a122:	bd80      	pop	{r7, pc}
 800a124:	20000c14 	.word	0x20000c14

0800a128 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a128:	b580      	push	{r7, lr}
 800a12a:	b084      	sub	sp, #16
 800a12c:	af00      	add	r7, sp, #0
 800a12e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a130:	2300      	movs	r3, #0
 800a132:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a134:	2300      	movs	r3, #0
 800a136:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a13e:	4618      	mov	r0, r3
 800a140:	f7f9 fd43 	bl	8003bca <HAL_PCD_Start>
 800a144:	4603      	mov	r3, r0
 800a146:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a148:	7bfb      	ldrb	r3, [r7, #15]
 800a14a:	4618      	mov	r0, r3
 800a14c:	f000 f930 	bl	800a3b0 <USBD_Get_USB_Status>
 800a150:	4603      	mov	r3, r0
 800a152:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a154:	7bbb      	ldrb	r3, [r7, #14]
}
 800a156:	4618      	mov	r0, r3
 800a158:	3710      	adds	r7, #16
 800a15a:	46bd      	mov	sp, r7
 800a15c:	bd80      	pop	{r7, pc}

0800a15e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a15e:	b580      	push	{r7, lr}
 800a160:	b084      	sub	sp, #16
 800a162:	af00      	add	r7, sp, #0
 800a164:	6078      	str	r0, [r7, #4]
 800a166:	4608      	mov	r0, r1
 800a168:	4611      	mov	r1, r2
 800a16a:	461a      	mov	r2, r3
 800a16c:	4603      	mov	r3, r0
 800a16e:	70fb      	strb	r3, [r7, #3]
 800a170:	460b      	mov	r3, r1
 800a172:	70bb      	strb	r3, [r7, #2]
 800a174:	4613      	mov	r3, r2
 800a176:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a178:	2300      	movs	r3, #0
 800a17a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a17c:	2300      	movs	r3, #0
 800a17e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800a186:	78bb      	ldrb	r3, [r7, #2]
 800a188:	883a      	ldrh	r2, [r7, #0]
 800a18a:	78f9      	ldrb	r1, [r7, #3]
 800a18c:	f7fa fa14 	bl	80045b8 <HAL_PCD_EP_Open>
 800a190:	4603      	mov	r3, r0
 800a192:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a194:	7bfb      	ldrb	r3, [r7, #15]
 800a196:	4618      	mov	r0, r3
 800a198:	f000 f90a 	bl	800a3b0 <USBD_Get_USB_Status>
 800a19c:	4603      	mov	r3, r0
 800a19e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a1a0:	7bbb      	ldrb	r3, [r7, #14]
}
 800a1a2:	4618      	mov	r0, r3
 800a1a4:	3710      	adds	r7, #16
 800a1a6:	46bd      	mov	sp, r7
 800a1a8:	bd80      	pop	{r7, pc}

0800a1aa <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a1aa:	b580      	push	{r7, lr}
 800a1ac:	b084      	sub	sp, #16
 800a1ae:	af00      	add	r7, sp, #0
 800a1b0:	6078      	str	r0, [r7, #4]
 800a1b2:	460b      	mov	r3, r1
 800a1b4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a1b6:	2300      	movs	r3, #0
 800a1b8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a1ba:	2300      	movs	r3, #0
 800a1bc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a1c4:	78fa      	ldrb	r2, [r7, #3]
 800a1c6:	4611      	mov	r1, r2
 800a1c8:	4618      	mov	r0, r3
 800a1ca:	f7fa fa5d 	bl	8004688 <HAL_PCD_EP_Close>
 800a1ce:	4603      	mov	r3, r0
 800a1d0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a1d2:	7bfb      	ldrb	r3, [r7, #15]
 800a1d4:	4618      	mov	r0, r3
 800a1d6:	f000 f8eb 	bl	800a3b0 <USBD_Get_USB_Status>
 800a1da:	4603      	mov	r3, r0
 800a1dc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a1de:	7bbb      	ldrb	r3, [r7, #14]
}
 800a1e0:	4618      	mov	r0, r3
 800a1e2:	3710      	adds	r7, #16
 800a1e4:	46bd      	mov	sp, r7
 800a1e6:	bd80      	pop	{r7, pc}

0800a1e8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a1e8:	b580      	push	{r7, lr}
 800a1ea:	b084      	sub	sp, #16
 800a1ec:	af00      	add	r7, sp, #0
 800a1ee:	6078      	str	r0, [r7, #4]
 800a1f0:	460b      	mov	r3, r1
 800a1f2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a1f4:	2300      	movs	r3, #0
 800a1f6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a1f8:	2300      	movs	r3, #0
 800a1fa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a202:	78fa      	ldrb	r2, [r7, #3]
 800a204:	4611      	mov	r1, r2
 800a206:	4618      	mov	r0, r3
 800a208:	f7fa fb1d 	bl	8004846 <HAL_PCD_EP_SetStall>
 800a20c:	4603      	mov	r3, r0
 800a20e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a210:	7bfb      	ldrb	r3, [r7, #15]
 800a212:	4618      	mov	r0, r3
 800a214:	f000 f8cc 	bl	800a3b0 <USBD_Get_USB_Status>
 800a218:	4603      	mov	r3, r0
 800a21a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a21c:	7bbb      	ldrb	r3, [r7, #14]
}
 800a21e:	4618      	mov	r0, r3
 800a220:	3710      	adds	r7, #16
 800a222:	46bd      	mov	sp, r7
 800a224:	bd80      	pop	{r7, pc}

0800a226 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a226:	b580      	push	{r7, lr}
 800a228:	b084      	sub	sp, #16
 800a22a:	af00      	add	r7, sp, #0
 800a22c:	6078      	str	r0, [r7, #4]
 800a22e:	460b      	mov	r3, r1
 800a230:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a232:	2300      	movs	r3, #0
 800a234:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a236:	2300      	movs	r3, #0
 800a238:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a240:	78fa      	ldrb	r2, [r7, #3]
 800a242:	4611      	mov	r1, r2
 800a244:	4618      	mov	r0, r3
 800a246:	f7fa fb62 	bl	800490e <HAL_PCD_EP_ClrStall>
 800a24a:	4603      	mov	r3, r0
 800a24c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a24e:	7bfb      	ldrb	r3, [r7, #15]
 800a250:	4618      	mov	r0, r3
 800a252:	f000 f8ad 	bl	800a3b0 <USBD_Get_USB_Status>
 800a256:	4603      	mov	r3, r0
 800a258:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a25a:	7bbb      	ldrb	r3, [r7, #14]
}
 800a25c:	4618      	mov	r0, r3
 800a25e:	3710      	adds	r7, #16
 800a260:	46bd      	mov	sp, r7
 800a262:	bd80      	pop	{r7, pc}

0800a264 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a264:	b480      	push	{r7}
 800a266:	b085      	sub	sp, #20
 800a268:	af00      	add	r7, sp, #0
 800a26a:	6078      	str	r0, [r7, #4]
 800a26c:	460b      	mov	r3, r1
 800a26e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a276:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a278:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	da0b      	bge.n	800a298 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a280:	78fb      	ldrb	r3, [r7, #3]
 800a282:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a286:	68f9      	ldr	r1, [r7, #12]
 800a288:	4613      	mov	r3, r2
 800a28a:	00db      	lsls	r3, r3, #3
 800a28c:	4413      	add	r3, r2
 800a28e:	009b      	lsls	r3, r3, #2
 800a290:	440b      	add	r3, r1
 800a292:	333e      	adds	r3, #62	; 0x3e
 800a294:	781b      	ldrb	r3, [r3, #0]
 800a296:	e00b      	b.n	800a2b0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a298:	78fb      	ldrb	r3, [r7, #3]
 800a29a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a29e:	68f9      	ldr	r1, [r7, #12]
 800a2a0:	4613      	mov	r3, r2
 800a2a2:	00db      	lsls	r3, r3, #3
 800a2a4:	4413      	add	r3, r2
 800a2a6:	009b      	lsls	r3, r3, #2
 800a2a8:	440b      	add	r3, r1
 800a2aa:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800a2ae:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a2b0:	4618      	mov	r0, r3
 800a2b2:	3714      	adds	r7, #20
 800a2b4:	46bd      	mov	sp, r7
 800a2b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ba:	4770      	bx	lr

0800a2bc <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a2bc:	b580      	push	{r7, lr}
 800a2be:	b084      	sub	sp, #16
 800a2c0:	af00      	add	r7, sp, #0
 800a2c2:	6078      	str	r0, [r7, #4]
 800a2c4:	460b      	mov	r3, r1
 800a2c6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a2c8:	2300      	movs	r3, #0
 800a2ca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a2cc:	2300      	movs	r3, #0
 800a2ce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a2d6:	78fa      	ldrb	r2, [r7, #3]
 800a2d8:	4611      	mov	r1, r2
 800a2da:	4618      	mov	r0, r3
 800a2dc:	f7fa f947 	bl	800456e <HAL_PCD_SetAddress>
 800a2e0:	4603      	mov	r3, r0
 800a2e2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a2e4:	7bfb      	ldrb	r3, [r7, #15]
 800a2e6:	4618      	mov	r0, r3
 800a2e8:	f000 f862 	bl	800a3b0 <USBD_Get_USB_Status>
 800a2ec:	4603      	mov	r3, r0
 800a2ee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a2f0:	7bbb      	ldrb	r3, [r7, #14]
}
 800a2f2:	4618      	mov	r0, r3
 800a2f4:	3710      	adds	r7, #16
 800a2f6:	46bd      	mov	sp, r7
 800a2f8:	bd80      	pop	{r7, pc}

0800a2fa <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a2fa:	b580      	push	{r7, lr}
 800a2fc:	b086      	sub	sp, #24
 800a2fe:	af00      	add	r7, sp, #0
 800a300:	60f8      	str	r0, [r7, #12]
 800a302:	607a      	str	r2, [r7, #4]
 800a304:	603b      	str	r3, [r7, #0]
 800a306:	460b      	mov	r3, r1
 800a308:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a30a:	2300      	movs	r3, #0
 800a30c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a30e:	2300      	movs	r3, #0
 800a310:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a312:	68fb      	ldr	r3, [r7, #12]
 800a314:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800a318:	7af9      	ldrb	r1, [r7, #11]
 800a31a:	683b      	ldr	r3, [r7, #0]
 800a31c:	687a      	ldr	r2, [r7, #4]
 800a31e:	f7fa fa48 	bl	80047b2 <HAL_PCD_EP_Transmit>
 800a322:	4603      	mov	r3, r0
 800a324:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a326:	7dfb      	ldrb	r3, [r7, #23]
 800a328:	4618      	mov	r0, r3
 800a32a:	f000 f841 	bl	800a3b0 <USBD_Get_USB_Status>
 800a32e:	4603      	mov	r3, r0
 800a330:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a332:	7dbb      	ldrb	r3, [r7, #22]
}
 800a334:	4618      	mov	r0, r3
 800a336:	3718      	adds	r7, #24
 800a338:	46bd      	mov	sp, r7
 800a33a:	bd80      	pop	{r7, pc}

0800a33c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a33c:	b580      	push	{r7, lr}
 800a33e:	b086      	sub	sp, #24
 800a340:	af00      	add	r7, sp, #0
 800a342:	60f8      	str	r0, [r7, #12]
 800a344:	607a      	str	r2, [r7, #4]
 800a346:	603b      	str	r3, [r7, #0]
 800a348:	460b      	mov	r3, r1
 800a34a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a34c:	2300      	movs	r3, #0
 800a34e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a350:	2300      	movs	r3, #0
 800a352:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800a35a:	7af9      	ldrb	r1, [r7, #11]
 800a35c:	683b      	ldr	r3, [r7, #0]
 800a35e:	687a      	ldr	r2, [r7, #4]
 800a360:	f7fa f9dc 	bl	800471c <HAL_PCD_EP_Receive>
 800a364:	4603      	mov	r3, r0
 800a366:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a368:	7dfb      	ldrb	r3, [r7, #23]
 800a36a:	4618      	mov	r0, r3
 800a36c:	f000 f820 	bl	800a3b0 <USBD_Get_USB_Status>
 800a370:	4603      	mov	r3, r0
 800a372:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a374:	7dbb      	ldrb	r3, [r7, #22]
}
 800a376:	4618      	mov	r0, r3
 800a378:	3718      	adds	r7, #24
 800a37a:	46bd      	mov	sp, r7
 800a37c:	bd80      	pop	{r7, pc}
	...

0800a380 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800a380:	b480      	push	{r7}
 800a382:	b083      	sub	sp, #12
 800a384:	af00      	add	r7, sp, #0
 800a386:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CUSTOM_HID_HandleTypeDef)/4+1)];/* On 32-bit boundary */
  return mem;
 800a388:	4b03      	ldr	r3, [pc, #12]	; (800a398 <USBD_static_malloc+0x18>)
}
 800a38a:	4618      	mov	r0, r3
 800a38c:	370c      	adds	r7, #12
 800a38e:	46bd      	mov	sp, r7
 800a390:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a394:	4770      	bx	lr
 800a396:	bf00      	nop
 800a398:	20001120 	.word	0x20001120

0800a39c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800a39c:	b480      	push	{r7}
 800a39e:	b083      	sub	sp, #12
 800a3a0:	af00      	add	r7, sp, #0
 800a3a2:	6078      	str	r0, [r7, #4]

}
 800a3a4:	bf00      	nop
 800a3a6:	370c      	adds	r7, #12
 800a3a8:	46bd      	mov	sp, r7
 800a3aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ae:	4770      	bx	lr

0800a3b0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a3b0:	b480      	push	{r7}
 800a3b2:	b085      	sub	sp, #20
 800a3b4:	af00      	add	r7, sp, #0
 800a3b6:	4603      	mov	r3, r0
 800a3b8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a3ba:	2300      	movs	r3, #0
 800a3bc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a3be:	79fb      	ldrb	r3, [r7, #7]
 800a3c0:	2b03      	cmp	r3, #3
 800a3c2:	d817      	bhi.n	800a3f4 <USBD_Get_USB_Status+0x44>
 800a3c4:	a201      	add	r2, pc, #4	; (adr r2, 800a3cc <USBD_Get_USB_Status+0x1c>)
 800a3c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3ca:	bf00      	nop
 800a3cc:	0800a3dd 	.word	0x0800a3dd
 800a3d0:	0800a3e3 	.word	0x0800a3e3
 800a3d4:	0800a3e9 	.word	0x0800a3e9
 800a3d8:	0800a3ef 	.word	0x0800a3ef
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a3dc:	2300      	movs	r3, #0
 800a3de:	73fb      	strb	r3, [r7, #15]
    break;
 800a3e0:	e00b      	b.n	800a3fa <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a3e2:	2303      	movs	r3, #3
 800a3e4:	73fb      	strb	r3, [r7, #15]
    break;
 800a3e6:	e008      	b.n	800a3fa <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a3e8:	2301      	movs	r3, #1
 800a3ea:	73fb      	strb	r3, [r7, #15]
    break;
 800a3ec:	e005      	b.n	800a3fa <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a3ee:	2303      	movs	r3, #3
 800a3f0:	73fb      	strb	r3, [r7, #15]
    break;
 800a3f2:	e002      	b.n	800a3fa <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800a3f4:	2303      	movs	r3, #3
 800a3f6:	73fb      	strb	r3, [r7, #15]
    break;
 800a3f8:	bf00      	nop
  }
  return usb_status;
 800a3fa:	7bfb      	ldrb	r3, [r7, #15]
}
 800a3fc:	4618      	mov	r0, r3
 800a3fe:	3714      	adds	r7, #20
 800a400:	46bd      	mov	sp, r7
 800a402:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a406:	4770      	bx	lr

0800a408 <__libc_init_array>:
 800a408:	b570      	push	{r4, r5, r6, lr}
 800a40a:	4d0d      	ldr	r5, [pc, #52]	; (800a440 <__libc_init_array+0x38>)
 800a40c:	4c0d      	ldr	r4, [pc, #52]	; (800a444 <__libc_init_array+0x3c>)
 800a40e:	1b64      	subs	r4, r4, r5
 800a410:	10a4      	asrs	r4, r4, #2
 800a412:	2600      	movs	r6, #0
 800a414:	42a6      	cmp	r6, r4
 800a416:	d109      	bne.n	800a42c <__libc_init_array+0x24>
 800a418:	4d0b      	ldr	r5, [pc, #44]	; (800a448 <__libc_init_array+0x40>)
 800a41a:	4c0c      	ldr	r4, [pc, #48]	; (800a44c <__libc_init_array+0x44>)
 800a41c:	f000 f820 	bl	800a460 <_init>
 800a420:	1b64      	subs	r4, r4, r5
 800a422:	10a4      	asrs	r4, r4, #2
 800a424:	2600      	movs	r6, #0
 800a426:	42a6      	cmp	r6, r4
 800a428:	d105      	bne.n	800a436 <__libc_init_array+0x2e>
 800a42a:	bd70      	pop	{r4, r5, r6, pc}
 800a42c:	f855 3b04 	ldr.w	r3, [r5], #4
 800a430:	4798      	blx	r3
 800a432:	3601      	adds	r6, #1
 800a434:	e7ee      	b.n	800a414 <__libc_init_array+0xc>
 800a436:	f855 3b04 	ldr.w	r3, [r5], #4
 800a43a:	4798      	blx	r3
 800a43c:	3601      	adds	r6, #1
 800a43e:	e7f2      	b.n	800a426 <__libc_init_array+0x1e>
 800a440:	0800c00c 	.word	0x0800c00c
 800a444:	0800c00c 	.word	0x0800c00c
 800a448:	0800c00c 	.word	0x0800c00c
 800a44c:	0800c010 	.word	0x0800c010

0800a450 <memset>:
 800a450:	4402      	add	r2, r0
 800a452:	4603      	mov	r3, r0
 800a454:	4293      	cmp	r3, r2
 800a456:	d100      	bne.n	800a45a <memset+0xa>
 800a458:	4770      	bx	lr
 800a45a:	f803 1b01 	strb.w	r1, [r3], #1
 800a45e:	e7f9      	b.n	800a454 <memset+0x4>

0800a460 <_init>:
 800a460:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a462:	bf00      	nop
 800a464:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a466:	bc08      	pop	{r3}
 800a468:	469e      	mov	lr, r3
 800a46a:	4770      	bx	lr

0800a46c <_fini>:
 800a46c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a46e:	bf00      	nop
 800a470:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a472:	bc08      	pop	{r3}
 800a474:	469e      	mov	lr, r3
 800a476:	4770      	bx	lr
